
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d00  08010f54  08010f54  00020f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013c54  08013c54  00023c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013c58  08013c58  00023c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08013c5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030070  2**0
                  CONTENTS
  7 .bss          00001890  20000070  20000070  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20001900  20001900  00030070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032d26  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000061d5  00000000  00000000  00062dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013c8  00000000  00000000  00068fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001340  00000000  00000000  0006a368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e38a  00000000  00000000  0006b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050b2  00000000  00000000  00079a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007eae4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005284  00000000  00000000  0007eb60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010f3c 	.word	0x08010f3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08010f3c 	.word	0x08010f3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <send_gsm_command_by_index>:
#include <string.h>
#include <stdbool.h>
#include "uart_line_queue.h"// định nghĩa tạm thời cho biến ppp_mode để xác định trạng thái 

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db1d      	blt.n	80002ca <send_gsm_command_by_index+0x4a>
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <send_gsm_command_by_index+0x54>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	da18      	bge.n	80002ca <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <send_gsm_command_by_index+0x58>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	4413      	add	r3, r2
 80002a0:	3304      	adds	r3, #4
 80002a2:	681c      	ldr	r4, [r3, #0]
 80002a4:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <send_gsm_command_by_index+0x58>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	4413      	add	r3, r2
 80002ac:	3304      	adds	r3, #4
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff8d 	bl	80001d0 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4619      	mov	r1, r3
 80002ba:	4620      	mov	r0, r4
 80002bc:	f000 fcc2 	bl	8000c44 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 80002c0:	2102      	movs	r1, #2
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <send_gsm_command_by_index+0x5c>)
 80002c4:	f000 fcbe 	bl	8000c44 <uart1_send_raw>
 80002c8:	e000      	b.n	80002cc <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002ca:	bf00      	nop
}
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd90      	pop	{r4, r7, pc}
 80002d2:	bf00      	nop
 80002d4:	08013794 	.word	0x08013794
 80002d8:	080136e4 	.word	0x080136e4
 80002dc:	08010f54 	.word	0x08010f54

080002e0 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0d8      	sub	sp, #352	; 0x160
 80002e4:	af02      	add	r7, sp, #8
    char response[256];

    for (int i = 0; i < gsm_commands_count; i++) { 
 80002e6:	2300      	movs	r3, #0
 80002e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80002ec:	e080      	b.n	80003f0 <send_all_gsm_commands_with_check+0x110>
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Dang gui lenh case %d: %s", i, gsm_commands[i].command);
 80002ee:	4a46      	ldr	r2, [pc, #280]	; (8000408 <send_all_gsm_commands_with_check+0x128>)
 80002f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	4413      	add	r3, r2
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1d38      	adds	r0, r7, #4
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000302:	4a42      	ldr	r2, [pc, #264]	; (800040c <send_all_gsm_commands_with_check+0x12c>)
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	f010 fa13 	bl	8010730 <sniprintf>
        //uart_log(log_buf);

        uint32_t start_tick = timer2_get_tick();
 800030a:	f000 fb7d 	bl	8000a08 <timer2_get_tick>
 800030e:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
        uint32_t wait_time = gsm_commands[i].max_response_time_ms;
 8000312:	4a3d      	ldr	r2, [pc, #244]	; (8000408 <send_all_gsm_commands_with_check+0x128>)
 8000314:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	4413      	add	r3, r2
 800031c:	330c      	adds	r3, #12
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        bool ok = false;
 8000324:	2300      	movs	r3, #0
 8000326:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        uint32_t last_send_tick = start_tick - 5000;
 800032a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800032e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000332:	3b08      	subs	r3, #8
 8000334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

        while ((timer2_get_tick() - start_tick) < wait_time) {
 8000338:	e02f      	b.n	800039a <send_all_gsm_commands_with_check+0xba>
            if ((timer2_get_tick() - last_send_tick) >= 5000) {
 800033a:	f000 fb65 	bl	8000a08 <timer2_get_tick>
 800033e:	4602      	mov	r2, r0
 8000340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	f241 3287 	movw	r2, #4999	; 0x1387
 800034a:	4293      	cmp	r3, r2
 800034c:	d916      	bls.n	800037c <send_all_gsm_commands_with_check+0x9c>
                send_gsm_command_by_index(i);
 800034e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8000352:	f7ff ff95 	bl	8000280 <send_gsm_command_by_index>
                last_send_tick = timer2_get_tick();
 8000356:	f000 fb57 	bl	8000a08 <timer2_get_tick>
 800035a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
            }
            while (uart_line_queue_pop(response)) {
 800035e:	e00d      	b.n	800037c <send_all_gsm_commands_with_check+0x9c>
                if (check_gsm_response_by_index(i, response)) {
 8000360:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000364:	4619      	mov	r1, r3
 8000366:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800036a:	f000 f965 	bl	8000638 <check_gsm_response_by_index>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d003      	beq.n	800037c <send_all_gsm_commands_with_check+0x9c>
                    ok = true;
 8000374:	2301      	movs	r3, #1
 8000376:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
                    break;
 800037a:	e007      	b.n	800038c <send_all_gsm_commands_with_check+0xac>
            while (uart_line_queue_pop(response)) {
 800037c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fe57 	bl	8001034 <uart_line_queue_pop>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1e9      	bne.n	8000360 <send_all_gsm_commands_with_check+0x80>
                }
            }
            if (ok) break;
 800038c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8000390:	2b00      	cmp	r3, #0
 8000392:	d10d      	bne.n	80003b0 <send_all_gsm_commands_with_check+0xd0>
            delay_ms(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f000 fb43 	bl	8000a20 <delay_ms>
        while ((timer2_get_tick() - start_tick) < wait_time) {
 800039a:	f000 fb35 	bl	8000a08 <timer2_get_tick>
 800039e:	4602      	mov	r2, r0
 80003a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80003a4:	1ad2      	subs	r2, r2, r3
 80003a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3c5      	bcc.n	800033a <send_all_gsm_commands_with_check+0x5a>
 80003ae:	e000      	b.n	80003b2 <send_all_gsm_commands_with_check+0xd2>
            if (ok) break;
 80003b0:	bf00      	nop
        }
        if (!ok) {
 80003b2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80003b6:	f083 0301 	eor.w	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d012      	beq.n	80003e6 <send_all_gsm_commands_with_check+0x106>
            snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", i, gsm_commands[i].command);
 80003c0:	4a11      	ldr	r2, [pc, #68]	; (8000408 <send_all_gsm_commands_with_check+0x128>)
 80003c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	4413      	add	r3, r2
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1d38      	adds	r0, r7, #4
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <send_all_gsm_commands_with_check+0x130>)
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	f010 f9aa 	bl	8010730 <sniprintf>
            uart_log(log_buf);
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fbf8 	bl	8000bd4 <uart_log>
            break;
        }
    }
 80003e4:	e00b      	b.n	80003fe <send_all_gsm_commands_with_check+0x11e>
    for (int i = 0; i < gsm_commands_count; i++) { 
 80003e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80003ea:	3301      	adds	r3, #1
 80003ec:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <send_all_gsm_commands_with_check+0x134>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80003f8:	429a      	cmp	r2, r3
 80003fa:	f6ff af78 	blt.w	80002ee <send_all_gsm_commands_with_check+0xe>
 80003fe:	bf00      	nop
 8000400:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	080136e4 	.word	0x080136e4
 800040c:	08010f58 	.word	0x08010f58
 8000410:	08010f74 	.word	0x08010f74
 8000414:	08013794 	.word	0x08013794

08000418 <parse_response_at>:
#include <stdio.h>
#include "gsm_state.h"


// Hàm phân tích phản hồi cho lệnh "AT"
bool parse_response_at(const char* response) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 fbd7 	bl	8000bd4 <uart_log>
    return strstr(response, "OK") != NULL;
 8000426:	4907      	ldr	r1, [pc, #28]	; (8000444 <parse_response_at+0x2c>)
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f010 fa0d 	bl	8010848 <strstr>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf14      	ite	ne
 8000434:	2301      	movne	r3, #1
 8000436:	2300      	moveq	r3, #0
 8000438:	b2db      	uxtb	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	080110f4 	.word	0x080110f4

08000448 <parse_response_ati>:

// Hàm phân tích phản hồi cho lệnh "ATI"
bool parse_response_ati(const char* response) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f000 fbbf 	bl	8000bd4 <uart_log>
    return strstr(response, "Manufacturer: INCORPORATED") != NULL; // Dòng dữ liệu chính
 8000456:	4907      	ldr	r1, [pc, #28]	; (8000474 <parse_response_ati+0x2c>)
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f010 f9f5 	bl	8010848 <strstr>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	bf14      	ite	ne
 8000464:	2301      	movne	r3, #1
 8000466:	2300      	moveq	r3, #0
 8000468:	b2db      	uxtb	r3, r3
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	080110f8 	.word	0x080110f8

08000478 <parse_response_at_cpin>:

// Hàm phân tích phản hồi cho lệnh "AT+CPIN?"
bool parse_response_at_cpin(const char* response) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 fba7 	bl	8000bd4 <uart_log>
    return strstr(response, "+CPIN: READY") != NULL; // Dòng dữ liệu chính
 8000486:	4907      	ldr	r1, [pc, #28]	; (80004a4 <parse_response_at_cpin+0x2c>)
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f010 f9dd 	bl	8010848 <strstr>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	bf14      	ite	ne
 8000494:	2301      	movne	r3, #1
 8000496:	2300      	moveq	r3, #0
 8000498:	b2db      	uxtb	r3, r3
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	08011114 	.word	0x08011114

080004a8 <parse_response_at_csq>:

// Hàm phân tích phản hồi cho lệnh "AT+CSQ"
bool parse_response_at_csq(const char* response) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f000 fb8f 	bl	8000bd4 <uart_log>
    return strstr(response, "+CSQ:") != NULL; // Dòng dữ liệu chính
 80004b6:	4907      	ldr	r1, [pc, #28]	; (80004d4 <parse_response_at_csq+0x2c>)
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f010 f9c5 	bl	8010848 <strstr>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	bf14      	ite	ne
 80004c4:	2301      	movne	r3, #1
 80004c6:	2300      	moveq	r3, #0
 80004c8:	b2db      	uxtb	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	08011124 	.word	0x08011124

080004d8 <parse_response_at_cereg>:

// Hàm phân tích phản hồi cho lệnh "AT+CEREG?"
bool parse_response_at_cereg(const char* response) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 fb77 	bl	8000bd4 <uart_log>
    return strstr(response, "+CEREG:") != NULL; // Dòng dữ liệu chính
 80004e6:	4907      	ldr	r1, [pc, #28]	; (8000504 <parse_response_at_cereg+0x2c>)
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f010 f9ad 	bl	8010848 <strstr>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	bf14      	ite	ne
 80004f4:	2301      	movne	r3, #1
 80004f6:	2300      	moveq	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	0801112c 	.word	0x0801112c

08000508 <parse_response_at_cops>:

// Hàm phân tích phản hồi cho lệnh "AT+COPS"
bool parse_response_at_cops(const char* response) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 fb5f 	bl	8000bd4 <uart_log>
    return strstr(response, "+COPS=0") != NULL; // Dòng dữ liệu chính
 8000516:	4907      	ldr	r1, [pc, #28]	; (8000534 <parse_response_at_cops+0x2c>)
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f010 f995 	bl	8010848 <strstr>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	bf14      	ite	ne
 8000524:	2301      	movne	r3, #1
 8000526:	2300      	moveq	r3, #0
 8000528:	b2db      	uxtb	r3, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	08011134 	.word	0x08011134

08000538 <parse_response_at_cgdcont>:

// Hàm phân tích phản hồi cho lệnh "AT+CGDCONT"
bool parse_response_at_cgdcont(const char* response) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 fb47 	bl	8000bd4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000546:	4907      	ldr	r1, [pc, #28]	; (8000564 <parse_response_at_cgdcont+0x2c>)
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f010 f97d 	bl	8010848 <strstr>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	080110f4 	.word	0x080110f4

08000568 <parse_response_at_cgauth>:

// Hàm phân tích phản hồi cho lệnh "AT+CGAUTH"
bool parse_response_at_cgauth(const char* response) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 fb2f 	bl	8000bd4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000576:	4907      	ldr	r1, [pc, #28]	; (8000594 <parse_response_at_cgauth+0x2c>)
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f010 f965 	bl	8010848 <strstr>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	080110f4 	.word	0x080110f4

08000598 <parse_response_at_cgact>:

// Hàm phân tích phản hồi cho lệnh "AT+CGACT"
bool parse_response_at_cgact(const char* response) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 fb17 	bl	8000bd4 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 80005a6:	4907      	ldr	r1, [pc, #28]	; (80005c4 <parse_response_at_cgact+0x2c>)
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f010 f94d 	bl	8010848 <strstr>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bf14      	ite	ne
 80005b4:	2301      	movne	r3, #1
 80005b6:	2300      	moveq	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	080110f4 	.word	0x080110f4

080005c8 <parse_response_at_cgpaddr>:

// Hàm phân tích phản hồi cho lệnh "AT+CGPADDR"
bool parse_response_at_cgpaddr(const char* response) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 faff 	bl	8000bd4 <uart_log>
    return strstr(response, "+CGPADDR: 1,") != NULL; // Dòng dữ liệu chính
 80005d6:	4907      	ldr	r1, [pc, #28]	; (80005f4 <parse_response_at_cgpaddr+0x2c>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f010 f935 	bl	8010848 <strstr>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf14      	ite	ne
 80005e4:	2301      	movne	r3, #1
 80005e6:	2300      	moveq	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	0801113c 	.word	0x0801113c

080005f8 <parse_response_atd99>:
    uart_log(response);
    return strstr(response, "CONNECT") != NULL; // Dòng dữ liệu chính
}

// Hàm phân tích phản hồi cho lệnh "ATD*99#"
bool parse_response_atd99(const char* response) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    uart_log(response);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 fae7 	bl	8000bd4 <uart_log>
    if (strstr(response, "CONNECT") != NULL) {
 8000606:	490a      	ldr	r1, [pc, #40]	; (8000630 <parse_response_atd99+0x38>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f010 f91d 	bl	8010848 <strstr>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <parse_response_atd99+0x2e>
        ppp_mode = true;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <parse_response_atd99+0x3c>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
        uart_disable_uart1_irq();
 800061a:	f000 fc6f 	bl	8000efc <uart_disable_uart1_irq>
        restart_dma2_stream2(); // Khởi động lại DMA để nhận dữ liệu PPP
 800061e:	f000 fc83 	bl	8000f28 <restart_dma2_stream2>
        return true;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <parse_response_atd99+0x30>
    }
    return false;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	0801114c 	.word	0x0801114c
 8000634:	2000008c 	.word	0x2000008c

08000638 <check_gsm_response_by_index>:


bool ppp_mode = false;

// Hàm kiểm tra phản hồi dựa trên chỉ số lệnh trong gsm_commands
bool check_gsm_response_by_index(int idx, const char* response) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0a      	cmp	r3, #10
 8000646:	d855      	bhi.n	80006f4 <check_gsm_response_by_index+0xbc>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <check_gsm_response_by_index+0x18>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	0800067d 	.word	0x0800067d
 8000654:	08000687 	.word	0x08000687
 8000658:	08000691 	.word	0x08000691
 800065c:	0800069b 	.word	0x0800069b
 8000660:	080006a5 	.word	0x080006a5
 8000664:	080006af 	.word	0x080006af
 8000668:	080006c3 	.word	0x080006c3
 800066c:	080006cd 	.word	0x080006cd
 8000670:	080006d7 	.word	0x080006d7
 8000674:	080006e1 	.word	0x080006e1
 8000678:	080006eb 	.word	0x080006eb
        case 0: // AT
            return parse_response_at(response);
 800067c:	6838      	ldr	r0, [r7, #0]
 800067e:	f7ff fecb 	bl	8000418 <parse_response_at>
 8000682:	4603      	mov	r3, r0
 8000684:	e037      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 8000686:	6838      	ldr	r0, [r7, #0]
 8000688:	f7ff fede 	bl	8000448 <parse_response_ati>
 800068c:	4603      	mov	r3, r0
 800068e:	e032      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000690:	6838      	ldr	r0, [r7, #0]
 8000692:	f7ff fef1 	bl	8000478 <parse_response_at_cpin>
 8000696:	4603      	mov	r3, r0
 8000698:	e02d      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f7ff ff04 	bl	80004a8 <parse_response_at_csq>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e028      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f7ff ff17 	bl	80004d8 <parse_response_at_cereg>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e023      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 80006ae:	6838      	ldr	r0, [r7, #0]
 80006b0:	f7ff ff2a 	bl	8000508 <parse_response_at_cops>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	e019      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 80006c2:	6838      	ldr	r0, [r7, #0]
 80006c4:	f7ff ff38 	bl	8000538 <parse_response_at_cgdcont>
 80006c8:	4603      	mov	r3, r0
 80006ca:	e014      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 80006cc:	6838      	ldr	r0, [r7, #0]
 80006ce:	f7ff ff4b 	bl	8000568 <parse_response_at_cgauth>
 80006d2:	4603      	mov	r3, r0
 80006d4:	e00f      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f7ff ff5e 	bl	8000598 <parse_response_at_cgact>
 80006dc:	4603      	mov	r3, r0
 80006de:	e00a      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f7ff ff71 	bl	80005c8 <parse_response_at_cgpaddr>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e005      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	f7ff ff84 	bl	80005f8 <parse_response_atd99>
 80006f0:	4603      	mov	r3, r0
 80006f2:	e000      	b.n	80006f6 <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 80006f4:	2300      	movs	r3, #0
    }
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop

08000700 <button_init>:
#include "button.h"

void button_init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 800070a:	2300      	movs	r3, #0
 800070c:	71bb      	strb	r3, [r7, #6]
 800070e:	e008      	b.n	8000722 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <button_init+0x1c>
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	e005      	b.n	8000728 <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d9f3      	bls.n	8000710 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 8000728:	4912      	ldr	r1, [pc, #72]	; (8000774 <button_init+0x74>)
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <button_init+0x74>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2003      	movs	r0, #3
 8000734:	fa00 f303 	lsl.w	r3, r0, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4013      	ands	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <button_init+0x74>)
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <button_init+0x74>)
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2003      	movs	r0, #3
 800074a:	fa00 f303 	lsl.w	r3, r0, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	4013      	ands	r3, r2
 8000752:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <button_init+0x74>)
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <button_init+0x74>)
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2001      	movs	r0, #1
 8000760:	fa00 f303 	lsl.w	r3, r0, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	60cb      	str	r3, [r1, #12]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40020000 	.word	0x40020000

08000778 <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <hardware_init+0x54>)
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <hardware_init+0x54>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f043 0303 	orr.w	r3, r3, #3
 8000786:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <hardware_init+0x54>)
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <hardware_init+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <hardware_init+0x54>)
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <hardware_init+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; 
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <hardware_init+0x54>)
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <hardware_init+0x54>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ae:	6313      	str	r3, [r2, #48]	; 0x30


    timer2_init_1ms();
 80007b0:	f000 f8e2 	bl	8000978 <timer2_init_1ms>
    uart_line_queue_init();
 80007b4:	f000 fbe8 	bl	8000f88 <uart_line_queue_init>
    uart_init_all();
 80007b8:	f000 f97a 	bl	8000ab0 <uart_init_all>
    led_init();
 80007bc:	f000 f854 	bl	8000868 <led_init>
    button_init();
 80007c0:	f7ff ff9e 	bl	8000700 <button_init>
    gsm_module_power_cycle();
 80007c4:	f000 f804 	bl	80007d0 <gsm_module_power_cycle>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007e0:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ec:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f8:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <gsm_module_power_cycle+0x90>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000804:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <gsm_module_power_cycle+0x90>)
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <gsm_module_power_cycle+0x90>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000810:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <gsm_module_power_cycle+0x90>)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <gsm_module_power_cycle+0x90>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800081c:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e002      	b.n	800082a <gsm_module_power_cycle+0x5a>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <gsm_module_power_cycle+0x94>)
 800082e:	4293      	cmp	r3, r2
 8000830:	ddf8      	ble.n	8000824 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <gsm_module_power_cycle+0x90>)
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <gsm_module_power_cycle+0x90>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	e002      	b.n	800084a <gsm_module_power_cycle+0x7a>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <gsm_module_power_cycle+0x94>)
 800084e:	4293      	cmp	r3, r2
 8000850:	ddf8      	ble.n	8000844 <gsm_module_power_cycle+0x74>
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40020000 	.word	0x40020000
 8000864:	000f423f 	.word	0x000f423f

08000868 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 800086c:	4a34      	ldr	r2, [pc, #208]	; (8000940 <led_init+0xd8>)
 800086e:	4b34      	ldr	r3, [pc, #208]	; (8000940 <led_init+0xd8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000876:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 8000878:	4a31      	ldr	r2, [pc, #196]	; (8000940 <led_init+0xd8>)
 800087a:	4b31      	ldr	r3, [pc, #196]	; (8000940 <led_init+0xd8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000882:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000884:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <led_init+0xd8>)
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <led_init+0xd8>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800088e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 8000890:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <led_init+0xd8>)
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <led_init+0xd8>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800089a:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <led_init+0xd8>)
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <led_init+0xd8>)
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80008a6:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <led_init+0xd8>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80008b0:	4a23      	ldr	r2, [pc, #140]	; (8000940 <led_init+0xd8>)
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <led_init+0xd8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ba:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <led_init+0xd8>)
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <led_init+0xd8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <led_init+0xd8>)
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <led_init+0xd8>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f023 0310 	bic.w	r3, r3, #16
 80008d2:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <led_init+0xd8>)
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <led_init+0xd8>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008de:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <led_init+0xd8>)
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <led_init+0xd8>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ea:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <led_init+0xd8>)
 80008ee:	2210      	movs	r2, #16
 80008f0:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <led_init+0xd8>)
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <led_init+0xd8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008fc:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <led_init+0xd8>)
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <led_init+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000908:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 800090a:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <led_init+0xd8>)
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <led_init+0xd8>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f023 0320 	bic.w	r3, r3, #32
 8000914:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <led_init+0xd8>)
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <led_init+0xd8>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000920:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <led_init+0xd8>)
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <led_init+0xd8>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800092c:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <led_init+0xd8>)
 8000930:	2220      	movs	r2, #32
 8000932:	835a      	strh	r2, [r3, #26]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40020400 	.word	0x40020400

08000944 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800094e:	4909      	ldr	r1, [pc, #36]	; (8000974 <NVIC_EnableIRQ+0x30>)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	f002 021f 	and.w	r2, r2, #31
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 800097c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000980:	220f      	movs	r2, #15
 8000982:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 800098e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000992:	2201      	movs	r2, #1
 8000994:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099e:	899b      	ldrh	r3, [r3, #12]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 80009be:	201c      	movs	r0, #28
 80009c0:	f7ff ffc0 	bl	8000944 <NVIC_EnableIRQ>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80009cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d0:	8a1b      	ldrh	r3, [r3, #16]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	8a1b      	ldrh	r3, [r3, #16]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <TIM2_IRQHandler+0x3c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <TIM2_IRQHandler+0x3c>)
 80009f8:	6013      	str	r3, [r2, #0]
    }
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090

08000a08 <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <timer2_get_tick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000090 	.word	0x20000090

08000a20 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000a28:	f7ff ffee 	bl	8000a08 <timer2_get_tick>
 8000a2c:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffea 	bl	8000a08 <timer2_get_tick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1ad2      	subs	r2, r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3f7      	bcc.n	8000a30 <delay_ms+0x10>
    }
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <NVIC_EnableIRQ>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a52:	4909      	ldr	r1, [pc, #36]	; (8000a78 <NVIC_EnableIRQ+0x30>)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	095b      	lsrs	r3, r3, #5
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	f002 021f 	and.w	r2, r2, #31
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <NVIC_DisableIRQ+0x30>)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	095b      	lsrs	r3, r3, #5
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	f002 021f 	and.w	r2, r2, #31
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	3320      	adds	r3, #32
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <uart_init_all>:
volatile uint32_t m_old_uart1_dma_rx_pos = 0;

volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ab4:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <uart_init_all+0x104>)
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <uart_init_all+0x104>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000ac0:	4a3c      	ldr	r2, [pc, #240]	; (8000bb4 <uart_init_all+0x104>)
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	; (8000bb4 <uart_init_all+0x104>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000acc:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <uart_init_all+0x108>)
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <uart_init_all+0x108>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ad6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ad8:	4a37      	ldr	r2, [pc, #220]	; (8000bb8 <uart_init_all+0x108>)
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <uart_init_all+0x108>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000ae2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000ae4:	4a34      	ldr	r2, [pc, #208]	; (8000bb8 <uart_init_all+0x108>)
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <uart_init_all+0x108>)
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000aee:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000af0:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <uart_init_all+0x108>)
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <uart_init_all+0x108>)
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000afa:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <uart_init_all+0x10c>)
 8000afe:	228a      	movs	r2, #138	; 0x8a
 8000b00:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <uart_init_all+0x10c>)
 8000b04:	f242 020c 	movw	r2, #8204	; 0x200c
 8000b08:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	; (8000bb4 <uart_init_all+0x104>)
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <uart_init_all+0x104>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000b16:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <uart_init_all+0x108>)
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <uart_init_all+0x108>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b20:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000b22:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <uart_init_all+0x108>)
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <uart_init_all+0x108>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b2c:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <uart_init_all+0x108>)
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <uart_init_all+0x108>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b38:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <uart_init_all+0x108>)
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <uart_init_all+0x108>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b44:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <uart_init_all+0x110>)
 8000b48:	228a      	movs	r2, #138	; 0x8a
 8000b4a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <uart_init_all+0x110>)
 8000b4e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000b52:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <uart_init_all+0x10c>)
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <uart_init_all+0x10c>)
 8000b58:	8a9b      	ldrh	r3, [r3, #20]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <uart_init_all+0x114>)
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <uart_init_all+0x114>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 0301 	bic.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000b70:	bf00      	nop
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <uart_init_all+0x114>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f9      	bne.n	8000b72 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <uart_init_all+0x114>)
 8000b80:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <uart_init_all+0x118>)
 8000b82:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <uart_init_all+0x114>)
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <uart_init_all+0x11c>)
 8000b88:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <uart_init_all+0x114>)
 8000b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b90:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <uart_init_all+0x114>)
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <uart_init_all+0x120>)
 8000b96:	601a      	str	r2, [r3, #0]
        (0 << 6)       |
        (0 << 13)      |
        (0 << 11)      |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <uart_init_all+0x114>)
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <uart_init_all+0x114>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ba4:	203a      	movs	r0, #58	; 0x3a
 8000ba6:	f7ff ff4f 	bl	8000a48 <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000baa:	f000 f91b 	bl	8000de4 <uart_enable_uart1_idle_irq>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40026440 	.word	0x40026440
 8000bc8:	40011004 	.word	0x40011004
 8000bcc:	20000600 	.word	0x20000600
 8000bd0:	08000500 	.word	0x08000500

08000bd4 <uart_log>:

void uart_log(const char* msg)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
    while (*p)
 8000be0:	e00e      	b.n	8000c00 <uart_log+0x2c>
    {
        while (!(USART2->SR & USART_SR_TXE));
 8000be2:	bf00      	nop
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <uart_log+0x6c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f8      	beq.n	8000be4 <uart_log+0x10>
        USART2->DR = *p++;
 8000bf2:	4913      	ldr	r1, [pc, #76]	; (8000c40 <uart_log+0x6c>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60fa      	str	r2, [r7, #12]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	808b      	strh	r3, [r1, #4]
    while (*p)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ec      	bne.n	8000be2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000c08:	bf00      	nop
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <uart_log+0x6c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f8      	beq.n	8000c0a <uart_log+0x36>
    USART2->DR = '\r';
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <uart_log+0x6c>)
 8000c1a:	220d      	movs	r2, #13
 8000c1c:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000c1e:	bf00      	nop
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <uart_log+0x6c>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f8      	beq.n	8000c20 <uart_log+0x4c>
    USART2->DR = '\n';
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <uart_log+0x6c>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	809a      	strh	r2, [r3, #4]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40004400 	.word	0x40004400

08000c44 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    //uart_log(raw);
    for (uint32_t i = 0; i < length; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e011      	b.n	8000c78 <uart1_send_raw+0x34>
    {
        while (!(USART1->SR & USART_SR_TXE)); 
 8000c54:	bf00      	nop
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <uart1_send_raw+0x58>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f8      	beq.n	8000c56 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8000c64:	490d      	ldr	r1, [pc, #52]	; (8000c9c <uart1_send_raw+0x58>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3e9      	bcc.n	8000c54 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC)); 
 8000c80:	bf00      	nop
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <uart1_send_raw+0x58>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f8      	beq.n	8000c82 <uart1_send_raw+0x3e>
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <usart1_dma_rx_check>:

void usart1_dma_rx_check(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <usart1_dma_rx_check+0x80>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000cae:	607b      	str	r3, [r7, #4]
    if (pos != m_old_uart1_dma_rx_pos)
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d02e      	beq.n	8000d18 <usart1_dma_rx_check+0x78>
    {
        if (pos > m_old_uart1_dma_rx_pos) {
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d90b      	bls.n	8000cdc <usart1_dma_rx_check+0x3c>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <usart1_dma_rx_check+0x88>)
 8000cca:	1898      	adds	r0, r3, r2
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f000 f829 	bl	8000d2c <gsm_hw_layer_uart_fill_rx>
 8000cda:	e012      	b.n	8000d02 <usart1_dma_rx_check+0x62>
        } else {
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <usart1_dma_rx_check+0x88>)
 8000ce2:	441a      	add	r2, r3
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f000 f81c 	bl	8000d2c <gsm_hw_layer_uart_fill_rx>
            if (pos > 0)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <usart1_dma_rx_check+0x62>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <usart1_dma_rx_check+0x88>)
 8000cfe:	f000 f815 	bl	8000d2c <gsm_hw_layer_uart_fill_rx>
        }
        m_old_uart1_dma_rx_pos = pos;
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6013      	str	r3, [r2, #0]
        if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d10:	d102      	bne.n	8000d18 <usart1_dma_rx_check+0x78>
            m_old_uart1_dma_rx_pos = 0;
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <usart1_dma_rx_check+0x84>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40026440 	.word	0x40026440
 8000d24:	20000094 	.word	0x20000094
 8000d28:	20000600 	.word	0x20000600

08000d2c <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;
    for (uint32_t i = 0; i < length; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	e033      	b.n	8000da4 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	2b7e      	cmp	r3, #126	; 0x7e
 8000d42:	d829      	bhi.n	8000d98 <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	b291      	uxth	r1, r2
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d4e:	8011      	strh	r1, [r2, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000d5c:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d005      	beq.n	8000d76 <gsm_hw_layer_uart_fill_rx+0x4a>
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b0d      	cmp	r3, #13
 8000d74:	d113      	bne.n	8000d9e <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d908      	bls.n	8000d90 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf); // Đẩy dòng vào queue mới
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000d8c:	f000 f912 	bl	8000fb4 <uart_line_queue_push>
                }
                line_idx = 0;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	e002      	b.n	8000d9e <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3c7      	bcc.n	8000d3c <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000098 	.word	0x20000098
 8000db8:	2000009c 	.word	0x2000009c

08000dbc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2)
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <DMA2_Stream2_IRQHandler+0x24>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <DMA2_Stream2_IRQHandler+0x20>
    {
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <DMA2_Stream2_IRQHandler+0x24>)
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <DMA2_Stream2_IRQHandler+0x24>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6093      	str	r3, [r2, #8]
        usart1_dma_rx_check();
 8000dd8:	f7ff ff62 	bl	8000ca0 <usart1_dma_rx_check>
    }
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40026400 	.word	0x40026400

08000de4 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <uart_enable_uart1_idle_irq+0x20>)
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <uart_enable_uart1_idle_irq+0x20>)
 8000dec:	899b      	ldrh	r3, [r3, #12]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000df8:	2025      	movs	r0, #37	; 0x25
 8000dfa:	f7ff fe25 	bl	8000a48 <NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40011000 	.word	0x40011000

08000e08 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE)
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <USART1_IRQHandler+0x34>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00a      	beq.n	8000e32 <USART1_IRQHandler+0x2a>
    {
        volatile uint32_t tmp = USART1->SR;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <USART1_IRQHandler+0x34>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <USART1_IRQHandler+0x34>)
 8000e26:	889b      	ldrh	r3, [r3, #4]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
        usart1_dma_rx_check();
 8000e2e:	f7ff ff37 	bl	8000ca0 <usart1_dma_rx_check>
    }
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40011000 	.word	0x40011000

08000e40 <uart1_poll_ppp_mode_rx>:

void uart1_poll_ppp_mode_rx(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <uart1_poll_ppp_mode_rx+0x94>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e4e:	607b      	str	r3, [r7, #4]
    if (pos != m_old_uart1_dma_rx_pos)
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d038      	beq.n	8000ecc <uart1_poll_ppp_mode_rx+0x8c>
    {
        if (ppp != NULL) {
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <uart1_poll_ppp_mode_rx+0x9c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d029      	beq.n	8000eb6 <uart1_poll_ppp_mode_rx+0x76>
            if (pos > m_old_uart1_dma_rx_pos) {
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d90d      	bls.n	8000e88 <uart1_poll_ppp_mode_rx+0x48>
                pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <uart1_poll_ppp_mode_rx+0x9c>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <uart1_poll_ppp_mode_rx+0xa0>)
 8000e76:	1899      	adds	r1, r3, r2
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	f00e f87b 	bl	800ef7c <pppos_input>
 8000e86:	e016      	b.n	8000eb6 <uart1_poll_ppp_mode_rx+0x76>
            } else {
                pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <uart1_poll_ppp_mode_rx+0x9c>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <uart1_poll_ppp_mode_rx+0xa0>)
 8000e92:	1899      	adds	r1, r3, r2
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f00e f86d 	bl	800ef7c <pppos_input>
                if (pos > 0) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <uart1_poll_ppp_mode_rx+0x76>
                    pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <uart1_poll_ppp_mode_rx+0x9c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <uart1_poll_ppp_mode_rx+0xa0>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00e f863 	bl	800ef7c <pppos_input>
                }
            }
        }

        m_old_uart1_dma_rx_pos = pos;
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6013      	str	r3, [r2, #0]
        if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d102      	bne.n	8000ecc <uart1_poll_ppp_mode_rx+0x8c>
            m_old_uart1_dma_rx_pos = 0;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <uart1_poll_ppp_mode_rx+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
    }
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40026440 	.word	0x40026440
 8000ed8:	20000094 	.word	0x20000094
 8000edc:	20000554 	.word	0x20000554
 8000ee0:	20000600 	.word	0x20000600

08000ee4 <uart1_poll>:

void uart1_poll(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    if (ppp_mode == true) {
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <uart1_poll+0x14>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <uart1_poll+0x10>
        uart1_poll_ppp_mode_rx();
 8000ef0:	f7ff ffa6 	bl	8000e40 <uart1_poll_ppp_mode_rx>
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000008c 	.word	0x2000008c

08000efc <uart_disable_uart1_irq>:

//đóng ngắt UART1 sau khi chuyển sang PPP mode
void uart_disable_uart1_irq(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    USART1->CR1 &= ~USART_CR1_IDLEIE; // Tắt ngắt IDLE
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <uart_disable_uart1_irq+0x24>)
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <uart_disable_uart1_irq+0x24>)
 8000f04:	899b      	ldrh	r3, [r3, #12]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f023 0310 	bic.w	r3, r3, #16
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	8193      	strh	r3, [r2, #12]
    NVIC_DisableIRQ(USART1_IRQn);    // Vô hiệu hóa ngắt USART1
 8000f10:	2025      	movs	r0, #37	; 0x25
 8000f12:	f7ff fdb3 	bl	8000a7c <NVIC_DisableIRQ>
    uart_log("UART1 IRQ disabled");
 8000f16:	4803      	ldr	r0, [pc, #12]	; (8000f24 <uart_disable_uart1_irq+0x28>)
 8000f18:	f7ff fe5c 	bl	8000bd4 <uart_log>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40011000 	.word	0x40011000
 8000f24:	08011154 	.word	0x08011154

08000f28 <restart_dma2_stream2>:
    if (i % 16 != 0) {
        uart_log(buffer); // Log the remaining data
    }
}

void restart_dma2_stream2(void) {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN); // Đợi DMA disable hoàn toàn
 8000f38:	bf00      	nop
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <restart_dma2_stream2+0x54>)
 8000f4a:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <restart_dma2_stream2+0x58>)
 8000f50:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <restart_dma2_stream2+0x5c>)
 8000f5e:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <restart_dma2_stream2+0x50>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40026440 	.word	0x40026440
 8000f7c:	40011004 	.word	0x40011004
 8000f80:	20000600 	.word	0x20000600
 8000f84:	08000500 	.word	0x08000500

08000f88 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <uart_line_queue_init+0x20>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <uart_line_queue_init+0x24>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <uart_line_queue_init+0x28>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000051c 	.word	0x2000051c
 8000fac:	2000051d 	.word	0x2000051d
 8000fb0:	2000051e 	.word	0x2000051e

08000fb4 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <uart_line_queue_push+0x74>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d901      	bls.n	8000fca <uart_line_queue_push+0x16>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e029      	b.n	800101e <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <uart_line_queue_push+0x78>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	01db      	lsls	r3, r3, #7
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <uart_line_queue_push+0x7c>)
 8000fd4:	4413      	add	r3, r2
 8000fd6:	227f      	movs	r2, #127	; 0x7f
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00f fc1f 	bl	801081e <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <uart_line_queue_push+0x78>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <uart_line_queue_push+0x7c>)
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	4413      	add	r3, r2
 8000fec:	337f      	adds	r3, #127	; 0x7f
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <uart_line_queue_push+0x78>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	425a      	negs	r2, r3
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	f002 0207 	and.w	r2, r2, #7
 8001004:	bf58      	it	pl
 8001006:	4253      	negpl	r3, r2
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <uart_line_queue_push+0x78>)
 800100c:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <uart_line_queue_push+0x74>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <uart_line_queue_push+0x74>)
 800101a:	701a      	strb	r2, [r3, #0]
    return true;
 800101c:	2301      	movs	r3, #1
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000051e 	.word	0x2000051e
 800102c:	2000051c 	.word	0x2000051c
 8001030:	2000011c 	.word	0x2000011c

08001034 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <uart_line_queue_pop+0x60>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <uart_line_queue_pop+0x16>
 8001046:	2300      	movs	r3, #0
 8001048:	e020      	b.n	800108c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <uart_line_queue_pop+0x64>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	01db      	lsls	r3, r3, #7
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <uart_line_queue_pop+0x68>)
 8001054:	4413      	add	r3, r2
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f00f fbdf 	bl	801081e <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <uart_line_queue_pop+0x64>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	3301      	adds	r3, #1
 8001068:	425a      	negs	r2, r3
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	f002 0207 	and.w	r2, r2, #7
 8001072:	bf58      	it	pl
 8001074:	4253      	negpl	r3, r2
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <uart_line_queue_pop+0x64>)
 800107a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <uart_line_queue_pop+0x60>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <uart_line_queue_pop+0x60>)
 8001088:	701a      	strb	r2, [r3, #0]
    return true;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000051e 	.word	0x2000051e
 8001098:	2000051d 	.word	0x2000051d
 800109c:	2000011c 	.word	0x2000011c

080010a0 <main>:
#include "ppp_net/ppp_net.h"
#include "lwip/tcpip.h"
#include <stdio.h>

int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    hardware_init();
 80010a4:	f7ff fb68 	bl	8000778 <hardware_init>
    uart_log("UART2 log test");
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <main+0x30>)
 80010aa:	f7ff fd93 	bl	8000bd4 <uart_log>
    delay_ms(15000);
 80010ae:	f643 2098 	movw	r0, #15000	; 0x3a98
 80010b2:	f7ff fcb5 	bl	8000a20 <delay_ms>
    send_all_gsm_commands_with_check();
 80010b6:	f7ff f913 	bl	80002e0 <send_all_gsm_commands_with_check>
    tcpip_init(NULL, NULL);
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fa79 	bl	80015b4 <tcpip_init>
    ppp_net_init();
 80010c2:	f000 f91d 	bl	8001300 <ppp_net_init>
    while (1) {
        uart1_poll();
 80010c6:	f7ff ff0d 	bl	8000ee4 <uart1_poll>
        ppp_net_poll();
 80010ca:	f000 f94f 	bl	800136c <ppp_net_poll>
        uart1_poll();
 80010ce:	e7fa      	b.n	80010c6 <main+0x26>
 80010d0:	08011174 	.word	0x08011174

080010d4 <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	2300      	movs	r3, #0
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <sys_now+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	4903      	ldr	r1, [pc, #12]	; (80011c0 <sys_now+0x18>)
 80011b4:	600a      	str	r2, [r1, #0]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000520 	.word	0x20000520

080011c4 <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    return sys_now();
 80011c8:	f7ff ffee 	bl	80011a8 <sys_now>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <lwip_port_rand+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <lwip_port_rand+0x2c>)
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80011e6:	3339      	adds	r3, #57	; 0x39
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <lwip_port_rand+0x28>)
 80011ea:	6013      	str	r3, [r2, #0]
    return seed;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <lwip_port_rand+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	41c64e6d 	.word	0x41c64e6d

08001204 <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <ppp_io_output_cb>:
#include "ppp_io.h"
#include "uart.h"

u32_t ppp_io_output_cb(ppp_pcb *pcb, const void *data, u32_t len, void *ctx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b092      	sub	sp, #72	; 0x48
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
    char debug_msg[50];
    snprintf(debug_msg, sizeof(debug_msg), "PPP output: len=%lu", len);
 8001236:	f107 0014 	add.w	r0, r7, #20
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <ppp_io_output_cb+0x38>)
 800123e:	2132      	movs	r1, #50	; 0x32
 8001240:	f00f fa76 	bl	8010730 <sniprintf>
    uart_log(debug_msg);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcc3 	bl	8000bd4 <uart_log>

    uart1_send_raw((const uint8_t *)data, len); 
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	68b8      	ldr	r0, [r7, #8]
 8001252:	f7ff fcf7 	bl	8000c44 <uart1_send_raw>
    return len;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3748      	adds	r7, #72	; 0x48
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08011184 	.word	0x08011184

08001264 <ppp_status_cb>:
static struct netif ppp_netif;
ppp_pcb *ppp = NULL;
ppp_net_state_t ppp_state = PPP_NET_DISCONNECTED;

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09e      	sub	sp, #120	; 0x78
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
    char debug_msg[100];
    snprintf(debug_msg, sizeof(debug_msg), "PPP status callback: err_code=%d", err_code);
 8001270:	f107 0014 	add.w	r0, r7, #20
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <ppp_status_cb+0x84>)
 8001278:	2164      	movs	r1, #100	; 0x64
 800127a:	f00f fa59 	bl	8010730 <sniprintf>
    uart_log(debug_msg);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fca6 	bl	8000bd4 <uart_log>

    switch (err_code) {
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <ppp_status_cb+0x30>
 800128e:	2b05      	cmp	r3, #5
 8001290:	d007      	beq.n	80012a2 <ppp_status_cb+0x3e>
 8001292:	e010      	b.n	80012b6 <ppp_status_cb+0x52>
    case PPPERR_NONE:
        uart_log("PPP: Connected successfully");
 8001294:	4815      	ldr	r0, [pc, #84]	; (80012ec <ppp_status_cb+0x88>)
 8001296:	f7ff fc9d 	bl	8000bd4 <uart_log>
        ppp_state = PPP_NET_CONNECTED;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <ppp_status_cb+0x8c>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
        break;
 80012a0:	e01d      	b.n	80012de <ppp_status_cb+0x7a>
    case PPPERR_USER:
        uart_log("PPP: Disconnected by user");
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <ppp_status_cb+0x90>)
 80012a4:	f7ff fc96 	bl	8000bd4 <uart_log>
        ppp_state = PPP_NET_DISCONNECTED;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <ppp_status_cb+0x8c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
        ppp = NULL;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <ppp_status_cb+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
        break;
 80012b4:	e013      	b.n	80012de <ppp_status_cb+0x7a>
    default:
        uart_log("PPP: Error occurred, closing connection");
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <ppp_status_cb+0x98>)
 80012b8:	f7ff fc8c 	bl	8000bd4 <uart_log>
        ppp_state = PPP_NET_ERROR;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <ppp_status_cb+0x8c>)
 80012be:	2203      	movs	r2, #3
 80012c0:	701a      	strb	r2, [r3, #0]
        if (ppp) {
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <ppp_status_cb+0x94>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d008      	beq.n	80012dc <ppp_status_cb+0x78>
            ppp_close(ppp, 0);
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <ppp_status_cb+0x94>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00d f955 	bl	800e580 <ppp_close>
            ppp = NULL;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <ppp_status_cb+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
        }
        break;
 80012dc:	bf00      	nop
    }
}
 80012de:	bf00      	nop
 80012e0:	3778      	adds	r7, #120	; 0x78
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	080111c4 	.word	0x080111c4
 80012ec:	080111e8 	.word	0x080111e8
 80012f0:	20000558 	.word	0x20000558
 80012f4:	08011204 	.word	0x08011204
 80012f8:	20000554 	.word	0x20000554
 80012fc:	08011220 	.word	0x08011220

08001300 <ppp_net_init>:

void ppp_net_init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
    if (ppp == NULL) {
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <ppp_net_init+0x58>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d122      	bne.n	8001352 <ppp_net_init+0x52>
        ppp = pppos_create(&ppp_netif, ppp_io_output_cb, ppp_status_cb, NULL);
 800130c:	2300      	movs	r3, #0
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <ppp_net_init+0x5c>)
 8001310:	4913      	ldr	r1, [pc, #76]	; (8001360 <ppp_net_init+0x60>)
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <ppp_net_init+0x64>)
 8001314:	f00d fc78 	bl	800ec08 <pppos_create>
 8001318:	4602      	mov	r2, r0
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <ppp_net_init+0x58>)
 800131c:	601a      	str	r2, [r3, #0]
        if (ppp != NULL) {
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <ppp_net_init+0x58>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <ppp_net_init+0x52>
            ppp_set_default(ppp);
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <ppp_net_init+0x58>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	4618      	mov	r0, r3
 800132e:	f001 ff15 	bl	800315c <netif_set_default>
            ppp_set_auth(ppp, PPPAUTHTYPE_NONE, NULL, NULL);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <ppp_net_init+0x58>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	f00d f8bc 	bl	800e4b8 <ppp_set_auth>
            ppp_state = PPP_NET_CONNECTING;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <ppp_net_init+0x68>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
            ppp_connect(ppp, 0);
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <ppp_net_init+0x58>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00d f8e9 	bl	800e524 <ppp_connect>
        }
    }
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000554 	.word	0x20000554
 800135c:	08001265 	.word	0x08001265
 8001360:	08001229 	.word	0x08001229
 8001364:	20000524 	.word	0x20000524
 8001368:	20000558 	.word	0x20000558

0800136c <ppp_net_poll>:

void ppp_net_poll(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
    char debug_msg[50];
    snprintf(debug_msg, sizeof(debug_msg), "PPP state: %d", ppp_state);
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <ppp_net_poll+0x68>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	1d38      	adds	r0, r7, #4
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <ppp_net_poll+0x6c>)
 800137a:	2132      	movs	r1, #50	; 0x32
 800137c:	f00f f9d8 	bl	8010730 <sniprintf>
    uart_log(debug_msg);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc26 	bl	8000bd4 <uart_log>

    if (ppp_state == PPP_NET_ERROR) {
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <ppp_net_poll+0x68>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d106      	bne.n	800139e <ppp_net_poll+0x32>
        uart_log("PPP: Error detected, resetting state to DISCONNECTED");
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <ppp_net_poll+0x70>)
 8001392:	f7ff fc1f 	bl	8000bd4 <uart_log>
        ppp_state = PPP_NET_DISCONNECTED;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <ppp_net_poll+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
    } else if (ppp_state == PPP_NET_CONNECTED) {
        uart_log("PPP: Connected successfully");
    } else if (ppp_state == PPP_NET_DISCONNECTED) {
        uart_log("PPP: Currently disconnected");
    }
}
 800139c:	e016      	b.n	80013cc <ppp_net_poll+0x60>
    } else if (ppp_state == PPP_NET_CONNECTING) {
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <ppp_net_poll+0x68>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d103      	bne.n	80013ae <ppp_net_poll+0x42>
        uart_log("PPP: Currently connecting...");
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <ppp_net_poll+0x74>)
 80013a8:	f7ff fc14 	bl	8000bd4 <uart_log>
}
 80013ac:	e00e      	b.n	80013cc <ppp_net_poll+0x60>
    } else if (ppp_state == PPP_NET_CONNECTED) {
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <ppp_net_poll+0x68>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <ppp_net_poll+0x52>
        uart_log("PPP: Connected successfully");
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <ppp_net_poll+0x78>)
 80013b8:	f7ff fc0c 	bl	8000bd4 <uart_log>
}
 80013bc:	e006      	b.n	80013cc <ppp_net_poll+0x60>
    } else if (ppp_state == PPP_NET_DISCONNECTED) {
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <ppp_net_poll+0x68>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <ppp_net_poll+0x60>
        uart_log("PPP: Currently disconnected");
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <ppp_net_poll+0x7c>)
 80013c8:	f7ff fc04 	bl	8000bd4 <uart_log>
}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000558 	.word	0x20000558
 80013d8:	08011248 	.word	0x08011248
 80013dc:	08011258 	.word	0x08011258
 80013e0:	08011290 	.word	0x08011290
 80013e4:	080111e8 	.word	0x080111e8
 80013e8:	080112b0 	.word	0x080112b0

080013ec <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80013f6:	f008 fb97 	bl	8009b28 <sys_timeouts_sleeptime>
 80013fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001402:	d10b      	bne.n	800141c <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <tcpip_mbox_fetch+0x68>)
 8001406:	f7ff fe84 	bl	8001112 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fea4 	bl	800115c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <tcpip_mbox_fetch+0x68>)
 8001416:	f7ff fe72 	bl	80010fe <sys_mutex_lock>
    return;
 800141a:	e018      	b.n	800144e <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 8001422:	f008 fb4b 	bl	8009abc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8001426:	e7e6      	b.n	80013f6 <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <tcpip_mbox_fetch+0x68>)
 800142a:	f7ff fe72 	bl	8001112 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe92 	bl	800115c <sys_arch_mbox_fetch>
 8001438:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <tcpip_mbox_fetch+0x68>)
 800143c:	f7ff fe5f 	bl	80010fe <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001446:	d102      	bne.n	800144e <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8001448:	f008 fb38 	bl	8009abc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800144c:	e7d3      	b.n	80013f6 <tcpip_mbox_fetch+0xa>
  }
}
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000700 	.word	0x20000700

08001458 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <tcpip_thread+0x54>)
 8001462:	f7ff fe4c 	bl	80010fe <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <tcpip_thread+0x58>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <tcpip_thread+0x58>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <tcpip_thread+0x5c>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4610      	mov	r0, r2
 8001478:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <tcpip_thread+0x60>)
 8001482:	f7ff ffb3 	bl	80013ec <tcpip_mbox_fetch>
    if (msg == NULL) {
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10a      	bne.n	80014a2 <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <tcpip_thread+0x64>)
 800148e:	229a      	movs	r2, #154	; 0x9a
 8001490:	490b      	ldr	r1, [pc, #44]	; (80014c0 <tcpip_thread+0x68>)
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <tcpip_thread+0x6c>)
 8001494:	f00e fe1c 	bl	80100d0 <iprintf>
 8001498:	2000      	movs	r0, #0
 800149a:	f00e ff1b 	bl	80102d4 <fflush>
 800149e:	f00e fe60 	bl	8010162 <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f80f 	bl	80014c8 <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 80014aa:	e7e6      	b.n	800147a <tcpip_thread+0x22>
 80014ac:	20000700 	.word	0x20000700
 80014b0:	2000055c 	.word	0x2000055c
 80014b4:	20000560 	.word	0x20000560
 80014b8:	20000564 	.word	0x20000564
 80014bc:	080112cc 	.word	0x080112cc
 80014c0:	080112ec 	.word	0x080112ec
 80014c4:	0801130c 	.word	0x0801130c

080014c8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d018      	beq.n	800150a <tcpip_thread_handle_msg+0x42>
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d021      	beq.n	8001520 <tcpip_thread_handle_msg+0x58>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d126      	bne.n	800152e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6850      	ldr	r0, [r2, #4]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6892      	ldr	r2, [r2, #8]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4798      	blx	r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fa46 	bl	800398c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	2006      	movs	r0, #6
 8001504:	f001 fc38 	bl	8002d78 <memp_free>
      break;
 8001508:	e01c      	b.n	8001544 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6892      	ldr	r2, [r2, #8]
 8001512:	4610      	mov	r0, r2
 8001514:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2005      	movs	r0, #5
 800151a:	f001 fc2d 	bl	8002d78 <memp_free>
      break;
 800151e:	e011      	b.n	8001544 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6892      	ldr	r2, [r2, #8]
 8001528:	4610      	mov	r0, r2
 800152a:	4798      	blx	r3
      break;
 800152c:	e00a      	b.n	8001544 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <tcpip_thread_handle_msg+0x84>)
 8001530:	22dd      	movs	r2, #221	; 0xdd
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <tcpip_thread_handle_msg+0x88>)
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <tcpip_thread_handle_msg+0x8c>)
 8001536:	f00e fdcb 	bl	80100d0 <iprintf>
 800153a:	2000      	movs	r0, #0
 800153c:	f00e feca 	bl	80102d4 <fflush>
 8001540:	f00e fe0f 	bl	8010162 <abort>
      break;
  }
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	080112cc 	.word	0x080112cc
 8001550:	080112ec 	.word	0x080112ec
 8001554:	0801130c 	.word	0x0801130c

08001558 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8001562:	2005      	movs	r0, #5
 8001564:	f001 fb9e 	bl	8002ca4 <memp_malloc>
 8001568:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e017      	b.n	80015a6 <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <tcpip_try_callback+0x58>)
 800158c:	f7ff fdda 	bl	8001144 <sys_mbox_trypost>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	2005      	movs	r0, #5
 800159a:	f001 fbed 	bl	8002d78 <memp_free>
    return ERR_MEM;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e000      	b.n	80015a6 <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000564 	.word	0x20000564

080015b4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80015be:	f000 f9f2 	bl	80019a6 <lwip_init>

  tcpip_init_done = initfunc;
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <tcpip_init+0x7c>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <tcpip_init+0x80>)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80015ce:	2100      	movs	r1, #0
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <tcpip_init+0x84>)
 80015d2:	f7ff fda8 	bl	8001126 <sys_mbox_new>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <tcpip_init+0x88>)
 80015de:	f240 229a 	movw	r2, #666	; 0x29a
 80015e2:	4917      	ldr	r1, [pc, #92]	; (8001640 <tcpip_init+0x8c>)
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <tcpip_init+0x90>)
 80015e6:	f00e fd73 	bl	80100d0 <iprintf>
 80015ea:	2000      	movs	r0, #0
 80015ec:	f00e fe72 	bl	80102d4 <fflush>
 80015f0:	f00e fdb7 	bl	8010162 <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80015f4:	4814      	ldr	r0, [pc, #80]	; (8001648 <tcpip_init+0x94>)
 80015f6:	f7ff fd74 	bl	80010e2 <sys_mutex_new>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <tcpip_init+0x88>)
 8001602:	f240 229e 	movw	r2, #670	; 0x29e
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <tcpip_init+0x98>)
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <tcpip_init+0x90>)
 800160a:	f00e fd61 	bl	80100d0 <iprintf>
 800160e:	2000      	movs	r0, #0
 8001610:	f00e fe60 	bl	80102d4 <fflush>
 8001614:	f00e fda5 	bl	8010162 <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8001618:	2301      	movs	r3, #1
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	2200      	movs	r2, #0
 8001620:	490b      	ldr	r1, [pc, #44]	; (8001650 <tcpip_init+0x9c>)
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <tcpip_init+0xa0>)
 8001624:	f7ff fda7 	bl	8001176 <sys_thread_new>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000055c 	.word	0x2000055c
 8001634:	20000560 	.word	0x20000560
 8001638:	20000564 	.word	0x20000564
 800163c:	080112cc 	.word	0x080112cc
 8001640:	08011334 	.word	0x08011334
 8001644:	0801130c 	.word	0x0801130c
 8001648:	20000700 	.word	0x20000700
 800164c:	08011358 	.word	0x08011358
 8001650:	08001459 	.word	0x08001459
 8001654:	0801137c 	.word	0x0801137c

08001658 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21b      	sxth	r3, r3
 8001674:	b29b      	uxth	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	061a      	lsls	r2, r3, #24
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	4313      	orrs	r3, r2
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00d      	beq.n	80016f4 <lwip_standard_chksum+0x40>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dd0a      	ble.n	80016f4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80016de:	f107 030e 	add.w	r3, r7, #14
 80016e2:	3301      	adds	r3, #1
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	1c51      	adds	r1, r2, #1
 80016e8:	61f9      	str	r1, [r7, #28]
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	701a      	strb	r2, [r3, #0]
    len--;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80016f8:	e00a      	b.n	8001710 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1c9a      	adds	r2, r3, #2
 80016fe:	61ba      	str	r2, [r7, #24]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
    len -= 2;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3b02      	subs	r3, #2
 800170e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	dcf1      	bgt.n	80016fa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd04      	ble.n	8001726 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800171c:	f107 030e 	add.w	r3, r7, #14
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	461a      	mov	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	0c1a      	lsrs	r2, r3, #16
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	0c1a      	lsrs	r2, r3, #16
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	72fb      	strb	r3, [r7, #11]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e02b      	b.n	80017e2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	895b      	ldrh	r3, [r3, #10]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff ff8d 	bl	80016b4 <lwip_standard_chksum>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0c1a      	lsrs	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	895b      	ldrh	r3, [r3, #10]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00e      	beq.n	80017dc <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1d0      	bne.n	800178a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff28 	bl	8001658 <lwip_htons>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8001812:	893b      	ldrh	r3, [r7, #8]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff1f 	bl	8001658 <lwip_htons>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0c1a      	lsrs	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0c1a      	lsrs	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	b29b      	uxth	r3, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	b29b      	uxth	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	4613      	mov	r3, r2
 800185c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	b29b      	uxth	r3, r3
 8001868:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4413      	add	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4413      	add	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	0c1a      	lsrs	r2, r3, #16
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	0c1a      	lsrs	r2, r3, #16
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80018a6:	893a      	ldrh	r2, [r7, #8]
 80018a8:	7af9      	ldrb	r1, [r7, #11]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ff5e 	bl	800176e <inet_cksum_pseudo_base>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	4613      	mov	r3, r2
 80018cc:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	7af9      	ldrb	r1, [r7, #11]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff ffb7 	bl	800184c <inet_chksum_pseudo>
 80018de:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fedb 	bl	80016b4 <lwip_standard_chksum>
 80018fe:	4603      	mov	r3, r0
 8001900:	43db      	mvns	r3, r3
 8001902:	b29b      	uxth	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e02b      	b.n	800197a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	895b      	ldrh	r3, [r3, #10]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fec1 	bl	80016b4 <lwip_standard_chksum>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	0c1a      	lsrs	r2, r3, #16
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	895b      	ldrh	r3, [r3, #10]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00e      	beq.n	8001974 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b29a      	uxth	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1d0      	bne.n	8001922 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b29a      	uxth	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	b29b      	uxth	r3, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	b29b      	uxth	r3, r3
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80019b0:	f7ff fb90 	bl	80010d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80019b4:	f000 fde0 	bl	8002578 <mem_init>
  memp_init();
 80019b8:	f001 f914 	bl	8002be4 <memp_init>
  pbuf_init();
  netif_init();
 80019bc:	f001 fa06 	bl	8002dcc <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80019c0:	f002 fb1e 	bl	8004000 <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 80019c4:	f00c fec4 	bl	800e750 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80019c8:	f007 fff2 	bl	80099b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	; 0x38
 80019d8:	af04      	add	r7, sp, #16
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80019de:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <icmp_input+0x254>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80019f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f6:	2b13      	cmp	r3, #19
 80019f8:	f240 80fe 	bls.w	8001bf8 <icmp_input+0x224>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	895b      	ldrh	r3, [r3, #10]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	f240 80fb 	bls.w	8001bfc <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	785b      	ldrb	r3, [r3, #1]
 8001a16:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8001a1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80e3 	beq.w	8001bea <icmp_input+0x216>
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	f040 80e3 	bne.w	8001bf0 <icmp_input+0x21c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8001a2a:	4b80      	ldr	r3, [pc, #512]	; (8001c2c <icmp_input+0x258>)
 8001a2c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <icmp_input+0x254>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a36:	2be0      	cmp	r3, #224	; 0xe0
 8001a38:	f000 80e7 	beq.w	8001c0a <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <icmp_input+0x254>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <icmp_input+0x254>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 fc7a 	bl	8002340 <ip4_addr_isbroadcast_u32>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80dd 	bne.w	8001c0e <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	891b      	ldrh	r3, [r3, #8]
 8001a58:	2b07      	cmp	r3, #7
 8001a5a:	f240 80d1 	bls.w	8001c00 <icmp_input+0x22c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff54 	bl	800190c <inet_chksum_pbuf>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 ff8e 	bl	800398c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8001a70:	e0d6      	b.n	8001c20 <icmp_input+0x24c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8001a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a74:	330e      	adds	r3, #14
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f001 feed 	bl	8003858 <pbuf_add_header>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d04c      	beq.n	8001b1e <icmp_input+0x14a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	891a      	ldrh	r2, [r3, #8]
 8001a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a8a:	4413      	add	r3, r2
 8001a8c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	8b7a      	ldrh	r2, [r7, #26]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f0c0 80bc 	bcc.w	8001c12 <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8001a9a:	8b7b      	ldrh	r3, [r7, #26]
 8001a9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	200e      	movs	r0, #14
 8001aa4:	f001 fcd4 	bl	8003450 <pbuf_alloc>
 8001aa8:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80b2 	beq.w	8001c16 <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	895b      	ldrh	r3, [r3, #10]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aba:	3308      	adds	r3, #8
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d203      	bcs.n	8001ac8 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 8001ac0:	6978      	ldr	r0, [r7, #20]
 8001ac2:	f001 ff63 	bl	800398c <pbuf_free>
          goto icmperr;
 8001ac6:	e0a7      	b.n	8001c18 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00e fcff 	bl	80104d4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8001ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f001 fecc 	bl	8003878 <pbuf_remove_header>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <icmp_input+0x128>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <icmp_input+0x25c>)
 8001ae8:	22b6      	movs	r2, #182	; 0xb6
 8001aea:	4952      	ldr	r1, [pc, #328]	; (8001c34 <icmp_input+0x260>)
 8001aec:	4852      	ldr	r0, [pc, #328]	; (8001c38 <icmp_input+0x264>)
 8001aee:	f00e faef 	bl	80100d0 <iprintf>
 8001af2:	2000      	movs	r0, #0
 8001af4:	f00e fbee 	bl	80102d4 <fflush>
 8001af8:	f00e fb33 	bl	8010162 <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f002 f87e 	bl	8003c00 <pbuf_copy>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f001 ff3e 	bl	800398c <pbuf_free>
          goto icmperr;
 8001b10:	e082      	b.n	8001c18 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f001 ff3a 	bl	800398c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	e013      	b.n	8001b46 <icmp_input+0x172>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8001b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b20:	330e      	adds	r3, #14
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 fea7 	bl	8003878 <pbuf_remove_header>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <icmp_input+0x172>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <icmp_input+0x25c>)
 8001b32:	22c7      	movs	r2, #199	; 0xc7
 8001b34:	4941      	ldr	r1, [pc, #260]	; (8001c3c <icmp_input+0x268>)
 8001b36:	4840      	ldr	r0, [pc, #256]	; (8001c38 <icmp_input+0x264>)
 8001b38:	f00e faca 	bl	80100d0 <iprintf>
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f00e fbc9 	bl	80102d4 <fflush>
 8001b42:	f00e fb0e 	bl	8010162 <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8001b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f001 fe81 	bl	8003858 <pbuf_add_header>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d148      	bne.n	8001bee <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <icmp_input+0x254>)
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	73da      	strb	r2, [r3, #15]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	885b      	ldrh	r3, [r3, #2]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d907      	bls.n	8001b9c <icmp_input+0x1c8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	885b      	ldrh	r3, [r3, #2]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3309      	adds	r3, #9
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	805a      	strh	r2, [r3, #2]
 8001b9a:	e006      	b.n	8001baa <icmp_input+0x1d6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	885b      	ldrh	r3, [r3, #2]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	729a      	strb	r2, [r3, #10]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8001bba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fe92 	bl	80018e8 <inet_chksum>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	23ff      	movs	r3, #255	; 0xff
 8001bda:	2200      	movs	r2, #0
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fa76 	bl	80020d0 <ip4_output_if>
 8001be4:	4603      	mov	r3, r0
 8001be6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8001be8:	e001      	b.n	8001bee <icmp_input+0x21a>
      break;
 8001bea:	bf00      	nop
 8001bec:	e000      	b.n	8001bf0 <icmp_input+0x21c>
      break;
 8001bee:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f001 fecb 	bl	800398c <pbuf_free>
  return;
 8001bf6:	e013      	b.n	8001c20 <icmp_input+0x24c>
    goto lenerr;
 8001bf8:	bf00      	nop
 8001bfa:	e002      	b.n	8001c02 <icmp_input+0x22e>
    goto lenerr;
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <icmp_input+0x22e>
        goto lenerr;
 8001c00:	bf00      	nop
lenerr:
  pbuf_free(p);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f001 fec2 	bl	800398c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8001c08:	e00a      	b.n	8001c20 <icmp_input+0x24c>
        goto icmperr;
 8001c0a:	bf00      	nop
 8001c0c:	e004      	b.n	8001c18 <icmp_input+0x244>
        goto icmperr;
 8001c0e:	bf00      	nop
 8001c10:	e002      	b.n	8001c18 <icmp_input+0x244>
          goto icmperr;
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <icmp_input+0x244>
          goto icmperr;
 8001c16:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f001 feb7 	bl	800398c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8001c1e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000704 	.word	0x20000704
 8001c2c:	20000718 	.word	0x20000718
 8001c30:	0801138c 	.word	0x0801138c
 8001c34:	080113b0 	.word	0x080113b0
 8001c38:	080113e4 	.word	0x080113e4
 8001c3c:	0801140c 	.word	0x0801140c

08001c40 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2103      	movs	r1, #3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f804 	bl	8001c60 <icmp_send_response>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8001c70:	231c      	movs	r3, #28
 8001c72:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	891b      	ldrh	r3, [r3, #8]
 8001c78:	8bfa      	ldrh	r2, [r7, #30]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d902      	bls.n	8001c84 <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	891b      	ldrh	r3, [r3, #8]
 8001c82:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 8001c84:	8bfb      	ldrh	r3, [r7, #30]
 8001c86:	3308      	adds	r3, #8
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2022      	movs	r0, #34	; 0x22
 8001c92:	f001 fbdd 	bl	8003450 <pbuf_alloc>
 8001c96:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d059      	beq.n	8001d52 <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	895b      	ldrh	r3, [r3, #10]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	8bfb      	ldrh	r3, [r7, #30]
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d20b      	bcs.n	8001cc4 <icmp_send_response+0x64>
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <icmp_send_response+0xfc>)
 8001cae:	f240 126f 	movw	r2, #367	; 0x16f
 8001cb2:	492b      	ldr	r1, [pc, #172]	; (8001d60 <icmp_send_response+0x100>)
 8001cb4:	482b      	ldr	r0, [pc, #172]	; (8001d64 <icmp_send_response+0x104>)
 8001cb6:	f00e fa0b 	bl	80100d0 <iprintf>
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f00e fb0a 	bl	80102d4 <fflush>
 8001cc0:	f00e fa4f 	bl	8010162 <abort>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	78ba      	ldrb	r2, [r7, #2]
 8001cda:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	711a      	strb	r2, [r3, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	715a      	strb	r2, [r3, #5]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	719a      	strb	r2, [r3, #6]
 8001cea:	2200      	movs	r2, #0
 8001cec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 8001cee:	8bfa      	ldrh	r2, [r7, #30]
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	69b8      	ldr	r0, [r7, #24]
 8001cf6:	f001 ffa7 	bl	8003c48 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f82f 	bl	8001d68 <ip4_route>
 8001d0a:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01b      	beq.n	8001d4a <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2200      	movs	r2, #0
 8001d16:	709a      	strb	r2, [r3, #2]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	895b      	ldrh	r3, [r3, #10]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6938      	ldr	r0, [r7, #16]
 8001d24:	f7ff fde0 	bl	80018e8 <inet_chksum>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8001d30:	f107 0208 	add.w	r2, r7, #8
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	23ff      	movs	r3, #255	; 0xff
 8001d42:	2100      	movs	r1, #0
 8001d44:	69b8      	ldr	r0, [r7, #24]
 8001d46:	f000 f9c3 	bl	80020d0 <ip4_output_if>
  }
  pbuf_free(q);
 8001d4a:	69b8      	ldr	r0, [r7, #24]
 8001d4c:	f001 fe1e 	bl	800398c <pbuf_free>
 8001d50:	e000      	b.n	8001d54 <icmp_send_response+0xf4>
    return;
 8001d52:	bf00      	nop
}
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	0801138c 	.word	0x0801138c
 8001d60:	08011440 	.word	0x08011440
 8001d64:	080113e4 	.word	0x080113e4

08001d68 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <ip4_route+0xd0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e033      	b.n	8001de0 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d029      	beq.n	8001dda <ip4_route+0x72>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d022      	beq.n	8001dda <ip4_route+0x72>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3304      	adds	r3, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01d      	beq.n	8001dda <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	405a      	eors	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3308      	adds	r3, #8
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	e038      	b.n	8001e2c <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d108      	bne.n	8001dda <ip4_route+0x72>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	330c      	adds	r3, #12
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d101      	bne.n	8001dda <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	e028      	b.n	8001e2c <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1c8      	bne.n	8001d78 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <ip4_route+0xd4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01a      	beq.n	8001e24 <ip4_route+0xbc>
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <ip4_route+0xd4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d012      	beq.n	8001e24 <ip4_route+0xbc>
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <ip4_route+0xd4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <ip4_route+0xd4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3304      	adds	r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b7f      	cmp	r3, #127	; 0x7f
 8001e22:	d101      	bne.n	8001e28 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e001      	b.n	8001e2c <ip4_route+0xc4>
  }

  return netif_default;
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <ip4_route+0xd4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20001730 	.word	0x20001730
 8001e3c:	20001734 	.word	0x20001734

08001e40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d016      	beq.n	8001e84 <ip4_input_accept+0x44>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d011      	beq.n	8001e84 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <ip4_input_accept+0x50>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d008      	beq.n	8001e80 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <ip4_input_accept+0x50>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fa63 	bl	8002340 <ip4_addr_isbroadcast_u32>
 8001e7a:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000704 	.word	0x20000704

08001e94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d004      	beq.n	8001eba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f001 fd6b 	bl	800398c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e102      	b.n	80020c0 <ip4_input+0x22c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fbc1 	bl	8001658 <lwip_htons>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	891b      	ldrh	r3, [r3, #8]
 8001ede:	89ba      	ldrh	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d204      	bcs.n	8001eee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8001ee4:	89bb      	ldrh	r3, [r7, #12]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f001 fba3 	bl	8003634 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	895b      	ldrh	r3, [r3, #10]
 8001ef2:	89fa      	ldrh	r2, [r7, #14]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d807      	bhi.n	8001f08 <ip4_input+0x74>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	891b      	ldrh	r3, [r3, #8]
 8001efc:	89ba      	ldrh	r2, [r7, #12]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d802      	bhi.n	8001f08 <ip4_input+0x74>
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	2b13      	cmp	r3, #19
 8001f06:	d804      	bhi.n	8001f12 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fd3f 	bl	800398c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e0d6      	b.n	80020c0 <ip4_input+0x22c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6938      	ldr	r0, [r7, #16]
 8001f18:	f7ff fce6 	bl	80018e8 <inet_chksum>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f001 fd32 	bl	800398c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e0c9      	b.n	80020c0 <ip4_input+0x22c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <ip4_input+0x234>)
 8001f32:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a63      	ldr	r2, [pc, #396]	; (80020c8 <ip4_input+0x234>)
 8001f3a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001f3c:	4b62      	ldr	r3, [pc, #392]	; (80020c8 <ip4_input+0x234>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	2be0      	cmp	r3, #224	; 0xe0
 8001f46:	d111      	bne.n	8001f6c <ip4_input+0xd8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <ip4_input+0xd2>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <ip4_input+0xd2>
      netif = inp;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e02a      	b.n	8001fbc <ip4_input+0x128>
    } else {
      netif = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e027      	b.n	8001fbc <ip4_input+0x128>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8001f6c:	6838      	ldr	r0, [r7, #0]
 8001f6e:	f7ff ff67 	bl	8001e40 <ip4_input_accept>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <ip4_input+0xea>
      netif = inp;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e01e      	b.n	8001fbc <ip4_input+0x128>
    } else {
      netif = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <ip4_input+0x234>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b7f      	cmp	r3, #127	; 0x7f
 8001f8a:	d017      	beq.n	8001fbc <ip4_input+0x128>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <ip4_input+0x238>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e00e      	b.n	8001fb2 <ip4_input+0x11e>
          if (netif == inp) {
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d006      	beq.n	8001faa <ip4_input+0x116>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8001f9c:	6978      	ldr	r0, [r7, #20]
 8001f9e:	f7ff ff4f 	bl	8001e40 <ip4_input_accept>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <ip4_input+0x126>
 8001fa8:	e000      	b.n	8001fac <ip4_input+0x118>
            continue;
 8001faa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ed      	bne.n	8001f94 <ip4_input+0x100>
 8001fb8:	e000      	b.n	8001fbc <ip4_input+0x128>
            break;
 8001fba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <ip4_input+0x234>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f9bc 	bl	8002340 <ip4_addr_isbroadcast_u32>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <ip4_input+0x146>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <ip4_input+0x234>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001fd6:	2be0      	cmp	r3, #224	; 0xe0
 8001fd8:	d104      	bne.n	8001fe4 <ip4_input+0x150>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 fcd6 	bl	800398c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e06d      	b.n	80020c0 <ip4_input+0x22c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d104      	bne.n	8001ff4 <ip4_input+0x160>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 fcce 	bl	800398c <pbuf_free>
    return ERR_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e065      	b.n	80020c0 <ip4_input+0x22c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	88db      	ldrh	r3, [r3, #6]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <ip4_input+0x17c>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 fcc0 	bl	800398c <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e057      	b.n	80020c0 <ip4_input+0x22c>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <ip4_input+0x234>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8002016:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <ip4_input+0x234>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <ip4_input+0x234>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	b2db      	uxtb	r3, r3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <ip4_input+0x234>)
 8002034:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 fc1c 	bl	8003878 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	7a5b      	ldrb	r3, [r3, #9]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d006      	beq.n	8002056 <ip4_input+0x1c2>
 8002048:	2b06      	cmp	r3, #6
 800204a:	d109      	bne.n	8002060 <ip4_input+0x1cc>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f003 fc08 	bl	8005864 <tcp_input>
        break;
 8002054:	e021      	b.n	800209a <ip4_input+0x206>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fcbb 	bl	80019d4 <icmp_input>
        break;
 800205e:	e01c      	b.n	800209a <ip4_input+0x206>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <ip4_input+0x234>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	6979      	ldr	r1, [r7, #20]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f96a 	bl	8002340 <ip4_addr_isbroadcast_u32>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <ip4_input+0x1fe>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <ip4_input+0x234>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800207a:	2be0      	cmp	r3, #224	; 0xe0
 800207c:	d009      	beq.n	8002092 <ip4_input+0x1fe>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800207e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 fc6e 	bl	8003966 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800208a:	2102      	movs	r1, #2
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fdd7 	bl	8001c40 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 fc7a 	bl	800398c <pbuf_free>
        break;
 8002098:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <ip4_input+0x234>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <ip4_input+0x234>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <ip4_input+0x234>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <ip4_input+0x234>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <ip4_input+0x234>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <ip4_input+0x234>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000704 	.word	0x20000704
 80020cc:	20001730 	.word	0x20001730

080020d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <ip4_output_if+0x26>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	3304      	adds	r3, #4
 80020fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f805 	bl	8002124 <ip4_output_if_src>
 800211a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	7b9b      	ldrb	r3, [r3, #14]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d00b      	beq.n	8002156 <ip4_output_if_src+0x32>
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <ip4_output_if_src+0x204>)
 8002140:	f240 326b 	movw	r2, #875	; 0x36b
 8002144:	4979      	ldr	r1, [pc, #484]	; (800232c <ip4_output_if_src+0x208>)
 8002146:	487a      	ldr	r0, [pc, #488]	; (8002330 <ip4_output_if_src+0x20c>)
 8002148:	f00d ffc2 	bl	80100d0 <iprintf>
 800214c:	2000      	movs	r0, #0
 800214e:	f00e f8c1 	bl	80102d4 <fflush>
 8002152:	f00e f806 	bl	8010162 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80c9 	beq.w	80022f0 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 800215e:	2314      	movs	r3, #20
 8002160:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8002162:	2114      	movs	r1, #20
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f001 fb77 	bl	8003858 <pbuf_add_header>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8002170:	f06f 0301 	mvn.w	r3, #1
 8002174:	e0d3      	b.n	800231e <ip4_output_if_src+0x1fa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	895b      	ldrh	r3, [r3, #10]
 8002180:	2b13      	cmp	r3, #19
 8002182:	d80b      	bhi.n	800219c <ip4_output_if_src+0x78>
 8002184:	4b68      	ldr	r3, [pc, #416]	; (8002328 <ip4_output_if_src+0x204>)
 8002186:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 800218a:	496a      	ldr	r1, [pc, #424]	; (8002334 <ip4_output_if_src+0x210>)
 800218c:	4868      	ldr	r0, [pc, #416]	; (8002330 <ip4_output_if_src+0x20c>)
 800218e:	f00d ff9f 	bl	80100d0 <iprintf>
 8002192:	2000      	movs	r0, #0
 8002194:	f00e f89e 	bl	80102d4 <fflush>
 8002198:	f00d ffe3 	bl	8010162 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80021a8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80021aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	4313      	orrs	r3, r2
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	430b      	orrs	r3, r1
 80021c2:	121b      	asrs	r3, r3, #8
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80021f8:	8b7b      	ldrh	r3, [r7, #26]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002204:	b2da      	uxtb	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002210:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8002212:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	430b      	orrs	r3, r1
 800222e:	121b      	asrs	r3, r3, #8
 8002230:	b21b      	sxth	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	891b      	ldrh	r3, [r3, #8]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fa05 	bl	8001658 <lwip_htons>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	885b      	ldrh	r3, [r3, #2]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2200      	movs	r2, #0
 8002268:	719a      	strb	r2, [r3, #6]
 800226a:	2200      	movs	r2, #0
 800226c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <ip4_output_if_src+0x214>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f9f0 	bl	8001658 <lwip_htons>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	889b      	ldrh	r3, [r3, #4]
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <ip4_output_if_src+0x214>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <ip4_output_if_src+0x214>)
 8002298:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <ip4_output_if_src+0x218>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	e003      	b.n	80022b2 <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	0c1a      	lsrs	r2, r3, #16
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	815a      	strh	r2, [r3, #10]
 80022ee:	e00f      	b.n	8002310 <ip4_output_if_src+0x1ec>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	895b      	ldrh	r3, [r3, #10]
 80022f4:	2b13      	cmp	r3, #19
 80022f6:	d802      	bhi.n	80022fe <ip4_output_if_src+0x1da>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80022f8:	f06f 0301 	mvn.w	r3, #1
 80022fc:	e00f      	b.n	800231e <ip4_output_if_src+0x1fa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	607b      	str	r3, [r7, #4]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68f9      	ldr	r1, [r7, #12]
 8002318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800231a:	4798      	blx	r3
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	0801146c 	.word	0x0801146c
 800232c:	08011490 	.word	0x08011490
 8002330:	0801149c 	.word	0x0801149c
 8002334:	080114c4 	.word	0x080114c4
 8002338:	20000566 	.word	0x20000566
 800233c:	08013798 	.word	0x08013798

08002340 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d002      	beq.n	800235c <ip4_addr_isbroadcast_u32+0x1c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800235c:	2301      	movs	r3, #1
 800235e:	e02a      	b.n	80023b6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e021      	b.n	80023b6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	3304      	adds	r3, #4
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d101      	bne.n	8002382 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800237e:	2300      	movs	r3, #0
 8002380:	e019      	b.n	80023b6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	405a      	eors	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3308      	adds	r3, #8
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3308      	adds	r3, #8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	3308      	adds	r3, #8
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80023b4:	2300      	movs	r3, #0
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <ptr_to_mem+0x20>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4413      	add	r3, r2
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000568 	.word	0x20000568

080023e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <mem_to_ptr+0x20>)
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	b29b      	uxth	r3, r3
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000568 	.word	0x20000568

0800240c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <plug_holes+0x148>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20b      	bcs.n	8002436 <plug_holes+0x2a>
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <plug_holes+0x14c>)
 8002420:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <plug_holes+0x150>)
 8002426:	484e      	ldr	r0, [pc, #312]	; (8002560 <plug_holes+0x154>)
 8002428:	f00d fe52 	bl	80100d0 <iprintf>
 800242c:	2000      	movs	r0, #0
 800242e:	f00d ff51 	bl	80102d4 <fflush>
 8002432:	f00d fe96 	bl	8010162 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8002436:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <plug_holes+0x158>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d30b      	bcc.n	8002458 <plug_holes+0x4c>
 8002440:	4b45      	ldr	r3, [pc, #276]	; (8002558 <plug_holes+0x14c>)
 8002442:	f240 12d3 	movw	r2, #467	; 0x1d3
 8002446:	4948      	ldr	r1, [pc, #288]	; (8002568 <plug_holes+0x15c>)
 8002448:	4845      	ldr	r0, [pc, #276]	; (8002560 <plug_holes+0x154>)
 800244a:	f00d fe41 	bl	80100d0 <iprintf>
 800244e:	2000      	movs	r0, #0
 8002450:	f00d ff40 	bl	80102d4 <fflush>
 8002454:	f00d fe85 	bl	8010162 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <plug_holes+0x6c>
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <plug_holes+0x14c>)
 8002462:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8002466:	4941      	ldr	r1, [pc, #260]	; (800256c <plug_holes+0x160>)
 8002468:	483d      	ldr	r0, [pc, #244]	; (8002560 <plug_holes+0x154>)
 800246a:	f00d fe31 	bl	80100d0 <iprintf>
 800246e:	2000      	movs	r0, #0
 8002470:	f00d ff30 	bl	80102d4 <fflush>
 8002474:	f00d fe75 	bl	8010162 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002480:	d90b      	bls.n	800249a <plug_holes+0x8e>
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <plug_holes+0x14c>)
 8002484:	f240 12d7 	movw	r2, #471	; 0x1d7
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <plug_holes+0x164>)
 800248a:	4835      	ldr	r0, [pc, #212]	; (8002560 <plug_holes+0x154>)
 800248c:	f00d fe20 	bl	80100d0 <iprintf>
 8002490:	2000      	movs	r0, #0
 8002492:	f00d ff1f 	bl	80102d4 <fflush>
 8002496:	f00d fe64 	bl	8010162 <abort>

  nmem = ptr_to_mem(mem->next);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff90 	bl	80023c4 <ptr_to_mem>
 80024a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d024      	beq.n	80024f8 <plug_holes+0xec>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d120      	bne.n	80024f8 <plug_holes+0xec>
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <plug_holes+0x158>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d01b      	beq.n	80024f8 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <plug_holes+0x168>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d102      	bne.n	80024d0 <plug_holes+0xc4>
      lfree = mem;
 80024ca:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <plug_holes+0x168>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	881a      	ldrh	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80024e0:	d00a      	beq.n	80024f8 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff6c 	bl	80023c4 <ptr_to_mem>
 80024ec:	4604      	mov	r4, r0
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff7a 	bl	80023e8 <mem_to_ptr>
 80024f4:	4603      	mov	r3, r0
 80024f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	885b      	ldrh	r3, [r3, #2]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff61 	bl	80023c4 <ptr_to_mem>
 8002502:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	d01f      	beq.n	800254c <plug_holes+0x140>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	791b      	ldrb	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11b      	bne.n	800254c <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <plug_holes+0x168>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d102      	bne.n	8002524 <plug_holes+0x118>
      lfree = pmem;
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <plug_holes+0x168>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002534:	d00a      	beq.n	800254c <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff42 	bl	80023c4 <ptr_to_mem>
 8002540:	4604      	mov	r4, r0
 8002542:	68b8      	ldr	r0, [r7, #8]
 8002544:	f7ff ff50 	bl	80023e8 <mem_to_ptr>
 8002548:	4603      	mov	r3, r0
 800254a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}
 8002554:	20000568 	.word	0x20000568
 8002558:	080114f4 	.word	0x080114f4
 800255c:	08011514 	.word	0x08011514
 8002560:	0801152c 	.word	0x0801152c
 8002564:	2000056c 	.word	0x2000056c
 8002568:	08011554 	.word	0x08011554
 800256c:	08011570 	.word	0x08011570
 8002570:	0801158c 	.word	0x0801158c
 8002574:	20000574 	.word	0x20000574

08002578 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <mem_init+0x84>)
 8002580:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <mem_init+0x88>)
 8002582:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <mem_init+0x84>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002590:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800259e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80025a2:	f7ff ff0f 	bl	80023c4 <ptr_to_mem>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <mem_init+0x8c>)
 80025aa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <mem_init+0x8c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2201      	movs	r2, #1
 80025b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <mem_init+0x8c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80025bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <mem_init+0x8c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80025c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <mem_init+0x84>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <mem_init+0x90>)
 80025ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <mem_init+0x94>)
 80025d2:	f7fe fd86 	bl	80010e2 <sys_mutex_new>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <mem_init+0x98>)
 80025de:	f240 2212 	movw	r2, #530	; 0x212
 80025e2:	490c      	ldr	r1, [pc, #48]	; (8002614 <mem_init+0x9c>)
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <mem_init+0xa0>)
 80025e6:	f00d fd73 	bl	80100d0 <iprintf>
 80025ea:	2000      	movs	r0, #0
 80025ec:	f00d fe72 	bl	80102d4 <fflush>
 80025f0:	f00d fdb7 	bl	8010162 <abort>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000568 	.word	0x20000568
 8002600:	2000071c 	.word	0x2000071c
 8002604:	2000056c 	.word	0x2000056c
 8002608:	20000574 	.word	0x20000574
 800260c:	20000570 	.word	0x20000570
 8002610:	080114f4 	.word	0x080114f4
 8002614:	080115b8 	.word	0x080115b8
 8002618:	0801152c 	.word	0x0801152c

0800261c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fedf 	bl	80023e8 <mem_to_ptr>
 800262a:	4603      	mov	r3, r0
 800262c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fec6 	bl	80023c4 <ptr_to_mem>
 8002638:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	885b      	ldrh	r3, [r3, #2]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fec0 	bl	80023c4 <ptr_to_mem>
 8002644:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800264e:	d818      	bhi.n	8002682 <mem_link_valid+0x66>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	885b      	ldrh	r3, [r3, #2]
 8002654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002658:	d813      	bhi.n	8002682 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800265e:	8afa      	ldrh	r2, [r7, #22]
 8002660:	429a      	cmp	r2, r3
 8002662:	d004      	beq.n	800266e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	8afa      	ldrh	r2, [r7, #22]
 800266a:	429a      	cmp	r2, r3
 800266c:	d109      	bne.n	8002682 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <mem_link_valid+0x74>)
 8002670:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d006      	beq.n	8002686 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	885b      	ldrh	r3, [r3, #2]
 800267c:	8afa      	ldrh	r2, [r7, #22]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <mem_link_valid+0x6a>
    return 0;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <mem_link_valid+0x6c>
  }
  return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000056c 	.word	0x2000056c

08002694 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d051      	beq.n	8002746 <mem_free+0xb2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3b06      	subs	r3, #6
 80026a6:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <mem_free+0xbc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d306      	bcc.n	80026c0 <mem_free+0x2c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f103 020c 	add.w	r2, r3, #12
 80026b8:	4b26      	ldr	r3, [pc, #152]	; (8002754 <mem_free+0xc0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d90b      	bls.n	80026d8 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <mem_free+0xc4>)
 80026c2:	f240 2272 	movw	r2, #626	; 0x272
 80026c6:	4925      	ldr	r1, [pc, #148]	; (800275c <mem_free+0xc8>)
 80026c8:	4825      	ldr	r0, [pc, #148]	; (8002760 <mem_free+0xcc>)
 80026ca:	f00d fd01 	bl	80100d0 <iprintf>
 80026ce:	2000      	movs	r0, #0
 80026d0:	f00d fe00 	bl	80102d4 <fflush>
 80026d4:	f00d fd45 	bl	8010162 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80026d8:	4822      	ldr	r0, [pc, #136]	; (8002764 <mem_free+0xd0>)
 80026da:	f7fe fd10 	bl	80010fe <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	791b      	ldrb	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <mem_free+0xc4>)
 80026e8:	f240 227f 	movw	r2, #639	; 0x27f
 80026ec:	491e      	ldr	r1, [pc, #120]	; (8002768 <mem_free+0xd4>)
 80026ee:	481c      	ldr	r0, [pc, #112]	; (8002760 <mem_free+0xcc>)
 80026f0:	f00d fcee 	bl	80100d0 <iprintf>
 80026f4:	2000      	movs	r0, #0
 80026f6:	f00d fded 	bl	80102d4 <fflush>
 80026fa:	f00d fd32 	bl	8010162 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff ff8c 	bl	800261c <mem_link_valid>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <mem_free+0xc4>)
 800270c:	f44f 7222 	mov.w	r2, #648	; 0x288
 8002710:	4916      	ldr	r1, [pc, #88]	; (800276c <mem_free+0xd8>)
 8002712:	4813      	ldr	r0, [pc, #76]	; (8002760 <mem_free+0xcc>)
 8002714:	f00d fcdc 	bl	80100d0 <iprintf>
 8002718:	2000      	movs	r0, #0
 800271a:	f00d fddb 	bl	80102d4 <fflush>
 800271e:	f00d fd20 	bl	8010162 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <mem_free+0xdc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	429a      	cmp	r2, r3
 8002730:	d202      	bcs.n	8002738 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <mem_free+0xdc>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fe67 	bl	800240c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800273e:	4809      	ldr	r0, [pc, #36]	; (8002764 <mem_free+0xd0>)
 8002740:	f7fe fce7 	bl	8001112 <sys_mutex_unlock>
 8002744:	e000      	b.n	8002748 <mem_free+0xb4>
    return;
 8002746:	bf00      	nop
}
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000568 	.word	0x20000568
 8002754:	2000056c 	.word	0x2000056c
 8002758:	080114f4 	.word	0x080114f4
 800275c:	080115d4 	.word	0x080115d4
 8002760:	0801152c 	.word	0x0801152c
 8002764:	20000570 	.word	0x20000570
 8002768:	080115f0 	.word	0x080115f0
 800276c:	08011618 	.word	0x08011618
 8002770:	20000574 	.word	0x20000574

08002774 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	2b0b      	cmp	r3, #11
 8002788:	d801      	bhi.n	800278e <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800278a:	230c      	movs	r3, #12
 800278c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800278e:	8bfb      	ldrh	r3, [r7, #30]
 8002790:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002794:	d803      	bhi.n	800279e <mem_trim+0x2a>
 8002796:	8bfa      	ldrh	r2, [r7, #30]
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	429a      	cmp	r2, r3
 800279c:	d201      	bcs.n	80027a2 <mem_trim+0x2e>
    return NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	e0ec      	b.n	800297c <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <mem_trim+0x210>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d304      	bcc.n	80027b6 <mem_trim+0x42>
 80027ac:	4b76      	ldr	r3, [pc, #472]	; (8002988 <mem_trim+0x214>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d30b      	bcc.n	80027ce <mem_trim+0x5a>
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <mem_trim+0x218>)
 80027b8:	f240 22c5 	movw	r2, #709	; 0x2c5
 80027bc:	4974      	ldr	r1, [pc, #464]	; (8002990 <mem_trim+0x21c>)
 80027be:	4875      	ldr	r0, [pc, #468]	; (8002994 <mem_trim+0x220>)
 80027c0:	f00d fc86 	bl	80100d0 <iprintf>
 80027c4:	2000      	movs	r0, #0
 80027c6:	f00d fd85 	bl	80102d4 <fflush>
 80027ca:	f00d fcca 	bl	8010162 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <mem_trim+0x210>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d304      	bcc.n	80027e2 <mem_trim+0x6e>
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <mem_trim+0x214>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d307      	bcc.n	80027f2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80027e2:	f7fe fd0f 	bl	8001204 <sys_arch_protect>
 80027e6:	60b8      	str	r0, [r7, #8]
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f7fe fd13 	bl	8001214 <sys_arch_unprotect>
    return rmem;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e0c4      	b.n	800297c <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3b06      	subs	r3, #6
 80027f6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80027f8:	69b8      	ldr	r0, [r7, #24]
 80027fa:	f7ff fdf5 	bl	80023e8 <mem_to_ptr>
 80027fe:	4603      	mov	r3, r0
 8002800:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	8afb      	ldrh	r3, [r7, #22]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b06      	subs	r3, #6
 800280e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8002810:	8bfa      	ldrh	r2, [r7, #30]
 8002812:	8abb      	ldrh	r3, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d90b      	bls.n	8002830 <mem_trim+0xbc>
 8002818:	4b5c      	ldr	r3, [pc, #368]	; (800298c <mem_trim+0x218>)
 800281a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800281e:	495e      	ldr	r1, [pc, #376]	; (8002998 <mem_trim+0x224>)
 8002820:	485c      	ldr	r0, [pc, #368]	; (8002994 <mem_trim+0x220>)
 8002822:	f00d fc55 	bl	80100d0 <iprintf>
 8002826:	2000      	movs	r0, #0
 8002828:	f00d fd54 	bl	80102d4 <fflush>
 800282c:	f00d fc99 	bl	8010162 <abort>
  if (newsize > size) {
 8002830:	8bfa      	ldrh	r2, [r7, #30]
 8002832:	8abb      	ldrh	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d901      	bls.n	800283c <mem_trim+0xc8>
    /* not supported */
    return NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	e09f      	b.n	800297c <mem_trim+0x208>
  }
  if (newsize == size) {
 800283c:	8bfa      	ldrh	r2, [r7, #30]
 800283e:	8abb      	ldrh	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d101      	bne.n	8002848 <mem_trim+0xd4>
    /* No change in size, simply return */
    return rmem;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	e099      	b.n	800297c <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8002848:	4854      	ldr	r0, [pc, #336]	; (800299c <mem_trim+0x228>)
 800284a:	f7fe fc58 	bl	80010fe <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fdb6 	bl	80023c4 <ptr_to_mem>
 8002858:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d144      	bne.n	80028ec <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800286a:	d10b      	bne.n	8002884 <mem_trim+0x110>
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <mem_trim+0x218>)
 800286e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8002872:	494b      	ldr	r1, [pc, #300]	; (80029a0 <mem_trim+0x22c>)
 8002874:	4847      	ldr	r0, [pc, #284]	; (8002994 <mem_trim+0x220>)
 8002876:	f00d fc2b 	bl	80100d0 <iprintf>
 800287a:	2000      	movs	r0, #0
 800287c:	f00d fd2a 	bl	80102d4 <fflush>
 8002880:	f00d fc6f 	bl	8010162 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800288a:	8afa      	ldrh	r2, [r7, #22]
 800288c:	8bfb      	ldrh	r3, [r7, #30]
 800288e:	4413      	add	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	3306      	adds	r3, #6
 8002894:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <mem_trim+0x230>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 80028a0:	89bb      	ldrh	r3, [r7, #12]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fd8e 	bl	80023c4 <ptr_to_mem>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <mem_trim+0x230>)
 80028ac:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80028ae:	89bb      	ldrh	r3, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fd87 	bl	80023c4 <ptr_to_mem>
 80028b6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2200      	movs	r2, #0
 80028bc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	89fa      	ldrh	r2, [r7, #14]
 80028c2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	8afa      	ldrh	r2, [r7, #22]
 80028c8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	89ba      	ldrh	r2, [r7, #12]
 80028ce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80028d8:	d04c      	beq.n	8002974 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fd70 	bl	80023c4 <ptr_to_mem>
 80028e4:	4602      	mov	r2, r0
 80028e6:	89bb      	ldrh	r3, [r7, #12]
 80028e8:	8053      	strh	r3, [r2, #2]
 80028ea:	e043      	b.n	8002974 <mem_trim+0x200>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80028ec:	8bfb      	ldrh	r3, [r7, #30]
 80028ee:	f103 0212 	add.w	r2, r3, #18
 80028f2:	8abb      	ldrh	r3, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d83d      	bhi.n	8002974 <mem_trim+0x200>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80028f8:	8afa      	ldrh	r2, [r7, #22]
 80028fa:	8bfb      	ldrh	r3, [r7, #30]
 80028fc:	4413      	add	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3306      	adds	r3, #6
 8002902:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800290c:	d10b      	bne.n	8002926 <mem_trim+0x1b2>
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <mem_trim+0x218>)
 8002910:	f240 3209 	movw	r2, #777	; 0x309
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <mem_trim+0x22c>)
 8002916:	481f      	ldr	r0, [pc, #124]	; (8002994 <mem_trim+0x220>)
 8002918:	f00d fbda 	bl	80100d0 <iprintf>
 800291c:	2000      	movs	r0, #0
 800291e:	f00d fcd9 	bl	80102d4 <fflush>
 8002922:	f00d fc1e 	bl	8010162 <abort>
    mem2 = ptr_to_mem(ptr2);
 8002926:	89bb      	ldrh	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fd4b 	bl	80023c4 <ptr_to_mem>
 800292e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <mem_trim+0x230>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d202      	bcs.n	8002940 <mem_trim+0x1cc>
      lfree = mem2;
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <mem_trim+0x230>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2200      	movs	r2, #0
 8002944:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	8afa      	ldrh	r2, [r7, #22]
 8002952:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	89ba      	ldrh	r2, [r7, #12]
 8002958:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002962:	d007      	beq.n	8002974 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd2b 	bl	80023c4 <ptr_to_mem>
 800296e:	4602      	mov	r2, r0
 8002970:	89bb      	ldrh	r3, [r7, #12]
 8002972:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <mem_trim+0x228>)
 8002976:	f7fe fbcc 	bl	8001112 <sys_mutex_unlock>
  return rmem;
 800297a:	687b      	ldr	r3, [r7, #4]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000568 	.word	0x20000568
 8002988:	2000056c 	.word	0x2000056c
 800298c:	080114f4 	.word	0x080114f4
 8002990:	0801164c 	.word	0x0801164c
 8002994:	0801152c 	.word	0x0801152c
 8002998:	08011664 	.word	0x08011664
 800299c:	20000570 	.word	0x20000570
 80029a0:	08011684 	.word	0x08011684
 80029a4:	20000574 	.word	0x20000574

080029a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <mem_malloc+0x14>
    return NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e0d3      	b.n	8002b64 <mem_malloc+0x1bc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80029c0:	8bbb      	ldrh	r3, [r7, #28]
 80029c2:	2b0b      	cmp	r3, #11
 80029c4:	d801      	bhi.n	80029ca <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80029c6:	230c      	movs	r3, #12
 80029c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80029ca:	8bbb      	ldrh	r3, [r7, #28]
 80029cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80029d0:	d803      	bhi.n	80029da <mem_malloc+0x32>
 80029d2:	8bba      	ldrh	r2, [r7, #28]
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d201      	bcs.n	80029de <mem_malloc+0x36>
    return NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	e0c2      	b.n	8002b64 <mem_malloc+0x1bc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80029de:	4863      	ldr	r0, [pc, #396]	; (8002b6c <mem_malloc+0x1c4>)
 80029e0:	f7fe fb8d 	bl	80010fe <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80029e4:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <mem_malloc+0x1c8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fcfd 	bl	80023e8 <mem_to_ptr>
 80029ee:	4603      	mov	r3, r0
 80029f0:	83fb      	strh	r3, [r7, #30]
 80029f2:	e0ac      	b.n	8002b4e <mem_malloc+0x1a6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80029f4:	8bfb      	ldrh	r3, [r7, #30]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fce4 	bl	80023c4 <ptr_to_mem>
 80029fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 809c 	bne.w	8002b40 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	8bfb      	ldrh	r3, [r7, #30]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	1f9a      	subs	r2, r3, #6
 8002a14:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8002a16:	429a      	cmp	r2, r3
 8002a18:	f0c0 8092 	bcc.w	8002b40 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	1f9a      	subs	r2, r3, #6
 8002a28:	8bbb      	ldrh	r3, [r7, #28]
 8002a2a:	3312      	adds	r3, #18
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d338      	bcc.n	8002aa2 <mem_malloc+0xfa>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8002a30:	8bfa      	ldrh	r2, [r7, #30]
 8002a32:	8bbb      	ldrh	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3306      	adds	r3, #6
 8002a3a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8002a3c:	8a7b      	ldrh	r3, [r7, #18]
 8002a3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a42:	d10b      	bne.n	8002a5c <mem_malloc+0xb4>
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <mem_malloc+0x1cc>)
 8002a46:	f240 327a 	movw	r2, #890	; 0x37a
 8002a4a:	494b      	ldr	r1, [pc, #300]	; (8002b78 <mem_malloc+0x1d0>)
 8002a4c:	484b      	ldr	r0, [pc, #300]	; (8002b7c <mem_malloc+0x1d4>)
 8002a4e:	f00d fb3f 	bl	80100d0 <iprintf>
 8002a52:	2000      	movs	r0, #0
 8002a54:	f00d fc3e 	bl	80102d4 <fflush>
 8002a58:	f00d fb83 	bl	8010162 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8002a5c:	8a7b      	ldrh	r3, [r7, #18]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fcb0 	bl	80023c4 <ptr_to_mem>
 8002a64:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8bfa      	ldrh	r2, [r7, #30]
 8002a78:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	8a7a      	ldrh	r2, [r7, #18]
 8002a7e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2201      	movs	r2, #1
 8002a84:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002a8e:	d00b      	beq.n	8002aa8 <mem_malloc+0x100>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc95 	bl	80023c4 <ptr_to_mem>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	8a7b      	ldrh	r3, [r7, #18]
 8002a9e:	8053      	strh	r3, [r2, #2]
 8002aa0:	e002      	b.n	8002aa8 <mem_malloc+0x100>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <mem_malloc+0x1c8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d12c      	bne.n	8002b0c <mem_malloc+0x164>
          struct mem *cur = lfree;
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <mem_malloc+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8002ab8:	e005      	b.n	8002ac6 <mem_malloc+0x11e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fc80 	bl	80023c4 <ptr_to_mem>
 8002ac4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <mem_malloc+0x130>
 8002ace:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <mem_malloc+0x1d8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1f0      	bne.n	8002aba <mem_malloc+0x112>
          }
          lfree = cur;
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <mem_malloc+0x1c8>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <mem_malloc+0x1c8>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <mem_malloc+0x1d8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d010      	beq.n	8002b0c <mem_malloc+0x164>
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <mem_malloc+0x1c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	791b      	ldrb	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <mem_malloc+0x164>
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <mem_malloc+0x1cc>)
 8002af6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8002afa:	4922      	ldr	r1, [pc, #136]	; (8002b84 <mem_malloc+0x1dc>)
 8002afc:	481f      	ldr	r0, [pc, #124]	; (8002b7c <mem_malloc+0x1d4>)
 8002afe:	f00d fae7 	bl	80100d0 <iprintf>
 8002b02:	2000      	movs	r0, #0
 8002b04:	f00d fbe6 	bl	80102d4 <fflush>
 8002b08:	f00d fb2b 	bl	8010162 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8002b0c:	4817      	ldr	r0, [pc, #92]	; (8002b6c <mem_malloc+0x1c4>)
 8002b0e:	f7fe fb00 	bl	8001112 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8002b12:	8bba      	ldrh	r2, [r7, #28]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4413      	add	r3, r2
 8002b18:	3306      	adds	r3, #6
 8002b1a:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <mem_malloc+0x1d8>)
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d90b      	bls.n	8002b3a <mem_malloc+0x192>
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <mem_malloc+0x1cc>)
 8002b24:	f240 32ad 	movw	r2, #941	; 0x3ad
 8002b28:	4917      	ldr	r1, [pc, #92]	; (8002b88 <mem_malloc+0x1e0>)
 8002b2a:	4814      	ldr	r0, [pc, #80]	; (8002b7c <mem_malloc+0x1d4>)
 8002b2c:	f00d fad0 	bl	80100d0 <iprintf>
 8002b30:	2000      	movs	r0, #0
 8002b32:	f00d fbcf 	bl	80102d4 <fflush>
 8002b36:	f00d fb14 	bl	8010162 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3306      	adds	r3, #6
 8002b3e:	e011      	b.n	8002b64 <mem_malloc+0x1bc>
         ptr = ptr_to_mem(ptr)->next) {
 8002b40:	8bfb      	ldrh	r3, [r7, #30]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fc3e 	bl	80023c4 <ptr_to_mem>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8002b4e:	8bfa      	ldrh	r2, [r7, #30]
 8002b50:	8bbb      	ldrh	r3, [r7, #28]
 8002b52:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8002b56:	429a      	cmp	r2, r3
 8002b58:	f4ff af4c 	bcc.w	80029f4 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <mem_malloc+0x1c4>)
 8002b5e:	f7fe fad8 	bl	8001112 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000570 	.word	0x20000570
 8002b70:	20000574 	.word	0x20000574
 8002b74:	080114f4 	.word	0x080114f4
 8002b78:	08011684 	.word	0x08011684
 8002b7c:	0801152c 	.word	0x0801152c
 8002b80:	2000056c 	.word	0x2000056c
 8002b84:	08011698 	.word	0x08011698
 8002b88:	080116b4 	.word	0x080116b4

08002b8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e011      	b.n	8002bcc <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	889b      	ldrh	r3, [r3, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	88db      	ldrh	r3, [r3, #6]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dce7      	bgt.n	8002ba8 <memp_init_pool+0x1c>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	e009      	b.n	8002c04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <memp_init+0x30>)
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ffc7 	bl	8002b8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	3301      	adds	r3, #1
 8002c02:	80fb      	strh	r3, [r7, #6]
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b09      	cmp	r3, #9
 8002c08:	d9f2      	bls.n	8002bf0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	08013840 	.word	0x08013840

08002c18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8002c20:	f7fe faf0 	bl	8001204 <sys_arch_protect>
 8002c24:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <do_memp_malloc_pool+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7fe fae8 	bl	8001214 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	e003      	b.n	8002c50 <do_memp_malloc_pool+0x38>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7fe fae3 	bl	8001214 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <memp_malloc_pool+0x26>
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <memp_malloc_pool+0x40>)
 8002c68:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8002c6c:	490b      	ldr	r1, [pc, #44]	; (8002c9c <memp_malloc_pool+0x44>)
 8002c6e:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <memp_malloc_pool+0x48>)
 8002c70:	f00d fa2e 	bl	80100d0 <iprintf>
 8002c74:	2000      	movs	r0, #0
 8002c76:	f00d fb2d 	bl	80102d4 <fflush>
 8002c7a:	f00d fa72 	bl	8010162 <abort>
  if (desc == NULL) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <memp_malloc_pool+0x30>
    return NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e003      	b.n	8002c90 <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ffc5 	bl	8002c18 <do_memp_malloc_pool>
 8002c8e:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0801175c 	.word	0x0801175c
 8002c9c:	0801177c 	.word	0x0801177c
 8002ca0:	08011790 	.word	0x08011790

08002ca4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d908      	bls.n	8002cc6 <memp_malloc+0x22>
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <memp_malloc+0x3c>)
 8002cb6:	f240 1257 	movw	r2, #343	; 0x157
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <memp_malloc+0x40>)
 8002cbc:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <memp_malloc+0x44>)
 8002cbe:	f7fe fa68 	bl	8001192 <lwip_win32_platform_diag>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e008      	b.n	8002cd8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4a08      	ldr	r2, [pc, #32]	; (8002cec <memp_malloc+0x48>)
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffa2 	bl	8002c18 <do_memp_malloc_pool>
 8002cd4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0801175c 	.word	0x0801175c
 8002ce4:	080117b8 	.word	0x080117b8
 8002ce8:	08011790 	.word	0x08011790
 8002cec:	08013840 	.word	0x08013840

08002cf0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8002cfe:	f7fe fa81 	bl	8001204 <sys_arch_protect>
 8002d02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8002d16:	68b8      	ldr	r0, [r7, #8]
 8002d18:	f7fe fa7c 	bl	8001214 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <memp_free_pool+0x28>
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <memp_free_pool+0x48>)
 8002d36:	f240 1295 	movw	r2, #405	; 0x195
 8002d3a:	490d      	ldr	r1, [pc, #52]	; (8002d70 <memp_free_pool+0x4c>)
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <memp_free_pool+0x50>)
 8002d3e:	f00d f9c7 	bl	80100d0 <iprintf>
 8002d42:	2000      	movs	r0, #0
 8002d44:	f00d fac6 	bl	80102d4 <fflush>
 8002d48:	f00d fa0b 	bl	8010162 <abort>
  if ((desc == NULL) || (mem == NULL)) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <memp_free_pool+0x3e>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ffc8 	bl	8002cf0 <do_memp_free_pool>
 8002d60:	e000      	b.n	8002d64 <memp_free_pool+0x40>
    return;
 8002d62:	bf00      	nop
}
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0801175c 	.word	0x0801175c
 8002d70:	0801177c 	.word	0x0801177c
 8002d74:	08011790 	.word	0x08011790

08002d78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	d907      	bls.n	8002d9a <memp_free+0x22>
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <memp_free+0x44>)
 8002d8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002d90:	490b      	ldr	r1, [pc, #44]	; (8002dc0 <memp_free+0x48>)
 8002d92:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <memp_free+0x4c>)
 8002d94:	f7fe f9fd 	bl	8001192 <lwip_win32_platform_diag>
 8002d98:	e00c      	b.n	8002db4 <memp_free+0x3c>

  if (mem == NULL) {
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <memp_free+0x50>)
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	6839      	ldr	r1, [r7, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffa0 	bl	8002cf0 <do_memp_free_pool>
 8002db0:	e000      	b.n	8002db4 <memp_free+0x3c>
    return;
 8002db2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	0801175c 	.word	0x0801175c
 8002dc0:	080117d8 	.word	0x080117d8
 8002dc4:	08011790 	.word	0x08011790
 8002dc8:	08013840 	.word	0x08013840

08002dcc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d108      	bne.n	8002e02 <netif_add+0x26>
 8002df0:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <netif_add+0x184>)
 8002df2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8002df6:	495b      	ldr	r1, [pc, #364]	; (8002f64 <netif_add+0x188>)
 8002df8:	485b      	ldr	r0, [pc, #364]	; (8002f68 <netif_add+0x18c>)
 8002dfa:	f7fe f9ca 	bl	8001192 <lwip_win32_platform_diag>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e0a9      	b.n	8002f56 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <netif_add+0x3e>
 8002e08:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <netif_add+0x184>)
 8002e0a:	f240 1233 	movw	r2, #307	; 0x133
 8002e0e:	4957      	ldr	r1, [pc, #348]	; (8002f6c <netif_add+0x190>)
 8002e10:	4855      	ldr	r0, [pc, #340]	; (8002f68 <netif_add+0x18c>)
 8002e12:	f7fe f9be 	bl	8001192 <lwip_win32_platform_diag>
 8002e16:	2300      	movs	r3, #0
 8002e18:	e09d      	b.n	8002f56 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8002e20:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <netif_add+0x194>)
 8002e22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <netif_add+0x194>)
 8002e2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8002e34:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <netif_add+0x194>)
 8002e36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <netif_add+0x198>)
 8002e4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8002e64:	4b44      	ldr	r3, [pc, #272]	; (8002f78 <netif_add+0x19c>)
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e72:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f924 	bl	80030c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	4798      	blx	r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <netif_add+0xb4>
    return NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e062      	b.n	8002f56 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d103      	bne.n	8002ea2 <netif_add+0xc6>
        netif->num = 0;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8002ea6:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <netif_add+0x1a0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e035      	b.n	8002f1a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <netif_add+0xf2>
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <netif_add+0x184>)
 8002eb8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8002ebc:	4930      	ldr	r1, [pc, #192]	; (8002f80 <netif_add+0x1a4>)
 8002ebe:	482a      	ldr	r0, [pc, #168]	; (8002f68 <netif_add+0x18c>)
 8002ec0:	f00d f906 	bl	80100d0 <iprintf>
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f00d fa05 	bl	80102d4 <fflush>
 8002eca:	f00d f94a 	bl	8010162 <abort>
        num_netifs++;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	dd0b      	ble.n	8002ef2 <netif_add+0x116>
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <netif_add+0x184>)
 8002edc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8002ee0:	4928      	ldr	r1, [pc, #160]	; (8002f84 <netif_add+0x1a8>)
 8002ee2:	4821      	ldr	r0, [pc, #132]	; (8002f68 <netif_add+0x18c>)
 8002ee4:	f00d f8f4 	bl	80100d0 <iprintf>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f00d f9f3 	bl	80102d4 <fflush>
 8002eee:	f00d f938 	bl	8010162 <abort>
        if (netif2->num == netif->num) {
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d108      	bne.n	8002f14 <netif_add+0x138>
          netif->num++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8002f12:	e005      	b.n	8002f20 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1c6      	bne.n	8002eae <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1b4      	bne.n	8002e90 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f2c:	2bfe      	cmp	r3, #254	; 0xfe
 8002f2e:	d103      	bne.n	8002f38 <netif_add+0x15c>
    netif_num = 0;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <netif_add+0x19c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e006      	b.n	8002f46 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <netif_add+0x19c>)
 8002f44:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <netif_add+0x1a0>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <netif_add+0x1a0>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	080117f4 	.word	0x080117f4
 8002f64:	08011874 	.word	0x08011874
 8002f68:	08011830 	.word	0x08011830
 8002f6c:	08011890 	.word	0x08011890
 8002f70:	08013798 	.word	0x08013798
 8002f74:	080032e1 	.word	0x080032e1
 8002f78:	200005a0 	.word	0x200005a0
 8002f7c:	20001730 	.word	0x20001730
 8002f80:	080118b4 	.word	0x080118b4
 8002f84:	080118c8 	.word	0x080118c8

08002f88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f002 fc13 	bl	80057c0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <netif_do_set_ipaddr+0x2a>
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <netif_do_set_ipaddr+0x9c>)
 8002fb8:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002fbc:	4921      	ldr	r1, [pc, #132]	; (8003044 <netif_do_set_ipaddr+0xa0>)
 8002fbe:	4822      	ldr	r0, [pc, #136]	; (8003048 <netif_do_set_ipaddr+0xa4>)
 8002fc0:	f00d f886 	bl	80100d0 <iprintf>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f00d f985 	bl	80102d4 <fflush>
 8002fca:	f00d f8ca 	bl	8010162 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <netif_do_set_ipaddr+0x48>
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <netif_do_set_ipaddr+0x9c>)
 8002fd6:	f240 12dd 	movw	r2, #477	; 0x1dd
 8002fda:	491a      	ldr	r1, [pc, #104]	; (8003044 <netif_do_set_ipaddr+0xa0>)
 8002fdc:	481a      	ldr	r0, [pc, #104]	; (8003048 <netif_do_set_ipaddr+0xa4>)
 8002fde:	f00d f877 	bl	80100d0 <iprintf>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f00d f976 	bl	80102d4 <fflush>
 8002fe8:	f00d f8bb 	bl	8010162 <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d01c      	beq.n	8003034 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3304      	adds	r3, #4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ffb9 	bl	8002f88 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <netif_do_set_ipaddr+0x7e>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	e000      	b.n	8003024 <netif_do_set_ipaddr+0x80>
 8003022:	2300      	movs	r3, #0
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003028:	2101      	movs	r1, #1
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f8d2 	bl	80031d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	080117f4 	.word	0x080117f4
 8003044:	080118f8 	.word	0x080118f8
 8003048:	08011830 	.word	0x08011830

0800304c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3308      	adds	r3, #8
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d00a      	beq.n	800307c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <netif_do_set_netmask+0x26>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e000      	b.n	8003074 <netif_do_set_netmask+0x28>
 8003072:	2300      	movs	r3, #0
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	330c      	adds	r3, #12
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d00a      	beq.n	80030ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <netif_do_set_gw+0x26>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e000      	b.n	80030b2 <netif_do_set_gw+0x28>
 80030b0:	2300      	movs	r3, #0
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <netif_set_addr+0x90>)
 80030e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <netif_set_addr+0x90>)
 80030f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <netif_set_addr+0x90>)
 80030fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <netif_set_addr+0x42>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <netif_set_addr+0x46>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <netif_set_addr+0x48>
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  if (remove) {
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	461a      	mov	r2, r3
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff ff3f 	bl	8002fa4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff8e 	bl	800304c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff ffa8 	bl	800308a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	461a      	mov	r2, r3
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ff2b 	bl	8002fa4 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800314e:	bf00      	nop
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	08013798 	.word	0x08013798

0800315c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <netif_set_default+0x1c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20001734 	.word	0x20001734

0800317c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <netif_set_up+0x1e>
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <netif_set_up+0x4c>)
 800318c:	f240 326b 	movw	r2, #875	; 0x36b
 8003190:	490e      	ldr	r1, [pc, #56]	; (80031cc <netif_set_up+0x50>)
 8003192:	480f      	ldr	r0, [pc, #60]	; (80031d0 <netif_set_up+0x54>)
 8003194:	f7fd fffd 	bl	8001192 <lwip_win32_platform_diag>
 8003198:	e013      	b.n	80031c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10c      	bne.n	80031c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80031ba:	2103      	movs	r1, #3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f809 	bl	80031d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	080117f4 	.word	0x080117f4
 80031cc:	08011968 	.word	0x08011968
 80031d0:	08011830 	.word	0x08011830

080031d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <netif_issue_reports+0x2a>
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <netif_issue_reports+0x58>)
 80031e8:	f44f 7262 	mov.w	r2, #904	; 0x388
 80031ec:	4910      	ldr	r1, [pc, #64]	; (8003230 <netif_issue_reports+0x5c>)
 80031ee:	4811      	ldr	r0, [pc, #68]	; (8003234 <netif_issue_reports+0x60>)
 80031f0:	f00c ff6e 	bl	80100d0 <iprintf>
 80031f4:	2000      	movs	r0, #0
 80031f6:	f00d f86d 	bl	80102d4 <fflush>
 80031fa:	f00c ffb2 	bl	8010162 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003212:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	e000      	b.n	8003226 <netif_issue_reports+0x52>
    return;
 8003224:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	080117f4 	.word	0x080117f4
 8003230:	08011984 	.word	0x08011984
 8003234:	08011830 	.word	0x08011830

08003238 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <netif_set_link_up+0x1e>
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <netif_set_link_up+0x4c>)
 8003248:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <netif_set_link_up+0x50>)
 800324e:	480f      	ldr	r0, [pc, #60]	; (800328c <netif_set_link_up+0x54>)
 8003250:	f7fd ff9f 	bl	8001192 <lwip_win32_platform_diag>
 8003254:	e013      	b.n	800327e <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10c      	bne.n	800327e <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003276:	2103      	movs	r1, #3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffab 	bl	80031d4 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	080117f4 	.word	0x080117f4
 8003288:	080119c8 	.word	0x080119c8
 800328c:	08011830 	.word	0x08011830

08003290 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <netif_set_link_down+0x1e>
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <netif_set_link_down+0x44>)
 80032a0:	f240 4223 	movw	r2, #1059	; 0x423
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <netif_set_link_down+0x48>)
 80032a6:	480d      	ldr	r0, [pc, #52]	; (80032dc <netif_set_link_down+0x4c>)
 80032a8:	f7fd ff73 	bl	8001192 <lwip_win32_platform_diag>
 80032ac:	e00f      	b.n	80032ce <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	080117f4 	.word	0x080117f4
 80032d8:	080119ec 	.word	0x080119ec
 80032dc:	08011830 	.word	0x08011830

080032e0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80032ec:	f06f 030b 	mvn.w	r3, #11
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <netif_get_by_index+0x48>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e00c      	b.n	800332e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800331a:	3301      	adds	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	79fa      	ldrb	r2, [r7, #7]
 8003320:	429a      	cmp	r2, r3
 8003322:	d101      	bne.n	8003328 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	e006      	b.n	8003336 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ef      	bne.n	8003314 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20001730 	.word	0x20001730

08003348 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800334e:	f7fd ff59 	bl	8001204 <sys_arch_protect>
 8003352:	6038      	str	r0, [r7, #0]
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <pbuf_free_ooseq+0x44>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f7fd ff5a 	bl	8001214 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <pbuf_free_ooseq+0x48>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e00a      	b.n	800337e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f002 fa63 	bl	800583c <tcp_free_ooseq>
      return;
 8003376:	e005      	b.n	8003384 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f1      	bne.n	8003368 <pbuf_free_ooseq+0x20>
    }
  }
}
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20001738 	.word	0x20001738
 8003390:	20001740 	.word	0x20001740

08003394 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800339c:	f7ff ffd4 	bl	8003348 <pbuf_free_ooseq>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80033ae:	f7fd ff29 	bl	8001204 <sys_arch_protect>
 80033b2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <pbuf_pool_is_empty+0x4c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <pbuf_pool_is_empty+0x4c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fd ff27 	bl	8001214 <sys_arch_unprotect>

  if (!queued) {
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80033cc:	2100      	movs	r1, #0
 80033ce:	480a      	ldr	r0, [pc, #40]	; (80033f8 <pbuf_pool_is_empty+0x50>)
 80033d0:	f7fe f8c2 	bl	8001558 <tcpip_try_callback>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <pbuf_pool_is_empty+0x44>
 80033da:	f7fd ff13 	bl	8001204 <sys_arch_protect>
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <pbuf_pool_is_empty+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd ff14 	bl	8001214 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20001738 	.word	0x20001738
 80033f8:	08003395 	.word	0x08003395

080033fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	460b      	mov	r3, r1
 800340c:	80fb      	strh	r3, [r7, #6]
 800340e:	4613      	mov	r3, r2
 8003410:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88ba      	ldrh	r2, [r7, #4]
 8003428:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800342a:	8b3b      	ldrh	r3, [r7, #24]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	7f3a      	ldrb	r2, [r7, #28]
 8003436:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	; 0x30
 8003454:	af02      	add	r7, sp, #8
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
 800345a:	460b      	mov	r3, r1
 800345c:	80bb      	strh	r3, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	2b41      	cmp	r3, #65	; 0x41
 800346a:	d00b      	beq.n	8003484 <pbuf_alloc+0x34>
 800346c:	2b41      	cmp	r3, #65	; 0x41
 800346e:	dc02      	bgt.n	8003476 <pbuf_alloc+0x26>
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <pbuf_alloc+0x34>
 8003474:	e08b      	b.n	800358e <pbuf_alloc+0x13e>
 8003476:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800347a:	d00b      	beq.n	8003494 <pbuf_alloc+0x44>
 800347c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8003480:	d05b      	beq.n	800353a <pbuf_alloc+0xea>
 8003482:	e084      	b.n	800358e <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	88bb      	ldrh	r3, [r7, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	2000      	movs	r0, #0
 800348c:	f000 f898 	bl	80035c0 <pbuf_alloc_reference>
 8003490:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003492:	e088      	b.n	80035a6 <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800349c:	88bb      	ldrh	r3, [r7, #4]
 800349e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80034a0:	2009      	movs	r0, #9
 80034a2:	f7ff fbff 	bl	8002ca4 <memp_malloc>
 80034a6:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80034ae:	f7ff ff7b 	bl	80033a8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <pbuf_alloc+0x6e>
            pbuf_free(p);
 80034b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034ba:	f000 fa67 	bl	800398c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	e072      	b.n	80035a8 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80034c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	8b7b      	ldrh	r3, [r7, #26]
 80034cc:	4293      	cmp	r3, r2
 80034ce:	bf28      	it	cs
 80034d0:	4613      	movcs	r3, r2
 80034d2:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80034d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034d6:	3310      	adds	r3, #16
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	18d1      	adds	r1, r2, r3
 80034dc:	8a78      	ldrh	r0, [r7, #18]
 80034de:	8b7a      	ldrh	r2, [r7, #26]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4603      	mov	r3, r0
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff86 	bl	80033fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80034f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f6:	d10b      	bne.n	8003510 <pbuf_alloc+0xc0>
 80034f8:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <pbuf_alloc+0x160>)
 80034fa:	f240 1205 	movw	r2, #261	; 0x105
 80034fe:	492d      	ldr	r1, [pc, #180]	; (80035b4 <pbuf_alloc+0x164>)
 8003500:	482d      	ldr	r0, [pc, #180]	; (80035b8 <pbuf_alloc+0x168>)
 8003502:	f00c fde5 	bl	80100d0 <iprintf>
 8003506:	2000      	movs	r0, #0
 8003508:	f00c fee4 	bl	80102d4 <fflush>
 800350c:	f00c fe29 	bl	8010162 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	e002      	b.n	8003522 <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8003526:	8b7a      	ldrh	r2, [r7, #26]
 8003528:	8a7b      	ldrh	r3, [r7, #18]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8003532:	8b7b      	ldrh	r3, [r7, #26]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1b3      	bne.n	80034a0 <pbuf_alloc+0x50>
      break;
 8003538:	e035      	b.n	80035a6 <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800353a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800353c:	88bb      	ldrh	r3, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8003542:	8a3b      	ldrh	r3, [r7, #16]
 8003544:	3310      	adds	r3, #16
 8003546:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003548:	8a3a      	ldrh	r2, [r7, #16]
 800354a:	88bb      	ldrh	r3, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d303      	bcc.n	8003558 <pbuf_alloc+0x108>
 8003550:	89fa      	ldrh	r2, [r7, #14]
 8003552:	88bb      	ldrh	r3, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d201      	bcs.n	800355c <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	e025      	b.n	80035a8 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fa22 	bl	80029a8 <mem_malloc>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <pbuf_alloc+0x120>
        return NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	e01b      	b.n	80035a8 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8003570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003572:	3310      	adds	r3, #16
 8003574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003576:	18d1      	adds	r1, r2, r3
 8003578:	88b8      	ldrh	r0, [r7, #4]
 800357a:	88ba      	ldrh	r2, [r7, #4]
 800357c:	2300      	movs	r3, #0
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4603      	mov	r3, r0
 8003586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003588:	f7ff ff38 	bl	80033fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800358c:	e00b      	b.n	80035a6 <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <pbuf_alloc+0x160>)
 8003590:	f240 1229 	movw	r2, #297	; 0x129
 8003594:	4909      	ldr	r1, [pc, #36]	; (80035bc <pbuf_alloc+0x16c>)
 8003596:	4808      	ldr	r0, [pc, #32]	; (80035b8 <pbuf_alloc+0x168>)
 8003598:	f00c fd9a 	bl	80100d0 <iprintf>
 800359c:	2000      	movs	r0, #0
 800359e:	f00c fe99 	bl	80102d4 <fflush>
 80035a2:	f00c fdde 	bl	8010162 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3728      	adds	r7, #40	; 0x28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08011a10 	.word	0x08011a10
 80035b4:	08011a30 	.word	0x08011a30
 80035b8:	08011a64 	.word	0x08011a64
 80035bc:	08011a8c 	.word	0x08011a8c

080035c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80035d0:	883b      	ldrh	r3, [r7, #0]
 80035d2:	2b41      	cmp	r3, #65	; 0x41
 80035d4:	d00e      	beq.n	80035f4 <pbuf_alloc_reference+0x34>
 80035d6:	883b      	ldrh	r3, [r7, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d00b      	beq.n	80035f4 <pbuf_alloc_reference+0x34>
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <pbuf_alloc_reference+0x68>)
 80035de:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80035e2:	4912      	ldr	r1, [pc, #72]	; (800362c <pbuf_alloc_reference+0x6c>)
 80035e4:	4812      	ldr	r0, [pc, #72]	; (8003630 <pbuf_alloc_reference+0x70>)
 80035e6:	f00c fd73 	bl	80100d0 <iprintf>
 80035ea:	2000      	movs	r0, #0
 80035ec:	f00c fe72 	bl	80102d4 <fflush>
 80035f0:	f00c fdb7 	bl	8010162 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80035f4:	2008      	movs	r0, #8
 80035f6:	f7ff fb55 	bl	8002ca4 <memp_malloc>
 80035fa:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	e00b      	b.n	800361e <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8003606:	8879      	ldrh	r1, [r7, #2]
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	2300      	movs	r3, #0
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	883b      	ldrh	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	460b      	mov	r3, r1
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fef0 	bl	80033fc <pbuf_init_alloced_pbuf>
  return p;
 800361c:	68fb      	ldr	r3, [r7, #12]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08011a10 	.word	0x08011a10
 800362c:	08011aa8 	.word	0x08011aa8
 8003630:	08011a64 	.word	0x08011a64

08003634 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <pbuf_realloc+0x2a>
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <pbuf_realloc+0x130>)
 8003648:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800364c:	4946      	ldr	r1, [pc, #280]	; (8003768 <pbuf_realloc+0x134>)
 800364e:	4847      	ldr	r0, [pc, #284]	; (800376c <pbuf_realloc+0x138>)
 8003650:	f00c fd3e 	bl	80100d0 <iprintf>
 8003654:	2000      	movs	r0, #0
 8003656:	f00c fe3d 	bl	80102d4 <fflush>
 800365a:	f00c fd82 	bl	8010162 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	429a      	cmp	r2, r3
 8003666:	d278      	bcs.n	800375a <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	891a      	ldrh	r2, [r3, #8]
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	827b      	strh	r3, [r7, #18]
  q = p;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800367a:	e01d      	b.n	80036b8 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	895b      	ldrh	r3, [r3, #10]
 8003680:	8a7a      	ldrh	r2, [r7, #18]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	891a      	ldrh	r2, [r3, #8]
 800368a:	8a3b      	ldrh	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b29a      	uxth	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <pbuf_realloc+0x84>
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <pbuf_realloc+0x130>)
 80036a2:	f240 12b1 	movw	r2, #433	; 0x1b1
 80036a6:	4932      	ldr	r1, [pc, #200]	; (8003770 <pbuf_realloc+0x13c>)
 80036a8:	4830      	ldr	r0, [pc, #192]	; (800376c <pbuf_realloc+0x138>)
 80036aa:	f00c fd11 	bl	80100d0 <iprintf>
 80036ae:	2000      	movs	r0, #0
 80036b0:	f00c fe10 	bl	80102d4 <fflush>
 80036b4:	f00c fd55 	bl	8010162 <abort>
  while (rem_len > q->len) {
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	895b      	ldrh	r3, [r3, #10]
 80036bc:	8a7a      	ldrh	r2, [r7, #18]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d8dc      	bhi.n	800367c <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	7b1b      	ldrb	r3, [r3, #12]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d131      	bne.n	8003732 <pbuf_realloc+0xfe>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	895b      	ldrh	r3, [r3, #10]
 80036d2:	8a7a      	ldrh	r2, [r7, #18]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d02c      	beq.n	8003732 <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	4413      	add	r3, r2
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	6978      	ldr	r0, [r7, #20]
 80036ee:	f7ff f841 	bl	8002774 <mem_trim>
 80036f2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <pbuf_realloc+0xde>
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <pbuf_realloc+0x130>)
 80036fc:	f240 12bf 	movw	r2, #447	; 0x1bf
 8003700:	491c      	ldr	r1, [pc, #112]	; (8003774 <pbuf_realloc+0x140>)
 8003702:	481a      	ldr	r0, [pc, #104]	; (800376c <pbuf_realloc+0x138>)
 8003704:	f00c fce4 	bl	80100d0 <iprintf>
 8003708:	2000      	movs	r0, #0
 800370a:	f00c fde3 	bl	80102d4 <fflush>
 800370e:	f00c fd28 	bl	8010162 <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	429a      	cmp	r2, r3
 8003718:	d00b      	beq.n	8003732 <pbuf_realloc+0xfe>
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <pbuf_realloc+0x130>)
 800371c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8003720:	4915      	ldr	r1, [pc, #84]	; (8003778 <pbuf_realloc+0x144>)
 8003722:	4812      	ldr	r0, [pc, #72]	; (800376c <pbuf_realloc+0x138>)
 8003724:	f00c fcd4 	bl	80100d0 <iprintf>
 8003728:	2000      	movs	r0, #0
 800372a:	f00c fdd3 	bl	80102d4 <fflush>
 800372e:	f00c fd18 	bl	8010162 <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	8a7a      	ldrh	r2, [r7, #18]
 8003736:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	895a      	ldrh	r2, [r3, #10]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f91d 	bl	800398c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e000      	b.n	800375c <pbuf_realloc+0x128>
    return;
 800375a:	bf00      	nop

}
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08011a10 	.word	0x08011a10
 8003768:	08011abc 	.word	0x08011abc
 800376c:	08011a64 	.word	0x08011a64
 8003770:	08011ad4 	.word	0x08011ad4
 8003774:	08011aec 	.word	0x08011aec
 8003778:	08011b08 	.word	0x08011b08

0800377c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <pbuf_add_header_impl+0x2c>
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <pbuf_add_header_impl+0xd0>)
 8003792:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003796:	492e      	ldr	r1, [pc, #184]	; (8003850 <pbuf_add_header_impl+0xd4>)
 8003798:	482e      	ldr	r0, [pc, #184]	; (8003854 <pbuf_add_header_impl+0xd8>)
 800379a:	f00c fc99 	bl	80100d0 <iprintf>
 800379e:	2000      	movs	r0, #0
 80037a0:	f00c fd98 	bl	80102d4 <fflush>
 80037a4:	f00c fcdd 	bl	8010162 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <pbuf_add_header_impl+0x3a>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b4:	d301      	bcc.n	80037ba <pbuf_add_header_impl+0x3e>
    return 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e044      	b.n	8003844 <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <pbuf_add_header_impl+0x48>
    return 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e03f      	b.n	8003844 <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	891a      	ldrh	r2, [r3, #8]
 80037cc:	8a7b      	ldrh	r3, [r7, #18]
 80037ce:	4413      	add	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8a7a      	ldrh	r2, [r7, #18]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d901      	bls.n	80037dc <pbuf_add_header_impl+0x60>
    return 1;
 80037d8:	2301      	movs	r3, #1
 80037da:	e033      	b.n	8003844 <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	7b1b      	ldrb	r3, [r3, #12]
 80037e0:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80037e2:	8a3b      	ldrh	r3, [r7, #16]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	425b      	negs	r3, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f103 0210 	add.w	r2, r3, #16
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	d90d      	bls.n	8003820 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8003804:	2301      	movs	r3, #1
 8003806:	e01d      	b.n	8003844 <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	425b      	negs	r3, r3
 8003816:	4413      	add	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e001      	b.n	8003820 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800381c:	2301      	movs	r3, #1
 800381e:	e011      	b.n	8003844 <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	895a      	ldrh	r2, [r3, #10]
 800382a:	8a7b      	ldrh	r3, [r7, #18]
 800382c:	4413      	add	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	891a      	ldrh	r2, [r3, #8]
 8003838:	8a7b      	ldrh	r3, [r7, #18]
 800383a:	4413      	add	r3, r2
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	811a      	strh	r2, [r3, #8]


  return 0;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	08011a10 	.word	0x08011a10
 8003850:	08011b24 	.word	0x08011b24
 8003854:	08011a64 	.word	0x08011a64

08003858 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff88 	bl	800377c <pbuf_add_header_impl>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <pbuf_remove_header+0x28>
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <pbuf_remove_header+0x9c>)
 800388a:	f44f 7214 	mov.w	r2, #592	; 0x250
 800388e:	4922      	ldr	r1, [pc, #136]	; (8003918 <pbuf_remove_header+0xa0>)
 8003890:	4822      	ldr	r0, [pc, #136]	; (800391c <pbuf_remove_header+0xa4>)
 8003892:	f00c fc1d 	bl	80100d0 <iprintf>
 8003896:	2000      	movs	r0, #0
 8003898:	f00c fd1c 	bl	80102d4 <fflush>
 800389c:	f00c fc61 	bl	8010162 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <pbuf_remove_header+0x36>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d301      	bcc.n	80038b2 <pbuf_remove_header+0x3a>
    return 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02c      	b.n	800390c <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <pbuf_remove_header+0x44>
    return 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e027      	b.n	800390c <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	895b      	ldrh	r3, [r3, #10]
 80038c4:	89fa      	ldrh	r2, [r7, #14]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d908      	bls.n	80038dc <pbuf_remove_header+0x64>
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <pbuf_remove_header+0x9c>)
 80038cc:	f240 225a 	movw	r2, #602	; 0x25a
 80038d0:	4913      	ldr	r1, [pc, #76]	; (8003920 <pbuf_remove_header+0xa8>)
 80038d2:	4812      	ldr	r0, [pc, #72]	; (800391c <pbuf_remove_header+0xa4>)
 80038d4:	f7fd fc5d 	bl	8001192 <lwip_win32_platform_diag>
 80038d8:	2301      	movs	r3, #1
 80038da:	e017      	b.n	800390c <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	441a      	add	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	895a      	ldrh	r2, [r3, #10]
 80038f2:	89fb      	ldrh	r3, [r7, #14]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	891a      	ldrh	r2, [r3, #8]
 8003900:	89fb      	ldrh	r3, [r7, #14]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08011a10 	.word	0x08011a10
 8003918:	08011b24 	.word	0x08011b24
 800391c:	08011a64 	.word	0x08011a64
 8003920:	08011b30 	.word	0x08011b30

08003924 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8003934:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da08      	bge.n	800394e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800393c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003940:	425b      	negs	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff97 	bl	8003878 <pbuf_remove_header>
 800394a:	4603      	mov	r3, r0
 800394c:	e007      	b.n	800395e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800394e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003952:	787a      	ldrb	r2, [r7, #1]
 8003954:	4619      	mov	r1, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff10 	bl	800377c <pbuf_add_header_impl>
 800395c:	4603      	mov	r3, r0
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8003972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003976:	2201      	movs	r2, #1
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffd2 	bl	8003924 <pbuf_header_impl>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d110      	bne.n	80039bc <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <pbuf_free+0x2c>
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <pbuf_free+0xf0>)
 80039a2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80039a6:	4936      	ldr	r1, [pc, #216]	; (8003a80 <pbuf_free+0xf4>)
 80039a8:	4836      	ldr	r0, [pc, #216]	; (8003a84 <pbuf_free+0xf8>)
 80039aa:	f00c fb91 	bl	80100d0 <iprintf>
 80039ae:	2000      	movs	r0, #0
 80039b0:	f00c fc90 	bl	80102d4 <fflush>
 80039b4:	f00c fbd5 	bl	8010162 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e05b      	b.n	8003a74 <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80039c0:	e054      	b.n	8003a6c <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80039c2:	f7fd fc1f 	bl	8001204 <sys_arch_protect>
 80039c6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7b9b      	ldrb	r3, [r3, #14]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <pbuf_free+0x5c>
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <pbuf_free+0xf0>)
 80039d2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80039d6:	492c      	ldr	r1, [pc, #176]	; (8003a88 <pbuf_free+0xfc>)
 80039d8:	482a      	ldr	r0, [pc, #168]	; (8003a84 <pbuf_free+0xf8>)
 80039da:	f00c fb79 	bl	80100d0 <iprintf>
 80039de:	2000      	movs	r0, #0
 80039e0:	f00c fc78 	bl	80102d4 <fflush>
 80039e4:	f00c fbbd 	bl	8010162 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7b9b      	ldrb	r3, [r3, #14]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	739a      	strb	r2, [r3, #14]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7b9b      	ldrb	r3, [r3, #14]
 80039f8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80039fa:	69b8      	ldr	r0, [r7, #24]
 80039fc:	f7fd fc0a 	bl	8001214 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d130      	bne.n	8003a68 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7b1b      	ldrb	r3, [r3, #12]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d104      	bne.n	8003a26 <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	2009      	movs	r0, #9
 8003a20:	f7ff f9aa 	bl	8002d78 <memp_free>
 8003a24:	e01a      	b.n	8003a5c <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d104      	bne.n	8003a36 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	2008      	movs	r0, #8
 8003a30:	f7ff f9a2 	bl	8002d78 <memp_free>
 8003a34:	e012      	b.n	8003a5c <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <pbuf_free+0xb8>
          mem_free(p);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fe fe29 	bl	8002694 <mem_free>
 8003a42:	e00b      	b.n	8003a5c <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <pbuf_free+0xf0>)
 8003a46:	f240 3213 	movw	r2, #787	; 0x313
 8003a4a:	4910      	ldr	r1, [pc, #64]	; (8003a8c <pbuf_free+0x100>)
 8003a4c:	480d      	ldr	r0, [pc, #52]	; (8003a84 <pbuf_free+0xf8>)
 8003a4e:	f00c fb3f 	bl	80100d0 <iprintf>
 8003a52:	2000      	movs	r0, #0
 8003a54:	f00c fc3e 	bl	80102d4 <fflush>
 8003a58:	f00c fb83 	bl	8010162 <abort>
        }
      }
      count++;
 8003a5c:	7ffb      	ldrb	r3, [r7, #31]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	e001      	b.n	8003a6c <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1a7      	bne.n	80039c2 <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08011a10 	.word	0x08011a10
 8003a80:	08011b24 	.word	0x08011b24
 8003a84:	08011a64 	.word	0x08011a64
 8003a88:	08011b50 	.word	0x08011b50
 8003a8c:	08011b68 	.word	0x08011b68

08003a90 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003a9c:	e005      	b.n	8003aaa <pbuf_clen+0x1a>
    ++len;
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f6      	bne.n	8003a9e <pbuf_clen+0xe>
  }
  return len;
 8003ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01b      	beq.n	8003b06 <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8003ace:	f7fd fb99 	bl	8001204 <sys_arch_protect>
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7b9b      	ldrb	r3, [r3, #14]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	739a      	strb	r2, [r3, #14]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7fd fb97 	bl	8001214 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7b9b      	ldrb	r3, [r3, #14]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <pbuf_ref+0x46>
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <pbuf_ref+0x50>)
 8003af0:	f240 3246 	movw	r2, #838	; 0x346
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <pbuf_ref+0x54>)
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <pbuf_ref+0x58>)
 8003af8:	f00c faea 	bl	80100d0 <iprintf>
 8003afc:	2000      	movs	r0, #0
 8003afe:	f00c fbe9 	bl	80102d4 <fflush>
 8003b02:	f00c fb2e 	bl	8010162 <abort>
  }
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	08011a10 	.word	0x08011a10
 8003b14:	08011b7c 	.word	0x08011b7c
 8003b18:	08011a64 	.word	0x08011a64

08003b1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <pbuf_cat+0x16>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <pbuf_cat+0x26>
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <pbuf_cat+0xcc>)
 8003b34:	f240 325e 	movw	r2, #862	; 0x35e
 8003b38:	492c      	ldr	r1, [pc, #176]	; (8003bec <pbuf_cat+0xd0>)
 8003b3a:	482d      	ldr	r0, [pc, #180]	; (8003bf0 <pbuf_cat+0xd4>)
 8003b3c:	f7fd fb29 	bl	8001192 <lwip_win32_platform_diag>
 8003b40:	e04e      	b.n	8003be0 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10b      	bne.n	8003b62 <pbuf_cat+0x46>
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <pbuf_cat+0xcc>)
 8003b4c:	f240 325f 	movw	r2, #863	; 0x35f
 8003b50:	4928      	ldr	r1, [pc, #160]	; (8003bf4 <pbuf_cat+0xd8>)
 8003b52:	4827      	ldr	r0, [pc, #156]	; (8003bf0 <pbuf_cat+0xd4>)
 8003b54:	f00c fabc 	bl	80100d0 <iprintf>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f00c fbbb 	bl	80102d4 <fflush>
 8003b5e:	f00c fb00 	bl	8010162 <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e00a      	b.n	8003b7e <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	891a      	ldrh	r2, [r3, #8]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	891b      	ldrh	r3, [r3, #8]
 8003b70:	4413      	add	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	891a      	ldrh	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	895b      	ldrh	r3, [r3, #10]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00b      	beq.n	8003baa <pbuf_cat+0x8e>
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <pbuf_cat+0xcc>)
 8003b94:	f240 3267 	movw	r2, #871	; 0x367
 8003b98:	4917      	ldr	r1, [pc, #92]	; (8003bf8 <pbuf_cat+0xdc>)
 8003b9a:	4815      	ldr	r0, [pc, #84]	; (8003bf0 <pbuf_cat+0xd4>)
 8003b9c:	f00c fa98 	bl	80100d0 <iprintf>
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f00c fb97 	bl	80102d4 <fflush>
 8003ba6:	f00c fadc 	bl	8010162 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <pbuf_cat+0xae>
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <pbuf_cat+0xcc>)
 8003bb4:	f44f 725a 	mov.w	r2, #872	; 0x368
 8003bb8:	4910      	ldr	r1, [pc, #64]	; (8003bfc <pbuf_cat+0xe0>)
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <pbuf_cat+0xd4>)
 8003bbc:	f00c fa88 	bl	80100d0 <iprintf>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f00c fb87 	bl	80102d4 <fflush>
 8003bc6:	f00c facc 	bl	8010162 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	891a      	ldrh	r2, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	891b      	ldrh	r3, [r3, #8]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	08011a10 	.word	0x08011a10
 8003bec:	08011b90 	.word	0x08011b90
 8003bf0:	08011a64 	.word	0x08011a64
 8003bf4:	08011bc8 	.word	0x08011bc8
 8003bf8:	08011be4 	.word	0x08011be4
 8003bfc:	08011c14 	.word	0x08011c14

08003c00 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <pbuf_copy+0x24>
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <pbuf_copy+0x3c>)
 8003c12:	f240 32c7 	movw	r2, #967	; 0x3c7
 8003c16:	490a      	ldr	r1, [pc, #40]	; (8003c40 <pbuf_copy+0x40>)
 8003c18:	480a      	ldr	r0, [pc, #40]	; (8003c44 <pbuf_copy+0x44>)
 8003c1a:	f7fd faba 	bl	8001192 <lwip_win32_platform_diag>
 8003c1e:	f06f 030f 	mvn.w	r3, #15
 8003c22:	e007      	b.n	8003c34 <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	891a      	ldrh	r2, [r3, #8]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6839      	ldr	r1, [r7, #0]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f80b 	bl	8003c48 <pbuf_copy_partial_pbuf>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08011a10 	.word	0x08011a10
 8003c40:	08011c60 	.word	0x08011c60
 8003c44:	08011a64 	.word	0x08011a64

08003c48 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4611      	mov	r1, r2
 8003c54:	461a      	mov	r2, r3
 8003c56:	460b      	mov	r3, r1
 8003c58:	80fb      	strh	r3, [r7, #6]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8003c5e:	88bb      	ldrh	r3, [r7, #4]
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <pbuf_copy_partial_pbuf+0x2e>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	891b      	ldrh	r3, [r3, #8]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d909      	bls.n	8003c8a <pbuf_copy_partial_pbuf+0x42>
 8003c76:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003c78:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003c7c:	4973      	ldr	r1, [pc, #460]	; (8003e4c <pbuf_copy_partial_pbuf+0x204>)
 8003c7e:	4874      	ldr	r0, [pc, #464]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003c80:	f7fd fa87 	bl	8001192 <lwip_win32_platform_diag>
 8003c84:	f06f 030f 	mvn.w	r3, #15
 8003c88:	e0d9      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <pbuf_copy_partial_pbuf+0x58>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	891b      	ldrh	r3, [r3, #8]
 8003c94:	4619      	mov	r1, r3
 8003c96:	88ba      	ldrh	r2, [r7, #4]
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4299      	cmp	r1, r3
 8003c9e:	da09      	bge.n	8003cb4 <pbuf_copy_partial_pbuf+0x6c>
 8003ca0:	4b69      	ldr	r3, [pc, #420]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003ca2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8003ca6:	496b      	ldr	r1, [pc, #428]	; (8003e54 <pbuf_copy_partial_pbuf+0x20c>)
 8003ca8:	4869      	ldr	r0, [pc, #420]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003caa:	f7fd fa72 	bl	8001192 <lwip_win32_platform_diag>
 8003cae:	f06f 030f 	mvn.w	r3, #15
 8003cb2:	e0c4      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	895b      	ldrh	r3, [r3, #10]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1ad2      	subs	r2, r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	895b      	ldrh	r3, [r3, #10]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d306      	bcc.n	8003cda <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	895b      	ldrh	r3, [r3, #10]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e005      	b.n	8003ce6 <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	895b      	ldrh	r3, [r3, #10]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bf28      	it	cs
 8003cee:	4613      	movcs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	18d0      	adds	r0, r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4413      	add	r3, r2
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f00c fbe5 	bl	80104d4 <memcpy>
    offset_to += len;
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4413      	add	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	895b      	ldrh	r3, [r3, #10]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d20b      	bcs.n	8003d48 <pbuf_copy_partial_pbuf+0x100>
 8003d30:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003d32:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8003d36:	4948      	ldr	r1, [pc, #288]	; (8003e58 <pbuf_copy_partial_pbuf+0x210>)
 8003d38:	4845      	ldr	r0, [pc, #276]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003d3a:	f00c f9c9 	bl	80100d0 <iprintf>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f00c fac8 	bl	80102d4 <fflush>
 8003d44:	f00c fa0d 	bl	8010162 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	895b      	ldrh	r3, [r3, #10]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d20b      	bcs.n	8003d6c <pbuf_copy_partial_pbuf+0x124>
 8003d54:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003d56:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8003d5a:	4940      	ldr	r1, [pc, #256]	; (8003e5c <pbuf_copy_partial_pbuf+0x214>)
 8003d5c:	483c      	ldr	r0, [pc, #240]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003d5e:	f00c f9b7 	bl	80100d0 <iprintf>
 8003d62:	2000      	movs	r0, #0
 8003d64:	f00c fab6 	bl	80102d4 <fflush>
 8003d68:	f00c f9fb 	bl	8010162 <abort>
    if (offset_from >= p_from->len) {
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	895b      	ldrh	r3, [r3, #10]
 8003d70:	461a      	mov	r2, r3
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d814      	bhi.n	8003da2 <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <pbuf_copy_partial_pbuf+0x15a>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <pbuf_copy_partial_pbuf+0x15a>
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d94:	4932      	ldr	r1, [pc, #200]	; (8003e60 <pbuf_copy_partial_pbuf+0x218>)
 8003d96:	482e      	ldr	r0, [pc, #184]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003d98:	f7fd f9fb 	bl	8001192 <lwip_win32_platform_diag>
 8003d9c:	f06f 030f 	mvn.w	r3, #15
 8003da0:	e04d      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	895b      	ldrh	r3, [r3, #10]
 8003da6:	461a      	mov	r2, r3
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d114      	bne.n	8003dd8 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <pbuf_copy_partial_pbuf+0x190>
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <pbuf_copy_partial_pbuf+0x190>
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003dc6:	f240 4206 	movw	r2, #1030	; 0x406
 8003dca:	4926      	ldr	r1, [pc, #152]	; (8003e64 <pbuf_copy_partial_pbuf+0x21c>)
 8003dcc:	4820      	ldr	r0, [pc, #128]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003dce:	f7fd f9e0 	bl	8001192 <lwip_win32_platform_diag>
 8003dd2:	f06f 030f 	mvn.w	r3, #15
 8003dd6:	e032      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <pbuf_copy_partial_pbuf+0x1be>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	895a      	ldrh	r2, [r3, #10]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	891b      	ldrh	r3, [r3, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10d      	bne.n	8003e06 <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <pbuf_copy_partial_pbuf+0x1be>
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003df4:	f240 420c 	movw	r2, #1036	; 0x40c
 8003df8:	491b      	ldr	r1, [pc, #108]	; (8003e68 <pbuf_copy_partial_pbuf+0x220>)
 8003dfa:	4815      	ldr	r0, [pc, #84]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003dfc:	f7fd f9c9 	bl	8001192 <lwip_win32_platform_diag>
 8003e00:	f06f 0305 	mvn.w	r3, #5
 8003e04:	e01b      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <pbuf_copy_partial_pbuf+0x1ec>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	895a      	ldrh	r2, [r3, #10]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	891b      	ldrh	r3, [r3, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10d      	bne.n	8003e34 <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <pbuf_copy_partial_pbuf+0x1ec>
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <pbuf_copy_partial_pbuf+0x200>)
 8003e22:	f240 4211 	movw	r2, #1041	; 0x411
 8003e26:	4910      	ldr	r1, [pc, #64]	; (8003e68 <pbuf_copy_partial_pbuf+0x220>)
 8003e28:	4809      	ldr	r0, [pc, #36]	; (8003e50 <pbuf_copy_partial_pbuf+0x208>)
 8003e2a:	f7fd f9b2 	bl	8001192 <lwip_win32_platform_diag>
 8003e2e:	f06f 0305 	mvn.w	r3, #5
 8003e32:	e004      	b.n	8003e3e <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f47f af3c 	bne.w	8003cb4 <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08011a10 	.word	0x08011a10
 8003e4c:	08011c7c 	.word	0x08011c7c
 8003e50:	08011a64 	.word	0x08011a64
 8003e54:	08011cb0 	.word	0x08011cb0
 8003e58:	08011ce0 	.word	0x08011ce0
 8003e5c:	08011cf8 	.word	0x08011cf8
 8003e60:	08011d14 	.word	0x08011d14
 8003e64:	08011d24 	.word	0x08011d24
 8003e68:	08011d34 	.word	0x08011d34

08003e6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	80fb      	strh	r3, [r7, #6]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <pbuf_copy_partial+0x36>
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <pbuf_copy_partial+0xd4>)
 8003e92:	f240 422c 	movw	r2, #1068	; 0x42c
 8003e96:	492b      	ldr	r1, [pc, #172]	; (8003f44 <pbuf_copy_partial+0xd8>)
 8003e98:	482b      	ldr	r0, [pc, #172]	; (8003f48 <pbuf_copy_partial+0xdc>)
 8003e9a:	f7fd f97a 	bl	8001192 <lwip_win32_platform_diag>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e04a      	b.n	8003f38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <pbuf_copy_partial+0x4e>
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <pbuf_copy_partial+0xd4>)
 8003eaa:	f240 422d 	movw	r2, #1069	; 0x42d
 8003eae:	4927      	ldr	r1, [pc, #156]	; (8003f4c <pbuf_copy_partial+0xe0>)
 8003eb0:	4825      	ldr	r0, [pc, #148]	; (8003f48 <pbuf_copy_partial+0xdc>)
 8003eb2:	f7fd f96e 	bl	8001192 <lwip_win32_platform_diag>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e03e      	b.n	8003f38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e034      	b.n	8003f2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8003ec0:	88bb      	ldrh	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <pbuf_copy_partial+0x70>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	895b      	ldrh	r3, [r3, #10]
 8003eca:	88ba      	ldrh	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d305      	bcc.n	8003edc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	895b      	ldrh	r3, [r3, #10]
 8003ed4:	88ba      	ldrh	r2, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	80bb      	strh	r3, [r7, #4]
 8003eda:	e023      	b.n	8003f24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	895a      	ldrh	r2, [r3, #10]
 8003ee0:	88bb      	ldrh	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8003ee6:	8b3a      	ldrh	r2, [r7, #24]
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d901      	bls.n	8003ef2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8003ef2:	8b7b      	ldrh	r3, [r7, #26]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	18d0      	adds	r0, r2, r3
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	88bb      	ldrh	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	8b3a      	ldrh	r2, [r7, #24]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f00c fae6 	bl	80104d4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8003f08:	8afa      	ldrh	r2, [r7, #22]
 8003f0a:	8b3b      	ldrh	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8003f10:	8b7a      	ldrh	r2, [r7, #26]
 8003f12:	8b3b      	ldrh	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	8b3b      	ldrh	r3, [r7, #24]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <pbuf_copy_partial+0xca>
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1c4      	bne.n	8003ec0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8003f36:	8afb      	ldrh	r3, [r7, #22]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	08011a10 	.word	0x08011a10
 8003f44:	08011d6c 	.word	0x08011d6c
 8003f48:	08011a64 	.word	0x08011a64
 8003f4c:	08011d8c 	.word	0x08011d8c

08003f50 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <pbuf_coalesce+0x18>
    return p;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	e010      	b.n	8003f8a <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f80f 	bl	8003f94 <pbuf_clone>
 8003f76:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	e003      	b.n	8003f8a <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fd02 	bl	800398c <pbuf_free>
  return q;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	603a      	str	r2, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	8919      	ldrh	r1, [r3, #8]
 8003fa8:	88ba      	ldrh	r2, [r7, #4]
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fa4f 	bl	8003450 <pbuf_alloc>
 8003fb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <pbuf_clone+0x2a>
    return NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e016      	b.n	8003fec <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff fe1d 	bl	8003c00 <pbuf_copy>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8003fca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <pbuf_clone+0x56>
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <pbuf_clone+0x60>)
 8003fd4:	f240 524c 	movw	r2, #1356	; 0x54c
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <pbuf_clone+0x64>)
 8003fda:	4808      	ldr	r0, [pc, #32]	; (8003ffc <pbuf_clone+0x68>)
 8003fdc:	f00c f878 	bl	80100d0 <iprintf>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f00c f977 	bl	80102d4 <fflush>
 8003fe6:	f00c f8bc 	bl	8010162 <abort>
  return q;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08011a10 	.word	0x08011a10
 8003ff8:	08011e98 	.word	0x08011e98
 8003ffc:	08011a64 	.word	0x08011a64

08004000 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004004:	f7fd f8e6 	bl	80011d4 <lwip_port_rand>
 8004008:	4603      	mov	r3, r0
 800400a:	b29b      	uxth	r3, r3
 800400c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004010:	b29b      	uxth	r3, r3
 8004012:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004016:	b29a      	uxth	r2, r3
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <tcp_init+0x20>)
 800401a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000004 	.word	0x20000004

08004024 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7d1b      	ldrb	r3, [r3, #20]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10a      	bne.n	800404a <tcp_free+0x26>
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <tcp_free+0x38>)
 8004036:	22d4      	movs	r2, #212	; 0xd4
 8004038:	4909      	ldr	r1, [pc, #36]	; (8004060 <tcp_free+0x3c>)
 800403a:	480a      	ldr	r0, [pc, #40]	; (8004064 <tcp_free+0x40>)
 800403c:	f00c f848 	bl	80100d0 <iprintf>
 8004040:	2000      	movs	r0, #0
 8004042:	f00c f947 	bl	80102d4 <fflush>
 8004046:	f00c f88c 	bl	8010162 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	2000      	movs	r0, #0
 800404e:	f7fe fe93 	bl	8002d78 <memp_free>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	08011f24 	.word	0x08011f24
 8004060:	08011f44 	.word	0x08011f44
 8004064:	08011f58 	.word	0x08011f58

08004068 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7d1b      	ldrb	r3, [r3, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d10a      	bne.n	800408e <tcp_free_listen+0x26>
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <tcp_free_listen+0x38>)
 800407a:	22df      	movs	r2, #223	; 0xdf
 800407c:	4909      	ldr	r1, [pc, #36]	; (80040a4 <tcp_free_listen+0x3c>)
 800407e:	480a      	ldr	r0, [pc, #40]	; (80040a8 <tcp_free_listen+0x40>)
 8004080:	f00c f826 	bl	80100d0 <iprintf>
 8004084:	2000      	movs	r0, #0
 8004086:	f00c f925 	bl	80102d4 <fflush>
 800408a:	f00c f86a 	bl	8010162 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	2001      	movs	r0, #1
 8004092:	f7fe fe71 	bl	8002d78 <memp_free>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	08011f24 	.word	0x08011f24
 80040a4:	08011f80 	.word	0x08011f80
 80040a8:	08011f58 	.word	0x08011f58

080040ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80040b0:	f000 fefe 	bl	8004eb0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <tcp_tmr+0x28>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <tcp_tmr+0x28>)
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <tcp_tmr+0x28>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80040cc:	f000 fb7e 	bl	80047cc <tcp_slowtmr>
  }
}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200005a1 	.word	0x200005a1

080040d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <tcp_remove_listener+0x26>
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <tcp_remove_listener+0x50>)
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	490f      	ldr	r1, [pc, #60]	; (800412c <tcp_remove_listener+0x54>)
 80040ee:	4810      	ldr	r0, [pc, #64]	; (8004130 <tcp_remove_listener+0x58>)
 80040f0:	f00b ffee 	bl	80100d0 <iprintf>
 80040f4:	2000      	movs	r0, #0
 80040f6:	f00c f8ed 	bl	80102d4 <fflush>
 80040fa:	f00c f832 	bl	8010162 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e00a      	b.n	800411a <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d102      	bne.n	8004114 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f1      	bne.n	8004104 <tcp_remove_listener+0x2c>
    }
  }
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	08011f24 	.word	0x08011f24
 800412c:	08011f9c 	.word	0x08011f9c
 8004130:	08011f58 	.word	0x08011f58

08004134 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <tcp_listen_closed+0x26>
 8004142:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <tcp_listen_closed+0x74>)
 8004144:	f240 1211 	movw	r2, #273	; 0x111
 8004148:	4918      	ldr	r1, [pc, #96]	; (80041ac <tcp_listen_closed+0x78>)
 800414a:	4819      	ldr	r0, [pc, #100]	; (80041b0 <tcp_listen_closed+0x7c>)
 800414c:	f00b ffc0 	bl	80100d0 <iprintf>
 8004150:	2000      	movs	r0, #0
 8004152:	f00c f8bf 	bl	80102d4 <fflush>
 8004156:	f00c f804 	bl	8010162 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7d1b      	ldrb	r3, [r3, #20]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d00b      	beq.n	800417a <tcp_listen_closed+0x46>
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <tcp_listen_closed+0x74>)
 8004164:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004168:	4912      	ldr	r1, [pc, #72]	; (80041b4 <tcp_listen_closed+0x80>)
 800416a:	4811      	ldr	r0, [pc, #68]	; (80041b0 <tcp_listen_closed+0x7c>)
 800416c:	f00b ffb0 	bl	80100d0 <iprintf>
 8004170:	2000      	movs	r0, #0
 8004172:	f00c f8af 	bl	80102d4 <fflush>
 8004176:	f00b fff4 	bl	8010162 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800417a:	2301      	movs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e00b      	b.n	8004198 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <tcp_listen_closed+0x84>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ffa3 	bl	80040d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d9f0      	bls.n	8004180 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	08011f24 	.word	0x08011f24
 80041ac:	08011fc4 	.word	0x08011fc4
 80041b0:	08011f58 	.word	0x08011f58
 80041b4:	08011fd0 	.word	0x08011fd0
 80041b8:	08013880 	.word	0x08013880

080041bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80041bc:	b5b0      	push	{r4, r5, r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af04      	add	r7, sp, #16
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <tcp_close_shutdown+0x2a>
 80041ce:	4b66      	ldr	r3, [pc, #408]	; (8004368 <tcp_close_shutdown+0x1ac>)
 80041d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80041d4:	4965      	ldr	r1, [pc, #404]	; (800436c <tcp_close_shutdown+0x1b0>)
 80041d6:	4866      	ldr	r0, [pc, #408]	; (8004370 <tcp_close_shutdown+0x1b4>)
 80041d8:	f00b ff7a 	bl	80100d0 <iprintf>
 80041dc:	2000      	movs	r0, #0
 80041de:	f00c f879 	bl	80102d4 <fflush>
 80041e2:	f00b ffbe 	bl	8010162 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d06b      	beq.n	80042c4 <tcp_close_shutdown+0x108>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7d1b      	ldrb	r3, [r3, #20]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d003      	beq.n	80041fc <tcp_close_shutdown+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7d1b      	ldrb	r3, [r3, #20]
 80041f8:	2b07      	cmp	r3, #7
 80041fa:	d163      	bne.n	80042c4 <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <tcp_close_shutdown+0x52>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800420c:	d05a      	beq.n	80042c4 <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8b5b      	ldrh	r3, [r3, #26]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <tcp_close_shutdown+0x76>
 800421a:	4b53      	ldr	r3, [pc, #332]	; (8004368 <tcp_close_shutdown+0x1ac>)
 800421c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8004220:	4954      	ldr	r1, [pc, #336]	; (8004374 <tcp_close_shutdown+0x1b8>)
 8004222:	4853      	ldr	r0, [pc, #332]	; (8004370 <tcp_close_shutdown+0x1b4>)
 8004224:	f00b ff54 	bl	80100d0 <iprintf>
 8004228:	2000      	movs	r0, #0
 800422a:	f00c f853 	bl	80102d4 <fflush>
 800422e:	f00b ff98 	bl	8010162 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800423a:	687d      	ldr	r5, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	8ad2      	ldrh	r2, [r2, #22]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	8b09      	ldrh	r1, [r1, #24]
 8004248:	9102      	str	r1, [sp, #8]
 800424a:	9201      	str	r2, [sp, #4]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	462b      	mov	r3, r5
 8004250:	4622      	mov	r2, r4
 8004252:	4601      	mov	r1, r0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f005 f929 	bl	80094ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f001 f914 	bl	8005488 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <tcp_close_shutdown+0x1bc>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d105      	bne.n	8004276 <tcp_close_shutdown+0xba>
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <tcp_close_shutdown+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a41      	ldr	r2, [pc, #260]	; (8004378 <tcp_close_shutdown+0x1bc>)
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e013      	b.n	800429e <tcp_close_shutdown+0xe2>
 8004276:	4b40      	ldr	r3, [pc, #256]	; (8004378 <tcp_close_shutdown+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e00c      	b.n	8004298 <tcp_close_shutdown+0xdc>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d104      	bne.n	8004292 <tcp_close_shutdown+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e005      	b.n	800429e <tcp_close_shutdown+0xe2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ef      	bne.n	800427e <tcp_close_shutdown+0xc2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <tcp_close_shutdown+0x1c0>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80042aa:	4b35      	ldr	r3, [pc, #212]	; (8004380 <tcp_close_shutdown+0x1c4>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d102      	bne.n	80042ba <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80042b4:	f003 fe96 	bl	8007fe4 <tcp_trigger_input_pcb_close>
 80042b8:	e002      	b.n	80042c0 <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff feb2 	bl	8004024 <tcp_free>
      }
      return ERR_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e04d      	b.n	8004360 <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7d1b      	ldrb	r3, [r3, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d02d      	beq.n	8004328 <tcp_close_shutdown+0x16c>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d036      	beq.n	800433e <tcp_close_shutdown+0x182>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d13f      	bne.n	8004354 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8adb      	ldrh	r3, [r3, #22]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d021      	beq.n	8004320 <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <tcp_close_shutdown+0x1c8>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d105      	bne.n	80042f2 <tcp_close_shutdown+0x136>
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <tcp_close_shutdown+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <tcp_close_shutdown+0x1c8>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e013      	b.n	800431a <tcp_close_shutdown+0x15e>
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <tcp_close_shutdown+0x1c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	e00c      	b.n	8004314 <tcp_close_shutdown+0x158>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <tcp_close_shutdown+0x152>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e005      	b.n	800431a <tcp_close_shutdown+0x15e>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ef      	bne.n	80042fa <tcp_close_shutdown+0x13e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fe7f 	bl	8004024 <tcp_free>
      break;
 8004326:	e01a      	b.n	800435e <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff03 	bl	8004134 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4815      	ldr	r0, [pc, #84]	; (8004388 <tcp_close_shutdown+0x1cc>)
 8004332:	f001 f8f9 	bl	8005528 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fe96 	bl	8004068 <tcp_free_listen>
      break;
 800433c:	e00f      	b.n	800435e <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <tcp_close_shutdown+0x1bc>)
 8004342:	f001 f8f1 	bl	8005528 <tcp_pcb_remove>
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <tcp_close_shutdown+0x1c0>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fe69 	bl	8004024 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8004352:	e004      	b.n	800435e <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f819 	bl	800438c <tcp_close_shutdown_fin>
 800435a:	4603      	mov	r3, r0
 800435c:	e000      	b.n	8004360 <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bdb0      	pop	{r4, r5, r7, pc}
 8004368:	08011f24 	.word	0x08011f24
 800436c:	08011fe8 	.word	0x08011fe8
 8004370:	08011f58 	.word	0x08011f58
 8004374:	08012008 	.word	0x08012008
 8004378:	20001740 	.word	0x20001740
 800437c:	2000173c 	.word	0x2000173c
 8004380:	20001754 	.word	0x20001754
 8004384:	2000174c 	.word	0x2000174c
 8004388:	20001748 	.word	0x20001748

0800438c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <tcp_close_shutdown_fin+0x26>
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <tcp_close_shutdown_fin+0xcc>)
 800439c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80043a0:	492e      	ldr	r1, [pc, #184]	; (800445c <tcp_close_shutdown_fin+0xd0>)
 80043a2:	482f      	ldr	r0, [pc, #188]	; (8004460 <tcp_close_shutdown_fin+0xd4>)
 80043a4:	f00b fe94 	bl	80100d0 <iprintf>
 80043a8:	2000      	movs	r0, #0
 80043aa:	f00b ff93 	bl	80102d4 <fflush>
 80043ae:	f00b fed8 	bl	8010162 <abort>

  switch (pcb->state) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7d1b      	ldrb	r3, [r3, #20]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d010      	beq.n	80043dc <tcp_close_shutdown_fin+0x50>
 80043ba:	2b07      	cmp	r3, #7
 80043bc:	d01b      	beq.n	80043f6 <tcp_close_shutdown_fin+0x6a>
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d126      	bne.n	8004410 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f004 f850 	bl	8008468 <tcp_send_fin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80043cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11f      	bne.n	8004414 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2205      	movs	r2, #5
 80043d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80043da:	e01b      	b.n	8004414 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f004 f843 	bl	8008468 <tcp_send_fin>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d114      	bne.n	8004418 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2205      	movs	r2, #5
 80043f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80043f4:	e010      	b.n	8004418 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f004 f836 	bl	8008468 <tcp_send_fin>
 80043fc:	4603      	mov	r3, r0
 80043fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2209      	movs	r2, #9
 800440c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800440e:	e005      	b.n	800441c <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e01c      	b.n	800444e <tcp_close_shutdown_fin+0xc2>
      break;
 8004414:	bf00      	nop
 8004416:	e002      	b.n	800441e <tcp_close_shutdown_fin+0x92>
      break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <tcp_close_shutdown_fin+0x92>
      break;
 800441c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f004 f96c 	bl	8008704 <tcp_output>
 800442c:	e00d      	b.n	800444a <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d108      	bne.n	800444a <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8b5b      	ldrh	r3, [r3, #26]
 800443c:	f043 0308 	orr.w	r3, r3, #8
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e001      	b.n	800444e <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 800444a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08011f24 	.word	0x08011f24
 800445c:	08011fc4 	.word	0x08011fc4
 8004460:	08011f58 	.word	0x08011f58

08004464 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <tcp_close+0x22>
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <tcp_close+0x4c>)
 8004474:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004478:	490e      	ldr	r1, [pc, #56]	; (80044b4 <tcp_close+0x50>)
 800447a:	480f      	ldr	r0, [pc, #60]	; (80044b8 <tcp_close+0x54>)
 800447c:	f7fc fe89 	bl	8001192 <lwip_win32_platform_diag>
 8004480:	f06f 030f 	mvn.w	r3, #15
 8004484:	e00f      	b.n	80044a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7d1b      	ldrb	r3, [r3, #20]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d006      	beq.n	800449c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8b5b      	ldrh	r3, [r3, #26]
 8004492:	f043 0310 	orr.w	r3, r3, #16
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800449c:	2101      	movs	r1, #1
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fe8c 	bl	80041bc <tcp_close_shutdown>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	08011f24 	.word	0x08011f24
 80044b4:	08012024 	.word	0x08012024
 80044b8:	08011f58 	.word	0x08011f58

080044bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af04      	add	r7, sp, #16
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <tcp_abandon+0x20>
 80044cc:	4b54      	ldr	r3, [pc, #336]	; (8004620 <tcp_abandon+0x164>)
 80044ce:	f240 223d 	movw	r2, #573	; 0x23d
 80044d2:	4954      	ldr	r1, [pc, #336]	; (8004624 <tcp_abandon+0x168>)
 80044d4:	4854      	ldr	r0, [pc, #336]	; (8004628 <tcp_abandon+0x16c>)
 80044d6:	f7fc fe5c 	bl	8001192 <lwip_win32_platform_diag>
 80044da:	e09e      	b.n	800461a <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7d1b      	ldrb	r3, [r3, #20]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10b      	bne.n	80044fc <tcp_abandon+0x40>
 80044e4:	4b4e      	ldr	r3, [pc, #312]	; (8004620 <tcp_abandon+0x164>)
 80044e6:	f240 2241 	movw	r2, #577	; 0x241
 80044ea:	4950      	ldr	r1, [pc, #320]	; (800462c <tcp_abandon+0x170>)
 80044ec:	484e      	ldr	r0, [pc, #312]	; (8004628 <tcp_abandon+0x16c>)
 80044ee:	f00b fdef 	bl	80100d0 <iprintf>
 80044f2:	2000      	movs	r0, #0
 80044f4:	f00b feee 	bl	80102d4 <fflush>
 80044f8:	f00b fe33 	bl	8010162 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7d1b      	ldrb	r3, [r3, #20]
 8004500:	2b0a      	cmp	r3, #10
 8004502:	d107      	bne.n	8004514 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	484a      	ldr	r0, [pc, #296]	; (8004630 <tcp_abandon+0x174>)
 8004508:	f001 f80e 	bl	8005528 <tcp_pcb_remove>
    tcp_free(pcb);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fd89 	bl	8004024 <tcp_free>
 8004512:	e082      	b.n	800461a <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7d1b      	ldrb	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d126      	bne.n	800458c <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8adb      	ldrh	r3, [r3, #22]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02e      	beq.n	80045a4 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <tcp_abandon+0x178>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d105      	bne.n	800455c <tcp_abandon+0xa0>
 8004550:	4b38      	ldr	r3, [pc, #224]	; (8004634 <tcp_abandon+0x178>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a37      	ldr	r2, [pc, #220]	; (8004634 <tcp_abandon+0x178>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e013      	b.n	8004584 <tcp_abandon+0xc8>
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <tcp_abandon+0x178>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e00c      	b.n	800457e <tcp_abandon+0xc2>
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d104      	bne.n	8004578 <tcp_abandon+0xbc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	e005      	b.n	8004584 <tcp_abandon+0xc8>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ef      	bne.n	8004564 <tcp_abandon+0xa8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e00b      	b.n	80045a4 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8adb      	ldrh	r3, [r3, #22]
 8004594:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4827      	ldr	r0, [pc, #156]	; (8004638 <tcp_abandon+0x17c>)
 800459a:	f000 ffc5 	bl	8005528 <tcp_pcb_remove>
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <tcp_abandon+0x180>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fd5d 	bl	8005070 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd54 	bl	8005070 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd4b 	bl	8005070 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	8b12      	ldrh	r2, [r2, #24]
 80045ea:	9202      	str	r2, [sp, #8]
 80045ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ee:	9201      	str	r2, [sp, #4]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	460b      	mov	r3, r1
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f004 ff57 	bl	80094ac <tcp_rst>
    }
    last_state = pcb->state;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7d1b      	ldrb	r3, [r3, #20]
 8004602:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fd0d 	bl	8004024 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <tcp_abandon+0x15e>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f06f 010c 	mvn.w	r1, #12
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	4798      	blx	r3
  }
}
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	08011f24 	.word	0x08011f24
 8004624:	08012058 	.word	0x08012058
 8004628:	08011f58 	.word	0x08011f58
 800462c:	08012074 	.word	0x08012074
 8004630:	20001750 	.word	0x20001750
 8004634:	2000174c 	.word	0x2000174c
 8004638:	20001740 	.word	0x20001740
 800463c:	2000173c 	.word	0x2000173c

08004640 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004648:	2101      	movs	r1, #1
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff36 	bl	80044bc <tcp_abandon>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <tcp_update_rcv_ann_wnd+0x26>
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <tcp_update_rcv_ann_wnd+0xbc>)
 8004668:	f240 32aa 	movw	r2, #938	; 0x3aa
 800466c:	492a      	ldr	r1, [pc, #168]	; (8004718 <tcp_update_rcv_ann_wnd+0xc0>)
 800466e:	482b      	ldr	r0, [pc, #172]	; (800471c <tcp_update_rcv_ann_wnd+0xc4>)
 8004670:	f00b fd2e 	bl	80100d0 <iprintf>
 8004674:	2000      	movs	r0, #0
 8004676:	f00b fe2d 	bl	80102d4 <fflush>
 800467a:	f00b fd72 	bl	8010162 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004686:	4413      	add	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004692:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8004696:	d802      	bhi.n	800469e <tcp_update_rcv_ann_wnd+0x46>
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800469c:	e001      	b.n	80046a2 <tcp_update_rcv_ann_wnd+0x4a>
 800469e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80046a2:	4413      	add	r3, r2
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db08      	blt.n	80046be <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	e025      	b.n	800470a <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da03      	bge.n	80046d4 <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d2:	e019      	b.n	8004708 <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d30b      	bcc.n	8004700 <tcp_update_rcv_ann_wnd+0xa8>
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <tcp_update_rcv_ann_wnd+0xbc>)
 80046ea:	f240 32ba 	movw	r2, #954	; 0x3ba
 80046ee:	490c      	ldr	r1, [pc, #48]	; (8004720 <tcp_update_rcv_ann_wnd+0xc8>)
 80046f0:	480a      	ldr	r0, [pc, #40]	; (800471c <tcp_update_rcv_ann_wnd+0xc4>)
 80046f2:	f00b fced 	bl	80100d0 <iprintf>
 80046f6:	2000      	movs	r0, #0
 80046f8:	f00b fdec 	bl	80102d4 <fflush>
 80046fc:	f00b fd31 	bl	8010162 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004708:	2300      	movs	r3, #0
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	08011f24 	.word	0x08011f24
 8004718:	08012170 	.word	0x08012170
 800471c:	08011f58 	.word	0x08011f58
 8004720:	08012194 	.word	0x08012194

08004724 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <tcp_recved+0x22>
 8004736:	4b21      	ldr	r3, [pc, #132]	; (80047bc <tcp_recved+0x98>)
 8004738:	f240 32d3 	movw	r2, #979	; 0x3d3
 800473c:	4920      	ldr	r1, [pc, #128]	; (80047c0 <tcp_recved+0x9c>)
 800473e:	4821      	ldr	r0, [pc, #132]	; (80047c4 <tcp_recved+0xa0>)
 8004740:	f7fc fd27 	bl	8001192 <lwip_win32_platform_diag>
 8004744:	e036      	b.n	80047b4 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7d1b      	ldrb	r3, [r3, #20]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d10b      	bne.n	8004766 <tcp_recved+0x42>
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <tcp_recved+0x98>)
 8004750:	f240 32d7 	movw	r2, #983	; 0x3d7
 8004754:	491c      	ldr	r1, [pc, #112]	; (80047c8 <tcp_recved+0xa4>)
 8004756:	481b      	ldr	r0, [pc, #108]	; (80047c4 <tcp_recved+0xa0>)
 8004758:	f00b fcba 	bl	80100d0 <iprintf>
 800475c:	2000      	movs	r0, #0
 800475e:	f00b fdb9 	bl	80102d4 <fflush>
 8004762:	f00b fcfe 	bl	8010162 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	4413      	add	r3, r2
 800476e:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004776:	d804      	bhi.n	8004782 <tcp_recved+0x5e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	89fa      	ldrh	r2, [r7, #14]
 800477e:	429a      	cmp	r2, r3
 8004780:	d204      	bcs.n	800478c <tcp_recved+0x68>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
 800478a:	e002      	b.n	8004792 <tcp_recved+0x6e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ff60 	bl	8004658 <tcp_update_rcv_ann_wnd>
 8004798:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2bc7      	cmp	r3, #199	; 0xc7
 800479e:	d909      	bls.n	80047b4 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8b5b      	ldrh	r3, [r3, #26]
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f003 ffa8 	bl	8008704 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	08011f24 	.word	0x08011f24
 80047c0:	080121b0 	.word	0x080121b0
 80047c4:	08011f58 	.word	0x08011f58
 80047c8:	080121c8 	.word	0x080121c8

080047cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b090      	sub	sp, #64	; 0x40
 80047d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80047d8:	4ba1      	ldr	r3, [pc, #644]	; (8004a60 <tcp_slowtmr+0x294>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4aa0      	ldr	r2, [pc, #640]	; (8004a60 <tcp_slowtmr+0x294>)
 80047e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80047e2:	4ba0      	ldr	r3, [pc, #640]	; (8004a64 <tcp_slowtmr+0x298>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4b9e      	ldr	r3, [pc, #632]	; (8004a64 <tcp_slowtmr+0x298>)
 80047ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80047f2:	4b9d      	ldr	r3, [pc, #628]	; (8004a68 <tcp_slowtmr+0x29c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80047f8:	e2c3      	b.n	8004d82 <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	7d1b      	ldrb	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <tcp_slowtmr+0x4e>
 8004802:	4b9a      	ldr	r3, [pc, #616]	; (8004a6c <tcp_slowtmr+0x2a0>)
 8004804:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8004808:	4999      	ldr	r1, [pc, #612]	; (8004a70 <tcp_slowtmr+0x2a4>)
 800480a:	489a      	ldr	r0, [pc, #616]	; (8004a74 <tcp_slowtmr+0x2a8>)
 800480c:	f00b fc60 	bl	80100d0 <iprintf>
 8004810:	2000      	movs	r0, #0
 8004812:	f00b fd5f 	bl	80102d4 <fflush>
 8004816:	f00b fca4 	bl	8010162 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	7d1b      	ldrb	r3, [r3, #20]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10b      	bne.n	800483a <tcp_slowtmr+0x6e>
 8004822:	4b92      	ldr	r3, [pc, #584]	; (8004a6c <tcp_slowtmr+0x2a0>)
 8004824:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8004828:	4993      	ldr	r1, [pc, #588]	; (8004a78 <tcp_slowtmr+0x2ac>)
 800482a:	4892      	ldr	r0, [pc, #584]	; (8004a74 <tcp_slowtmr+0x2a8>)
 800482c:	f00b fc50 	bl	80100d0 <iprintf>
 8004830:	2000      	movs	r0, #0
 8004832:	f00b fd4f 	bl	80102d4 <fflush>
 8004836:	f00b fc94 	bl	8010162 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	7d1b      	ldrb	r3, [r3, #20]
 800483e:	2b0a      	cmp	r3, #10
 8004840:	d10b      	bne.n	800485a <tcp_slowtmr+0x8e>
 8004842:	4b8a      	ldr	r3, [pc, #552]	; (8004a6c <tcp_slowtmr+0x2a0>)
 8004844:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004848:	498c      	ldr	r1, [pc, #560]	; (8004a7c <tcp_slowtmr+0x2b0>)
 800484a:	488a      	ldr	r0, [pc, #552]	; (8004a74 <tcp_slowtmr+0x2a8>)
 800484c:	f00b fc40 	bl	80100d0 <iprintf>
 8004850:	2000      	movs	r0, #0
 8004852:	f00b fd3f 	bl	80102d4 <fflush>
 8004856:	f00b fc84 	bl	8010162 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	7f9a      	ldrb	r2, [r3, #30]
 800485e:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <tcp_slowtmr+0x298>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d105      	bne.n	8004872 <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8004870:	e287      	b.n	8004d82 <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <tcp_slowtmr+0x298>)
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	7d1b      	ldrb	r3, [r3, #20]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d10a      	bne.n	80048a4 <tcp_slowtmr+0xd8>
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004894:	2b05      	cmp	r3, #5
 8004896:	d905      	bls.n	80048a4 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8004898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489c:	3301      	adds	r3, #1
 800489e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80048a2:	e129      	b.n	8004af8 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048aa:	2b0b      	cmp	r3, #11
 80048ac:	d905      	bls.n	80048ba <tcp_slowtmr+0xee>
      ++pcb_remove;
 80048ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048b2:	3301      	adds	r3, #1
 80048b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048b8:	e11e      	b.n	8004af8 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d07f      	beq.n	80049c4 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <tcp_slowtmr+0x118>
 80048cc:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <tcp_slowtmr+0x2a0>)
 80048ce:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80048d2:	496b      	ldr	r1, [pc, #428]	; (8004a80 <tcp_slowtmr+0x2b4>)
 80048d4:	4867      	ldr	r0, [pc, #412]	; (8004a74 <tcp_slowtmr+0x2a8>)
 80048d6:	f00b fbfb 	bl	80100d0 <iprintf>
 80048da:	2000      	movs	r0, #0
 80048dc:	f00b fcfa 	bl	80102d4 <fflush>
 80048e0:	f00b fc3f 	bl	8010162 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <tcp_slowtmr+0x138>
 80048ec:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <tcp_slowtmr+0x2a0>)
 80048ee:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80048f2:	4964      	ldr	r1, [pc, #400]	; (8004a84 <tcp_slowtmr+0x2b8>)
 80048f4:	485f      	ldr	r0, [pc, #380]	; (8004a74 <tcp_slowtmr+0x2a8>)
 80048f6:	f00b fbeb 	bl	80100d0 <iprintf>
 80048fa:	2000      	movs	r0, #0
 80048fc:	f00b fcea 	bl	80102d4 <fflush>
 8004900:	f00b fc2f 	bl	8010162 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800490a:	2b0b      	cmp	r3, #11
 800490c:	d905      	bls.n	800491a <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 800490e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004912:	3301      	adds	r3, #1
 8004914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004918:	e0ee      	b.n	8004af8 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004920:	3b01      	subs	r3, #1
 8004922:	4a59      	ldr	r2, [pc, #356]	; (8004a88 <tcp_slowtmr+0x2bc>)
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800492e:	7ffa      	ldrb	r2, [r7, #31]
 8004930:	429a      	cmp	r2, r3
 8004932:	d907      	bls.n	8004944 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800493a:	3301      	adds	r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800494a:	7ffa      	ldrb	r2, [r7, #31]
 800494c:	429a      	cmp	r2, r3
 800494e:	f200 80d3 	bhi.w	8004af8 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8004952:	2301      	movs	r3, #1
 8004954:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800495c:	2b00      	cmp	r3, #0
 800495e:	d108      	bne.n	8004972 <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8004960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004962:	f004 fe9b 	bl	800969c <tcp_zero_window_probe>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d014      	beq.n	8004996 <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	e011      	b.n	8004996 <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004978:	4619      	mov	r1, r3
 800497a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800497c:	f003 fc10 	bl	80081a0 <tcp_split_unsent_seg>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 8004986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004988:	f003 febc 	bl	8008704 <tcp_output>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80ad 	beq.w	8004af8 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	f200 80a3 	bhi.w	8004af8 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80049b8:	3301      	adds	r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80049c2:	e099      	b.n	8004af8 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0f      	blt.n	80049ee <tcp_slowtmr+0x222>
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80049d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80049d8:	4293      	cmp	r3, r2
 80049da:	d008      	beq.n	80049ee <tcp_slowtmr+0x222>
          ++pcb->rtime;
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80049fa:	429a      	cmp	r2, r3
 80049fc:	db7c      	blt.n	8004af8 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80049fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a00:	f004 f9b6 	bl	8008d70 <tcp_rexmit_rto_prepare>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <tcp_slowtmr+0x24e>
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d172      	bne.n	8004af8 <tcp_slowtmr+0x32c>
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06e      	beq.n	8004af8 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	7d1b      	ldrb	r3, [r3, #20]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d03b      	beq.n	8004a9a <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	bf28      	it	cs
 8004a2c:	230c      	movcs	r3, #12
 8004a2e:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8004a36:	10db      	asrs	r3, r3, #3
 8004a38:	b21b      	sxth	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8004a42:	4413      	add	r3, r2
 8004a44:	7fba      	ldrb	r2, [r7, #30]
 8004a46:	4911      	ldr	r1, [pc, #68]	; (8004a8c <tcp_slowtmr+0x2c0>)
 8004a48:	5c8a      	ldrb	r2, [r1, r2]
 8004a4a:	4093      	lsls	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004a54:	4293      	cmp	r3, r2
 8004a56:	dc1b      	bgt.n	8004a90 <tcp_slowtmr+0x2c4>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	b21a      	sxth	r2, r3
 8004a5c:	e01a      	b.n	8004a94 <tcp_slowtmr+0x2c8>
 8004a5e:	bf00      	nop
 8004a60:	20001744 	.word	0x20001744
 8004a64:	200005a2 	.word	0x200005a2
 8004a68:	20001740 	.word	0x20001740
 8004a6c:	08011f24 	.word	0x08011f24
 8004a70:	08012258 	.word	0x08012258
 8004a74:	08011f58 	.word	0x08011f58
 8004a78:	08012284 	.word	0x08012284
 8004a7c:	080122b0 	.word	0x080122b0
 8004a80:	080122dc 	.word	0x080122dc
 8004a84:	08012310 	.word	0x08012310
 8004a88:	08013878 	.word	0x08013878
 8004a8c:	08013868 	.word	0x08013868
 8004a90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf28      	it	cs
 8004ab0:	4613      	movcs	r3, r2
 8004ab2:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8004ab4:	8afb      	ldrh	r3, [r7, #22]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d206      	bcs.n	8004ae0 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8004af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004af4:	f004 f9ba 	bl	8008e6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	7d1b      	ldrb	r3, [r3, #20]
 8004afc:	2b06      	cmp	r3, #6
 8004afe:	d111      	bne.n	8004b24 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	8b5b      	ldrh	r3, [r3, #26]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b0c:	4ba2      	ldr	r3, [pc, #648]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b28      	cmp	r3, #40	; 0x28
 8004b18:	d904      	bls.n	8004b24 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	7a5b      	ldrb	r3, [r3, #9]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d04c      	beq.n	8004bca <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d003      	beq.n	8004b40 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8004b3c:	2b07      	cmp	r3, #7
 8004b3e:	d144      	bne.n	8004bca <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b40:	4b95      	ldr	r3, [pc, #596]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b50:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8004b54:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8004b58:	4990      	ldr	r1, [pc, #576]	; (8004d9c <tcp_slowtmr+0x5d0>)
 8004b5a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d90a      	bls.n	8004b7a <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8004b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8004b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b72:	3301      	adds	r3, #1
 8004b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b78:	e027      	b.n	8004bca <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004b7a:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004b90:	4618      	mov	r0, r3
 8004b92:	4b83      	ldr	r3, [pc, #524]	; (8004da0 <tcp_slowtmr+0x5d4>)
 8004b94:	fb03 f300 	mul.w	r3, r3, r0
 8004b98:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8004b9a:	4980      	ldr	r1, [pc, #512]	; (8004d9c <tcp_slowtmr+0x5d0>)
 8004b9c:	fba1 1303 	umull	r1, r3, r1, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d911      	bls.n	8004bca <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 8004ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba8:	f004 fd32 	bl	8009610 <tcp_keepalive>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8004bb2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d011      	beq.n	8004bf6 <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8004bd2:	4b71      	ldr	r3, [pc, #452]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004be2:	4619      	mov	r1, r3
 8004be4:	460b      	mov	r3, r1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	440b      	add	r3, r1
 8004bea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8004bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf2:	f000 fe23 	bl	800583c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	7d1b      	ldrb	r3, [r3, #20]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d10b      	bne.n	8004c16 <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004bfe:	4b66      	ldr	r3, [pc, #408]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b28      	cmp	r3, #40	; 0x28
 8004c0a:	d904      	bls.n	8004c16 <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8004c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c10:	3301      	adds	r3, #1
 8004c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	7d1b      	ldrb	r3, [r3, #20]
 8004c1a:	2b09      	cmp	r3, #9
 8004c1c:	d10b      	bne.n	8004c36 <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004c1e:	4b5e      	ldr	r3, [pc, #376]	; (8004d98 <tcp_slowtmr+0x5cc>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2bf0      	cmp	r3, #240	; 0xf0
 8004c2a:	d904      	bls.n	8004c36 <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c30:	3301      	adds	r3, #1
 8004c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d06a      	beq.n	8004d14 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8004c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c48:	f000 fc1e 	bl	8005488 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d015      	beq.n	8004c7e <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004c52:	4b54      	ldr	r3, [pc, #336]	; (8004da4 <tcp_slowtmr+0x5d8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d10b      	bne.n	8004c74 <tcp_slowtmr+0x4a8>
 8004c5c:	4b52      	ldr	r3, [pc, #328]	; (8004da8 <tcp_slowtmr+0x5dc>)
 8004c5e:	f240 5271 	movw	r2, #1393	; 0x571
 8004c62:	4952      	ldr	r1, [pc, #328]	; (8004dac <tcp_slowtmr+0x5e0>)
 8004c64:	4852      	ldr	r0, [pc, #328]	; (8004db0 <tcp_slowtmr+0x5e4>)
 8004c66:	f00b fa33 	bl	80100d0 <iprintf>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f00b fb32 	bl	80102d4 <fflush>
 8004c70:	f00b fa77 	bl	8010162 <abort>
        prev->next = pcb->next;
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	60da      	str	r2, [r3, #12]
 8004c7c:	e014      	b.n	8004ca8 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8004c7e:	4b49      	ldr	r3, [pc, #292]	; (8004da4 <tcp_slowtmr+0x5d8>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d00b      	beq.n	8004ca0 <tcp_slowtmr+0x4d4>
 8004c88:	4b47      	ldr	r3, [pc, #284]	; (8004da8 <tcp_slowtmr+0x5dc>)
 8004c8a:	f240 5275 	movw	r2, #1397	; 0x575
 8004c8e:	4949      	ldr	r1, [pc, #292]	; (8004db4 <tcp_slowtmr+0x5e8>)
 8004c90:	4847      	ldr	r0, [pc, #284]	; (8004db0 <tcp_slowtmr+0x5e4>)
 8004c92:	f00b fa1d 	bl	80100d0 <iprintf>
 8004c96:	2000      	movs	r0, #0
 8004c98:	f00b fb1c 	bl	80102d4 <fflush>
 8004c9c:	f00b fa61 	bl	8010162 <abort>
        tcp_active_pcbs = pcb->next;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a3f      	ldr	r2, [pc, #252]	; (8004da4 <tcp_slowtmr+0x5d8>)
 8004ca6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8004ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004cb8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc0:	8ad2      	ldrh	r2, [r2, #22]
 8004cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc4:	8b09      	ldrh	r1, [r1, #24]
 8004cc6:	9102      	str	r1, [sp, #8]
 8004cc8:	9201      	str	r2, [sp, #4]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	462b      	mov	r3, r5
 8004cce:	4622      	mov	r2, r4
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cd4:	f004 fbea 	bl	80094ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	7d1b      	ldrb	r3, [r3, #20]
 8004ce2:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff f998 	bl	8004024 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <tcp_slowtmr+0x5ec>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <tcp_slowtmr+0x53e>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f06f 010c 	mvn.w	r1, #12
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <tcp_slowtmr+0x5ec>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d037      	beq.n	8004d82 <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8004d12:	e56c      	b.n	80047ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	7f1b      	ldrb	r3, [r3, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	7f1a      	ldrb	r2, [r3, #28]
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	7f5b      	ldrb	r3, [r3, #29]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d325      	bcc.n	8004d82 <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <tcp_slowtmr+0x5ec>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <tcp_slowtmr+0x598>
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d54:	6912      	ldr	r2, [r2, #16]
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d62:	e002      	b.n	8004d6a <tcp_slowtmr+0x59e>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <tcp_slowtmr+0x5ec>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d000      	beq.n	8004d74 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8004d72:	e53c      	b.n	80047ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8004d74:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8004d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7e:	f003 fcc1 	bl	8008704 <tcp_output>
  while (pcb != NULL) {
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f ad38 	bne.w	80047fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <tcp_slowtmr+0x5f0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004d94:	e076      	b.n	8004e84 <tcp_slowtmr+0x6b8>
 8004d96:	bf00      	nop
 8004d98:	20001744 	.word	0x20001744
 8004d9c:	10624dd3 	.word	0x10624dd3
 8004da0:	000124f8 	.word	0x000124f8
 8004da4:	20001740 	.word	0x20001740
 8004da8:	08011f24 	.word	0x08011f24
 8004dac:	08012348 	.word	0x08012348
 8004db0:	08011f58 	.word	0x08011f58
 8004db4:	08012374 	.word	0x08012374
 8004db8:	2000173c 	.word	0x2000173c
 8004dbc:	20001750 	.word	0x20001750
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	7d1b      	ldrb	r3, [r3, #20]
 8004dc4:	2b0a      	cmp	r3, #10
 8004dc6:	d00b      	beq.n	8004de0 <tcp_slowtmr+0x614>
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <tcp_slowtmr+0x6c8>)
 8004dca:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8004dce:	4932      	ldr	r1, [pc, #200]	; (8004e98 <tcp_slowtmr+0x6cc>)
 8004dd0:	4832      	ldr	r0, [pc, #200]	; (8004e9c <tcp_slowtmr+0x6d0>)
 8004dd2:	f00b f97d 	bl	80100d0 <iprintf>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f00b fa7c 	bl	80102d4 <fflush>
 8004ddc:	f00b f9c1 	bl	8010162 <abort>
    pcb_remove = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <tcp_slowtmr+0x6d4>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2bf0      	cmp	r3, #240	; 0xf0
 8004df2:	d904      	bls.n	8004dfe <tcp_slowtmr+0x632>
      ++pcb_remove;
 8004df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d039      	beq.n	8004e7a <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8004e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e08:	f000 fb3e 	bl	8005488 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d015      	beq.n	8004e3e <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <tcp_slowtmr+0x6d8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10b      	bne.n	8004e34 <tcp_slowtmr+0x668>
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <tcp_slowtmr+0x6c8>)
 8004e1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8004e22:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <tcp_slowtmr+0x6dc>)
 8004e24:	481d      	ldr	r0, [pc, #116]	; (8004e9c <tcp_slowtmr+0x6d0>)
 8004e26:	f00b f953 	bl	80100d0 <iprintf>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f00b fa52 	bl	80102d4 <fflush>
 8004e30:	f00b f997 	bl	8010162 <abort>
        prev->next = pcb->next;
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e014      	b.n	8004e68 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <tcp_slowtmr+0x6d8>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d00b      	beq.n	8004e60 <tcp_slowtmr+0x694>
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <tcp_slowtmr+0x6c8>)
 8004e4a:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8004e4e:	4917      	ldr	r1, [pc, #92]	; (8004eac <tcp_slowtmr+0x6e0>)
 8004e50:	4812      	ldr	r0, [pc, #72]	; (8004e9c <tcp_slowtmr+0x6d0>)
 8004e52:	f00b f93d 	bl	80100d0 <iprintf>
 8004e56:	2000      	movs	r0, #0
 8004e58:	f00b fa3c 	bl	80102d4 <fflush>
 8004e5c:	f00b f981 	bl	8010162 <abort>
        tcp_tw_pcbs = pcb->next;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <tcp_slowtmr+0x6d8>)
 8004e66:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004e72:	6838      	ldr	r0, [r7, #0]
 8004e74:	f7ff f8d6 	bl	8004024 <tcp_free>
 8004e78:	e004      	b.n	8004e84 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d19a      	bne.n	8004dc0 <tcp_slowtmr+0x5f4>
    }
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3730      	adds	r7, #48	; 0x30
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bdb0      	pop	{r4, r5, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	08011f24 	.word	0x08011f24
 8004e98:	080123a0 	.word	0x080123a0
 8004e9c:	08011f58 	.word	0x08011f58
 8004ea0:	20001744 	.word	0x20001744
 8004ea4:	20001750 	.word	0x20001750
 8004ea8:	080123d0 	.word	0x080123d0
 8004eac:	080123f8 	.word	0x080123f8

08004eb0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8004eb6:	4b2d      	ldr	r3, [pc, #180]	; (8004f6c <tcp_fasttmr+0xbc>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <tcp_fasttmr+0xbc>)
 8004ec0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <tcp_fasttmr+0xc0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8004ec8:	e048      	b.n	8004f5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7f9a      	ldrb	r2, [r3, #30]
 8004ece:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <tcp_fasttmr+0xbc>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d03f      	beq.n	8004f56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8004ed6:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <tcp_fasttmr+0xbc>)
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8b5b      	ldrh	r3, [r3, #26]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d010      	beq.n	8004f0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8b5b      	ldrh	r3, [r3, #26]
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f003 fc03 	bl	8008704 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8b5b      	ldrh	r3, [r3, #26]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8b5b      	ldrh	r3, [r3, #26]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8b5b      	ldrh	r3, [r3, #26]
 8004f1c:	f023 0308 	bic.w	r3, r3, #8
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fa30 	bl	800438c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <tcp_fasttmr+0xc4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f819 	bl	8004f78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <tcp_fasttmr+0xc4>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d000      	beq.n	8004f50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8004f4e:	e7b8      	b.n	8004ec2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e002      	b.n	8004f5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1b3      	bne.n	8004eca <tcp_fasttmr+0x1a>
    }
  }
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200005a2 	.word	0x200005a2
 8004f70:	20001740 	.word	0x20001740
 8004f74:	2000173c 	.word	0x2000173c

08004f78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <tcp_process_refused_data+0x22>
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <tcp_process_refused_data+0xec>)
 8004f88:	f240 620d 	movw	r2, #1549	; 0x60d
 8004f8c:	4936      	ldr	r1, [pc, #216]	; (8005068 <tcp_process_refused_data+0xf0>)
 8004f8e:	4837      	ldr	r0, [pc, #220]	; (800506c <tcp_process_refused_data+0xf4>)
 8004f90:	f7fc f8ff 	bl	8001192 <lwip_win32_platform_diag>
 8004f94:	f06f 030f 	mvn.w	r3, #15
 8004f98:	e060      	b.n	800505c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9e:	7b5b      	ldrb	r3, [r3, #13]
 8004fa0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <tcp_process_refused_data+0x58>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6918      	ldr	r0, [r3, #16]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	47a0      	blx	r4
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e007      	b.n	8004fe0 <tcp_process_refused_data+0x68>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f000 f8a8 	bl	800512c <tcp_recv_null>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d12a      	bne.n	800503e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d033      	beq.n	800505a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004ffa:	d005      	beq.n	8005008 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005000:	3301      	adds	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <tcp_process_refused_data+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6918      	ldr	r0, [r3, #16]
 800501c:	2300      	movs	r3, #0
 800501e:	2200      	movs	r2, #0
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	47a0      	blx	r4
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e001      	b.n	800502e <tcp_process_refused_data+0xb6>
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	f113 0f0d 	cmn.w	r3, #13
 8005036:	d110      	bne.n	800505a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8005038:	f06f 030c 	mvn.w	r3, #12
 800503c:	e00e      	b.n	800505c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800503e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005042:	f113 0f0d 	cmn.w	r3, #13
 8005046:	d102      	bne.n	800504e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005048:	f06f 030c 	mvn.w	r3, #12
 800504c:	e006      	b.n	800505c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8005054:	f06f 0304 	mvn.w	r3, #4
 8005058:	e000      	b.n	800505c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	08011f24 	.word	0x08011f24
 8005068:	08012420 	.word	0x08012420
 800506c:	08011f58 	.word	0x08011f58

08005070 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005078:	e007      	b.n	800508a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f809 	bl	8005098 <tcp_seg_free>
    seg = next;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f4      	bne.n	800507a <tcp_segs_free+0xa>
  }
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fc6a 	bl	800398c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	2002      	movs	r0, #2
 80050bc:	f7fd fe5c 	bl	8002d78 <memp_free>
  }
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <tcp_seg_copy+0x26>
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <tcp_seg_copy+0x58>)
 80050d8:	f240 6286 	movw	r2, #1670	; 0x686
 80050dc:	4911      	ldr	r1, [pc, #68]	; (8005124 <tcp_seg_copy+0x5c>)
 80050de:	4812      	ldr	r0, [pc, #72]	; (8005128 <tcp_seg_copy+0x60>)
 80050e0:	f00a fff6 	bl	80100d0 <iprintf>
 80050e4:	2000      	movs	r0, #0
 80050e6:	f00b f8f5 	bl	80102d4 <fflush>
 80050ea:	f00b f83a 	bl	8010162 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80050ee:	2002      	movs	r0, #2
 80050f0:	f7fd fdd8 	bl	8002ca4 <memp_malloc>
 80050f4:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <tcp_seg_copy+0x38>
    return NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e00a      	b.n	8005116 <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005100:	2214      	movs	r2, #20
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f00b f9e5 	bl	80104d4 <memcpy>
  pbuf_ref(cseg->p);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fcd6 	bl	8003ac0 <pbuf_ref>
  return cseg;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	08011f24 	.word	0x08011f24
 8005124:	08012464 	.word	0x08012464
 8005128:	08011f58 	.word	0x08011f58

0800512c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <tcp_recv_null+0x28>
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <tcp_recv_null+0x60>)
 8005142:	f240 629c 	movw	r2, #1692	; 0x69c
 8005146:	4912      	ldr	r1, [pc, #72]	; (8005190 <tcp_recv_null+0x64>)
 8005148:	4812      	ldr	r0, [pc, #72]	; (8005194 <tcp_recv_null+0x68>)
 800514a:	f7fc f822 	bl	8001192 <lwip_win32_platform_diag>
 800514e:	f06f 030f 	mvn.w	r3, #15
 8005152:	e016      	b.n	8005182 <tcp_recv_null+0x56>

  if (p != NULL) {
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	891b      	ldrh	r3, [r3, #8]
 800515e:	4619      	mov	r1, r3
 8005160:	68b8      	ldr	r0, [r7, #8]
 8005162:	f7ff fadf 	bl	8004724 <tcp_recved>
    pbuf_free(p);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe fc10 	bl	800398c <pbuf_free>
 800516c:	e008      	b.n	8005180 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800516e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff f974 	bl	8004464 <tcp_close>
 800517c:	4603      	mov	r3, r0
 800517e:	e000      	b.n	8005182 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	08011f24 	.word	0x08011f24
 8005190:	08012480 	.word	0x08012480
 8005194:	08011f58 	.word	0x08011f58

08005198 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db01      	blt.n	80051ae <tcp_kill_prio+0x16>
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	e000      	b.n	80051b0 <tcp_kill_prio+0x18>
 80051ae:	237f      	movs	r3, #127	; 0x7f
 80051b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d034      	beq.n	8005222 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <tcp_kill_prio+0x94>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e01f      	b.n	800520e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	7d5b      	ldrb	r3, [r3, #21]
 80051d2:	7afa      	ldrb	r2, [r7, #11]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d80c      	bhi.n	80051f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80051dc:	7afa      	ldrb	r2, [r7, #11]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d112      	bne.n	8005208 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <tcp_kill_prio+0x98>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d30a      	bcc.n	8005208 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <tcp_kill_prio+0x98>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	7d5b      	ldrb	r3, [r3, #21]
 8005206:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1dc      	bne.n	80051ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f7ff fa10 	bl	8004640 <tcp_abort>
 8005220:	e000      	b.n	8005224 <tcp_kill_prio+0x8c>
    return;
 8005222:	bf00      	nop
  }
}
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20001740 	.word	0x20001740
 8005230:	20001744 	.word	0x20001744

08005234 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d00e      	beq.n	8005262 <tcp_kill_state+0x2e>
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	2b09      	cmp	r3, #9
 8005248:	d00b      	beq.n	8005262 <tcp_kill_state+0x2e>
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <tcp_kill_state+0x8c>)
 800524c:	f240 62e1 	movw	r2, #1761	; 0x6e1
 8005250:	491c      	ldr	r1, [pc, #112]	; (80052c4 <tcp_kill_state+0x90>)
 8005252:	481d      	ldr	r0, [pc, #116]	; (80052c8 <tcp_kill_state+0x94>)
 8005254:	f00a ff3c 	bl	80100d0 <iprintf>
 8005258:	2000      	movs	r0, #0
 800525a:	f00b f83b 	bl	80102d4 <fflush>
 800525e:	f00a ff80 	bl	8010162 <abort>

  inactivity = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <tcp_kill_state+0x98>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e017      	b.n	80052a2 <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	7d1b      	ldrb	r3, [r3, #20]
 8005276:	79fa      	ldrb	r2, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d10f      	bne.n	800529c <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <tcp_kill_state+0x9c>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d307      	bcc.n	800529c <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <tcp_kill_state+0x9c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e4      	bne.n	8005272 <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80052ae:	2100      	movs	r1, #0
 80052b0:	6938      	ldr	r0, [r7, #16]
 80052b2:	f7ff f903 	bl	80044bc <tcp_abandon>
  }
}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08011f24 	.word	0x08011f24
 80052c4:	0801249c 	.word	0x0801249c
 80052c8:	08011f58 	.word	0x08011f58
 80052cc:	20001740 	.word	0x20001740
 80052d0:	20001744 	.word	0x20001744

080052d4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <tcp_kill_timewait+0x58>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e012      	b.n	8005310 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <tcp_kill_timewait+0x5c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d307      	bcc.n	800530a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <tcp_kill_timewait+0x5c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e9      	bne.n	80052ea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	f7ff f98f 	bl	8004640 <tcp_abort>
  }
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20001750 	.word	0x20001750
 8005330:	20001744 	.word	0x20001744

08005334 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <tcp_handle_closepend+0x48>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005340:	e014      	b.n	800536c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8b5b      	ldrh	r3, [r3, #26]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8b5b      	ldrh	r3, [r3, #26]
 8005358:	f023 0308 	bic.w	r3, r3, #8
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff f812 	bl	800438c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e7      	bne.n	8005342 <tcp_handle_closepend+0xe>
  }
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20001740 	.word	0x20001740

08005380 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800538a:	2000      	movs	r0, #0
 800538c:	f7fd fc8a 	bl	8002ca4 <memp_malloc>
 8005390:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d126      	bne.n	80053e6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8005398:	f7ff ffcc 	bl	8005334 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800539c:	f7ff ff9a 	bl	80052d4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f7fd fc7f 	bl	8002ca4 <memp_malloc>
 80053a6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11b      	bne.n	80053e6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80053ae:	2009      	movs	r0, #9
 80053b0:	f7ff ff40 	bl	8005234 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7fd fc75 	bl	8002ca4 <memp_malloc>
 80053ba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d111      	bne.n	80053e6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80053c2:	2008      	movs	r0, #8
 80053c4:	f7ff ff36 	bl	8005234 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fd fc6b 	bl	8002ca4 <memp_malloc>
 80053ce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fedd 	bl	8005198 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fd fc60 	bl	8002ca4 <memp_malloc>
 80053e4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03f      	beq.n	800546c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80053ec:	229c      	movs	r2, #156	; 0x9c
 80053ee:	2100      	movs	r1, #0
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f00b f894 	bl	801051e <memset>
    pcb->prio = prio;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	79fa      	ldrb	r2, [r7, #7]
 80053fa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005402:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f44f 7248 	mov.w	r2, #800	; 0x320
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	22ff      	movs	r2, #255	; 0xff
 800541a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005422:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2206      	movs	r2, #6
 8005428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2206      	movs	r2, #6
 8005430:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005438:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <tcp_alloc+0xf8>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <tcp_alloc+0xfc>)
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a08      	ldr	r2, [pc, #32]	; (8005480 <tcp_alloc+0x100>)
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <tcp_alloc+0x104>)
 8005468:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001744 	.word	0x20001744
 800547c:	200005a2 	.word	0x200005a2
 8005480:	0800512d 	.word	0x0800512d
 8005484:	006ddd00 	.word	0x006ddd00

08005488 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <tcp_pcb_purge+0x1e>
 8005496:	4b21      	ldr	r3, [pc, #132]	; (800551c <tcp_pcb_purge+0x94>)
 8005498:	f640 025b 	movw	r2, #2139	; 0x85b
 800549c:	4920      	ldr	r1, [pc, #128]	; (8005520 <tcp_pcb_purge+0x98>)
 800549e:	4821      	ldr	r0, [pc, #132]	; (8005524 <tcp_pcb_purge+0x9c>)
 80054a0:	f7fb fe77 	bl	8001192 <lwip_win32_platform_diag>
 80054a4:	e037      	b.n	8005516 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7d1b      	ldrb	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d033      	beq.n	8005516 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80054b2:	2b0a      	cmp	r3, #10
 80054b4:	d02f      	beq.n	8005516 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d02b      	beq.n	8005516 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe fa5e 	bl	800398c <pbuf_free>
      pcb->refused_data = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9ac 	bl	800583c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fdbd 	bl	8005070 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fdb8 	bl	8005070 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	66da      	str	r2, [r3, #108]	; 0x6c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	08011f24 	.word	0x08011f24
 8005520:	0801255c 	.word	0x0801255c
 8005524:	08011f58 	.word	0x08011f58

08005528 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <tcp_pcb_remove+0x28>
 8005538:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <tcp_pcb_remove+0x13c>)
 800553a:	f640 028d 	movw	r2, #2189	; 0x88d
 800553e:	494a      	ldr	r1, [pc, #296]	; (8005668 <tcp_pcb_remove+0x140>)
 8005540:	484a      	ldr	r0, [pc, #296]	; (800566c <tcp_pcb_remove+0x144>)
 8005542:	f00a fdc5 	bl	80100d0 <iprintf>
 8005546:	2000      	movs	r0, #0
 8005548:	f00a fec4 	bl	80102d4 <fflush>
 800554c:	f00a fe09 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <tcp_pcb_remove+0x46>
 8005556:	4b43      	ldr	r3, [pc, #268]	; (8005664 <tcp_pcb_remove+0x13c>)
 8005558:	f640 028e 	movw	r2, #2190	; 0x88e
 800555c:	4944      	ldr	r1, [pc, #272]	; (8005670 <tcp_pcb_remove+0x148>)
 800555e:	4843      	ldr	r0, [pc, #268]	; (800566c <tcp_pcb_remove+0x144>)
 8005560:	f00a fdb6 	bl	80100d0 <iprintf>
 8005564:	2000      	movs	r0, #0
 8005566:	f00a feb5 	bl	80102d4 <fflush>
 800556a:	f00a fdfa 	bl	8010162 <abort>

  TCP_RMV(pcblist, pcb);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d105      	bne.n	8005584 <tcp_pcb_remove+0x5c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e013      	b.n	80055ac <tcp_pcb_remove+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e00c      	b.n	80055a6 <tcp_pcb_remove+0x7e>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d104      	bne.n	80055a0 <tcp_pcb_remove+0x78>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	e005      	b.n	80055ac <tcp_pcb_remove+0x84>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ef      	bne.n	800558c <tcp_pcb_remove+0x64>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80055b2:	6838      	ldr	r0, [r7, #0]
 80055b4:	f7ff ff68 	bl	8005488 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	7d1b      	ldrb	r3, [r3, #20]
 80055bc:	2b0a      	cmp	r3, #10
 80055be:	d013      	beq.n	80055e8 <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d00f      	beq.n	80055e8 <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	8b5b      	ldrh	r3, [r3, #26]
 80055cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	8b5b      	ldrh	r3, [r3, #26]
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f003 f88e 	bl	8008704 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	7d1b      	ldrb	r3, [r3, #20]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d02f      	beq.n	8005650 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <tcp_pcb_remove+0xe8>
 80055f8:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <tcp_pcb_remove+0x13c>)
 80055fa:	f640 029d 	movw	r2, #2205	; 0x89d
 80055fe:	491d      	ldr	r1, [pc, #116]	; (8005674 <tcp_pcb_remove+0x14c>)
 8005600:	481a      	ldr	r0, [pc, #104]	; (800566c <tcp_pcb_remove+0x144>)
 8005602:	f00a fd65 	bl	80100d0 <iprintf>
 8005606:	2000      	movs	r0, #0
 8005608:	f00a fe64 	bl	80102d4 <fflush>
 800560c:	f00a fda9 	bl	8010162 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <tcp_pcb_remove+0x108>
 8005618:	4b12      	ldr	r3, [pc, #72]	; (8005664 <tcp_pcb_remove+0x13c>)
 800561a:	f640 029e 	movw	r2, #2206	; 0x89e
 800561e:	4916      	ldr	r1, [pc, #88]	; (8005678 <tcp_pcb_remove+0x150>)
 8005620:	4812      	ldr	r0, [pc, #72]	; (800566c <tcp_pcb_remove+0x144>)
 8005622:	f00a fd55 	bl	80100d0 <iprintf>
 8005626:	2000      	movs	r0, #0
 8005628:	f00a fe54 	bl	80102d4 <fflush>
 800562c:	f00a fd99 	bl	8010162 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <tcp_pcb_remove+0x128>
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <tcp_pcb_remove+0x13c>)
 800563a:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 800563e:	490f      	ldr	r1, [pc, #60]	; (800567c <tcp_pcb_remove+0x154>)
 8005640:	480a      	ldr	r0, [pc, #40]	; (800566c <tcp_pcb_remove+0x144>)
 8005642:	f00a fd45 	bl	80100d0 <iprintf>
 8005646:	2000      	movs	r0, #0
 8005648:	f00a fe44 	bl	80102d4 <fflush>
 800564c:	f00a fd89 	bl	8010162 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	08011f24 	.word	0x08011f24
 8005668:	08012578 	.word	0x08012578
 800566c:	08011f58 	.word	0x08011f58
 8005670:	08012594 	.word	0x08012594
 8005674:	080125b4 	.word	0x080125b4
 8005678:	080125cc 	.word	0x080125cc
 800567c:	080125e8 	.word	0x080125e8

08005680 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <tcp_next_iss+0x26>
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <tcp_next_iss+0x40>)
 8005690:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8005694:	490b      	ldr	r1, [pc, #44]	; (80056c4 <tcp_next_iss+0x44>)
 8005696:	480c      	ldr	r0, [pc, #48]	; (80056c8 <tcp_next_iss+0x48>)
 8005698:	f00a fd1a 	bl	80100d0 <iprintf>
 800569c:	2000      	movs	r0, #0
 800569e:	f00a fe19 	bl	80102d4 <fflush>
 80056a2:	f00a fd5e 	bl	8010162 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <tcp_next_iss+0x4c>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <tcp_next_iss+0x50>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4413      	add	r3, r2
 80056b0:	4a06      	ldr	r2, [pc, #24]	; (80056cc <tcp_next_iss+0x4c>)
 80056b2:	6013      	str	r3, [r2, #0]
  return iss;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <tcp_next_iss+0x4c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08011f24 	.word	0x08011f24
 80056c4:	08012600 	.word	0x08012600
 80056c8:	08011f58 	.word	0x08011f58
 80056cc:	20000008 	.word	0x20000008
 80056d0:	20001744 	.word	0x20001744

080056d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <tcp_eff_send_mss_netif+0x2c>
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <tcp_eff_send_mss_netif+0x74>)
 80056ea:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80056ee:	4917      	ldr	r1, [pc, #92]	; (800574c <tcp_eff_send_mss_netif+0x78>)
 80056f0:	4817      	ldr	r0, [pc, #92]	; (8005750 <tcp_eff_send_mss_netif+0x7c>)
 80056f2:	f00a fced 	bl	80100d0 <iprintf>
 80056f6:	2000      	movs	r0, #0
 80056f8:	f00a fdec 	bl	80102d4 <fflush>
 80056fc:	f00a fd31 	bl	8010162 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8005706:	89fb      	ldrh	r3, [r7, #14]
 8005708:	e019      	b.n	800573e <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	8c1b      	ldrh	r3, [r3, #32]
 800570e:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8005716:	2328      	movs	r3, #40	; 0x28
 8005718:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800571a:	8afa      	ldrh	r2, [r7, #22]
 800571c:	8abb      	ldrh	r3, [r7, #20]
 800571e:	429a      	cmp	r2, r3
 8005720:	d904      	bls.n	800572c <tcp_eff_send_mss_netif+0x58>
 8005722:	8afa      	ldrh	r2, [r7, #22]
 8005724:	8abb      	ldrh	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	e000      	b.n	800572e <tcp_eff_send_mss_netif+0x5a>
 800572c:	2300      	movs	r3, #0
 800572e:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005730:	8a7a      	ldrh	r2, [r7, #18]
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	4293      	cmp	r3, r2
 8005736:	bf28      	it	cs
 8005738:	4613      	movcs	r3, r2
 800573a:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800573c:	89fb      	ldrh	r3, [r7, #14]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	08011f24 	.word	0x08011f24
 800574c:	0801261c 	.word	0x0801261c
 8005750:	08011f58 	.word	0x08011f58

08005754 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11d      	bne.n	80057a4 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8005768:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800576a:	f640 120a 	movw	r2, #2314	; 0x90a
 800576e:	4912      	ldr	r1, [pc, #72]	; (80057b8 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8005770:	4812      	ldr	r0, [pc, #72]	; (80057bc <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8005772:	f00a fcad 	bl	80100d0 <iprintf>
 8005776:	2000      	movs	r0, #0
 8005778:	f00a fdac 	bl	80102d4 <fflush>
 800577c:	f00a fcf1 	bl	8010162 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d108      	bne.n	800579e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7fe ff54 	bl	8004640 <tcp_abort>
      pcb = next;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e002      	b.n	80057a4 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ea      	bne.n	8005780 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	08011f24 	.word	0x08011f24
 80057b8:	08012644 	.word	0x08012644
 80057bc:	08011f58 	.word	0x08011f58

080057c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02a      	beq.n	8005826 <tcp_netif_ip_addr_changed+0x66>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d026      	beq.n	8005826 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <tcp_netif_ip_addr_changed+0x70>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ffb8 	bl	8005754 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80057e4:	4b13      	ldr	r3, [pc, #76]	; (8005834 <tcp_netif_ip_addr_changed+0x74>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff ffb2 	bl	8005754 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <tcp_netif_ip_addr_changed+0x66>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d013      	beq.n	8005826 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <tcp_netif_ip_addr_changed+0x78>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e00c      	b.n	8005820 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d103      	bne.n	800581a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ef      	bne.n	8005806 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20001740 	.word	0x20001740
 8005834:	2000174c 	.word	0x2000174c
 8005838:	20001748 	.word	0x20001748

0800583c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff fc0d 	bl	8005070 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b08d      	sub	sp, #52	; 0x34
 8005868:	af04      	add	r7, sp, #16
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <tcp_input+0x26>
 8005874:	4ba4      	ldr	r3, [pc, #656]	; (8005b08 <tcp_input+0x2a4>)
 8005876:	2283      	movs	r2, #131	; 0x83
 8005878:	49a4      	ldr	r1, [pc, #656]	; (8005b0c <tcp_input+0x2a8>)
 800587a:	48a5      	ldr	r0, [pc, #660]	; (8005b10 <tcp_input+0x2ac>)
 800587c:	f00a fc28 	bl	80100d0 <iprintf>
 8005880:	2000      	movs	r0, #0
 8005882:	f00a fd27 	bl	80102d4 <fflush>
 8005886:	f00a fc6c 	bl	8010162 <abort>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4aa1      	ldr	r2, [pc, #644]	; (8005b14 <tcp_input+0x2b0>)
 8005890:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	895b      	ldrh	r3, [r3, #10]
 8005896:	2b13      	cmp	r3, #19
 8005898:	f240 8413 	bls.w	80060c2 <tcp_input+0x85e>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800589c:	4b9e      	ldr	r3, [pc, #632]	; (8005b18 <tcp_input+0x2b4>)
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	4b9d      	ldr	r3, [pc, #628]	; (8005b18 <tcp_input+0x2b4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fc fd4a 	bl	8002340 <ip4_addr_isbroadcast_u32>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 8410 	bne.w	80060d4 <tcp_input+0x870>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80058b4:	4b98      	ldr	r3, [pc, #608]	; (8005b18 <tcp_input+0x2b4>)
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80058bc:	2be0      	cmp	r3, #224	; 0xe0
 80058be:	f000 8409 	beq.w	80060d4 <tcp_input+0x870>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	891a      	ldrh	r2, [r3, #8]
 80058c6:	4b95      	ldr	r3, [pc, #596]	; (8005b1c <tcp_input+0x2b8>)
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	4b95      	ldr	r3, [pc, #596]	; (8005b20 <tcp_input+0x2bc>)
 80058cc:	2106      	movs	r1, #6
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fff4 	bl	80018bc <ip_chksum_pseudo>
 80058d4:	4603      	mov	r3, r0
 80058d6:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80058d8:	8a3b      	ldrh	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 83f3 	bne.w	80060c6 <tcp_input+0x862>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80058e0:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <tcp_input+0x2b0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	899b      	ldrh	r3, [r3, #12]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fb feb5 	bl	8001658 <lwip_htons>
 80058ee:	4603      	mov	r3, r0
 80058f0:	0b1b      	lsrs	r3, r3, #12
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b13      	cmp	r3, #19
 80058fe:	f240 83e4 	bls.w	80060ca <tcp_input+0x866>
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	891b      	ldrh	r3, [r3, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	f200 83dd 	bhi.w	80060ca <tcp_input+0x866>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b14      	subs	r3, #20
 8005916:	b29a      	uxth	r2, r3
 8005918:	4b82      	ldr	r3, [pc, #520]	; (8005b24 <tcp_input+0x2c0>)
 800591a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800591c:	4b82      	ldr	r3, [pc, #520]	; (8005b28 <tcp_input+0x2c4>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	895a      	ldrh	r2, [r3, #10]
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	b29b      	uxth	r3, r3
 800592a:	429a      	cmp	r2, r3
 800592c:	d309      	bcc.n	8005942 <tcp_input+0xde>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800592e:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <tcp_input+0x2c0>)
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	4b7e      	ldr	r3, [pc, #504]	; (8005b2c <tcp_input+0x2c8>)
 8005934:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fd ff9c 	bl	8003878 <pbuf_remove_header>
 8005940:	e05d      	b.n	80059fe <tcp_input+0x19a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <tcp_input+0xfc>
 800594a:	4b6f      	ldr	r3, [pc, #444]	; (8005b08 <tcp_input+0x2a4>)
 800594c:	22c2      	movs	r2, #194	; 0xc2
 800594e:	4978      	ldr	r1, [pc, #480]	; (8005b30 <tcp_input+0x2cc>)
 8005950:	486f      	ldr	r0, [pc, #444]	; (8005b10 <tcp_input+0x2ac>)
 8005952:	f00a fbbd 	bl	80100d0 <iprintf>
 8005956:	2000      	movs	r0, #0
 8005958:	f00a fcbc 	bl	80102d4 <fflush>
 800595c:	f00a fc01 	bl	8010162 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8005960:	2114      	movs	r1, #20
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fd ff88 	bl	8003878 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	895a      	ldrh	r2, [r3, #10]
 800596c:	4b6f      	ldr	r3, [pc, #444]	; (8005b2c <tcp_input+0x2c8>)
 800596e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <tcp_input+0x2c0>)
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <tcp_input+0x2c8>)
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800597c:	4b6b      	ldr	r3, [pc, #428]	; (8005b2c <tcp_input+0x2c8>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fd ff78 	bl	8003878 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	895b      	ldrh	r3, [r3, #10]
 800598e:	89ba      	ldrh	r2, [r7, #12]
 8005990:	429a      	cmp	r2, r3
 8005992:	f200 839c 	bhi.w	80060ce <tcp_input+0x86a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a62      	ldr	r2, [pc, #392]	; (8005b28 <tcp_input+0x2c4>)
 800599e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	89ba      	ldrh	r2, [r7, #12]
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fd ff65 	bl	8003878 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	891a      	ldrh	r2, [r3, #8]
 80059b2:	89bb      	ldrh	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <tcp_input+0x176>
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <tcp_input+0x2a4>)
 80059c6:	22df      	movs	r2, #223	; 0xdf
 80059c8:	495a      	ldr	r1, [pc, #360]	; (8005b34 <tcp_input+0x2d0>)
 80059ca:	4851      	ldr	r0, [pc, #324]	; (8005b10 <tcp_input+0x2ac>)
 80059cc:	f00a fb80 	bl	80100d0 <iprintf>
 80059d0:	2000      	movs	r0, #0
 80059d2:	f00a fc7f 	bl	80102d4 <fflush>
 80059d6:	f00a fbc4 	bl	8010162 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	891a      	ldrh	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	891b      	ldrh	r3, [r3, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d00a      	beq.n	80059fe <tcp_input+0x19a>
 80059e8:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <tcp_input+0x2a4>)
 80059ea:	22e0      	movs	r2, #224	; 0xe0
 80059ec:	4952      	ldr	r1, [pc, #328]	; (8005b38 <tcp_input+0x2d4>)
 80059ee:	4848      	ldr	r0, [pc, #288]	; (8005b10 <tcp_input+0x2ac>)
 80059f0:	f00a fb6e 	bl	80100d0 <iprintf>
 80059f4:	2000      	movs	r0, #0
 80059f6:	f00a fc6d 	bl	80102d4 <fflush>
 80059fa:	f00a fbb2 	bl	8010162 <abort>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80059fe:	4b45      	ldr	r3, [pc, #276]	; (8005b14 <tcp_input+0x2b0>)
 8005a00:	681c      	ldr	r4, [r3, #0]
 8005a02:	4b44      	ldr	r3, [pc, #272]	; (8005b14 <tcp_input+0x2b0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb fe24 	bl	8001658 <lwip_htons>
 8005a10:	4603      	mov	r3, r0
 8005a12:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005a14:	4b3f      	ldr	r3, [pc, #252]	; (8005b14 <tcp_input+0x2b0>)
 8005a16:	681c      	ldr	r4, [r3, #0]
 8005a18:	4b3e      	ldr	r3, [pc, #248]	; (8005b14 <tcp_input+0x2b0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	885b      	ldrh	r3, [r3, #2]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb fe19 	bl	8001658 <lwip_htons>
 8005a26:	4603      	mov	r3, r0
 8005a28:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005a2a:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <tcp_input+0x2b0>)
 8005a2c:	681c      	ldr	r4, [r3, #0]
 8005a2e:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <tcp_input+0x2b0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fb fe24 	bl	8001682 <lwip_htonl>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	4a3e      	ldr	r2, [pc, #248]	; (8005b3c <tcp_input+0x2d8>)
 8005a42:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005a44:	4b33      	ldr	r3, [pc, #204]	; (8005b14 <tcp_input+0x2b0>)
 8005a46:	681c      	ldr	r4, [r3, #0]
 8005a48:	4b32      	ldr	r3, [pc, #200]	; (8005b14 <tcp_input+0x2b0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fb fe17 	bl	8001682 <lwip_htonl>
 8005a54:	4603      	mov	r3, r0
 8005a56:	60a3      	str	r3, [r4, #8]
 8005a58:	68a3      	ldr	r3, [r4, #8]
 8005a5a:	4a39      	ldr	r2, [pc, #228]	; (8005b40 <tcp_input+0x2dc>)
 8005a5c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <tcp_input+0x2b0>)
 8005a60:	681c      	ldr	r4, [r3, #0]
 8005a62:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <tcp_input+0x2b0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	89db      	ldrh	r3, [r3, #14]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fb fdf4 	bl	8001658 <lwip_htons>
 8005a70:	4603      	mov	r3, r0
 8005a72:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <tcp_input+0x2b0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fb fdeb 	bl	8001658 <lwip_htons>
 8005a82:	4603      	mov	r3, r0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	4b2d      	ldr	r3, [pc, #180]	; (8005b44 <tcp_input+0x2e0>)
 8005a8e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	891a      	ldrh	r2, [r3, #8]
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <tcp_input+0x2e4>)
 8005a96:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8005a98:	4b2a      	ldr	r3, [pc, #168]	; (8005b44 <tcp_input+0x2e0>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <tcp_input+0x25a>
    tcplen++;
 8005aa4:	4b28      	ldr	r3, [pc, #160]	; (8005b48 <tcp_input+0x2e4>)
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <tcp_input+0x2e4>)
 8005aae:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	891a      	ldrh	r2, [r3, #8]
 8005ab4:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <tcp_input+0x2e4>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	f200 830a 	bhi.w	80060d2 <tcp_input+0x86e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ac2:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <tcp_input+0x2e8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e0b7      	b.n	8005c3a <tcp_input+0x3d6>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	7d1b      	ldrb	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <tcp_input+0x284>
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <tcp_input+0x2a4>)
 8005ad4:	22fb      	movs	r2, #251	; 0xfb
 8005ad6:	491e      	ldr	r1, [pc, #120]	; (8005b50 <tcp_input+0x2ec>)
 8005ad8:	480d      	ldr	r0, [pc, #52]	; (8005b10 <tcp_input+0x2ac>)
 8005ada:	f00a faf9 	bl	80100d0 <iprintf>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f00a fbf8 	bl	80102d4 <fflush>
 8005ae4:	f00a fb3d 	bl	8010162 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	7d1b      	ldrb	r3, [r3, #20]
 8005aec:	2b0a      	cmp	r3, #10
 8005aee:	d133      	bne.n	8005b58 <tcp_input+0x2f4>
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <tcp_input+0x2a4>)
 8005af2:	22fc      	movs	r2, #252	; 0xfc
 8005af4:	4917      	ldr	r1, [pc, #92]	; (8005b54 <tcp_input+0x2f0>)
 8005af6:	4806      	ldr	r0, [pc, #24]	; (8005b10 <tcp_input+0x2ac>)
 8005af8:	f00a faea 	bl	80100d0 <iprintf>
 8005afc:	2000      	movs	r0, #0
 8005afe:	f00a fbe9 	bl	80102d4 <fflush>
 8005b02:	f00a fb2e 	bl	8010162 <abort>
 8005b06:	bf00      	nop
 8005b08:	08012678 	.word	0x08012678
 8005b0c:	0801269c 	.word	0x0801269c
 8005b10:	080126b4 	.word	0x080126b4
 8005b14:	200005b8 	.word	0x200005b8
 8005b18:	20000704 	.word	0x20000704
 8005b1c:	20000718 	.word	0x20000718
 8005b20:	20000714 	.word	0x20000714
 8005b24:	200005bc 	.word	0x200005bc
 8005b28:	200005c0 	.word	0x200005c0
 8005b2c:	200005be 	.word	0x200005be
 8005b30:	080126dc 	.word	0x080126dc
 8005b34:	080126ec 	.word	0x080126ec
 8005b38:	080126f8 	.word	0x080126f8
 8005b3c:	200005c8 	.word	0x200005c8
 8005b40:	200005cc 	.word	0x200005cc
 8005b44:	200005d4 	.word	0x200005d4
 8005b48:	200005d2 	.word	0x200005d2
 8005b4c:	20001740 	.word	0x20001740
 8005b50:	08012718 	.word	0x08012718
 8005b54:	08012740 	.word	0x08012740
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	7d1b      	ldrb	r3, [r3, #20]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10a      	bne.n	8005b76 <tcp_input+0x312>
 8005b60:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <tcp_input+0x520>)
 8005b62:	22fd      	movs	r2, #253	; 0xfd
 8005b64:	4988      	ldr	r1, [pc, #544]	; (8005d88 <tcp_input+0x524>)
 8005b66:	4889      	ldr	r0, [pc, #548]	; (8005d8c <tcp_input+0x528>)
 8005b68:	f00a fab2 	bl	80100d0 <iprintf>
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	f00a fbb1 	bl	80102d4 <fflush>
 8005b72:	f00a faf6 	bl	8010162 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	7a1b      	ldrb	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <tcp_input+0x334>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	7a1a      	ldrb	r2, [r3, #8]
 8005b82:	4b83      	ldr	r3, [pc, #524]	; (8005d90 <tcp_input+0x52c>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d002      	beq.n	8005b98 <tcp_input+0x334>
      prev = pcb;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	61bb      	str	r3, [r7, #24]
      continue;
 8005b96:	e04d      	b.n	8005c34 <tcp_input+0x3d0>
    }

    if (pcb->remote_port == tcphdr->src &&
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	8b1a      	ldrh	r2, [r3, #24]
 8005b9c:	4b7d      	ldr	r3, [pc, #500]	; (8005d94 <tcp_input+0x530>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d143      	bne.n	8005c30 <tcp_input+0x3cc>
        pcb->local_port == tcphdr->dest &&
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	8ada      	ldrh	r2, [r3, #22]
 8005bac:	4b79      	ldr	r3, [pc, #484]	; (8005d94 <tcp_input+0x530>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	885b      	ldrh	r3, [r3, #2]
 8005bb2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d13b      	bne.n	8005c30 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b74      	ldr	r3, [pc, #464]	; (8005d90 <tcp_input+0x52c>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d135      	bne.n	8005c30 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b71      	ldr	r3, [pc, #452]	; (8005d90 <tcp_input+0x52c>)
 8005bca:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d12f      	bne.n	8005c30 <tcp_input+0x3cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10b      	bne.n	8005bf2 <tcp_input+0x38e>
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <tcp_input+0x520>)
 8005bdc:	f240 120d 	movw	r2, #269	; 0x10d
 8005be0:	496d      	ldr	r1, [pc, #436]	; (8005d98 <tcp_input+0x534>)
 8005be2:	486a      	ldr	r0, [pc, #424]	; (8005d8c <tcp_input+0x528>)
 8005be4:	f00a fa74 	bl	80100d0 <iprintf>
 8005be8:	2000      	movs	r0, #0
 8005bea:	f00a fb73 	bl	80102d4 <fflush>
 8005bee:	f00a fab8 	bl	8010162 <abort>
      if (prev != NULL) {
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <tcp_input+0x3aa>
        prev->next = pcb->next;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8005c00:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <tcp_input+0x538>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8005c08:	4a64      	ldr	r2, [pc, #400]	; (8005d9c <tcp_input+0x538>)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d115      	bne.n	8005c44 <tcp_input+0x3e0>
 8005c18:	4b5a      	ldr	r3, [pc, #360]	; (8005d84 <tcp_input+0x520>)
 8005c1a:	f240 1215 	movw	r2, #277	; 0x115
 8005c1e:	4960      	ldr	r1, [pc, #384]	; (8005da0 <tcp_input+0x53c>)
 8005c20:	485a      	ldr	r0, [pc, #360]	; (8005d8c <tcp_input+0x528>)
 8005c22:	f00a fa55 	bl	80100d0 <iprintf>
 8005c26:	2000      	movs	r0, #0
 8005c28:	f00a fb54 	bl	80102d4 <fflush>
 8005c2c:	f00a fa99 	bl	8010162 <abort>
      break;
    }
    prev = pcb;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f47f af44 	bne.w	8005aca <tcp_input+0x266>
 8005c42:	e000      	b.n	8005c46 <tcp_input+0x3e2>
      break;
 8005c44:	bf00      	nop
  }

  if (pcb == NULL) {
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 80b1 	bne.w	8005db0 <tcp_input+0x54c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005c4e:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <tcp_input+0x540>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e044      	b.n	8005ce0 <tcp_input+0x47c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	7d1b      	ldrb	r3, [r3, #20]
 8005c5a:	2b0a      	cmp	r3, #10
 8005c5c:	d00b      	beq.n	8005c76 <tcp_input+0x412>
 8005c5e:	4b49      	ldr	r3, [pc, #292]	; (8005d84 <tcp_input+0x520>)
 8005c60:	f240 121f 	movw	r2, #287	; 0x11f
 8005c64:	4950      	ldr	r1, [pc, #320]	; (8005da8 <tcp_input+0x544>)
 8005c66:	4849      	ldr	r0, [pc, #292]	; (8005d8c <tcp_input+0x528>)
 8005c68:	f00a fa32 	bl	80100d0 <iprintf>
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f00a fb31 	bl	80102d4 <fflush>
 8005c72:	f00a fa76 	bl	8010162 <abort>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	7a1b      	ldrb	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <tcp_input+0x42e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	7a1a      	ldrb	r2, [r3, #8]
 8005c82:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <tcp_input+0x52c>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d122      	bne.n	8005cd8 <tcp_input+0x474>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	8b1a      	ldrh	r2, [r3, #24]
 8005c96:	4b3f      	ldr	r3, [pc, #252]	; (8005d94 <tcp_input+0x530>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d11b      	bne.n	8005cda <tcp_input+0x476>
          pcb->local_port == tcphdr->dest &&
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	8ada      	ldrh	r2, [r3, #22]
 8005ca6:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <tcp_input+0x530>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	885b      	ldrh	r3, [r3, #2]
 8005cac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d113      	bne.n	8005cda <tcp_input+0x476>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <tcp_input+0x52c>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d10d      	bne.n	8005cda <tcp_input+0x476>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b33      	ldr	r3, [pc, #204]	; (8005d90 <tcp_input+0x52c>)
 8005cc4:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d107      	bne.n	8005cda <tcp_input+0x476>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8005cca:	69f8      	ldr	r0, [r7, #28]
 8005ccc:	f000 fb62 	bl	8006394 <tcp_timewait_input>
        }
        pbuf_free(p);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fd fe5b 	bl	800398c <pbuf_free>
        return;
 8005cd6:	e202      	b.n	80060de <tcp_input+0x87a>
        continue;
 8005cd8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1b7      	bne.n	8005c56 <tcp_input+0x3f2>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005cea:	4b30      	ldr	r3, [pc, #192]	; (8005dac <tcp_input+0x548>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	e02a      	b.n	8005d48 <tcp_input+0x4e4>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	7a1b      	ldrb	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00c      	beq.n	8005d14 <tcp_input+0x4b0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	7a1a      	ldrb	r2, [r3, #8]
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <tcp_input+0x52c>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d002      	beq.n	8005d14 <tcp_input+0x4b0>
        prev = (struct tcp_pcb *)lpcb;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	61bb      	str	r3, [r7, #24]
        continue;
 8005d12:	e016      	b.n	8005d42 <tcp_input+0x4de>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	8ada      	ldrh	r2, [r3, #22]
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <tcp_input+0x530>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	885b      	ldrh	r3, [r3, #2]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d10c      	bne.n	8005d3e <tcp_input+0x4da>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <tcp_input+0x52c>)
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d00f      	beq.n	8005d50 <tcp_input+0x4ec>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <tcp_input+0x4ee>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <tcp_input+0x4ee>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1d1      	bne.n	8005cf2 <tcp_input+0x48e>
 8005d4e:	e000      	b.n	8005d52 <tcp_input+0x4ee>
            break;
 8005d50:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02b      	beq.n	8005db0 <tcp_input+0x54c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <tcp_input+0x510>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <tcp_input+0x548>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005d6e:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <tcp_input+0x548>)
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f000 fa09 	bl	800618c <tcp_listen_input>
      }
      pbuf_free(p);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fd fe06 	bl	800398c <pbuf_free>
      return;
 8005d80:	e1ad      	b.n	80060de <tcp_input+0x87a>
 8005d82:	bf00      	nop
 8005d84:	08012678 	.word	0x08012678
 8005d88:	0801276c 	.word	0x0801276c
 8005d8c:	080126b4 	.word	0x080126b4
 8005d90:	20000704 	.word	0x20000704
 8005d94:	200005b8 	.word	0x200005b8
 8005d98:	08012794 	.word	0x08012794
 8005d9c:	20001740 	.word	0x20001740
 8005da0:	080127c0 	.word	0x080127c0
 8005da4:	20001750 	.word	0x20001750
 8005da8:	080127ec 	.word	0x080127ec
 8005dac:	20001748 	.word	0x20001748
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 815a 	beq.w	800606c <tcp_input+0x808>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8005db8:	4ba0      	ldr	r3, [pc, #640]	; (800603c <tcp_input+0x7d8>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	891a      	ldrh	r2, [r3, #8]
 8005dc2:	4b9e      	ldr	r3, [pc, #632]	; (800603c <tcp_input+0x7d8>)
 8005dc4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8005dc6:	4a9d      	ldr	r2, [pc, #628]	; (800603c <tcp_input+0x7d8>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8005dcc:	4b9c      	ldr	r3, [pc, #624]	; (8006040 <tcp_input+0x7dc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a9a      	ldr	r2, [pc, #616]	; (800603c <tcp_input+0x7d8>)
 8005dd2:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8005dd4:	4b9b      	ldr	r3, [pc, #620]	; (8006044 <tcp_input+0x7e0>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8005dda:	4b9b      	ldr	r3, [pc, #620]	; (8006048 <tcp_input+0x7e4>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8005de0:	4b9a      	ldr	r3, [pc, #616]	; (800604c <tcp_input+0x7e8>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8005de6:	4b9a      	ldr	r3, [pc, #616]	; (8006050 <tcp_input+0x7ec>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <tcp_input+0x59c>
      p->flags |= PBUF_FLAG_PUSH;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	7b5b      	ldrb	r3, [r3, #13]
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d017      	beq.n	8005e38 <tcp_input+0x5d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005e08:	69f8      	ldr	r0, [r7, #28]
 8005e0a:	f7ff f8b5 	bl	8004f78 <tcp_process_refused_data>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f113 0f0d 	cmn.w	r3, #13
 8005e14:	d007      	beq.n	8005e26 <tcp_input+0x5c2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <tcp_input+0x5d4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005e1e:	4b8d      	ldr	r3, [pc, #564]	; (8006054 <tcp_input+0x7f0>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <tcp_input+0x5d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 80e8 	bne.w	8006000 <tcp_input+0x79c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8005e30:	69f8      	ldr	r0, [r7, #28]
 8005e32:	f003 fb83 	bl	800953c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8005e36:	e0e3      	b.n	8006000 <tcp_input+0x79c>
      }
    }
    tcp_input_pcb = pcb;
 8005e38:	4a87      	ldr	r2, [pc, #540]	; (8006058 <tcp_input+0x7f4>)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	f000 fb28 	bl	8006494 <tcp_process>
 8005e44:	4603      	mov	r3, r0
 8005e46:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8005e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e4c:	f113 0f0d 	cmn.w	r3, #13
 8005e50:	f000 80e1 	beq.w	8006016 <tcp_input+0x7b2>
      if (recv_flags & TF_RESET) {
 8005e54:	4b7c      	ldr	r3, [pc, #496]	; (8006048 <tcp_input+0x7e4>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d015      	beq.n	8005e8c <tcp_input+0x628>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <tcp_input+0x618>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	6912      	ldr	r2, [r2, #16]
 8005e74:	f06f 010d 	mvn.w	r1, #13
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4877      	ldr	r0, [pc, #476]	; (800605c <tcp_input+0x7f8>)
 8005e80:	f7ff fb52 	bl	8005528 <tcp_pcb_remove>
        tcp_free(pcb);
 8005e84:	69f8      	ldr	r0, [r7, #28]
 8005e86:	f7fe f8cd 	bl	8004024 <tcp_free>
 8005e8a:	e0c4      	b.n	8006016 <tcp_input+0x7b2>
      } else {
        err = ERR_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8005e90:	4b6e      	ldr	r3, [pc, #440]	; (800604c <tcp_input+0x7e8>)
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01d      	beq.n	8005ed4 <tcp_input+0x670>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8005e98:	4b6c      	ldr	r3, [pc, #432]	; (800604c <tcp_input+0x7e8>)
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <tcp_input+0x65a>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	6910      	ldr	r0, [r2, #16]
 8005eb2:	897a      	ldrh	r2, [r7, #10]
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	4798      	blx	r3
 8005eb8:	4603      	mov	r3, r0
 8005eba:	74fb      	strb	r3, [r7, #19]
 8005ebc:	e001      	b.n	8005ec2 <tcp_input+0x65e>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005ec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ec6:	f113 0f0d 	cmn.w	r3, #13
 8005eca:	f000 809b 	beq.w	8006004 <tcp_input+0x7a0>
              goto aborted;
            }
          }
          recv_acked = 0;
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <tcp_input+0x7e8>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8005ed4:	69f8      	ldr	r0, [r7, #28]
 8005ed6:	f000 f913 	bl	8006100 <tcp_input_delayed_close>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8093 	bne.w	8006008 <tcp_input+0x7a4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8005ee2:	4b58      	ldr	r3, [pc, #352]	; (8006044 <tcp_input+0x7e0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d046      	beq.n	8005f78 <tcp_input+0x714>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <tcp_input+0x6a6>
 8005ef2:	4b5b      	ldr	r3, [pc, #364]	; (8006060 <tcp_input+0x7fc>)
 8005ef4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005ef8:	495a      	ldr	r1, [pc, #360]	; (8006064 <tcp_input+0x800>)
 8005efa:	485b      	ldr	r0, [pc, #364]	; (8006068 <tcp_input+0x804>)
 8005efc:	f00a f8e8 	bl	80100d0 <iprintf>
 8005f00:	2000      	movs	r0, #0
 8005f02:	f00a f9e7 	bl	80102d4 <fflush>
 8005f06:	f00a f92c 	bl	8010162 <abort>
          if (pcb->flags & TF_RXCLOSED) {
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	8b5b      	ldrh	r3, [r3, #26]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <tcp_input+0x6c4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8005f16:	4b4b      	ldr	r3, [pc, #300]	; (8006044 <tcp_input+0x7e0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd fd36 	bl	800398c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8005f20:	69f8      	ldr	r0, [r7, #28]
 8005f22:	f7fe fb8d 	bl	8004640 <tcp_abort>
            goto aborted;
 8005f26:	e076      	b.n	8006016 <tcp_input+0x7b2>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <tcp_input+0x6e8>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	6918      	ldr	r0, [r3, #16]
 8005f3c:	4b41      	ldr	r3, [pc, #260]	; (8006044 <tcp_input+0x7e0>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	47a0      	blx	r4
 8005f46:	4603      	mov	r3, r0
 8005f48:	74fb      	strb	r3, [r7, #19]
 8005f4a:	e008      	b.n	8005f5e <tcp_input+0x6fa>
 8005f4c:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <tcp_input+0x7e0>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	69f9      	ldr	r1, [r7, #28]
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7ff f8e9 	bl	800512c <tcp_recv_null>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8005f5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f62:	f113 0f0d 	cmn.w	r3, #13
 8005f66:	d051      	beq.n	800600c <tcp_input+0x7a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8005f68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <tcp_input+0x714>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8005f70:	4b34      	ldr	r3, [pc, #208]	; (8006044 <tcp_input+0x7e0>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8005f78:	4b33      	ldr	r3, [pc, #204]	; (8006048 <tcp_input+0x7e4>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d030      	beq.n	8005fe6 <tcp_input+0x782>
          if (pcb->refused_data != NULL) {
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <tcp_input+0x73c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005f94:	7b52      	ldrb	r2, [r2, #13]
 8005f96:	f042 0220 	orr.w	r2, r2, #32
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	735a      	strb	r2, [r3, #13]
 8005f9e:	e022      	b.n	8005fe6 <tcp_input+0x782>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005fa8:	d005      	beq.n	8005fb6 <tcp_input+0x752>
              pcb->rcv_wnd++;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <tcp_input+0x774>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	6918      	ldr	r0, [r3, #16]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2200      	movs	r2, #0
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	47a0      	blx	r4
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	74fb      	strb	r3, [r7, #19]
 8005fd6:	e001      	b.n	8005fdc <tcp_input+0x778>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005fdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005fe0:	f113 0f0d 	cmn.w	r3, #13
 8005fe4:	d014      	beq.n	8006010 <tcp_input+0x7ac>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <tcp_input+0x7f4>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005fec:	69f8      	ldr	r0, [r7, #28]
 8005fee:	f000 f887 	bl	8006100 <tcp_input_delayed_close>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <tcp_input+0x7b0>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8005ff8:	69f8      	ldr	r0, [r7, #28]
 8005ffa:	f002 fb83 	bl	8008704 <tcp_output>
 8005ffe:	e00a      	b.n	8006016 <tcp_input+0x7b2>
        goto aborted;
 8006000:	bf00      	nop
 8006002:	e008      	b.n	8006016 <tcp_input+0x7b2>
              goto aborted;
 8006004:	bf00      	nop
 8006006:	e006      	b.n	8006016 <tcp_input+0x7b2>
          goto aborted;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <tcp_input+0x7b2>
            goto aborted;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <tcp_input+0x7b2>
              goto aborted;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <tcp_input+0x7b2>
          goto aborted;
 8006014:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <tcp_input+0x7f4>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <tcp_input+0x7e0>)
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <tcp_input+0x7d8>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d058      	beq.n	80060dc <tcp_input+0x878>
      pbuf_free(inseg.p);
 800602a:	4b04      	ldr	r3, [pc, #16]	; (800603c <tcp_input+0x7d8>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fd fcac 	bl	800398c <pbuf_free>
      inseg.p = NULL;
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <tcp_input+0x7d8>)
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800603a:	e04f      	b.n	80060dc <tcp_input+0x878>
 800603c:	200005a4 	.word	0x200005a4
 8006040:	200005b8 	.word	0x200005b8
 8006044:	200005d8 	.word	0x200005d8
 8006048:	200005d5 	.word	0x200005d5
 800604c:	200005d0 	.word	0x200005d0
 8006050:	200005d4 	.word	0x200005d4
 8006054:	200005d2 	.word	0x200005d2
 8006058:	20001754 	.word	0x20001754
 800605c:	20001740 	.word	0x20001740
 8006060:	08012678 	.word	0x08012678
 8006064:	0801281c 	.word	0x0801281c
 8006068:	080126b4 	.word	0x080126b4
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <tcp_input+0x880>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	899b      	ldrh	r3, [r3, #12]
 8006072:	b29b      	uxth	r3, r3
 8006074:	4618      	mov	r0, r3
 8006076:	f7fb faef 	bl	8001658 <lwip_htons>
 800607a:	4603      	mov	r3, r0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d119      	bne.n	80060ba <tcp_input+0x856>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <tcp_input+0x884>)
 8006088:	6858      	ldr	r0, [r3, #4]
 800608a:	4b18      	ldr	r3, [pc, #96]	; (80060ec <tcp_input+0x888>)
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <tcp_input+0x88c>)
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <tcp_input+0x890>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <tcp_input+0x880>)
 800609c:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800609e:	885b      	ldrh	r3, [r3, #2]
 80060a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <tcp_input+0x880>)
 80060a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	b292      	uxth	r2, r2
 80060aa:	9202      	str	r2, [sp, #8]
 80060ac:	9301      	str	r3, [sp, #4]
 80060ae:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <tcp_input+0x894>)
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4b12      	ldr	r3, [pc, #72]	; (80060fc <tcp_input+0x898>)
 80060b4:	4622      	mov	r2, r4
 80060b6:	f003 fa1a 	bl	80094ee <tcp_rst_netif>
    pbuf_free(p);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fd fc66 	bl	800398c <pbuf_free>
  return;
 80060c0:	e00c      	b.n	80060dc <tcp_input+0x878>
    goto dropped;
 80060c2:	bf00      	nop
 80060c4:	e006      	b.n	80060d4 <tcp_input+0x870>
      goto dropped;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <tcp_input+0x870>
    goto dropped;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <tcp_input+0x870>
      goto dropped;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <tcp_input+0x870>
      goto dropped;
 80060d2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fd fc59 	bl	800398c <pbuf_free>
 80060da:	e000      	b.n	80060de <tcp_input+0x87a>
  return;
 80060dc:	bf00      	nop
}
 80060de:	3724      	adds	r7, #36	; 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}
 80060e4:	200005b8 	.word	0x200005b8
 80060e8:	20000704 	.word	0x20000704
 80060ec:	200005cc 	.word	0x200005cc
 80060f0:	200005d2 	.word	0x200005d2
 80060f4:	200005c8 	.word	0x200005c8
 80060f8:	20000714 	.word	0x20000714
 80060fc:	20000718 	.word	0x20000718

08006100 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <tcp_input_delayed_close+0x26>
 800610e:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <tcp_input_delayed_close+0x78>)
 8006110:	f240 225a 	movw	r2, #602	; 0x25a
 8006114:	4919      	ldr	r1, [pc, #100]	; (800617c <tcp_input_delayed_close+0x7c>)
 8006116:	481a      	ldr	r0, [pc, #104]	; (8006180 <tcp_input_delayed_close+0x80>)
 8006118:	f009 ffda 	bl	80100d0 <iprintf>
 800611c:	2000      	movs	r0, #0
 800611e:	f00a f8d9 	bl	80102d4 <fflush>
 8006122:	f00a f81e 	bl	8010162 <abort>

  if (recv_flags & TF_CLOSED) {
 8006126:	4b17      	ldr	r3, [pc, #92]	; (8006184 <tcp_input_delayed_close+0x84>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01c      	beq.n	800616c <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8b5b      	ldrh	r3, [r3, #26]
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <tcp_input_delayed_close+0x5a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6912      	ldr	r2, [r2, #16]
 8006152:	f06f 010e 	mvn.w	r1, #14
 8006156:	4610      	mov	r0, r2
 8006158:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	480a      	ldr	r0, [pc, #40]	; (8006188 <tcp_input_delayed_close+0x88>)
 800615e:	f7ff f9e3 	bl	8005528 <tcp_pcb_remove>
    tcp_free(pcb);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fd ff5e 	bl	8004024 <tcp_free>
    return 1;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <tcp_input_delayed_close+0x6e>
  }
  return 0;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	08012678 	.word	0x08012678
 800617c:	08012838 	.word	0x08012838
 8006180:	080126b4 	.word	0x080126b4
 8006184:	200005d5 	.word	0x200005d5
 8006188:	20001740 	.word	0x20001740

0800618c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b08b      	sub	sp, #44	; 0x2c
 8006190:	af04      	add	r7, sp, #16
 8006192:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006194:	4b72      	ldr	r3, [pc, #456]	; (8006360 <tcp_listen_input+0x1d4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 80d9 	bne.w	8006354 <tcp_listen_input+0x1c8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <tcp_listen_input+0x34>
 80061a8:	4b6e      	ldr	r3, [pc, #440]	; (8006364 <tcp_listen_input+0x1d8>)
 80061aa:	f240 2281 	movw	r2, #641	; 0x281
 80061ae:	496e      	ldr	r1, [pc, #440]	; (8006368 <tcp_listen_input+0x1dc>)
 80061b0:	486e      	ldr	r0, [pc, #440]	; (800636c <tcp_listen_input+0x1e0>)
 80061b2:	f009 ff8d 	bl	80100d0 <iprintf>
 80061b6:	2000      	movs	r0, #0
 80061b8:	f00a f88c 	bl	80102d4 <fflush>
 80061bc:	f009 ffd1 	bl	8010162 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80061c0:	4b67      	ldr	r3, [pc, #412]	; (8006360 <tcp_listen_input+0x1d4>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01a      	beq.n	8006202 <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80061cc:	4b68      	ldr	r3, [pc, #416]	; (8006370 <tcp_listen_input+0x1e4>)
 80061ce:	6858      	ldr	r0, [r3, #4]
 80061d0:	4b68      	ldr	r3, [pc, #416]	; (8006374 <tcp_listen_input+0x1e8>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	4b68      	ldr	r3, [pc, #416]	; (8006378 <tcp_listen_input+0x1ec>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b68      	ldr	r3, [pc, #416]	; (800637c <tcp_listen_input+0x1f0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80061e0:	4b67      	ldr	r3, [pc, #412]	; (8006380 <tcp_listen_input+0x1f4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80061e8:	4a65      	ldr	r2, [pc, #404]	; (8006380 <tcp_listen_input+0x1f4>)
 80061ea:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80061ec:	8812      	ldrh	r2, [r2, #0]
 80061ee:	b292      	uxth	r2, r2
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	4b63      	ldr	r3, [pc, #396]	; (8006384 <tcp_listen_input+0x1f8>)
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4b63      	ldr	r3, [pc, #396]	; (8006388 <tcp_listen_input+0x1fc>)
 80061fa:	4622      	mov	r2, r4
 80061fc:	f003 f977 	bl	80094ee <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006200:	e0aa      	b.n	8006358 <tcp_listen_input+0x1cc>
  } else if (flags & TCP_SYN) {
 8006202:	4b57      	ldr	r3, [pc, #348]	; (8006360 <tcp_listen_input+0x1d4>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80a4 	beq.w	8006358 <tcp_listen_input+0x1cc>
    npcb = tcp_alloc(pcb->prio);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7d5b      	ldrb	r3, [r3, #21]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f8b3 	bl	8005380 <tcp_alloc>
 800621a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d111      	bne.n	8006246 <tcp_listen_input+0xba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <tcp_listen_input+0xb4>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6910      	ldr	r0, [r2, #16]
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	2100      	movs	r1, #0
 8006238:	4798      	blx	r3
 800623a:	4603      	mov	r3, r0
 800623c:	74fb      	strb	r3, [r7, #19]
      return;
 800623e:	e08c      	b.n	800635a <tcp_listen_input+0x1ce>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006240:	23f0      	movs	r3, #240	; 0xf0
 8006242:	74fb      	strb	r3, [r7, #19]
      return;
 8006244:	e089      	b.n	800635a <tcp_listen_input+0x1ce>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006246:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <tcp_listen_input+0x1e4>)
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800624e:	4b48      	ldr	r3, [pc, #288]	; (8006370 <tcp_listen_input+0x1e4>)
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8ada      	ldrh	r2, [r3, #22]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800625e:	4b48      	ldr	r3, [pc, #288]	; (8006380 <tcp_listen_input+0x1f4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29a      	uxth	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2203      	movs	r2, #3
 800626e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006270:	4b42      	ldr	r3, [pc, #264]	; (800637c <tcp_listen_input+0x1f0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006282:	6978      	ldr	r0, [r7, #20]
 8006284:	f7ff f9fc 	bl	8005680 <tcp_next_iss>
 8006288:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <tcp_listen_input+0x1f0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7a5b      	ldrb	r3, [r3, #9]
 80062be:	f003 030c 	and.w	r3, r3, #12
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7a1a      	ldrb	r2, [r3, #8]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80062d0:	4b2e      	ldr	r3, [pc, #184]	; (800638c <tcp_listen_input+0x200>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	60da      	str	r2, [r3, #12]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	; (800638c <tcp_listen_input+0x200>)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	f003 faaf 	bl	8009840 <tcp_timer_needed>
 80062e2:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <tcp_listen_input+0x204>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80062e8:	6978      	ldr	r0, [r7, #20]
 80062ea:	f001 fe03 	bl	8007ef4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <tcp_listen_input+0x1f4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	89db      	ldrh	r3, [r3, #14]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fb fd29 	bl	8001d68 <ip4_route>
 8006316:	4601      	mov	r1, r0
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3304      	adds	r3, #4
 800631c:	461a      	mov	r2, r3
 800631e:	4620      	mov	r0, r4
 8006320:	f7ff f9d8 	bl	80056d4 <tcp_eff_send_mss_netif>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800632c:	2112      	movs	r1, #18
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f002 f8ee 	bl	8008510 <tcp_enqueue_flags>
 8006334:	4603      	mov	r3, r0
 8006336:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 8006338:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <tcp_listen_input+0x1be>
      tcp_abandon(npcb, 0);
 8006340:	2100      	movs	r1, #0
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f7fe f8ba 	bl	80044bc <tcp_abandon>
      return;
 8006348:	e007      	b.n	800635a <tcp_listen_input+0x1ce>
    tcp_output(npcb);
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	f002 f9da 	bl	8008704 <tcp_output>
  return;
 8006350:	bf00      	nop
 8006352:	e001      	b.n	8006358 <tcp_listen_input+0x1cc>
    return;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <tcp_listen_input+0x1ce>
  return;
 8006358:	bf00      	nop
}
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	200005d4 	.word	0x200005d4
 8006364:	08012678 	.word	0x08012678
 8006368:	08012860 	.word	0x08012860
 800636c:	080126b4 	.word	0x080126b4
 8006370:	20000704 	.word	0x20000704
 8006374:	200005cc 	.word	0x200005cc
 8006378:	200005d2 	.word	0x200005d2
 800637c:	200005c8 	.word	0x200005c8
 8006380:	200005b8 	.word	0x200005b8
 8006384:	20000714 	.word	0x20000714
 8006388:	20000718 	.word	0x20000718
 800638c:	20001740 	.word	0x20001740
 8006390:	2000173c 	.word	0x2000173c

08006394 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af04      	add	r7, sp, #16
 800639a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800639c:	4b32      	ldr	r3, [pc, #200]	; (8006468 <tcp_timewait_input+0xd4>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d159      	bne.n	800645c <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <tcp_timewait_input+0x32>
 80063ae:	4b2f      	ldr	r3, [pc, #188]	; (800646c <tcp_timewait_input+0xd8>)
 80063b0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80063b4:	492e      	ldr	r1, [pc, #184]	; (8006470 <tcp_timewait_input+0xdc>)
 80063b6:	482f      	ldr	r0, [pc, #188]	; (8006474 <tcp_timewait_input+0xe0>)
 80063b8:	f009 fe8a 	bl	80100d0 <iprintf>
 80063bc:	2000      	movs	r0, #0
 80063be:	f009 ff89 	bl	80102d4 <fflush>
 80063c2:	f009 fece 	bl	8010162 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80063c6:	4b28      	ldr	r3, [pc, #160]	; (8006468 <tcp_timewait_input+0xd4>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d02a      	beq.n	8006428 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80063d2:	4b29      	ldr	r3, [pc, #164]	; (8006478 <tcp_timewait_input+0xe4>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db2d      	blt.n	800643c <tcp_timewait_input+0xa8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80063e8:	441a      	add	r2, r3
 80063ea:	4b23      	ldr	r3, [pc, #140]	; (8006478 <tcp_timewait_input+0xe4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db23      	blt.n	800643c <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80063f4:	4b21      	ldr	r3, [pc, #132]	; (800647c <tcp_timewait_input+0xe8>)
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <tcp_timewait_input+0xec>)
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <tcp_timewait_input+0xe4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006404:	4b1f      	ldr	r3, [pc, #124]	; (8006484 <tcp_timewait_input+0xf0>)
 8006406:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800640c:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <tcp_timewait_input+0xf0>)
 800640e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006410:	8812      	ldrh	r2, [r2, #0]
 8006412:	b292      	uxth	r2, r2
 8006414:	9202      	str	r2, [sp, #8]
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <tcp_timewait_input+0xf4>)
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <tcp_timewait_input+0xf8>)
 800641e:	4602      	mov	r2, r0
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f003 f843 	bl	80094ac <tcp_rst>
      return;
 8006426:	e01c      	b.n	8006462 <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <tcp_timewait_input+0xd4>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8006434:	4b16      	ldr	r3, [pc, #88]	; (8006490 <tcp_timewait_input+0xfc>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800643c:	4b10      	ldr	r3, [pc, #64]	; (8006480 <tcp_timewait_input+0xec>)
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00d      	beq.n	8006460 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8b5b      	ldrh	r3, [r3, #26]
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f002 f956 	bl	8008704 <tcp_output>
  }
  return;
 8006458:	bf00      	nop
 800645a:	e001      	b.n	8006460 <tcp_timewait_input+0xcc>
    return;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <tcp_timewait_input+0xce>
  return;
 8006460:	bf00      	nop
}
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200005d4 	.word	0x200005d4
 800646c:	08012678 	.word	0x08012678
 8006470:	08012880 	.word	0x08012880
 8006474:	080126b4 	.word	0x080126b4
 8006478:	200005c8 	.word	0x200005c8
 800647c:	200005cc 	.word	0x200005cc
 8006480:	200005d2 	.word	0x200005d2
 8006484:	200005b8 	.word	0x200005b8
 8006488:	20000714 	.word	0x20000714
 800648c:	20000718 	.word	0x20000718
 8006490:	20001744 	.word	0x20001744

08006494 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b08d      	sub	sp, #52	; 0x34
 8006498:	af04      	add	r7, sp, #16
 800649a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <tcp_process+0x2e>
 80064aa:	4b9c      	ldr	r3, [pc, #624]	; (800671c <tcp_process+0x288>)
 80064ac:	f240 321f 	movw	r2, #799	; 0x31f
 80064b0:	499b      	ldr	r1, [pc, #620]	; (8006720 <tcp_process+0x28c>)
 80064b2:	489c      	ldr	r0, [pc, #624]	; (8006724 <tcp_process+0x290>)
 80064b4:	f009 fe0c 	bl	80100d0 <iprintf>
 80064b8:	2000      	movs	r0, #0
 80064ba:	f009 ff0b 	bl	80102d4 <fflush>
 80064be:	f009 fe50 	bl	8010162 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80064c2:	4b99      	ldr	r3, [pc, #612]	; (8006728 <tcp_process+0x294>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d053      	beq.n	8006576 <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7d1b      	ldrb	r3, [r3, #20]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d108      	bne.n	80064e8 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064da:	4b94      	ldr	r3, [pc, #592]	; (800672c <tcp_process+0x298>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d123      	bne.n	800652a <tcp_process+0x96>
        acceptable = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	76fb      	strb	r3, [r7, #27]
 80064e6:	e020      	b.n	800652a <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ec:	4b90      	ldr	r3, [pc, #576]	; (8006730 <tcp_process+0x29c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d102      	bne.n	80064fa <tcp_process+0x66>
        acceptable = 1;
 80064f4:	2301      	movs	r3, #1
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e017      	b.n	800652a <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80064fa:	4b8d      	ldr	r3, [pc, #564]	; (8006730 <tcp_process+0x29c>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	db10      	blt.n	800652a <tcp_process+0x96>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006510:	441a      	add	r2, r3
 8006512:	4b87      	ldr	r3, [pc, #540]	; (8006730 <tcp_process+0x29c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	db06      	blt.n	800652a <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8b5b      	ldrh	r3, [r3, #26]
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800652a:	7efb      	ldrb	r3, [r7, #27]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7d1b      	ldrb	r3, [r3, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <tcp_process+0xbc>
 8006538:	4b78      	ldr	r3, [pc, #480]	; (800671c <tcp_process+0x288>)
 800653a:	f240 323b 	movw	r2, #827	; 0x33b
 800653e:	497d      	ldr	r1, [pc, #500]	; (8006734 <tcp_process+0x2a0>)
 8006540:	4878      	ldr	r0, [pc, #480]	; (8006724 <tcp_process+0x290>)
 8006542:	f009 fdc5 	bl	80100d0 <iprintf>
 8006546:	2000      	movs	r0, #0
 8006548:	f009 fec4 	bl	80102d4 <fflush>
 800654c:	f009 fe09 	bl	8010162 <abort>
      recv_flags |= TF_RESET;
 8006550:	4b79      	ldr	r3, [pc, #484]	; (8006738 <tcp_process+0x2a4>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f043 0308 	orr.w	r3, r3, #8
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b77      	ldr	r3, [pc, #476]	; (8006738 <tcp_process+0x2a4>)
 800655c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8b5b      	ldrh	r3, [r3, #26]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800656c:	f06f 030d 	mvn.w	r3, #13
 8006570:	e3a1      	b.n	8006cb6 <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e39f      	b.n	8006cb6 <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006576:	4b6c      	ldr	r3, [pc, #432]	; (8006728 <tcp_process+0x294>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d010      	beq.n	80065a4 <tcp_process+0x110>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7d1b      	ldrb	r3, [r3, #20]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d00c      	beq.n	80065a4 <tcp_process+0x110>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7d1b      	ldrb	r3, [r3, #20]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d008      	beq.n	80065a4 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8b5b      	ldrh	r3, [r3, #26]
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e388      	b.n	8006cb6 <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8b5b      	ldrh	r3, [r3, #26]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80065b0:	4b62      	ldr	r3, [pc, #392]	; (800673c <tcp_process+0x2a8>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fc93 	bl	8007ef4 <tcp_parseopt>

  if (flags & TCP_SYN) {
 80065ce:	4b56      	ldr	r3, [pc, #344]	; (8006728 <tcp_process+0x294>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d005      	beq.n	80065ee <tcp_process+0x15a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	7d1b      	ldrb	r3, [r3, #20]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d001      	beq.n	80065ee <tcp_process+0x15a>
      return ERR_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e363      	b.n	8006cb6 <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7d1b      	ldrb	r3, [r3, #20]
 80065f2:	3b02      	subs	r3, #2
 80065f4:	2b07      	cmp	r3, #7
 80065f6:	f200 834e 	bhi.w	8006c96 <tcp_process+0x802>
 80065fa:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <tcp_process+0x16c>)
 80065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006600:	08006621 	.word	0x08006621
 8006604:	0800685f 	.word	0x0800685f
 8006608:	08006a15 	.word	0x08006a15
 800660c:	08006a3f 	.word	0x08006a3f
 8006610:	08006b2d 	.word	0x08006b2d
 8006614:	08006a15 	.word	0x08006a15
 8006618:	08006bb9 	.word	0x08006bb9
 800661c:	08006c61 	.word	0x08006c61
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006620:	4b41      	ldr	r3, [pc, #260]	; (8006728 <tcp_process+0x294>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80eb 	beq.w	8006804 <tcp_process+0x370>
 800662e:	4b3e      	ldr	r3, [pc, #248]	; (8006728 <tcp_process+0x294>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80e4 	beq.w	8006804 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	4b3a      	ldr	r3, [pc, #232]	; (800672c <tcp_process+0x298>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	f040 80dc 	bne.w	8006804 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 800664c:	4b38      	ldr	r3, [pc, #224]	; (8006730 <tcp_process+0x29c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <tcp_process+0x298>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006666:	4b36      	ldr	r3, [pc, #216]	; (8006740 <tcp_process+0x2ac>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	89db      	ldrh	r3, [r3, #14]
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006680:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <tcp_process+0x29c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	1e5a      	subs	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fb fb65 	bl	8001d68 <ip4_route>
 800669e:	4601      	mov	r1, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	461a      	mov	r2, r3
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff f814 	bl	80056d4 <tcp_eff_send_mss_netif>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066b8:	009a      	lsls	r2, r3, #2
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf38      	it	cc
 80066c8:	460b      	movcc	r3, r1
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d204      	bcs.n	80066d8 <tcp_process+0x244>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	e00d      	b.n	80066f4 <tcp_process+0x260>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	f241 121c 	movw	r2, #4380	; 0x111c
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d904      	bls.n	80066f0 <tcp_process+0x25c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	e001      	b.n	80066f4 <tcp_process+0x260>
 80066f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006700:	2b00      	cmp	r3, #0
 8006702:	d121      	bne.n	8006748 <tcp_process+0x2b4>
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <tcp_process+0x288>)
 8006706:	f240 3277 	movw	r2, #887	; 0x377
 800670a:	490e      	ldr	r1, [pc, #56]	; (8006744 <tcp_process+0x2b0>)
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <tcp_process+0x290>)
 800670e:	f009 fcdf 	bl	80100d0 <iprintf>
 8006712:	2000      	movs	r0, #0
 8006714:	f009 fdde 	bl	80102d4 <fflush>
 8006718:	f009 fd23 	bl	8010162 <abort>
 800671c:	08012678 	.word	0x08012678
 8006720:	080128a0 	.word	0x080128a0
 8006724:	080126b4 	.word	0x080126b4
 8006728:	200005d4 	.word	0x200005d4
 800672c:	200005cc 	.word	0x200005cc
 8006730:	200005c8 	.word	0x200005c8
 8006734:	080128bc 	.word	0x080128bc
 8006738:	200005d5 	.word	0x200005d5
 800673c:	20001744 	.word	0x20001744
 8006740:	200005b8 	.word	0x200005b8
 8006744:	080128dc 	.word	0x080128dc
        --pcb->snd_queuelen;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675c:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006768:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <tcp_process+0x2f4>
 8006770:	4b9b      	ldr	r3, [pc, #620]	; (80069e0 <tcp_process+0x54c>)
 8006772:	f240 327f 	movw	r2, #895	; 0x37f
 8006776:	499b      	ldr	r1, [pc, #620]	; (80069e4 <tcp_process+0x550>)
 8006778:	489b      	ldr	r0, [pc, #620]	; (80069e8 <tcp_process+0x554>)
 800677a:	f009 fca9 	bl	80100d0 <iprintf>
 800677e:	2000      	movs	r0, #0
 8006780:	f009 fda8 	bl	80102d4 <fflush>
 8006784:	f009 fced 	bl	8010162 <abort>
          pcb->unsent = rseg->next;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006790:	e003      	b.n	800679a <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800679a:	69f8      	ldr	r0, [r7, #28]
 800679c:	f7fe fc7c 	bl	8005098 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <tcp_process+0x31e>
          pcb->rtime = -1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80067b0:	e006      	b.n	80067c0 <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <tcp_process+0x34c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6910      	ldr	r0, [r2, #16]
 80067d4:	2200      	movs	r2, #0
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	76bb      	strb	r3, [r7, #26]
 80067de:	e001      	b.n	80067e4 <tcp_process+0x350>
 80067e0:	2300      	movs	r3, #0
 80067e2:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80067e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80067e8:	f113 0f0d 	cmn.w	r3, #13
 80067ec:	d102      	bne.n	80067f4 <tcp_process+0x360>
          return ERR_ABRT;
 80067ee:	f06f 030c 	mvn.w	r3, #12
 80067f2:	e260      	b.n	8006cb6 <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8b5b      	ldrh	r3, [r3, #26]
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8006802:	e24a      	b.n	8006c9a <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 8006804:	4b79      	ldr	r3, [pc, #484]	; (80069ec <tcp_process+0x558>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8244 	beq.w	8006c9a <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006812:	4b77      	ldr	r3, [pc, #476]	; (80069f0 <tcp_process+0x55c>)
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	4b77      	ldr	r3, [pc, #476]	; (80069f4 <tcp_process+0x560>)
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	4b76      	ldr	r3, [pc, #472]	; (80069f8 <tcp_process+0x564>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006822:	4b76      	ldr	r3, [pc, #472]	; (80069fc <tcp_process+0x568>)
 8006824:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800682a:	4a74      	ldr	r2, [pc, #464]	; (80069fc <tcp_process+0x568>)
 800682c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800682e:	8812      	ldrh	r2, [r2, #0]
 8006830:	b292      	uxth	r2, r2
 8006832:	9202      	str	r2, [sp, #8]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	4b72      	ldr	r3, [pc, #456]	; (8006a00 <tcp_process+0x56c>)
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	4b72      	ldr	r3, [pc, #456]	; (8006a04 <tcp_process+0x570>)
 800683c:	4602      	mov	r2, r0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f002 fe34 	bl	80094ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800684a:	2b05      	cmp	r3, #5
 800684c:	f200 8225 	bhi.w	8006c9a <tcp_process+0x806>
          pcb->rtime = 0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f002 fb36 	bl	8008ec8 <tcp_rexmit_rto>
      break;
 800685c:	e21d      	b.n	8006c9a <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 800685e:	4b63      	ldr	r3, [pc, #396]	; (80069ec <tcp_process+0x558>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	4b61      	ldr	r3, [pc, #388]	; (80069f8 <tcp_process+0x564>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	f040 8212 	bne.w	8006c9e <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f002 fb4a 	bl	8008f14 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8006880:	e20d      	b.n	8006c9e <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 8006882:	4b5a      	ldr	r3, [pc, #360]	; (80069ec <tcp_process+0x558>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8207 	beq.w	8006c9e <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006890:	4b57      	ldr	r3, [pc, #348]	; (80069f0 <tcp_process+0x55c>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	f2c0 8084 	blt.w	80069aa <tcp_process+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068a6:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <tcp_process+0x55c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db7c      	blt.n	80069aa <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2204      	movs	r2, #4
 80068b4:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <tcp_process+0x430>
            err = ERR_VAL;
 80068be:	23fa      	movs	r3, #250	; 0xfa
 80068c0:	76bb      	strb	r3, [r7, #26]
 80068c2:	e022      	b.n	800690a <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <tcp_process+0x452>
 80068ce:	4b44      	ldr	r3, [pc, #272]	; (80069e0 <tcp_process+0x54c>)
 80068d0:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80068d4:	494c      	ldr	r1, [pc, #304]	; (8006a08 <tcp_process+0x574>)
 80068d6:	4844      	ldr	r0, [pc, #272]	; (80069e8 <tcp_process+0x554>)
 80068d8:	f009 fbfa 	bl	80100d0 <iprintf>
 80068dc:	2000      	movs	r0, #0
 80068de:	f009 fcf9 	bl	80102d4 <fflush>
 80068e2:	f009 fc3e 	bl	8010162 <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <tcp_process+0x472>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6910      	ldr	r0, [r2, #16]
 80068fa:	2200      	movs	r2, #0
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4798      	blx	r3
 8006900:	4603      	mov	r3, r0
 8006902:	76bb      	strb	r3, [r7, #26]
 8006904:	e001      	b.n	800690a <tcp_process+0x476>
 8006906:	23f0      	movs	r3, #240	; 0xf0
 8006908:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 800690a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <tcp_process+0x494>
            if (err != ERR_ABRT) {
 8006912:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006916:	f113 0f0d 	cmn.w	r3, #13
 800691a:	d002      	beq.n	8006922 <tcp_process+0x48e>
              tcp_abort(pcb);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fd fe8f 	bl	8004640 <tcp_abort>
            return ERR_ABRT;
 8006922:	f06f 030c 	mvn.w	r3, #12
 8006926:	e1c6      	b.n	8006cb6 <tcp_process+0x822>
          tcp_receive(pcb);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fae1 	bl	8006ef0 <tcp_receive>
          if (recv_acked != 0) {
 800692e:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <tcp_process+0x578>)
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <tcp_process+0x4ae>
            recv_acked--;
 8006936:	4b35      	ldr	r3, [pc, #212]	; (8006a0c <tcp_process+0x578>)
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <tcp_process+0x578>)
 8006940:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006946:	009a      	lsls	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	f241 111c 	movw	r1, #4380	; 0x111c
 8006952:	428b      	cmp	r3, r1
 8006954:	bf38      	it	cc
 8006956:	460b      	movcc	r3, r1
 8006958:	429a      	cmp	r2, r3
 800695a:	d204      	bcs.n	8006966 <tcp_process+0x4d2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	b29b      	uxth	r3, r3
 8006964:	e00d      	b.n	8006982 <tcp_process+0x4ee>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	f241 121c 	movw	r2, #4380	; 0x111c
 8006970:	4293      	cmp	r3, r2
 8006972:	d904      	bls.n	800697e <tcp_process+0x4ea>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	b29b      	uxth	r3, r3
 800697c:	e001      	b.n	8006982 <tcp_process+0x4ee>
 800697e:	f241 131c 	movw	r3, #4380	; 0x111c
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <tcp_process+0x57c>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d024      	beq.n	80069de <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8b5b      	ldrh	r3, [r3, #26]
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	b29a      	uxth	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2207      	movs	r2, #7
 80069a6:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80069a8:	e019      	b.n	80069de <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <tcp_process+0x55c>)
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <tcp_process+0x560>)
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <tcp_process+0x564>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <tcp_process+0x568>)
 80069bc:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80069be:	885b      	ldrh	r3, [r3, #2]
 80069c0:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80069c2:	4a0e      	ldr	r2, [pc, #56]	; (80069fc <tcp_process+0x568>)
 80069c4:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	b292      	uxth	r2, r2
 80069ca:	9202      	str	r2, [sp, #8]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <tcp_process+0x56c>)
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <tcp_process+0x570>)
 80069d4:	4602      	mov	r2, r0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 fd68 	bl	80094ac <tcp_rst>
      break;
 80069dc:	e15f      	b.n	8006c9e <tcp_process+0x80a>
 80069de:	e15e      	b.n	8006c9e <tcp_process+0x80a>
 80069e0:	08012678 	.word	0x08012678
 80069e4:	080128f4 	.word	0x080128f4
 80069e8:	080126b4 	.word	0x080126b4
 80069ec:	200005d4 	.word	0x200005d4
 80069f0:	200005cc 	.word	0x200005cc
 80069f4:	200005d2 	.word	0x200005d2
 80069f8:	200005c8 	.word	0x200005c8
 80069fc:	200005b8 	.word	0x200005b8
 8006a00:	20000714 	.word	0x20000714
 8006a04:	20000718 	.word	0x20000718
 8006a08:	08012908 	.word	0x08012908
 8006a0c:	200005d0 	.word	0x200005d0
 8006a10:	200005d5 	.word	0x200005d5
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa6b 	bl	8006ef0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006a1a:	4b8b      	ldr	r3, [pc, #556]	; (8006c48 <tcp_process+0x7b4>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 813d 	beq.w	8006ca2 <tcp_process+0x80e>
        tcp_ack_now(pcb);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8b5b      	ldrh	r3, [r3, #26]
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2207      	movs	r2, #7
 8006a3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a3c:	e131      	b.n	8006ca2 <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa56 	bl	8006ef0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006a44:	4b80      	ldr	r3, [pc, #512]	; (8006c48 <tcp_process+0x7b4>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d056      	beq.n	8006afe <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006a50:	4b7e      	ldr	r3, [pc, #504]	; (8006c4c <tcp_process+0x7b8>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d045      	beq.n	8006ae8 <tcp_process+0x654>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a60:	4b7b      	ldr	r3, [pc, #492]	; (8006c50 <tcp_process+0x7bc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d13f      	bne.n	8006ae8 <tcp_process+0x654>
            pcb->unsent == NULL) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d13b      	bne.n	8006ae8 <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8b5b      	ldrh	r3, [r3, #26]
 8006a74:	f043 0302 	orr.w	r3, r3, #2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fe fd02 	bl	8005488 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006a84:	4b73      	ldr	r3, [pc, #460]	; (8006c54 <tcp_process+0x7c0>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d105      	bne.n	8006a9a <tcp_process+0x606>
 8006a8e:	4b71      	ldr	r3, [pc, #452]	; (8006c54 <tcp_process+0x7c0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a6f      	ldr	r2, [pc, #444]	; (8006c54 <tcp_process+0x7c0>)
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e013      	b.n	8006ac2 <tcp_process+0x62e>
 8006a9a:	4b6e      	ldr	r3, [pc, #440]	; (8006c54 <tcp_process+0x7c0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e00c      	b.n	8006abc <tcp_process+0x628>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d104      	bne.n	8006ab6 <tcp_process+0x622>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	60da      	str	r2, [r3, #12]
 8006ab4:	e005      	b.n	8006ac2 <tcp_process+0x62e>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ef      	bne.n	8006aa2 <tcp_process+0x60e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	60da      	str	r2, [r3, #12]
 8006ac8:	4b63      	ldr	r3, [pc, #396]	; (8006c58 <tcp_process+0x7c4>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	220a      	movs	r2, #10
 8006ad2:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8006ad4:	4b61      	ldr	r3, [pc, #388]	; (8006c5c <tcp_process+0x7c8>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	4a5f      	ldr	r2, [pc, #380]	; (8006c5c <tcp_process+0x7c8>)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	f002 fead 	bl	8009840 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8006ae6:	e0de      	b.n	8006ca6 <tcp_process+0x812>
          tcp_ack_now(pcb);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8b5b      	ldrh	r3, [r3, #26]
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2208      	movs	r2, #8
 8006afa:	751a      	strb	r2, [r3, #20]
      break;
 8006afc:	e0d3      	b.n	8006ca6 <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006afe:	4b53      	ldr	r3, [pc, #332]	; (8006c4c <tcp_process+0x7b8>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80cd 	beq.w	8006ca6 <tcp_process+0x812>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b10:	4b4f      	ldr	r3, [pc, #316]	; (8006c50 <tcp_process+0x7bc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	f040 80c6 	bne.w	8006ca6 <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 80c1 	bne.w	8006ca6 <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2206      	movs	r2, #6
 8006b28:	751a      	strb	r2, [r3, #20]
      break;
 8006b2a:	e0bc      	b.n	8006ca6 <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f9df 	bl	8006ef0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006b32:	4b45      	ldr	r3, [pc, #276]	; (8006c48 <tcp_process+0x7b4>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80b5 	beq.w	8006caa <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8b5b      	ldrh	r3, [r3, #26]
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe fc9a 	bl	8005488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006b54:	4b3f      	ldr	r3, [pc, #252]	; (8006c54 <tcp_process+0x7c0>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d105      	bne.n	8006b6a <tcp_process+0x6d6>
 8006b5e:	4b3d      	ldr	r3, [pc, #244]	; (8006c54 <tcp_process+0x7c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4a3b      	ldr	r2, [pc, #236]	; (8006c54 <tcp_process+0x7c0>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	e013      	b.n	8006b92 <tcp_process+0x6fe>
 8006b6a:	4b3a      	ldr	r3, [pc, #232]	; (8006c54 <tcp_process+0x7c0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	e00c      	b.n	8006b8c <tcp_process+0x6f8>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d104      	bne.n	8006b86 <tcp_process+0x6f2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	60da      	str	r2, [r3, #12]
 8006b84:	e005      	b.n	8006b92 <tcp_process+0x6fe>
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ef      	bne.n	8006b72 <tcp_process+0x6de>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	60da      	str	r2, [r3, #12]
 8006b98:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <tcp_process+0x7c4>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006ba4:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <tcp_process+0x7c8>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
 8006bac:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <tcp_process+0x7c8>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	f002 fe45 	bl	8009840 <tcp_timer_needed>
      }
      break;
 8006bb6:	e078      	b.n	8006caa <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f999 	bl	8006ef0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006bbe:	4b23      	ldr	r3, [pc, #140]	; (8006c4c <tcp_process+0x7b8>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d071      	beq.n	8006cae <tcp_process+0x81a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bce:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <tcp_process+0x7bc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d16b      	bne.n	8006cae <tcp_process+0x81a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d167      	bne.n	8006cae <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fe fc52 	bl	8005488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <tcp_process+0x7c0>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d105      	bne.n	8006bfa <tcp_process+0x766>
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <tcp_process+0x7c0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <tcp_process+0x7c0>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e013      	b.n	8006c22 <tcp_process+0x78e>
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <tcp_process+0x7c0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e00c      	b.n	8006c1c <tcp_process+0x788>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d104      	bne.n	8006c16 <tcp_process+0x782>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	60da      	str	r2, [r3, #12]
 8006c14:	e005      	b.n	8006c22 <tcp_process+0x78e>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1ef      	bne.n	8006c02 <tcp_process+0x76e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	60da      	str	r2, [r3, #12]
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <tcp_process+0x7c4>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220a      	movs	r2, #10
 8006c32:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <tcp_process+0x7c8>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <tcp_process+0x7c8>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	f002 fdfd 	bl	8009840 <tcp_timer_needed>
      }
      break;
 8006c46:	e032      	b.n	8006cae <tcp_process+0x81a>
 8006c48:	200005d5 	.word	0x200005d5
 8006c4c:	200005d4 	.word	0x200005d4
 8006c50:	200005cc 	.word	0x200005cc
 8006c54:	20001740 	.word	0x20001740
 8006c58:	2000173c 	.word	0x2000173c
 8006c5c:	20001750 	.word	0x20001750
    case LAST_ACK:
      tcp_receive(pcb);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f945 	bl	8006ef0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <tcp_process+0x82c>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01f      	beq.n	8006cb2 <tcp_process+0x81e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <tcp_process+0x830>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d119      	bne.n	8006cb2 <tcp_process+0x81e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d115      	bne.n	8006cb2 <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <tcp_process+0x834>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f043 0310 	orr.w	r3, r3, #16
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <tcp_process+0x834>)
 8006c92:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006c94:	e00d      	b.n	8006cb2 <tcp_process+0x81e>
    default:
      break;
 8006c96:	bf00      	nop
 8006c98:	e00c      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e00a      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e008      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e006      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e004      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006caa:	bf00      	nop
 8006cac:	e002      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <tcp_process+0x820>
      break;
 8006cb2:	bf00      	nop
  }
  return ERR_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3724      	adds	r7, #36	; 0x24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd90      	pop	{r4, r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200005d4 	.word	0x200005d4
 8006cc4:	200005cc 	.word	0x200005cc
 8006cc8:	200005d5 	.word	0x200005d5

08006ccc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <tcp_oos_insert_segment+0x28>
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <tcp_oos_insert_segment+0x108>)
 8006cde:	f240 422c 	movw	r2, #1068	; 0x42c
 8006ce2:	493d      	ldr	r1, [pc, #244]	; (8006dd8 <tcp_oos_insert_segment+0x10c>)
 8006ce4:	483d      	ldr	r0, [pc, #244]	; (8006ddc <tcp_oos_insert_segment+0x110>)
 8006ce6:	f009 f9f3 	bl	80100d0 <iprintf>
 8006cea:	2000      	movs	r0, #0
 8006cec:	f009 faf2 	bl	80102d4 <fflush>
 8006cf0:	f009 fa37 	bl	8010162 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	899b      	ldrh	r3, [r3, #12]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fa fcab 	bl	8001658 <lwip_htons>
 8006d02:	4603      	mov	r3, r0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d027      	beq.n	8006d5e <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8006d0e:	6838      	ldr	r0, [r7, #0]
 8006d10:	f7fe f9ae 	bl	8005070 <tcp_segs_free>
    next = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	e055      	b.n	8006dc6 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	899b      	ldrh	r3, [r3, #12]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fa fc98 	bl	8001658 <lwip_htons>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00c      	beq.n	8006d4e <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691c      	ldr	r4, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	899b      	ldrh	r3, [r3, #12]
 8006d3e:	b29d      	uxth	r5, r3
 8006d40:	2001      	movs	r0, #1
 8006d42:	f7fa fc89 	bl	8001658 <lwip_htons>
 8006d46:	4603      	mov	r3, r0
 8006d48:	432b      	orrs	r3, r5
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7fe f99d 	bl	8005098 <tcp_seg_free>
    while (next &&
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00e      	beq.n	8006d82 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	891b      	ldrh	r3, [r3, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b1d      	ldr	r3, [pc, #116]	; (8006de0 <tcp_oos_insert_segment+0x114>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	441a      	add	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	8909      	ldrh	r1, [r1, #8]
 8006d7a:	440b      	add	r3, r1
 8006d7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dacb      	bge.n	8006d1a <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01e      	beq.n	8006dc6 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	891b      	ldrh	r3, [r3, #8]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <tcp_oos_insert_segment+0x114>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	440b      	add	r3, r1
 8006d9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da12      	bge.n	8006dc6 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <tcp_oos_insert_segment+0x114>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	891b      	ldrh	r3, [r3, #8]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7fc fc37 	bl	8003634 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8006dd4:	08012678 	.word	0x08012678
 8006dd8:	08012928 	.word	0x08012928
 8006ddc:	080126b4 	.word	0x080126b4
 8006de0:	200005c8 	.word	0x200005c8

08006de4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8006de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8006df2:	e048      	b.n	8006e86 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fc fe44 	bl	8003a90 <pbuf_clen>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006e12:	8a7a      	ldrh	r2, [r7, #18]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d90b      	bls.n	8006e30 <tcp_free_acked_segments+0x4c>
 8006e18:	4b2f      	ldr	r3, [pc, #188]	; (8006ed8 <tcp_free_acked_segments+0xf4>)
 8006e1a:	f240 4264 	movw	r2, #1124	; 0x464
 8006e1e:	492f      	ldr	r1, [pc, #188]	; (8006edc <tcp_free_acked_segments+0xf8>)
 8006e20:	482f      	ldr	r0, [pc, #188]	; (8006ee0 <tcp_free_acked_segments+0xfc>)
 8006e22:	f009 f955 	bl	80100d0 <iprintf>
 8006e26:	2000      	movs	r0, #0
 8006e28:	f009 fa54 	bl	80102d4 <fflush>
 8006e2c:	f009 f999 	bl	8010162 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8006e36:	8a7b      	ldrh	r3, [r7, #18]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	891a      	ldrh	r2, [r3, #8]
 8006e46:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <tcp_free_acked_segments+0x100>)
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <tcp_free_acked_segments+0x100>)
 8006e50:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f7fe f920 	bl	8005098 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d011      	beq.n	8006e86 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10e      	bne.n	8006e86 <tcp_free_acked_segments+0xa2>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <tcp_free_acked_segments+0xa2>
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <tcp_free_acked_segments+0xf4>)
 8006e70:	f240 426f 	movw	r2, #1135	; 0x46f
 8006e74:	491c      	ldr	r1, [pc, #112]	; (8006ee8 <tcp_free_acked_segments+0x104>)
 8006e76:	481a      	ldr	r0, [pc, #104]	; (8006ee0 <tcp_free_acked_segments+0xfc>)
 8006e78:	f009 f92a 	bl	80100d0 <iprintf>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f009 fa29 	bl	80102d4 <fflush>
 8006e82:	f009 f96e 	bl	8010162 <abort>
  while (seg_list != NULL &&
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d020      	beq.n	8006ece <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8006e8c:	4b17      	ldr	r3, [pc, #92]	; (8006eec <tcp_free_acked_segments+0x108>)
 8006e8e:	681c      	ldr	r4, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fa fbf3 	bl	8001682 <lwip_htonl>
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	891b      	ldrh	r3, [r3, #8]
 8006ea2:	461e      	mov	r6, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	899b      	ldrh	r3, [r3, #12]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fa fbd3 	bl	8001658 <lwip_htons>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <tcp_free_acked_segments+0xde>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <tcp_free_acked_segments+0xe0>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4433      	add	r3, r6
 8006ec6:	442b      	add	r3, r5
 8006ec8:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da92      	bge.n	8006df4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8006ece:	68bb      	ldr	r3, [r7, #8]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed8:	08012678 	.word	0x08012678
 8006edc:	08012950 	.word	0x08012950
 8006ee0:	080126b4 	.word	0x080126b4
 8006ee4:	200005d0 	.word	0x200005d0
 8006ee8:	08012978 	.word	0x08012978
 8006eec:	200005cc 	.word	0x200005cc

08006ef0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006ef0:	b5b0      	push	{r4, r5, r7, lr}
 8006ef2:	b094      	sub	sp, #80	; 0x50
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10b      	bne.n	8006f16 <tcp_receive+0x26>
 8006efe:	4bab      	ldr	r3, [pc, #684]	; (80071ac <tcp_receive+0x2bc>)
 8006f00:	f240 4287 	movw	r2, #1159	; 0x487
 8006f04:	49aa      	ldr	r1, [pc, #680]	; (80071b0 <tcp_receive+0x2c0>)
 8006f06:	48ab      	ldr	r0, [pc, #684]	; (80071b4 <tcp_receive+0x2c4>)
 8006f08:	f009 f8e2 	bl	80100d0 <iprintf>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f009 f9e1 	bl	80102d4 <fflush>
 8006f12:	f009 f926 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7d1b      	ldrb	r3, [r3, #20]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d80b      	bhi.n	8006f36 <tcp_receive+0x46>
 8006f1e:	4ba3      	ldr	r3, [pc, #652]	; (80071ac <tcp_receive+0x2bc>)
 8006f20:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8006f24:	49a4      	ldr	r1, [pc, #656]	; (80071b8 <tcp_receive+0x2c8>)
 8006f26:	48a3      	ldr	r0, [pc, #652]	; (80071b4 <tcp_receive+0x2c4>)
 8006f28:	f009 f8d2 	bl	80100d0 <iprintf>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f009 f9d1 	bl	80102d4 <fflush>
 8006f32:	f009 f916 	bl	8010162 <abort>

  if (flags & TCP_ACK) {
 8006f36:	4ba1      	ldr	r3, [pc, #644]	; (80071bc <tcp_receive+0x2cc>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8263 	beq.w	800740a <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f50:	4413      	add	r3, r2
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f58:	4b99      	ldr	r3, [pc, #612]	; (80071c0 <tcp_receive+0x2d0>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db1b      	blt.n	8006f9a <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f66:	4b96      	ldr	r3, [pc, #600]	; (80071c0 <tcp_receive+0x2d0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d106      	bne.n	8006f7c <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f72:	4b94      	ldr	r3, [pc, #592]	; (80071c4 <tcp_receive+0x2d4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	db0e      	blt.n	8006f9a <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f80:	4b90      	ldr	r3, [pc, #576]	; (80071c4 <tcp_receive+0x2d4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d125      	bne.n	8006fd4 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006f88:	4b8f      	ldr	r3, [pc, #572]	; (80071c8 <tcp_receive+0x2d8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	89db      	ldrh	r3, [r3, #14]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d91c      	bls.n	8006fd4 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006f9a:	4b8b      	ldr	r3, [pc, #556]	; (80071c8 <tcp_receive+0x2d8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	89db      	ldrh	r3, [r3, #14]
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d205      	bcs.n	8006fc4 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8006fc4:	4b7e      	ldr	r3, [pc, #504]	; (80071c0 <tcp_receive+0x2d0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8006fcc:	4b7d      	ldr	r3, [pc, #500]	; (80071c4 <tcp_receive+0x2d4>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd8:	4b7a      	ldr	r3, [pc, #488]	; (80071c4 <tcp_receive+0x2d4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	db58      	blt.n	8007094 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8006fe2:	4b7a      	ldr	r3, [pc, #488]	; (80071cc <tcp_receive+0x2dc>)
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 81af 	bne.w	800734a <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8006ff6:	441a      	add	r2, r3
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	f040 81a5 	bne.w	800734a <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	f2c0 819f 	blt.w	800734a <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007010:	4b6c      	ldr	r3, [pc, #432]	; (80071c4 <tcp_receive+0x2d4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	f040 8198 	bne.w	800734a <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007020:	3301      	adds	r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800702a:	429a      	cmp	r2, r3
 800702c:	d907      	bls.n	800703e <tcp_receive+0x14e>
                ++pcb->dupacks;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007034:	3301      	adds	r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007044:	2b03      	cmp	r3, #3
 8007046:	d91b      	bls.n	8007080 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007052:	4413      	add	r3, r2
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800705c:	429a      	cmp	r2, r3
 800705e:	d30a      	bcc.n	8007076 <tcp_receive+0x186>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800706a:	4413      	add	r3, r2
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007074:	e004      	b.n	8007080 <tcp_receive+0x190>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007086:	2b02      	cmp	r3, #2
 8007088:	f240 815f 	bls.w	800734a <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 ffb3 	bl	8008ff8 <tcp_rexmit_fast>
 8007092:	e15a      	b.n	800734a <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007094:	4b4b      	ldr	r3, [pc, #300]	; (80071c4 <tcp_receive+0x2d4>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f2c0 814d 	blt.w	8007340 <tcp_receive+0x450>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070aa:	4b46      	ldr	r3, [pc, #280]	; (80071c4 <tcp_receive+0x2d4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f2c0 8145 	blt.w	8007340 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8b5b      	ldrh	r3, [r3, #26]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8b5b      	ldrh	r3, [r3, #26]
 80070c6:	f023 0304 	bic.w	r3, r3, #4
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80070f2:	10db      	asrs	r3, r3, #3
 80070f4:	b21b      	sxth	r3, r3
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4413      	add	r3, r2
 8007102:	b29b      	uxth	r3, r3
 8007104:	b21a      	sxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800710c:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <tcp_receive+0x2d4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	b29b      	uxth	r3, r3
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007124:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <tcp_receive+0x2d4>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7d1b      	ldrb	r3, [r3, #20]
 8007130:	2b03      	cmp	r3, #3
 8007132:	f240 8096 	bls.w	8007262 <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007142:	429a      	cmp	r2, r3
 8007144:	d244      	bcs.n	80071d0 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	8b5b      	ldrh	r3, [r3, #26]
 800714a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <tcp_receive+0x266>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <tcp_receive+0x268>
 8007156:	2302      	movs	r3, #2
 8007158:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800715c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007166:	fb12 f303 	smulbb	r3, r2, r3
 800716a:	b29a      	uxth	r2, r3
 800716c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800716e:	4293      	cmp	r3, r2
 8007170:	bf28      	it	cs
 8007172:	4613      	movcs	r3, r2
 8007174:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800717c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800717e:	4413      	add	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007188:	429a      	cmp	r2, r3
 800718a:	d309      	bcc.n	80071a0 <tcp_receive+0x2b0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007194:	4413      	add	r3, r2
 8007196:	b29a      	uxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800719e:	e060      	b.n	8007262 <tcp_receive+0x372>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80071aa:	e05a      	b.n	8007262 <tcp_receive+0x372>
 80071ac:	08012678 	.word	0x08012678
 80071b0:	08012998 	.word	0x08012998
 80071b4:	080126b4 	.word	0x080126b4
 80071b8:	080129b4 	.word	0x080129b4
 80071bc:	200005d4 	.word	0x200005d4
 80071c0:	200005c8 	.word	0x200005c8
 80071c4:	200005cc 	.word	0x200005cc
 80071c8:	200005b8 	.word	0x200005b8
 80071cc:	200005d2 	.word	0x200005d2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80071d6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80071d8:	4413      	add	r3, r2
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d309      	bcc.n	80071fa <tcp_receive+0x30a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80071ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80071ee:	4413      	add	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80071f8:	e004      	b.n	8007204 <tcp_receive+0x314>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007210:	429a      	cmp	r2, r3
 8007212:	d326      	bcc.n	8007262 <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	b29a      	uxth	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007234:	4413      	add	r3, r2
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800723e:	429a      	cmp	r2, r3
 8007240:	d30a      	bcc.n	8007258 <tcp_receive+0x368>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800724c:	4413      	add	r3, r2
 800724e:	b29a      	uxth	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007256:	e004      	b.n	8007262 <tcp_receive+0x372>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800725e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800726a:	4aa0      	ldr	r2, [pc, #640]	; (80074ec <tcp_receive+0x5fc>)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff fdb9 	bl	8006de4 <tcp_free_acked_segments>
 8007272:	4602      	mov	r2, r0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007280:	4a9b      	ldr	r2, [pc, #620]	; (80074f0 <tcp_receive+0x600>)
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fdae 	bl	8006de4 <tcp_free_acked_segments>
 8007288:	4602      	mov	r2, r0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800729c:	861a      	strh	r2, [r3, #48]	; 0x30
 800729e:	e002      	b.n	80072a6 <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80072c2:	4b8c      	ldr	r3, [pc, #560]	; (80074f4 <tcp_receive+0x604>)
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	4413      	add	r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8b5b      	ldrh	r3, [r3, #26]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d035      	beq.n	8007348 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d118      	bne.n	8007316 <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fa f9c4 	bl	8001682 <lwip_htonl>
 80072fa:	4602      	mov	r2, r0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007300:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 8007302:	2b00      	cmp	r3, #0
 8007304:	db20      	blt.n	8007348 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	8b5b      	ldrh	r3, [r3, #26]
 800730a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007314:	e018      	b.n	8007348 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa f9af 	bl	8001682 <lwip_htonl>
 8007324:	4602      	mov	r2, r0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	db0b      	blt.n	8007348 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8b5b      	ldrh	r3, [r3, #26]
 8007334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800733e:	e003      	b.n	8007348 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f002 f8fb 	bl	800953c <tcp_send_empty_ack>
 8007346:	e000      	b.n	800734a <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007348:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734e:	2b00      	cmp	r3, #0
 8007350:	d05b      	beq.n	800740a <tcp_receive+0x51a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007356:	4b68      	ldr	r3, [pc, #416]	; (80074f8 <tcp_receive+0x608>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	da54      	bge.n	800740a <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007360:	4b66      	ldr	r3, [pc, #408]	; (80074fc <tcp_receive+0x60c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	b29b      	uxth	r3, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	b29b      	uxth	r3, r3
 8007370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8007374:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800737e:	10db      	asrs	r3, r3, #3
 8007380:	b21b      	sxth	r3, r3
 8007382:	b29b      	uxth	r3, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	b29b      	uxth	r3, r3
 8007388:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007392:	b29a      	uxth	r2, r3
 8007394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007398:	4413      	add	r3, r2
 800739a:	b29b      	uxth	r3, r3
 800739c:	b21a      	sxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80073a2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da05      	bge.n	80073b6 <tcp_receive+0x4c6>
        m = (s16_t) - m;
 80073aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ae:	425b      	negs	r3, r3
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80073b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073c0:	109b      	asrs	r3, r3, #2
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073da:	4413      	add	r3, r2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	b21a      	sxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80073ea:	10db      	asrs	r3, r3, #3
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	b21a      	sxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800740a:	4b3d      	ldr	r3, [pc, #244]	; (8007500 <tcp_receive+0x610>)
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 850f 	beq.w	8007e32 <tcp_receive+0xf42>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	7d1b      	ldrb	r3, [r3, #20]
 8007418:	2b06      	cmp	r3, #6
 800741a:	f200 850a 	bhi.w	8007e32 <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007422:	4b38      	ldr	r3, [pc, #224]	; (8007504 <tcp_receive+0x614>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	f2c0 809e 	blt.w	800756c <tcp_receive+0x67c>
 8007430:	4b33      	ldr	r3, [pc, #204]	; (8007500 <tcp_receive+0x610>)
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	4b33      	ldr	r3, [pc, #204]	; (8007504 <tcp_receive+0x614>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	441a      	add	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	425b      	negs	r3, r3
 8007442:	4413      	add	r3, r2
 8007444:	3b01      	subs	r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	f2c0 8090 	blt.w	800756c <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800744c:	4b2e      	ldr	r3, [pc, #184]	; (8007508 <tcp_receive+0x618>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007456:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <tcp_receive+0x614>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800745e:	4b2a      	ldr	r3, [pc, #168]	; (8007508 <tcp_receive+0x618>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <tcp_receive+0x58e>
 8007466:	4b29      	ldr	r3, [pc, #164]	; (800750c <tcp_receive+0x61c>)
 8007468:	f240 529a 	movw	r2, #1434	; 0x59a
 800746c:	4928      	ldr	r1, [pc, #160]	; (8007510 <tcp_receive+0x620>)
 800746e:	4829      	ldr	r0, [pc, #164]	; (8007514 <tcp_receive+0x624>)
 8007470:	f008 fe2e 	bl	80100d0 <iprintf>
 8007474:	2000      	movs	r0, #0
 8007476:	f008 ff2d 	bl	80102d4 <fflush>
 800747a:	f008 fe72 	bl	8010162 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007484:	4293      	cmp	r3, r2
 8007486:	d90b      	bls.n	80074a0 <tcp_receive+0x5b0>
 8007488:	4b20      	ldr	r3, [pc, #128]	; (800750c <tcp_receive+0x61c>)
 800748a:	f240 529b 	movw	r2, #1435	; 0x59b
 800748e:	4922      	ldr	r1, [pc, #136]	; (8007518 <tcp_receive+0x628>)
 8007490:	4820      	ldr	r0, [pc, #128]	; (8007514 <tcp_receive+0x624>)
 8007492:	f008 fe1d 	bl	80100d0 <iprintf>
 8007496:	2000      	movs	r0, #0
 8007498:	f008 ff1c 	bl	80102d4 <fflush>
 800749c:	f008 fe61 	bl	8010162 <abort>
      off = (u16_t)off32;
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <tcp_receive+0x618>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	891b      	ldrh	r3, [r3, #8]
 80074ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d90b      	bls.n	80074cc <tcp_receive+0x5dc>
 80074b4:	4b15      	ldr	r3, [pc, #84]	; (800750c <tcp_receive+0x61c>)
 80074b6:	f240 529d 	movw	r2, #1437	; 0x59d
 80074ba:	4918      	ldr	r1, [pc, #96]	; (800751c <tcp_receive+0x62c>)
 80074bc:	4815      	ldr	r0, [pc, #84]	; (8007514 <tcp_receive+0x624>)
 80074be:	f008 fe07 	bl	80100d0 <iprintf>
 80074c2:	2000      	movs	r0, #0
 80074c4:	f008 ff06 	bl	80102d4 <fflush>
 80074c8:	f008 fe4b 	bl	8010162 <abort>
      inseg.len -= off;
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <tcp_receive+0x618>)
 80074ce:	891a      	ldrh	r2, [r3, #8]
 80074d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <tcp_receive+0x618>)
 80074da:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <tcp_receive+0x618>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	891a      	ldrh	r2, [r3, #8]
 80074e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 80074ea:	e029      	b.n	8007540 <tcp_receive+0x650>
 80074ec:	080129d0 	.word	0x080129d0
 80074f0:	080129d8 	.word	0x080129d8
 80074f4:	200005d0 	.word	0x200005d0
 80074f8:	200005cc 	.word	0x200005cc
 80074fc:	20001744 	.word	0x20001744
 8007500:	200005d2 	.word	0x200005d2
 8007504:	200005c8 	.word	0x200005c8
 8007508:	200005a4 	.word	0x200005a4
 800750c:	08012678 	.word	0x08012678
 8007510:	080129e0 	.word	0x080129e0
 8007514:	080126b4 	.word	0x080126b4
 8007518:	080129f0 	.word	0x080129f0
 800751c:	08012a00 	.word	0x08012a00
        off -= p->len;
 8007520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007522:	895b      	ldrh	r3, [r3, #10]
 8007524:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007532:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8007534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007536:	2200      	movs	r2, #0
 8007538:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 8007540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007542:	895b      	ldrh	r3, [r3, #10]
 8007544:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007548:	429a      	cmp	r2, r3
 800754a:	d8e9      	bhi.n	8007520 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800754c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007550:	4619      	mov	r1, r3
 8007552:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007554:	f7fc f990 	bl	8003878 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007558:	4b94      	ldr	r3, [pc, #592]	; (80077ac <tcp_receive+0x8bc>)
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007560:	4993      	ldr	r1, [pc, #588]	; (80077b0 <tcp_receive+0x8c0>)
 8007562:	600a      	str	r2, [r1, #0]
 8007564:	4a92      	ldr	r2, [pc, #584]	; (80077b0 <tcp_receive+0x8c0>)
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800756a:	e00d      	b.n	8007588 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800756c:	4b90      	ldr	r3, [pc, #576]	; (80077b0 <tcp_receive+0x8c0>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	da06      	bge.n	8007588 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8b5b      	ldrh	r3, [r3, #26]
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007588:	4b89      	ldr	r3, [pc, #548]	; (80077b0 <tcp_receive+0x8c0>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	f2c0 8448 	blt.w	8007e28 <tcp_receive+0xf38>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80075a0:	441a      	add	r2, r3
 80075a2:	4b83      	ldr	r3, [pc, #524]	; (80077b0 <tcp_receive+0x8c0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	425b      	negs	r3, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f2c0 843b 	blt.w	8007e28 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b6:	4b7e      	ldr	r3, [pc, #504]	; (80077b0 <tcp_receive+0x8c0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	f040 82ab 	bne.w	8007b16 <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80075c0:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <tcp_receive+0x8bc>)
 80075c2:	891c      	ldrh	r4, [r3, #8]
 80075c4:	4b79      	ldr	r3, [pc, #484]	; (80077ac <tcp_receive+0x8bc>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	899b      	ldrh	r3, [r3, #12]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fa f843 	bl	8001658 <lwip_htons>
 80075d2:	4603      	mov	r3, r0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <tcp_receive+0x6f2>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <tcp_receive+0x6f4>
 80075e2:	2300      	movs	r3, #0
 80075e4:	4423      	add	r3, r4
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	4b72      	ldr	r3, [pc, #456]	; (80077b4 <tcp_receive+0x8c4>)
 80075ea:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80075f0:	4b70      	ldr	r3, [pc, #448]	; (80077b4 <tcp_receive+0x8c4>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d27a      	bcs.n	80076ee <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80075f8:	4b6c      	ldr	r3, [pc, #432]	; (80077ac <tcp_receive+0x8bc>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	899b      	ldrh	r3, [r3, #12]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4618      	mov	r0, r3
 8007602:	f7fa f829 	bl	8001658 <lwip_htons>
 8007606:	4603      	mov	r3, r0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01f      	beq.n	8007652 <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007612:	4b66      	ldr	r3, [pc, #408]	; (80077ac <tcp_receive+0x8bc>)
 8007614:	691c      	ldr	r4, [r3, #16]
 8007616:	4b65      	ldr	r3, [pc, #404]	; (80077ac <tcp_receive+0x8bc>)
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	899b      	ldrh	r3, [r3, #12]
 800761c:	b29b      	uxth	r3, r3
 800761e:	b21b      	sxth	r3, r3
 8007620:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007624:	b21d      	sxth	r5, r3
 8007626:	4b61      	ldr	r3, [pc, #388]	; (80077ac <tcp_receive+0x8bc>)
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	899b      	ldrh	r3, [r3, #12]
 800762c:	b29b      	uxth	r3, r3
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa f812 	bl	8001658 <lwip_htons>
 8007634:	4603      	mov	r3, r0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	b29b      	uxth	r3, r3
 800763a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800763e:	b29b      	uxth	r3, r3
 8007640:	4618      	mov	r0, r3
 8007642:	f7fa f809 	bl	8001658 <lwip_htons>
 8007646:	4603      	mov	r3, r0
 8007648:	b21b      	sxth	r3, r3
 800764a:	432b      	orrs	r3, r5
 800764c:	b21b      	sxth	r3, r3
 800764e:	b29b      	uxth	r3, r3
 8007650:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007656:	4b55      	ldr	r3, [pc, #340]	; (80077ac <tcp_receive+0x8bc>)
 8007658:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800765a:	4b54      	ldr	r3, [pc, #336]	; (80077ac <tcp_receive+0x8bc>)
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	899b      	ldrh	r3, [r3, #12]
 8007660:	b29b      	uxth	r3, r3
 8007662:	4618      	mov	r0, r3
 8007664:	f7f9 fff8 	bl	8001658 <lwip_htons>
 8007668:	4603      	mov	r3, r0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <tcp_receive+0x790>
            inseg.len -= 1;
 8007674:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <tcp_receive+0x8bc>)
 8007676:	891b      	ldrh	r3, [r3, #8]
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	4b4b      	ldr	r3, [pc, #300]	; (80077ac <tcp_receive+0x8bc>)
 800767e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007680:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <tcp_receive+0x8bc>)
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4b49      	ldr	r3, [pc, #292]	; (80077ac <tcp_receive+0x8bc>)
 8007686:	891b      	ldrh	r3, [r3, #8]
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fb ffd2 	bl	8003634 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <tcp_receive+0x8bc>)
 8007692:	891c      	ldrh	r4, [r3, #8]
 8007694:	4b45      	ldr	r3, [pc, #276]	; (80077ac <tcp_receive+0x8bc>)
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	899b      	ldrh	r3, [r3, #12]
 800769a:	b29b      	uxth	r3, r3
 800769c:	4618      	mov	r0, r3
 800769e:	f7f9 ffdb 	bl	8001658 <lwip_htons>
 80076a2:	4603      	mov	r3, r0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <tcp_receive+0x7c2>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <tcp_receive+0x7c4>
 80076b2:	2300      	movs	r3, #0
 80076b4:	4423      	add	r3, r4
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <tcp_receive+0x8c4>)
 80076ba:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 80076bc:	4b3d      	ldr	r3, [pc, #244]	; (80077b4 <tcp_receive+0x8c4>)
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b3b      	ldr	r3, [pc, #236]	; (80077b0 <tcp_receive+0x8c0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	441a      	add	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076d0:	440b      	add	r3, r1
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d00b      	beq.n	80076ee <tcp_receive+0x7fe>
 80076d6:	4b38      	ldr	r3, [pc, #224]	; (80077b8 <tcp_receive+0x8c8>)
 80076d8:	f240 52d2 	movw	r2, #1490	; 0x5d2
 80076dc:	4937      	ldr	r1, [pc, #220]	; (80077bc <tcp_receive+0x8cc>)
 80076de:	4838      	ldr	r0, [pc, #224]	; (80077c0 <tcp_receive+0x8d0>)
 80076e0:	f008 fcf6 	bl	80100d0 <iprintf>
 80076e4:	2000      	movs	r0, #0
 80076e6:	f008 fdf5 	bl	80102d4 <fflush>
 80076ea:	f008 fd3a 	bl	8010162 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80ea 	beq.w	80078cc <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80076f8:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <tcp_receive+0x8bc>)
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4618      	mov	r0, r3
 8007702:	f7f9 ffa9 	bl	8001658 <lwip_htons>
 8007706:	4603      	mov	r3, r0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007712:	e00a      	b.n	800772a <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007718:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8007724:	6a38      	ldr	r0, [r7, #32]
 8007726:	f7fd fcb7 	bl	8005098 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <tcp_receive+0x824>
 8007732:	e0cb      	b.n	80078cc <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007738:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800773a:	e050      	b.n	80077de <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800773c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	899b      	ldrh	r3, [r3, #12]
 8007742:	b29b      	uxth	r3, r3
 8007744:	4618      	mov	r0, r3
 8007746:	f7f9 ff87 	bl	8001658 <lwip_htons>
 800774a:	4603      	mov	r3, r0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d03b      	beq.n	80077ce <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007756:	4b15      	ldr	r3, [pc, #84]	; (80077ac <tcp_receive+0x8bc>)
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	899b      	ldrh	r3, [r3, #12]
 800775c:	b29b      	uxth	r3, r3
 800775e:	4618      	mov	r0, r3
 8007760:	f7f9 ff7a 	bl	8001658 <lwip_htons>
 8007764:	4603      	mov	r3, r0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800776c:	2b00      	cmp	r3, #0
 800776e:	d12e      	bne.n	80077ce <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007770:	4b0e      	ldr	r3, [pc, #56]	; (80077ac <tcp_receive+0x8bc>)
 8007772:	691c      	ldr	r4, [r3, #16]
 8007774:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <tcp_receive+0x8bc>)
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	899b      	ldrh	r3, [r3, #12]
 800777a:	b29d      	uxth	r5, r3
 800777c:	2001      	movs	r0, #1
 800777e:	f7f9 ff6b 	bl	8001658 <lwip_htons>
 8007782:	4603      	mov	r3, r0
 8007784:	432b      	orrs	r3, r5
 8007786:	b29b      	uxth	r3, r3
 8007788:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <tcp_receive+0x8bc>)
 800778c:	891c      	ldrh	r4, [r3, #8]
 800778e:	4b07      	ldr	r3, [pc, #28]	; (80077ac <tcp_receive+0x8bc>)
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	899b      	ldrh	r3, [r3, #12]
 8007794:	b29b      	uxth	r3, r3
 8007796:	4618      	mov	r0, r3
 8007798:	f7f9 ff5e 	bl	8001658 <lwip_htons>
 800779c:	4603      	mov	r3, r0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <tcp_receive+0x8d4>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e00c      	b.n	80077c6 <tcp_receive+0x8d6>
 80077ac:	200005a4 	.word	0x200005a4
 80077b0:	200005c8 	.word	0x200005c8
 80077b4:	200005d2 	.word	0x200005d2
 80077b8:	08012678 	.word	0x08012678
 80077bc:	08012a10 	.word	0x08012a10
 80077c0:	080126b4 	.word	0x080126b4
 80077c4:	2300      	movs	r3, #0
 80077c6:	4423      	add	r3, r4
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	4b9f      	ldr	r3, [pc, #636]	; (8007a48 <tcp_receive+0xb58>)
 80077cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80077ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d0:	61fb      	str	r3, [r7, #28]
              next = next->next;
 80077d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 80077d8:	69f8      	ldr	r0, [r7, #28]
 80077da:	f7fd fc5d 	bl	8005098 <tcp_seg_free>
            while (next &&
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00e      	beq.n	8007802 <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80077e4:	4b98      	ldr	r3, [pc, #608]	; (8007a48 <tcp_receive+0xb58>)
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b98      	ldr	r3, [pc, #608]	; (8007a4c <tcp_receive+0xb5c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	441a      	add	r2, r3
 80077f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077f8:	8909      	ldrh	r1, [r1, #8]
 80077fa:	440b      	add	r3, r1
 80077fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da9c      	bge.n	800773c <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05e      	beq.n	80078c6 <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 8007808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	4b8e      	ldr	r3, [pc, #568]	; (8007a48 <tcp_receive+0xb58>)
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	4b8d      	ldr	r3, [pc, #564]	; (8007a4c <tcp_receive+0xb5c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	440b      	add	r3, r1
 800781a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800781c:	2b00      	cmp	r3, #0
 800781e:	da52      	bge.n	80078c6 <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b29a      	uxth	r2, r3
 8007828:	4b88      	ldr	r3, [pc, #544]	; (8007a4c <tcp_receive+0xb5c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	b29a      	uxth	r2, r3
 8007832:	4b87      	ldr	r3, [pc, #540]	; (8007a50 <tcp_receive+0xb60>)
 8007834:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007836:	4b86      	ldr	r3, [pc, #536]	; (8007a50 <tcp_receive+0xb60>)
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	899b      	ldrh	r3, [r3, #12]
 800783c:	b29b      	uxth	r3, r3
 800783e:	4618      	mov	r0, r3
 8007840:	f7f9 ff0a 	bl	8001658 <lwip_htons>
 8007844:	4603      	mov	r3, r0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <tcp_receive+0x96c>
                inseg.len -= 1;
 8007850:	4b7f      	ldr	r3, [pc, #508]	; (8007a50 <tcp_receive+0xb60>)
 8007852:	891b      	ldrh	r3, [r3, #8]
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	4b7d      	ldr	r3, [pc, #500]	; (8007a50 <tcp_receive+0xb60>)
 800785a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800785c:	4b7c      	ldr	r3, [pc, #496]	; (8007a50 <tcp_receive+0xb60>)
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <tcp_receive+0xb60>)
 8007862:	891b      	ldrh	r3, [r3, #8]
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fb fee4 	bl	8003634 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800786c:	4b78      	ldr	r3, [pc, #480]	; (8007a50 <tcp_receive+0xb60>)
 800786e:	891c      	ldrh	r4, [r3, #8]
 8007870:	4b77      	ldr	r3, [pc, #476]	; (8007a50 <tcp_receive+0xb60>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	899b      	ldrh	r3, [r3, #12]
 8007876:	b29b      	uxth	r3, r3
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 feed 	bl	8001658 <lwip_htons>
 800787e:	4603      	mov	r3, r0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <tcp_receive+0x99e>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <tcp_receive+0x9a0>
 800788e:	2300      	movs	r3, #0
 8007890:	4423      	add	r3, r4
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <tcp_receive+0xb58>)
 8007896:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8007898:	4b6b      	ldr	r3, [pc, #428]	; (8007a48 <tcp_receive+0xb58>)
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	4b6b      	ldr	r3, [pc, #428]	; (8007a4c <tcp_receive+0xb5c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	441a      	add	r2, r3
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d00b      	beq.n	80078c6 <tcp_receive+0x9d6>
 80078ae:	4b69      	ldr	r3, [pc, #420]	; (8007a54 <tcp_receive+0xb64>)
 80078b0:	f240 6203 	movw	r2, #1539	; 0x603
 80078b4:	4968      	ldr	r1, [pc, #416]	; (8007a58 <tcp_receive+0xb68>)
 80078b6:	4869      	ldr	r0, [pc, #420]	; (8007a5c <tcp_receive+0xb6c>)
 80078b8:	f008 fc0a 	bl	80100d0 <iprintf>
 80078bc:	2000      	movs	r0, #0
 80078be:	f008 fd09 	bl	80102d4 <fflush>
 80078c2:	f008 fc4e 	bl	8010162 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ca:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <tcp_receive+0xb58>)
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b5e      	ldr	r3, [pc, #376]	; (8007a4c <tcp_receive+0xb5c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	441a      	add	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078e0:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <tcp_receive+0xb58>)
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d20b      	bcs.n	8007900 <tcp_receive+0xa10>
 80078e8:	4b5a      	ldr	r3, [pc, #360]	; (8007a54 <tcp_receive+0xb64>)
 80078ea:	f240 620d 	movw	r2, #1549	; 0x60d
 80078ee:	495c      	ldr	r1, [pc, #368]	; (8007a60 <tcp_receive+0xb70>)
 80078f0:	485a      	ldr	r0, [pc, #360]	; (8007a5c <tcp_receive+0xb6c>)
 80078f2:	f008 fbed 	bl	80100d0 <iprintf>
 80078f6:	2000      	movs	r0, #0
 80078f8:	f008 fcec 	bl	80102d4 <fflush>
 80078fc:	f008 fc31 	bl	8010162 <abort>
        pcb->rcv_wnd -= tcplen;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007904:	4b50      	ldr	r3, [pc, #320]	; (8007a48 <tcp_receive+0xb58>)
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fc fea1 	bl	8004658 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007916:	4b4e      	ldr	r3, [pc, #312]	; (8007a50 <tcp_receive+0xb60>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	891b      	ldrh	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <tcp_receive+0xa3e>
          recv_data = inseg.p;
 8007920:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <tcp_receive+0xb60>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a4f      	ldr	r2, [pc, #316]	; (8007a64 <tcp_receive+0xb74>)
 8007926:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 8007928:	4b49      	ldr	r3, [pc, #292]	; (8007a50 <tcp_receive+0xb60>)
 800792a:	2200      	movs	r2, #0
 800792c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800792e:	4b48      	ldr	r3, [pc, #288]	; (8007a50 <tcp_receive+0xb60>)
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	899b      	ldrh	r3, [r3, #12]
 8007934:	b29b      	uxth	r3, r3
 8007936:	4618      	mov	r0, r3
 8007938:	f7f9 fe8e 	bl	8001658 <lwip_htons>
 800793c:	4603      	mov	r3, r0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80bc 	beq.w	8007ac2 <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800794a:	4b47      	ldr	r3, [pc, #284]	; (8007a68 <tcp_receive+0xb78>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f043 0320 	orr.w	r3, r3, #32
 8007952:	b2da      	uxtb	r2, r3
 8007954:	4b44      	ldr	r3, [pc, #272]	; (8007a68 <tcp_receive+0xb78>)
 8007956:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007958:	e0b3      	b.n	8007ac2 <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a38      	ldr	r2, [pc, #224]	; (8007a4c <tcp_receive+0xb5c>)
 800796a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	891b      	ldrh	r3, [r3, #8]
 8007970:	461c      	mov	r4, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	899b      	ldrh	r3, [r3, #12]
 8007978:	b29b      	uxth	r3, r3
 800797a:	4618      	mov	r0, r3
 800797c:	f7f9 fe6c 	bl	8001658 <lwip_htons>
 8007980:	4603      	mov	r3, r0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <tcp_receive+0xaa0>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <tcp_receive+0xaa2>
 8007990:	2300      	movs	r3, #0
 8007992:	4423      	add	r3, r4
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007998:	441a      	add	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a2:	461c      	mov	r4, r3
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	891b      	ldrh	r3, [r3, #8]
 80079a8:	461d      	mov	r5, r3
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	899b      	ldrh	r3, [r3, #12]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 fe50 	bl	8001658 <lwip_htons>
 80079b8:	4603      	mov	r3, r0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <tcp_receive+0xad8>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <tcp_receive+0xada>
 80079c8:	2300      	movs	r3, #0
 80079ca:	442b      	add	r3, r5
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d20b      	bcs.n	80079e8 <tcp_receive+0xaf8>
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <tcp_receive+0xb64>)
 80079d2:	f240 6232 	movw	r2, #1586	; 0x632
 80079d6:	4925      	ldr	r1, [pc, #148]	; (8007a6c <tcp_receive+0xb7c>)
 80079d8:	4820      	ldr	r0, [pc, #128]	; (8007a5c <tcp_receive+0xb6c>)
 80079da:	f008 fb79 	bl	80100d0 <iprintf>
 80079de:	2000      	movs	r0, #0
 80079e0:	f008 fc78 	bl	80102d4 <fflush>
 80079e4:	f008 fbbd 	bl	8010162 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	891b      	ldrh	r3, [r3, #8]
 80079ec:	461c      	mov	r4, r3
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	899b      	ldrh	r3, [r3, #12]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7f9 fe2e 	bl	8001658 <lwip_htons>
 80079fc:	4603      	mov	r3, r0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <tcp_receive+0xb1c>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <tcp_receive+0xb1e>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	18e1      	adds	r1, r4, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a14:	b28b      	uxth	r3, r1
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fc fe1a 	bl	8004658 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	891b      	ldrh	r3, [r3, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d027      	beq.n	8007a7e <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <tcp_receive+0xb74>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01c      	beq.n	8007a70 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <tcp_receive+0xb74>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fc f86b 	bl	8003b1c <pbuf_cat>
 8007a46:	e017      	b.n	8007a78 <tcp_receive+0xb88>
 8007a48:	200005d2 	.word	0x200005d2
 8007a4c:	200005c8 	.word	0x200005c8
 8007a50:	200005a4 	.word	0x200005a4
 8007a54:	08012678 	.word	0x08012678
 8007a58:	08012a48 	.word	0x08012a48
 8007a5c:	080126b4 	.word	0x080126b4
 8007a60:	08012a84 	.word	0x08012a84
 8007a64:	200005d8 	.word	0x200005d8
 8007a68:	200005d5 	.word	0x200005d5
 8007a6c:	08012aa4 	.word	0x08012aa4
            } else {
              recv_data = cseg->p;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a73      	ldr	r2, [pc, #460]	; (8007c44 <tcp_receive+0xd54>)
 8007a76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	899b      	ldrh	r3, [r3, #12]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f9 fde6 	bl	8001658 <lwip_htons>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007a98:	4b6b      	ldr	r3, [pc, #428]	; (8007c48 <tcp_receive+0xd58>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f043 0320 	orr.w	r3, r3, #32
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	4b69      	ldr	r3, [pc, #420]	; (8007c48 <tcp_receive+0xd58>)
 8007aa4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7d1b      	ldrb	r3, [r3, #20]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d102      	bne.n	8007ab4 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8007abc:	69b8      	ldr	r0, [r7, #24]
 8007abe:	f7fd faeb 	bl	8005098 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f43f af3f 	beq.w	800795a <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8b5b      	ldrh	r3, [r3, #26]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <tcp_receive+0xc16>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8b5b      	ldrh	r3, [r3, #26]
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	835a      	strh	r2, [r3, #26]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	8b5b      	ldrh	r3, [r3, #26]
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007b04:	e194      	b.n	8007e30 <tcp_receive+0xf40>
        tcp_ack(pcb);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8b5b      	ldrh	r3, [r3, #26]
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007b14:	e18c      	b.n	8007e30 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007b1e:	484b      	ldr	r0, [pc, #300]	; (8007c4c <tcp_receive+0xd5c>)
 8007b20:	f7fd fad2 	bl	80050c8 <tcp_seg_copy>
 8007b24:	4602      	mov	r2, r0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	675a      	str	r2, [r3, #116]	; 0x74
 8007b2a:	e179      	b.n	8007e20 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b36:	e161      	b.n	8007dfc <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	4b44      	ldr	r3, [pc, #272]	; (8007c50 <tcp_receive+0xd60>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d122      	bne.n	8007b8c <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <tcp_receive+0xd5c>)
 8007b48:	891a      	ldrh	r2, [r3, #8]
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	891b      	ldrh	r3, [r3, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	f240 8159 	bls.w	8007e06 <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 8007b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8156 	beq.w	8007e0a <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007b5e:	483b      	ldr	r0, [pc, #236]	; (8007c4c <tcp_receive+0xd5c>)
 8007b60:	f7fd fab2 	bl	80050c8 <tcp_seg_copy>
 8007b64:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8150 	beq.w	8007e0e <tcp_receive+0xf1e>
                  if (prev != NULL) {
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <tcp_receive+0xc8c>
                    prev->next = cseg;
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff f8a1 	bl	8006ccc <tcp_oos_insert_segment>
                }
                break;
 8007b8a:	e140      	b.n	8007e0e <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d117      	bne.n	8007bc2 <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007b92:	4b2f      	ldr	r3, [pc, #188]	; (8007c50 <tcp_receive+0xd60>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da58      	bge.n	8007c54 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007ba2:	482a      	ldr	r0, [pc, #168]	; (8007c4c <tcp_receive+0xd5c>)
 8007ba4:	f7fd fa90 	bl	80050c8 <tcp_seg_copy>
 8007ba8:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 8130 	beq.w	8007e12 <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8007bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bba:	6978      	ldr	r0, [r7, #20]
 8007bbc:	f7ff f886 	bl	8006ccc <tcp_oos_insert_segment>
                  }
                  break;
 8007bc0:	e127      	b.n	8007e12 <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <tcp_receive+0xd60>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db3f      	blt.n	8007c54 <tcp_receive+0xd64>
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <tcp_receive+0xd60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	db36      	blt.n	8007c54 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007be6:	4819      	ldr	r0, [pc, #100]	; (8007c4c <tcp_receive+0xd5c>)
 8007be8:	f7fd fa6e 	bl	80050c8 <tcp_seg_copy>
 8007bec:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8110 	beq.w	8007e16 <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007bf6:	4b16      	ldr	r3, [pc, #88]	; (8007c50 <tcp_receive+0xd60>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c02:	8909      	ldrh	r1, [r1, #8]
 8007c04:	440b      	add	r3, r1
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da12      	bge.n	8007c32 <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <tcp_receive+0xd60>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	891b      	ldrh	r3, [r3, #8]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fb fd01 	bl	8003634 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c3a:	6938      	ldr	r0, [r7, #16]
 8007c3c:	f7ff f846 	bl	8006ccc <tcp_oos_insert_segment>
                  }
                  break;
 8007c40:	e0e9      	b.n	8007e16 <tcp_receive+0xf26>
 8007c42:	bf00      	nop
 8007c44:	200005d8 	.word	0x200005d8
 8007c48:	200005d5 	.word	0x200005d5
 8007c4c:	200005a4 	.word	0x200005a4
 8007c50:	200005c8 	.word	0x200005c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 80ca 	bne.w	8007df6 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	4b81      	ldr	r3, [pc, #516]	; (8007e70 <tcp_receive+0xf80>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f280 80c1 	bge.w	8007df6 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f9 fceb 	bl	8001658 <lwip_htons>
 8007c82:	4603      	mov	r3, r0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 80c5 	bne.w	8007e1a <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007c90:	4878      	ldr	r0, [pc, #480]	; (8007e74 <tcp_receive+0xf84>)
 8007c92:	f7fd fa19 	bl	80050c8 <tcp_seg_copy>
 8007c96:	4602      	mov	r2, r0
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80bc 	beq.w	8007e1e <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007ca6:	4b72      	ldr	r3, [pc, #456]	; (8007e70 <tcp_receive+0xf80>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb2:	8909      	ldrh	r1, [r1, #8]
 8007cb4:	440b      	add	r3, r1
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da12      	bge.n	8007ce2 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007cbc:	4b6c      	ldr	r3, [pc, #432]	; (8007e70 <tcp_receive+0xf80>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd8:	891b      	ldrh	r3, [r3, #8]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fb fca9 	bl	8003634 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007cea:	441a      	add	r2, r3
 8007cec:	4b62      	ldr	r3, [pc, #392]	; (8007e78 <tcp_receive+0xf88>)
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4b5f      	ldr	r3, [pc, #380]	; (8007e70 <tcp_receive+0xf80>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	440b      	add	r3, r1
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f280 808f 	bge.w	8007e1e <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	899b      	ldrh	r3, [r3, #12]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7f9 fca4 	bl	8001658 <lwip_htons>
 8007d10:	4603      	mov	r3, r0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d022      	beq.n	8007d62 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691c      	ldr	r4, [r3, #16]
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	899b      	ldrh	r3, [r3, #12]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d32:	b21d      	sxth	r5, r3
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	899b      	ldrh	r3, [r3, #12]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7f9 fc8a 	bl	8001658 <lwip_htons>
 8007d44:	4603      	mov	r3, r0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f9 fc81 	bl	8001658 <lwip_htons>
 8007d56:	4603      	mov	r3, r0
 8007d58:	b21b      	sxth	r3, r3
 8007d5a:	432b      	orrs	r3, r5
 8007d5c:	b21b      	sxth	r3, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d6a:	b291      	uxth	r1, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d70:	440a      	add	r2, r1
 8007d72:	b291      	uxth	r1, r2
 8007d74:	4a3e      	ldr	r2, [pc, #248]	; (8007e70 <tcp_receive+0xf80>)
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	1a8a      	subs	r2, r1, r2
 8007d7c:	b292      	uxth	r2, r2
 8007d7e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	891b      	ldrh	r3, [r3, #8]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fb fc50 	bl	8003634 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	891c      	ldrh	r4, [r3, #8]
 8007d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	899b      	ldrh	r3, [r3, #12]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f9 fc57 	bl	8001658 <lwip_htons>
 8007daa:	4603      	mov	r3, r0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <tcp_receive+0xeca>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <tcp_receive+0xecc>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4423      	add	r3, r4
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <tcp_receive+0xf88>)
 8007dc2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <tcp_receive+0xf88>)
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b29      	ldr	r3, [pc, #164]	; (8007e70 <tcp_receive+0xf80>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	441a      	add	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007dd8:	440b      	add	r3, r1
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d01f      	beq.n	8007e1e <tcp_receive+0xf2e>
 8007dde:	4b27      	ldr	r3, [pc, #156]	; (8007e7c <tcp_receive+0xf8c>)
 8007de0:	f240 7209 	movw	r2, #1801	; 0x709
 8007de4:	4926      	ldr	r1, [pc, #152]	; (8007e80 <tcp_receive+0xf90>)
 8007de6:	4827      	ldr	r0, [pc, #156]	; (8007e84 <tcp_receive+0xf94>)
 8007de8:	f008 f972 	bl	80100d0 <iprintf>
 8007dec:	2000      	movs	r0, #0
 8007dee:	f008 fa71 	bl	80102d4 <fflush>
 8007df2:	f008 f9b6 	bl	8010162 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f47f ae9a 	bne.w	8007b38 <tcp_receive+0xc48>
 8007e04:	e00c      	b.n	8007e20 <tcp_receive+0xf30>
                break;
 8007e06:	bf00      	nop
 8007e08:	e00a      	b.n	8007e20 <tcp_receive+0xf30>
                  break;
 8007e0a:	bf00      	nop
 8007e0c:	e008      	b.n	8007e20 <tcp_receive+0xf30>
                break;
 8007e0e:	bf00      	nop
 8007e10:	e006      	b.n	8007e20 <tcp_receive+0xf30>
                  break;
 8007e12:	bf00      	nop
 8007e14:	e004      	b.n	8007e20 <tcp_receive+0xf30>
                  break;
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <tcp_receive+0xf30>
                  break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8007e1e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fb8b 	bl	800953c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8007e26:	e003      	b.n	8007e30 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fb87 	bl	800953c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007e2e:	e01b      	b.n	8007e68 <tcp_receive+0xf78>
 8007e30:	e01a      	b.n	8007e68 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007e32:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <tcp_receive+0xf80>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	db0b      	blt.n	8007e58 <tcp_receive+0xf68>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007e48:	441a      	add	r2, r3
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <tcp_receive+0xf80>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	425b      	negs	r3, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da07      	bge.n	8007e68 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8b5b      	ldrh	r3, [r3, #26]
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8007e66:	e7ff      	b.n	8007e68 <tcp_receive+0xf78>
 8007e68:	bf00      	nop
 8007e6a:	3750      	adds	r7, #80	; 0x50
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e70:	200005c8 	.word	0x200005c8
 8007e74:	200005a4 	.word	0x200005a4
 8007e78:	200005d2 	.word	0x200005d2
 8007e7c:	08012678 	.word	0x08012678
 8007e80:	08012a10 	.word	0x08012a10
 8007e84:	080126b4 	.word	0x080126b4

08007e88 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8007e8e:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <tcp_get_next_optbyte+0x5c>)
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	b291      	uxth	r1, r2
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <tcp_get_next_optbyte+0x5c>)
 8007e98:	8011      	strh	r1, [r2, #0]
 8007e9a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8007e9c:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <tcp_get_next_optbyte+0x60>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <tcp_get_next_optbyte+0x26>
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <tcp_get_next_optbyte+0x64>)
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d208      	bcs.n	8007ec0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <tcp_get_next_optbyte+0x68>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	4413      	add	r3, r2
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	e00b      	b.n	8007ed8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	4b09      	ldr	r3, [pc, #36]	; (8007eec <tcp_get_next_optbyte+0x64>)
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <tcp_get_next_optbyte+0x60>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	797b      	ldrb	r3, [r7, #5]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	200005c4 	.word	0x200005c4
 8007ee8:	200005c0 	.word	0x200005c0
 8007eec:	200005be 	.word	0x200005be
 8007ef0:	200005b8 	.word	0x200005b8

08007ef4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <tcp_parseopt+0x26>
 8007f02:	4b33      	ldr	r3, [pc, #204]	; (8007fd0 <tcp_parseopt+0xdc>)
 8007f04:	f240 728d 	movw	r2, #1933	; 0x78d
 8007f08:	4932      	ldr	r1, [pc, #200]	; (8007fd4 <tcp_parseopt+0xe0>)
 8007f0a:	4833      	ldr	r0, [pc, #204]	; (8007fd8 <tcp_parseopt+0xe4>)
 8007f0c:	f008 f8e0 	bl	80100d0 <iprintf>
 8007f10:	2000      	movs	r0, #0
 8007f12:	f008 f9df 	bl	80102d4 <fflush>
 8007f16:	f008 f924 	bl	8010162 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007f1a:	4b30      	ldr	r3, [pc, #192]	; (8007fdc <tcp_parseopt+0xe8>)
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d053      	beq.n	8007fca <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <tcp_parseopt+0xec>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e043      	b.n	8007fb2 <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 8007f2a:	f7ff ffad 	bl	8007e88 <tcp_get_next_optbyte>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d03c      	beq.n	8007fb2 <tcp_parseopt+0xbe>
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d002      	beq.n	8007f42 <tcp_parseopt+0x4e>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03f      	beq.n	8007fc0 <tcp_parseopt+0xcc>
 8007f40:	e026      	b.n	8007f90 <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007f42:	f7ff ffa1 	bl	8007e88 <tcp_get_next_optbyte>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d13b      	bne.n	8007fc4 <tcp_parseopt+0xd0>
 8007f4c:	4b24      	ldr	r3, [pc, #144]	; (8007fe0 <tcp_parseopt+0xec>)
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	3302      	adds	r3, #2
 8007f52:	4a22      	ldr	r2, [pc, #136]	; (8007fdc <tcp_parseopt+0xe8>)
 8007f54:	8812      	ldrh	r2, [r2, #0]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	dc34      	bgt.n	8007fc4 <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8007f5a:	f7ff ff95 	bl	8007e88 <tcp_get_next_optbyte>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8007f66:	f7ff ff8f 	bl	8007e88 <tcp_get_next_optbyte>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	89bb      	ldrh	r3, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007f74:	89bb      	ldrh	r3, [r7, #12]
 8007f76:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007f7a:	d804      	bhi.n	8007f86 <tcp_parseopt+0x92>
 8007f7c:	89bb      	ldrh	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <tcp_parseopt+0x92>
 8007f82:	89ba      	ldrh	r2, [r7, #12]
 8007f84:	e001      	b.n	8007f8a <tcp_parseopt+0x96>
 8007f86:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8007f8e:	e010      	b.n	8007fb2 <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8007f90:	f7ff ff7a 	bl	8007e88 <tcp_get_next_optbyte>
 8007f94:	4603      	mov	r3, r0
 8007f96:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d914      	bls.n	8007fc8 <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <tcp_parseopt+0xec>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b02      	subs	r3, #2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <tcp_parseopt+0xec>)
 8007fb0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <tcp_parseopt+0xec>)
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <tcp_parseopt+0xe8>)
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d3b5      	bcc.n	8007f2a <tcp_parseopt+0x36>
 8007fbe:	e004      	b.n	8007fca <tcp_parseopt+0xd6>
          return;
 8007fc0:	bf00      	nop
 8007fc2:	e002      	b.n	8007fca <tcp_parseopt+0xd6>
            return;
 8007fc4:	bf00      	nop
 8007fc6:	e000      	b.n	8007fca <tcp_parseopt+0xd6>
            return;
 8007fc8:	bf00      	nop
      }
    }
  }
}
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	08012678 	.word	0x08012678
 8007fd4:	08012ac8 	.word	0x08012ac8
 8007fd8:	080126b4 	.word	0x080126b4
 8007fdc:	200005bc 	.word	0x200005bc
 8007fe0:	200005c4 	.word	0x200005c4

08007fe4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <tcp_trigger_input_pcb_close+0x1c>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f043 0310 	orr.w	r3, r3, #16
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	4b03      	ldr	r3, [pc, #12]	; (8008000 <tcp_trigger_input_pcb_close+0x1c>)
 8007ff4:	701a      	strb	r2, [r3, #0]
}
 8007ff6:	bf00      	nop
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	200005d5 	.word	0x200005d5

08008004 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <tcp_route+0x28>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	7a1b      	ldrb	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d006      	beq.n	800802c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	7a1b      	ldrb	r3, [r3, #8]
 8008022:	4618      	mov	r0, r3
 8008024:	f7fb f96a 	bl	80032fc <netif_get_by_index>
 8008028:	4603      	mov	r3, r0
 800802a:	e003      	b.n	8008034 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7f9 fe9b 	bl	8001d68 <ip4_route>
 8008032:	4603      	mov	r3, r0
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4613      	mov	r3, r2
 800804a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <tcp_create_segment+0x2c>
 8008052:	4b4e      	ldr	r3, [pc, #312]	; (800818c <tcp_create_segment+0x150>)
 8008054:	22a6      	movs	r2, #166	; 0xa6
 8008056:	494e      	ldr	r1, [pc, #312]	; (8008190 <tcp_create_segment+0x154>)
 8008058:	484e      	ldr	r0, [pc, #312]	; (8008194 <tcp_create_segment+0x158>)
 800805a:	f008 f839 	bl	80100d0 <iprintf>
 800805e:	2000      	movs	r0, #0
 8008060:	f008 f938 	bl	80102d4 <fflush>
 8008064:	f008 f87d 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <tcp_create_segment+0x48>
 800806e:	4b47      	ldr	r3, [pc, #284]	; (800818c <tcp_create_segment+0x150>)
 8008070:	22a7      	movs	r2, #167	; 0xa7
 8008072:	4949      	ldr	r1, [pc, #292]	; (8008198 <tcp_create_segment+0x15c>)
 8008074:	4847      	ldr	r0, [pc, #284]	; (8008194 <tcp_create_segment+0x158>)
 8008076:	f008 f82b 	bl	80100d0 <iprintf>
 800807a:	2000      	movs	r0, #0
 800807c:	f008 f92a 	bl	80102d4 <fflush>
 8008080:	f008 f86f 	bl	8010162 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <tcp_create_segment+0x58>
 8008090:	2304      	movs	r3, #4
 8008092:	e000      	b.n	8008096 <tcp_create_segment+0x5a>
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008098:	2002      	movs	r0, #2
 800809a:	f7fa fe03 	bl	8002ca4 <memp_malloc>
 800809e:	6138      	str	r0, [r7, #16]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f7fb fc70 	bl	800398c <pbuf_free>
    return NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e069      	b.n	8008184 <tcp_create_segment+0x148>
  }
  seg->flags = optflags;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80080b6:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	891a      	ldrh	r2, [r3, #8]
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d20a      	bcs.n	80080e6 <tcp_create_segment+0xaa>
 80080d0:	4b2e      	ldr	r3, [pc, #184]	; (800818c <tcp_create_segment+0x150>)
 80080d2:	22b3      	movs	r2, #179	; 0xb3
 80080d4:	4931      	ldr	r1, [pc, #196]	; (800819c <tcp_create_segment+0x160>)
 80080d6:	482f      	ldr	r0, [pc, #188]	; (8008194 <tcp_create_segment+0x158>)
 80080d8:	f007 fffa 	bl	80100d0 <iprintf>
 80080dc:	2000      	movs	r0, #0
 80080de:	f008 f8f9 	bl	80102d4 <fflush>
 80080e2:	f008 f83e 	bl	8010162 <abort>
  seg->len = p->tot_len - optlen;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	891a      	ldrh	r2, [r3, #8]
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2200      	movs	r2, #0
 80080fa:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80080fc:	2114      	movs	r1, #20
 80080fe:	68b8      	ldr	r0, [r7, #8]
 8008100:	f7fb fbaa 	bl	8003858 <pbuf_add_header>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <tcp_create_segment+0xd8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800810a:	6938      	ldr	r0, [r7, #16]
 800810c:	f7fc ffc4 	bl	8005098 <tcp_seg_free>
    return NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	e037      	b.n	8008184 <tcp_create_segment+0x148>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	691c      	ldr	r4, [r3, #16]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8adb      	ldrh	r3, [r3, #22]
 8008126:	4618      	mov	r0, r3
 8008128:	f7f9 fa96 	bl	8001658 <lwip_htons>
 800812c:	4603      	mov	r3, r0
 800812e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	691c      	ldr	r4, [r3, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8b1b      	ldrh	r3, [r3, #24]
 8008138:	4618      	mov	r0, r3
 800813a:	f7f9 fa8d 	bl	8001658 <lwip_htons>
 800813e:	4603      	mov	r3, r0
 8008140:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	691c      	ldr	r4, [r3, #16]
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f7f9 fa9b 	bl	8001682 <lwip_htonl>
 800814c:	4603      	mov	r3, r0
 800814e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	691c      	ldr	r4, [r3, #16]
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	089b      	lsrs	r3, r3, #2
 8008158:	b2db      	uxtb	r3, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	3305      	adds	r3, #5
 800815e:	b29b      	uxth	r3, r3
 8008160:	031b      	lsls	r3, r3, #12
 8008162:	b29a      	uxth	r2, r3
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	b29b      	uxth	r3, r3
 8008168:	4313      	orrs	r3, r2
 800816a:	b29b      	uxth	r3, r3
 800816c:	4618      	mov	r0, r3
 800816e:	f7f9 fa73 	bl	8001658 <lwip_htons>
 8008172:	4603      	mov	r3, r0
 8008174:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2200      	movs	r2, #0
 800817c:	749a      	strb	r2, [r3, #18]
 800817e:	2200      	movs	r2, #0
 8008180:	74da      	strb	r2, [r3, #19]
  return seg;
 8008182:	693b      	ldr	r3, [r7, #16]
}
 8008184:	4618      	mov	r0, r3
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}
 800818c:	08012ae4 	.word	0x08012ae4
 8008190:	08012b08 	.word	0x08012b08
 8008194:	08012b28 	.word	0x08012b28
 8008198:	08012b50 	.word	0x08012b50
 800819c:	08012b74 	.word	0x08012b74

080081a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <tcp_split_unsent_seg+0x36>
 80081be:	4ba3      	ldr	r3, [pc, #652]	; (800844c <tcp_split_unsent_seg+0x2ac>)
 80081c0:	f240 324e 	movw	r2, #846	; 0x34e
 80081c4:	49a2      	ldr	r1, [pc, #648]	; (8008450 <tcp_split_unsent_seg+0x2b0>)
 80081c6:	48a3      	ldr	r0, [pc, #652]	; (8008454 <tcp_split_unsent_seg+0x2b4>)
 80081c8:	f007 ff82 	bl	80100d0 <iprintf>
 80081cc:	2000      	movs	r0, #0
 80081ce:	f008 f881 	bl	80102d4 <fflush>
 80081d2:	f007 ffc6 	bl	8010162 <abort>

  useg = pcb->unsent;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081da:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	e12d      	b.n	8008444 <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80081ee:	4b97      	ldr	r3, [pc, #604]	; (800844c <tcp_split_unsent_seg+0x2ac>)
 80081f0:	f240 3256 	movw	r2, #854	; 0x356
 80081f4:	4998      	ldr	r1, [pc, #608]	; (8008458 <tcp_split_unsent_seg+0x2b8>)
 80081f6:	4897      	ldr	r0, [pc, #604]	; (8008454 <tcp_split_unsent_seg+0x2b4>)
 80081f8:	f007 ff6a 	bl	80100d0 <iprintf>
 80081fc:	2000      	movs	r0, #0
 80081fe:	f008 f869 	bl	80102d4 <fflush>
 8008202:	f007 ffae 	bl	8010162 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	891b      	ldrh	r3, [r3, #8]
 800820a:	887a      	ldrh	r2, [r7, #2]
 800820c:	429a      	cmp	r2, r3
 800820e:	d301      	bcc.n	8008214 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e117      	b.n	8008444 <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008218:	887a      	ldrh	r2, [r7, #2]
 800821a:	429a      	cmp	r2, r3
 800821c:	d90b      	bls.n	8008236 <tcp_split_unsent_seg+0x96>
 800821e:	4b8b      	ldr	r3, [pc, #556]	; (800844c <tcp_split_unsent_seg+0x2ac>)
 8008220:	f240 325e 	movw	r2, #862	; 0x35e
 8008224:	498d      	ldr	r1, [pc, #564]	; (800845c <tcp_split_unsent_seg+0x2bc>)
 8008226:	488b      	ldr	r0, [pc, #556]	; (8008454 <tcp_split_unsent_seg+0x2b4>)
 8008228:	f007 ff52 	bl	80100d0 <iprintf>
 800822c:	2000      	movs	r0, #0
 800822e:	f008 f851 	bl	80102d4 <fflush>
 8008232:	f007 ff96 	bl	8010162 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	891b      	ldrh	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <tcp_split_unsent_seg+0xb6>
 800823e:	4b83      	ldr	r3, [pc, #524]	; (800844c <tcp_split_unsent_seg+0x2ac>)
 8008240:	f240 325f 	movw	r2, #863	; 0x35f
 8008244:	4986      	ldr	r1, [pc, #536]	; (8008460 <tcp_split_unsent_seg+0x2c0>)
 8008246:	4883      	ldr	r0, [pc, #524]	; (8008454 <tcp_split_unsent_seg+0x2b4>)
 8008248:	f007 ff42 	bl	80100d0 <iprintf>
 800824c:	2000      	movs	r0, #0
 800824e:	f008 f841 	bl	80102d4 <fflush>
 8008252:	f007 ff86 	bl	8010162 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	7b1b      	ldrb	r3, [r3, #12]
 800825a:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <tcp_split_unsent_seg+0xca>
 8008266:	2304      	movs	r3, #4
 8008268:	e000      	b.n	800826c <tcp_split_unsent_seg+0xcc>
 800826a:	2300      	movs	r3, #0
 800826c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	891a      	ldrh	r2, [r3, #8]
 8008272:	887b      	ldrh	r3, [r7, #2]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	b29a      	uxth	r2, r3
 800827c:	89bb      	ldrh	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	b29b      	uxth	r3, r3
 8008282:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008286:	4619      	mov	r1, r3
 8008288:	2036      	movs	r0, #54	; 0x36
 800828a:	f7fb f8e1 	bl	8003450 <pbuf_alloc>
 800828e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80bc 	beq.w	8008410 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	891a      	ldrh	r2, [r3, #8]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	891b      	ldrh	r3, [r3, #8]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	887b      	ldrh	r3, [r7, #2]
 80082a8:	4413      	add	r3, r2
 80082aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6858      	ldr	r0, [r3, #4]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	18d1      	adds	r1, r2, r3
 80082b8:	897b      	ldrh	r3, [r7, #10]
 80082ba:	89ba      	ldrh	r2, [r7, #12]
 80082bc:	f7fb fdd6 	bl	8003e6c <pbuf_copy_partial>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	89bb      	ldrh	r3, [r7, #12]
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f040 80a4 	bne.w	8008414 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	899b      	ldrh	r3, [r3, #12]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f9 f9bf 	bl	8001658 <lwip_htons>
 80082da:	4603      	mov	r3, r0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e2:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80082e4:	2300      	movs	r3, #0
 80082e6:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	f023 0308 	bic.w	r3, r3, #8
 80082f8:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 80082fa:	7dbb      	ldrb	r3, [r7, #22]
 80082fc:	f043 0308 	orr.w	r3, r3, #8
 8008300:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	4618      	mov	r0, r3
 8008324:	f7f9 f9ad 	bl	8001682 <lwip_htonl>
 8008328:	4602      	mov	r2, r0
 800832a:	887b      	ldrh	r3, [r7, #2]
 800832c:	18d1      	adds	r1, r2, r3
 800832e:	7dba      	ldrb	r2, [r7, #22]
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	460b      	mov	r3, r1
 8008336:	69b9      	ldr	r1, [r7, #24]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff fe7f 	bl	800803c <tcp_create_segment>
 800833e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 8008346:	2300      	movs	r3, #0
 8008348:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800834a:	e064      	b.n	8008416 <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fb fb9d 	bl	8003a90 <pbuf_clen>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	b29a      	uxth	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6858      	ldr	r0, [r3, #4]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	891a      	ldrh	r2, [r3, #8]
 8008374:	89bb      	ldrh	r3, [r7, #12]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	b29b      	uxth	r3, r3
 800837a:	4619      	mov	r1, r3
 800837c:	f7fb f95a 	bl	8003634 <pbuf_realloc>
  useg->len -= remainder;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	891a      	ldrh	r2, [r3, #8]
 8008384:	89bb      	ldrh	r3, [r7, #12]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	b29a      	uxth	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	691c      	ldr	r4, [r3, #16]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	899b      	ldrh	r3, [r3, #12]
 8008398:	b29d      	uxth	r5, r3
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	b29b      	uxth	r3, r3
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f9 f95a 	bl	8001658 <lwip_htons>
 80083a4:	4603      	mov	r3, r0
 80083a6:	432b      	orrs	r3, r5
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2200      	movs	r2, #0
 80083b0:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fb fb6a 	bl	8003a90 <pbuf_clen>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80083c6:	4413      	add	r3, r2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fb fb5b 	bl	8003a90 <pbuf_clen>
 80083da:	4603      	mov	r3, r0
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80083e4:	4413      	add	r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	e019      	b.n	8008444 <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <tcp_split_unsent_seg+0x276>
    goto memerr;
 8008414:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <tcp_split_unsent_seg+0x294>
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <tcp_split_unsent_seg+0x2ac>)
 800841e:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8008422:	4910      	ldr	r1, [pc, #64]	; (8008464 <tcp_split_unsent_seg+0x2c4>)
 8008424:	480b      	ldr	r0, [pc, #44]	; (8008454 <tcp_split_unsent_seg+0x2b4>)
 8008426:	f007 fe53 	bl	80100d0 <iprintf>
 800842a:	2000      	movs	r0, #0
 800842c:	f007 ff52 	bl	80102d4 <fflush>
 8008430:	f007 fe97 	bl	8010162 <abort>
  if (p != NULL) {
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 800843a:	69b8      	ldr	r0, [r7, #24]
 800843c:	f7fb faa6 	bl	800398c <pbuf_free>
  }

  return ERR_MEM;
 8008440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bdb0      	pop	{r4, r5, r7, pc}
 800844c:	08012ae4 	.word	0x08012ae4
 8008450:	08012ec4 	.word	0x08012ec4
 8008454:	08012b28 	.word	0x08012b28
 8008458:	08012ee8 	.word	0x08012ee8
 800845c:	08012f0c 	.word	0x08012f0c
 8008460:	08012f1c 	.word	0x08012f1c
 8008464:	08012f2c 	.word	0x08012f2c

08008468 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008468:	b5b0      	push	{r4, r5, r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <tcp_send_fin+0x26>
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <tcp_send_fin+0x9c>)
 8008478:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800847c:	4922      	ldr	r1, [pc, #136]	; (8008508 <tcp_send_fin+0xa0>)
 800847e:	4823      	ldr	r0, [pc, #140]	; (800850c <tcp_send_fin+0xa4>)
 8008480:	f007 fe26 	bl	80100d0 <iprintf>
 8008484:	2000      	movs	r0, #0
 8008486:	f007 ff25 	bl	80102d4 <fflush>
 800848a:	f007 fe6a 	bl	8010162 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d02d      	beq.n	80084f2 <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e002      	b.n	80084a4 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f8      	bne.n	800849e <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	899b      	ldrh	r3, [r3, #12]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f9 f8cf 	bl	8001658 <lwip_htons>
 80084ba:	4603      	mov	r3, r0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d115      	bne.n	80084f2 <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691c      	ldr	r4, [r3, #16]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	899b      	ldrh	r3, [r3, #12]
 80084d0:	b29d      	uxth	r5, r3
 80084d2:	2001      	movs	r0, #1
 80084d4:	f7f9 f8c0 	bl	8001658 <lwip_htons>
 80084d8:	4603      	mov	r3, r0
 80084da:	432b      	orrs	r3, r5
 80084dc:	b29b      	uxth	r3, r3
 80084de:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8b5b      	ldrh	r3, [r3, #26]
 80084e4:	f043 0320 	orr.w	r3, r3, #32
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e004      	b.n	80084fc <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80084f2:	2101      	movs	r1, #1
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f80b 	bl	8008510 <tcp_enqueue_flags>
 80084fa:	4603      	mov	r3, r0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bdb0      	pop	{r4, r5, r7, pc}
 8008504:	08012ae4 	.word	0x08012ae4
 8008508:	08012f38 	.word	0x08012f38
 800850c:	08012b28 	.word	0x08012b28

08008510 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af02      	add	r7, sp, #8
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <tcp_enqueue_flags+0x36>
 800852e:	4b6e      	ldr	r3, [pc, #440]	; (80086e8 <tcp_enqueue_flags+0x1d8>)
 8008530:	f240 4214 	movw	r2, #1044	; 0x414
 8008534:	496d      	ldr	r1, [pc, #436]	; (80086ec <tcp_enqueue_flags+0x1dc>)
 8008536:	486e      	ldr	r0, [pc, #440]	; (80086f0 <tcp_enqueue_flags+0x1e0>)
 8008538:	f007 fdca 	bl	80100d0 <iprintf>
 800853c:	2000      	movs	r0, #0
 800853e:	f007 fec9 	bl	80102d4 <fflush>
 8008542:	f007 fe0e 	bl	8010162 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <tcp_enqueue_flags+0x54>
 800854c:	4b66      	ldr	r3, [pc, #408]	; (80086e8 <tcp_enqueue_flags+0x1d8>)
 800854e:	f240 4215 	movw	r2, #1045	; 0x415
 8008552:	4968      	ldr	r1, [pc, #416]	; (80086f4 <tcp_enqueue_flags+0x1e4>)
 8008554:	4866      	ldr	r0, [pc, #408]	; (80086f0 <tcp_enqueue_flags+0x1e0>)
 8008556:	f007 fdbb 	bl	80100d0 <iprintf>
 800855a:	2000      	movs	r0, #0
 800855c:	f007 feba 	bl	80102d4 <fflush>
 8008560:	f007 fdff 	bl	8010162 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800856e:	2301      	movs	r3, #1
 8008570:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008572:	7ffb      	ldrb	r3, [r7, #31]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <tcp_enqueue_flags+0x70>
 800857c:	2304      	movs	r3, #4
 800857e:	e000      	b.n	8008582 <tcp_enqueue_flags+0x72>
 8008580:	2300      	movs	r3, #0
 8008582:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f44f 7220 	mov.w	r2, #640	; 0x280
 800858c:	4619      	mov	r1, r3
 800858e:	2036      	movs	r0, #54	; 0x36
 8008590:	f7fa ff5e 	bl	8003450 <pbuf_alloc>
 8008594:	6138      	str	r0, [r7, #16]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <tcp_enqueue_flags+0xa0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8b5b      	ldrh	r3, [r3, #26]
 80085a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	e097      	b.n	80086e0 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	895a      	ldrh	r2, [r3, #10]
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d20b      	bcs.n	80085d4 <tcp_enqueue_flags+0xc4>
 80085bc:	4b4a      	ldr	r3, [pc, #296]	; (80086e8 <tcp_enqueue_flags+0x1d8>)
 80085be:	f240 423e 	movw	r2, #1086	; 0x43e
 80085c2:	494d      	ldr	r1, [pc, #308]	; (80086f8 <tcp_enqueue_flags+0x1e8>)
 80085c4:	484a      	ldr	r0, [pc, #296]	; (80086f0 <tcp_enqueue_flags+0x1e0>)
 80085c6:	f007 fd83 	bl	80100d0 <iprintf>
 80085ca:	2000      	movs	r0, #0
 80085cc:	f007 fe82 	bl	80102d4 <fflush>
 80085d0:	f007 fdc7 	bl	8010162 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	7ffb      	ldrb	r3, [r7, #31]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	460b      	mov	r3, r1
 80085e0:	6939      	ldr	r1, [r7, #16]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fd2a 	bl	800803c <tcp_create_segment>
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <tcp_enqueue_flags+0xf4>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8b5b      	ldrh	r3, [r3, #26]
 80085f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008602:	e06d      	b.n	80086e0 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	891b      	ldrh	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <tcp_enqueue_flags+0x114>
 800860c:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <tcp_enqueue_flags+0x1d8>)
 800860e:	f240 4247 	movw	r2, #1095	; 0x447
 8008612:	493a      	ldr	r1, [pc, #232]	; (80086fc <tcp_enqueue_flags+0x1ec>)
 8008614:	4836      	ldr	r0, [pc, #216]	; (80086f0 <tcp_enqueue_flags+0x1e0>)
 8008616:	f007 fd5b 	bl	80100d0 <iprintf>
 800861a:	2000      	movs	r0, #0
 800861c:	f007 fe5a 	bl	80102d4 <fflush>
 8008620:	f007 fd9f 	bl	8010162 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <tcp_enqueue_flags+0x124>
    pcb->unsent = seg;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	66da      	str	r2, [r3, #108]	; 0x6c
 8008632:	e00d      	b.n	8008650 <tcp_enqueue_flags+0x140>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	e002      	b.n	8008642 <tcp_enqueue_flags+0x132>
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f8      	bne.n	800863c <tcp_enqueue_flags+0x12c>
    useg->next = seg;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <tcp_enqueue_flags+0x15c>
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <tcp_enqueue_flags+0x166>
    pcb->snd_lbb++;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <tcp_enqueue_flags+0x17e>
    tcp_set_flags(pcb, TF_FIN);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	8b5b      	ldrh	r3, [r3, #26]
 8008684:	f043 0320 	orr.w	r3, r3, #32
 8008688:	b29a      	uxth	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fb f9fc 	bl	8003a90 <pbuf_clen>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086a2:	4413      	add	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d013      	beq.n	80086de <tcp_enqueue_flags+0x1ce>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10f      	bne.n	80086de <tcp_enqueue_flags+0x1ce>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <tcp_enqueue_flags+0x1ce>
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <tcp_enqueue_flags+0x1d8>)
 80086c8:	f240 426a 	movw	r2, #1130	; 0x46a
 80086cc:	490c      	ldr	r1, [pc, #48]	; (8008700 <tcp_enqueue_flags+0x1f0>)
 80086ce:	4808      	ldr	r0, [pc, #32]	; (80086f0 <tcp_enqueue_flags+0x1e0>)
 80086d0:	f007 fcfe 	bl	80100d0 <iprintf>
 80086d4:	2000      	movs	r0, #0
 80086d6:	f007 fdfd 	bl	80102d4 <fflush>
 80086da:	f007 fd42 	bl	8010162 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3720      	adds	r7, #32
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	08012ae4 	.word	0x08012ae4
 80086ec:	08012f54 	.word	0x08012f54
 80086f0:	08012b28 	.word	0x08012b28
 80086f4:	08012fac 	.word	0x08012fac
 80086f8:	08012fcc 	.word	0x08012fcc
 80086fc:	08013008 	.word	0x08013008
 8008700:	08013034 	.word	0x08013034

08008704 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008704:	b5b0      	push	{r4, r5, r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10b      	bne.n	800872a <tcp_output+0x26>
 8008712:	4ba9      	ldr	r3, [pc, #676]	; (80089b8 <tcp_output+0x2b4>)
 8008714:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8008718:	49a8      	ldr	r1, [pc, #672]	; (80089bc <tcp_output+0x2b8>)
 800871a:	48a9      	ldr	r0, [pc, #676]	; (80089c0 <tcp_output+0x2bc>)
 800871c:	f007 fcd8 	bl	80100d0 <iprintf>
 8008720:	2000      	movs	r0, #0
 8008722:	f007 fdd7 	bl	80102d4 <fflush>
 8008726:	f007 fd1c 	bl	8010162 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7d1b      	ldrb	r3, [r3, #20]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d10b      	bne.n	800874a <tcp_output+0x46>
 8008732:	4ba1      	ldr	r3, [pc, #644]	; (80089b8 <tcp_output+0x2b4>)
 8008734:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 8008738:	49a2      	ldr	r1, [pc, #648]	; (80089c4 <tcp_output+0x2c0>)
 800873a:	48a1      	ldr	r0, [pc, #644]	; (80089c0 <tcp_output+0x2bc>)
 800873c:	f007 fcc8 	bl	80100d0 <iprintf>
 8008740:	2000      	movs	r0, #0
 8008742:	f007 fdc7 	bl	80102d4 <fflush>
 8008746:	f007 fd0c 	bl	8010162 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800874a:	4b9f      	ldr	r3, [pc, #636]	; (80089c8 <tcp_output+0x2c4>)
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d101      	bne.n	8008758 <tcp_output+0x54>
    return ERR_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e1d8      	b.n	8008b0a <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008764:	429a      	cmp	r2, r3
 8008766:	d203      	bcs.n	8008770 <tcp_output+0x6c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800876e:	e002      	b.n	8008776 <tcp_output+0x72>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008776:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	8b5b      	ldrh	r3, [r3, #26]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 81b1 	beq.w	8008af4 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fed2 	bl	800953c <tcp_send_empty_ack>
 8008798:	4603      	mov	r3, r0
 800879a:	e1b6      	b.n	8008b0a <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3304      	adds	r3, #4
 80087a2:	461a      	mov	r2, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff fc2d 	bl	8008004 <tcp_route>
 80087aa:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <tcp_output+0xb4>
    return ERR_RTE;
 80087b2:	f06f 0303 	mvn.w	r3, #3
 80087b6:	e1a8      	b.n	8008b0a <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <tcp_output+0xc2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d111      	bne.n	80087ea <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <tcp_output+0xce>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	3304      	adds	r3, #4
 80087d0:	e000      	b.n	80087d4 <tcp_output+0xd0>
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <tcp_output+0xde>
      return ERR_RTE;
 80087dc:	f06f 0303 	mvn.w	r3, #3
 80087e0:	e193      	b.n	8008b0a <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f8 ff46 	bl	8001682 <lwip_htonl>
 80087f6:	4602      	mov	r2, r0
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	8912      	ldrh	r2, [r2, #8]
 8008802:	441a      	add	r2, r3
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	429a      	cmp	r2, r3
 8008808:	d927      	bls.n	800885a <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008810:	461a      	mov	r2, r3
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	429a      	cmp	r2, r3
 8008816:	d114      	bne.n	8008842 <tcp_output+0x13e>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	2b00      	cmp	r3, #0
 800881e:	d110      	bne.n	8008842 <tcp_output+0x13e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	8b5b      	ldrh	r3, [r3, #26]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8154 	beq.w	8008af8 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fe73 	bl	800953c <tcp_send_empty_ack>
 8008856:	4603      	mov	r3, r0
 8008858:	e157      	b.n	8008b0a <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8123 	beq.w	8008ab6 <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 8008870:	e002      	b.n	8008878 <tcp_output+0x174>
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	623b      	str	r3, [r7, #32]
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f8      	bne.n	8008872 <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8008880:	e119      	b.n	8008ab6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	899b      	ldrh	r3, [r3, #12]
 8008888:	b29b      	uxth	r3, r3
 800888a:	4618      	mov	r0, r3
 800888c:	f7f8 fee4 	bl	8001658 <lwip_htons>
 8008890:	4603      	mov	r3, r0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <tcp_output+0x1b0>
 800889c:	4b46      	ldr	r3, [pc, #280]	; (80089b8 <tcp_output+0x2b4>)
 800889e:	f240 523b 	movw	r2, #1339	; 0x53b
 80088a2:	494a      	ldr	r1, [pc, #296]	; (80089cc <tcp_output+0x2c8>)
 80088a4:	4846      	ldr	r0, [pc, #280]	; (80089c0 <tcp_output+0x2bc>)
 80088a6:	f007 fc13 	bl	80100d0 <iprintf>
 80088aa:	2000      	movs	r0, #0
 80088ac:	f007 fd12 	bl	80102d4 <fflush>
 80088b0:	f007 fc57 	bl	8010162 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01f      	beq.n	80088fc <tcp_output+0x1f8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8b5b      	ldrh	r3, [r3, #26]
 80088c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d119      	bne.n	80088fc <tcp_output+0x1f8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <tcp_output+0x1e4>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d110      	bne.n	80088fc <tcp_output+0x1f8>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	891a      	ldrh	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d209      	bcs.n	80088fc <tcp_output+0x1f8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <tcp_output+0x1f8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d901      	bls.n	8008900 <tcp_output+0x1fc>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <tcp_output+0x1fe>
 8008900:	2300      	movs	r3, #0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8b5b      	ldrh	r3, [r3, #26]
 800890a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80e6 	beq.w	8008ae0 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7d1b      	ldrb	r3, [r3, #20]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d00c      	beq.n	8008936 <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	691c      	ldr	r4, [r3, #16]
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	899b      	ldrh	r3, [r3, #12]
 8008926:	b29d      	uxth	r5, r3
 8008928:	2010      	movs	r0, #16
 800892a:	f7f8 fe95 	bl	8001658 <lwip_htons>
 800892e:	4603      	mov	r3, r0
 8008930:	432b      	orrs	r3, r5
 8008932:	b29b      	uxth	r3, r3
 8008934:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893c:	f000 f910 	bl	8008b60 <tcp_output_segment>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	8b5b      	ldrh	r3, [r3, #26]
 8008950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	835a      	strh	r2, [r3, #26]
      return err;
 800895a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800895e:	e0d4      	b.n	8008b0a <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	2200      	movs	r2, #0
 8008964:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7d1b      	ldrb	r3, [r3, #20]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d006      	beq.n	8008984 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	8b5b      	ldrh	r3, [r3, #26]
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4618      	mov	r0, r3
 800898c:	f7f8 fe79 	bl	8001682 <lwip_htonl>
 8008990:	4604      	mov	r4, r0
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	891b      	ldrh	r3, [r3, #8]
 8008996:	461d      	mov	r5, r3
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	899b      	ldrh	r3, [r3, #12]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7f8 fe59 	bl	8001658 <lwip_htons>
 80089a6:	4603      	mov	r3, r0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <tcp_output+0x2cc>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00d      	b.n	80089d2 <tcp_output+0x2ce>
 80089b6:	bf00      	nop
 80089b8:	08012ae4 	.word	0x08012ae4
 80089bc:	0801305c 	.word	0x0801305c
 80089c0:	08012b28 	.word	0x08012b28
 80089c4:	08013074 	.word	0x08013074
 80089c8:	20001754 	.word	0x20001754
 80089cc:	0801309c 	.word	0x0801309c
 80089d0:	2300      	movs	r3, #0
 80089d2:	442b      	add	r3, r5
 80089d4:	4423      	add	r3, r4
 80089d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	da02      	bge.n	80089ea <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	461c      	mov	r4, r3
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	899b      	ldrh	r3, [r3, #12]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7f8 fe2d 	bl	8001658 <lwip_htons>
 80089fe:	4603      	mov	r3, r0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <tcp_output+0x30a>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <tcp_output+0x30c>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4423      	add	r3, r4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d049      	beq.n	8008aaa <tcp_output+0x3a6>
      seg->next = NULL;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <tcp_output+0x32c>
        pcb->unacked = seg;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	623b      	str	r3, [r7, #32]
 8008a2e:	e03f      	b.n	8008ab0 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f8 fe23 	bl	8001682 <lwip_htonl>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f8 fe1c 	bl	8001682 <lwip_htonl>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	1ae3      	subs	r3, r4, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da24      	bge.n	8008a9c <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3370      	adds	r3, #112	; 0x70
 8008a56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008a58:	e002      	b.n	8008a60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d011      	beq.n	8008a8c <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7f8 fe06 	bl	8001682 <lwip_htonl>
 8008a76:	4604      	mov	r4, r0
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f8 fdff 	bl	8001682 <lwip_htonl>
 8008a84:	4603      	mov	r3, r0
 8008a86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dbe6      	blt.n	8008a5a <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	e009      	b.n	8008ab0 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	e002      	b.n	8008ab0 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aac:	f7fc faf4 	bl	8005098 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d012      	beq.n	8008ae2 <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f8 fddd 	bl	8001682 <lwip_htonl>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad2:	8912      	ldrh	r2, [r2, #8]
 8008ad4:	441a      	add	r2, r3
  while (seg != NULL &&
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	f67f aed2 	bls.w	8008882 <tcp_output+0x17e>
 8008ade:	e000      	b.n	8008ae2 <tcp_output+0x3de>
      break;
 8008ae0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008af2:	e002      	b.n	8008afa <tcp_output+0x3f6>
    goto output_done;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <tcp_output+0x3f6>
    goto output_done;
 8008af8:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8b5b      	ldrh	r3, [r3, #26]
 8008afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3728      	adds	r7, #40	; 0x28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bdb0      	pop	{r4, r5, r7, pc}
 8008b12:	bf00      	nop

08008b14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <tcp_output_segment_busy+0x26>
 8008b22:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <tcp_output_segment_busy+0x40>)
 8008b24:	f240 529e 	movw	r2, #1438	; 0x59e
 8008b28:	490b      	ldr	r1, [pc, #44]	; (8008b58 <tcp_output_segment_busy+0x44>)
 8008b2a:	480c      	ldr	r0, [pc, #48]	; (8008b5c <tcp_output_segment_busy+0x48>)
 8008b2c:	f007 fad0 	bl	80100d0 <iprintf>
 8008b30:	2000      	movs	r0, #0
 8008b32:	f007 fbcf 	bl	80102d4 <fflush>
 8008b36:	f007 fb14 	bl	8010162 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	7b9b      	ldrb	r3, [r3, #14]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d001      	beq.n	8008b48 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	08012ae4 	.word	0x08012ae4
 8008b58:	080130b4 	.word	0x080130b4
 8008b5c:	08012b28 	.word	0x08012b28

08008b60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008b60:	b5b0      	push	{r4, r5, r7, lr}
 8008b62:	b08c      	sub	sp, #48	; 0x30
 8008b64:	af04      	add	r7, sp, #16
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <tcp_output_segment+0x2a>
 8008b72:	4b78      	ldr	r3, [pc, #480]	; (8008d54 <tcp_output_segment+0x1f4>)
 8008b74:	f240 52bc 	movw	r2, #1468	; 0x5bc
 8008b78:	4977      	ldr	r1, [pc, #476]	; (8008d58 <tcp_output_segment+0x1f8>)
 8008b7a:	4878      	ldr	r0, [pc, #480]	; (8008d5c <tcp_output_segment+0x1fc>)
 8008b7c:	f007 faa8 	bl	80100d0 <iprintf>
 8008b80:	2000      	movs	r0, #0
 8008b82:	f007 fba7 	bl	80102d4 <fflush>
 8008b86:	f007 faec 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10b      	bne.n	8008ba8 <tcp_output_segment+0x48>
 8008b90:	4b70      	ldr	r3, [pc, #448]	; (8008d54 <tcp_output_segment+0x1f4>)
 8008b92:	f240 52bd 	movw	r2, #1469	; 0x5bd
 8008b96:	4972      	ldr	r1, [pc, #456]	; (8008d60 <tcp_output_segment+0x200>)
 8008b98:	4870      	ldr	r0, [pc, #448]	; (8008d5c <tcp_output_segment+0x1fc>)
 8008b9a:	f007 fa99 	bl	80100d0 <iprintf>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f007 fb98 	bl	80102d4 <fflush>
 8008ba4:	f007 fadd 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <tcp_output_segment+0x66>
 8008bae:	4b69      	ldr	r3, [pc, #420]	; (8008d54 <tcp_output_segment+0x1f4>)
 8008bb0:	f240 52be 	movw	r2, #1470	; 0x5be
 8008bb4:	496b      	ldr	r1, [pc, #428]	; (8008d64 <tcp_output_segment+0x204>)
 8008bb6:	4869      	ldr	r0, [pc, #420]	; (8008d5c <tcp_output_segment+0x1fc>)
 8008bb8:	f007 fa8a 	bl	80100d0 <iprintf>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f007 fb89 	bl	80102d4 <fflush>
 8008bc2:	f007 face 	bl	8010162 <abort>

  if (tcp_output_segment_busy(seg)) {
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff ffa4 	bl	8008b14 <tcp_output_segment_busy>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e0ba      	b.n	8008d4c <tcp_output_segment+0x1ec>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691c      	ldr	r4, [r3, #16]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f8 fd4f 	bl	8001682 <lwip_htonl>
 8008be4:	4603      	mov	r3, r0
 8008be6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691c      	ldr	r4, [r3, #16]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f8 fd31 	bl	8001658 <lwip_htons>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008c02:	441a      	add	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	7b1b      	ldrb	r3, [r3, #12]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d015      	beq.n	8008c48 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	461a      	mov	r2, r3
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008c28:	f7fc fd54 	bl	80056d4 <tcp_eff_send_mss_netif>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008c30:	8b7b      	ldrh	r3, [r7, #26]
 8008c32:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f8 fd23 	bl	8001682 <lwip_htonl>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	3304      	adds	r3, #4
 8008c46:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da02      	bge.n	8008c58 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 8008c60:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <tcp_output_segment+0x208>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7f8 fd07 	bl	8001682 <lwip_htonl>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	6852      	ldr	r2, [r2, #4]
 8008c92:	8951      	ldrh	r1, [r2, #10]
 8008c94:	8b3a      	ldrh	r2, [r7, #24]
 8008c96:	1a8a      	subs	r2, r1, r2
 8008c98:	b292      	uxth	r2, r2
 8008c9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	6852      	ldr	r2, [r2, #4]
 8008ca4:	8911      	ldrh	r1, [r2, #8]
 8008ca6:	8b3a      	ldrh	r2, [r7, #24]
 8008ca8:	1a8a      	subs	r2, r1, r2
 8008caa:	b292      	uxth	r2, r2
 8008cac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	6912      	ldr	r2, [r2, #16]
 8008cb6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	741a      	strb	r2, [r3, #16]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f103 0214 	add.w	r2, r3, #20
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	7b1b      	ldrb	r3, [r3, #12]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <tcp_output_segment+0x17c>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	e000      	b.n	8008cde <tcp_output_segment+0x17e>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	441a      	add	r2, r3
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d00b      	beq.n	8008cfe <tcp_output_segment+0x19e>
 8008ce6:	4b1b      	ldr	r3, [pc, #108]	; (8008d54 <tcp_output_segment+0x1f4>)
 8008ce8:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8008cec:	491f      	ldr	r1, [pc, #124]	; (8008d6c <tcp_output_segment+0x20c>)
 8008cee:	481b      	ldr	r0, [pc, #108]	; (8008d5c <tcp_output_segment+0x1fc>)
 8008cf0:	f007 f9ee 	bl	80100d0 <iprintf>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f007 faed 	bl	80102d4 <fflush>
 8008cfa:	f007 fa32 	bl	8010162 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691c      	ldr	r4, [r3, #16]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008d0a:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	460b      	mov	r3, r1
 8008d16:	2106      	movs	r1, #6
 8008d18:	f7f8 fdd0 	bl	80018bc <ip_chksum_pseudo>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6858      	ldr	r0, [r3, #4]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	1d1c      	adds	r4, r3, #4
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	7add      	ldrb	r5, [r3, #11]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	7a9b      	ldrb	r3, [r3, #10]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	9202      	str	r2, [sp, #8]
 8008d36:	2206      	movs	r2, #6
 8008d38:	9201      	str	r2, [sp, #4]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	4622      	mov	r2, r4
 8008d40:	f7f9 f9c6 	bl	80020d0 <ip4_output_if>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8008d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bdb0      	pop	{r4, r5, r7, pc}
 8008d54:	08012ae4 	.word	0x08012ae4
 8008d58:	080130dc 	.word	0x080130dc
 8008d5c:	08012b28 	.word	0x08012b28
 8008d60:	080130fc 	.word	0x080130fc
 8008d64:	0801311c 	.word	0x0801311c
 8008d68:	20001744 	.word	0x20001744
 8008d6c:	08013140 	.word	0x08013140

08008d70 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8008d70:	b5b0      	push	{r4, r5, r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <tcp_rexmit_rto_prepare+0x26>
 8008d7e:	4b38      	ldr	r3, [pc, #224]	; (8008e60 <tcp_rexmit_rto_prepare+0xf0>)
 8008d80:	f240 6267 	movw	r2, #1639	; 0x667
 8008d84:	4937      	ldr	r1, [pc, #220]	; (8008e64 <tcp_rexmit_rto_prepare+0xf4>)
 8008d86:	4838      	ldr	r0, [pc, #224]	; (8008e68 <tcp_rexmit_rto_prepare+0xf8>)
 8008d88:	f007 f9a2 	bl	80100d0 <iprintf>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	f007 faa1 	bl	80102d4 <fflush>
 8008d92:	f007 f9e6 	bl	8010162 <abort>

  if (pcb->unacked == NULL) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 8008d9e:	f06f 0305 	mvn.w	r3, #5
 8008da2:	e059      	b.n	8008e58 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e00b      	b.n	8008dc4 <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff feb1 	bl	8008b14 <tcp_output_segment_busy>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8008db8:	f06f 0305 	mvn.w	r3, #5
 8008dbc:	e04c      	b.n	8008e58 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1ef      	bne.n	8008dac <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fea1 	bl	8008b14 <tcp_output_segment_busy>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8008dd8:	f06f 0305 	mvn.w	r3, #5
 8008ddc:	e03c      	b.n	8008e58 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	895a      	ldrh	r2, [r3, #10]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	8b5b      	ldrh	r3, [r3, #26]
 8008e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f8 fc31 	bl	8001682 <lwip_htonl>
 8008e20:	4604      	mov	r4, r0
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	461d      	mov	r5, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f8 fc11 	bl	8001658 <lwip_htons>
 8008e36:	4603      	mov	r3, r0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <tcp_rexmit_rto_prepare+0xd6>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <tcp_rexmit_rto_prepare+0xd8>
 8008e46:	2300      	movs	r3, #0
 8008e48:	442b      	add	r3, r5
 8008e4a:	18e2      	adds	r2, r4, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e60:	08012ae4 	.word	0x08012ae4
 8008e64:	08013154 	.word	0x08013154
 8008e68:	08012b28 	.word	0x08012b28

08008e6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <tcp_rexmit_rto_commit+0x26>
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <tcp_rexmit_rto_commit+0x50>)
 8008e7c:	f240 629c 	movw	r2, #1692	; 0x69c
 8008e80:	490f      	ldr	r1, [pc, #60]	; (8008ec0 <tcp_rexmit_rto_commit+0x54>)
 8008e82:	4810      	ldr	r0, [pc, #64]	; (8008ec4 <tcp_rexmit_rto_commit+0x58>)
 8008e84:	f007 f924 	bl	80100d0 <iprintf>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f007 fa23 	bl	80102d4 <fflush>
 8008e8e:	f007 f968 	bl	8010162 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e98:	2bff      	cmp	r3, #255	; 0xff
 8008e9a:	d007      	beq.n	8008eac <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fc29 	bl	8008704 <tcp_output>
}
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	08012ae4 	.word	0x08012ae4
 8008ec0:	08013178 	.word	0x08013178
 8008ec4:	08012b28 	.word	0x08012b28

08008ec8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <tcp_rexmit_rto+0x26>
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <tcp_rexmit_rto+0x40>)
 8008ed8:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8008edc:	490b      	ldr	r1, [pc, #44]	; (8008f0c <tcp_rexmit_rto+0x44>)
 8008ede:	480c      	ldr	r0, [pc, #48]	; (8008f10 <tcp_rexmit_rto+0x48>)
 8008ee0:	f007 f8f6 	bl	80100d0 <iprintf>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f007 f9f5 	bl	80102d4 <fflush>
 8008eea:	f007 f93a 	bl	8010162 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff ff3e 	bl	8008d70 <tcp_rexmit_rto_prepare>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff ffb6 	bl	8008e6c <tcp_rexmit_rto_commit>
  }
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	08012ae4 	.word	0x08012ae4
 8008f0c:	0801319c 	.word	0x0801319c
 8008f10:	08012b28 	.word	0x08012b28

08008f14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <tcp_rexmit+0x26>
 8008f22:	4b32      	ldr	r3, [pc, #200]	; (8008fec <tcp_rexmit+0xd8>)
 8008f24:	f240 62c5 	movw	r2, #1733	; 0x6c5
 8008f28:	4931      	ldr	r1, [pc, #196]	; (8008ff0 <tcp_rexmit+0xdc>)
 8008f2a:	4832      	ldr	r0, [pc, #200]	; (8008ff4 <tcp_rexmit+0xe0>)
 8008f2c:	f007 f8d0 	bl	80100d0 <iprintf>
 8008f30:	2000      	movs	r0, #0
 8008f32:	f007 f9cf 	bl	80102d4 <fflush>
 8008f36:	f007 f914 	bl	8010162 <abort>

  if (pcb->unacked == NULL) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <tcp_rexmit+0x34>
    return ERR_VAL;
 8008f42:	f06f 0305 	mvn.w	r3, #5
 8008f46:	e04c      	b.n	8008fe2 <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4c:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f7ff fde0 	bl	8008b14 <tcp_output_segment_busy>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8008f5a:	f06f 0305 	mvn.w	r3, #5
 8008f5e:	e040      	b.n	8008fe2 <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	336c      	adds	r3, #108	; 0x6c
 8008f6c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008f6e:	e002      	b.n	8008f76 <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d011      	beq.n	8008fa2 <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f8 fb7b 	bl	8001682 <lwip_htonl>
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7f8 fb74 	bl	8001682 <lwip_htonl>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dbe6      	blt.n	8008f70 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fc6:	2bff      	cmp	r3, #255	; 0xff
 8008fc8:	d007      	beq.n	8008fda <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd90      	pop	{r4, r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08012ae4 	.word	0x08012ae4
 8008ff0:	080131b8 	.word	0x080131b8
 8008ff4:	08012b28 	.word	0x08012b28

08008ff8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <tcp_rexmit_fast+0x26>
 8009006:	4b31      	ldr	r3, [pc, #196]	; (80090cc <tcp_rexmit_fast+0xd4>)
 8009008:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800900c:	4930      	ldr	r1, [pc, #192]	; (80090d0 <tcp_rexmit_fast+0xd8>)
 800900e:	4831      	ldr	r0, [pc, #196]	; (80090d4 <tcp_rexmit_fast+0xdc>)
 8009010:	f007 f85e 	bl	80100d0 <iprintf>
 8009014:	2000      	movs	r0, #0
 8009016:	f007 f95d 	bl	80102d4 <fflush>
 800901a:	f007 f8a2 	bl	8010162 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	2b00      	cmp	r3, #0
 8009024:	d04d      	beq.n	80090c2 <tcp_rexmit_fast+0xca>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8b5b      	ldrh	r3, [r3, #26]
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	d147      	bne.n	80090c2 <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ff6e 	bl	8008f14 <tcp_rexmit>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d141      	bne.n	80090c2 <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800904a:	429a      	cmp	r2, r3
 800904c:	d207      	bcs.n	800905e <tcp_rexmit_fast+0x66>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009054:	0fda      	lsrs	r2, r3, #31
 8009056:	4413      	add	r3, r2
 8009058:	105b      	asrs	r3, r3, #1
 800905a:	b29b      	uxth	r3, r3
 800905c:	e006      	b.n	800906c <tcp_rexmit_fast+0x74>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009064:	0fda      	lsrs	r2, r3, #31
 8009066:	4413      	add	r3, r2
 8009068:	105b      	asrs	r3, r3, #1
 800906a:	b29b      	uxth	r3, r3
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009078:	461a      	mov	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	429a      	cmp	r2, r3
 8009082:	d206      	bcs.n	8009092 <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800909c:	4619      	mov	r1, r3
 800909e:	0049      	lsls	r1, r1, #1
 80090a0:	440b      	add	r3, r1
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8b5b      	ldrh	r3, [r3, #26]
 80090b2:	f043 0304 	orr.w	r3, r3, #4
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	08012ae4 	.word	0x08012ae4
 80090d0:	080131d0 	.word	0x080131d0
 80090d4:	08012b28 	.word	0x08012b28

080090d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	817b      	strh	r3, [r7, #10]
 80090e6:	4613      	mov	r3, r2
 80090e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80090ea:	897a      	ldrh	r2, [r7, #10]
 80090ec:	893b      	ldrh	r3, [r7, #8]
 80090ee:	4413      	add	r3, r2
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3314      	adds	r3, #20
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80090fa:	4619      	mov	r1, r3
 80090fc:	2022      	movs	r0, #34	; 0x22
 80090fe:	f7fa f9a7 	bl	8003450 <pbuf_alloc>
 8009102:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d053      	beq.n	80091b2 <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	895b      	ldrh	r3, [r3, #10]
 800910e:	461a      	mov	r2, r3
 8009110:	897b      	ldrh	r3, [r7, #10]
 8009112:	3314      	adds	r3, #20
 8009114:	429a      	cmp	r2, r3
 8009116:	da0b      	bge.n	8009130 <tcp_output_alloc_header_common+0x58>
 8009118:	4b28      	ldr	r3, [pc, #160]	; (80091bc <tcp_output_alloc_header_common+0xe4>)
 800911a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800911e:	4928      	ldr	r1, [pc, #160]	; (80091c0 <tcp_output_alloc_header_common+0xe8>)
 8009120:	4828      	ldr	r0, [pc, #160]	; (80091c4 <tcp_output_alloc_header_common+0xec>)
 8009122:	f006 ffd5 	bl	80100d0 <iprintf>
 8009126:	2000      	movs	r0, #0
 8009128:	f007 f8d4 	bl	80102d4 <fflush>
 800912c:	f007 f819 	bl	8010162 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009136:	8c3b      	ldrh	r3, [r7, #32]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f8 fa8d 	bl	8001658 <lwip_htons>
 800913e:	4603      	mov	r3, r0
 8009140:	461a      	mov	r2, r3
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009148:	4618      	mov	r0, r3
 800914a:	f7f8 fa85 	bl	8001658 <lwip_htons>
 800914e:	4603      	mov	r3, r0
 8009150:	461a      	mov	r2, r3
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7f8 fa90 	bl	8001682 <lwip_htonl>
 8009162:	4602      	mov	r2, r0
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009168:	897b      	ldrh	r3, [r7, #10]
 800916a:	089b      	lsrs	r3, r3, #2
 800916c:	b29b      	uxth	r3, r3
 800916e:	3305      	adds	r3, #5
 8009170:	b29b      	uxth	r3, r3
 8009172:	031b      	lsls	r3, r3, #12
 8009174:	b29a      	uxth	r2, r3
 8009176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800917a:	b29b      	uxth	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b29b      	uxth	r3, r3
 8009180:	4618      	mov	r0, r3
 8009182:	f7f8 fa69 	bl	8001658 <lwip_htons>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800918e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009190:	4618      	mov	r0, r3
 8009192:	f7f8 fa61 	bl	8001658 <lwip_htons>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2200      	movs	r2, #0
 80091a2:	741a      	strb	r2, [r3, #16]
 80091a4:	2200      	movs	r2, #0
 80091a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2200      	movs	r2, #0
 80091ac:	749a      	strb	r2, [r3, #18]
 80091ae:	2200      	movs	r2, #0
 80091b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80091b2:	697b      	ldr	r3, [r7, #20]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	08012ae4 	.word	0x08012ae4
 80091c0:	080131f0 	.word	0x080131f0
 80091c4:	08012b28 	.word	0x08012b28

080091c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80091c8:	b5b0      	push	{r4, r5, r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	607b      	str	r3, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	817b      	strh	r3, [r7, #10]
 80091d6:	4613      	mov	r3, r2
 80091d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <tcp_output_alloc_header+0x30>
 80091e0:	4b17      	ldr	r3, [pc, #92]	; (8009240 <tcp_output_alloc_header+0x78>)
 80091e2:	f240 7246 	movw	r2, #1862	; 0x746
 80091e6:	4917      	ldr	r1, [pc, #92]	; (8009244 <tcp_output_alloc_header+0x7c>)
 80091e8:	4817      	ldr	r0, [pc, #92]	; (8009248 <tcp_output_alloc_header+0x80>)
 80091ea:	f006 ff71 	bl	80100d0 <iprintf>
 80091ee:	2000      	movs	r0, #0
 80091f0:	f007 f870 	bl	80102d4 <fflush>
 80091f4:	f006 ffb5 	bl	8010162 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8adb      	ldrh	r3, [r3, #22]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	8b12      	ldrh	r2, [r2, #24]
 8009204:	68f9      	ldr	r1, [r7, #12]
 8009206:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8009208:	893d      	ldrh	r5, [r7, #8]
 800920a:	897c      	ldrh	r4, [r7, #10]
 800920c:	9103      	str	r1, [sp, #12]
 800920e:	2110      	movs	r1, #16
 8009210:	9102      	str	r1, [sp, #8]
 8009212:	9201      	str	r2, [sp, #4]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	462a      	mov	r2, r5
 800921a:	4621      	mov	r1, r4
 800921c:	f7ff ff5c 	bl	80090d8 <tcp_output_alloc_header_common>
 8009220:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009230:	441a      	add	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009236:	697b      	ldr	r3, [r7, #20]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bdb0      	pop	{r4, r5, r7, pc}
 8009240:	08012ae4 	.word	0x08012ae4
 8009244:	08013220 	.word	0x08013220
 8009248:	08012b28 	.word	0x08012b28

0800924c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4611      	mov	r1, r2
 8009258:	461a      	mov	r2, r3
 800925a:	460b      	mov	r3, r1
 800925c:	71fb      	strb	r3, [r7, #7]
 800925e:	4613      	mov	r3, r2
 8009260:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <tcp_output_fill_options+0x38>
 800926c:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <tcp_output_fill_options+0x8c>)
 800926e:	f240 725a 	movw	r2, #1882	; 0x75a
 8009272:	491a      	ldr	r1, [pc, #104]	; (80092dc <tcp_output_fill_options+0x90>)
 8009274:	481a      	ldr	r0, [pc, #104]	; (80092e0 <tcp_output_fill_options+0x94>)
 8009276:	f006 ff2b 	bl	80100d0 <iprintf>
 800927a:	2000      	movs	r0, #0
 800927c:	f007 f82a 	bl	80102d4 <fflush>
 8009280:	f006 ff6f 	bl	8010162 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	3314      	adds	r3, #20
 800928e:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f103 0214 	add.w	r2, r3, #20
 8009296:	8bfb      	ldrh	r3, [r7, #30]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4619      	mov	r1, r3
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <tcp_output_fill_options+0x5e>
 80092a6:	2304      	movs	r3, #4
 80092a8:	e000      	b.n	80092ac <tcp_output_fill_options+0x60>
 80092aa:	2300      	movs	r3, #0
 80092ac:	440b      	add	r3, r1
 80092ae:	441a      	add	r2, r3
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d00b      	beq.n	80092ce <tcp_output_fill_options+0x82>
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <tcp_output_fill_options+0x8c>)
 80092b8:	f240 7279 	movw	r2, #1913	; 0x779
 80092bc:	4909      	ldr	r1, [pc, #36]	; (80092e4 <tcp_output_fill_options+0x98>)
 80092be:	4808      	ldr	r0, [pc, #32]	; (80092e0 <tcp_output_fill_options+0x94>)
 80092c0:	f006 ff06 	bl	80100d0 <iprintf>
 80092c4:	2000      	movs	r0, #0
 80092c6:	f007 f805 	bl	80102d4 <fflush>
 80092ca:	f006 ff4a 	bl	8010162 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80092ce:	bf00      	nop
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	08012ae4 	.word	0x08012ae4
 80092dc:	08013248 	.word	0x08013248
 80092e0:	08012b28 	.word	0x08012b28
 80092e4:	08013140 	.word	0x08013140

080092e8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10b      	bne.n	8009314 <tcp_output_control_segment+0x2c>
 80092fc:	4b13      	ldr	r3, [pc, #76]	; (800934c <tcp_output_control_segment+0x64>)
 80092fe:	f240 728a 	movw	r2, #1930	; 0x78a
 8009302:	4913      	ldr	r1, [pc, #76]	; (8009350 <tcp_output_control_segment+0x68>)
 8009304:	4813      	ldr	r0, [pc, #76]	; (8009354 <tcp_output_control_segment+0x6c>)
 8009306:	f006 fee3 	bl	80100d0 <iprintf>
 800930a:	2000      	movs	r0, #0
 800930c:	f006 ffe2 	bl	80102d4 <fflush>
 8009310:	f006 ff27 	bl	8010162 <abort>

  netif = tcp_route(pcb, src, dst);
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7fe fe73 	bl	8008004 <tcp_route>
 800931e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d105      	bne.n	8009332 <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 8009326:	68b8      	ldr	r0, [r7, #8]
 8009328:	f7fa fb30 	bl	800398c <pbuf_free>
    return ERR_RTE;
 800932c:	f06f 0303 	mvn.w	r3, #3
 8009330:	e008      	b.n	8009344 <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f80b 	bl	8009358 <tcp_output_control_segment_netif>
 8009342:	4603      	mov	r3, r0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	08012ae4 	.word	0x08012ae4
 8009350:	08013270 	.word	0x08013270
 8009354:	08012b28 	.word	0x08012b28

08009358 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	; 0x30
 800935c:	af04      	add	r7, sp, #16
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <tcp_output_control_segment_netif+0x2c>
 800936c:	4b20      	ldr	r3, [pc, #128]	; (80093f0 <tcp_output_control_segment_netif+0x98>)
 800936e:	f240 72a1 	movw	r2, #1953	; 0x7a1
 8009372:	4920      	ldr	r1, [pc, #128]	; (80093f4 <tcp_output_control_segment_netif+0x9c>)
 8009374:	4820      	ldr	r0, [pc, #128]	; (80093f8 <tcp_output_control_segment_netif+0xa0>)
 8009376:	f006 feab 	bl	80100d0 <iprintf>
 800937a:	2000      	movs	r0, #0
 800937c:	f006 ffaa 	bl	80102d4 <fflush>
 8009380:	f006 feef 	bl	8010162 <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	891a      	ldrh	r2, [r3, #8]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2106      	movs	r1, #6
 8009396:	68b8      	ldr	r0, [r7, #8]
 8009398:	f7f8 fa90 	bl	80018bc <ip_chksum_pseudo>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d006      	beq.n	80093b8 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	7adb      	ldrb	r3, [r3, #11]
 80093ae:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	7a9b      	ldrb	r3, [r3, #10]
 80093b4:	77bb      	strb	r3, [r7, #30]
 80093b6:	e003      	b.n	80093c0 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 80093b8:	23ff      	movs	r3, #255	; 0xff
 80093ba:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80093c0:	7ffa      	ldrb	r2, [r7, #31]
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	9302      	str	r3, [sp, #8]
 80093c6:	2306      	movs	r3, #6
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	7fbb      	ldrb	r3, [r7, #30]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4613      	mov	r3, r2
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	68b8      	ldr	r0, [r7, #8]
 80093d6:	f7f8 fe7b 	bl	80020d0 <ip4_output_if>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 80093de:	68b8      	ldr	r0, [r7, #8]
 80093e0:	f7fa fad4 	bl	800398c <pbuf_free>
  return err;
 80093e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	08012ae4 	.word	0x08012ae4
 80093f4:	0801329c 	.word	0x0801329c
 80093f8:	08012b28 	.word	0x08012b28

080093fc <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b08b      	sub	sp, #44	; 0x2c
 8009400:	af04      	add	r7, sp, #16
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10b      	bne.n	8009428 <tcp_rst_common+0x2c>
 8009410:	4b22      	ldr	r3, [pc, #136]	; (800949c <tcp_rst_common+0xa0>)
 8009412:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009416:	4922      	ldr	r1, [pc, #136]	; (80094a0 <tcp_rst_common+0xa4>)
 8009418:	4822      	ldr	r0, [pc, #136]	; (80094a4 <tcp_rst_common+0xa8>)
 800941a:	f006 fe59 	bl	80100d0 <iprintf>
 800941e:	2000      	movs	r0, #0
 8009420:	f006 ff58 	bl	80102d4 <fflush>
 8009424:	f006 fe9d 	bl	8010162 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <tcp_rst_common+0x4a>
 800942e:	4b1b      	ldr	r3, [pc, #108]	; (800949c <tcp_rst_common+0xa0>)
 8009430:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009434:	491c      	ldr	r1, [pc, #112]	; (80094a8 <tcp_rst_common+0xac>)
 8009436:	481b      	ldr	r0, [pc, #108]	; (80094a4 <tcp_rst_common+0xa8>)
 8009438:	f006 fe4a 	bl	80100d0 <iprintf>
 800943c:	2000      	movs	r0, #0
 800943e:	f006 ff49 	bl	80102d4 <fflush>
 8009442:	f006 fe8e 	bl	8010162 <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800944a:	f242 0303 	movw	r3, #8195	; 0x2003
 800944e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	b29c      	uxth	r4, r3
 8009454:	68b8      	ldr	r0, [r7, #8]
 8009456:	f7f8 f914 	bl	8001682 <lwip_htonl>
 800945a:	4602      	mov	r2, r0
 800945c:	8abb      	ldrh	r3, [r7, #20]
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	2314      	movs	r3, #20
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	2200      	movs	r2, #0
 8009470:	4621      	mov	r1, r4
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff fe30 	bl	80090d8 <tcp_output_alloc_header_common>
 8009478:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	e006      	b.n	8009492 <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8009484:	2300      	movs	r3, #0
 8009486:	2200      	movs	r2, #0
 8009488:	6939      	ldr	r1, [r7, #16]
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7ff fede 	bl	800924c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8009490:	693b      	ldr	r3, [r7, #16]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop
 800949c:	08012ae4 	.word	0x08012ae4
 80094a0:	080132d0 	.word	0x080132d0
 80094a4:	08012b28 	.word	0x08012b28
 80094a8:	080132ec 	.word	0x080132ec

080094ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	; 0x28
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 80094ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094bc:	9302      	str	r3, [sp, #8]
 80094be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	68b9      	ldr	r1, [r7, #8]
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ff95 	bl	80093fc <tcp_rst_common>
 80094d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	6979      	ldr	r1, [r7, #20]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff ff01 	bl	80092e8 <tcp_output_control_segment>
  }
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b08a      	sub	sp, #40	; 0x28
 80094f2:	af04      	add	r7, sp, #16
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	607a      	str	r2, [r7, #4]
 80094fa:	603b      	str	r3, [r7, #0]
  if (netif) {
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d017      	beq.n	8009532 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8009502:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009504:	9302      	str	r3, [sp, #8]
 8009506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	2000      	movs	r0, #0
 8009516:	f7ff ff71 	bl	80093fc <tcp_rst_common>
 800951a:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	2000      	movs	r0, #0
 800952e:	f7ff ff13 	bl	8009358 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <tcp_send_empty_ack+0x2e>
 8009552:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <tcp_send_empty_ack+0xc8>)
 8009554:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8009558:	492b      	ldr	r1, [pc, #172]	; (8009608 <tcp_send_empty_ack+0xcc>)
 800955a:	482c      	ldr	r0, [pc, #176]	; (800960c <tcp_send_empty_ack+0xd0>)
 800955c:	f006 fdb8 	bl	80100d0 <iprintf>
 8009560:	2000      	movs	r0, #0
 8009562:	f006 feb7 	bl	80102d4 <fflush>
 8009566:	f006 fdfc 	bl	8010162 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <tcp_send_empty_ack+0x3c>
 8009574:	2304      	movs	r3, #4
 8009576:	e000      	b.n	800957a <tcp_send_empty_ack+0x3e>
 8009578:	2300      	movs	r3, #0
 800957a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800957c:	7d7b      	ldrb	r3, [r7, #21]
 800957e:	b29c      	uxth	r4, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009584:	4618      	mov	r0, r3
 8009586:	f7f8 f87c 	bl	8001682 <lwip_htonl>
 800958a:	4603      	mov	r3, r0
 800958c:	2200      	movs	r2, #0
 800958e:	4621      	mov	r1, r4
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fe19 	bl	80091c8 <tcp_output_alloc_header>
 8009596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	8b5b      	ldrh	r3, [r3, #26]
 80095a2:	f043 0303 	orr.w	r3, r3, #3
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80095ac:	f06f 0301 	mvn.w	r3, #1
 80095b0:	e023      	b.n	80095fa <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80095b2:	7dbb      	ldrb	r3, [r7, #22]
 80095b4:	7dfa      	ldrb	r2, [r7, #23]
 80095b6:	6939      	ldr	r1, [r7, #16]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff fe47 	bl	800924c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	6939      	ldr	r1, [r7, #16]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fe8e 	bl	80092e8 <tcp_output_control_segment>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80095d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	8b5b      	ldrh	r3, [r3, #26]
 80095dc:	f043 0303 	orr.w	r3, r3, #3
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	835a      	strh	r2, [r3, #26]
 80095e6:	e006      	b.n	80095f6 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	8b5b      	ldrh	r3, [r3, #26]
 80095ec:	f023 0303 	bic.w	r3, r3, #3
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80095f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd90      	pop	{r4, r7, pc}
 8009602:	bf00      	nop
 8009604:	08012ae4 	.word	0x08012ae4
 8009608:	08013308 	.word	0x08013308
 800960c:	08012b28 	.word	0x08012b28

08009610 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009618:	2300      	movs	r3, #0
 800961a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10b      	bne.n	800963a <tcp_keepalive+0x2a>
 8009622:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <tcp_keepalive+0x80>)
 8009624:	f640 026a 	movw	r2, #2154	; 0x86a
 8009628:	491a      	ldr	r1, [pc, #104]	; (8009694 <tcp_keepalive+0x84>)
 800962a:	481b      	ldr	r0, [pc, #108]	; (8009698 <tcp_keepalive+0x88>)
 800962c:	f006 fd50 	bl	80100d0 <iprintf>
 8009630:	2000      	movs	r0, #0
 8009632:	f006 fe4f 	bl	80102d4 <fflush>
 8009636:	f006 fd94 	bl	8010162 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	b29c      	uxth	r4, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009642:	3b01      	subs	r3, #1
 8009644:	4618      	mov	r0, r3
 8009646:	f7f8 f81c 	bl	8001682 <lwip_htonl>
 800964a:	4603      	mov	r3, r0
 800964c:	2200      	movs	r2, #0
 800964e:	4621      	mov	r1, r4
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fdb9 	bl	80091c8 <tcp_output_alloc_header>
 8009656:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	e010      	b.n	8009686 <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8009664:	2300      	movs	r3, #0
 8009666:	2200      	movs	r2, #0
 8009668:	6939      	ldr	r1, [r7, #16]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fdee 	bl	800924c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
 8009676:	6939      	ldr	r1, [r7, #16]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff fe35 	bl	80092e8 <tcp_output_control_segment>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	bd90      	pop	{r4, r7, pc}
 800968e:	bf00      	nop
 8009690:	08012ae4 	.word	0x08012ae4
 8009694:	08013328 	.word	0x08013328
 8009698:	08012b28 	.word	0x08012b28

0800969c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800969c:	b590      	push	{r4, r7, lr}
 800969e:	b08b      	sub	sp, #44	; 0x2c
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80096a4:	2300      	movs	r3, #0
 80096a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10b      	bne.n	80096c8 <tcp_zero_window_probe+0x2c>
 80096b0:	4b4e      	ldr	r3, [pc, #312]	; (80097ec <tcp_zero_window_probe+0x150>)
 80096b2:	f640 0295 	movw	r2, #2197	; 0x895
 80096b6:	494e      	ldr	r1, [pc, #312]	; (80097f0 <tcp_zero_window_probe+0x154>)
 80096b8:	484e      	ldr	r0, [pc, #312]	; (80097f4 <tcp_zero_window_probe+0x158>)
 80096ba:	f006 fd09 	bl	80100d0 <iprintf>
 80096be:	2000      	movs	r0, #0
 80096c0:	f006 fe08 	bl	80102d4 <fflush>
 80096c4:	f006 fd4d 	bl	8010162 <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e085      	b.n	80097e4 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80096de:	2bff      	cmp	r3, #255	; 0xff
 80096e0:	d007      	beq.n	80096f2 <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80096e8:	3301      	adds	r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f7 ffac 	bl	8001658 <lwip_htons>
 8009700:	4603      	mov	r3, r0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <tcp_zero_window_probe+0x7c>
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <tcp_zero_window_probe+0x7c>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <tcp_zero_window_probe+0x7e>
 8009718:	2300      	movs	r3, #0
 800971a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800971c:	7ffb      	ldrb	r3, [r7, #31]
 800971e:	2b00      	cmp	r3, #0
 8009720:	bf0c      	ite	eq
 8009722:	2301      	moveq	r3, #1
 8009724:	2300      	movne	r3, #0
 8009726:	b2db      	uxtb	r3, r3
 8009728:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800972a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800972e:	b299      	uxth	r1, r3
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	8bba      	ldrh	r2, [r7, #28]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fd45 	bl	80091c8 <tcp_output_alloc_header>
 800973e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009746:	f04f 33ff 	mov.w	r3, #4294967295
 800974a:	e04b      	b.n	80097e4 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009752:	7ffb      	ldrb	r3, [r7, #31]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d011      	beq.n	800977c <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	899b      	ldrh	r3, [r3, #12]
 800975c:	b29b      	uxth	r3, r3
 800975e:	b21b      	sxth	r3, r3
 8009760:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009764:	b21c      	sxth	r4, r3
 8009766:	2011      	movs	r0, #17
 8009768:	f7f7 ff76 	bl	8001658 <lwip_htons>
 800976c:	4603      	mov	r3, r0
 800976e:	b21b      	sxth	r3, r3
 8009770:	4323      	orrs	r3, r4
 8009772:	b21b      	sxth	r3, r3
 8009774:	b29a      	uxth	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	819a      	strh	r2, [r3, #12]
 800977a:	e010      	b.n	800979e <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	3314      	adds	r3, #20
 8009782:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	6858      	ldr	r0, [r3, #4]
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	891a      	ldrh	r2, [r3, #8]
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	891b      	ldrh	r3, [r3, #8]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	2201      	movs	r2, #1
 8009798:	6939      	ldr	r1, [r7, #16]
 800979a:	f7fa fb67 	bl	8003e6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f7 ff6c 	bl	8001682 <lwip_htonl>
 80097aa:	4603      	mov	r3, r0
 80097ac:	3301      	adds	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da02      	bge.n	80097c2 <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80097c2:	2300      	movs	r3, #0
 80097c4:	2200      	movs	r2, #0
 80097c6:	69b9      	ldr	r1, [r7, #24]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff fd3f 	bl	800924c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	69b9      	ldr	r1, [r7, #24]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fd86 	bl	80092e8 <tcp_output_control_segment>
 80097dc:	4603      	mov	r3, r0
 80097de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80097e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	372c      	adds	r7, #44	; 0x2c
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}
 80097ec:	08012ae4 	.word	0x08012ae4
 80097f0:	08013344 	.word	0x08013344
 80097f4:	08012b28 	.word	0x08012b28

080097f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009800:	f7fa fc54 	bl	80040ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <tcpip_tcp_timer+0x38>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d103      	bne.n	8009814 <tcpip_tcp_timer+0x1c>
 800980c:	4b09      	ldr	r3, [pc, #36]	; (8009834 <tcpip_tcp_timer+0x3c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009814:	2200      	movs	r2, #0
 8009816:	4908      	ldr	r1, [pc, #32]	; (8009838 <tcpip_tcp_timer+0x40>)
 8009818:	20fa      	movs	r0, #250	; 0xfa
 800981a:	f000 f8e9 	bl	80099f0 <sys_timeout>
 800981e:	e002      	b.n	8009826 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <tcpip_tcp_timer+0x44>)
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
  }
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20001740 	.word	0x20001740
 8009834:	20001750 	.word	0x20001750
 8009838:	080097f9 	.word	0x080097f9
 800983c:	200005e4 	.word	0x200005e4

08009840 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <tcp_timer_needed+0x30>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10f      	bne.n	800986c <tcp_timer_needed+0x2c>
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <tcp_timer_needed+0x34>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d103      	bne.n	800985c <tcp_timer_needed+0x1c>
 8009854:	4b08      	ldr	r3, [pc, #32]	; (8009878 <tcp_timer_needed+0x38>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d007      	beq.n	800986c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800985c:	4b04      	ldr	r3, [pc, #16]	; (8009870 <tcp_timer_needed+0x30>)
 800985e:	2201      	movs	r2, #1
 8009860:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009862:	2200      	movs	r2, #0
 8009864:	4905      	ldr	r1, [pc, #20]	; (800987c <tcp_timer_needed+0x3c>)
 8009866:	20fa      	movs	r0, #250	; 0xfa
 8009868:	f000 f8c2 	bl	80099f0 <sys_timeout>
  }
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}
 8009870:	200005e4 	.word	0x200005e4
 8009874:	20001740 	.word	0x20001740
 8009878:	20001750 	.word	0x20001750
 800987c:	080097f9 	.word	0x080097f9

08009880 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800988c:	2007      	movs	r0, #7
 800988e:	f7f9 fa09 	bl	8002ca4 <memp_malloc>
 8009892:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10d      	bne.n	80098b6 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d14d      	bne.n	800993c <sys_timeout_abs+0xbc>
 80098a0:	4b28      	ldr	r3, [pc, #160]	; (8009944 <sys_timeout_abs+0xc4>)
 80098a2:	22be      	movs	r2, #190	; 0xbe
 80098a4:	4928      	ldr	r1, [pc, #160]	; (8009948 <sys_timeout_abs+0xc8>)
 80098a6:	4829      	ldr	r0, [pc, #164]	; (800994c <sys_timeout_abs+0xcc>)
 80098a8:	f006 fc12 	bl	80100d0 <iprintf>
 80098ac:	2000      	movs	r0, #0
 80098ae:	f006 fd11 	bl	80102d4 <fflush>
 80098b2:	f006 fc56 	bl	8010162 <abort>
    return;
  }

  timeout->next = NULL;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80098ce:	4b20      	ldr	r3, [pc, #128]	; (8009950 <sys_timeout_abs+0xd0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 80098d6:	4a1e      	ldr	r2, [pc, #120]	; (8009950 <sys_timeout_abs+0xd0>)
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	6013      	str	r3, [r2, #0]
    return;
 80098dc:	e02f      	b.n	800993e <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <sys_timeout_abs+0xd0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da07      	bge.n	80098fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <sys_timeout_abs+0xd0>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80098f6:	4a16      	ldr	r2, [pc, #88]	; (8009950 <sys_timeout_abs+0xd0>)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	e01f      	b.n	800993e <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80098fe:	4b14      	ldr	r3, [pc, #80]	; (8009950 <sys_timeout_abs+0xd0>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e016      	b.n	8009934 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d007      	beq.n	800991e <sys_timeout_abs+0x9e>
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	da07      	bge.n	800992e <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	601a      	str	r2, [r3, #0]
        break;
 800992c:	e007      	b.n	800993e <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e5      	bne.n	8009906 <sys_timeout_abs+0x86>
 800993a:	e000      	b.n	800993e <sys_timeout_abs+0xbe>
    return;
 800993c:	bf00      	nop
      }
    }
  }
}
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	08013368 	.word	0x08013368
 8009948:	0801338c 	.word	0x0801338c
 800994c:	080133cc 	.word	0x080133cc
 8009950:	200005dc 	.word	0x200005dc

08009954 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4798      	blx	r3

  now = sys_now();
 8009966:	f7f7 fc1f 	bl	80011a8 <sys_now>
 800996a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <lwip_cyclic_timer+0x54>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4413      	add	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	da09      	bge.n	8009996 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	4413      	add	r3, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4907      	ldr	r1, [pc, #28]	; (80099ac <lwip_cyclic_timer+0x58>)
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff ff76 	bl	8009880 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8009994:	e004      	b.n	80099a0 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4904      	ldr	r1, [pc, #16]	; (80099ac <lwip_cyclic_timer+0x58>)
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff ff70 	bl	8009880 <sys_timeout_abs>
}
 80099a0:	bf00      	nop
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200005e0 	.word	0x200005e0
 80099ac:	08009955 	.word	0x08009955

080099b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80099b6:	2301      	movs	r3, #1
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	e00e      	b.n	80099da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80099bc:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <sys_timeouts_init+0x38>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <sys_timeouts_init+0x38>)
 80099ca:	4413      	add	r3, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4907      	ldr	r1, [pc, #28]	; (80099ec <sys_timeouts_init+0x3c>)
 80099d0:	f000 f80e 	bl	80099f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3301      	adds	r3, #1
 80099d8:	607b      	str	r3, [r7, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0ed      	beq.n	80099bc <sys_timeouts_init+0xc>
  }
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	08013890 	.word	0x08013890
 80099ec:	08009955 	.word	0x08009955

080099f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a02:	d30b      	bcc.n	8009a1c <sys_timeout+0x2c>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <sys_timeout+0x4c>)
 8009a06:	f240 1229 	movw	r2, #297	; 0x129
 8009a0a:	490d      	ldr	r1, [pc, #52]	; (8009a40 <sys_timeout+0x50>)
 8009a0c:	480d      	ldr	r0, [pc, #52]	; (8009a44 <sys_timeout+0x54>)
 8009a0e:	f006 fb5f 	bl	80100d0 <iprintf>
 8009a12:	2000      	movs	r0, #0
 8009a14:	f006 fc5e 	bl	80102d4 <fflush>
 8009a18:	f006 fba3 	bl	8010162 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 8009a1c:	f7f7 fbc4 	bl	80011a8 <sys_now>
 8009a20:	4602      	mov	r2, r0
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	6978      	ldr	r0, [r7, #20]
 8009a2e:	f7ff ff27 	bl	8009880 <sys_timeout_abs>
#endif
}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	08013368 	.word	0x08013368
 8009a40:	080133f4 	.word	0x080133f4
 8009a44:	080133cc 	.word	0x080133cc

08009a48 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8009a52:	4b19      	ldr	r3, [pc, #100]	; (8009ab8 <sys_untimeout+0x70>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02a      	beq.n	8009ab0 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009a5a:	4b17      	ldr	r3, [pc, #92]	; (8009ab8 <sys_untimeout+0x70>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60bb      	str	r3, [r7, #8]
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	e01f      	b.n	8009aa6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d115      	bne.n	8009a9c <sys_untimeout+0x54>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	68da      	ldr	r2, [r3, #12]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d110      	bne.n	8009a9c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <sys_untimeout+0x42>
        next_timeout = t->next;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a0c      	ldr	r2, [pc, #48]	; (8009ab8 <sys_untimeout+0x70>)
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	e003      	b.n	8009a92 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	2007      	movs	r0, #7
 8009a96:	f7f9 f96f 	bl	8002d78 <memp_free>
      return;
 8009a9a:	e00a      	b.n	8009ab2 <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1dc      	bne.n	8009a66 <sys_untimeout+0x1e>
    }
  }
  return;
 8009aac:	bf00      	nop
 8009aae:	e000      	b.n	8009ab2 <sys_untimeout+0x6a>
    return;
 8009ab0:	bf00      	nop
}
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200005dc 	.word	0x200005dc

08009abc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8009ac2:	f7f7 fb71 	bl	80011a8 <sys_now>
 8009ac6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8009ac8:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <sys_check_timeouts+0x64>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01e      	beq.n	8009b12 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	db1a      	blt.n	8009b16 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <sys_check_timeouts+0x64>)
 8009ae6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	4a0a      	ldr	r2, [pc, #40]	; (8009b24 <sys_check_timeouts+0x68>)
 8009afa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	2007      	movs	r0, #7
 8009b00:	f7f9 f93a 	bl	8002d78 <memp_free>
    if (handler != NULL) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0de      	beq.n	8009ac8 <sys_check_timeouts+0xc>
      handler(arg);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6838      	ldr	r0, [r7, #0]
 8009b0e:	4798      	blx	r3
  do {
 8009b10:	e7da      	b.n	8009ac8 <sys_check_timeouts+0xc>
      return;
 8009b12:	bf00      	nop
 8009b14:	e000      	b.n	8009b18 <sys_check_timeouts+0x5c>
      return;
 8009b16:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	200005dc 	.word	0x200005dc
 8009b24:	200005e0 	.word	0x200005e0

08009b28 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8009b2e:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <sys_timeouts_sleeptime+0x60>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d102      	bne.n	8009b3c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8009b36:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3a:	e021      	b.n	8009b80 <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 8009b3c:	f7f7 fb34 	bl	80011a8 <sys_now>
 8009b40:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8009b42:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <sys_timeouts_sleeptime+0x60>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	da01      	bge.n	8009b54 <sys_timeouts_sleeptime+0x2c>
    return 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e015      	b.n	8009b80 <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8009b54:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <sys_timeouts_sleeptime+0x60>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0b      	bge.n	8009b7e <sys_timeouts_sleeptime+0x56>
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <sys_timeouts_sleeptime+0x64>)
 8009b68:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b6c:	4908      	ldr	r1, [pc, #32]	; (8009b90 <sys_timeouts_sleeptime+0x68>)
 8009b6e:	4809      	ldr	r0, [pc, #36]	; (8009b94 <sys_timeouts_sleeptime+0x6c>)
 8009b70:	f006 faae 	bl	80100d0 <iprintf>
 8009b74:	2000      	movs	r0, #0
 8009b76:	f006 fbad 	bl	80102d4 <fflush>
 8009b7a:	f006 faf2 	bl	8010162 <abort>
    return ret;
 8009b7e:	683b      	ldr	r3, [r7, #0]
  }
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200005dc 	.word	0x200005dc
 8009b8c:	08013368 	.word	0x08013368
 8009b90:	0801342c 	.word	0x0801342c
 8009b94:	080133cc 	.word	0x080133cc

08009b98 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 8009bbe:	210c      	movs	r1, #12
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f004 ff53 	bl	800ea6c <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fc30 	bl	800c42c <lcp_lowerdown>

    ppp_link_terminated(pcb);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f004 ff3d 	bl	800ea4c <ppp_link_terminated>
 8009bd2:	e000      	b.n	8009bd6 <link_terminated+0x2a>
	return;
 8009bd4:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f80d 	bl	8009c04 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 8009bf4:	2106      	movs	r1, #6
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f004 ff38 	bl	800ea6c <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	e01e      	b.n	8009c50 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d007      	beq.n	8009c2e <upper_layers_down+0x2a>
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c36:	d208      	bcs.n	8009c4a <upper_layers_down+0x46>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	490c      	ldr	r1, [pc, #48]	; (8009c78 <upper_layers_down+0x74>)
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	4a0a      	ldr	r2, [pc, #40]	; (8009c7c <upper_layers_down+0x78>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c58:	60bb      	str	r3, [r7, #8]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1d8      	bne.n	8009c12 <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	08013440 	.word	0x08013440
 8009c7c:	08013960 	.word	0x08013960

08009c80 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	33cc      	adds	r3, #204	; 0xcc
 8009c8c:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
 8009c92:	e010      	b.n	8009cb6 <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d007      	beq.n	8009cb0 <link_established+0x30>
		&& protp->lowerup != NULL)
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <link_established+0x30>
		(*protp->lowerup)(pcb);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	4a19      	ldr	r2, [pc, #100]	; (8009d1c <link_established+0x9c>)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 8009cc6:	2107      	movs	r1, #7
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f004 fecf 	bl	800ea6c <new_phase>
    auth = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6859      	ldr	r1, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f005 fcc0 	bl	800f670 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f807 	bl	8009d20 <network_phase>
}
 8009d12:	bf00      	nop
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08013960 	.word	0x08013960

08009d20 <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f804 	bl	8009d36 <start_networks>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 8009d3e:	2109      	movs	r1, #9
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f004 fe93 	bl	800ea6c <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f804 	bl	8009d54 <continue_networks>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e017      	b.n	8009d92 <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d6a:	d20f      	bcs.n	8009d8c <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <continue_networks+0x38>
	    (*protp->open)(pcb);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	4798      	blx	r3
	    ++pcb->num_np_open;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8009d82:	3301      	adds	r3, #1
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	4a0a      	ldr	r2, [pc, #40]	; (8009dbc <continue_networks+0x68>)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d9a:	60bb      	str	r3, [r7, #8]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1df      	bne.n	8009d62 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d103      	bne.n	8009db4 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 8009dac:	4904      	ldr	r1, [pc, #16]	; (8009dc0 <continue_networks+0x6c>)
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f002 faa0 	bl	800c2f4 <lcp_close>
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	08013960 	.word	0x08013960
 8009dc0:	0801344c 	.word	0x0801344c

08009dc4 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2207      	movs	r2, #7
 8009dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 8009dd6:	4904      	ldr	r1, [pc, #16]	; (8009de8 <auth_withpeer_fail+0x24>)
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f002 fa8b 	bl	800c2f4 <lcp_close>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	0801346c 	.word	0x0801346c

08009dec <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <auth_withpeer_success+0x6c>)
 8009dfa:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f24c 0223 	movw	r2, #49187	; 0xc023
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d104      	bne.n	8009e10 <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 8009e0a:	4b14      	ldr	r3, [pc, #80]	; (8009e5c <auth_withpeer_success+0x70>)
 8009e0c:	613b      	str	r3, [r7, #16]
	break;
 8009e0e:	e001      	b.n	8009e14 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e18:	b21a      	sxth	r2, r3
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	b21b      	sxth	r3, r3
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	b21b      	sxth	r3, r3
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009e2c:	b21a      	sxth	r2, r3
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	43db      	mvns	r3, r3
 8009e34:	b21b      	sxth	r3, r3
 8009e36:	4013      	ands	r3, r2
 8009e38:	b21b      	sxth	r3, r3
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	861a      	strh	r2, [r3, #48]	; 0x30
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <auth_withpeer_success+0x62>
	network_phase(pcb);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff ff69 	bl	8009d20 <network_phase>
}
 8009e4e:	bf00      	nop
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	08013498 	.word	0x08013498
 8009e5c:	0801349c 	.word	0x0801349c

08009e60 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 8009e74:	210a      	movs	r1, #10
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f004 fdf8 	bl	800ea6c <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 8009eb8:	2109      	movs	r1, #9
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f004 fdd6 	bl	800ea6c <new_phase>
    }
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 8009eec:	4903      	ldr	r1, [pc, #12]	; (8009efc <np_finished+0x34>)
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f002 fa00 	bl	800c2f4 <lcp_close>
    }
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	0801344c 	.word	0x0801344c

08009f00 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	7c5a      	ldrb	r2, [r3, #17]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	761a      	strb	r2, [r3, #24]
}
 8009f2e:	bf00      	nop
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7c1b      	ldrb	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <fsm_lowerup+0x16>
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d004      	beq.n	8009f58 <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 8009f4e:	e015      	b.n	8009f7c <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	741a      	strb	r2, [r3, #16]
	break;
 8009f56:	e011      	b.n	8009f7c <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7c5b      	ldrb	r3, [r3, #17]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2203      	movs	r2, #3
 8009f68:	741a      	strb	r2, [r3, #16]
	break;
 8009f6a:	e006      	b.n	8009f7a <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fdb2 	bl	800aad8 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2206      	movs	r2, #6
 8009f78:	741a      	strb	r2, [r3, #16]
	break;
 8009f7a:	bf00      	nop
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	7c1b      	ldrb	r3, [r3, #16]
 8009f90:	3b02      	subs	r3, #2
 8009f92:	2b07      	cmp	r3, #7
 8009f94:	d843      	bhi.n	800a01e <fsm_lowerdown+0x9a>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <fsm_lowerdown+0x18>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fbd 	.word	0x08009fbd
 8009fa0:	08009fc5 	.word	0x08009fc5
 8009fa4:	08009fe1 	.word	0x08009fe1
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009ff1 	.word	0x08009ff1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009ff1 	.word	0x08009ff1
 8009fb8:	0800a001 	.word	0x0800a001
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	741a      	strb	r2, [r3, #16]
	break;
 8009fc2:	e02c      	b.n	800a01e <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d023      	beq.n	800a01c <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
	break;
 8009fde:	e01d      	b.n	800a01c <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	480f      	ldr	r0, [pc, #60]	; (800a028 <fsm_lowerdown+0xa4>)
 8009fea:	f7ff fd2d 	bl	8009a48 <sys_untimeout>
	break;
 8009fee:	e016      	b.n	800a01e <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	480b      	ldr	r0, [pc, #44]	; (800a028 <fsm_lowerdown+0xa4>)
 8009ffa:	f7ff fd25 	bl	8009a48 <sys_untimeout>
	break;
 8009ffe:	e00e      	b.n	800a01e <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	741a      	strb	r2, [r3, #16]
	break;
 800a01a:	e000      	b.n	800a01e <fsm_lowerdown+0x9a>
	break;
 800a01c:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	0800a255 	.word	0x0800a255

0800a02c <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7c1b      	ldrb	r3, [r3, #16]
 800a038:	2b09      	cmp	r3, #9
 800a03a:	d847      	bhi.n	800a0cc <fsm_open+0xa0>
 800a03c:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <fsm_open+0x18>)
 800a03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a042:	bf00      	nop
 800a044:	0800a06d 	.word	0x0800a06d
 800a048:	0800a0cd 	.word	0x0800a0cd
 800a04c:	0800a089 	.word	0x0800a089
 800a050:	0800a0b3 	.word	0x0800a0b3
 800a054:	0800a0ad 	.word	0x0800a0ad
 800a058:	0800a0cd 	.word	0x0800a0cd
 800a05c:	0800a0cd 	.word	0x0800a0cd
 800a060:	0800a0cd 	.word	0x0800a0cd
 800a064:	0800a0cd 	.word	0x0800a0cd
 800a068:	0800a0b3 	.word	0x0800a0b3
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d029      	beq.n	800a0d0 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	4798      	blx	r3
	break;
 800a086:	e023      	b.n	800a0d0 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	7c5b      	ldrb	r3, [r3, #17]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2203      	movs	r2, #3
 800a098:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800a09a:	e01c      	b.n	800a0d6 <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fd1a 	bl	800aad8 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2206      	movs	r2, #6
 800a0a8:	741a      	strb	r2, [r3, #16]
	break;
 800a0aa:	e014      	b.n	800a0d6 <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2205      	movs	r2, #5
 800a0b0:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	7c5b      	ldrb	r3, [r3, #17]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00a      	beq.n	800a0d4 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7ff ff60 	bl	8009f84 <fsm_lowerdown>
	    fsm_lowerup(f);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff ff38 	bl	8009f3a <fsm_lowerup>
	}
	break;
 800a0ca:	e003      	b.n	800a0d4 <fsm_open+0xa8>
    default:
	break;
 800a0cc:	bf00      	nop
 800a0ce:	e002      	b.n	800a0d6 <fsm_open+0xaa>
	break;
 800a0d0:	bf00      	nop
 800a0d2:	e000      	b.n	800a0d6 <fsm_open+0xaa>
	break;
 800a0d4:	bf00      	nop
    }
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop

0800a0e0 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7c1b      	ldrb	r3, [r3, #16]
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d004      	beq.n	800a102 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	482f      	ldr	r0, [pc, #188]	; (800a1b8 <terminate_layer+0xd8>)
 800a0fc:	f7ff fca4 	bl	8009a48 <sys_untimeout>
 800a100:	e009      	b.n	800a116 <terminate_layer+0x36>
    else if( f->callbacks->down )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d004      	beq.n	800a116 <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	7c1a      	ldrb	r2, [r3, #16]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7c9b      	ldrb	r3, [r3, #18]
 800a122:	3301      	adds	r3, #1
 800a124:	b2da      	uxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	749a      	strb	r2, [r3, #18]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7c9a      	ldrb	r2, [r3, #18]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	74da      	strb	r2, [r3, #19]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6899      	ldr	r1, [r3, #8]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	460b      	mov	r3, r1
 800a142:	2105      	movs	r1, #5
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fdb5 	bl	800acb4 <fsm_sdata>

    if (f->retransmits == 0) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	7d1b      	ldrb	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d112      	bne.n	800a178 <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b04      	cmp	r3, #4
 800a156:	d101      	bne.n	800a15c <terminate_layer+0x7c>
 800a158:	2202      	movs	r2, #2
 800a15a:	e000      	b.n	800a15e <terminate_layer+0x7e>
 800a15c:	2203      	movs	r2, #3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d020      	beq.n	800a1ae <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
	return;
 800a176:	e01a      	b.n	800a1ae <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	480f      	ldr	r0, [pc, #60]	; (800a1b8 <terminate_layer+0xd8>)
 800a17c:	f7ff fc64 	bl	8009a48 <sys_untimeout>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	7b9b      	ldrb	r3, [r3, #14]
 800a184:	461a      	mov	r2, r3
 800a186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a18a:	fb03 f302 	mul.w	r3, r3, r2
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	4909      	ldr	r1, [pc, #36]	; (800a1b8 <terminate_layer+0xd8>)
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fc2c 	bl	80099f0 <sys_timeout>
    --f->retransmits;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7d1b      	ldrb	r3, [r3, #20]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	741a      	strb	r2, [r3, #16]
 800a1ac:	e000      	b.n	800a1b0 <terminate_layer+0xd0>
	return;
 800a1ae:	bf00      	nop
}
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800a255 	.word	0x0800a255

0800a1bc <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <fsm_close+0x32>
 800a1d2:	6838      	ldr	r0, [r7, #0]
 800a1d4:	f7f5 fffc 	bl	80001d0 <strlen>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2bfe      	cmp	r3, #254	; 0xfe
 800a1dc:	d805      	bhi.n	800a1ea <fsm_close+0x2e>
 800a1de:	6838      	ldr	r0, [r7, #0]
 800a1e0:	f7f5 fff6 	bl	80001d0 <strlen>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	e002      	b.n	800a1f0 <fsm_close+0x34>
 800a1ea:	23ff      	movs	r3, #255	; 0xff
 800a1ec:	e000      	b.n	800a1f0 <fsm_close+0x34>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7c1b      	ldrb	r3, [r3, #16]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	2b08      	cmp	r3, #8
 800a1fc:	d825      	bhi.n	800a24a <fsm_close+0x8e>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <fsm_close+0x48>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a24b 	.word	0x0800a24b
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a24b 	.word	0x0800a24b
 800a214:	0800a239 	.word	0x0800a239
 800a218:	0800a241 	.word	0x0800a241
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a241 	.word	0x0800a241
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	741a      	strb	r2, [r3, #16]
	break;
 800a22e:	e00d      	b.n	800a24c <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	741a      	strb	r2, [r3, #16]
	break;
 800a236:	e009      	b.n	800a24c <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2204      	movs	r2, #4
 800a23c:	741a      	strb	r2, [r3, #16]
	break;
 800a23e:	e005      	b.n	800a24c <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800a240:	2104      	movs	r1, #4
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff ff4c 	bl	800a0e0 <terminate_layer>
	break;
 800a248:	e000      	b.n	800a24c <fsm_close+0x90>
    default:
	break;
 800a24a:	bf00      	nop
    }
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af02      	add	r7, sp, #8
 800a25a:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	3b04      	subs	r3, #4
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	f200 8083 	bhi.w	800a378 <fsm_timeout+0x124>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <fsm_timeout+0x24>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a28d 	.word	0x0800a28d
 800a27c:	0800a28d 	.word	0x0800a28d
 800a280:	0800a317 	.word	0x0800a317
 800a284:	0800a317 	.word	0x0800a317
 800a288:	0800a317 	.word	0x0800a317
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	7d1b      	ldrb	r3, [r3, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d113      	bne.n	800a2bc <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	7c1b      	ldrb	r3, [r3, #16]
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d101      	bne.n	800a2a0 <fsm_timeout+0x4c>
 800a29c:	2202      	movs	r2, #2
 800a29e:	e000      	b.n	800a2a2 <fsm_timeout+0x4e>
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d060      	beq.n	800a372 <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800a2ba:	e05a      	b.n	800a372 <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	7c9b      	ldrb	r3, [r3, #18]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	749a      	strb	r2, [r3, #18]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	7c9a      	ldrb	r2, [r3, #18]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	74da      	strb	r2, [r3, #19]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6899      	ldr	r1, [r3, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	2105      	movs	r1, #5
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fce6 	bl	800acb4 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a2e8:	68f9      	ldr	r1, [r7, #12]
 800a2ea:	4825      	ldr	r0, [pc, #148]	; (800a380 <fsm_timeout+0x12c>)
 800a2ec:	f7ff fbac 	bl	8009a48 <sys_untimeout>
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	7b9b      	ldrb	r3, [r3, #14]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2fa:	fb03 f302 	mul.w	r3, r3, r2
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	491f      	ldr	r1, [pc, #124]	; (800a380 <fsm_timeout+0x12c>)
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fb74 	bl	80099f0 <sys_timeout>
	    --f->retransmits;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	751a      	strb	r2, [r3, #20]
	break;
 800a314:	e02d      	b.n	800a372 <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	7d1b      	ldrb	r3, [r3, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d113      	bne.n	800a346 <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2203      	movs	r2, #3
 800a322:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	7c5b      	ldrb	r3, [r3, #17]
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d122      	bne.n	800a376 <fsm_timeout+0x122>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01d      	beq.n	800a376 <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800a344:	e017      	b.n	800a376 <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800a35a:	2101      	movs	r1, #1
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fbbb 	bl	800aad8 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	7c1b      	ldrb	r3, [r3, #16]
 800a366:	2b07      	cmp	r3, #7
 800a368:	d105      	bne.n	800a376 <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2206      	movs	r2, #6
 800a36e:	741a      	strb	r2, [r3, #16]
	break;
 800a370:	e001      	b.n	800a376 <fsm_timeout+0x122>
	break;
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <fsm_timeout+0x124>
	break;
 800a376:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800a378:	bf00      	nop
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	0800a255 	.word	0x0800a255

0800a384 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800a384:	b590      	push	{r4, r7, lr}
 800a386:	b08b      	sub	sp, #44	; 0x2c
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b03      	cmp	r3, #3
 800a398:	f340 808c 	ble.w	800a4b4 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	61fa      	str	r2, [r7, #28]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	61fa      	str	r2, [r7, #28]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	61fa      	str	r2, [r7, #28]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	021b      	lsls	r3, r3, #8
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	61fa      	str	r2, [r7, #28]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	dd72      	ble.n	800a4b8 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	dc70      	bgt.n	800a4bc <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	7c1b      	ldrb	r3, [r3, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d06b      	beq.n	800a4c0 <fsm_input+0x13c>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	7c1b      	ldrb	r3, [r3, #16]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d067      	beq.n	800a4c0 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800a3f0:	7efb      	ldrb	r3, [r7, #27]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	2b06      	cmp	r3, #6
 800a3f6:	d839      	bhi.n	800a46c <fsm_input+0xe8>
 800a3f8:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <fsm_input+0x7c>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a41d 	.word	0x0800a41d
 800a404:	0800a42b 	.word	0x0800a42b
 800a408:	0800a439 	.word	0x0800a439
 800a40c:	0800a439 	.word	0x0800a439
 800a410:	0800a44b 	.word	0x0800a44b
 800a414:	0800a459 	.word	0x0800a459
 800a418:	0800a461 	.word	0x0800a461
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800a41c:	7eb9      	ldrb	r1, [r7, #26]
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f852 	bl	800a4cc <fsm_rconfreq>
	break;
 800a428:	e04d      	b.n	800a4c6 <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800a42a:	7eb9      	ldrb	r1, [r7, #26]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f8f1 	bl	800a618 <fsm_rconfack>
	break;
 800a436:	e046      	b.n	800a4c6 <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800a438:	7ef9      	ldrb	r1, [r7, #27]
 800a43a:	7eba      	ldrb	r2, [r7, #26]
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f988 	bl	800a758 <fsm_rconfnakrej>
	break;
 800a448:	e03d      	b.n	800a4c6 <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800a44a:	7eb9      	ldrb	r1, [r7, #26]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fa2b 	bl	800a8ac <fsm_rtermreq>
	break;
 800a456:	e036      	b.n	800a4c6 <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fa6f 	bl	800a93c <fsm_rtermack>
	break;
 800a45e:	e032      	b.n	800a4c6 <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	69f9      	ldr	r1, [r7, #28]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 fac7 	bl	800a9f8 <fsm_rcoderej>
	break;
 800a46a:	e02c      	b.n	800a4c6 <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a47c:	7ef9      	ldrb	r1, [r7, #27]
 800a47e:	7eba      	ldrb	r2, [r7, #26]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	47a0      	blx	r4
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d119      	bne.n	800a4c4 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	7c9b      	ldrb	r3, [r3, #18]
 800a494:	3301      	adds	r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	749a      	strb	r2, [r3, #18]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	7c9a      	ldrb	r2, [r3, #18]
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2107      	movs	r1, #7
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fc02 	bl	800acb4 <fsm_sdata>
	break;
 800a4b0:	bf00      	nop
 800a4b2:	e007      	b.n	800a4c4 <fsm_input+0x140>
	return;
 800a4b4:	bf00      	nop
 800a4b6:	e006      	b.n	800a4c6 <fsm_input+0x142>
	return;
 800a4b8:	bf00      	nop
 800a4ba:	e004      	b.n	800a4c6 <fsm_input+0x142>
	return;
 800a4bc:	bf00      	nop
 800a4be:	e002      	b.n	800a4c6 <fsm_input+0x142>
	return;
 800a4c0:	bf00      	nop
 800a4c2:	e000      	b.n	800a4c6 <fsm_input+0x142>
	break;
 800a4c4:	bf00      	nop
    }
}
 800a4c6:	3724      	adds	r7, #36	; 0x24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}

0800a4cc <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b089      	sub	sp, #36	; 0x24
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	7c1b      	ldrb	r3, [r3, #16]
 800a4e0:	3b02      	subs	r3, #2
 800a4e2:	2b07      	cmp	r3, #7
 800a4e4:	d835      	bhi.n	800a552 <fsm_rconfreq+0x86>
 800a4e6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <fsm_rconfreq+0x20>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a543 	.word	0x0800a543
 800a4f4:	0800a60b 	.word	0x0800a60b
 800a4f8:	0800a60b 	.word	0x0800a60b
 800a4fc:	0800a553 	.word	0x0800a553
 800a500:	0800a553 	.word	0x0800a553
 800a504:	0800a553 	.word	0x0800a553
 800a508:	0800a51f 	.word	0x0800a51f
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800a50c:	7afa      	ldrb	r2, [r7, #11]
 800a50e:	2300      	movs	r3, #0
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	2300      	movs	r3, #0
 800a514:	2106      	movs	r1, #6
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fbcc 	bl	800acb4 <fsm_sdata>
	return;
 800a51c:	e076      	b.n	800a60c <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a532:	2100      	movs	r1, #0
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 facf 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2206      	movs	r2, #6
 800a53e:	741a      	strb	r2, [r3, #16]
	break;
 800a540:	e008      	b.n	800a554 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a542:	2100      	movs	r1, #0
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fac7 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2206      	movs	r2, #6
 800a54e:	741a      	strb	r2, [r3, #16]
	break;
 800a550:	e000      	b.n	800a554 <fsm_rconfreq+0x88>
    default:
	break;
 800a552:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d013      	beq.n	800a586 <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	7d5a      	ldrb	r2, [r3, #21]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	7ddb      	ldrb	r3, [r3, #23]
 800a566:	429a      	cmp	r2, r3
 800a568:	bf2c      	ite	cs
 800a56a:	2301      	movcs	r3, #1
 800a56c:	2300      	movcc	r3, #0
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	699c      	ldr	r4, [r3, #24]
 800a578:	463a      	mov	r2, r7
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	47a0      	blx	r4
 800a582:	6178      	str	r0, [r7, #20]
 800a584:	e007      	b.n	800a596 <fsm_rconfreq+0xca>
    } else if (len)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800a58c:	2304      	movs	r3, #4
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e001      	b.n	800a596 <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800a592:	2302      	movs	r3, #2
 800a594:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	b2d9      	uxtb	r1, r3
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	7afa      	ldrb	r2, [r7, #11]
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fb86 	bl	800acb4 <fsm_sdata>

    if (code == CONFACK) {
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d11c      	bne.n	800a5e8 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	7c1b      	ldrb	r3, [r3, #16]
 800a5b2:	2b07      	cmp	r3, #7
 800a5b4:	d111      	bne.n	800a5da <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	4816      	ldr	r0, [pc, #88]	; (800a614 <fsm_rconfreq+0x148>)
 800a5ba:	f7ff fa45 	bl	8009a48 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2209      	movs	r2, #9
 800a5c2:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d008      	beq.n	800a5e0 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	4798      	blx	r3
 800a5d8:	e002      	b.n	800a5e0 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2208      	movs	r2, #8
 800a5de:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	755a      	strb	r2, [r3, #21]
 800a5e6:	e011      	b.n	800a60c <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	7c1b      	ldrb	r3, [r3, #16]
 800a5ec:	2b07      	cmp	r3, #7
 800a5ee:	d002      	beq.n	800a5f6 <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2206      	movs	r2, #6
 800a5f4:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d107      	bne.n	800a60c <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	7d5b      	ldrb	r3, [r3, #21]
 800a600:	3301      	adds	r3, #1
 800a602:	b2da      	uxtb	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	755a      	strb	r2, [r3, #21]
 800a608:	e000      	b.n	800a60c <fsm_rconfreq+0x140>
	return;
 800a60a:	bf00      	nop
    }
}
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}
 800a612:	bf00      	nop
 800a614:	0800a255 	.word	0x0800a255

0800a618 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	7cdb      	ldrb	r3, [r3, #19]
 800a630:	461a      	mov	r2, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	429a      	cmp	r2, r3
 800a636:	f040 8083 	bne.w	800a740 <fsm_rconfack+0x128>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	7b1b      	ldrb	r3, [r3, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d17e      	bne.n	800a740 <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00d      	beq.n	800a668 <fsm_rconfack+0x50>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bf0c      	ite	eq
 800a660:	2301      	moveq	r3, #1
 800a662:	2300      	movne	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	e005      	b.n	800a674 <fsm_rconfack+0x5c>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	bf14      	ite	ne
 800a66e:	2301      	movne	r3, #1
 800a670:	2300      	moveq	r3, #0
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d165      	bne.n	800a744 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2201      	movs	r2, #1
 800a67c:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	7c1b      	ldrb	r3, [r3, #16]
 800a688:	3b02      	subs	r3, #2
 800a68a:	2b07      	cmp	r3, #7
 800a68c:	d85c      	bhi.n	800a748 <fsm_rconfack+0x130>
 800a68e:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <fsm_rconfack+0x7c>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6b5 	.word	0x0800a6b5
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a749 	.word	0x0800a749
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a6c9 	.word	0x0800a6c9
 800a6a8:	0800a6d9 	.word	0x0800a6d9
 800a6ac:	0800a6f1 	.word	0x0800a6f1
 800a6b0:	0800a71d 	.word	0x0800a71d
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2106      	movs	r1, #6
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 faf7 	bl	800acb4 <fsm_sdata>
	break;
 800a6c6:	e042      	b.n	800a74e <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2207      	movs	r2, #7
 800a6cc:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	7bda      	ldrb	r2, [r3, #15]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	751a      	strb	r2, [r3, #20]
	break;
 800a6d6:	e03a      	b.n	800a74e <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a6d8:	68f9      	ldr	r1, [r7, #12]
 800a6da:	481e      	ldr	r0, [pc, #120]	; (800a754 <fsm_rconfack+0x13c>)
 800a6dc:	f7ff f9b4 	bl	8009a48 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f9f8 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2206      	movs	r2, #6
 800a6ec:	741a      	strb	r2, [r3, #16]
	break;
 800a6ee:	e02e      	b.n	800a74e <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a6f0:	68f9      	ldr	r1, [r7, #12]
 800a6f2:	4818      	ldr	r0, [pc, #96]	; (800a754 <fsm_rconfack+0x13c>)
 800a6f4:	f7ff f9a8 	bl	8009a48 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2209      	movs	r2, #9
 800a6fc:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	7bda      	ldrb	r2, [r3, #15]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01d      	beq.n	800a74c <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	4798      	blx	r3
	break;
 800a71a:	e017      	b.n	800a74c <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d004      	beq.n	800a730 <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a730:	2100      	movs	r1, #0
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f9d0 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2206      	movs	r2, #6
 800a73c:	741a      	strb	r2, [r3, #16]
	break;
 800a73e:	e006      	b.n	800a74e <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800a740:	bf00      	nop
 800a742:	e004      	b.n	800a74e <fsm_rconfack+0x136>
	return;
 800a744:	bf00      	nop
 800a746:	e002      	b.n	800a74e <fsm_rconfack+0x136>
    default:
	break;
 800a748:	bf00      	nop
 800a74a:	e000      	b.n	800a74e <fsm_rconfack+0x136>
	break;
 800a74c:	bf00      	nop
    }
}
 800a74e:	3718      	adds	r7, #24
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	0800a255 	.word	0x0800a255

0800a758 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800a758:	b590      	push	{r4, r7, lr}
 800a75a:	b089      	sub	sp, #36	; 0x24
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	7cdb      	ldrb	r3, [r3, #19]
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	f040 8090 	bne.w	800a894 <fsm_rconfnakrej+0x13c>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	7b1b      	ldrb	r3, [r3, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f040 808b 	bne.w	800a894 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b03      	cmp	r3, #3
 800a782:	d121      	bne.n	800a7c8 <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	7d9b      	ldrb	r3, [r3, #22]
 800a788:	3301      	adds	r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	7d9a      	ldrb	r2, [r3, #22]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	7ddb      	ldrb	r3, [r3, #23]
 800a798:	429a      	cmp	r2, r3
 800a79a:	bf2c      	ite	cs
 800a79c:	2301      	movcs	r3, #1
 800a79e:	2300      	movcc	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d074      	beq.n	800a898 <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	691c      	ldr	r4, [r3, #16]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	47a0      	blx	r4
 800a7be:	6178      	str	r0, [r7, #20]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d113      	bne.n	800a7ee <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800a7c6:	e067      	b.n	800a898 <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d061      	beq.n	800a89c <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3
 800a7e6:	6178      	str	r0, [r7, #20]
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d056      	beq.n	800a89c <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	7c1b      	ldrb	r3, [r3, #16]
 800a7f8:	3b02      	subs	r3, #2
 800a7fa:	2b07      	cmp	r3, #7
 800a7fc:	d850      	bhi.n	800a8a0 <fsm_rconfnakrej+0x148>
 800a7fe:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <fsm_rconfnakrej+0xac>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a825 	.word	0x0800a825
 800a808:	0800a825 	.word	0x0800a825
 800a80c:	0800a8a1 	.word	0x0800a8a1
 800a810:	0800a8a1 	.word	0x0800a8a1
 800a814:	0800a839 	.word	0x0800a839
 800a818:	0800a859 	.word	0x0800a859
 800a81c:	0800a839 	.word	0x0800a839
 800a820:	0800a871 	.word	0x0800a871
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	b2da      	uxtb	r2, r3
 800a828:	2300      	movs	r3, #0
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	2300      	movs	r3, #0
 800a82e:	2106      	movs	r1, #6
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fa3f 	bl	800acb4 <fsm_sdata>
	break;
 800a836:	e034      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	481b      	ldr	r0, [pc, #108]	; (800a8a8 <fsm_rconfnakrej+0x150>)
 800a83c:	f7ff f904 	bl	8009a48 <sys_untimeout>
	if (ret < 0)
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	da03      	bge.n	800a84e <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2203      	movs	r2, #3
 800a84a:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800a84c:	e029      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800a84e:	2100      	movs	r1, #0
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 f941 	bl	800aad8 <fsm_sconfreq>
	break;
 800a856:	e024      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800a858:	68f9      	ldr	r1, [r7, #12]
 800a85a:	4813      	ldr	r0, [pc, #76]	; (800a8a8 <fsm_rconfnakrej+0x150>)
 800a85c:	f7ff f8f4 	bl	8009a48 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800a860:	2100      	movs	r1, #0
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 f938 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2206      	movs	r2, #6
 800a86c:	741a      	strb	r2, [r3, #16]
	break;
 800a86e:	e018      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800a884:	2100      	movs	r1, #0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 f926 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2206      	movs	r2, #6
 800a890:	741a      	strb	r2, [r3, #16]
	break;
 800a892:	e006      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800a894:	bf00      	nop
 800a896:	e004      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>
	    return;
 800a898:	bf00      	nop
 800a89a:	e002      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>
	    return;
 800a89c:	bf00      	nop
 800a89e:	e000      	b.n	800a8a2 <fsm_rconfnakrej+0x14a>
    default:
	break;
 800a8a0:	bf00      	nop
    }
}
 800a8a2:	371c      	adds	r7, #28
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd90      	pop	{r4, r7, pc}
 800a8a8:	0800a255 	.word	0x0800a255

0800a8ac <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	7c1b      	ldrb	r3, [r3, #16]
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	db29      	blt.n	800a91c <fsm_rtermreq+0x70>
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	dd02      	ble.n	800a8d2 <fsm_rtermreq+0x26>
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d004      	beq.n	800a8da <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800a8d0:	e024      	b.n	800a91c <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2206      	movs	r2, #6
 800a8d6:	741a      	strb	r2, [r3, #16]
	break;
 800a8d8:	e021      	b.n	800a91e <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2205      	movs	r2, #5
 800a8e4:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d004      	beq.n	800a8fa <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	480e      	ldr	r0, [pc, #56]	; (800a938 <fsm_rtermreq+0x8c>)
 800a8fe:	f7ff f8a3 	bl	8009a48 <sys_untimeout>
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	7b9b      	ldrb	r3, [r3, #14]
 800a906:	461a      	mov	r2, r3
 800a908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a90c:	fb03 f302 	mul.w	r3, r3, r2
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4909      	ldr	r1, [pc, #36]	; (800a938 <fsm_rtermreq+0x8c>)
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff f86b 	bl	80099f0 <sys_timeout>
	break;
 800a91a:	e000      	b.n	800a91e <fsm_rtermreq+0x72>
	break;
 800a91c:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	b2da      	uxtb	r2, r3
 800a922:	2300      	movs	r3, #0
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	2300      	movs	r3, #0
 800a928:	2106      	movs	r1, #6
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 f9c2 	bl	800acb4 <fsm_sdata>
}
 800a930:	bf00      	nop
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	0800a255 	.word	0x0800a255

0800a93c <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7c1b      	ldrb	r3, [r3, #16]
 800a948:	3b04      	subs	r3, #4
 800a94a:	2b05      	cmp	r3, #5
 800a94c:	d848      	bhi.n	800a9e0 <fsm_rtermack+0xa4>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <fsm_rtermack+0x18>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a96d 	.word	0x0800a96d
 800a958:	0800a991 	.word	0x0800a991
 800a95c:	0800a9e1 	.word	0x0800a9e1
 800a960:	0800a9b5 	.word	0x0800a9b5
 800a964:	0800a9e1 	.word	0x0800a9e1
 800a968:	0800a9bd 	.word	0x0800a9bd
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4821      	ldr	r0, [pc, #132]	; (800a9f4 <fsm_rtermack+0xb8>)
 800a970:	f7ff f86a 	bl	8009a48 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	2b00      	cmp	r3, #0
 800a982:	d02f      	beq.n	800a9e4 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4798      	blx	r3
	break;
 800a98e:	e029      	b.n	800a9e4 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4818      	ldr	r0, [pc, #96]	; (800a9f4 <fsm_rtermack+0xb8>)
 800a994:	f7ff f858 	bl	8009a48 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2203      	movs	r2, #3
 800a99c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01f      	beq.n	800a9e8 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
	break;
 800a9b2:	e019      	b.n	800a9e8 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2206      	movs	r2, #6
 800a9b8:	741a      	strb	r2, [r3, #16]
	break;
 800a9ba:	e016      	b.n	800a9ea <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f880 	bl	800aad8 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2206      	movs	r2, #6
 800a9dc:	741a      	strb	r2, [r3, #16]
	break;
 800a9de:	e004      	b.n	800a9ea <fsm_rtermack+0xae>
    default:
	break;
 800a9e0:	bf00      	nop
 800a9e2:	e002      	b.n	800a9ea <fsm_rtermack+0xae>
	break;
 800a9e4:	bf00      	nop
 800a9e6:	e000      	b.n	800a9ea <fsm_rtermack+0xae>
	break;
 800a9e8:	bf00      	nop
    }
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0800a255 	.word	0x0800a255

0800a9f8 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	dd11      	ble.n	800aa2e <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	60ba      	str	r2, [r7, #8]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	60ba      	str	r2, [r7, #8]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	7c1b      	ldrb	r3, [r3, #16]
 800aa22:	2b07      	cmp	r3, #7
 800aa24:	d104      	bne.n	800aa30 <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2206      	movs	r2, #6
 800aa2a:	741a      	strb	r2, [r3, #16]
 800aa2c:	e000      	b.n	800aa30 <fsm_rcoderej+0x38>
	return;
 800aa2e:	bf00      	nop
}
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
	...

0800aa3c <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7c1b      	ldrb	r3, [r3, #16]
 800aa48:	3b02      	subs	r3, #2
 800aa4a:	2b07      	cmp	r3, #7
 800aa4c:	d83e      	bhi.n	800aacc <fsm_protreject+0x90>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <fsm_protreject+0x18>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aaa1 	.word	0x0800aaa1
 800aa5c:	0800aa75 	.word	0x0800aa75
 800aa60:	0800aa99 	.word	0x0800aa99
 800aa64:	0800aa99 	.word	0x0800aa99
 800aa68:	0800aa99 	.word	0x0800aa99
 800aa6c:	0800aa99 	.word	0x0800aa99
 800aa70:	0800aabd 	.word	0x0800aabd
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	4817      	ldr	r0, [pc, #92]	; (800aad4 <fsm_protreject+0x98>)
 800aa78:	f7fe ffe6 	bl	8009a48 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d01c      	beq.n	800aac6 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
	break;
 800aa96:	e016      	b.n	800aac6 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	480e      	ldr	r0, [pc, #56]	; (800aad4 <fsm_protreject+0x98>)
 800aa9c:	f7fe ffd4 	bl	8009a48 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00c      	beq.n	800aaca <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
	break;
 800aaba:	e006      	b.n	800aaca <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800aabc:	2105      	movs	r1, #5
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff fb0e 	bl	800a0e0 <terminate_layer>
	break;
 800aac4:	e002      	b.n	800aacc <fsm_protreject+0x90>
	break;
 800aac6:	bf00      	nop
 800aac8:	e000      	b.n	800aacc <fsm_protreject+0x90>
	break;
 800aaca:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	0800a255 	.word	0x0800a255

0800aad8 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7c1b      	ldrb	r3, [r3, #16]
 800aaec:	2b06      	cmp	r3, #6
 800aaee:	d017      	beq.n	800ab20 <fsm_sconfreq+0x48>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7c1b      	ldrb	r3, [r3, #16]
 800aaf4:	2b07      	cmp	r3, #7
 800aaf6:	d013      	beq.n	800ab20 <fsm_sconfreq+0x48>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7c1b      	ldrb	r3, [r3, #16]
 800aafc:	2b08      	cmp	r3, #8
 800aafe:	d00f      	beq.n	800ab20 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	4798      	blx	r3
	f->nakloops = 0;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10d      	bne.n	800ab42 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	7bda      	ldrb	r2, [r3, #15]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7c9b      	ldrb	r3, [r3, #18]
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	749a      	strb	r2, [r3, #18]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	7c9a      	ldrb	r2, [r3, #18]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d018      	beq.n	800ab84 <fsm_sconfreq+0xac>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d013      	beq.n	800ab84 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800ab70:	1f1a      	subs	r2, r3, #4
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	da07      	bge.n	800ab88 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800ab7e:	3b04      	subs	r3, #4
 800ab80:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800ab82:	e001      	b.n	800ab88 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab94:	4619      	mov	r1, r3
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7f8 fc5a 	bl	8003450 <pbuf_alloc>
 800ab9c:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d07a      	beq.n	800ac9a <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	891a      	ldrh	r2, [r3, #8]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	895b      	ldrh	r3, [r3, #10]
 800abac:	429a      	cmp	r2, r3
 800abae:	d003      	beq.n	800abb8 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800abb0:	6938      	ldr	r0, [r7, #16]
 800abb2:	f7f8 feeb 	bl	800398c <pbuf_free>
        return;
 800abb6:	e071      	b.n	800ac9c <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	60fa      	str	r2, [r7, #12]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	60fa      	str	r2, [r7, #12]
 800abce:	2203      	movs	r2, #3
 800abd0:	701a      	strb	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	60fa      	str	r2, [r7, #12]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	89d2      	ldrh	r2, [r2, #14]
 800abdc:	0a12      	lsrs	r2, r2, #8
 800abde:	b292      	uxth	r2, r2
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	701a      	strb	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	60fa      	str	r2, [r7, #12]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	89d2      	ldrh	r2, [r2, #14]
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	60fa      	str	r2, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	60fa      	str	r2, [r7, #12]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	7cd2      	ldrb	r2, [r2, #19]
 800ac06:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	60fa      	str	r2, [r7, #12]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	3204      	adds	r2, #4
 800ac12:	1212      	asrs	r2, r2, #8
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	60fa      	str	r2, [r7, #12]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	b2d2      	uxtb	r2, r2
 800ac22:	3204      	adds	r2, #4
 800ac24:	b2d2      	uxtb	r2, r2
 800ac26:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d01a      	beq.n	800ac64 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f107 0208 	add.w	r2, r7, #8
 800ac38:	68f9      	ldr	r1, [r7, #12]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	895b      	ldrh	r3, [r3, #10]
 800ac42:	f1a3 0208 	sub.w	r2, r3, #8
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d00b      	beq.n	800ac64 <fsm_sconfreq+0x18c>
 800ac4c:	4b15      	ldr	r3, [pc, #84]	; (800aca4 <fsm_sconfreq+0x1cc>)
 800ac4e:	f240 22f2 	movw	r2, #754	; 0x2f2
 800ac52:	4915      	ldr	r1, [pc, #84]	; (800aca8 <fsm_sconfreq+0x1d0>)
 800ac54:	4815      	ldr	r0, [pc, #84]	; (800acac <fsm_sconfreq+0x1d4>)
 800ac56:	f005 fa3b 	bl	80100d0 <iprintf>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f005 fb3a 	bl	80102d4 <fflush>
 800ac60:	f005 fa7f 	bl	8010162 <abort>
    }

    ppp_write(pcb, p);
 800ac64:	6939      	ldr	r1, [r7, #16]
 800ac66:	6978      	ldr	r0, [r7, #20]
 800ac68:	f003 fede 	bl	800ea28 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7d1b      	ldrb	r3, [r3, #20]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	480d      	ldr	r0, [pc, #52]	; (800acb0 <fsm_sconfreq+0x1d8>)
 800ac7c:	f7fe fee4 	bl	8009a48 <sys_untimeout>
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	7b9b      	ldrb	r3, [r3, #14]
 800ac84:	461a      	mov	r2, r3
 800ac86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac8a:	fb03 f302 	mul.w	r3, r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4907      	ldr	r1, [pc, #28]	; (800acb0 <fsm_sconfreq+0x1d8>)
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe feac 	bl	80099f0 <sys_timeout>
 800ac98:	e000      	b.n	800ac9c <fsm_sconfreq+0x1c4>
        return;
 800ac9a:	bf00      	nop
}
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	080134a0 	.word	0x080134a0
 800aca8:	080134c4 	.word	0x080134c4
 800acac:	080134f0 	.word	0x080134f0
 800acb0:	0800a255 	.word	0x0800a255

0800acb4 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	607b      	str	r3, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	72fb      	strb	r3, [r7, #11]
 800acc2:	4613      	mov	r3, r2
 800acc4:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800acd2:	1f1a      	subs	r2, r3, #4
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	429a      	cmp	r2, r3
 800acd8:	da04      	bge.n	800ace4 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800ace0:	3b04      	subs	r3, #4
 800ace2:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	3304      	adds	r3, #4
 800ace8:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	b29b      	uxth	r3, r3
 800acee:	3304      	adds	r3, #4
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acf6:	4619      	mov	r1, r3
 800acf8:	2000      	movs	r0, #0
 800acfa:	f7f8 fba9 	bl	8003450 <pbuf_alloc>
 800acfe:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d04f      	beq.n	800ada6 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	891a      	ldrh	r2, [r3, #8]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	895b      	ldrh	r3, [r3, #10]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d003      	beq.n	800ad1a <fsm_sdata+0x66>
        pbuf_free(p);
 800ad12:	6978      	ldr	r0, [r7, #20]
 800ad14:	f7f8 fe3a 	bl	800398c <pbuf_free>
        return;
 800ad18:	e046      	b.n	800ada8 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d009      	beq.n	800ad3a <fsm_sdata+0x86>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f005 fbcd 	bl	80104d4 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	613a      	str	r2, [r7, #16]
 800ad40:	22ff      	movs	r2, #255	; 0xff
 800ad42:	701a      	strb	r2, [r3, #0]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	613a      	str	r2, [r7, #16]
 800ad4a:	2203      	movs	r2, #3
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	613a      	str	r2, [r7, #16]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	89d2      	ldrh	r2, [r2, #14]
 800ad58:	0a12      	lsrs	r2, r2, #8
 800ad5a:	b292      	uxth	r2, r2
 800ad5c:	b2d2      	uxtb	r2, r2
 800ad5e:	701a      	strb	r2, [r3, #0]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	613a      	str	r2, [r7, #16]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	89d2      	ldrh	r2, [r2, #14]
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	613a      	str	r2, [r7, #16]
 800ad74:	7afa      	ldrb	r2, [r7, #11]
 800ad76:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	613a      	str	r2, [r7, #16]
 800ad7e:	7aba      	ldrb	r2, [r7, #10]
 800ad80:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	613a      	str	r2, [r7, #16]
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	1212      	asrs	r2, r2, #8
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	613a      	str	r2, [r7, #16]
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800ad9c:	6979      	ldr	r1, [r7, #20]
 800ad9e:	69f8      	ldr	r0, [r7, #28]
 800ada0:	f003 fe42 	bl	800ea28 <ppp_write>
 800ada4:	e000      	b.n	800ada8 <fsm_sdata+0xf4>
        return;
 800ada6:	bf00      	nop
}
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	33f8      	adds	r3, #248	; 0xf8
 800adbc:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800adc4:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800adcc:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f248 0221 	movw	r2, #32801	; 0x8021
 800adda:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	4a15      	ldr	r2, [pc, #84]	; (800ae34 <ipcp_init+0x84>)
 800ade0:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800ade2:	6978      	ldr	r0, [r7, #20]
 800ade4:	f7ff f88c 	bl	8009f00 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2264      	movs	r2, #100	; 0x64
 800adec:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	7813      	ldrb	r3, [r2, #0]
 800adf2:	f043 0302 	orr.w	r3, r3, #2
 800adf6:	7013      	strb	r3, [r2, #0]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ae00:	b2d9      	uxtb	r1, r3
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	7813      	ldrb	r3, [r2, #0]
 800ae06:	f361 0300 	bfi	r3, r1, #0, #1
 800ae0a:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	7813      	ldrb	r3, [r2, #0]
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	7013      	strb	r3, [r2, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ae1e:	b2d9      	uxtb	r1, r3
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	7813      	ldrb	r3, [r2, #0]
 800ae24:	f361 0300 	bfi	r3, r1, #0, #1
 800ae28:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800ae2a:	bf00      	nop
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	08013898 	.word	0x08013898

0800ae38 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	33f8      	adds	r3, #248	; 0xf8
 800ae44:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff f8f0 	bl	800a02c <fsm_open>
    pcb->ipcp_is_open = 1;
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800ae52:	f043 0302 	orr.w	r3, r3, #2
 800ae56:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	33f8      	adds	r3, #248	; 0xf8
 800ae70:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7ff f9a1 	bl	800a1bc <fsm_close>
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	33f8      	adds	r3, #248	; 0xf8
 800ae8e:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7ff f852 	bl	8009f3a <fsm_lowerup>
}
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	33f8      	adds	r3, #248	; 0xf8
 800aeaa:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff f869 	bl	8009f84 <fsm_lowerdown>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b086      	sub	sp, #24
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	33f8      	adds	r3, #248	; 0xf8
 800aeca:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	6978      	ldr	r0, [r7, #20]
 800aed2:	f7ff fa57 	bl	800a384 <fsm_input>
}
 800aed6:	bf00      	nop
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	33f8      	adds	r3, #248	; 0xf8
 800aeea:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff f849 	bl	8009f84 <fsm_lowerdown>
}
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b086      	sub	sp, #24
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800af0e:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800af16:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800af1e:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <ipcp_resetci+0x42>
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00f      	beq.n	800af5c <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <ipcp_resetci+0x64>
 800af5c:	2300      	movs	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	b2d9      	uxtb	r1, r3
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	7813      	ldrb	r3, [r2, #0]
 800af6a:	f361 0382 	bfi	r3, r1, #2, #1
 800af6e:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d104      	bne.n	800af82 <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	7813      	ldrb	r3, [r2, #0]
 800af7c:	f043 0308 	orr.w	r3, r3, #8
 800af80:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d104      	bne.n	800af94 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	7813      	ldrb	r3, [r2, #0]
 800af8e:	f043 0310 	orr.w	r3, r3, #16
 800af92:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	ca07      	ldmia	r2, {r0, r1, r2}
 800af9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800afba:	220c      	movs	r2, #12
 800afbc:	2100      	movs	r1, #0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f005 faad 	bl	801051e <memset>
}
 800afc4:	bf00      	nop
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800afe0:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800afe8:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d019      	beq.n	800b02c <ipcp_cilen+0x60>
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d012      	beq.n	800b02c <ipcp_cilen+0x60>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10b      	bne.n	800b02c <ipcp_cilen+0x60>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	7813      	ldrb	r3, [r2, #0]
 800b026:	f36f 0300 	bfc	r3, #0, #1
 800b02a:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d108      	bne.n	800b04c <ipcp_cilen+0x80>
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	f003 0302 	and.w	r3, r3, #2
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <ipcp_cilen+0x80>
 800b048:	220a      	movs	r2, #10
 800b04a:	e000      	b.n	800b04e <ipcp_cilen+0x82>
 800b04c:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <ipcp_cilen+0x94>
 800b05c:	2306      	movs	r3, #6
 800b05e:	e000      	b.n	800b062 <ipcp_cilen+0x96>
 800b060:	2300      	movs	r3, #0
 800b062:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800b064:	4618      	mov	r0, r3
 800b066:	371c      	adds	r7, #28
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b088:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d15e      	bne.n	800b15c <ipcp_addci+0xec>
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d057      	beq.n	800b15c <ipcp_addci+0xec>
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	dd4f      	ble.n	800b152 <ipcp_addci+0xe2>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	60ba      	str	r2, [r7, #8]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	701a      	strb	r2, [r3, #0]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	60ba      	str	r2, [r7, #8]
 800b0c2:	220a      	movs	r2, #10
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f6 fad9 	bl	8001682 <lwip_htonl>
 800b0d0:	61b8      	str	r0, [r7, #24]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	60ba      	str	r2, [r7, #8]
 800b0d8:	69ba      	ldr	r2, [r7, #24]
 800b0da:	0e12      	lsrs	r2, r2, #24
 800b0dc:	b2d2      	uxtb	r2, r2
 800b0de:	701a      	strb	r2, [r3, #0]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	60ba      	str	r2, [r7, #8]
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	0c12      	lsrs	r2, r2, #16
 800b0ea:	b2d2      	uxtb	r2, r2
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	60ba      	str	r2, [r7, #8]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	0a12      	lsrs	r2, r2, #8
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	60ba      	str	r2, [r7, #8]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f6 fab8 	bl	8001682 <lwip_htonl>
 800b112:	61b8      	str	r0, [r7, #24]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	60ba      	str	r2, [r7, #8]
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	0e12      	lsrs	r2, r2, #24
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	60ba      	str	r2, [r7, #8]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	0c12      	lsrs	r2, r2, #16
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	60ba      	str	r2, [r7, #8]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	0a12      	lsrs	r2, r2, #8
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	60ba      	str	r2, [r7, #8]
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	3b0a      	subs	r3, #10
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
 800b150:	e004      	b.n	800b15c <ipcp_addci+0xec>
 800b152:	69fa      	ldr	r2, [r7, #28]
 800b154:	7813      	ldrb	r3, [r2, #0]
 800b156:	f36f 0341 	bfc	r3, #1, #1
 800b15a:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d036      	beq.n	800b1d8 <ipcp_addci+0x168>
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	2b05      	cmp	r3, #5
 800b16e:	dd2e      	ble.n	800b1ce <ipcp_addci+0x15e>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	60ba      	str	r2, [r7, #8]
 800b176:	2203      	movs	r2, #3
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	60ba      	str	r2, [r7, #8]
 800b180:	2206      	movs	r2, #6
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f6 fa7a 	bl	8001682 <lwip_htonl>
 800b18e:	6178      	str	r0, [r7, #20]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	60ba      	str	r2, [r7, #8]
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	0e12      	lsrs	r2, r2, #24
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	60ba      	str	r2, [r7, #8]
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	0c12      	lsrs	r2, r2, #16
 800b1a8:	b2d2      	uxtb	r2, r2
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	60ba      	str	r2, [r7, #8]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	0a12      	lsrs	r2, r2, #8
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	60ba      	str	r2, [r7, #8]
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	b2d2      	uxtb	r2, r2
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	3b06      	subs	r3, #6
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b1cc:	e004      	b.n	800b1d8 <ipcp_addci+0x168>
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	7813      	ldrb	r3, [r2, #0]
 800b1d2:	f36f 0300 	bfc	r3, #0, #1
 800b1d6:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	1ad2      	subs	r2, r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
}
 800b1e4:	bf00      	nop
 800b1e6:	3728      	adds	r7, #40	; 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08a      	sub	sp, #40	; 0x28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b204:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d179      	bne.n	800b308 <ipcp_ackci+0x11c>
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d072      	beq.n	800b308 <ipcp_ackci+0x11c>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3b0a      	subs	r3, #10
 800b226:	607b      	str	r3, [r7, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f2c0 80bb 	blt.w	800b3a6 <ipcp_ackci+0x1ba>
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	60ba      	str	r2, [r7, #8]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	83fb      	strh	r3, [r7, #30]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	60ba      	str	r2, [r7, #8]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	83bb      	strh	r3, [r7, #28]
 800b244:	8bbb      	ldrh	r3, [r7, #28]
 800b246:	2b0a      	cmp	r3, #10
 800b248:	f040 80b8 	bne.w	800b3bc <ipcp_ackci+0x1d0>
 800b24c:	8bfb      	ldrh	r3, [r7, #30]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	f040 80b4 	bne.w	800b3bc <ipcp_ackci+0x1d0>
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	60ba      	str	r2, [r7, #8]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	60ba      	str	r2, [r7, #8]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	61bb      	str	r3, [r7, #24]
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	60ba      	str	r2, [r7, #8]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	4313      	orrs	r3, r2
 800b284:	61bb      	str	r3, [r7, #24]
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	021b      	lsls	r3, r3, #8
 800b28a:	61bb      	str	r3, [r7, #24]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	60ba      	str	r2, [r7, #8]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	461a      	mov	r2, r3
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	4313      	orrs	r3, r2
 800b29a:	61bb      	str	r3, [r7, #24]
 800b29c:	69b8      	ldr	r0, [r7, #24]
 800b29e:	f7f6 f9f0 	bl	8001682 <lwip_htonl>
 800b2a2:	6178      	str	r0, [r7, #20]
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d17d      	bne.n	800b3aa <ipcp_ackci+0x1be>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	60ba      	str	r2, [r7, #8]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	021b      	lsls	r3, r3, #8
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	60ba      	str	r2, [r7, #8]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	61bb      	str	r3, [r7, #24]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	60ba      	str	r2, [r7, #8]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	61bb      	str	r3, [r7, #24]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	61bb      	str	r3, [r7, #24]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	1c5a      	adds	r2, r3, #1
 800b2ea:	60ba      	str	r2, [r7, #8]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	69b8      	ldr	r0, [r7, #24]
 800b2f8:	f7f6 f9c3 	bl	8001682 <lwip_htonl>
 800b2fc:	6178      	str	r0, [r7, #20]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	429a      	cmp	r2, r3
 800b306:	d152      	bne.n	800b3ae <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	b2db      	uxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d042      	beq.n	800b39c <ipcp_ackci+0x1b0>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3b06      	subs	r3, #6
 800b31a:	607b      	str	r3, [r7, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	db47      	blt.n	800b3b2 <ipcp_ackci+0x1c6>
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	60ba      	str	r2, [r7, #8]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	83fb      	strh	r3, [r7, #30]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	60ba      	str	r2, [r7, #8]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	83bb      	strh	r3, [r7, #28]
 800b336:	8bbb      	ldrh	r3, [r7, #28]
 800b338:	2b06      	cmp	r3, #6
 800b33a:	d13f      	bne.n	800b3bc <ipcp_ackci+0x1d0>
 800b33c:	8bfb      	ldrh	r3, [r7, #30]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d13c      	bne.n	800b3bc <ipcp_ackci+0x1d0>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	60ba      	str	r2, [r7, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	613b      	str	r3, [r7, #16]
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	60ba      	str	r2, [r7, #8]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	613b      	str	r3, [r7, #16]
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	613b      	str	r3, [r7, #16]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	60ba      	str	r2, [r7, #8]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	021b      	lsls	r3, r3, #8
 800b378:	613b      	str	r3, [r7, #16]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	60ba      	str	r2, [r7, #8]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4313      	orrs	r3, r2
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	6938      	ldr	r0, [r7, #16]
 800b38c:	f7f6 f979 	bl	8001682 <lwip_htonl>
 800b390:	6178      	str	r0, [r7, #20]
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d10c      	bne.n	800b3b6 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e00b      	b.n	800b3be <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800b3a6:	bf00      	nop
 800b3a8:	e008      	b.n	800b3bc <ipcp_ackci+0x1d0>
 800b3aa:	bf00      	nop
 800b3ac:	e006      	b.n	800b3bc <ipcp_ackci+0x1d0>
 800b3ae:	bf00      	nop
 800b3b0:	e004      	b.n	800b3bc <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800b3b2:	bf00      	nop
 800b3b4:	e002      	b.n	800b3bc <ipcp_ackci+0x1d0>
 800b3b6:	bf00      	nop
 800b3b8:	e000      	b.n	800b3bc <ipcp_ackci+0x1d0>
	goto bad;
 800b3ba:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3728      	adds	r7, #40	; 0x28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800b3c6:	b590      	push	{r4, r7, lr}
 800b3c8:	b093      	sub	sp, #76	; 0x4c
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b3e0:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800b3e2:	f107 031c 	add.w	r3, r7, #28
 800b3e6:	220c      	movs	r2, #12
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f005 f897 	bl	801051e <memset>
    try_ = *go;
 800b3f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3f2:	f107 0310 	add.w	r3, r7, #16
 800b3f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b3f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800b3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	f040 8096 	bne.w	800b538 <ipcp_nakci+0x172>
 800b40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 808e 	beq.w	800b538 <ipcp_nakci+0x172>
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b424:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b428:	2b0a      	cmp	r3, #10
 800b42a:	f040 8085 	bne.w	800b538 <ipcp_nakci+0x172>
 800b42e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	dc7f      	bgt.n	800b538 <ipcp_nakci+0x172>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d17b      	bne.n	800b538 <ipcp_nakci+0x172>
 800b440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	607b      	str	r3, [r7, #4]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	3302      	adds	r3, #2
 800b44e:	60bb      	str	r3, [r7, #8]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	60ba      	str	r2, [r7, #8]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	60ba      	str	r2, [r7, #8]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	4313      	orrs	r3, r2
 800b46a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	021b      	lsls	r3, r3, #8
 800b470:	63bb      	str	r3, [r7, #56]	; 0x38
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	60ba      	str	r2, [r7, #8]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	4313      	orrs	r3, r2
 800b480:	63bb      	str	r3, [r7, #56]	; 0x38
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	021b      	lsls	r3, r3, #8
 800b486:	63bb      	str	r3, [r7, #56]	; 0x38
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	60ba      	str	r2, [r7, #8]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	4313      	orrs	r3, r2
 800b496:	63bb      	str	r3, [r7, #56]	; 0x38
 800b498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b49a:	f7f6 f8f2 	bl	8001682 <lwip_htonl>
 800b49e:	6378      	str	r0, [r7, #52]	; 0x34
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	60ba      	str	r2, [r7, #8]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	60ba      	str	r2, [r7, #8]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	021b      	lsls	r3, r3, #8
 800b4c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	1c5a      	adds	r2, r3, #1
 800b4c6:	60ba      	str	r2, [r7, #8]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	60ba      	str	r2, [r7, #8]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ea:	f7f6 f8ca 	bl	8001682 <lwip_htonl>
 800b4ee:	6338      	str	r0, [r7, #48]	; 0x30
 800b4f0:	7f3b      	ldrb	r3, [r7, #28]
 800b4f2:	f043 0302 	orr.w	r3, r3, #2
 800b4f6:	773b      	strb	r3, [r7, #28]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <ipcp_nakci+0x142>
 800b4fe:	7c3b      	ldrb	r3, [r7, #16]
 800b500:	f36f 0341 	bfc	r3, #1, #1
 800b504:	743b      	strb	r3, [r7, #16]
 800b506:	e017      	b.n	800b538 <ipcp_nakci+0x172>
 800b508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <ipcp_nakci+0x15a>
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <ipcp_nakci+0x15a>
 800b51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <ipcp_nakci+0x172>
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <ipcp_nakci+0x172>
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800b538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 816e 	beq.w	800b824 <ipcp_nakci+0x45e>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b554:	2b06      	cmp	r3, #6
 800b556:	f040 8165 	bne.w	800b824 <ipcp_nakci+0x45e>
 800b55a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	f300 815f 	bgt.w	800b824 <ipcp_nakci+0x45e>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	f040 815a 	bne.w	800b824 <ipcp_nakci+0x45e>
 800b570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	3302      	adds	r3, #2
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	60ba      	str	r2, [r7, #8]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	021b      	lsls	r3, r3, #8
 800b58a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	60ba      	str	r2, [r7, #8]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	4313      	orrs	r3, r2
 800b59a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	60ba      	str	r2, [r7, #8]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	60ba      	str	r2, [r7, #8]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5ca:	f7f6 f85a 	bl	8001682 <lwip_htonl>
 800b5ce:	6378      	str	r0, [r7, #52]	; 0x34
 800b5d0:	7f3b      	ldrb	r3, [r7, #28]
 800b5d2:	f043 0301 	orr.w	r3, r3, #1
 800b5d6:	773b      	strb	r3, [r7, #28]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d008      	beq.n	800b5f0 <ipcp_nakci+0x22a>
 800b5de:	7c3b      	ldrb	r3, [r7, #16]
 800b5e0:	f36f 0300 	bfc	r3, #0, #1
 800b5e4:	743b      	strb	r3, [r7, #16]
 800b5e6:	7c3b      	ldrb	r3, [r7, #16]
 800b5e8:	f36f 0341 	bfc	r3, #1, #1
 800b5ec:	743b      	strb	r3, [r7, #16]
 800b5ee:	e119      	b.n	800b824 <ipcp_nakci+0x45e>
 800b5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	f003 0308 	and.w	r3, r3, #8
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 8112 	beq.w	800b824 <ipcp_nakci+0x45e>
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 810e 	beq.w	800b824 <ipcp_nakci+0x45e>
 800b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60a:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800b60c:	e10a      	b.n	800b824 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	60ba      	str	r2, [r7, #8]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	60ba      	str	r2, [r7, #8]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800b626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	f240 810c 	bls.w	800b848 <ipcp_nakci+0x482>
 800b630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	607b      	str	r3, [r7, #4]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f2c0 8103 	blt.w	800b848 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800b642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b646:	3b02      	subs	r3, #2
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	4413      	add	r3, r2
 800b64c:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800b64e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b652:	2b01      	cmp	r3, #1
 800b654:	d003      	beq.n	800b65e <ipcp_nakci+0x298>
 800b656:	2b03      	cmp	r3, #3
 800b658:	f000 808d 	beq.w	800b776 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800b65c:	e0e0      	b.n	800b820 <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800b65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d107      	bne.n	800b67c <ipcp_nakci+0x2b6>
 800b66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 80e6 	bne.w	800b848 <ipcp_nakci+0x482>
 800b67c:	7f3b      	ldrb	r3, [r7, #28]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 80df 	bne.w	800b848 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800b68a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b68e:	2b0a      	cmp	r3, #10
 800b690:	f040 80da 	bne.w	800b848 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800b694:	7c3b      	ldrb	r3, [r7, #16]
 800b696:	f36f 0300 	bfc	r3, #0, #1
 800b69a:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	60ba      	str	r2, [r7, #8]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	60ba      	str	r2, [r7, #8]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	60ba      	str	r2, [r7, #8]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	021b      	lsls	r3, r3, #8
 800b6d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	60ba      	str	r2, [r7, #8]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800b6e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6e6:	f7f5 ffcc 	bl	8001682 <lwip_htonl>
 800b6ea:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d008      	beq.n	800b704 <ipcp_nakci+0x33e>
 800b6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	f003 0308 	and.w	r3, r3, #8
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b702:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	60ba      	str	r2, [r7, #8]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	60ba      	str	r2, [r7, #8]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	4313      	orrs	r3, r2
 800b71e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	63bb      	str	r3, [r7, #56]	; 0x38
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	60ba      	str	r2, [r7, #8]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	4313      	orrs	r3, r2
 800b734:	63bb      	str	r3, [r7, #56]	; 0x38
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	021b      	lsls	r3, r3, #8
 800b73a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	60ba      	str	r2, [r7, #8]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	4313      	orrs	r3, r2
 800b74a:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800b74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b74e:	f7f5 ff98 	bl	8001682 <lwip_htonl>
 800b752:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	2b00      	cmp	r3, #0
 800b758:	d008      	beq.n	800b76c <ipcp_nakci+0x3a6>
 800b75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 0310 	and.w	r3, r3, #16
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800b76c:	7f3b      	ldrb	r3, [r7, #28]
 800b76e:	f043 0302 	orr.w	r3, r3, #2
 800b772:	773b      	strb	r3, [r7, #28]
	    break;
 800b774:	e054      	b.n	800b820 <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800b776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d161      	bne.n	800b848 <ipcp_nakci+0x482>
 800b784:	7f3b      	ldrb	r3, [r7, #28]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d15b      	bne.n	800b848 <ipcp_nakci+0x482>
 800b790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b794:	2b06      	cmp	r3, #6
 800b796:	d157      	bne.n	800b848 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800b798:	7c3b      	ldrb	r3, [r7, #16]
 800b79a:	f36f 0341 	bfc	r3, #1, #1
 800b79e:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	60ba      	str	r2, [r7, #8]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	60ba      	str	r2, [r7, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	60ba      	str	r2, [r7, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	021b      	lsls	r3, r3, #8
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	60ba      	str	r2, [r7, #8]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800b7e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7ea:	f7f5 ff4a 	bl	8001682 <lwip_htonl>
 800b7ee:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d008      	beq.n	800b808 <ipcp_nakci+0x442>
 800b7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f003 0308 	and.w	r3, r3, #8
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800b804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b806:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800b80e:	7c3b      	ldrb	r3, [r7, #16]
 800b810:	f043 0301 	orr.w	r3, r3, #1
 800b814:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800b816:	7f3b      	ldrb	r3, [r7, #28]
 800b818:	f043 0301 	orr.w	r3, r3, #1
 800b81c:	773b      	strb	r3, [r7, #28]
	    break;
 800b81e:	bf00      	nop
	}
	p = next;
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b01      	cmp	r3, #1
 800b828:	f73f aef1 	bgt.w	800b60e <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	7c1b      	ldrb	r3, [r3, #16]
 800b830:	2b09      	cmp	r3, #9
 800b832:	d007      	beq.n	800b844 <ipcp_nakci+0x47e>
	*go = try_;
 800b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b836:	461c      	mov	r4, r3
 800b838:	f107 0310 	add.w	r3, r7, #16
 800b83c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b840:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800b844:	2301      	movs	r3, #1
 800b846:	e000      	b.n	800b84a <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	374c      	adds	r7, #76	; 0x4c
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd90      	pop	{r4, r7, pc}

0800b852 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800b852:	b590      	push	{r4, r7, lr}
 800b854:	b08f      	sub	sp, #60	; 0x3c
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b86a:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800b86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b86e:	f107 0314 	add.w	r3, r7, #20
 800b872:	ca07      	ldmia	r2, {r0, r1, r2}
 800b874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d17e      	bne.n	800b984 <ipcp_rejci+0x132>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d077      	beq.n	800b984 <ipcp_rejci+0x132>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8a0:	2b0a      	cmp	r3, #10
 800b8a2:	d16f      	bne.n	800b984 <ipcp_rejci+0x132>
 800b8a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	dc6a      	bgt.n	800b984 <ipcp_rejci+0x132>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d166      	bne.n	800b984 <ipcp_rejci+0x132>
 800b8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	607b      	str	r3, [r7, #4]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	3302      	adds	r3, #2
 800b8c4:	60bb      	str	r3, [r7, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	60ba      	str	r2, [r7, #8]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	021b      	lsls	r3, r3, #8
 800b8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	60ba      	str	r2, [r7, #8]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	021b      	lsls	r3, r3, #8
 800b8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	60ba      	str	r2, [r7, #8]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	021b      	lsls	r3, r3, #8
 800b8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	60ba      	str	r2, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	4313      	orrs	r3, r2
 800b90c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b910:	f7f5 feb7 	bl	8001682 <lwip_htonl>
 800b914:	6278      	str	r0, [r7, #36]	; 0x24
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	429a      	cmp	r2, r3
 800b91e:	f040 8093 	bne.w	800ba48 <ipcp_rejci+0x1f6>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	1c5a      	adds	r2, r3, #1
 800b926:	60ba      	str	r2, [r7, #8]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	021b      	lsls	r3, r3, #8
 800b92c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	60ba      	str	r2, [r7, #8]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	4313      	orrs	r3, r2
 800b93c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	021b      	lsls	r3, r3, #8
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	60ba      	str	r2, [r7, #8]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	4313      	orrs	r3, r2
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	60ba      	str	r2, [r7, #8]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	4313      	orrs	r3, r2
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
 800b96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96c:	f7f5 fe89 	bl	8001682 <lwip_htonl>
 800b970:	6278      	str	r0, [r7, #36]	; 0x24
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	429a      	cmp	r2, r3
 800b97a:	d167      	bne.n	800ba4c <ipcp_rejci+0x1fa>
 800b97c:	7d3b      	ldrb	r3, [r7, #20]
 800b97e:	f36f 0341 	bfc	r3, #1, #1
 800b982:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d049      	beq.n	800ba26 <ipcp_rejci+0x1d4>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b99a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b99e:	2b06      	cmp	r3, #6
 800b9a0:	d141      	bne.n	800ba26 <ipcp_rejci+0x1d4>
 800b9a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	dc3c      	bgt.n	800ba26 <ipcp_rejci+0x1d4>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d138      	bne.n	800ba26 <ipcp_rejci+0x1d4>
 800b9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	607b      	str	r3, [r7, #4]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	3302      	adds	r3, #2
 800b9c2:	60bb      	str	r3, [r7, #8]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	60ba      	str	r2, [r7, #8]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	623b      	str	r3, [r7, #32]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	60ba      	str	r2, [r7, #8]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	623b      	str	r3, [r7, #32]
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	021b      	lsls	r3, r3, #8
 800b9e4:	623b      	str	r3, [r7, #32]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	60ba      	str	r2, [r7, #8]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	623b      	str	r3, [r7, #32]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	623b      	str	r3, [r7, #32]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	60ba      	str	r2, [r7, #8]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	623b      	str	r3, [r7, #32]
 800ba0c:	6a38      	ldr	r0, [r7, #32]
 800ba0e:	f7f5 fe38 	bl	8001682 <lwip_htonl>
 800ba12:	6278      	str	r0, [r7, #36]	; 0x24
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d118      	bne.n	800ba50 <ipcp_rejci+0x1fe>
 800ba1e:	7d3b      	ldrb	r3, [r7, #20]
 800ba20:	f36f 0300 	bfc	r3, #0, #1
 800ba24:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d113      	bne.n	800ba54 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	7c1b      	ldrb	r3, [r3, #16]
 800ba30:	2b09      	cmp	r3, #9
 800ba32:	d007      	beq.n	800ba44 <ipcp_rejci+0x1f2>
	*go = try_;
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	461c      	mov	r4, r3
 800ba38:	f107 0314 	add.w	r3, r7, #20
 800ba3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e007      	b.n	800ba58 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800ba48:	bf00      	nop
 800ba4a:	e004      	b.n	800ba56 <ipcp_rejci+0x204>
 800ba4c:	bf00      	nop
 800ba4e:	e002      	b.n	800ba56 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800ba50:	bf00      	nop
 800ba52:	e000      	b.n	800ba56 <ipcp_rejci+0x204>
	goto bad;
 800ba54:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	373c      	adds	r7, #60	; 0x3c
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd90      	pop	{r4, r7, pc}

0800ba60 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b094      	sub	sp, #80	; 0x50
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ba82:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800ba84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba86:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800ba9a:	220c      	movs	r2, #12
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa0:	f004 fd3d 	bl	801051e <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800baa8:	e1f3      	b.n	800be92 <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800baaa:	2302      	movs	r3, #2
 800baac:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800baae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab4:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	2b01      	cmp	r3, #1
 800baba:	dd0b      	ble.n	800bad4 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	3301      	adds	r3, #1
 800bac0:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d906      	bls.n	800bad4 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800bac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bac8:	3301      	adds	r3, #1
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800bace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad0:	429a      	cmp	r2, r3
 800bad2:	dd07      	ble.n	800bae4 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800bad4:	2304      	movs	r3, #4
 800bad6:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800bade:	2300      	movs	r3, #0
 800bae0:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800bae2:	e1a1      	b.n	800be28 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800bae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800bafa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800bb04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bb08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb0a:	4413      	add	r3, r2
 800bb0c:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800bb0e:	8bfb      	ldrh	r3, [r7, #30]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d003      	beq.n	800bb1c <ipcp_reqci+0xbc>
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	f000 80f6 	beq.w	800bd06 <ipcp_reqci+0x2a6>
 800bb1a:	e182      	b.n	800be22 <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <ipcp_reqci+0xe0>
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d103      	bne.n	800bb40 <ipcp_reqci+0xe0>
 800bb38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bb3c:	2b0a      	cmp	r3, #10
 800bb3e:	d002      	beq.n	800bb46 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800bb40:	2304      	movs	r3, #4
 800bb42:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800bb44:	e170      	b.n	800be28 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800bb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	61bb      	str	r3, [r7, #24]
 800bb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	021b      	lsls	r3, r3, #8
 800bb66:	61bb      	str	r3, [r7, #24]
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	61bb      	str	r3, [r7, #24]
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	021b      	lsls	r3, r3, #8
 800bb7c:	61bb      	str	r3, [r7, #24]
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	1c5a      	adds	r2, r3, #1
 800bb82:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800bb8e:	69b8      	ldr	r0, [r7, #24]
 800bb90:	f7f5 fd77 	bl	8001682 <lwip_htonl>
 800bb94:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	689a      	ldr	r2, [r3, #8]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d033      	beq.n	800bc08 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d006      	beq.n	800bbb4 <ipcp_reqci+0x154>
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	f003 0310 	and.w	r3, r3, #16
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d129      	bne.n	800bc08 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d133      	bne.n	800bc26 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc0:	3b04      	subs	r3, #4
 800bbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7f5 fd5a 	bl	8001682 <lwip_htonl>
 800bbce:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800bbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	0e12      	lsrs	r2, r2, #24
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	0c12      	lsrs	r2, r2, #16
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	0a12      	lsrs	r2, r2, #8
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	b2d2      	uxtb	r2, r2
 800bc04:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800bc06:	e00e      	b.n	800bc26 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10b      	bne.n	800bc26 <ipcp_reqci+0x1c6>
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d107      	bne.n	800bc26 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800bc16:	2304      	movs	r3, #4
 800bc18:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800bc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc1c:	7813      	ldrb	r3, [r2, #0]
 800bc1e:	f36f 0382 	bfc	r3, #2, #1
 800bc22:	7013      	strb	r3, [r2, #0]
		break;
 800bc24:	e100      	b.n	800be28 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	61bb      	str	r3, [r7, #24]
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	61bb      	str	r3, [r7, #24]
 800bc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	61bb      	str	r3, [r7, #24]
 800bc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc60:	1c5a      	adds	r2, r3, #1
 800bc62:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800bc6e:	69b8      	ldr	r0, [r7, #24]
 800bc70:	f7f5 fd07 	bl	8001682 <lwip_htonl>
 800bc74:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d036      	beq.n	800bcee <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d006      	beq.n	800bc94 <ipcp_reqci+0x234>
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d129      	bne.n	800bce8 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800bc94:	2303      	movs	r3, #3
 800bc96:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d127      	bne.n	800bcee <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800bc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca0:	3b04      	subs	r3, #4
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7f5 fcea 	bl	8001682 <lwip_htonl>
 800bcae:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800bcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	0e12      	lsrs	r2, r2, #24
 800bcba:	b2d2      	uxtb	r2, r2
 800bcbc:	701a      	strb	r2, [r3, #0]
 800bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	0c12      	lsrs	r2, r2, #16
 800bcc8:	b2d2      	uxtb	r2, r2
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bcd2:	69ba      	ldr	r2, [r7, #24]
 800bcd4:	0a12      	lsrs	r2, r2, #8
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcdc:	1c5a      	adds	r2, r3, #1
 800bcde:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800bce6:	e002      	b.n	800bcee <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800bcee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf0:	7813      	ldrb	r3, [r2, #0]
 800bcf2:	f043 0302 	orr.w	r3, r3, #2
 800bcf6:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	605a      	str	r2, [r3, #4]
	    break;
 800bd04:	e090      	b.n	800be28 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00a      	beq.n	800bd2a <ipcp_reqci+0x2ca>
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d103      	bne.n	800bd2a <ipcp_reqci+0x2ca>
 800bd22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bd26:	2b06      	cmp	r3, #6
 800bd28:	d002      	beq.n	800bd30 <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800bd2e:	e07b      	b.n	800be28 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800bd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	021b      	lsls	r3, r3, #8
 800bd3a:	61bb      	str	r3, [r7, #24]
 800bd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	61bb      	str	r3, [r7, #24]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	61bb      	str	r3, [r7, #24]
 800bd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	61bb      	str	r3, [r7, #24]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	021b      	lsls	r3, r3, #8
 800bd66:	61bb      	str	r3, [r7, #24]
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800bd78:	69b8      	ldr	r0, [r7, #24]
 800bd7a:	f7f5 fc82 	bl	8001682 <lwip_htonl>
 800bd7e:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	689a      	ldr	r2, [r3, #8]
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d033      	beq.n	800bdf2 <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d006      	beq.n	800bd9e <ipcp_reqci+0x33e>
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 0310 	and.w	r3, r3, #16
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d129      	bne.n	800bdf2 <ipcp_reqci+0x392>
		orc = CONFNAK;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d133      	bne.n	800be10 <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800bda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdaa:	3b04      	subs	r3, #4
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f5 fc65 	bl	8001682 <lwip_htonl>
 800bdb8:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800bdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	0e12      	lsrs	r2, r2, #24
 800bdc4:	b2d2      	uxtb	r2, r2
 800bdc6:	701a      	strb	r2, [r3, #0]
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	0c12      	lsrs	r2, r2, #16
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	0a12      	lsrs	r2, r2, #8
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	701a      	strb	r2, [r3, #0]
 800bde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800bdf0:	e00e      	b.n	800be10 <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <ipcp_reqci+0x3b0>
 800bdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800be00:	2304      	movs	r3, #4
 800be02:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800be04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be06:	7813      	ldrb	r3, [r2, #0]
 800be08:	f36f 0382 	bfc	r3, #2, #1
 800be0c:	7013      	strb	r3, [r2, #0]
		break;
 800be0e:	e00b      	b.n	800be28 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800be10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be12:	7813      	ldrb	r3, [r2, #0]
 800be14:	f043 0301 	orr.w	r3, r3, #1
 800be18:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	609a      	str	r2, [r3, #8]
	    break;
 800be20:	e002      	b.n	800be28 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800be22:	2304      	movs	r3, #4
 800be24:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800be26:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d103      	bne.n	800be36 <ipcp_reqci+0x3d6>
 800be2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be30:	2b02      	cmp	r3, #2
 800be32:	d000      	beq.n	800be36 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800be34:	e02d      	b.n	800be92 <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800be36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d110      	bne.n	800be5e <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800be42:	2304      	movs	r3, #4
 800be44:	643b      	str	r3, [r7, #64]	; 0x40
 800be46:	e00a      	b.n	800be5e <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800be48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d100      	bne.n	800be50 <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800be4e:	e020      	b.n	800be92 <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800be50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be52:	2b02      	cmp	r3, #2
 800be54:	d103      	bne.n	800be5e <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800be56:	2303      	movs	r3, #3
 800be58:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be60:	2b04      	cmp	r3, #4
 800be62:	d106      	bne.n	800be72 <ipcp_reqci+0x412>
 800be64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be66:	2b04      	cmp	r3, #4
 800be68:	d003      	beq.n	800be72 <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800be6a:	2304      	movs	r3, #4
 800be6c:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800be72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	429a      	cmp	r2, r3
 800be78:	d006      	beq.n	800be88 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800be7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800be7e:	461a      	mov	r2, r3
 800be80:	6a39      	ldr	r1, [r7, #32]
 800be82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be84:	f004 fb26 	bl	80104d4 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800be88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800be8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be8e:	4413      	add	r3, r2
 800be90:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	f47f ae08 	bne.w	800baaa <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800be9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be9c:	2b04      	cmp	r3, #4
 800be9e:	d055      	beq.n	800bf4c <ipcp_reqci+0x4ec>
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d14e      	bne.n	800bf4c <ipcp_reqci+0x4ec>
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d147      	bne.n	800bf4c <ipcp_reqci+0x4ec>
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0304 	and.w	r3, r3, #4
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d040      	beq.n	800bf4c <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d13d      	bne.n	800bf4c <ipcp_reqci+0x4ec>
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d136      	bne.n	800bf4c <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800bede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d108      	bne.n	800bef6 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800bee4:	2303      	movs	r3, #3
 800bee6:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800beec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beee:	7813      	ldrb	r3, [r2, #0]
 800bef0:	f36f 0382 	bfc	r3, #2, #1
 800bef4:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	63ba      	str	r2, [r7, #56]	; 0x38
 800befc:	2203      	movs	r2, #3
 800befe:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf06:	2206      	movs	r2, #6
 800bf08:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f5 fbb7 	bl	8001682 <lwip_htonl>
 800bf14:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	0e12      	lsrs	r2, r2, #24
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf2a:	69ba      	ldr	r2, [r7, #24]
 800bf2c:	0c12      	lsrs	r2, r2, #16
 800bf2e:	b2d2      	uxtb	r2, r2
 800bf30:	701a      	strb	r2, [r3, #0]
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	0a12      	lsrs	r2, r2, #8
 800bf3c:	b2d2      	uxtb	r2, r2
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	63ba      	str	r2, [r7, #56]	; 0x38
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800bf4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	1ad2      	subs	r2, r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800bf56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3750      	adds	r7, #80	; 0x50
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800bf74:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800bf7c:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800bf84:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <ipcp_up+0x4a>
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 0302 	and.w	r3, r3, #2
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d103      	bne.n	800bfaa <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11f      	bne.n	800bff8 <ipcp_up+0x98>
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d118      	bne.n	800bff8 <ipcp_up+0x98>
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <ipcp_up+0x82>
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00a      	beq.n	800bff8 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d006      	beq.n	800bff8 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	493b      	ldr	r1, [pc, #236]	; (800c0dc <ipcp_up+0x17c>)
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe ff36 	bl	800ae62 <ipcp_close>
	return;
 800bff6:	e06e      	b.n	800c0d6 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d106      	bne.n	800c00e <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4936      	ldr	r1, [pc, #216]	; (800c0e0 <ipcp_up+0x180>)
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe ff2b 	bl	800ae62 <ipcp_close>
	return;
 800c00c:	e063      	b.n	800c0d6 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10c      	bne.n	800c030 <ipcp_up+0xd0>
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 0304 	and.w	r3, r3, #4
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800c024:	482f      	ldr	r0, [pc, #188]	; (800c0e4 <ipcp_up+0x184>)
 800c026:	f7f5 fb2c 	bl	8001682 <lwip_htonl>
 800c02a:	4602      	mov	r2, r0
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01a      	beq.n	800c06e <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f5 fb20 	bl	8001682 <lwip_htonl>
 800c042:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	0e1b      	lsrs	r3, r3, #24
 800c048:	2b7f      	cmp	r3, #127	; 0x7f
 800c04a:	d00b      	beq.n	800c064 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c052:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800c056:	d005      	beq.n	800c064 <ipcp_up+0x104>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c05e:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800c062:	d104      	bne.n	800c06e <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800c064:	4920      	ldr	r1, [pc, #128]	; (800c0e8 <ipcp_up+0x188>)
 800c066:	69f8      	ldr	r0, [r7, #28]
 800c068:	f7fe fefb 	bl	800ae62 <ipcp_close>
		return;
 800c06c:	e033      	b.n	800c0d6 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	f002 fdac 	bl	800ebd0 <get_mask>
 800c078:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	6859      	ldr	r1, [r3, #4]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	69f8      	ldr	r0, [r7, #28]
 800c086:	f002 fd39 	bl	800eafc <sifaddr>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d106      	bne.n	800c09e <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4915      	ldr	r1, [pc, #84]	; (800c0ec <ipcp_up+0x18c>)
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fee3 	bl	800ae62 <ipcp_close>
	    return;
 800c09c:	e01b      	b.n	800c0d6 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800c09e:	69f8      	ldr	r0, [r7, #28]
 800c0a0:	f002 fd5e 	bl	800eb60 <sifup>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	490f      	ldr	r1, [pc, #60]	; (800c0ec <ipcp_up+0x18c>)
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fe fed6 	bl	800ae62 <ipcp_close>
	    return;
 800c0b6:	e00e      	b.n	800c0d6 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800c0c0:	2121      	movs	r1, #33	; 0x21
 800c0c2:	69f8      	ldr	r0, [r7, #28]
 800c0c4:	f7fd fecc 	bl	8009e60 <np_up>
    pcb->ipcp_is_up = 1;
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c0ce:	f043 0304 	orr.w	r3, r3, #4
 800c0d2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	08013520 	.word	0x08013520
 800c0e0:	08013538 	.word	0x08013538
 800c0e4:	0a404040 	.word	0x0a404040
 800c0e8:	08013560 	.word	0x08013560
 800c0ec:	08013580 	.word	0x08013580

0800c0f0 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c104:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c10c:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c124:	f36f 0382 	bfc	r3, #2, #1
 800c128:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800c12c:	2121      	movs	r1, #33	; 0x21
 800c12e:	6978      	ldr	r0, [r7, #20]
 800c130:	f7fd feb0 	bl	8009e94 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800c134:	6978      	ldr	r0, [r7, #20]
 800c136:	f002 fd36 	bl	800eba6 <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6859      	ldr	r1, [r3, #4]
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	2300      	movs	r3, #0
 800c144:	6978      	ldr	r0, [r7, #20]
 800c146:	f000 f804 	bl	800c152 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800c14a:	bf00      	nop
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	60f8      	str	r0, [r7, #12]
 800c15a:	60b9      	str	r1, [r7, #8]
 800c15c:	607a      	str	r2, [r7, #4]
 800c15e:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f002 fce5 	bl	800eb34 <cifaddr>
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00a      	beq.n	800c1a6 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c196:	f36f 0341 	bfc	r3, #1, #1
 800c19a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800c19e:	2121      	movs	r1, #33	; 0x21
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7fd fe91 	bl	8009ec8 <np_finished>
	}
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3344      	adds	r3, #68	; 0x44
 800c1bc:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3360      	adds	r3, #96	; 0x60
 800c1c2:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	33a8      	adds	r3, #168	; 0xa8
 800c1c8:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c1d6:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	4a2b      	ldr	r2, [pc, #172]	; (800c288 <lcp_init+0xd8>)
 800c1dc:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800c1de:	6978      	ldr	r0, [r7, #20]
 800c1e0:	f7fd fe8e 	bl	8009f00 <fsm_init>

    BZERO(wo, sizeof(*wo));
 800c1e4:	2224      	movs	r2, #36	; 0x24
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6938      	ldr	r0, [r7, #16]
 800c1ea:	f004 f998 	bl	801051e <memset>
    wo->neg_mru = 1;
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	7813      	ldrb	r3, [r2, #0]
 800c1f2:	f043 0304 	orr.w	r3, r3, #4
 800c1f6:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c1fe:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	7813      	ldrb	r3, [r2, #0]
 800c204:	f043 0308 	orr.w	r3, r3, #8
 800c208:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	7813      	ldrb	r3, [r2, #0]
 800c20e:	f043 0320 	orr.w	r3, r3, #32
 800c212:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	7813      	ldrb	r3, [r2, #0]
 800c218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c21c:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	7813      	ldrb	r3, [r2, #0]
 800c222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c226:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800c228:	2224      	movs	r2, #36	; 0x24
 800c22a:	2100      	movs	r1, #0
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f004 f976 	bl	801051e <memset>
    ao->neg_mru = 1;
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	7813      	ldrb	r3, [r2, #0]
 800c236:	f043 0304 	orr.w	r3, r3, #4
 800c23a:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c242:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	7813      	ldrb	r3, [r2, #0]
 800c248:	f043 0308 	orr.w	r3, r3, #8
 800c24c:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	7813      	ldrb	r3, [r2, #0]
 800c252:	f043 0310 	orr.w	r3, r3, #16
 800c256:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	7813      	ldrb	r3, [r2, #0]
 800c25c:	f043 0320 	orr.w	r3, r3, #32
 800c260:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	7813      	ldrb	r3, [r2, #0]
 800c266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26a:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	7813      	ldrb	r3, [r2, #0]
 800c270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c274:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	7853      	ldrb	r3, [r2, #1]
 800c27a:	f043 0304 	orr.w	r3, r3, #4
 800c27e:	7053      	strb	r3, [r2, #1]
}
 800c280:	bf00      	nop
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	080138f4 	.word	0x080138f4

0800c28c <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3344      	adds	r3, #68	; 0x44
 800c298:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3360      	adds	r3, #96	; 0x60
 800c29e:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	7c5b      	ldrb	r3, [r3, #17]
 800c2a4:	f023 0305 	bic.w	r3, r3, #5
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	7c5b      	ldrb	r3, [r3, #17]
 800c2c0:	f043 0301 	orr.w	r3, r3, #1
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f003 0302 	and.w	r3, r3, #2
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d006      	beq.n	800c2e6 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	7c5b      	ldrb	r3, [r3, #17]
 800c2dc:	f043 0304 	orr.w	r3, r3, #4
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fd fea0 	bl	800a02c <fsm_open>
}
 800c2ec:	bf00      	nop
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3344      	adds	r3, #68	; 0x44
 800c302:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800c30e:	210b      	movs	r1, #11
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f002 fbab 	bl	800ea6c <new_phase>

    if (f->flags & DELAYED_UP) {
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	7c5b      	ldrb	r3, [r3, #17]
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	da06      	bge.n	800c32e <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800c320:	68f9      	ldr	r1, [r7, #12]
 800c322:	4812      	ldr	r0, [pc, #72]	; (800c36c <lcp_close+0x78>)
 800c324:	f7fd fb90 	bl	8009a48 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2203      	movs	r2, #3
 800c32c:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	7c1b      	ldrb	r3, [r3, #16]
 800c332:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7fd ff40 	bl	800a1bc <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d10f      	bne.n	800c362 <lcp_close+0x6e>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	7c5b      	ldrb	r3, [r3, #17]
 800c346:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	7c5b      	ldrb	r3, [r3, #17]
 800c352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c356:	b2da      	uxtb	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f001 ff1a 	bl	800e196 <lcp_finished>
    }
}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	0800c471 	.word	0x0800c471

0800c370 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af02      	add	r7, sp, #8
 800c376:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3360      	adds	r3, #96	; 0x60
 800c37c:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3344      	adds	r3, #68	; 0x44
 800c382:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800c384:	2300      	movs	r3, #0
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	f04f 32ff 	mov.w	r2, #4294967295
 800c38e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f002 fb7a 	bl	800ea8c <ppp_send_config>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	db3f      	blt.n	800c41e <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	f003 0308 	and.w	r3, r3, #8
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <lcp_lowerup+0x40>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	e001      	b.n	800c3b4 <lcp_lowerup+0x44>
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c3bc:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c3be:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c3c8:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f002 fb76 	bl	800eac4 <ppp_recv_config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	db1f      	blt.n	800c41e <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c3e4:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	885b      	ldrh	r3, [r3, #2]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d012      	beq.n	800c416 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	7c5b      	ldrb	r3, [r3, #17]
 800c3f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	4809      	ldr	r0, [pc, #36]	; (800c428 <lcp_lowerup+0xb8>)
 800c402:	f7fd fb21 	bl	8009a48 <sys_untimeout>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	885b      	ldrh	r3, [r3, #2]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4906      	ldr	r1, [pc, #24]	; (800c428 <lcp_lowerup+0xb8>)
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fd faee 	bl	80099f0 <sys_timeout>
 800c414:	e004      	b.n	800c420 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800c416:	68b8      	ldr	r0, [r7, #8]
 800c418:	f7fd fd8f 	bl	8009f3a <fsm_lowerup>
 800c41c:	e000      	b.n	800c420 <lcp_lowerup+0xb0>
	    return;
 800c41e:	bf00      	nop
}
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	0800c471 	.word	0x0800c471

0800c42c <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3344      	adds	r3, #68	; 0x44
 800c438:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	7c5b      	ldrb	r3, [r3, #17]
 800c43e:	b25b      	sxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	da0b      	bge.n	800c45c <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	7c5b      	ldrb	r3, [r3, #17]
 800c448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	4805      	ldr	r0, [pc, #20]	; (800c46c <lcp_lowerdown+0x40>)
 800c456:	f7fd faf7 	bl	8009a48 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800c45a:	e002      	b.n	800c462 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7fd fd91 	bl	8009f84 <fsm_lowerdown>
}
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	0800c471 	.word	0x0800c471

0800c470 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	7c5b      	ldrb	r3, [r3, #17]
 800c480:	b25b      	sxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	da09      	bge.n	800c49a <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	7c5b      	ldrb	r3, [r3, #17]
 800c48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f7fd fd50 	bl	8009f3a <fsm_lowerup>
    }
}
 800c49a:	bf00      	nop
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	3344      	adds	r3, #68	; 0x44
 800c4b4:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	7c5b      	ldrb	r3, [r3, #17]
 800c4ba:	b25b      	sxtb	r3, r3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	da0d      	bge.n	800c4dc <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	7c5b      	ldrb	r3, [r3, #17]
 800c4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800c4ce:	6979      	ldr	r1, [r7, #20]
 800c4d0:	4807      	ldr	r0, [pc, #28]	; (800c4f0 <lcp_input+0x4c>)
 800c4d2:	f7fd fab9 	bl	8009a48 <sys_untimeout>
	fsm_lowerup(f);
 800c4d6:	6978      	ldr	r0, [r7, #20]
 800c4d8:	f7fd fd2f 	bl	8009f3a <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	6978      	ldr	r0, [r7, #20]
 800c4e2:	f7fd ff4f 	bl	800a384 <fsm_input>
}
 800c4e6:	bf00      	nop
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800c471 	.word	0x0800c471

0800c4f4 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af02      	add	r7, sp, #8
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	3384      	adds	r3, #132	; 0x84
 800c50c:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	3b08      	subs	r3, #8
 800c512:	2b05      	cmp	r3, #5
 800c514:	d84a      	bhi.n	800c5ac <lcp_extcode+0xb8>
 800c516:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <lcp_extcode+0x28>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c535 	.word	0x0800c535
 800c520:	0800c541 	.word	0x0800c541
 800c524:	0800c59f 	.word	0x0800c59f
 800c528:	0800c5b1 	.word	0x0800c5b1
 800c52c:	0800c5b1 	.word	0x0800c5b1
 800c530:	0800c5b1 	.word	0x0800c5b1
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800c534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f841 	bl	800c5c0 <lcp_rprotrej>
	break;
 800c53e:	e03a      	b.n	800c5b6 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	7c1b      	ldrb	r3, [r3, #16]
 800c544:	2b09      	cmp	r3, #9
 800c546:	d135      	bne.n	800c5b4 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	617a      	str	r2, [r7, #20]
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	6892      	ldr	r2, [r2, #8]
 800c556:	0e12      	lsrs	r2, r2, #24
 800c558:	b2d2      	uxtb	r2, r2
 800c55a:	701a      	strb	r2, [r3, #0]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	617a      	str	r2, [r7, #20]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	6892      	ldr	r2, [r2, #8]
 800c566:	0c12      	lsrs	r2, r2, #16
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	617a      	str	r2, [r7, #20]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	6892      	ldr	r2, [r2, #8]
 800c576:	0a12      	lsrs	r2, r2, #8
 800c578:	b2d2      	uxtb	r2, r2
 800c57a:	701a      	strb	r2, [r3, #0]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	617a      	str	r2, [r7, #20]
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	6892      	ldr	r2, [r2, #8]
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	210a      	movs	r1, #10
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f7fe fb8c 	bl	800acb4 <fsm_sdata>
	break;
 800c59c:	e00b      	b.n	800c5b6 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f001 fe6a 	bl	800e27e <lcp_received_echo_reply>
	break;
 800c5aa:	e004      	b.n	800c5b6 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	e003      	b.n	800c5b8 <lcp_extcode+0xc4>
	break;
 800c5b0:	bf00      	nop
 800c5b2:	e000      	b.n	800c5b6 <lcp_extcode+0xc2>
	    break;
 800c5b4:	bf00      	nop
    }
    return 1;
 800c5b6:	2301      	movs	r3, #1
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	dd2d      	ble.n	800c62e <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	60ba      	str	r2, [r7, #8]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	021b      	lsls	r3, r3, #8
 800c5de:	837b      	strh	r3, [r7, #26]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	60ba      	str	r2, [r7, #8]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	8b7b      	ldrh	r3, [r7, #26]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	7c1b      	ldrb	r3, [r3, #16]
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	d11c      	bne.n	800c632 <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	e00e      	b.n	800c61c <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	8b7a      	ldrh	r2, [r7, #26]
 800c604:	429a      	cmp	r2, r3
 800c606:	d106      	bne.n	800c616 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	6812      	ldr	r2, [r2, #0]
 800c610:	4610      	mov	r0, r2
 800c612:	4798      	blx	r3
	    return;
 800c614:	e00e      	b.n	800c634 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	3301      	adds	r3, #1
 800c61a:	61fb      	str	r3, [r7, #28]
 800c61c:	4a07      	ldr	r2, [pc, #28]	; (800c63c <lcp_rprotrej+0x7c>)
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1e8      	bne.n	800c5fe <lcp_rprotrej+0x3e>
 800c62c:	e002      	b.n	800c634 <lcp_rprotrej+0x74>
	return;
 800c62e:	bf00      	nop
 800c630:	e000      	b.n	800c634 <lcp_rprotrej+0x74>
	return;
 800c632:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	08013960 	.word	0x08013960

0800c640 <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3344      	adds	r3, #68	; 0x44
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe f9f5 	bl	800aa3c <fsm_protreject>
}
 800c652:	bf00      	nop
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b088      	sub	sp, #32
 800c65e:	af02      	add	r7, sp, #8
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3344      	adds	r3, #68	; 0x44
 800c66a:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	7c9b      	ldrb	r3, [r3, #18]
 800c670:	3301      	adds	r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	749a      	strb	r2, [r3, #18]
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	7c9a      	ldrb	r2, [r3, #18]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2108      	movs	r1, #8
 800c684:	6978      	ldr	r0, [r7, #20]
 800c686:	f7fe fb15 	bl	800acb4 <fsm_sdata>
	      p, len);
}
 800c68a:	bf00      	nop
 800c68c:	3718      	adds	r7, #24
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 800c692:	b5b0      	push	{r4, r5, r7, lr}
 800c694:	b086      	sub	sp, #24
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	3360      	adds	r3, #96	; 0x60
 800c6a4:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	3384      	adds	r3, #132	; 0x84
 800c6aa:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	33a8      	adds	r3, #168	; 0xa8
 800c6b0:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d010      	beq.n	800c6dc <lcp_resetci+0x4a>
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00c      	beq.n	800c6dc <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00a      	beq.n	800c6e6 <lcp_resetci+0x54>
        ao->neg_upap = 0;
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	7813      	ldrb	r3, [r2, #0]
 800c6d4:	f36f 1304 	bfc	r3, #4, #1
 800c6d8:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 800c6da:	e004      	b.n	800c6e6 <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	7813      	ldrb	r3, [r2, #0]
 800c6e0:	f36f 1304 	bfc	r3, #4, #1
 800c6e4:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 800c6e6:	f001 fed5 	bl	800e494 <magic>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	4614      	mov	r4, r2
 800c6fc:	461d      	mov	r5, r3
 800c6fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c706:	682b      	ldr	r3, [r5, #0]
 800c708:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	7853      	ldrb	r3, [r2, #1]
 800c70e:	f36f 0341 	bfc	r3, #1, #1
 800c712:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	7853      	ldrb	r3, [r2, #1]
 800c718:	f36f 0382 	bfc	r3, #2, #1
 800c71c:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	f003 0310 	and.w	r3, r3, #16
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	7853      	ldrb	r3, [r2, #1]
 800c730:	f36f 0382 	bfc	r3, #2, #1
 800c734:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c73c:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 800c740:	bf00      	nop
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bdb0      	pop	{r4, r5, r7, pc}

0800c748 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3384      	adds	r3, #132	; 0x84
 800c75a:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <lcp_cilen+0x32>
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	885b      	ldrh	r3, [r3, #2]
 800c76e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c772:	4293      	cmp	r3, r2
 800c774:	d001      	beq.n	800c77a <lcp_cilen+0x32>
 800c776:	2204      	movs	r2, #4
 800c778:	e000      	b.n	800c77c <lcp_cilen+0x34>
 800c77a:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 0308 	and.w	r3, r3, #8
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <lcp_cilen+0x50>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c792:	d001      	beq.n	800c798 <lcp_cilen+0x50>
 800c794:	2306      	movs	r3, #6
 800c796:	e000      	b.n	800c79a <lcp_cilen+0x52>
 800c798:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800c79a:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <lcp_cilen+0x66>
 800c7aa:	2304      	movs	r3, #4
 800c7ac:	e000      	b.n	800c7b0 <lcp_cilen+0x68>
 800c7ae:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800c7b0:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	785b      	ldrb	r3, [r3, #1]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <lcp_cilen+0x7c>
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	e000      	b.n	800c7c6 <lcp_cilen+0x7e>
 800c7c4:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 800c7c6:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <lcp_cilen+0x92>
 800c7d6:	2306      	movs	r3, #6
 800c7d8:	e000      	b.n	800c7dc <lcp_cilen+0x94>
 800c7da:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 800c7dc:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <lcp_cilen+0xa8>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	e000      	b.n	800c7f2 <lcp_cilen+0xaa>
 800c7f0:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 800c7f2:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <lcp_cilen+0xbe>
 800c802:	2302      	movs	r3, #2
 800c804:	e000      	b.n	800c808 <lcp_cilen+0xc0>
 800c806:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 800c808:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 800c812:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	785b      	ldrb	r3, [r3, #1]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <lcp_cilen+0xe2>
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	7b9b      	ldrb	r3, [r3, #14]
 800c826:	3303      	adds	r3, #3
 800c828:	e000      	b.n	800c82c <lcp_cilen+0xe4>
 800c82a:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 800c82c:	4413      	add	r3, r2
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800c83a:	b480      	push	{r7}
 800c83c:	b089      	sub	sp, #36	; 0x24
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	3384      	adds	r3, #132	; 0x84
 800c850:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	f003 0304 	and.w	r3, r3, #4
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01f      	beq.n	800c8a4 <lcp_addci+0x6a>
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	885b      	ldrh	r3, [r3, #2]
 800c868:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d019      	beq.n	800c8a4 <lcp_addci+0x6a>
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	60ba      	str	r2, [r7, #8]
 800c876:	2201      	movs	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	60ba      	str	r2, [r7, #8]
 800c880:	2204      	movs	r2, #4
 800c882:	701a      	strb	r2, [r3, #0]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	60ba      	str	r2, [r7, #8]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	8852      	ldrh	r2, [r2, #2]
 800c88e:	0a12      	lsrs	r2, r2, #8
 800c890:	b292      	uxth	r2, r2
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	60ba      	str	r2, [r7, #8]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	8852      	ldrh	r2, [r2, #2]
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f003 0308 	and.w	r3, r3, #8
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d02d      	beq.n	800c90e <lcp_addci+0xd4>
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ba:	d028      	beq.n	800c90e <lcp_addci+0xd4>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	60ba      	str	r2, [r7, #8]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	60ba      	str	r2, [r7, #8]
 800c8cc:	2206      	movs	r2, #6
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	60ba      	str	r2, [r7, #8]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	6852      	ldr	r2, [r2, #4]
 800c8da:	0e12      	lsrs	r2, r2, #24
 800c8dc:	b2d2      	uxtb	r2, r2
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	60ba      	str	r2, [r7, #8]
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	6852      	ldr	r2, [r2, #4]
 800c8ea:	0c12      	lsrs	r2, r2, #16
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	60ba      	str	r2, [r7, #8]
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	6852      	ldr	r2, [r2, #4]
 800c8fa:	0a12      	lsrs	r2, r2, #8
 800c8fc:	b2d2      	uxtb	r2, r2
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	60ba      	str	r2, [r7, #8]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	6852      	ldr	r2, [r2, #4]
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f003 0310 	and.w	r3, r3, #16
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d013      	beq.n	800c944 <lcp_addci+0x10a>
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	60ba      	str	r2, [r7, #8]
 800c922:	2203      	movs	r2, #3
 800c924:	701a      	strb	r2, [r3, #0]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	60ba      	str	r2, [r7, #8]
 800c92c:	2204      	movs	r2, #4
 800c92e:	701a      	strb	r2, [r3, #0]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	60ba      	str	r2, [r7, #8]
 800c936:	22c0      	movs	r2, #192	; 0xc0
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	60ba      	str	r2, [r7, #8]
 800c940:	2223      	movs	r2, #35	; 0x23
 800c942:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	785b      	ldrb	r3, [r3, #1]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <lcp_addci+0x136>
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	60ba      	str	r2, [r7, #8]
 800c958:	220d      	movs	r2, #13
 800c95a:	701a      	strb	r2, [r3, #0]
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	60ba      	str	r2, [r7, #8]
 800c962:	2203      	movs	r2, #3
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	60ba      	str	r2, [r7, #8]
 800c96c:	2206      	movs	r2, #6
 800c96e:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f003 0320 	and.w	r3, r3, #32
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d028      	beq.n	800c9d0 <lcp_addci+0x196>
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	60ba      	str	r2, [r7, #8]
 800c984:	2205      	movs	r2, #5
 800c986:	701a      	strb	r2, [r3, #0]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	60ba      	str	r2, [r7, #8]
 800c98e:	2206      	movs	r2, #6
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	60ba      	str	r2, [r7, #8]
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	6892      	ldr	r2, [r2, #8]
 800c99c:	0e12      	lsrs	r2, r2, #24
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	701a      	strb	r2, [r3, #0]
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	1c5a      	adds	r2, r3, #1
 800c9a6:	60ba      	str	r2, [r7, #8]
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	6892      	ldr	r2, [r2, #8]
 800c9ac:	0c12      	lsrs	r2, r2, #16
 800c9ae:	b2d2      	uxtb	r2, r2
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	60ba      	str	r2, [r7, #8]
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	6892      	ldr	r2, [r2, #8]
 800c9bc:	0a12      	lsrs	r2, r2, #8
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	60ba      	str	r2, [r7, #8]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	6892      	ldr	r2, [r2, #8]
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <lcp_addci+0x1b8>
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	60ba      	str	r2, [r7, #8]
 800c9e4:	2207      	movs	r2, #7
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	60ba      	str	r2, [r7, #8]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d009      	beq.n	800ca14 <lcp_addci+0x1da>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	60ba      	str	r2, [r7, #8]
 800ca06:	2208      	movs	r2, #8
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	60ba      	str	r2, [r7, #8]
 800ca10:	2202      	movs	r2, #2
 800ca12:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	f003 0302 	and.w	r3, r3, #2
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d009      	beq.n	800ca36 <lcp_addci+0x1fc>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	60ba      	str	r2, [r7, #8]
 800ca28:	2212      	movs	r2, #18
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	60ba      	str	r2, [r7, #8]
 800ca32:	2202      	movs	r2, #2
 800ca34:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	785b      	ldrb	r3, [r3, #1]
 800ca3a:	f003 0304 	and.w	r3, r3, #4
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d027      	beq.n	800ca94 <lcp_addci+0x25a>
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	60ba      	str	r2, [r7, #8]
 800ca4a:	2213      	movs	r2, #19
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	60ba      	str	r2, [r7, #8]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	7b92      	ldrb	r2, [r2, #14]
 800ca58:	3203      	adds	r2, #3
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	60ba      	str	r2, [r7, #8]
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	7b52      	ldrb	r2, [r2, #13]
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]
 800ca6e:	e00b      	b.n	800ca88 <lcp_addci+0x24e>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	60ba      	str	r2, [r7, #8]
 800ca76:	6979      	ldr	r1, [r7, #20]
 800ca78:	69fa      	ldr	r2, [r7, #28]
 800ca7a:	440a      	add	r2, r1
 800ca7c:	320f      	adds	r2, #15
 800ca7e:	7812      	ldrb	r2, [r2, #0]
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	3301      	adds	r3, #1
 800ca86:	61fb      	str	r3, [r7, #28]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	7b9b      	ldrb	r3, [r3, #14]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	dced      	bgt.n	800ca70 <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 800ca94:	bf00      	nop
 800ca96:	3724      	adds	r7, #36	; 0x24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 800caa0:	b480      	push	{r7}
 800caa2:	b08b      	sub	sp, #44	; 0x2c
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 800cab2:	6a3b      	ldr	r3, [r7, #32]
 800cab4:	3384      	adds	r3, #132	; 0x84
 800cab6:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d033      	beq.n	800cb2e <lcp_ackci+0x8e>
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	885b      	ldrh	r3, [r3, #2]
 800caca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cace:	4293      	cmp	r3, r2
 800cad0:	d02d      	beq.n	800cb2e <lcp_ackci+0x8e>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3b04      	subs	r3, #4
 800cad6:	607b      	str	r3, [r7, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f2c0 81c6 	blt.w	800ce6c <lcp_ackci+0x3cc>
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	60ba      	str	r2, [r7, #8]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	76fb      	strb	r3, [r7, #27]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	60ba      	str	r2, [r7, #8]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	76bb      	strb	r3, [r7, #26]
 800caf4:	7ebb      	ldrb	r3, [r7, #26]
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	f040 81d9 	bne.w	800ceae <lcp_ackci+0x40e>
 800cafc:	7efb      	ldrb	r3, [r7, #27]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	f040 81d5 	bne.w	800ceae <lcp_ackci+0x40e>
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	60ba      	str	r2, [r7, #8]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	021b      	lsls	r3, r3, #8
 800cb10:	833b      	strh	r3, [r7, #24]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	60ba      	str	r2, [r7, #8]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	8b3b      	ldrh	r3, [r7, #24]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	833b      	strh	r3, [r7, #24]
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	885b      	ldrh	r3, [r3, #2]
 800cb26:	8b3a      	ldrh	r2, [r7, #24]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	f040 81a1 	bne.w	800ce70 <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d047      	beq.n	800cbcc <lcp_ackci+0x12c>
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb44:	d042      	beq.n	800cbcc <lcp_ackci+0x12c>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3b06      	subs	r3, #6
 800cb4a:	607b      	str	r3, [r7, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f2c0 8190 	blt.w	800ce74 <lcp_ackci+0x3d4>
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	60ba      	str	r2, [r7, #8]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	76fb      	strb	r3, [r7, #27]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	60ba      	str	r2, [r7, #8]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	76bb      	strb	r3, [r7, #26]
 800cb68:	7ebb      	ldrb	r3, [r7, #26]
 800cb6a:	2b06      	cmp	r3, #6
 800cb6c:	f040 819f 	bne.w	800ceae <lcp_ackci+0x40e>
 800cb70:	7efb      	ldrb	r3, [r7, #27]
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	f040 819b 	bne.w	800ceae <lcp_ackci+0x40e>
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	1c5a      	adds	r2, r3, #1
 800cb7c:	60ba      	str	r2, [r7, #8]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	021b      	lsls	r3, r3, #8
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	60ba      	str	r2, [r7, #8]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	021b      	lsls	r3, r3, #8
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	60ba      	str	r2, [r7, #8]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	461a      	mov	r2, r3
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	617b      	str	r3, [r7, #20]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	021b      	lsls	r3, r3, #8
 800cbae:	617b      	str	r3, [r7, #20]
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	1c5a      	adds	r2, r3, #1
 800cbb4:	60ba      	str	r2, [r7, #8]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	f040 8156 	bne.w	800ce78 <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f003 0310 	and.w	r3, r3, #16
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d02d      	beq.n	800cc36 <lcp_ackci+0x196>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f2c0 814a 	blt.w	800ce7c <lcp_ackci+0x3dc>
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	60ba      	str	r2, [r7, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	76fb      	strb	r3, [r7, #27]
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	60ba      	str	r2, [r7, #8]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	76bb      	strb	r3, [r7, #26]
 800cbfc:	7ebb      	ldrb	r3, [r7, #26]
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	f040 8155 	bne.w	800ceae <lcp_ackci+0x40e>
 800cc04:	7efb      	ldrb	r3, [r7, #27]
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	f040 8151 	bne.w	800ceae <lcp_ackci+0x40e>
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	60ba      	str	r2, [r7, #8]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	021b      	lsls	r3, r3, #8
 800cc18:	833b      	strh	r3, [r7, #24]
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	60ba      	str	r2, [r7, #8]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	8b3b      	ldrh	r3, [r7, #24]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	833b      	strh	r3, [r7, #24]
 800cc2a:	8b3b      	ldrh	r3, [r7, #24]
 800cc2c:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cc30:	4293      	cmp	r3, r2
 800cc32:	f040 8125 	bne.w	800ce80 <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	785b      	ldrb	r3, [r3, #1]
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d021      	beq.n	800cc88 <lcp_ackci+0x1e8>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3b03      	subs	r3, #3
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f2c0 8119 	blt.w	800ce84 <lcp_ackci+0x3e4>
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	1c5a      	adds	r2, r3, #1
 800cc56:	60ba      	str	r2, [r7, #8]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	76fb      	strb	r3, [r7, #27]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	60ba      	str	r2, [r7, #8]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	76bb      	strb	r3, [r7, #26]
 800cc66:	7ebb      	ldrb	r3, [r7, #26]
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	f040 8120 	bne.w	800ceae <lcp_ackci+0x40e>
 800cc6e:	7efb      	ldrb	r3, [r7, #27]
 800cc70:	2b0d      	cmp	r3, #13
 800cc72:	f040 811c 	bne.w	800ceae <lcp_ackci+0x40e>
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	60ba      	str	r2, [r7, #8]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	74fb      	strb	r3, [r7, #19]
 800cc80:	7cfb      	ldrb	r3, [r7, #19]
 800cc82:	2b06      	cmp	r3, #6
 800cc84:	f040 8100 	bne.w	800ce88 <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d042      	beq.n	800cd1c <lcp_ackci+0x27c>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3b06      	subs	r3, #6
 800cc9a:	607b      	str	r3, [r7, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f2c0 80f4 	blt.w	800ce8c <lcp_ackci+0x3ec>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	60ba      	str	r2, [r7, #8]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	76fb      	strb	r3, [r7, #27]
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	60ba      	str	r2, [r7, #8]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	76bb      	strb	r3, [r7, #26]
 800ccb8:	7ebb      	ldrb	r3, [r7, #26]
 800ccba:	2b06      	cmp	r3, #6
 800ccbc:	f040 80f7 	bne.w	800ceae <lcp_ackci+0x40e>
 800ccc0:	7efb      	ldrb	r3, [r7, #27]
 800ccc2:	2b05      	cmp	r3, #5
 800ccc4:	f040 80f3 	bne.w	800ceae <lcp_ackci+0x40e>
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	60ba      	str	r2, [r7, #8]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	021b      	lsls	r3, r3, #8
 800ccd2:	617b      	str	r3, [r7, #20]
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	60ba      	str	r2, [r7, #8]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	60ba      	str	r2, [r7, #8]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	60ba      	str	r2, [r7, #8]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	689a      	ldr	r2, [r3, #8]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	f040 80ba 	bne.w	800ce90 <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d018      	beq.n	800cd5c <lcp_ackci+0x2bc>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3b02      	subs	r3, #2
 800cd2e:	607b      	str	r3, [r7, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f2c0 80ae 	blt.w	800ce94 <lcp_ackci+0x3f4>
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	60ba      	str	r2, [r7, #8]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	76fb      	strb	r3, [r7, #27]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	60ba      	str	r2, [r7, #8]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	76bb      	strb	r3, [r7, #26]
 800cd4c:	7ebb      	ldrb	r3, [r7, #26]
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	f040 80ad 	bne.w	800ceae <lcp_ackci+0x40e>
 800cd54:	7efb      	ldrb	r3, [r7, #27]
 800cd56:	2b07      	cmp	r3, #7
 800cd58:	f040 80a9 	bne.w	800ceae <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d018      	beq.n	800cd9c <lcp_ackci+0x2fc>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3b02      	subs	r3, #2
 800cd6e:	607b      	str	r3, [r7, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f2c0 8090 	blt.w	800ce98 <lcp_ackci+0x3f8>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	60ba      	str	r2, [r7, #8]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	76fb      	strb	r3, [r7, #27]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	60ba      	str	r2, [r7, #8]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	76bb      	strb	r3, [r7, #26]
 800cd8c:	7ebb      	ldrb	r3, [r7, #26]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	f040 808d 	bne.w	800ceae <lcp_ackci+0x40e>
 800cd94:	7efb      	ldrb	r3, [r7, #27]
 800cd96:	2b08      	cmp	r3, #8
 800cd98:	f040 8089 	bne.w	800ceae <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d015      	beq.n	800cdd6 <lcp_ackci+0x336>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	3b02      	subs	r3, #2
 800cdae:	607b      	str	r3, [r7, #4]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	db72      	blt.n	800ce9c <lcp_ackci+0x3fc>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	60ba      	str	r2, [r7, #8]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	76fb      	strb	r3, [r7, #27]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	60ba      	str	r2, [r7, #8]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	76bb      	strb	r3, [r7, #26]
 800cdca:	7ebb      	ldrb	r3, [r7, #26]
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d16e      	bne.n	800ceae <lcp_ackci+0x40e>
 800cdd0:	7efb      	ldrb	r3, [r7, #27]
 800cdd2:	2b12      	cmp	r3, #18
 800cdd4:	d16b      	bne.n	800ceae <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	785b      	ldrb	r3, [r3, #1]
 800cdda:	f003 0304 	and.w	r3, r3, #4
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d03e      	beq.n	800ce62 <lcp_ackci+0x3c2>
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	7b9b      	ldrb	r3, [r3, #14]
 800cde8:	3303      	adds	r3, #3
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	607b      	str	r3, [r7, #4]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	db54      	blt.n	800cea0 <lcp_ackci+0x400>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	1c5a      	adds	r2, r3, #1
 800cdfa:	60ba      	str	r2, [r7, #8]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	76fb      	strb	r3, [r7, #27]
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	60ba      	str	r2, [r7, #8]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	76bb      	strb	r3, [r7, #26]
 800ce0a:	7eba      	ldrb	r2, [r7, #26]
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	7b9b      	ldrb	r3, [r3, #14]
 800ce10:	3303      	adds	r3, #3
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d14b      	bne.n	800ceae <lcp_ackci+0x40e>
 800ce16:	7efb      	ldrb	r3, [r7, #27]
 800ce18:	2b13      	cmp	r3, #19
 800ce1a:	d148      	bne.n	800ceae <lcp_ackci+0x40e>
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	60ba      	str	r2, [r7, #8]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	74fb      	strb	r3, [r7, #19]
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	7b5b      	ldrb	r3, [r3, #13]
 800ce2a:	7cfa      	ldrb	r2, [r7, #19]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d139      	bne.n	800cea4 <lcp_ackci+0x404>
 800ce30:	2300      	movs	r3, #0
 800ce32:	627b      	str	r3, [r7, #36]	; 0x24
 800ce34:	e00f      	b.n	800ce56 <lcp_ackci+0x3b6>
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	60ba      	str	r2, [r7, #8]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	74fb      	strb	r3, [r7, #19]
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	4413      	add	r3, r2
 800ce46:	330f      	adds	r3, #15
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	7cfa      	ldrb	r2, [r7, #19]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d12b      	bne.n	800cea8 <lcp_ackci+0x408>
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	3301      	adds	r3, #1
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	7b9b      	ldrb	r3, [r3, #14]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	dce9      	bgt.n	800ce36 <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d121      	bne.n	800ceac <lcp_ackci+0x40c>
	goto bad;
    return (1);
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e021      	b.n	800ceb0 <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800ce6c:	bf00      	nop
 800ce6e:	e01e      	b.n	800ceae <lcp_ackci+0x40e>
 800ce70:	bf00      	nop
 800ce72:	e01c      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800ce74:	bf00      	nop
 800ce76:	e01a      	b.n	800ceae <lcp_ackci+0x40e>
 800ce78:	bf00      	nop
 800ce7a:	e018      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800ce7c:	bf00      	nop
 800ce7e:	e016      	b.n	800ceae <lcp_ackci+0x40e>
 800ce80:	bf00      	nop
 800ce82:	e014      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800ce84:	bf00      	nop
 800ce86:	e012      	b.n	800ceae <lcp_ackci+0x40e>
 800ce88:	bf00      	nop
 800ce8a:	e010      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800ce8c:	bf00      	nop
 800ce8e:	e00e      	b.n	800ceae <lcp_ackci+0x40e>
 800ce90:	bf00      	nop
 800ce92:	e00c      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800ce94:	bf00      	nop
 800ce96:	e00a      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800ce98:	bf00      	nop
 800ce9a:	e008      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800ce9c:	bf00      	nop
 800ce9e:	e006      	b.n	800ceae <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800cea0:	bf00      	nop
 800cea2:	e004      	b.n	800ceae <lcp_ackci+0x40e>
 800cea4:	bf00      	nop
 800cea6:	e002      	b.n	800ceae <lcp_ackci+0x40e>
 800cea8:	bf00      	nop
 800ceaa:	e000      	b.n	800ceae <lcp_ackci+0x40e>
	goto bad;
 800ceac:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	372c      	adds	r7, #44	; 0x2c
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800cebc:	b5b0      	push	{r4, r5, r7, lr}
 800cebe:	b0a0      	sub	sp, #128	; 0x80
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 800ced0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ced2:	3384      	adds	r3, #132	; 0x84
 800ced4:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 800ced6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ced8:	3360      	adds	r3, #96	; 0x60
 800ceda:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 800cee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cee4:	2224      	movs	r2, #36	; 0x24
 800cee6:	2100      	movs	r1, #0
 800cee8:	4618      	mov	r0, r3
 800ceea:	f003 fb18 	bl	801051e <memset>
    try_ = *go;
 800ceee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cef0:	f107 0414 	add.w	r4, r7, #20
 800cef4:	461d      	mov	r5, r3
 800cef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cefa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cefc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 800cf02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d045      	beq.n	800cf9c <lcp_nakci+0xe0>
 800cf10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d03f      	beq.n	800cf9c <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 800cf1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	f003 0304 	and.w	r3, r3, #4
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d038      	beq.n	800cf9c <lcp_nakci+0xe0>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	dd35      	ble.n	800cf9c <lcp_nakci+0xe0>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	3301      	adds	r3, #1
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b04      	cmp	r3, #4
 800cf38:	d130      	bne.n	800cf9c <lcp_nakci+0xe0>
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d12c      	bne.n	800cf9c <lcp_nakci+0xe0>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3b04      	subs	r3, #4
 800cf46:	607b      	str	r3, [r7, #4]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	3302      	adds	r3, #2
 800cf4c:	60bb      	str	r3, [r7, #8]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	1c5a      	adds	r2, r3, #1
 800cf52:	60ba      	str	r2, [r7, #8]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	021b      	lsls	r3, r3, #8
 800cf5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	1c5a      	adds	r2, r3, #1
 800cf62:	60ba      	str	r2, [r7, #8]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800cf72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cf76:	f043 0304 	orr.w	r3, r3, #4
 800cf7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800cf7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf80:	885b      	ldrh	r3, [r3, #2]
 800cf82:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d905      	bls.n	800cf96 <lcp_nakci+0xda>
 800cf8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cf8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d802      	bhi.n	800cf9c <lcp_nakci+0xe0>
 800cf96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cf9a:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 800cf9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	f003 0308 	and.w	r3, r3, #8
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d04c      	beq.n	800d044 <lcp_nakci+0x188>
 800cfaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d047      	beq.n	800d044 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 800cfb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	f003 0308 	and.w	r3, r3, #8
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d040      	beq.n	800d044 <lcp_nakci+0x188>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b05      	cmp	r3, #5
 800cfc6:	dd3d      	ble.n	800d044 <lcp_nakci+0x188>
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b06      	cmp	r3, #6
 800cfd0:	d138      	bne.n	800d044 <lcp_nakci+0x188>
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d134      	bne.n	800d044 <lcp_nakci+0x188>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	3b06      	subs	r3, #6
 800cfde:	607b      	str	r3, [r7, #4]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	3302      	adds	r3, #2
 800cfe4:	60bb      	str	r3, [r7, #8]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	60ba      	str	r2, [r7, #8]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	021b      	lsls	r3, r3, #8
 800cff0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	60ba      	str	r2, [r7, #8]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cffe:	4313      	orrs	r3, r2
 800d000:	66bb      	str	r3, [r7, #104]	; 0x68
 800d002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	66bb      	str	r3, [r7, #104]	; 0x68
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	60ba      	str	r2, [r7, #8]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d014:	4313      	orrs	r3, r2
 800d016:	66bb      	str	r3, [r7, #104]	; 0x68
 800d018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d01a:	021b      	lsls	r3, r3, #8
 800d01c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	60ba      	str	r2, [r7, #8]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d02a:	4313      	orrs	r3, r2
 800d02c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d02e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d032:	f043 0308 	orr.w	r3, r3, #8
 800d036:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d040:	4313      	orrs	r3, r2
 800d042:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 800d044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	b2db      	uxtb	r3, r3
    if ((0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d04d      	beq.n	800d0ee <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b03      	cmp	r3, #3
 800d056:	dd4a      	ble.n	800d0ee <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d146      	bne.n	800d0ee <lcp_nakci+0x232>
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	3301      	adds	r3, #1
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b03      	cmp	r3, #3
 800d068:	d941      	bls.n	800d0ee <lcp_nakci+0x232>
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3301      	adds	r3, #1
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	461a      	mov	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	429a      	cmp	r2, r3
 800d076:	dc3a      	bgt.n	800d0ee <lcp_nakci+0x232>
	cilen = p[1];
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3301      	adds	r3, #1
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 800d088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d096:	f362 1304 	bfi	r3, r2, #4, #1
 800d09a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	3302      	adds	r3, #2
 800d0a2:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	60ba      	str	r2, [r7, #8]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	021b      	lsls	r3, r3, #8
 800d0b0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	60ba      	str	r2, [r7, #8]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 800d0c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d0cc:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d103      	bne.n	800d0dc <lcp_nakci+0x220>
 800d0d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0d6:	2b04      	cmp	r3, #4
 800d0d8:	f000 8265 	beq.w	800d5a6 <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 800d0dc:	7d3b      	ldrb	r3, [r7, #20]
 800d0de:	f36f 1304 	bfc	r3, #4, #1
 800d0e2:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 800d0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0e6:	3b04      	subs	r3, #4
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 800d0ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0f0:	785b      	ldrb	r3, [r3, #1]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d021      	beq.n	800d140 <lcp_nakci+0x284>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	dd1e      	ble.n	800d140 <lcp_nakci+0x284>
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	3301      	adds	r3, #1
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d119      	bne.n	800d140 <lcp_nakci+0x284>
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b0d      	cmp	r3, #13
 800d112:	d115      	bne.n	800d140 <lcp_nakci+0x284>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3b03      	subs	r3, #3
 800d118:	607b      	str	r3, [r7, #4]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	3302      	adds	r3, #2
 800d11e:	60bb      	str	r3, [r7, #8]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	60ba      	str	r2, [r7, #8]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800d12c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d130:	f043 0301 	orr.w	r3, r3, #1
 800d134:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d138:	7d7b      	ldrb	r3, [r7, #21]
 800d13a:	f36f 0300 	bfc	r3, #0, #1
 800d13e:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 800d140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d041      	beq.n	800d1d2 <lcp_nakci+0x316>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b05      	cmp	r3, #5
 800d152:	dd3e      	ble.n	800d1d2 <lcp_nakci+0x316>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	3301      	adds	r3, #1
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b06      	cmp	r3, #6
 800d15c:	d139      	bne.n	800d1d2 <lcp_nakci+0x316>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b05      	cmp	r3, #5
 800d164:	d135      	bne.n	800d1d2 <lcp_nakci+0x316>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3b06      	subs	r3, #6
 800d16a:	607b      	str	r3, [r7, #4]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	3302      	adds	r3, #2
 800d170:	60bb      	str	r3, [r7, #8]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	60ba      	str	r2, [r7, #8]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	021b      	lsls	r3, r3, #8
 800d17c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	60ba      	str	r2, [r7, #8]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d18a:	4313      	orrs	r3, r2
 800d18c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d18e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	66bb      	str	r3, [r7, #104]	; 0x68
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	60ba      	str	r2, [r7, #8]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
 800d19e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	60ba      	str	r2, [r7, #8]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d1be:	f043 0320 	orr.w	r3, r3, #32
 800d1c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d1c6:	f001 f965 	bl	800e494 <magic>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	61fb      	str	r3, [r7, #28]
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800d1d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d01b      	beq.n	800d218 <lcp_nakci+0x35c>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	dd18      	ble.n	800d218 <lcp_nakci+0x35c>
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d113      	bne.n	800d218 <lcp_nakci+0x35c>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b07      	cmp	r3, #7
 800d1f6:	d10f      	bne.n	800d218 <lcp_nakci+0x35c>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3b02      	subs	r3, #2
 800d1fc:	607b      	str	r3, [r7, #4]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	3302      	adds	r3, #2
 800d202:	60bb      	str	r3, [r7, #8]
 800d204:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d20c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d210:	7d3b      	ldrb	r3, [r7, #20]
 800d212:	f36f 1386 	bfc	r3, #6, #1
 800d216:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800d218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01b      	beq.n	800d25e <lcp_nakci+0x3a2>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	dd18      	ble.n	800d25e <lcp_nakci+0x3a2>
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	3301      	adds	r3, #1
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b02      	cmp	r3, #2
 800d234:	d113      	bne.n	800d25e <lcp_nakci+0x3a2>
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b08      	cmp	r3, #8
 800d23c:	d10f      	bne.n	800d25e <lcp_nakci+0x3a2>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3b02      	subs	r3, #2
 800d242:	607b      	str	r3, [r7, #4]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	3302      	adds	r3, #2
 800d248:	60bb      	str	r3, [r7, #8]
 800d24a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d252:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d256:	7d3b      	ldrb	r3, [r7, #20]
 800d258:	f36f 13c7 	bfc	r3, #7, #1
 800d25c:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 800d25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	f003 0302 	and.w	r3, r3, #2
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01b      	beq.n	800d2a4 <lcp_nakci+0x3e8>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	dd18      	ble.n	800d2a4 <lcp_nakci+0x3e8>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	3301      	adds	r3, #1
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d113      	bne.n	800d2a4 <lcp_nakci+0x3e8>
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b12      	cmp	r3, #18
 800d282:	d10f      	bne.n	800d2a4 <lcp_nakci+0x3e8>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3b02      	subs	r3, #2
 800d288:	607b      	str	r3, [r7, #4]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	3302      	adds	r3, #2
 800d28e:	60bb      	str	r3, [r7, #8]
 800d290:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d294:	f043 0302 	orr.w	r3, r3, #2
 800d298:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d29c:	7d7b      	ldrb	r3, [r7, #21]
 800d29e:	f36f 0341 	bfc	r3, #1, #1
 800d2a2:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 800d2a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2a6:	785b      	ldrb	r3, [r3, #1]
 800d2a8:	f003 0304 	and.w	r3, r3, #4
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 8148 	beq.w	800d544 <lcp_nakci+0x688>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	f340 8144 	ble.w	800d544 <lcp_nakci+0x688>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b13      	cmp	r3, #19
 800d2c2:	f040 813f 	bne.w	800d544 <lcp_nakci+0x688>
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	f240 8139 	bls.w	800d544 <lcp_nakci+0x688>
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	f300 8131 	bgt.w	800d544 <lcp_nakci+0x688>
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	1a9b      	subs	r3, r3, r2
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	60bb      	str	r3, [r7, #8]
 800d2fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d302:	f043 0304 	orr.w	r3, r3, #4
 800d306:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d30a:	7d7b      	ldrb	r3, [r7, #21]
 800d30c:	f36f 0382 	bfc	r3, #2, #1
 800d310:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 800d312:	e117      	b.n	800d544 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	60ba      	str	r2, [r7, #8]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	1c5a      	adds	r2, r3, #1
 800d324:	60ba      	str	r2, [r7, #8]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 800d32a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	f340 813a 	ble.w	800d5a6 <lcp_nakci+0x6ea>
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	607b      	str	r3, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f2c0 8132 	blt.w	800d5a6 <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 800d342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d344:	3b02      	subs	r3, #2
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	4413      	add	r3, r2
 800d34a:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 800d34c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800d350:	3b01      	subs	r3, #1
 800d352:	2b12      	cmp	r3, #18
 800d354:	f200 80f1 	bhi.w	800d53a <lcp_nakci+0x67e>
 800d358:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <lcp_nakci+0x4a4>)
 800d35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35e:	bf00      	nop
 800d360:	0800d3ad 	.word	0x0800d3ad
 800d364:	0800d423 	.word	0x0800d423
 800d368:	0800d457 	.word	0x0800d457
 800d36c:	0800d53b 	.word	0x0800d53b
 800d370:	0800d479 	.word	0x0800d479
 800d374:	0800d53b 	.word	0x0800d53b
 800d378:	0800d4a3 	.word	0x0800d4a3
 800d37c:	0800d4c7 	.word	0x0800d4c7
 800d380:	0800d53b 	.word	0x0800d53b
 800d384:	0800d53b 	.word	0x0800d53b
 800d388:	0800d53b 	.word	0x0800d53b
 800d38c:	0800d53b 	.word	0x0800d53b
 800d390:	0800d53b 	.word	0x0800d53b
 800d394:	0800d53b 	.word	0x0800d53b
 800d398:	0800d53b 	.word	0x0800d53b
 800d39c:	0800d53b 	.word	0x0800d53b
 800d3a0:	0800d53b 	.word	0x0800d53b
 800d3a4:	0800d4eb 	.word	0x0800d4eb
 800d3a8:	0800d517 	.word	0x0800d517
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 800d3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d006      	beq.n	800d3c8 <lcp_nakci+0x50c>
 800d3ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	f040 80ef 	bne.w	800d5a6 <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 800d3c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f040 80e7 	bne.w	800d5a6 <lcp_nakci+0x6ea>
 800d3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	f040 80e3 	bne.w	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	60ba      	str	r2, [r7, #8]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	021b      	lsls	r3, r3, #8
 800d3ec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	60ba      	str	r2, [r7, #8]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d3fe:	4313      	orrs	r3, r2
 800d400:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 800d404:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d408:	f240 52db 	movw	r2, #1499	; 0x5db
 800d40c:	4293      	cmp	r3, r2
 800d40e:	f200 8096 	bhi.w	800d53e <lcp_nakci+0x682>
		try_.neg_mru = 1;
 800d412:	7d3b      	ldrb	r3, [r7, #20]
 800d414:	f043 0304 	orr.w	r3, r3, #4
 800d418:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 800d41a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d41e:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 800d420:	e08d      	b.n	800d53e <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 800d422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	f003 0308 	and.w	r3, r3, #8
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <lcp_nakci+0x580>
 800d430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d438:	f040 80b5 	bne.w	800d5a6 <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 800d43c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	f040 80ad 	bne.w	800d5a6 <lcp_nakci+0x6ea>
 800d44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d44e:	2b06      	cmp	r3, #6
 800d450:	f040 80a9 	bne.w	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d454:	e074      	b.n	800d540 <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 800d456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 0310 	and.w	r3, r3, #16
 800d45e:	b2db      	uxtb	r3, r3
	    if ((0
 800d460:	2b00      	cmp	r3, #0
 800d462:	f040 80a0 	bne.w	800d5a6 <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 800d466:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d46a:	f003 0310 	and.w	r3, r3, #16
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b00      	cmp	r3, #0
 800d472:	f040 8098 	bne.w	800d5a6 <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 800d476:	e063      	b.n	800d540 <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 800d478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	f040 808f 	bne.w	800d5a6 <lcp_nakci+0x6ea>
 800d488:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d48c:	f003 0320 	and.w	r3, r3, #32
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	f040 8087 	bne.w	800d5a6 <lcp_nakci+0x6ea>
 800d498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d49a:	2b06      	cmp	r3, #6
 800d49c:	f040 8083 	bne.w	800d5a6 <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 800d4a0:	e04e      	b.n	800d540 <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 800d4a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d17a      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d4b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d173      	bne.n	800d5a6 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800d4be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d170      	bne.n	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d4c4:	e03c      	b.n	800d540 <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 800d4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d168      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d4d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d4d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d161      	bne.n	800d5a6 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800d4e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d15e      	bne.n	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d4e8:	e02a      	b.n	800d540 <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 800d4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4ec:	785b      	ldrb	r3, [r3, #1]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d156      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d4f8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d14f      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d14c      	bne.n	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 800d50c:	7d7b      	ldrb	r3, [r7, #21]
 800d50e:	f043 0302 	orr.w	r3, r3, #2
 800d512:	757b      	strb	r3, [r7, #21]
	    break;
 800d514:	e014      	b.n	800d540 <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 800d516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d518:	785b      	ldrb	r3, [r3, #1]
 800d51a:	f003 0304 	and.w	r3, r3, #4
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	d140      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d524:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d139      	bne.n	800d5a6 <lcp_nakci+0x6ea>
 800d532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d534:	2b02      	cmp	r3, #2
 800d536:	dd36      	ble.n	800d5a6 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800d538:	e002      	b.n	800d540 <lcp_nakci+0x684>
	default:
	    break;
 800d53a:	bf00      	nop
 800d53c:	e000      	b.n	800d540 <lcp_nakci+0x684>
	    break;
 800d53e:	bf00      	nop
	}
	p = next;
 800d540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d542:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b01      	cmp	r3, #1
 800d548:	f73f aee4 	bgt.w	800d314 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	7c1b      	ldrb	r3, [r3, #16]
 800d550:	2b09      	cmp	r3, #9
 800d552:	d026      	beq.n	800d5a2 <lcp_nakci+0x6e6>
	if (looped_back) {
 800d554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d016      	beq.n	800d588 <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 800d55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d55e:	3301      	adds	r3, #1
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f887 3020 	strb.w	r3, [r7, #32]
 800d566:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d56a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d56c:	7c9b      	ldrb	r3, [r3, #18]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d30d      	bcc.n	800d58e <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 800d572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d574:	220c      	movs	r2, #12
 800d576:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	490c      	ldr	r1, [pc, #48]	; (800d5b0 <lcp_nakci+0x6f4>)
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe feb7 	bl	800c2f4 <lcp_close>
 800d586:	e002      	b.n	800d58e <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 800d58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d590:	461d      	mov	r5, r3
 800d592:	f107 0414 	add.w	r4, r7, #20
 800d596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d59c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	602b      	str	r3, [r5, #0]
    }

    return 1;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e000      	b.n	800d5a8 <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3780      	adds	r7, #128	; 0x80
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b0:	080135a4 	.word	0x080135a4

0800d5b4 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 800d5b4:	b4b0      	push	{r4, r5, r7}
 800d5b6:	b095      	sub	sp, #84	; 0x54
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 800d5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c8:	3384      	adds	r3, #132	; 0x84
 800d5ca:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 800d5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ce:	f107 0414 	add.w	r4, r7, #20
 800d5d2:	461d      	mov	r5, r3
 800d5d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800d5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d02e      	beq.n	800d64c <lcp_rejci+0x98>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b03      	cmp	r3, #3
 800d5f2:	dd2b      	ble.n	800d64c <lcp_rejci+0x98>
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b04      	cmp	r3, #4
 800d5fc:	d126      	bne.n	800d64c <lcp_rejci+0x98>
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d122      	bne.n	800d64c <lcp_rejci+0x98>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3b04      	subs	r3, #4
 800d60a:	607b      	str	r3, [r7, #4]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	3302      	adds	r3, #2
 800d610:	60bb      	str	r3, [r7, #8]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	60ba      	str	r2, [r7, #8]
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	021b      	lsls	r3, r3, #8
 800d61e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	60ba      	str	r2, [r7, #8]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d630:	4313      	orrs	r3, r2
 800d632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d638:	885b      	ldrh	r3, [r3, #2]
 800d63a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d63e:	429a      	cmp	r2, r3
 800d640:	f040 81a8 	bne.w	800d994 <lcp_rejci+0x3e0>
 800d644:	7d3b      	ldrb	r3, [r7, #20]
 800d646:	f36f 0382 	bfc	r3, #2, #1
 800d64a:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800d64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d03f      	beq.n	800d6da <lcp_rejci+0x126>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b05      	cmp	r3, #5
 800d65e:	dd3c      	ble.n	800d6da <lcp_rejci+0x126>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	3301      	adds	r3, #1
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	2b06      	cmp	r3, #6
 800d668:	d137      	bne.n	800d6da <lcp_rejci+0x126>
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d133      	bne.n	800d6da <lcp_rejci+0x126>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	3b06      	subs	r3, #6
 800d676:	607b      	str	r3, [r7, #4]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	3302      	adds	r3, #2
 800d67c:	60bb      	str	r3, [r7, #8]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	60ba      	str	r2, [r7, #8]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	60ba      	str	r2, [r7, #8]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d696:	4313      	orrs	r3, r2
 800d698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69c:	021b      	lsls	r3, r3, #8
 800d69e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	60ba      	str	r2, [r7, #8]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b2:	021b      	lsls	r3, r3, #8
 800d6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	60ba      	str	r2, [r7, #8]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6c8:	685a      	ldr	r2, [r3, #4]
 800d6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	f040 8163 	bne.w	800d998 <lcp_rejci+0x3e4>
 800d6d2:	7d3b      	ldrb	r3, [r7, #20]
 800d6d4:	f36f 03c3 	bfc	r3, #3, #1
 800d6d8:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800d6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	f003 0310 	and.w	r3, r3, #16
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d02e      	beq.n	800d746 <lcp_rejci+0x192>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	dd2b      	ble.n	800d746 <lcp_rejci+0x192>
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	d126      	bne.n	800d746 <lcp_rejci+0x192>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d122      	bne.n	800d746 <lcp_rejci+0x192>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	3b04      	subs	r3, #4
 800d704:	607b      	str	r3, [r7, #4]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	3302      	adds	r3, #2
 800d70a:	60bb      	str	r3, [r7, #8]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	1c5a      	adds	r2, r3, #1
 800d710:	60ba      	str	r2, [r7, #8]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	b29b      	uxth	r3, r3
 800d716:	021b      	lsls	r3, r3, #8
 800d718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	1c5a      	adds	r2, r3, #1
 800d720:	60ba      	str	r2, [r7, #8]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	b29a      	uxth	r2, r3
 800d726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d72a:	4313      	orrs	r3, r2
 800d72c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d730:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d734:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d738:	4293      	cmp	r3, r2
 800d73a:	f040 812f 	bne.w	800d99c <lcp_rejci+0x3e8>
 800d73e:	7d3b      	ldrb	r3, [r7, #20]
 800d740:	f36f 1304 	bfc	r3, #4, #1
 800d744:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800d746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d020      	beq.n	800d796 <lcp_rejci+0x1e2>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b02      	cmp	r3, #2
 800d758:	dd1d      	ble.n	800d796 <lcp_rejci+0x1e2>
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	3301      	adds	r3, #1
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b03      	cmp	r3, #3
 800d762:	d118      	bne.n	800d796 <lcp_rejci+0x1e2>
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2b0d      	cmp	r3, #13
 800d76a:	d114      	bne.n	800d796 <lcp_rejci+0x1e2>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3b03      	subs	r3, #3
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	3302      	adds	r3, #2
 800d776:	60bb      	str	r3, [r7, #8]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	60ba      	str	r2, [r7, #8]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d784:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d788:	2b06      	cmp	r3, #6
 800d78a:	f040 8109 	bne.w	800d9a0 <lcp_rejci+0x3ec>
 800d78e:	7d7b      	ldrb	r3, [r7, #21]
 800d790:	f36f 0300 	bfc	r3, #0, #1
 800d794:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800d796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d03f      	beq.n	800d824 <lcp_rejci+0x270>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b05      	cmp	r3, #5
 800d7a8:	dd3c      	ble.n	800d824 <lcp_rejci+0x270>
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b06      	cmp	r3, #6
 800d7b2:	d137      	bne.n	800d824 <lcp_rejci+0x270>
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b05      	cmp	r3, #5
 800d7ba:	d133      	bne.n	800d824 <lcp_rejci+0x270>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3b06      	subs	r3, #6
 800d7c0:	607b      	str	r3, [r7, #4]
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	3302      	adds	r3, #2
 800d7c6:	60bb      	str	r3, [r7, #8]
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	60ba      	str	r2, [r7, #8]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	021b      	lsls	r3, r3, #8
 800d7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	60ba      	str	r2, [r7, #8]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e6:	021b      	lsls	r3, r3, #8
 800d7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	60ba      	str	r2, [r7, #8]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fc:	021b      	lsls	r3, r3, #8
 800d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	60ba      	str	r2, [r7, #8]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	461a      	mov	r2, r3
 800d80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80c:	4313      	orrs	r3, r2
 800d80e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d816:	429a      	cmp	r2, r3
 800d818:	f040 80c4 	bne.w	800d9a4 <lcp_rejci+0x3f0>
 800d81c:	7d3b      	ldrb	r3, [r7, #20]
 800d81e:	f36f 1345 	bfc	r3, #5, #1
 800d822:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800d824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d015      	beq.n	800d85e <lcp_rejci+0x2aa>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b01      	cmp	r3, #1
 800d836:	dd12      	ble.n	800d85e <lcp_rejci+0x2aa>
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	3301      	adds	r3, #1
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d10d      	bne.n	800d85e <lcp_rejci+0x2aa>
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b07      	cmp	r3, #7
 800d848:	d109      	bne.n	800d85e <lcp_rejci+0x2aa>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	3b02      	subs	r3, #2
 800d84e:	607b      	str	r3, [r7, #4]
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	3302      	adds	r3, #2
 800d854:	60bb      	str	r3, [r7, #8]
 800d856:	7d3b      	ldrb	r3, [r7, #20]
 800d858:	f36f 1386 	bfc	r3, #6, #1
 800d85c:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800d85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d015      	beq.n	800d898 <lcp_rejci+0x2e4>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	dd12      	ble.n	800d898 <lcp_rejci+0x2e4>
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	3301      	adds	r3, #1
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d10d      	bne.n	800d898 <lcp_rejci+0x2e4>
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b08      	cmp	r3, #8
 800d882:	d109      	bne.n	800d898 <lcp_rejci+0x2e4>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3b02      	subs	r3, #2
 800d888:	607b      	str	r3, [r7, #4]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	3302      	adds	r3, #2
 800d88e:	60bb      	str	r3, [r7, #8]
 800d890:	7d3b      	ldrb	r3, [r7, #20]
 800d892:	f36f 13c7 	bfc	r3, #7, #1
 800d896:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 800d898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d015      	beq.n	800d8d2 <lcp_rejci+0x31e>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	dd12      	ble.n	800d8d2 <lcp_rejci+0x31e>
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d10d      	bne.n	800d8d2 <lcp_rejci+0x31e>
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b12      	cmp	r3, #18
 800d8bc:	d109      	bne.n	800d8d2 <lcp_rejci+0x31e>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3b02      	subs	r3, #2
 800d8c2:	607b      	str	r3, [r7, #4]
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	3302      	adds	r3, #2
 800d8c8:	60bb      	str	r3, [r7, #8]
 800d8ca:	7d7b      	ldrb	r3, [r7, #21]
 800d8cc:	f36f 0341 	bfc	r3, #1, #1
 800d8d0:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800d8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	f003 0304 	and.w	r3, r3, #4
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d046      	beq.n	800d96e <lcp_rejci+0x3ba>
 800d8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8e2:	7b9b      	ldrb	r3, [r3, #14]
 800d8e4:	1cda      	adds	r2, r3, #3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	dc40      	bgt.n	800d96e <lcp_rejci+0x3ba>
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b13      	cmp	r3, #19
 800d8f2:	d13c      	bne.n	800d96e <lcp_rejci+0x3ba>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8fe:	7b9b      	ldrb	r3, [r3, #14]
 800d900:	3303      	adds	r3, #3
 800d902:	429a      	cmp	r2, r3
 800d904:	d133      	bne.n	800d96e <lcp_rejci+0x3ba>
 800d906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d908:	7b9b      	ldrb	r3, [r3, #14]
 800d90a:	3303      	adds	r3, #3
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	607b      	str	r3, [r7, #4]
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	3302      	adds	r3, #2
 800d916:	60bb      	str	r3, [r7, #8]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	60ba      	str	r2, [r7, #8]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d926:	7b5b      	ldrb	r3, [r3, #13]
 800d928:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d13b      	bne.n	800d9a8 <lcp_rejci+0x3f4>
 800d930:	2300      	movs	r3, #0
 800d932:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d934:	e011      	b.n	800d95a <lcp_rejci+0x3a6>
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	1c5a      	adds	r2, r3, #1
 800d93a:	60ba      	str	r2, [r7, #8]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d946:	4413      	add	r3, r2
 800d948:	330f      	adds	r3, #15
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d950:	429a      	cmp	r2, r3
 800d952:	d12b      	bne.n	800d9ac <lcp_rejci+0x3f8>
 800d954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d956:	3301      	adds	r3, #1
 800d958:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d95c:	7b9b      	ldrb	r3, [r3, #14]
 800d95e:	461a      	mov	r2, r3
 800d960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d962:	429a      	cmp	r2, r3
 800d964:	dce7      	bgt.n	800d936 <lcp_rejci+0x382>
 800d966:	7d7b      	ldrb	r3, [r7, #21]
 800d968:	f36f 0382 	bfc	r3, #2, #1
 800d96c:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11d      	bne.n	800d9b0 <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	7c1b      	ldrb	r3, [r3, #16]
 800d978:	2b09      	cmp	r3, #9
 800d97a:	d009      	beq.n	800d990 <lcp_rejci+0x3dc>
	*go = try_;
 800d97c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d97e:	461d      	mov	r5, r3
 800d980:	f107 0414 	add.w	r4, r7, #20
 800d984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d98a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	602b      	str	r3, [r5, #0]
    return 1;
 800d990:	2301      	movs	r3, #1
 800d992:	e00f      	b.n	800d9b4 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800d994:	bf00      	nop
 800d996:	e00c      	b.n	800d9b2 <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800d998:	bf00      	nop
 800d99a:	e00a      	b.n	800d9b2 <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800d99c:	bf00      	nop
 800d99e:	e008      	b.n	800d9b2 <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800d9a0:	bf00      	nop
 800d9a2:	e006      	b.n	800d9b2 <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800d9a4:	bf00      	nop
 800d9a6:	e004      	b.n	800d9b2 <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800d9a8:	bf00      	nop
 800d9aa:	e002      	b.n	800d9b2 <lcp_rejci+0x3fe>
 800d9ac:	bf00      	nop
 800d9ae:	e000      	b.n	800d9b2 <lcp_rejci+0x3fe>
	goto bad;
 800d9b0:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3754      	adds	r7, #84	; 0x54
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bcb0      	pop	{r4, r5, r7}
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b096      	sub	sp, #88	; 0x58
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d6:	3384      	adds	r3, #132	; 0x84
 800d9d8:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	33cc      	adds	r3, #204	; 0xcc
 800d9de:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 800d9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e2:	33a8      	adds	r3, #168	; 0xa8
 800d9e4:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800d9f0:	2224      	movs	r2, #36	; 0x24
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9f6:	f002 fd92 	bl	801051e <memset>

    /*
     * Process all his options.
     */
    next = inp;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 800d9fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da02:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da06:	2000      	movs	r0, #0
 800da08:	f7f5 fd22 	bl	8003450 <pbuf_alloc>
 800da0c:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <lcp_reqci+0x58>
        return 0;
 800da14:	2300      	movs	r3, #0
 800da16:	e2b4      	b.n	800df82 <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	891a      	ldrh	r2, [r3, #8]
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	895b      	ldrh	r3, [r3, #10]
 800da20:	429a      	cmp	r2, r3
 800da22:	d004      	beq.n	800da2e <lcp_reqci+0x6e>
        pbuf_free(nakp);
 800da24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da26:	f7f5 ffb1 	bl	800398c <pbuf_free>
        return 0;
 800da2a:	2300      	movs	r3, #0
 800da2c:	e2a9      	b.n	800df82 <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800da38:	e278      	b.n	800df2c <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 800da3a:	2302      	movs	r3, #2
 800da3c:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 800da3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da40:	623b      	str	r3, [r7, #32]
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	2b01      	cmp	r3, #1
 800da4a:	dd0b      	ble.n	800da64 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	3301      	adds	r3, #1
 800da50:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800da52:	2b01      	cmp	r3, #1
 800da54:	d906      	bls.n	800da64 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	3301      	adds	r3, #1
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800da5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da60:	429a      	cmp	r2, r3
 800da62:	dd08      	ble.n	800da76 <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800da64:	2304      	movs	r3, #4
 800da66:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 800da6c:	2300      	movs	r3, #0
 800da6e:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 800da74:	e22e      	b.n	800ded4 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	623a      	str	r2, [r7, #32]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	623a      	str	r2, [r7, #32]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 800da8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8e:	1ad3      	subs	r3, r2, r3
 800da90:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 800da92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da96:	4413      	add	r3, r2
 800da98:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 800da9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da9c:	3b01      	subs	r3, #1
 800da9e:	2b12      	cmp	r3, #18
 800daa0:	f200 8215 	bhi.w	800dece <lcp_reqci+0x50e>
 800daa4:	a201      	add	r2, pc, #4	; (adr r2, 800daac <lcp_reqci+0xec>)
 800daa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daaa:	bf00      	nop
 800daac:	0800daf9 	.word	0x0800daf9
 800dab0:	0800db77 	.word	0x0800db77
 800dab4:	0800dc65 	.word	0x0800dc65
 800dab8:	0800decf 	.word	0x0800decf
 800dabc:	0800dd0b 	.word	0x0800dd0b
 800dac0:	0800decf 	.word	0x0800decf
 800dac4:	0800ddfb 	.word	0x0800ddfb
 800dac8:	0800de21 	.word	0x0800de21
 800dacc:	0800decf 	.word	0x0800decf
 800dad0:	0800decf 	.word	0x0800decf
 800dad4:	0800decf 	.word	0x0800decf
 800dad8:	0800decf 	.word	0x0800decf
 800dadc:	0800decf 	.word	0x0800decf
 800dae0:	0800decf 	.word	0x0800decf
 800dae4:	0800decf 	.word	0x0800decf
 800dae8:	0800decf 	.word	0x0800decf
 800daec:	0800decf 	.word	0x0800decf
 800daf0:	0800de47 	.word	0x0800de47
 800daf4:	0800de6d 	.word	0x0800de6d
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	f003 0304 	and.w	r3, r3, #4
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <lcp_reqci+0x14c>
 800db06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db08:	2b04      	cmp	r3, #4
 800db0a:	d002      	beq.n	800db12 <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800db0c:	2304      	movs	r3, #4
 800db0e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800db10:	e1e0      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	623a      	str	r2, [r7, #32]
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	021b      	lsls	r3, r3, #8
 800db1e:	837b      	strh	r3, [r7, #26]
 800db20:	6a3b      	ldr	r3, [r7, #32]
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	623a      	str	r2, [r7, #32]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	b29a      	uxth	r2, r3
 800db2a:	8b7b      	ldrh	r3, [r7, #26]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 800db30:	8b7b      	ldrh	r3, [r7, #26]
 800db32:	2b7f      	cmp	r3, #127	; 0x7f
 800db34:	d816      	bhi.n	800db64 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 800db36:	2303      	movs	r3, #3
 800db38:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 800db3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800db40:	2201      	movs	r2, #1
 800db42:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 800db44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	63fa      	str	r2, [r7, #60]	; 0x3c
 800db4a:	2204      	movs	r2, #4
 800db4c:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 800db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	63fa      	str	r2, [r7, #60]	; 0x3c
 800db54:	2200      	movs	r2, #0
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800db5e:	2280      	movs	r2, #128	; 0x80
 800db60:	701a      	strb	r2, [r3, #0]
		break;
 800db62:	e1b7      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 800db64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db66:	7813      	ldrb	r3, [r2, #0]
 800db68:	f043 0304 	orr.w	r3, r3, #4
 800db6c:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	8b7a      	ldrh	r2, [r7, #26]
 800db72:	805a      	strh	r2, [r3, #2]
	    break;
 800db74:	e1ae      	b.n	800ded4 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 800db76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	f003 0308 	and.w	r3, r3, #8
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <lcp_reqci+0x1ca>
 800db84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db86:	2b06      	cmp	r3, #6
 800db88:	d002      	beq.n	800db90 <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800db8a:	2304      	movs	r3, #4
 800db8c:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800db8e:	e1a1      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	623a      	str	r2, [r7, #32]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	617b      	str	r3, [r7, #20]
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	623a      	str	r2, [r7, #32]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	461a      	mov	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	021b      	lsls	r3, r3, #8
 800dbb0:	617b      	str	r3, [r7, #20]
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	623a      	str	r2, [r7, #32]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	623a      	str	r2, [r7, #32]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 800dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	43db      	mvns	r3, r3
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d035      	beq.n	800dc52 <lcp_reqci+0x292>
		orc = CONFNAK;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 800dbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800dbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf6:	1c5a      	adds	r2, r3, #1
 800dbf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dbfa:	2206      	movs	r2, #6
 800dbfc:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 800dbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dc04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc06:	6851      	ldr	r1, [r2, #4]
 800dc08:	697a      	ldr	r2, [r7, #20]
 800dc0a:	430a      	orrs	r2, r1
 800dc0c:	0e12      	lsrs	r2, r2, #24
 800dc0e:	b2d2      	uxtb	r2, r2
 800dc10:	701a      	strb	r2, [r3, #0]
 800dc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dc18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc1a:	6851      	ldr	r1, [r2, #4]
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	430a      	orrs	r2, r1
 800dc20:	0c12      	lsrs	r2, r2, #16
 800dc22:	b2d2      	uxtb	r2, r2
 800dc24:	701a      	strb	r2, [r3, #0]
 800dc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc2e:	6851      	ldr	r1, [r2, #4]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	430a      	orrs	r2, r1
 800dc34:	0a12      	lsrs	r2, r2, #8
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc42:	6852      	ldr	r2, [r2, #4]
 800dc44:	b2d1      	uxtb	r1, r2
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	b2d2      	uxtb	r2, r2
 800dc4a:	430a      	orrs	r2, r1
 800dc4c:	b2d2      	uxtb	r2, r2
 800dc4e:	701a      	strb	r2, [r3, #0]
		break;
 800dc50:	e140      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 800dc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc54:	7813      	ldrb	r3, [r2, #0]
 800dc56:	f043 0308 	orr.w	r3, r3, #8
 800dc5a:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	697a      	ldr	r2, [r7, #20]
 800dc60:	605a      	str	r2, [r3, #4]
	    break;
 800dc62:	e137      	b.n	800ded4 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 800dc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	dd06      	ble.n	800dc78 <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	781b      	ldrb	r3, [r3, #0]
		!(0
 800dc6e:	f003 0310 	and.w	r3, r3, #16
 800dc72:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 800dc78:	2304      	movs	r3, #4
 800dc7a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800dc7c:	e12a      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	623a      	str	r2, [r7, #32]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	021b      	lsls	r3, r3, #8
 800dc8a:	837b      	strh	r3, [r7, #26]
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	623a      	str	r2, [r7, #32]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	8b7b      	ldrh	r3, [r7, #26]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 800dc9c:	8b7b      	ldrh	r3, [r7, #26]
 800dc9e:	f24c 0223 	movw	r2, #49187	; 0xc023
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d11a      	bne.n	800dcdc <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 800dca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dca8:	2b04      	cmp	r3, #4
 800dcaa:	d002      	beq.n	800dcb2 <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 800dcac:	2304      	movs	r3, #4
 800dcae:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 800dcb0:	e110      	b.n	800ded4 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	f003 0310 	and.w	r3, r3, #16
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d107      	bne.n	800dcd0 <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800dcc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc6:	1c5a      	adds	r2, r3, #1
 800dcc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dcca:	2203      	movs	r2, #3
 800dccc:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 800dcce:	e101      	b.n	800ded4 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 800dcd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcd2:	7813      	ldrb	r3, [r2, #0]
 800dcd4:	f043 0310 	orr.w	r3, r3, #16
 800dcd8:	7013      	strb	r3, [r2, #0]
		break;
 800dcda:	e0fb      	b.n	800ded4 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800dce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dce6:	2203      	movs	r2, #3
 800dce8:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 800dcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcec:	1c5a      	adds	r2, r3, #1
 800dcee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dcf0:	2204      	movs	r2, #4
 800dcf2:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 800dcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dcfa:	22c0      	movs	r2, #192	; 0xc0
 800dcfc:	701a      	strb	r2, [r3, #0]
 800dcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd00:	1c5a      	adds	r2, r3, #1
 800dd02:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd04:	2223      	movs	r2, #35	; 0x23
 800dd06:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 800dd08:	e0e4      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f003 0320 	and.w	r3, r3, #32
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d106      	bne.n	800dd26 <lcp_reqci+0x366>
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	f003 0320 	and.w	r3, r3, #32
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <lcp_reqci+0x36c>
 800dd26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd28:	2b06      	cmp	r3, #6
 800dd2a:	d002      	beq.n	800dd32 <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800dd30:	e0d0      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	623a      	str	r2, [r7, #32]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	021b      	lsls	r3, r3, #8
 800dd3c:	617b      	str	r3, [r7, #20]
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	623a      	str	r2, [r7, #32]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	021b      	lsls	r3, r3, #8
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	623a      	str	r2, [r7, #32]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	021b      	lsls	r3, r3, #8
 800dd68:	617b      	str	r3, [r7, #20]
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	623a      	str	r2, [r7, #32]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d02f      	beq.n	800dde8 <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d12a      	bne.n	800dde8 <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 800dd92:	f000 fb7f 	bl	800e494 <magic>
 800dd96:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 800dd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dda2:	2205      	movs	r2, #5
 800dda4:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800dda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddac:	2206      	movs	r2, #6
 800ddae:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 800ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	0e12      	lsrs	r2, r2, #24
 800ddba:	b2d2      	uxtb	r2, r2
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	0c12      	lsrs	r2, r2, #16
 800ddc8:	b2d2      	uxtb	r2, r2
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	0a12      	lsrs	r2, r2, #8
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	701a      	strb	r2, [r3, #0]
 800ddda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
		break;
 800dde6:	e075      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 800dde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddea:	7813      	ldrb	r3, [r2, #0]
 800ddec:	f043 0320 	orr.w	r3, r3, #32
 800ddf0:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	609a      	str	r2, [r3, #8]
	    break;
 800ddf8:	e06c      	b.n	800ded4 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de02:	b2db      	uxtb	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <lcp_reqci+0x44e>
 800de08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d002      	beq.n	800de14 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800de0e:	2304      	movs	r3, #4
 800de10:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800de12:	e05f      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 800de14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de16:	7813      	ldrb	r3, [r2, #0]
 800de18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1c:	7013      	strb	r3, [r2, #0]
	    break;
 800de1e:	e059      	b.n	800ded4 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d002      	beq.n	800de34 <lcp_reqci+0x474>
 800de2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de30:	2b02      	cmp	r3, #2
 800de32:	d002      	beq.n	800de3a <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800de34:	2304      	movs	r3, #4
 800de36:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800de38:	e04c      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 800de3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de3c:	7813      	ldrb	r3, [r2, #0]
 800de3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de42:	7013      	strb	r3, [r2, #0]
	    break;
 800de44:	e046      	b.n	800ded4 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 800de46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	f003 0302 	and.w	r3, r3, #2
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 800de54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de56:	2b02      	cmp	r3, #2
 800de58:	d002      	beq.n	800de60 <lcp_reqci+0x4a0>
		orc = CONFREJ;
 800de5a:	2304      	movs	r3, #4
 800de5c:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800de5e:	e039      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 800de60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de62:	7853      	ldrb	r3, [r2, #1]
 800de64:	f043 0302 	orr.w	r3, r3, #2
 800de68:	7053      	strb	r3, [r2, #1]
	    break;
 800de6a:	e033      	b.n	800ded4 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	785b      	ldrb	r3, [r3, #1]
 800de70:	f003 0304 	and.w	r3, r3, #4
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d005      	beq.n	800de86 <lcp_reqci+0x4c6>
 800de7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	dd02      	ble.n	800de86 <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 800de80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de82:	2b17      	cmp	r3, #23
 800de84:	dd02      	ble.n	800de8c <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 800de86:	2304      	movs	r3, #4
 800de88:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800de8a:	e023      	b.n	800ded4 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	623a      	str	r2, [r7, #32]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 800de96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de98:	3b03      	subs	r3, #3
 800de9a:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 800de9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9e:	7853      	ldrb	r3, [r2, #1]
 800dea0:	f043 0304 	orr.w	r3, r3, #4
 800dea4:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 800deae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 800deb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb8:	330f      	adds	r3, #15
 800deba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800debc:	6a39      	ldr	r1, [r7, #32]
 800debe:	4618      	mov	r0, r3
 800dec0:	f002 fb08 	bl	80104d4 <memcpy>
	    INCPTR(cilen, p);
 800dec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec6:	6a3a      	ldr	r2, [r7, #32]
 800dec8:	4413      	add	r3, r2
 800deca:	623b      	str	r3, [r7, #32]
	    break;
 800decc:	e002      	b.n	800ded4 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 800dece:	2304      	movs	r3, #4
 800ded0:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 800ded2:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800ded4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d103      	bne.n	800dee2 <lcp_reqci+0x522>
 800deda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d000      	beq.n	800dee2 <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800dee0:	e024      	b.n	800df2c <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800dee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee4:	2b03      	cmp	r3, #3
 800dee6:	d10e      	bne.n	800df06 <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d005      	beq.n	800defa <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 800deee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def0:	2b05      	cmp	r3, #5
 800def2:	d002      	beq.n	800defa <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 800def4:	2304      	movs	r3, #4
 800def6:	647b      	str	r3, [r7, #68]	; 0x44
 800def8:	e005      	b.n	800df06 <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800defa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800defc:	2b04      	cmp	r3, #4
 800defe:	d100      	bne.n	800df02 <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 800df00:	e014      	b.n	800df2c <lcp_reqci+0x56c>
		rc = CONFNAK;
 800df02:	2303      	movs	r3, #3
 800df04:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 800df06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df08:	2b04      	cmp	r3, #4
 800df0a:	d10f      	bne.n	800df2c <lcp_reqci+0x56c>
	    rc = CONFREJ;
 800df0c:	2304      	movs	r3, #4
 800df0e:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 800df10:	69fa      	ldr	r2, [r7, #28]
 800df12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df14:	429a      	cmp	r2, r3
 800df16:	d005      	beq.n	800df24 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 800df18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df1a:	461a      	mov	r2, r3
 800df1c:	69f9      	ldr	r1, [r7, #28]
 800df1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800df20:	f002 fad8 	bl	80104d4 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 800df24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df28:	4413      	add	r3, r2
 800df2a:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f47f ad83 	bne.w	800da3a <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 800df34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df36:	2b03      	cmp	r3, #3
 800df38:	d00a      	beq.n	800df50 <lcp_reqci+0x590>
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d017      	beq.n	800df6e <lcp_reqci+0x5ae>
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d000      	beq.n	800df44 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 800df42:	e01a      	b.n	800df7a <lcp_reqci+0x5ba>
	*lenp = next - inp;
 800df44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	1ad2      	subs	r2, r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
	break;
 800df4e:	e014      	b.n	800df7a <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 800df50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df54:	6852      	ldr	r2, [r2, #4]
 800df56:	1a9a      	subs	r2, r3, r2
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 800df5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5e:	6859      	ldr	r1, [r3, #4]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	68b8      	ldr	r0, [r7, #8]
 800df68:	f002 fab4 	bl	80104d4 <memcpy>
	break;
 800df6c:	e005      	b.n	800df7a <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 800df6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	1ad2      	subs	r2, r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	601a      	str	r2, [r3, #0]
	break;
 800df78:	bf00      	nop
    }

    pbuf_free(nakp);
 800df7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df7c:	f7f5 fd06 	bl	800398c <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 800df80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800df82:	4618      	mov	r0, r3
 800df84:	3758      	adds	r7, #88	; 0x58
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop

0800df8c <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08c      	sub	sp, #48	; 0x30
 800df90:	af02      	add	r7, sp, #8
 800df92:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	3360      	adds	r3, #96	; 0x60
 800df9e:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	33cc      	adds	r3, #204	; 0xcc
 800dfa4:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	3384      	adds	r3, #132	; 0x84
 800dfaa:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	33a8      	adds	r3, #168	; 0xa8
 800dfb0:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	f003 0320 	and.w	r3, r3, #32
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d102      	bne.n	800dfc6 <lcp_up+0x3a>
	go->magicnumber = 0;
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d102      	bne.n	800dfda <lcp_up+0x4e>
	ho->magicnumber = 0;
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 0304 	and.w	r3, r3, #4
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <lcp_up+0x62>
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	885b      	ldrh	r3, [r3, #2]
 800dfec:	e001      	b.n	800dff2 <lcp_up+0x66>
 800dfee:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800dff2:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	f003 0304 	and.w	r3, r3, #4
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00b      	beq.n	800e01a <lcp_up+0x8e>
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	885a      	ldrh	r2, [r3, #2]
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	885b      	ldrh	r3, [r3, #2]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d902      	bls.n	800e014 <lcp_up+0x88>
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	885b      	ldrh	r3, [r3, #2]
 800e012:	e004      	b.n	800e01e <lcp_up+0x92>
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	885b      	ldrh	r3, [r3, #2]
 800e018:	e001      	b.n	800e01e <lcp_up+0x92>
 800e01a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800e01e:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	885b      	ldrh	r3, [r3, #2]
 800e024:	4619      	mov	r1, r3
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	4293      	cmp	r3, r2
 800e02c:	bfa8      	it	ge
 800e02e:	4613      	movge	r3, r2
 800e030:	428b      	cmp	r3, r1
 800e032:	bfa8      	it	ge
 800e034:	460b      	movge	r3, r1
 800e036:	4619      	mov	r1, r3
 800e038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e03a:	f000 fdd5 	bl	800ebe8 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	f003 0308 	and.w	r3, r3, #8
 800e046:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <lcp_up+0xc6>
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	e001      	b.n	800e056 <lcp_up+0xca>
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e05e:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e060:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e06a:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	460b      	mov	r3, r1
 800e070:	6939      	ldr	r1, [r7, #16]
 800e072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e074:	f000 fd0a 	bl	800ea8c <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	f003 0308 	and.w	r3, r3, #8
 800e080:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10c      	bne.n	800e0a0 <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	f003 0308 	and.w	r3, r3, #8
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <lcp_up+0x10e>
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	e003      	b.n	800e0a2 <lcp_up+0x116>
 800e09a:	f04f 32ff 	mov.w	r2, #4294967295
 800e09e:	e000      	b.n	800e0a2 <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 800e0a0:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e0aa:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e0ac:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e0b6:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	68f9      	ldr	r1, [r7, #12]
 800e0be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0c0:	f000 fd00 	bl	800eac4 <ppp_recv_config>

    if (ho->neg_mru)
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d004      	beq.n	800e0dc <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	885a      	ldrh	r2, [r3, #2]
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 f97a 	bl	800e3da <lcp_echo_lowerup>

    link_established(pcb);
 800e0e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0e8:	f7fb fdca 	bl	8009c80 <link_established>
}
 800e0ec:	bf00      	nop
 800e0ee:	3728      	adds	r7, #40	; 0x28
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3384      	adds	r3, #132	; 0x84
 800e106:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f000 f985 	bl	800e41c <lcp_echo_lowerdown>

    link_down(pcb);
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7fb fd62 	bl	8009bdc <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 800e118:	2300      	movs	r3, #0
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	2300      	movs	r3, #0
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f000 fcb0 	bl	800ea8c <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0308 	and.w	r3, r3, #8
 800e134:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <lcp_down+0x4c>
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	e001      	b.n	800e144 <lcp_down+0x50>
 800e140:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e14c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e14e:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e158:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	460b      	mov	r3, r1
 800e15e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f000 fcae 	bl	800eac4 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e16e:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 800e172:	bf00      	nop
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f7fb fd05 	bl	8009b98 <link_required>
}
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7fb fd01 	bl	8009bac <link_terminated>
}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	7c1b      	ldrb	r3, [r3, #16]
 800e1c6:	2b09      	cmp	r3, #9
 800e1c8:	d107      	bne.n	800e1da <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2209      	movs	r2, #9
 800e1ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 800e1d2:	4904      	ldr	r1, [pc, #16]	; (800e1e4 <LcpLinkFailure+0x30>)
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7fe f88d 	bl	800c2f4 <lcp_close>
    }
}
 800e1da:	bf00      	nop
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	080135b8 	.word	0x080135b8

0800e1e8 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f88e 	bl	800e318 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	7c1b      	ldrb	r3, [r3, #16]
 800e200:	2b09      	cmp	r3, #9
 800e202:	d117      	bne.n	800e234 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 800e204:	6879      	ldr	r1, [r7, #4]
 800e206:	480d      	ldr	r0, [pc, #52]	; (800e23c <LcpEchoCheck+0x54>)
 800e208:	f7fb fc1e 	bl	8009a48 <sys_untimeout>
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7cdb      	ldrb	r3, [r3, #19]
 800e210:	461a      	mov	r2, r3
 800e212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e216:	fb03 f302 	mul.w	r3, r3, r2
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	4907      	ldr	r1, [pc, #28]	; (800e23c <LcpEchoCheck+0x54>)
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fb fbe6 	bl	80099f0 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e22a:	f043 0310 	orr.w	r3, r3, #16
 800e22e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800e232:	e000      	b.n	800e236 <LcpEchoCheck+0x4e>
	return;
 800e234:	bf00      	nop
}
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	0800e241 	.word	0x0800e241

0800e240 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e258:	f003 0310 	and.w	r3, r3, #16
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d009      	beq.n	800e276 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e268:	f36f 1304 	bfc	r3, #4, #1
 800e26c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7ff ffb9 	bl	800e1e8 <LcpEchoCheck>
    }
}
 800e276:	bf00      	nop
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 800e27e:	b480      	push	{r7}
 800e280:	b089      	sub	sp, #36	; 0x24
 800e282:	af00      	add	r7, sp, #0
 800e284:	60f8      	str	r0, [r7, #12]
 800e286:	60b9      	str	r1, [r7, #8]
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	3384      	adds	r3, #132	; 0x84
 800e296:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	dd34      	ble.n	800e308 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	1c5a      	adds	r2, r3, #1
 800e2a2:	607a      	str	r2, [r7, #4]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	617b      	str	r3, [r7, #20]
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	617b      	str	r3, [r7, #20]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	1c5a      	adds	r2, r3, #1
 800e2c4:	607a      	str	r2, [r7, #4]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	021b      	lsls	r3, r3, #8
 800e2d4:	617b      	str	r3, [r7, #20]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d006      	beq.n	800e30c <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	2200      	movs	r2, #0
 800e302:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800e306:	e002      	b.n	800e30e <lcp_received_echo_reply+0x90>
	return;
 800e308:	bf00      	nop
 800e30a:	e000      	b.n	800e30e <lcp_received_echo_reply+0x90>
	return;
 800e30c:	bf00      	nop
}
 800e30e:	3724      	adds	r7, #36	; 0x24
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08a      	sub	sp, #40	; 0x28
 800e31c:	af02      	add	r7, sp, #8
 800e31e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	3384      	adds	r3, #132	; 0x84
 800e32a:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00d      	beq.n	800e350 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	7d1b      	ldrb	r3, [r3, #20]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d306      	bcc.n	800e350 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff ff36 	bl	800e1b4 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	7c1b      	ldrb	r3, [r3, #16]
 800e354:	2b09      	cmp	r3, #9
 800e356:	d13c      	bne.n	800e3d2 <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 800e35e:	f107 030c 	add.w	r3, r7, #12
 800e362:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	613a      	str	r2, [r7, #16]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	0e12      	lsrs	r2, r2, #24
 800e36e:	b2d2      	uxtb	r2, r2
 800e370:	701a      	strb	r2, [r3, #0]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	613a      	str	r2, [r7, #16]
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	0c12      	lsrs	r2, r2, #16
 800e37c:	b2d2      	uxtb	r2, r2
 800e37e:	701a      	strb	r2, [r3, #0]
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	613a      	str	r2, [r7, #16]
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	0a12      	lsrs	r2, r2, #8
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	613a      	str	r2, [r7, #16]
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 800e3a0:	1c53      	adds	r3, r2, #1
 800e3a2:	b2d9      	uxtb	r1, r3
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 800e3aa:	6939      	ldr	r1, [r7, #16]
 800e3ac:	f107 030c 	add.w	r3, r7, #12
 800e3b0:	1acb      	subs	r3, r1, r3
 800e3b2:	f107 010c 	add.w	r1, r7, #12
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	2109      	movs	r1, #9
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7fc fc79 	bl	800acb4 <fsm_sdata>
	++pcb->lcp_echos_pending;
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 800e3d2:	bf00      	nop
 800e3d4:	3720      	adds	r7, #32
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b084      	sub	sp, #16
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3344      	adds	r3, #68	; 0x44
 800e3e6:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e3fe:	f36f 1304 	bfc	r3, #4, #1
 800e402:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	7cdb      	ldrb	r3, [r3, #19]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff feea 	bl	800e1e8 <LcpEchoCheck>
}
 800e414:	bf00      	nop
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3344      	adds	r3, #68	; 0x44
 800e428:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	b2db      	uxtb	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00a      	beq.n	800e450 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 800e43a:	68f9      	ldr	r1, [r7, #12]
 800e43c:	4806      	ldr	r0, [pc, #24]	; (800e458 <lcp_echo_lowerdown+0x3c>)
 800e43e:	f7fb fb03 	bl	8009a48 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e448:	f36f 1304 	bfc	r3, #4, #1
 800e44c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 800e450:	bf00      	nop
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	0800e241 	.word	0x0800e241

0800e45c <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 800e460:	f7f2 feb0 	bl	80011c4 <sys_jiffies>
 800e464:	4602      	mov	r2, r0
 800e466:	4b03      	ldr	r3, [pc, #12]	; (800e474 <magic_init+0x18>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4413      	add	r3, r2
 800e46c:	4a01      	ldr	r2, [pc, #4]	; (800e474 <magic_init+0x18>)
 800e46e:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 800e470:	bf00      	nop
 800e472:	bd80      	pop	{r7, pc}
 800e474:	200005e8 	.word	0x200005e8

0800e478 <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 800e47c:	f7f2 fea2 	bl	80011c4 <sys_jiffies>
 800e480:	4602      	mov	r2, r0
 800e482:	4b03      	ldr	r3, [pc, #12]	; (800e490 <magic_randomize+0x18>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4413      	add	r3, r2
 800e488:	4a01      	ldr	r2, [pc, #4]	; (800e490 <magic_randomize+0x18>)
 800e48a:	6013      	str	r3, [r2, #0]
}
 800e48c:	bf00      	nop
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	200005e8 	.word	0x200005e8

0800e494 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 800e494:	b598      	push	{r3, r4, r7, lr}
 800e496:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 800e498:	f7f2 fe9c 	bl	80011d4 <lwip_port_rand>
 800e49c:	4603      	mov	r3, r0
 800e49e:	041c      	lsls	r4, r3, #16
 800e4a0:	f7f2 fe98 	bl	80011d4 <lwip_port_rand>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	18e2      	adds	r2, r4, r3
 800e4a8:	4b02      	ldr	r3, [pc, #8]	; (800e4b4 <magic+0x20>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	bd98      	pop	{r3, r4, r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	200005e8 	.word	0x200005e8

0800e4b8 <ppp_set_auth>:

/***********************************/
/*** PUBLIC FUNCTION DEFINITIONS ***/
/***********************************/
#if PPP_AUTH_SUPPORT
void ppp_set_auth(ppp_pcb *pcb, u8_t authtype, const char *user, const char *passwd) {
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	607a      	str	r2, [r7, #4]
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD", pcb->phase == PPP_PHASE_DEAD);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00a      	beq.n	800e4e8 <ppp_set_auth+0x30>
 800e4d2:	4b11      	ldr	r3, [pc, #68]	; (800e518 <ppp_set_auth+0x60>)
 800e4d4:	22db      	movs	r2, #219	; 0xdb
 800e4d6:	4911      	ldr	r1, [pc, #68]	; (800e51c <ppp_set_auth+0x64>)
 800e4d8:	4811      	ldr	r0, [pc, #68]	; (800e520 <ppp_set_auth+0x68>)
 800e4da:	f001 fdf9 	bl	80100d0 <iprintf>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	f001 fef8 	bl	80102d4 <fflush>
 800e4e4:	f001 fe3d 	bl	8010162 <abort>

#if PAP_SUPPORT
  pcb->settings.refuse_pap = !(authtype & PPPAUTHTYPE_PAP);
 800e4e8:	7afb      	ldrb	r3, [r7, #11]
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	bf0c      	ite	eq
 800e4f2:	2301      	moveq	r3, #1
 800e4f4:	2300      	movne	r3, #0
 800e4f6:	b2d9      	uxtb	r1, r3
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	7813      	ldrb	r3, [r2, #0]
 800e4fc:	f361 0300 	bfi	r3, r1, #0, #1
 800e500:	7013      	strb	r3, [r2, #0]
#endif /* MSCHAP_SUPPORT */
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
  pcb->settings.refuse_eap = !(authtype & PPPAUTHTYPE_EAP);
#endif /* EAP_SUPPORT */
  pcb->settings.user = user;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	605a      	str	r2, [r3, #4]
  pcb->settings.passwd = passwd;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	609a      	str	r2, [r3, #8]
}
 800e50e:	bf00      	nop
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	080135d4 	.word	0x080135d4
 800e51c:	080135f8 	.word	0x080135f8
 800e520:	08013618 	.word	0x08013618

0800e524 <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <ppp_connect+0x1c>
    return ERR_ALREADY;
 800e53a:	f06f 0308 	mvn.w	r3, #8
 800e53e:	e018      	b.n	800e572 <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 800e540:	f7ff ff9a 	bl	800e478 <magic_randomize>

  if (holdoff == 0) {
 800e544:	887b      	ldrh	r3, [r7, #2]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d104      	bne.n	800e554 <ppp_connect+0x30>
    ppp_do_connect(pcb);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f874 	bl	800e638 <ppp_do_connect>
    return ERR_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	e00e      	b.n	800e572 <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 800e554:	2102      	movs	r1, #2
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 fa88 	bl	800ea6c <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 800e55c:	887b      	ldrh	r3, [r7, #2]
 800e55e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e562:	fb02 f303 	mul.w	r3, r2, r3
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	4904      	ldr	r1, [pc, #16]	; (800e57c <ppp_connect+0x58>)
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fb fa40 	bl	80099f0 <sys_timeout>
  return ERR_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0800e639 	.word	0x0800e639

0800e580 <ppp_close>:
 *
 * Return 0 on success, an error code on failure.
 */
err_t
ppp_close(ppp_pcb *pcb, u8_t nocarrier)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	460b      	mov	r3, r1
 800e58a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  pcb->err_code = PPPERR_USER;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2205      	movs	r2, #5
 800e590:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* holdoff phase, cancel the reconnection */
  if (pcb->phase == PPP_PHASE_HOLDOFF) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d107      	bne.n	800e5ae <ppp_close+0x2e>
    sys_untimeout(ppp_do_connect, pcb);
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	4823      	ldr	r0, [pc, #140]	; (800e630 <ppp_close+0xb0>)
 800e5a2:	f7fb fa51 	bl	8009a48 <sys_untimeout>
    new_phase(pcb, PPP_PHASE_DEAD);
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fa5f 	bl	800ea6c <new_phase>
  }

  /* dead phase, nothing to do, call the status callback to be consistent */
  if (pcb->phase == PPP_PHASE_DEAD) {
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10b      	bne.n	800e5d0 <ppp_close+0x50>
    pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a1b      	ldr	r3, [r3, #32]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	4798      	blx	r3
    return ERR_OK;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e02a      	b.n	800e626 <ppp_close+0xa6>
  }

  /* Already terminating, nothing to do */
  if (pcb->phase >= PPP_PHASE_TERMINATE) {
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5d6:	2b0a      	cmp	r3, #10
 800e5d8:	d902      	bls.n	800e5e0 <ppp_close+0x60>
    return ERR_INPROGRESS;
 800e5da:	f06f 0304 	mvn.w	r3, #4
 800e5de:	e022      	b.n	800e626 <ppp_close+0xa6>
  }

  /* LCP not open, close link protocol */
  if (pcb->phase < PPP_PHASE_ESTABLISH) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5e6:	2b05      	cmp	r3, #5
 800e5e8:	d808      	bhi.n	800e5fc <ppp_close+0x7c>
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800e5ea:	210c      	movs	r1, #12
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fa3d 	bl	800ea6c <new_phase>
    ppp_link_terminated(pcb);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa2a 	bl	800ea4c <ppp_link_terminated>
    return ERR_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e014      	b.n	800e626 <ppp_close+0xa6>
   * to prevent changing the PPP phase FSM in transition phases.
   *
   * Always using nocarrier = 0 is still recommended, this is going to
   * take a little longer time, but is a safer choice from FSM point of view.
   */
  if (nocarrier && pcb->phase == PPP_PHASE_RUNNING) {
 800e5fc:	78fb      	ldrb	r3, [r7, #3]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00c      	beq.n	800e61c <ppp_close+0x9c>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e608:	2b0a      	cmp	r3, #10
 800e60a:	d107      	bne.n	800e61c <ppp_close+0x9c>
    PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: carrier lost -> lcp_lowerdown\n", pcb->netif->num));
    lcp_lowerdown(pcb);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7fd ff0d 	bl	800c42c <lcp_lowerdown>
    /* forced link termination, this will force link protocol to disconnect. */
    link_terminated(pcb);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7fb faca 	bl	8009bac <link_terminated>
    return ERR_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	e004      	b.n	800e626 <ppp_close+0xa6>
  }

  /* Disconnect */
  PPPDEBUG(LOG_DEBUG, ("ppp_close[%d]: kill_link -> lcp_close\n", pcb->netif->num));
  /* LCP soft close request. */
  lcp_close(pcb, "User request");
 800e61c:	4905      	ldr	r1, [pc, #20]	; (800e634 <ppp_close+0xb4>)
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7fd fe68 	bl	800c2f4 <lcp_close>
  return ERR_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	0800e639 	.word	0x0800e639
 800e634:	08013640 	.word	0x08013640

0800e638 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d010      	beq.n	800e670 <ppp_do_connect+0x38>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e654:	2b02      	cmp	r3, #2
 800e656:	d00b      	beq.n	800e670 <ppp_do_connect+0x38>
 800e658:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <ppp_do_connect+0x58>)
 800e65a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 800e65e:	490d      	ldr	r1, [pc, #52]	; (800e694 <ppp_do_connect+0x5c>)
 800e660:	480d      	ldr	r0, [pc, #52]	; (800e698 <ppp_do_connect+0x60>)
 800e662:	f001 fd35 	bl	80100d0 <iprintf>
 800e666:	2000      	movs	r0, #0
 800e668:	f001 fe34 	bl	80102d4 <fflush>
 800e66c:	f001 fd79 	bl	8010162 <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 800e670:	2103      	movs	r1, #3
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 f9fa 	bl	800ea6c <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	69d2      	ldr	r2, [r2, #28]
 800e682:	4611      	mov	r1, r2
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	4798      	blx	r3
}
 800e688:	bf00      	nop
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	080135d4 	.word	0x080135d4
 800e694:	08013650 	.word	0x08013650
 800e698:	08013618 	.word	0x08013618

0800e69c <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2270      	movs	r2, #112	; 0x70
 800e6a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2270      	movs	r2, #112	; 0x70
 800e6b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a04      	ldr	r2, [pc, #16]	; (800e6c8 <ppp_netif_init_cb+0x2c>)
 800e6b8:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	0800e6cd 	.word	0x0800e6cd

0800e6cc <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 800e6d8:	2221      	movs	r2, #33	; 0x21
 800e6da:	68b9      	ldr	r1, [r7, #8]
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f805 	bl	800e6ec <ppp_netif_output>
 800e6e2:	4603      	mov	r3, r0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 800e6ec:	b590      	push	{r4, r7, lr}
 800e6ee:	b089      	sub	sp, #36	; 0x24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	2b21      	cmp	r3, #33	; 0x21
 800e708:	d107      	bne.n	800e71a <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e710:	f003 0308 	and.w	r3, r3, #8
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00b      	beq.n	800e732 <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	699b      	ldr	r3, [r3, #24]
 800e71e:	691c      	ldr	r4, [r3, #16]
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	69d9      	ldr	r1, [r3, #28]
 800e724:	88fb      	ldrh	r3, [r7, #6]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	69b8      	ldr	r0, [r7, #24]
 800e72a:	47a0      	blx	r4
 800e72c:	4603      	mov	r3, r0
 800e72e:	77fb      	strb	r3, [r7, #31]
  goto err;
 800e730:	e002      	b.n	800e738 <ppp_netif_output+0x4c>
    goto err_rte_drop;
 800e732:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 800e734:	23fc      	movs	r3, #252	; 0xfc
 800e736:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <ppp_netif_output+0x58>
    pbuf_free(fpb);
 800e73e:	6978      	ldr	r0, [r7, #20]
 800e740:	f7f5 f924 	bl	800398c <pbuf_free>
  }
  return err;
 800e744:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3724      	adds	r7, #36	; 0x24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd90      	pop	{r4, r7, pc}

0800e750 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 800e754:	4805      	ldr	r0, [pc, #20]	; (800e76c <ppp_init+0x1c>)
 800e756:	f7f4 fa19 	bl	8002b8c <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 800e75a:	4805      	ldr	r0, [pc, #20]	; (800e770 <ppp_init+0x20>)
 800e75c:	f7f4 fa16 	bl	8002b8c <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 800e760:	f7ff fe7c 	bl	800e45c <magic_init>

  return 0;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	08013970 	.word	0x08013970
 800e770:	08013950 	.word	0x08013950

0800e774 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 800e774:	b580      	push	{r7, lr}
 800e776:	b08c      	sub	sp, #48	; 0x30
 800e778:	af04      	add	r7, sp, #16
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d101      	bne.n	800e78c <ppp_new+0x18>
    return NULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	e06a      	b.n	800e862 <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 800e78c:	4837      	ldr	r0, [pc, #220]	; (800e86c <ppp_new+0xf8>)
 800e78e:	f7f4 fa63 	bl	8002c58 <memp_malloc_pool>
 800e792:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <ppp_new+0x2a>
    return NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e061      	b.n	800e862 <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 800e79e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	69b8      	ldr	r0, [r7, #24]
 800e7a6:	f001 feba 	bl	801051e <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	2206      	movs	r2, #6
 800e7ae:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	220a      	movs	r2, #10
 800e7b4:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	220a      	movs	r2, #10
 800e7ba:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	2203      	movs	r2, #3
 800e7c6:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	2206      	movs	r2, #6
 800e7cc:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	220a      	movs	r2, #10
 800e7d2:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	2205      	movs	r2, #5
 800e7de:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9302      	str	r3, [sp, #8]
 800e7ee:	4b20      	ldr	r3, [pc, #128]	; (800e870 <ppp_new+0xfc>)
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	4b1f      	ldr	r3, [pc, #124]	; (800e874 <ppp_new+0x100>)
 800e7f8:	4a1f      	ldr	r2, [pc, #124]	; (800e878 <ppp_new+0x104>)
 800e7fa:	491e      	ldr	r1, [pc, #120]	; (800e874 <ppp_new+0x100>)
 800e7fc:	f7f4 faee 	bl	8002ddc <netif_add>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d105      	bne.n	800e812 <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 800e806:	69b9      	ldr	r1, [r7, #24]
 800e808:	4818      	ldr	r0, [pc, #96]	; (800e86c <ppp_new+0xf8>)
 800e80a:	f7f4 fa8b 	bl	8002d24 <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	e027      	b.n	800e862 <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e816:	4618      	mov	r0, r3
 800e818:	f7f4 fcb0 	bl	800317c <netif_set_up>

  pcb->link_cb = callbacks;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e832:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	e006      	b.n	800e848 <ppp_new+0xd4>
      (*protp->init)(pcb);
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	69b8      	ldr	r0, [r7, #24]
 800e840:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	3301      	adds	r3, #1
 800e846:	61fb      	str	r3, [r7, #28]
 800e848:	4a0c      	ldr	r2, [pc, #48]	; (800e87c <ppp_new+0x108>)
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e850:	617b      	str	r3, [r7, #20]
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1f0      	bne.n	800e83a <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 800e858:	2100      	movs	r1, #0
 800e85a:	69b8      	ldr	r0, [r7, #24]
 800e85c:	f000 f906 	bl	800ea6c <new_phase>
  return pcb;
 800e860:	69bb      	ldr	r3, [r7, #24]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3720      	adds	r7, #32
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	08013950 	.word	0x08013950
 800e870:	0800e69d 	.word	0x0800e69d
 800e874:	08013798 	.word	0x08013798
 800e878:	0801379c 	.word	0x0801379c
 800e87c:	08013960 	.word	0x08013960

0800e880 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 800e888:	2106      	movs	r1, #6
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 f8ee 	bl	800ea6c <new_phase>
  lcp_open(pcb);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7fd fcfb 	bl	800c28c <lcp_open>
  lcp_lowerup(pcb);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fd fd6a 	bl	800c370 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 f8dc 	bl	800ea6c <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d103      	bne.n	800e8c6 <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2206      	movs	r2, #6
 800e8c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	4798      	blx	r3
}
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8f4:	2b05      	cmp	r3, #5
 800e8f6:	d904      	bls.n	800e902 <ppp_input+0x1e>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8fe:	2b0b      	cmp	r3, #11
 800e900:	d90b      	bls.n	800e91a <ppp_input+0x36>
 800e902:	4b45      	ldr	r3, [pc, #276]	; (800ea18 <ppp_input+0x134>)
 800e904:	f240 3211 	movw	r2, #785	; 0x311
 800e908:	4944      	ldr	r1, [pc, #272]	; (800ea1c <ppp_input+0x138>)
 800e90a:	4845      	ldr	r0, [pc, #276]	; (800ea20 <ppp_input+0x13c>)
 800e90c:	f001 fbe0 	bl	80100d0 <iprintf>
 800e910:	2000      	movs	r0, #0
 800e912:	f001 fcdf 	bl	80102d4 <fflush>
 800e916:	f001 fc24 	bl	8010162 <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 800e91a:	f7ff fdad 	bl	800e478 <magic_randomize>

  if (pb->len < 2) {
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	895b      	ldrh	r3, [r3, #10]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d969      	bls.n	800e9fa <ppp_input+0x116>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	021b      	lsls	r3, r3, #8
 800e92e:	b21a      	sxth	r2, r3
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	3301      	adds	r3, #1
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	b21b      	sxth	r3, r3
 800e93a:	4313      	orrs	r3, r2
 800e93c:	b21b      	sxth	r3, r3
 800e93e:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 800e940:	2102      	movs	r1, #2
 800e942:	6838      	ldr	r0, [r7, #0]
 800e944:	f7f4 ff98 	bl	8003878 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 800e948:	8a7b      	ldrh	r3, [r7, #18]
 800e94a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800e94e:	4293      	cmp	r3, r2
 800e950:	d004      	beq.n	800e95c <ppp_input+0x78>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e958:	2b09      	cmp	r3, #9
 800e95a:	d150      	bne.n	800e9fe <ppp_input+0x11a>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e962:	2b07      	cmp	r3, #7
 800e964:	d809      	bhi.n	800e97a <ppp_input+0x96>
   && !(protocol == PPP_LCP
 800e966:	8a7b      	ldrh	r3, [r7, #18]
 800e968:	f24c 0221 	movw	r2, #49185	; 0xc021
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d004      	beq.n	800e97a <ppp_input+0x96>
 800e970:	8a7b      	ldrh	r3, [r7, #18]
 800e972:	f24c 0223 	movw	r2, #49187	; 0xc023
 800e976:	4293      	cmp	r3, r2
 800e978:	d143      	bne.n	800ea02 <ppp_input+0x11e>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 800e97a:	8a7b      	ldrh	r3, [r7, #18]
 800e97c:	2b21      	cmp	r3, #33	; 0x21
 800e97e:	d106      	bne.n	800e98e <ppp_input+0xaa>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e984:	4619      	mov	r1, r3
 800e986:	6838      	ldr	r0, [r7, #0]
 800e988:	f7f3 fa84 	bl	8001e94 <ip4_input>
      return;
 800e98c:	e041      	b.n	800ea12 <ppp_input+0x12e>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
 800e992:	e019      	b.n	800e9c8 <ppp_input+0xe4>
        if (protp->protocol == protocol) {
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	8a7a      	ldrh	r2, [r7, #18]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d111      	bne.n	800e9c2 <ppp_input+0xde>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 800e99e:	2100      	movs	r1, #0
 800e9a0:	6838      	ldr	r0, [r7, #0]
 800e9a2:	f7f5 fad5 	bl	8003f50 <pbuf_coalesce>
 800e9a6:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d12a      	bne.n	800ea06 <ppp_input+0x122>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	6851      	ldr	r1, [r2, #4]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	8952      	ldrh	r2, [r2, #10]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	4798      	blx	r3
          goto out;
 800e9c0:	e024      	b.n	800ea0c <ppp_input+0x128>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	617b      	str	r3, [r7, #20]
 800e9c8:	4a16      	ldr	r2, [pc, #88]	; (800ea24 <ppp_input+0x140>)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1dd      	bne.n	800e994 <ppp_input+0xb0>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 800e9d8:	2102      	movs	r1, #2
 800e9da:	6838      	ldr	r0, [r7, #0]
 800e9dc:	f7f4 ff3c 	bl	8003858 <pbuf_add_header>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d111      	bne.n	800ea0a <ppp_input+0x126>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	6859      	ldr	r1, [r3, #4]
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	895b      	ldrh	r3, [r3, #10]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7fd fe32 	bl	800c65a <lcp_sprotrej>
    }
    break;
 800e9f6:	bf00      	nop
 800e9f8:	e008      	b.n	800ea0c <ppp_input+0x128>
    goto drop;
 800e9fa:	bf00      	nop
 800e9fc:	e006      	b.n	800ea0c <ppp_input+0x128>
    goto drop;
 800e9fe:	bf00      	nop
 800ea00:	e004      	b.n	800ea0c <ppp_input+0x128>
    goto drop;
 800ea02:	bf00      	nop
 800ea04:	e002      	b.n	800ea0c <ppp_input+0x128>
            goto drop;
 800ea06:	bf00      	nop
 800ea08:	e000      	b.n	800ea0c <ppp_input+0x128>
        goto drop;
 800ea0a:	bf00      	nop
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 800ea0c:	6838      	ldr	r0, [r7, #0]
 800ea0e:	f7f4 ffbd 	bl	800398c <pbuf_free>
}
 800ea12:	3718      	adds	r7, #24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	080135d4 	.word	0x080135d4
 800ea1c:	08013690 	.word	0x08013690
 800ea20:	08013618 	.word	0x08013618
 800ea24:	08013960 	.word	0x08013960

0800ea28 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	699b      	ldr	r3, [r3, #24]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	69d1      	ldr	r1, [r2, #28]
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	4798      	blx	r3
 800ea42:	4603      	mov	r3, r0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	69d2      	ldr	r2, [r2, #28]
 800ea5e:	4611      	mov	r1, r2
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 800ea64:	bf00      	nop
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 800ea80:	bf00      	nop
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 800ea8c:	b590      	push	{r4, r7, lr}
 800ea8e:	b087      	sub	sp, #28
 800ea90:	af02      	add	r7, sp, #8
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
 800ea98:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00a      	beq.n	800eaba <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	695c      	ldr	r4, [r3, #20]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	69d9      	ldr	r1, [r3, #28]
 800eaae:	6a3b      	ldr	r3, [r7, #32]
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	47a0      	blx	r4
  }

  return 0;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd90      	pop	{r4, r7, pc}

0800eac4 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 800eac4:	b590      	push	{r4, r7, lr}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00a      	beq.n	800eaf2 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	699c      	ldr	r4, [r3, #24]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	69d9      	ldr	r1, [r3, #28]
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	47a0      	blx	r4
  }

  return 0;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3714      	adds	r7, #20
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd90      	pop	{r4, r7, pc}

0800eafc <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b088      	sub	sp, #32
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
 800eb08:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800eb1a:	f107 0314 	add.w	r3, r7, #20
 800eb1e:	f107 0218 	add.w	r2, r7, #24
 800eb22:	f107 011c 	add.w	r1, r7, #28
 800eb26:	f7f4 facf 	bl	80030c8 <netif_set_addr>
  return 1;
 800eb2a:	2301      	movs	r3, #1
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3720      	adds	r7, #32
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800eb44:	4b04      	ldr	r3, [pc, #16]	; (800eb58 <cifaddr+0x24>)
 800eb46:	4a05      	ldr	r2, [pc, #20]	; (800eb5c <cifaddr+0x28>)
 800eb48:	4903      	ldr	r1, [pc, #12]	; (800eb58 <cifaddr+0x24>)
 800eb4a:	f7f4 fabd 	bl	80030c8 <netif_set_addr>
  return 1;
 800eb4e:	2301      	movs	r3, #1
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	08013798 	.word	0x08013798
 800eb5c:	0801379c 	.word	0x0801379c

0800eb60 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800eb6e:	f043 0308 	orr.w	r3, r3, #8
 800eb72:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7f4 fb58 	bl	8003238 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800eb92:	4611      	mov	r1, r2
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	4798      	blx	r3
  return 1;
 800eb9c:	2301      	movs	r3, #1
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b082      	sub	sp, #8
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800ebb4:	f36f 03c3 	bfc	r3, #3, #1
 800ebb8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7f4 fb65 	bl	8003290 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 800ebc6:	2301      	movs	r3, #1
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 800ebd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	b292      	uxth	r2, r2
 800ebfa:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 800ec16:	4815      	ldr	r0, [pc, #84]	; (800ec6c <pppos_create+0x64>)
 800ec18:	f7f4 f81e 	bl	8002c58 <memp_malloc_pool>
 800ec1c:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <pppos_create+0x20>
    return NULL;
 800ec24:	2300      	movs	r3, #0
 800ec26:	e01d      	b.n	800ec64 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	697a      	ldr	r2, [r7, #20]
 800ec30:	490f      	ldr	r1, [pc, #60]	; (800ec70 <pppos_create+0x68>)
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f7ff fd9e 	bl	800e774 <ppp_new>
 800ec38:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d105      	bne.n	800ec4c <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 800ec40:	6979      	ldr	r1, [r7, #20]
 800ec42:	480a      	ldr	r0, [pc, #40]	; (800ec6c <pppos_create+0x64>)
 800ec44:	f7f4 f86e 	bl	8002d24 <memp_free_pool>
    return NULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	e00b      	b.n	800ec64 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 800ec4c:	2260      	movs	r2, #96	; 0x60
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6978      	ldr	r0, [r7, #20]
 800ec52:	f001 fc64 	bl	801051e <memset>
  pppos->ppp = ppp;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	693a      	ldr	r2, [r7, #16]
 800ec5a:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	605a      	str	r2, [r3, #4]
  return ppp;
 800ec62:	693b      	ldr	r3, [r7, #16]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3718      	adds	r7, #24
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	08013970 	.word	0x08013970
 800ec70:	08013980 	.word	0x08013980

0800ec74 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08c      	sub	sp, #48	; 0x30
 800ec78:	af02      	add	r7, sp, #8
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 800ec84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec88:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	f7f4 fbdf 	bl	8003450 <pbuf_alloc>
 800ec92:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d105      	bne.n	800eca6 <pppos_write+0x32>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7f4 fe76 	bl	800398c <pbuf_free>
    return ERR_MEM;
 800eca0:	f04f 33ff 	mov.w	r3, #4294967295
 800eca4:	e051      	b.n	800ed4a <pppos_write+0xd6>
  }

  /* Empty the buffer */
  nb->len = 0;
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	895a      	ldrh	r2, [r3, #10]
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 800ecba:	f7f2 fa75 	bl	80011a8 <sys_now>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	2b63      	cmp	r3, #99	; 0x63
 800ecc8:	d90d      	bls.n	800ece6 <pppos_write+0x72>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800ecca:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800ecce:	2300      	movs	r3, #0
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	237e      	movs	r3, #126	; 0x7e
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	69f8      	ldr	r0, [r7, #28]
 800ecdc:	f000 fbb2 	bl	800f444 <pppos_output_append>
 800ece0:	4603      	mov	r3, r0
 800ece2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 800ece6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecea:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	895b      	ldrh	r3, [r3, #10]
 800ecf6:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 800ecf8:	e012      	b.n	800ed20 <pppos_write+0xac>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	1c5a      	adds	r2, r3, #1
 800ecfe:	627a      	str	r2, [r7, #36]	; 0x24
 800ed00:	781a      	ldrb	r2, [r3, #0]
 800ed02:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800ed06:	f107 0316 	add.w	r3, r7, #22
 800ed0a:	9301      	str	r3, [sp, #4]
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	4613      	mov	r3, r2
 800ed12:	69ba      	ldr	r2, [r7, #24]
 800ed14:	69f8      	ldr	r0, [r7, #28]
 800ed16:	f000 fb95 	bl	800f444 <pppos_output_append>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 800ed20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed22:	1e5a      	subs	r2, r3, #1
 800ed24:	847a      	strh	r2, [r7, #34]	; 0x22
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1e7      	bne.n	800ecfa <pppos_write+0x86>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 800ed2a:	f107 0316 	add.w	r3, r7, #22
 800ed2e:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 800ed32:	69ba      	ldr	r2, [r7, #24]
 800ed34:	69f8      	ldr	r0, [r7, #28]
 800ed36:	f000 fc0b 	bl	800f550 <pppos_output_last>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7f4 fe23 	bl	800398c <pbuf_free>
  return err;
 800ed46:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3728      	adds	r7, #40	; 0x28
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b08c      	sub	sp, #48	; 0x30
 800ed56:	af02      	add	r7, sp, #8
 800ed58:	60f8      	str	r0, [r7, #12]
 800ed5a:	60b9      	str	r1, [r7, #8]
 800ed5c:	607a      	str	r2, [r7, #4]
 800ed5e:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 800ed64:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed68:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7f4 fb6f 	bl	8003450 <pbuf_alloc>
 800ed72:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d102      	bne.n	800ed80 <pppos_netif_output+0x2e>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 800ed7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed7e:	e0ac      	b.n	800eeda <pppos_netif_output+0x188>
  }

  /* Empty the buffer */
  nb->len = 0;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2200      	movs	r2, #0
 800ed84:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	891a      	ldrh	r2, [r3, #8]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 800ed94:	f7f2 fa08 	bl	80011a8 <sys_now>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	2b63      	cmp	r3, #99	; 0x63
 800eda2:	d90d      	bls.n	800edc0 <pppos_netif_output+0x6e>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800eda4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800eda8:	2300      	movs	r3, #0
 800edaa:	9301      	str	r3, [sp, #4]
 800edac:	2300      	movs	r3, #0
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	237e      	movs	r3, #126	; 0x7e
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	69b8      	ldr	r0, [r7, #24]
 800edb6:	f000 fb45 	bl	800f444 <pppos_output_append>
 800edba:	4603      	mov	r3, r0
 800edbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 800edc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edc4:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edcc:	f003 0304 	and.w	r3, r3, #4
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d11d      	bne.n	800ee12 <pppos_netif_output+0xc0>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 800edd6:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800edda:	f107 0312 	add.w	r3, r7, #18
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	2301      	movs	r3, #1
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	23ff      	movs	r3, #255	; 0xff
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f000 fb2b 	bl	800f444 <pppos_output_append>
 800edee:	4603      	mov	r3, r0
 800edf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 800edf4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800edf8:	f107 0312 	add.w	r3, r7, #18
 800edfc:	9301      	str	r3, [sp, #4]
 800edfe:	2301      	movs	r3, #1
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	2303      	movs	r3, #3
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	69b8      	ldr	r0, [r7, #24]
 800ee08:	f000 fb1c 	bl	800f444 <pppos_output_append>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee18:	f003 0302 	and.w	r3, r3, #2
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d002      	beq.n	800ee28 <pppos_netif_output+0xd6>
 800ee22:	887b      	ldrh	r3, [r7, #2]
 800ee24:	2bff      	cmp	r3, #255	; 0xff
 800ee26:	d912      	bls.n	800ee4e <pppos_netif_output+0xfc>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 800ee28:	887b      	ldrh	r3, [r7, #2]
 800ee2a:	0a1b      	lsrs	r3, r3, #8
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	b2da      	uxtb	r2, r3
 800ee30:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800ee34:	f107 0312 	add.w	r3, r7, #18
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	69b8      	ldr	r0, [r7, #24]
 800ee44:	f000 fafe 	bl	800f444 <pppos_output_append>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 800ee4e:	887b      	ldrh	r3, [r7, #2]
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800ee56:	f107 0312 	add.w	r3, r7, #18
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	4613      	mov	r3, r2
 800ee62:	697a      	ldr	r2, [r7, #20]
 800ee64:	69b8      	ldr	r0, [r7, #24]
 800ee66:	f000 faed 	bl	800f444 <pppos_output_append>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	627b      	str	r3, [r7, #36]	; 0x24
 800ee74:	e021      	b.n	800eeba <pppos_netif_output+0x168>
    u16_t n = p->len;
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	895b      	ldrh	r3, [r3, #10]
 800ee7a:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 800ee7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 800ee82:	e012      	b.n	800eeaa <pppos_netif_output+0x158>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	61fa      	str	r2, [r7, #28]
 800ee8a:	781a      	ldrb	r2, [r3, #0]
 800ee8c:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800ee90:	f107 0312 	add.w	r3, r7, #18
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	2301      	movs	r3, #1
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	697a      	ldr	r2, [r7, #20]
 800ee9e:	69b8      	ldr	r0, [r7, #24]
 800eea0:	f000 fad0 	bl	800f444 <pppos_output_append>
 800eea4:	4603      	mov	r3, r0
 800eea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 800eeaa:	8c3b      	ldrh	r3, [r7, #32]
 800eeac:	1e5a      	subs	r2, r3, #1
 800eeae:	843a      	strh	r2, [r7, #32]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e7      	bne.n	800ee84 <pppos_netif_output+0x132>
  for(p = pb; p; p = p->next) {
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	627b      	str	r3, [r7, #36]	; 0x24
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1da      	bne.n	800ee76 <pppos_netif_output+0x124>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 800eec0:	f107 0312 	add.w	r3, r7, #18
 800eec4:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	69b8      	ldr	r0, [r7, #24]
 800eecc:	f000 fb40 	bl	800f550 <pppos_output_last>
 800eed0:	4603      	mov	r3, r0
 800eed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 800eed6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3728      	adds	r7, #40	; 0x28
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3308      	adds	r3, #8
 800eef4:	2258      	movs	r2, #88	; 0x58
 800eef6:	2100      	movs	r1, #0
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 fb10 	bl	801051e <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2260      	movs	r2, #96	; 0x60
 800ef02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2260      	movs	r2, #96	; 0x60
 800ef0a:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800ef12:	f043 0301 	orr.w	r3, r3, #1
 800ef16:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7ff fcb0 	bl	800e880 <ppp_start>
}
 800ef20:	bf00      	nop
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800ef3c:	f36f 0300 	bfc	r3, #0, #1
 800ef40:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 fa4b 	bl	800f3e0 <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff fcaa 	bl	800e8a4 <ppp_link_end>
}
 800ef50:	bf00      	nop
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 800ef66:	68f9      	ldr	r1, [r7, #12]
 800ef68:	4803      	ldr	r0, [pc, #12]	; (800ef78 <pppos_destroy+0x20>)
 800ef6a:	f7f3 fedb 	bl	8002d24 <memp_free_pool>
  return ERR_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	08013970 	.word	0x08013970

0800ef7c <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08c      	sub	sp, #48	; 0x30
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	69db      	ldr	r3, [r3, #28]
 800ef8c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef98:	f003 0301 	and.w	r3, r3, #1
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 81b6 	beq.w	800f310 <pppos_input+0x394>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 800efa4:	e1ad      	b.n	800f302 <pppos_input+0x386>
    cur_char = *s_u8++;
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 800efb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efb6:	08db      	lsrs	r3, r3, #3
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	461a      	mov	r2, r3
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	4413      	add	r3, r2
 800efc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efc4:	b25a      	sxtb	r2, r3
 800efc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efca:	f003 0307 	and.w	r3, r3, #7
 800efce:	2101      	movs	r1, #1
 800efd0:	fa01 f303 	lsl.w	r3, r1, r3
 800efd4:	b25b      	sxtb	r3, r3
 800efd6:	4013      	ands	r3, r2
 800efd8:	b25b      	sxtb	r3, r3
 800efda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 800efde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f000 8094 	beq.w	800f110 <pppos_input+0x194>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 800efe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efec:	2b7d      	cmp	r3, #125	; 0x7d
 800efee:	d104      	bne.n	800effa <pppos_input+0x7e>
        pppos->in_escaped = 1;
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800eff8:	e183      	b.n	800f302 <pppos_input+0x386>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 800effa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800effe:	2b7e      	cmp	r3, #126	; 0x7e
 800f000:	f040 817f 	bne.w	800f302 <pppos_input+0x386>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d972      	bls.n	800f0f4 <pppos_input+0x178>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f014:	2b04      	cmp	r3, #4
 800f016:	d803      	bhi.n	800f020 <pppos_input+0xa4>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
          pppos_input_drop(pppos);
 800f018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f01a:	f000 fa07 	bl	800f42c <pppos_input_drop>
 800f01e:	e069      	b.n	800f0f4 <pppos_input+0x178>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f026:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d003      	beq.n	800f036 <pppos_input+0xba>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
          pppos_input_drop(pppos);
 800f02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f030:	f000 f9fc 	bl	800f42c <pppos_input_drop>
 800f034:	e05e      	b.n	800f0f4 <pppos_input+0x178>
        } else if (!pppos->in_tail) {
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d103      	bne.n	800f046 <pppos_input+0xca>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
          pppos_input_drop(pppos);
 800f03e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f040:	f000 f9f4 	bl	800f42c <pppos_input_drop>
 800f044:	e056      	b.n	800f0f4 <pppos_input+0x178>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f04a:	895b      	ldrh	r3, [r3, #10]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d91c      	bls.n	800f08a <pppos_input+0x10e>
            pppos->in_tail->len -= 2;
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f056:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f058:	8952      	ldrh	r2, [r2, #10]
 800f05a:	3a02      	subs	r2, #2
 800f05c:	b292      	uxth	r2, r2
 800f05e:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f066:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f068:	8952      	ldrh	r2, [r2, #10]
 800f06a:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f074:	429a      	cmp	r2, r3
 800f076:	d027      	beq.n	800f0c8 <pppos_input+0x14c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f080:	4619      	mov	r1, r3
 800f082:	4610      	mov	r0, r2
 800f084:	f7f4 fd4a 	bl	8003b1c <pbuf_cat>
 800f088:	e01e      	b.n	800f0c8 <pppos_input+0x14c>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f090:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f092:	8952      	ldrh	r2, [r2, #10]
 800f094:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d007      	beq.n	800f0b2 <pppos_input+0x136>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	f7f4 fd35 	bl	8003b1c <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0ba:	891b      	ldrh	r3, [r3, #8]
 800f0bc:	3b02      	subs	r3, #2
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	f7f4 fab6 	bl	8003634 <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0cc:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 800f0da:	6939      	ldr	r1, [r7, #16]
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7ff fc01 	bl	800e8e4 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 8110 	beq.w	800f314 <pppos_input+0x398>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	2201      	movs	r2, #1
 800f102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f10e:	e0f8      	b.n	800f302 <pppos_input+0x386>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f116:	2b00      	cmp	r3, #0
 800f118:	d009      	beq.n	800f12e <pppos_input+0x1b2>
        pppos->in_escaped = 0;
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 800f122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f126:	f083 0320 	eor.w	r3, r3, #32
 800f12a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f134:	2b05      	cmp	r3, #5
 800f136:	f200 80ce 	bhi.w	800f2d6 <pppos_input+0x35a>
 800f13a:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <pppos_input+0x1c4>)
 800f13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f140:	0800f2d7 	.word	0x0800f2d7
 800f144:	0800f159 	.word	0x0800f159
 800f148:	0800f16b 	.word	0x0800f16b
 800f14c:	0800f17d 	.word	0x0800f17d
 800f150:	0800f1b9 	.word	0x0800f1b9
 800f154:	0800f1d9 	.word	0x0800f1d9
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 800f158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f15c:	2bff      	cmp	r3, #255	; 0xff
 800f15e:	d104      	bne.n	800f16a <pppos_input+0x1ee>
            pppos->in_state = PDCONTROL;
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	2202      	movs	r2, #2
 800f164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800f168:	e0b6      	b.n	800f2d8 <pppos_input+0x35c>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 800f16a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f16e:	2b03      	cmp	r3, #3
 800f170:	d104      	bne.n	800f17c <pppos_input+0x200>
            pppos->in_state = PDPROTOCOL1;
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	2203      	movs	r2, #3
 800f176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800f17a:	e0ad      	b.n	800f2d8 <pppos_input+0x35c>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 800f17c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f180:	f003 0301 	and.w	r3, r3, #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00a      	beq.n	800f19e <pppos_input+0x222>
            pppos->in_protocol = cur_char;
 800f188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f190:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	2205      	movs	r2, #5
 800f198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 800f19c:	e09c      	b.n	800f2d8 <pppos_input+0x35c>
            pppos->in_protocol = (u16_t)cur_char << 8;
 800f19e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	021b      	lsls	r3, r3, #8
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b0:	2204      	movs	r2, #4
 800f1b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800f1b6:	e08f      	b.n	800f2d8 <pppos_input+0x35c>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f1be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d0:	2205      	movs	r2, #5
 800f1d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800f1d6:	e07f      	b.n	800f2d8 <pppos_input+0x35c>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d005      	beq.n	800f1ec <pppos_input+0x270>
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e4:	895b      	ldrh	r3, [r3, #10]
 800f1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ea:	d165      	bne.n	800f2b8 <pppos_input+0x33c>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d027      	beq.n	800f244 <pppos_input+0x2c8>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1fa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f1fc:	8952      	ldrh	r2, [r2, #10]
 800f1fe:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f208:	429a      	cmp	r2, r3
 800f20a:	d00a      	beq.n	800f222 <pppos_input+0x2a6>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7f4 fc80 	bl	8003b1c <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	2200      	movs	r2, #0
 800f220:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 800f222:	f240 6374 	movw	r3, #1652	; 0x674
 800f226:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f22c:	891b      	ldrh	r3, [r3, #8]
 800f22e:	8c3a      	ldrh	r2, [r7, #32]
 800f230:	429a      	cmp	r2, r3
 800f232:	d207      	bcs.n	800f244 <pppos_input+0x2c8>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
                pppos_input_drop(pppos);
 800f234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f236:	f000 f8f9 	bl	800f42c <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	2200      	movs	r2, #0
 800f23e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 800f242:	e049      	b.n	800f2d8 <pppos_input+0x35c>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 800f248:	8bfb      	ldrh	r3, [r7, #30]
 800f24a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f24e:	4619      	mov	r1, r3
 800f250:	2000      	movs	r0, #0
 800f252:	f7f4 f8fd 	bl	8003450 <pbuf_alloc>
 800f256:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d107      	bne.n	800f26e <pppos_input+0x2f2>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
              pppos_input_drop(pppos);
 800f25e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f260:	f000 f8e4 	bl	800f42c <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800f264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f266:	2200      	movs	r2, #0
 800f268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 800f26c:	e034      	b.n	800f2d8 <pppos_input+0x35c>
            }
            if (pppos->in_head == NULL) {
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f272:	2b00      	cmp	r3, #0
 800f274:	d11d      	bne.n	800f2b2 <pppos_input+0x336>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	685a      	ldr	r2, [r3, #4]
 800f27a:	8bfb      	ldrh	r3, [r7, #30]
 800f27c:	4413      	add	r3, r2
 800f27e:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	895b      	ldrh	r3, [r3, #10]
 800f284:	3302      	adds	r3, #2
 800f286:	b29a      	uxth	r2, r3
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	617a      	str	r2, [r7, #20]
 800f292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f294:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800f298:	0a12      	lsrs	r2, r2, #8
 800f29a:	b292      	uxth	r2, r2
 800f29c:	b2d2      	uxtb	r2, r2
 800f29e:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ae:	69ba      	ldr	r2, [r7, #24]
 800f2b0:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b4:	69ba      	ldr	r2, [r7, #24]
 800f2b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2bc:	6859      	ldr	r1, [r3, #4]
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c2:	895a      	ldrh	r2, [r3, #10]
 800f2c4:	1c50      	adds	r0, r2, #1
 800f2c6:	b280      	uxth	r0, r0
 800f2c8:	8158      	strh	r0, [r3, #10]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	440b      	add	r3, r1
 800f2ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800f2d2:	701a      	strb	r2, [r3, #0]
          break;
 800f2d4:	e000      	b.n	800f2d8 <pppos_input+0x35c>
        default:
          break;
 800f2d6:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2de:	0a1b      	lsrs	r3, r3, #8
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2ee:	404b      	eors	r3, r1
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	490a      	ldr	r1, [pc, #40]	; (800f31c <pppos_input+0x3a0>)
 800f2f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f2f8:	4053      	eors	r3, r2
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	1e5a      	subs	r2, r3, #1
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f73f ae4c 	bgt.w	800efa6 <pppos_input+0x2a>
 800f30e:	e002      	b.n	800f316 <pppos_input+0x39a>
    return;
 800f310:	bf00      	nop
 800f312:	e000      	b.n	800f316 <pppos_input+0x39a>
            break;
 800f314:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 800f316:	3730      	adds	r7, #48	; 0x30
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	0801399c 	.word	0x0801399c

0800f320 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 800f320:	b480      	push	{r7}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	b2d9      	uxtb	r1, r3
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f342:	f361 0341 	bfi	r3, r1, #1, #1
 800f346:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	f003 0301 	and.w	r3, r3, #1
 800f352:	b2d9      	uxtb	r1, r3
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800f35a:	f361 0382 	bfi	r3, r1, #2, #1
 800f35e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 800f362:	2300      	movs	r3, #0
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	e00e      	b.n	800f386 <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	fa22 f303 	lsr.w	r3, r2, r3
 800f372:	b2d9      	uxtb	r1, r3
 800f374:	693a      	ldr	r2, [r7, #16]
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	4413      	add	r3, r2
 800f37a:	330c      	adds	r3, #12
 800f37c:	460a      	mov	r2, r1
 800f37e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	3301      	adds	r3, #1
 800f384:	617b      	str	r3, [r7, #20]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2b03      	cmp	r3, #3
 800f38a:	dded      	ble.n	800f368 <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 800f38c:	bf00      	nop
 800f38e:	371c      	adds	r7, #28
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 800f398:	b480      	push	{r7}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	617b      	str	r3, [r7, #20]
 800f3ae:	e00e      	b.n	800f3ce <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800f3ba:	b2d9      	uxtb	r1, r3
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	332d      	adds	r3, #45	; 0x2d
 800f3c4:	460a      	mov	r2, r1
 800f3c6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	dded      	ble.n	800f3b0 <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 800f3d4:	bf00      	nop
 800f3d6:	371c      	adds	r7, #28
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d016      	beq.n	800f41e <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00a      	beq.n	800f40e <pppos_input_free_current_packet+0x2e>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f400:	429a      	cmp	r2, r3
 800f402:	d004      	beq.n	800f40e <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f4 fabf 	bl	800398c <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f412:	4618      	mov	r0, r3
 800f414:	f7f4 faba 	bl	800398c <pbuf_free>
    pppos->in_head = NULL;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	655a      	str	r2, [r3, #84]	; 0x54
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7ff ffd3 	bl	800f3e0 <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 800f43a:	bf00      	nop
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
	...

0800f444 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 800f444:	b590      	push	{r4, r7, lr}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	607a      	str	r2, [r7, #4]
 800f44e:	461a      	mov	r2, r3
 800f450:	460b      	mov	r3, r1
 800f452:	72fb      	strb	r3, [r7, #11]
 800f454:	4613      	mov	r3, r2
 800f456:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 800f458:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d002      	beq.n	800f466 <pppos_output_append+0x22>
    return err;
 800f460:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f464:	e06e      	b.n	800f544 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	895b      	ldrh	r3, [r3, #10]
 800f46a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f46e:	2b01      	cmp	r3, #1
 800f470:	dc19      	bgt.n	800f4a6 <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	685c      	ldr	r4, [r3, #4]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6818      	ldr	r0, [r3, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6859      	ldr	r1, [r3, #4]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	895b      	ldrh	r3, [r3, #10]
 800f482:	461a      	mov	r2, r3
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48a:	47a0      	blx	r4
 800f48c:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	895b      	ldrh	r3, [r3, #10]
 800f492:	461a      	mov	r2, r3
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	429a      	cmp	r2, r3
 800f498:	d002      	beq.n	800f4a0 <pppos_output_append+0x5c>
      return ERR_IF;
 800f49a:	f06f 030b 	mvn.w	r3, #11
 800f49e:	e051      	b.n	800f544 <pppos_output_append+0x100>
    }
    nb->len = 0;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 800f4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d010      	beq.n	800f4ce <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	0a1b      	lsrs	r3, r3, #8
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	7abb      	ldrb	r3, [r7, #10]
 800f4bc:	404b      	eors	r3, r1
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	4922      	ldr	r1, [pc, #136]	; (800f54c <pppos_output_append+0x108>)
 800f4c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f4c6:	4053      	eors	r3, r2
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 800f4ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d02a      	beq.n	800f52c <pppos_output_append+0xe8>
 800f4d6:	7abb      	ldrb	r3, [r7, #10]
 800f4d8:	08db      	lsrs	r3, r3, #3
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	461a      	mov	r2, r3
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	7b1b      	ldrb	r3, [r3, #12]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	7abb      	ldrb	r3, [r7, #10]
 800f4e8:	f003 0307 	and.w	r3, r3, #7
 800f4ec:	fa42 f303 	asr.w	r3, r2, r3
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d019      	beq.n	800f52c <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	685a      	ldr	r2, [r3, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	895b      	ldrh	r3, [r3, #10]
 800f500:	1c59      	adds	r1, r3, #1
 800f502:	b288      	uxth	r0, r1
 800f504:	6879      	ldr	r1, [r7, #4]
 800f506:	8148      	strh	r0, [r1, #10]
 800f508:	4413      	add	r3, r2
 800f50a:	227d      	movs	r2, #125	; 0x7d
 800f50c:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	895b      	ldrh	r3, [r3, #10]
 800f516:	1c59      	adds	r1, r3, #1
 800f518:	b288      	uxth	r0, r1
 800f51a:	6879      	ldr	r1, [r7, #4]
 800f51c:	8148      	strh	r0, [r1, #10]
 800f51e:	4413      	add	r3, r2
 800f520:	7aba      	ldrb	r2, [r7, #10]
 800f522:	f082 0220 	eor.w	r2, r2, #32
 800f526:	b2d2      	uxtb	r2, r2
 800f528:	701a      	strb	r2, [r3, #0]
 800f52a:	e00a      	b.n	800f542 <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685a      	ldr	r2, [r3, #4]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	895b      	ldrh	r3, [r3, #10]
 800f534:	1c59      	adds	r1, r3, #1
 800f536:	b288      	uxth	r0, r1
 800f538:	6879      	ldr	r1, [r7, #4]
 800f53a:	8148      	strh	r0, [r1, #10]
 800f53c:	4413      	add	r3, r2
 800f53e:	7aba      	ldrb	r2, [r7, #10]
 800f540:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	371c      	adds	r7, #28
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd90      	pop	{r4, r7, pc}
 800f54c:	0801399c 	.word	0x0801399c

0800f550 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 800f550:	b590      	push	{r4, r7, lr}
 800f552:	b089      	sub	sp, #36	; 0x24
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	607a      	str	r2, [r7, #4]
 800f55a:	603b      	str	r3, [r7, #0]
 800f55c:	460b      	mov	r3, r1
 800f55e:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	43db      	mvns	r3, r3
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800f574:	2300      	movs	r3, #0
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	2301      	movs	r3, #1
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	4613      	mov	r3, r2
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff ff5f 	bl	800f444 <pppos_output_append>
 800f586:	4603      	mov	r3, r0
 800f588:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	43db      	mvns	r3, r3
 800f590:	121b      	asrs	r3, r3, #8
 800f592:	b2da      	uxtb	r2, r3
 800f594:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800f598:	2300      	movs	r3, #0
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	2301      	movs	r3, #1
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff ff4d 	bl	800f444 <pppos_output_append>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 800f5ae:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	237e      	movs	r3, #126	; 0x7e
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f7ff ff40 	bl	800f444 <pppos_output_append>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 800f5c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d122      	bne.n	800f616 <pppos_output_last+0xc6>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	895b      	ldrh	r3, [r3, #10]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d014      	beq.n	800f602 <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	685c      	ldr	r4, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6859      	ldr	r1, [r3, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	895b      	ldrh	r3, [r3, #10]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ea:	6978      	ldr	r0, [r7, #20]
 800f5ec:	47a0      	blx	r4
 800f5ee:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	895b      	ldrh	r3, [r3, #10]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d002      	beq.n	800f602 <pppos_output_last+0xb2>
      err = ERR_IF;
 800f5fc:	23f4      	movs	r3, #244	; 0xf4
 800f5fe:	72fb      	strb	r3, [r7, #11]
      goto failed;
 800f600:	e00a      	b.n	800f618 <pppos_output_last+0xc8>
    }
  }

  pppos->last_xmit = sys_now();
 800f602:	f7f1 fdd1 	bl	80011a8 <sys_now>
 800f606:	4602      	mov	r2, r0
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
  pbuf_free(nb);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7f4 f9bd 	bl	800398c <pbuf_free>
  return ERR_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	e008      	b.n	800f628 <pppos_output_last+0xd8>
    goto failed;
 800f616:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7f4 f9b4 	bl	800398c <pbuf_free>
  return err;
 800f624:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	371c      	adds	r7, #28
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd90      	pop	{r4, r7, pc}

0800f630 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2200      	movs	r2, #0
 800f64a:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d03f      	beq.n	800f702 <upap_authwithpeer+0x92>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d03c      	beq.n	800f702 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 800f68e:	68b8      	ldr	r0, [r7, #8]
 800f690:	f7f0 fd9e 	bl	80001d0 <strlen>
 800f694:	4603      	mov	r3, r0
 800f696:	2bfe      	cmp	r3, #254	; 0xfe
 800f698:	d805      	bhi.n	800f6a6 <upap_authwithpeer+0x36>
 800f69a:	68b8      	ldr	r0, [r7, #8]
 800f69c:	f7f0 fd98 	bl	80001d0 <strlen>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	e000      	b.n	800f6a8 <upap_authwithpeer+0x38>
 800f6a6:	22ff      	movs	r2, #255	; 0xff
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f0 fd8b 	bl	80001d0 <strlen>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2bfe      	cmp	r3, #254	; 0xfe
 800f6be:	d805      	bhi.n	800f6cc <upap_authwithpeer+0x5c>
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7f0 fd85 	bl	80001d0 <strlen>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	e000      	b.n	800f6ce <upap_authwithpeer+0x5e>
 800f6cc:	22ff      	movs	r2, #255	; 0xff
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d004      	beq.n	800f6f0 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d104      	bne.n	800f6fa <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2202      	movs	r2, #2
 800f6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 800f6f8:	e004      	b.n	800f704 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f000 f92c 	bl	800f958 <upap_sauthreq>
 800f700:	e000      	b.n	800f704 <upap_authwithpeer+0x94>
        return;
 800f702:	bf00      	nop
}
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d114      	bne.n	800f74a <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	7b5b      	ldrb	r3, [r3, #13]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d309      	bcc.n	800f742 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2205      	movs	r2, #5
 800f732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 800f736:	f24c 0123 	movw	r1, #49187	; 0xc023
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7fa fb42 	bl	8009dc4 <auth_withpeer_fail>
	return;
 800f740:	e004      	b.n	800f74c <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 f908 	bl	800f958 <upap_sauthreq>
 800f748:	e000      	b.n	800f74c <upap_timeout+0x42>
	return;
 800f74a:	bf00      	nop
}
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 800f76c:	e007      	b.n	800f77e <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f774:	2b02      	cmp	r3, #2
 800f776:	d102      	bne.n	800f77e <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 f8ed 	bl	800f958 <upap_sauthreq>
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
	...

0800f788 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f796:	2b03      	cmp	r3, #3
 800f798:	d103      	bne.n	800f7a2 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	4805      	ldr	r0, [pc, #20]	; (800f7b4 <upap_lowerdown+0x2c>)
 800f79e:	f7fa f953 	bl	8009a48 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0800f70b 	.word	0x0800f70b

0800f7b8 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7c6:	2b03      	cmp	r3, #3
 800f7c8:	d104      	bne.n	800f7d4 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 800f7ca:	f24c 0123 	movw	r1, #49187	; 0xc023
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f7fa faf8 	bl	8009dc4 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff ffd7 	bl	800f788 <upap_lowerdown>
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b088      	sub	sp, #32
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	60f8      	str	r0, [r7, #12]
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	dd37      	ble.n	800f868 <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	61fa      	str	r2, [r7, #28]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	61fa      	str	r2, [r7, #28]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	1c5a      	adds	r2, r3, #1
 800f810:	61fa      	str	r2, [r7, #28]
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	617b      	str	r3, [r7, #20]
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	1c5a      	adds	r2, r3, #1
 800f81c:	61fa      	str	r2, [r7, #28]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	461a      	mov	r2, r3
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	4313      	orrs	r3, r2
 800f826:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	dd1e      	ble.n	800f86c <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	429a      	cmp	r2, r3
 800f834:	dc1c      	bgt.n	800f870 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	3b04      	subs	r3, #4
 800f83a:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 800f83c:	7efb      	ldrb	r3, [r7, #27]
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d004      	beq.n	800f84c <upap_input+0x6a>
 800f842:	2b03      	cmp	r3, #3
 800f844:	d009      	beq.n	800f85a <upap_input+0x78>
 800f846:	2b01      	cmp	r3, #1
 800f848:	d014      	beq.n	800f874 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 800f84a:	e014      	b.n	800f876 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 800f84c:	7eba      	ldrb	r2, [r7, #26]
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	69f9      	ldr	r1, [r7, #28]
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 f812 	bl	800f87c <upap_rauthack>
	break;
 800f858:	e00d      	b.n	800f876 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 800f85a:	7eba      	ldrb	r2, [r7, #26]
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	69f9      	ldr	r1, [r7, #28]
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f000 f843 	bl	800f8ec <upap_rauthnak>
	break;
 800f866:	e006      	b.n	800f876 <upap_input+0x94>
	return;
 800f868:	bf00      	nop
 800f86a:	e004      	b.n	800f876 <upap_input+0x94>
	return;
 800f86c:	bf00      	nop
 800f86e:	e002      	b.n	800f876 <upap_input+0x94>
	return;
 800f870:	bf00      	nop
 800f872:	e000      	b.n	800f876 <upap_input+0x94>
	break;
 800f874:	bf00      	nop
    }
}
 800f876:	3720      	adds	r7, #32
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f890:	2b03      	cmp	r3, #3
 800f892:	d122      	bne.n	800f8da <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	dd10      	ble.n	800f8bc <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	60ba      	str	r2, [r7, #8]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d008      	beq.n	800f8bc <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800f8b0:	7dfa      	ldrb	r2, [r7, #23]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	dc12      	bgt.n	800f8de <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800f8bc:	68f9      	ldr	r1, [r7, #12]
 800f8be:	480a      	ldr	r0, [pc, #40]	; (800f8e8 <upap_rauthack+0x6c>)
 800f8c0:	f7fa f8c2 	bl	8009a48 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2204      	movs	r2, #4
 800f8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f24c 0123 	movw	r1, #49187	; 0xc023
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f7fa fa8a 	bl	8009dec <auth_withpeer_success>
 800f8d8:	e002      	b.n	800f8e0 <upap_rauthack+0x64>
	return;
 800f8da:	bf00      	nop
 800f8dc:	e000      	b.n	800f8e0 <upap_rauthack+0x64>
		return;
 800f8de:	bf00      	nop
}
 800f8e0:	3718      	adds	r7, #24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	0800f70b 	.word	0x0800f70b

0800f8ec <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f900:	2b03      	cmp	r3, #3
 800f902:	d121      	bne.n	800f948 <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	dd10      	ble.n	800f92c <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	1c5a      	adds	r2, r3, #1
 800f90e:	60ba      	str	r2, [r7, #8]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800f914:	7dfb      	ldrb	r3, [r7, #23]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800f920:	7dfa      	ldrb	r2, [r7, #23]
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	dc11      	bgt.n	800f94c <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800f92c:	68f9      	ldr	r1, [r7, #12]
 800f92e:	4809      	ldr	r0, [pc, #36]	; (800f954 <upap_rauthnak+0x68>)
 800f930:	f7fa f88a 	bl	8009a48 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2205      	movs	r2, #5
 800f938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 800f93c:	f24c 0123 	movw	r1, #49187	; 0xc023
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7fa fa3f 	bl	8009dc4 <auth_withpeer_fail>
 800f946:	e002      	b.n	800f94e <upap_rauthnak+0x62>
	return;
 800f948:	bf00      	nop
 800f94a:	e000      	b.n	800f94e <upap_rauthnak+0x62>
		return;
 800f94c:	bf00      	nop
}
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0800f70b 	.word	0x0800f70b

0800f958 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f966:	461a      	mov	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f96e:	4413      	add	r3, r2
 800f970:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 800f972:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	b29b      	uxth	r3, r3
 800f978:	3304      	adds	r3, #4
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f980:	4619      	mov	r1, r3
 800f982:	2000      	movs	r0, #0
 800f984:	f7f3 fd64 	bl	8003450 <pbuf_alloc>
 800f988:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 808a 	beq.w	800faa6 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	891a      	ldrh	r2, [r3, #8]
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	895b      	ldrh	r3, [r3, #10]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d003      	beq.n	800f9a6 <upap_sauthreq+0x4e>
        pbuf_free(p);
 800f99e:	6938      	ldr	r0, [r7, #16]
 800f9a0:	f7f3 fff4 	bl	800398c <pbuf_free>
        return;
 800f9a4:	e080      	b.n	800faa8 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	1c5a      	adds	r2, r3, #1
 800f9b0:	60fa      	str	r2, [r7, #12]
 800f9b2:	22ff      	movs	r2, #255	; 0xff
 800f9b4:	701a      	strb	r2, [r3, #0]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	1c5a      	adds	r2, r3, #1
 800f9ba:	60fa      	str	r2, [r7, #12]
 800f9bc:	2203      	movs	r2, #3
 800f9be:	701a      	strb	r2, [r3, #0]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	1c5a      	adds	r2, r3, #1
 800f9c4:	60fa      	str	r2, [r7, #12]
 800f9c6:	22c0      	movs	r2, #192	; 0xc0
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	60fa      	str	r2, [r7, #12]
 800f9d0:	2223      	movs	r2, #35	; 0x23
 800f9d2:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	1c5a      	adds	r2, r3, #1
 800f9d8:	60fa      	str	r2, [r7, #12]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	1c5a      	adds	r2, r3, #1
 800f9e2:	60fa      	str	r2, [r7, #12]
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800f9ea:	3201      	adds	r2, #1
 800f9ec:	b2d1      	uxtb	r1, r2
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800f9fa:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	1c5a      	adds	r2, r3, #1
 800fa00:	60fa      	str	r2, [r7, #12]
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	1212      	asrs	r2, r2, #8
 800fa06:	b2d2      	uxtb	r2, r2
 800fa08:	701a      	strb	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	60fa      	str	r2, [r7, #12]
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	b2d2      	uxtb	r2, r2
 800fa14:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	60fa      	str	r2, [r7, #12]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800fa22:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f000 fd4f 	bl	80104d4 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	4413      	add	r3, r2
 800fa42:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	60fa      	str	r2, [r7, #12]
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800fa50:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f000 fd38 	bl	80104d4 <memcpy>

    ppp_write(pcb, p);
 800fa64:	6939      	ldr	r1, [r7, #16]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7fe ffde 	bl	800ea28 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	4810      	ldr	r0, [pc, #64]	; (800fab0 <upap_sauthreq+0x158>)
 800fa70:	f7f9 ffea 	bl	8009a48 <sys_untimeout>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	7b1b      	ldrb	r3, [r3, #12]
 800fa78:	461a      	mov	r2, r3
 800fa7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa7e:	fb03 f302 	mul.w	r3, r3, r2
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	490a      	ldr	r1, [pc, #40]	; (800fab0 <upap_sauthreq+0x158>)
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7f9 ffb2 	bl	80099f0 <sys_timeout>
    ++pcb->upap.us_transmits;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa92:	3301      	adds	r3, #1
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2203      	movs	r2, #3
 800faa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800faa4:	e000      	b.n	800faa8 <upap_sauthreq+0x150>
        return;
 800faa6:	bf00      	nop
}
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	0800f70b 	.word	0x0800f70b

0800fab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800fab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800faec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fab8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800faba:	e003      	b.n	800fac4 <LoopCopyDataInit>

0800fabc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fabc:	4b0c      	ldr	r3, [pc, #48]	; (800faf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fabe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fac0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fac2:	3104      	adds	r1, #4

0800fac4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800fac4:	480b      	ldr	r0, [pc, #44]	; (800faf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800fac6:	4b0c      	ldr	r3, [pc, #48]	; (800faf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800fac8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800faca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800facc:	d3f6      	bcc.n	800fabc <CopyDataInit>
  ldr  r2, =_sbss
 800face:	4a0b      	ldr	r2, [pc, #44]	; (800fafc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800fad0:	e002      	b.n	800fad8 <LoopFillZerobss>

0800fad2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800fad2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800fad4:	f842 3b04 	str.w	r3, [r2], #4

0800fad8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800fad8:	4b09      	ldr	r3, [pc, #36]	; (800fb00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800fada:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800fadc:	d3f9      	bcc.n	800fad2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fade:	f000 f8d5 	bl	800fc8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fae2:	f000 fcd3 	bl	801048c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fae6:	f7f1 fadb 	bl	80010a0 <main>
  bx  lr    
 800faea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800faec:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800faf0:	08013c5c 	.word	0x08013c5c
  ldr  r0, =_sdata
 800faf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800faf8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800fafc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800fb00:	20001900 	.word	0x20001900

0800fb04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fb04:	e7fe      	b.n	800fb04 <ADC_IRQHandler>

0800fb06 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800fb06:	b480      	push	{r7}
 800fb08:	af00      	add	r7, sp, #0
}
 800fb0a:	bf00      	nop
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800fb14:	b480      	push	{r7}
 800fb16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800fb18:	e7fe      	b.n	800fb18 <HardFault_Handler+0x4>

0800fb1a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800fb1a:	b480      	push	{r7}
 800fb1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800fb1e:	e7fe      	b.n	800fb1e <MemManage_Handler+0x4>

0800fb20 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800fb20:	b480      	push	{r7}
 800fb22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800fb24:	e7fe      	b.n	800fb24 <BusFault_Handler+0x4>

0800fb26 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800fb26:	b480      	push	{r7}
 800fb28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800fb2a:	e7fe      	b.n	800fb2a <UsageFault_Handler+0x4>

0800fb2c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	af00      	add	r7, sp, #0
}
 800fb30:	bf00      	nop
 800fb32:	46bd      	mov	sp, r7
 800fb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb38:	4770      	bx	lr

0800fb3a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	af00      	add	r7, sp, #0
}
 800fb3e:	bf00      	nop
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	af00      	add	r7, sp, #0
}
 800fb4c:	bf00      	nop
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800fb56:	b480      	push	{r7}
 800fb58:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800fb5a:	bf00      	nop
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fb64:	b480      	push	{r7}
 800fb66:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 800fb68:	4b04      	ldr	r3, [pc, #16]	; (800fb7c <_getpid+0x18>)
 800fb6a:	2226      	movs	r2, #38	; 0x26
 800fb6c:	601a      	str	r2, [r3, #0]
	return -1;
 800fb6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	200018fc 	.word	0x200018fc

0800fb80 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800fb8a:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <_kill+0x20>)
 800fb8c:	2226      	movs	r2, #38	; 0x26
 800fb8e:	601a      	str	r2, [r3, #0]
	return -1;
 800fb90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	200018fc 	.word	0x200018fc

0800fba4 <_exit>:

void _exit(int32_t status)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800fbac:	e7fe      	b.n	800fbac <_exit+0x8>
	...

0800fbb0 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 800fbbc:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <_write+0x24>)
 800fbbe:	2226      	movs	r2, #38	; 0x26
 800fbc0:	601a      	str	r2, [r3, #0]
	return -1;
 800fbc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	200018fc 	.word	0x200018fc

0800fbd8 <_sbrk>:

void * _sbrk(int32_t incr)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800fbe0:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <_sbrk+0x38>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <_sbrk+0x16>
		heap_end = & end;
 800fbe8:	4b09      	ldr	r3, [pc, #36]	; (800fc10 <_sbrk+0x38>)
 800fbea:	4a0a      	ldr	r2, [pc, #40]	; (800fc14 <_sbrk+0x3c>)
 800fbec:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <_sbrk+0x38>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800fbf4:	4b06      	ldr	r3, [pc, #24]	; (800fc10 <_sbrk+0x38>)
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	4a04      	ldr	r2, [pc, #16]	; (800fc10 <_sbrk+0x38>)
 800fbfe:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800fc00:	68fb      	ldr	r3, [r7, #12]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	200005f4 	.word	0x200005f4
 800fc14:	20001900 	.word	0x20001900

0800fc18 <_close>:

int _close(int32_t file)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <_close+0x20>)
 800fc22:	2226      	movs	r2, #38	; 0x26
 800fc24:	601a      	str	r2, [r3, #0]
	return -1;
 800fc26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	200018fc 	.word	0x200018fc

0800fc3c <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <_lseek+0x24>)
 800fc4a:	2226      	movs	r2, #38	; 0x26
 800fc4c:	601a      	str	r2, [r3, #0]
	return -1;
 800fc4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	200018fc 	.word	0x200018fc

0800fc64 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800fc70:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <_read+0x24>)
 800fc72:	2226      	movs	r2, #38	; 0x26
 800fc74:	601a      	str	r2, [r3, #0]
	return -1;
 800fc76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3714      	adds	r7, #20
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	200018fc 	.word	0x200018fc

0800fc8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fc90:	4a16      	ldr	r2, [pc, #88]	; (800fcec <SystemInit+0x60>)
 800fc92:	4b16      	ldr	r3, [pc, #88]	; (800fcec <SystemInit+0x60>)
 800fc94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800fca0:	4a13      	ldr	r2, [pc, #76]	; (800fcf0 <SystemInit+0x64>)
 800fca2:	4b13      	ldr	r3, [pc, #76]	; (800fcf0 <SystemInit+0x64>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f043 0301 	orr.w	r3, r3, #1
 800fcaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800fcac:	4b10      	ldr	r3, [pc, #64]	; (800fcf0 <SystemInit+0x64>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fcb2:	4a0f      	ldr	r2, [pc, #60]	; (800fcf0 <SystemInit+0x64>)
 800fcb4:	4b0e      	ldr	r3, [pc, #56]	; (800fcf0 <SystemInit+0x64>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800fcbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcc0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	; (800fcf0 <SystemInit+0x64>)
 800fcc4:	4a0b      	ldr	r2, [pc, #44]	; (800fcf4 <SystemInit+0x68>)
 800fcc6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fcc8:	4a09      	ldr	r2, [pc, #36]	; (800fcf0 <SystemInit+0x64>)
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <SystemInit+0x64>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fcd4:	4b06      	ldr	r3, [pc, #24]	; (800fcf0 <SystemInit+0x64>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800fcda:	f000 f80d 	bl	800fcf8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800fcde:	4b03      	ldr	r3, [pc, #12]	; (800fcec <SystemInit+0x60>)
 800fce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fce4:	609a      	str	r2, [r3, #8]
#endif
}
 800fce6:	bf00      	nop
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	e000ed00 	.word	0xe000ed00
 800fcf0:	40023800 	.word	0x40023800
 800fcf4:	24003010 	.word	0x24003010

0800fcf8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	607b      	str	r3, [r7, #4]
 800fd02:	2300      	movs	r3, #0
 800fd04:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800fd06:	4b33      	ldr	r3, [pc, #204]	; (800fdd4 <SetSysClock+0xdc>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd0e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3301      	adds	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d103      	bne.n	800fd24 <SetSysClock+0x2c>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800fd22:	d1f0      	bne.n	800fd06 <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800fd24:	4b2b      	ldr	r3, [pc, #172]	; (800fdd4 <SetSysClock+0xdc>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 800fd30:	2301      	movs	r3, #1
 800fd32:	603b      	str	r3, [r7, #0]
 800fd34:	e001      	b.n	800fd3a <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800fd36:	2300      	movs	r3, #0
 800fd38:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d142      	bne.n	800fdc6 <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800fd40:	4a24      	ldr	r2, [pc, #144]	; (800fdd4 <SetSysClock+0xdc>)
 800fd42:	4b24      	ldr	r3, [pc, #144]	; (800fdd4 <SetSysClock+0xdc>)
 800fd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd4a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800fd4c:	4a22      	ldr	r2, [pc, #136]	; (800fdd8 <SetSysClock+0xe0>)
 800fd4e:	4b22      	ldr	r3, [pc, #136]	; (800fdd8 <SetSysClock+0xe0>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd56:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800fd58:	4a1e      	ldr	r2, [pc, #120]	; (800fdd4 <SetSysClock+0xdc>)
 800fd5a:	4b1e      	ldr	r3, [pc, #120]	; (800fdd4 <SetSysClock+0xdc>)
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800fd60:	4a1c      	ldr	r2, [pc, #112]	; (800fdd4 <SetSysClock+0xdc>)
 800fd62:	4b1c      	ldr	r3, [pc, #112]	; (800fdd4 <SetSysClock+0xdc>)
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd6a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800fd6c:	4a19      	ldr	r2, [pc, #100]	; (800fdd4 <SetSysClock+0xdc>)
 800fd6e:	4b19      	ldr	r3, [pc, #100]	; (800fdd4 <SetSysClock+0xdc>)
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800fd76:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800fd78:	4b16      	ldr	r3, [pc, #88]	; (800fdd4 <SetSysClock+0xdc>)
 800fd7a:	4a18      	ldr	r2, [pc, #96]	; (800fddc <SetSysClock+0xe4>)
 800fd7c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800fd7e:	4a15      	ldr	r2, [pc, #84]	; (800fdd4 <SetSysClock+0xdc>)
 800fd80:	4b14      	ldr	r3, [pc, #80]	; (800fdd4 <SetSysClock+0xdc>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd88:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800fd8a:	bf00      	nop
 800fd8c:	4b11      	ldr	r3, [pc, #68]	; (800fdd4 <SetSysClock+0xdc>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d0f9      	beq.n	800fd8c <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800fd98:	4b11      	ldr	r3, [pc, #68]	; (800fde0 <SetSysClock+0xe8>)
 800fd9a:	f240 7205 	movw	r2, #1797	; 0x705
 800fd9e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800fda0:	4a0c      	ldr	r2, [pc, #48]	; (800fdd4 <SetSysClock+0xdc>)
 800fda2:	4b0c      	ldr	r3, [pc, #48]	; (800fdd4 <SetSysClock+0xdc>)
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	f023 0303 	bic.w	r3, r3, #3
 800fdaa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800fdac:	4a09      	ldr	r2, [pc, #36]	; (800fdd4 <SetSysClock+0xdc>)
 800fdae:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <SetSysClock+0xdc>)
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	f043 0302 	orr.w	r3, r3, #2
 800fdb6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800fdb8:	bf00      	nop
 800fdba:	4b06      	ldr	r3, [pc, #24]	; (800fdd4 <SetSysClock+0xdc>)
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	f003 030c 	and.w	r3, r3, #12
 800fdc2:	2b08      	cmp	r3, #8
 800fdc4:	d1f9      	bne.n	800fdba <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800fdc6:	bf00      	nop
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	40023800 	.word	0x40023800
 800fdd8:	40007000 	.word	0x40007000
 800fddc:	07405419 	.word	0x07405419
 800fde0:	40023c00 	.word	0x40023c00

0800fde4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b087      	sub	sp, #28
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
	int div = 1;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800fdf4:	e004      	b.n	800fe00 <ts_itoa+0x1c>
		div *= base;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	fb02 f303 	mul.w	r3, r2, r3
 800fdfe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	fbb2 f2f3 	udiv	r2, r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d2f3      	bcs.n	800fdf6 <ts_itoa+0x12>

	while (div != 0)
 800fe0e:	e029      	b.n	800fe64 <ts_itoa+0x80>
	{
		int num = d/div;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe18:	613b      	str	r3, [r7, #16]
		d = d%div;
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe22:	fb02 f201 	mul.w	r2, r2, r1
 800fe26:	1a9b      	subs	r3, r3, r2
 800fe28:	60bb      	str	r3, [r7, #8]
		div /= base;
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	fb92 f3f3 	sdiv	r3, r2, r3
 800fe32:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2b09      	cmp	r3, #9
 800fe38:	dd0a      	ble.n	800fe50 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	1c59      	adds	r1, r3, #1
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	6011      	str	r1, [r2, #0]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	b2d2      	uxtb	r2, r2
 800fe48:	3237      	adds	r2, #55	; 0x37
 800fe4a:	b2d2      	uxtb	r2, r2
 800fe4c:	701a      	strb	r2, [r3, #0]
 800fe4e:	e009      	b.n	800fe64 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	1c59      	adds	r1, r3, #1
 800fe56:	68fa      	ldr	r2, [r7, #12]
 800fe58:	6011      	str	r1, [r2, #0]
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	b2d2      	uxtb	r2, r2
 800fe5e:	3230      	adds	r2, #48	; 0x30
 800fe60:	b2d2      	uxtb	r2, r2
 800fe62:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d1d2      	bne.n	800fe10 <ts_itoa+0x2c>
	}
}
 800fe6a:	bf00      	nop
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr

0800fe76 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b088      	sub	sp, #32
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	60f8      	str	r0, [r7, #12]
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800fe86:	e07d      	b.n	800ff84 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b25      	cmp	r3, #37	; 0x25
 800fe8e:	d171      	bne.n	800ff74 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	3301      	adds	r3, #1
 800fe94:	60bb      	str	r3, [r7, #8]
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	2b64      	cmp	r3, #100	; 0x64
 800fe9c:	d01e      	beq.n	800fedc <ts_formatstring+0x66>
 800fe9e:	2b64      	cmp	r3, #100	; 0x64
 800fea0:	dc06      	bgt.n	800feb0 <ts_formatstring+0x3a>
 800fea2:	2b58      	cmp	r3, #88	; 0x58
 800fea4:	d050      	beq.n	800ff48 <ts_formatstring+0xd2>
 800fea6:	2b63      	cmp	r3, #99	; 0x63
 800fea8:	d00e      	beq.n	800fec8 <ts_formatstring+0x52>
 800feaa:	2b25      	cmp	r3, #37	; 0x25
 800feac:	d058      	beq.n	800ff60 <ts_formatstring+0xea>
 800feae:	e05d      	b.n	800ff6c <ts_formatstring+0xf6>
 800feb0:	2b73      	cmp	r3, #115	; 0x73
 800feb2:	d02b      	beq.n	800ff0c <ts_formatstring+0x96>
 800feb4:	2b73      	cmp	r3, #115	; 0x73
 800feb6:	dc02      	bgt.n	800febe <ts_formatstring+0x48>
 800feb8:	2b69      	cmp	r3, #105	; 0x69
 800feba:	d00f      	beq.n	800fedc <ts_formatstring+0x66>
 800febc:	e056      	b.n	800ff6c <ts_formatstring+0xf6>
 800febe:	2b75      	cmp	r3, #117	; 0x75
 800fec0:	d037      	beq.n	800ff32 <ts_formatstring+0xbc>
 800fec2:	2b78      	cmp	r3, #120	; 0x78
 800fec4:	d040      	beq.n	800ff48 <ts_formatstring+0xd2>
 800fec6:	e051      	b.n	800ff6c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	60fa      	str	r2, [r7, #12]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	1d11      	adds	r1, r2, #4
 800fed2:	6079      	str	r1, [r7, #4]
 800fed4:	6812      	ldr	r2, [r2, #0]
 800fed6:	b2d2      	uxtb	r2, r2
 800fed8:	701a      	strb	r2, [r3, #0]
				break;
 800feda:	e047      	b.n	800ff6c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	1d1a      	adds	r2, r3, #4
 800fee0:	607a      	str	r2, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da07      	bge.n	800fefc <ts_formatstring+0x86>
					{
						val *= -1;
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	425b      	negs	r3, r3
 800fef0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	1c5a      	adds	r2, r3, #1
 800fef6:	60fa      	str	r2, [r7, #12]
 800fef8:	222d      	movs	r2, #45	; 0x2d
 800fefa:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800fefc:	69f9      	ldr	r1, [r7, #28]
 800fefe:	f107 030c 	add.w	r3, r7, #12
 800ff02:	220a      	movs	r2, #10
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff ff6d 	bl	800fde4 <ts_itoa>
				}
				break;
 800ff0a:	e02f      	b.n	800ff6c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	1d1a      	adds	r2, r3, #4
 800ff10:	607a      	str	r2, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800ff16:	e007      	b.n	800ff28 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	60fa      	str	r2, [r7, #12]
 800ff1e:	69ba      	ldr	r2, [r7, #24]
 800ff20:	1c51      	adds	r1, r2, #1
 800ff22:	61b9      	str	r1, [r7, #24]
 800ff24:	7812      	ldrb	r2, [r2, #0]
 800ff26:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1f3      	bne.n	800ff18 <ts_formatstring+0xa2>
					}
				}
				break;
 800ff30:	e01c      	b.n	800ff6c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	1d1a      	adds	r2, r3, #4
 800ff36:	607a      	str	r2, [r7, #4]
 800ff38:	6819      	ldr	r1, [r3, #0]
 800ff3a:	f107 030c 	add.w	r3, r7, #12
 800ff3e:	220a      	movs	r2, #10
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff ff4f 	bl	800fde4 <ts_itoa>
				break;
 800ff46:	e011      	b.n	800ff6c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	1d1a      	adds	r2, r3, #4
 800ff4c:	607a      	str	r2, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	4619      	mov	r1, r3
 800ff52:	f107 030c 	add.w	r3, r7, #12
 800ff56:	2210      	movs	r2, #16
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff ff43 	bl	800fde4 <ts_itoa>
				break;
 800ff5e:	e005      	b.n	800ff6c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	1c5a      	adds	r2, r3, #1
 800ff64:	60fa      	str	r2, [r7, #12]
 800ff66:	2225      	movs	r2, #37	; 0x25
 800ff68:	701a      	strb	r2, [r3, #0]
				  break;
 800ff6a:	bf00      	nop
			}
			fmt++;
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	60bb      	str	r3, [r7, #8]
 800ff72:	e007      	b.n	800ff84 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	60fa      	str	r2, [r7, #12]
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	1c51      	adds	r1, r2, #1
 800ff7e:	60b9      	str	r1, [r7, #8]
 800ff80:	7812      	ldrb	r2, [r2, #0]
 800ff82:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f47f af7d 	bne.w	800fe88 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	461a      	mov	r2, r3
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	1ad3      	subs	r3, r2, r3
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3720      	adds	r7, #32
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
	int length = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800ffb2:	e081      	b.n	80100b8 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	2b25      	cmp	r3, #37	; 0x25
 800ffba:	d177      	bne.n	80100ac <ts_formatlength+0x108>
		{
			++fmt;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	3b58      	subs	r3, #88	; 0x58
 800ffc8:	2b20      	cmp	r3, #32
 800ffca:	d86a      	bhi.n	80100a2 <ts_formatlength+0xfe>
 800ffcc:	a201      	add	r2, pc, #4	; (adr r2, 800ffd4 <ts_formatlength+0x30>)
 800ffce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd2:	bf00      	nop
 800ffd4:	08010095 	.word	0x08010095
 800ffd8:	080100a3 	.word	0x080100a3
 800ffdc:	080100a3 	.word	0x080100a3
 800ffe0:	080100a3 	.word	0x080100a3
 800ffe4:	080100a3 	.word	0x080100a3
 800ffe8:	080100a3 	.word	0x080100a3
 800ffec:	080100a3 	.word	0x080100a3
 800fff0:	080100a3 	.word	0x080100a3
 800fff4:	080100a3 	.word	0x080100a3
 800fff8:	080100a3 	.word	0x080100a3
 800fffc:	080100a3 	.word	0x080100a3
 8010000:	08010059 	.word	0x08010059
 8010004:	08010067 	.word	0x08010067
 8010008:	080100a3 	.word	0x080100a3
 801000c:	080100a3 	.word	0x080100a3
 8010010:	080100a3 	.word	0x080100a3
 8010014:	080100a3 	.word	0x080100a3
 8010018:	08010067 	.word	0x08010067
 801001c:	080100a3 	.word	0x080100a3
 8010020:	080100a3 	.word	0x080100a3
 8010024:	080100a3 	.word	0x080100a3
 8010028:	080100a3 	.word	0x080100a3
 801002c:	080100a3 	.word	0x080100a3
 8010030:	080100a3 	.word	0x080100a3
 8010034:	080100a3 	.word	0x080100a3
 8010038:	080100a3 	.word	0x080100a3
 801003c:	080100a3 	.word	0x080100a3
 8010040:	08010075 	.word	0x08010075
 8010044:	080100a3 	.word	0x080100a3
 8010048:	08010067 	.word	0x08010067
 801004c:	080100a3 	.word	0x080100a3
 8010050:	080100a3 	.word	0x080100a3
 8010054:	08010095 	.word	0x08010095
			{
			  case 'c':
		  		  va_arg(va, int);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	3304      	adds	r3, #4
 801005c:	603b      	str	r3, [r7, #0]
				  ++length;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	3301      	adds	r3, #1
 8010062:	60fb      	str	r3, [r7, #12]
				  break;
 8010064:	e025      	b.n	80100b2 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	330b      	adds	r3, #11
 801006a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	3304      	adds	r3, #4
 8010070:	603b      	str	r3, [r7, #0]
				  break;
 8010072:	e01e      	b.n	80100b2 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	1d1a      	adds	r2, r3, #4
 8010078:	603a      	str	r2, [r7, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 801007e:	e002      	b.n	8010086 <ts_formatlength+0xe2>
			  			  ++length;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	3301      	adds	r3, #1
 8010084:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	60ba      	str	r2, [r7, #8]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1f6      	bne.n	8010080 <ts_formatlength+0xdc>
			  	  }
				  break;
 8010092:	e00e      	b.n	80100b2 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	3308      	adds	r3, #8
 8010098:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	3304      	adds	r3, #4
 801009e:	603b      	str	r3, [r7, #0]
				  break;
 80100a0:	e007      	b.n	80100b2 <ts_formatlength+0x10e>
			  default:
				  ++length;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	3301      	adds	r3, #1
 80100a6:	60fb      	str	r3, [r7, #12]
				  break;
 80100a8:	bf00      	nop
 80100aa:	e002      	b.n	80100b2 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3301      	adds	r3, #1
 80100b0:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	3301      	adds	r3, #1
 80100b6:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f47f af79 	bne.w	800ffb4 <ts_formatlength+0x10>
	}
	return length;
 80100c2:	68fb      	ldr	r3, [r7, #12]
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80100d0:	b40f      	push	{r0, r1, r2, r3}
 80100d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
	int length = 0;
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80100de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80100e2:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100e8:	f7ff ff5c 	bl	800ffa4 <ts_formatlength>
 80100ec:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80100ee:	466b      	mov	r3, sp
 80100f0:	461e      	mov	r6, r3
		char buf[length];
 80100f2:	68f9      	ldr	r1, [r7, #12]
 80100f4:	1e4b      	subs	r3, r1, #1
 80100f6:	60bb      	str	r3, [r7, #8]
 80100f8:	460b      	mov	r3, r1
 80100fa:	461a      	mov	r2, r3
 80100fc:	f04f 0300 	mov.w	r3, #0
 8010100:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8010104:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8010108:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801010c:	460b      	mov	r3, r1
 801010e:	461a      	mov	r2, r3
 8010110:	f04f 0300 	mov.w	r3, #0
 8010114:	00dd      	lsls	r5, r3, #3
 8010116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801011a:	00d4      	lsls	r4, r2, #3
 801011c:	460b      	mov	r3, r1
 801011e:	3307      	adds	r3, #7
 8010120:	08db      	lsrs	r3, r3, #3
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	ebad 0d03 	sub.w	sp, sp, r3
 8010128:	466b      	mov	r3, sp
 801012a:	3300      	adds	r3, #0
 801012c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 801012e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010132:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fe9b 	bl	800fe76 <ts_formatstring>
 8010140:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	4619      	mov	r1, r3
 8010148:	2001      	movs	r0, #1
 801014a:	f7ff fd31 	bl	800fbb0 <_write>
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8010152:	68fb      	ldr	r3, [r7, #12]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801015e:	b004      	add	sp, #16
 8010160:	4770      	bx	lr

08010162 <abort>:
 8010162:	b508      	push	{r3, lr}
 8010164:	2006      	movs	r0, #6
 8010166:	f000 fac7 	bl	80106f8 <raise>
 801016a:	2001      	movs	r0, #1
 801016c:	f7ff fd1a 	bl	800fba4 <_exit>

08010170 <__sflush_r>:
 8010170:	898a      	ldrh	r2, [r1, #12]
 8010172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010176:	4605      	mov	r5, r0
 8010178:	0710      	lsls	r0, r2, #28
 801017a:	460c      	mov	r4, r1
 801017c:	d45a      	bmi.n	8010234 <__sflush_r+0xc4>
 801017e:	684b      	ldr	r3, [r1, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	dc05      	bgt.n	8010190 <__sflush_r+0x20>
 8010184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010186:	2b00      	cmp	r3, #0
 8010188:	dc02      	bgt.n	8010190 <__sflush_r+0x20>
 801018a:	2000      	movs	r0, #0
 801018c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010192:	2e00      	cmp	r6, #0
 8010194:	d0f9      	beq.n	801018a <__sflush_r+0x1a>
 8010196:	2300      	movs	r3, #0
 8010198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801019c:	682f      	ldr	r7, [r5, #0]
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	d033      	beq.n	801020a <__sflush_r+0x9a>
 80101a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101a4:	89a3      	ldrh	r3, [r4, #12]
 80101a6:	075a      	lsls	r2, r3, #29
 80101a8:	d505      	bpl.n	80101b6 <__sflush_r+0x46>
 80101aa:	6863      	ldr	r3, [r4, #4]
 80101ac:	1ac0      	subs	r0, r0, r3
 80101ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101b0:	b10b      	cbz	r3, 80101b6 <__sflush_r+0x46>
 80101b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101b4:	1ac0      	subs	r0, r0, r3
 80101b6:	2300      	movs	r3, #0
 80101b8:	4602      	mov	r2, r0
 80101ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101bc:	6a21      	ldr	r1, [r4, #32]
 80101be:	4628      	mov	r0, r5
 80101c0:	47b0      	blx	r6
 80101c2:	1c43      	adds	r3, r0, #1
 80101c4:	89a3      	ldrh	r3, [r4, #12]
 80101c6:	d106      	bne.n	80101d6 <__sflush_r+0x66>
 80101c8:	6829      	ldr	r1, [r5, #0]
 80101ca:	291d      	cmp	r1, #29
 80101cc:	d84b      	bhi.n	8010266 <__sflush_r+0xf6>
 80101ce:	4a2b      	ldr	r2, [pc, #172]	; (801027c <__sflush_r+0x10c>)
 80101d0:	40ca      	lsrs	r2, r1
 80101d2:	07d6      	lsls	r6, r2, #31
 80101d4:	d547      	bpl.n	8010266 <__sflush_r+0xf6>
 80101d6:	2200      	movs	r2, #0
 80101d8:	6062      	str	r2, [r4, #4]
 80101da:	04d9      	lsls	r1, r3, #19
 80101dc:	6922      	ldr	r2, [r4, #16]
 80101de:	6022      	str	r2, [r4, #0]
 80101e0:	d504      	bpl.n	80101ec <__sflush_r+0x7c>
 80101e2:	1c42      	adds	r2, r0, #1
 80101e4:	d101      	bne.n	80101ea <__sflush_r+0x7a>
 80101e6:	682b      	ldr	r3, [r5, #0]
 80101e8:	b903      	cbnz	r3, 80101ec <__sflush_r+0x7c>
 80101ea:	6560      	str	r0, [r4, #84]	; 0x54
 80101ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101ee:	602f      	str	r7, [r5, #0]
 80101f0:	2900      	cmp	r1, #0
 80101f2:	d0ca      	beq.n	801018a <__sflush_r+0x1a>
 80101f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101f8:	4299      	cmp	r1, r3
 80101fa:	d002      	beq.n	8010202 <__sflush_r+0x92>
 80101fc:	4628      	mov	r0, r5
 80101fe:	f000 f997 	bl	8010530 <_free_r>
 8010202:	2000      	movs	r0, #0
 8010204:	6360      	str	r0, [r4, #52]	; 0x34
 8010206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020a:	6a21      	ldr	r1, [r4, #32]
 801020c:	2301      	movs	r3, #1
 801020e:	4628      	mov	r0, r5
 8010210:	47b0      	blx	r6
 8010212:	1c41      	adds	r1, r0, #1
 8010214:	d1c6      	bne.n	80101a4 <__sflush_r+0x34>
 8010216:	682b      	ldr	r3, [r5, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d0c3      	beq.n	80101a4 <__sflush_r+0x34>
 801021c:	2b1d      	cmp	r3, #29
 801021e:	d001      	beq.n	8010224 <__sflush_r+0xb4>
 8010220:	2b16      	cmp	r3, #22
 8010222:	d101      	bne.n	8010228 <__sflush_r+0xb8>
 8010224:	602f      	str	r7, [r5, #0]
 8010226:	e7b0      	b.n	801018a <__sflush_r+0x1a>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010234:	690f      	ldr	r7, [r1, #16]
 8010236:	2f00      	cmp	r7, #0
 8010238:	d0a7      	beq.n	801018a <__sflush_r+0x1a>
 801023a:	0793      	lsls	r3, r2, #30
 801023c:	680e      	ldr	r6, [r1, #0]
 801023e:	bf08      	it	eq
 8010240:	694b      	ldreq	r3, [r1, #20]
 8010242:	600f      	str	r7, [r1, #0]
 8010244:	bf18      	it	ne
 8010246:	2300      	movne	r3, #0
 8010248:	eba6 0807 	sub.w	r8, r6, r7
 801024c:	608b      	str	r3, [r1, #8]
 801024e:	f1b8 0f00 	cmp.w	r8, #0
 8010252:	dd9a      	ble.n	801018a <__sflush_r+0x1a>
 8010254:	4643      	mov	r3, r8
 8010256:	463a      	mov	r2, r7
 8010258:	6a21      	ldr	r1, [r4, #32]
 801025a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801025c:	4628      	mov	r0, r5
 801025e:	47b0      	blx	r6
 8010260:	2800      	cmp	r0, #0
 8010262:	dc07      	bgt.n	8010274 <__sflush_r+0x104>
 8010264:	89a3      	ldrh	r3, [r4, #12]
 8010266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801026a:	81a3      	strh	r3, [r4, #12]
 801026c:	f04f 30ff 	mov.w	r0, #4294967295
 8010270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010274:	4407      	add	r7, r0
 8010276:	eba8 0800 	sub.w	r8, r8, r0
 801027a:	e7e8      	b.n	801024e <__sflush_r+0xde>
 801027c:	20400001 	.word	0x20400001

08010280 <_fflush_r>:
 8010280:	b538      	push	{r3, r4, r5, lr}
 8010282:	690b      	ldr	r3, [r1, #16]
 8010284:	4605      	mov	r5, r0
 8010286:	460c      	mov	r4, r1
 8010288:	b1db      	cbz	r3, 80102c2 <_fflush_r+0x42>
 801028a:	b118      	cbz	r0, 8010294 <_fflush_r+0x14>
 801028c:	6983      	ldr	r3, [r0, #24]
 801028e:	b90b      	cbnz	r3, 8010294 <_fflush_r+0x14>
 8010290:	f000 f872 	bl	8010378 <__sinit>
 8010294:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <_fflush_r+0x48>)
 8010296:	429c      	cmp	r4, r3
 8010298:	d109      	bne.n	80102ae <_fflush_r+0x2e>
 801029a:	686c      	ldr	r4, [r5, #4]
 801029c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102a0:	b17b      	cbz	r3, 80102c2 <_fflush_r+0x42>
 80102a2:	4621      	mov	r1, r4
 80102a4:	4628      	mov	r0, r5
 80102a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102aa:	f7ff bf61 	b.w	8010170 <__sflush_r>
 80102ae:	4b07      	ldr	r3, [pc, #28]	; (80102cc <_fflush_r+0x4c>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	d101      	bne.n	80102b8 <_fflush_r+0x38>
 80102b4:	68ac      	ldr	r4, [r5, #8]
 80102b6:	e7f1      	b.n	801029c <_fflush_r+0x1c>
 80102b8:	4b05      	ldr	r3, [pc, #20]	; (80102d0 <_fflush_r+0x50>)
 80102ba:	429c      	cmp	r4, r3
 80102bc:	bf08      	it	eq
 80102be:	68ec      	ldreq	r4, [r5, #12]
 80102c0:	e7ec      	b.n	801029c <_fflush_r+0x1c>
 80102c2:	2000      	movs	r0, #0
 80102c4:	bd38      	pop	{r3, r4, r5, pc}
 80102c6:	bf00      	nop
 80102c8:	08013bdc 	.word	0x08013bdc
 80102cc:	08013bfc 	.word	0x08013bfc
 80102d0:	08013bbc 	.word	0x08013bbc

080102d4 <fflush>:
 80102d4:	4601      	mov	r1, r0
 80102d6:	b920      	cbnz	r0, 80102e2 <fflush+0xe>
 80102d8:	4b04      	ldr	r3, [pc, #16]	; (80102ec <fflush+0x18>)
 80102da:	4905      	ldr	r1, [pc, #20]	; (80102f0 <fflush+0x1c>)
 80102dc:	6818      	ldr	r0, [r3, #0]
 80102de:	f000 b8b7 	b.w	8010450 <_fwalk_reent>
 80102e2:	4b04      	ldr	r3, [pc, #16]	; (80102f4 <fflush+0x20>)
 80102e4:	6818      	ldr	r0, [r3, #0]
 80102e6:	f7ff bfcb 	b.w	8010280 <_fflush_r>
 80102ea:	bf00      	nop
 80102ec:	08013c1c 	.word	0x08013c1c
 80102f0:	08010281 	.word	0x08010281
 80102f4:	2000000c 	.word	0x2000000c

080102f8 <_cleanup_r>:
 80102f8:	4901      	ldr	r1, [pc, #4]	; (8010300 <_cleanup_r+0x8>)
 80102fa:	f000 b8a9 	b.w	8010450 <_fwalk_reent>
 80102fe:	bf00      	nop
 8010300:	08010281 	.word	0x08010281

08010304 <std.isra.0>:
 8010304:	2300      	movs	r3, #0
 8010306:	b510      	push	{r4, lr}
 8010308:	4604      	mov	r4, r0
 801030a:	6003      	str	r3, [r0, #0]
 801030c:	6043      	str	r3, [r0, #4]
 801030e:	6083      	str	r3, [r0, #8]
 8010310:	8181      	strh	r1, [r0, #12]
 8010312:	6643      	str	r3, [r0, #100]	; 0x64
 8010314:	81c2      	strh	r2, [r0, #14]
 8010316:	6103      	str	r3, [r0, #16]
 8010318:	6143      	str	r3, [r0, #20]
 801031a:	6183      	str	r3, [r0, #24]
 801031c:	4619      	mov	r1, r3
 801031e:	2208      	movs	r2, #8
 8010320:	305c      	adds	r0, #92	; 0x5c
 8010322:	f000 f8fc 	bl	801051e <memset>
 8010326:	4b05      	ldr	r3, [pc, #20]	; (801033c <std.isra.0+0x38>)
 8010328:	6263      	str	r3, [r4, #36]	; 0x24
 801032a:	4b05      	ldr	r3, [pc, #20]	; (8010340 <std.isra.0+0x3c>)
 801032c:	62a3      	str	r3, [r4, #40]	; 0x28
 801032e:	4b05      	ldr	r3, [pc, #20]	; (8010344 <std.isra.0+0x40>)
 8010330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010332:	4b05      	ldr	r3, [pc, #20]	; (8010348 <std.isra.0+0x44>)
 8010334:	6224      	str	r4, [r4, #32]
 8010336:	6323      	str	r3, [r4, #48]	; 0x30
 8010338:	bd10      	pop	{r4, pc}
 801033a:	bf00      	nop
 801033c:	08010799 	.word	0x08010799
 8010340:	080107bb 	.word	0x080107bb
 8010344:	080107f3 	.word	0x080107f3
 8010348:	08010817 	.word	0x08010817

0801034c <__sfmoreglue>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	1e4a      	subs	r2, r1, #1
 8010350:	2568      	movs	r5, #104	; 0x68
 8010352:	4355      	muls	r5, r2
 8010354:	460e      	mov	r6, r1
 8010356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801035a:	f000 f937 	bl	80105cc <_malloc_r>
 801035e:	4604      	mov	r4, r0
 8010360:	b140      	cbz	r0, 8010374 <__sfmoreglue+0x28>
 8010362:	2100      	movs	r1, #0
 8010364:	e880 0042 	stmia.w	r0, {r1, r6}
 8010368:	300c      	adds	r0, #12
 801036a:	60a0      	str	r0, [r4, #8]
 801036c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010370:	f000 f8d5 	bl	801051e <memset>
 8010374:	4620      	mov	r0, r4
 8010376:	bd70      	pop	{r4, r5, r6, pc}

08010378 <__sinit>:
 8010378:	6983      	ldr	r3, [r0, #24]
 801037a:	b510      	push	{r4, lr}
 801037c:	4604      	mov	r4, r0
 801037e:	bb33      	cbnz	r3, 80103ce <__sinit+0x56>
 8010380:	6483      	str	r3, [r0, #72]	; 0x48
 8010382:	64c3      	str	r3, [r0, #76]	; 0x4c
 8010384:	6503      	str	r3, [r0, #80]	; 0x50
 8010386:	4b12      	ldr	r3, [pc, #72]	; (80103d0 <__sinit+0x58>)
 8010388:	4a12      	ldr	r2, [pc, #72]	; (80103d4 <__sinit+0x5c>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6282      	str	r2, [r0, #40]	; 0x28
 801038e:	4298      	cmp	r0, r3
 8010390:	bf04      	itt	eq
 8010392:	2301      	moveq	r3, #1
 8010394:	6183      	streq	r3, [r0, #24]
 8010396:	f000 f81f 	bl	80103d8 <__sfp>
 801039a:	6060      	str	r0, [r4, #4]
 801039c:	4620      	mov	r0, r4
 801039e:	f000 f81b 	bl	80103d8 <__sfp>
 80103a2:	60a0      	str	r0, [r4, #8]
 80103a4:	4620      	mov	r0, r4
 80103a6:	f000 f817 	bl	80103d8 <__sfp>
 80103aa:	2200      	movs	r2, #0
 80103ac:	60e0      	str	r0, [r4, #12]
 80103ae:	2104      	movs	r1, #4
 80103b0:	6860      	ldr	r0, [r4, #4]
 80103b2:	f7ff ffa7 	bl	8010304 <std.isra.0>
 80103b6:	2201      	movs	r2, #1
 80103b8:	2109      	movs	r1, #9
 80103ba:	68a0      	ldr	r0, [r4, #8]
 80103bc:	f7ff ffa2 	bl	8010304 <std.isra.0>
 80103c0:	2202      	movs	r2, #2
 80103c2:	2112      	movs	r1, #18
 80103c4:	68e0      	ldr	r0, [r4, #12]
 80103c6:	f7ff ff9d 	bl	8010304 <std.isra.0>
 80103ca:	2301      	movs	r3, #1
 80103cc:	61a3      	str	r3, [r4, #24]
 80103ce:	bd10      	pop	{r4, pc}
 80103d0:	08013c1c 	.word	0x08013c1c
 80103d4:	080102f9 	.word	0x080102f9

080103d8 <__sfp>:
 80103d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103da:	4b1c      	ldr	r3, [pc, #112]	; (801044c <__sfp+0x74>)
 80103dc:	681e      	ldr	r6, [r3, #0]
 80103de:	69b3      	ldr	r3, [r6, #24]
 80103e0:	4607      	mov	r7, r0
 80103e2:	b913      	cbnz	r3, 80103ea <__sfp+0x12>
 80103e4:	4630      	mov	r0, r6
 80103e6:	f7ff ffc7 	bl	8010378 <__sinit>
 80103ea:	3648      	adds	r6, #72	; 0x48
 80103ec:	68b4      	ldr	r4, [r6, #8]
 80103ee:	6873      	ldr	r3, [r6, #4]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	d503      	bpl.n	80103fc <__sfp+0x24>
 80103f4:	6833      	ldr	r3, [r6, #0]
 80103f6:	b133      	cbz	r3, 8010406 <__sfp+0x2e>
 80103f8:	6836      	ldr	r6, [r6, #0]
 80103fa:	e7f7      	b.n	80103ec <__sfp+0x14>
 80103fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010400:	b16d      	cbz	r5, 801041e <__sfp+0x46>
 8010402:	3468      	adds	r4, #104	; 0x68
 8010404:	e7f4      	b.n	80103f0 <__sfp+0x18>
 8010406:	2104      	movs	r1, #4
 8010408:	4638      	mov	r0, r7
 801040a:	f7ff ff9f 	bl	801034c <__sfmoreglue>
 801040e:	6030      	str	r0, [r6, #0]
 8010410:	2800      	cmp	r0, #0
 8010412:	d1f1      	bne.n	80103f8 <__sfp+0x20>
 8010414:	230c      	movs	r3, #12
 8010416:	603b      	str	r3, [r7, #0]
 8010418:	4604      	mov	r4, r0
 801041a:	4620      	mov	r0, r4
 801041c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010422:	81e3      	strh	r3, [r4, #14]
 8010424:	2301      	movs	r3, #1
 8010426:	81a3      	strh	r3, [r4, #12]
 8010428:	6665      	str	r5, [r4, #100]	; 0x64
 801042a:	6025      	str	r5, [r4, #0]
 801042c:	60a5      	str	r5, [r4, #8]
 801042e:	6065      	str	r5, [r4, #4]
 8010430:	6125      	str	r5, [r4, #16]
 8010432:	6165      	str	r5, [r4, #20]
 8010434:	61a5      	str	r5, [r4, #24]
 8010436:	2208      	movs	r2, #8
 8010438:	4629      	mov	r1, r5
 801043a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801043e:	f000 f86e 	bl	801051e <memset>
 8010442:	6365      	str	r5, [r4, #52]	; 0x34
 8010444:	63a5      	str	r5, [r4, #56]	; 0x38
 8010446:	64a5      	str	r5, [r4, #72]	; 0x48
 8010448:	64e5      	str	r5, [r4, #76]	; 0x4c
 801044a:	e7e6      	b.n	801041a <__sfp+0x42>
 801044c:	08013c1c 	.word	0x08013c1c

08010450 <_fwalk_reent>:
 8010450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010454:	4680      	mov	r8, r0
 8010456:	4689      	mov	r9, r1
 8010458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801045c:	2600      	movs	r6, #0
 801045e:	b914      	cbnz	r4, 8010466 <_fwalk_reent+0x16>
 8010460:	4630      	mov	r0, r6
 8010462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010466:	68a5      	ldr	r5, [r4, #8]
 8010468:	6867      	ldr	r7, [r4, #4]
 801046a:	3f01      	subs	r7, #1
 801046c:	d501      	bpl.n	8010472 <_fwalk_reent+0x22>
 801046e:	6824      	ldr	r4, [r4, #0]
 8010470:	e7f5      	b.n	801045e <_fwalk_reent+0xe>
 8010472:	89ab      	ldrh	r3, [r5, #12]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d907      	bls.n	8010488 <_fwalk_reent+0x38>
 8010478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801047c:	3301      	adds	r3, #1
 801047e:	d003      	beq.n	8010488 <_fwalk_reent+0x38>
 8010480:	4629      	mov	r1, r5
 8010482:	4640      	mov	r0, r8
 8010484:	47c8      	blx	r9
 8010486:	4306      	orrs	r6, r0
 8010488:	3568      	adds	r5, #104	; 0x68
 801048a:	e7ee      	b.n	801046a <_fwalk_reent+0x1a>

0801048c <__libc_init_array>:
 801048c:	b570      	push	{r4, r5, r6, lr}
 801048e:	4e0d      	ldr	r6, [pc, #52]	; (80104c4 <__libc_init_array+0x38>)
 8010490:	4c0d      	ldr	r4, [pc, #52]	; (80104c8 <__libc_init_array+0x3c>)
 8010492:	1ba4      	subs	r4, r4, r6
 8010494:	10a4      	asrs	r4, r4, #2
 8010496:	2500      	movs	r5, #0
 8010498:	42a5      	cmp	r5, r4
 801049a:	d109      	bne.n	80104b0 <__libc_init_array+0x24>
 801049c:	4e0b      	ldr	r6, [pc, #44]	; (80104cc <__libc_init_array+0x40>)
 801049e:	4c0c      	ldr	r4, [pc, #48]	; (80104d0 <__libc_init_array+0x44>)
 80104a0:	f000 fd4c 	bl	8010f3c <_init>
 80104a4:	1ba4      	subs	r4, r4, r6
 80104a6:	10a4      	asrs	r4, r4, #2
 80104a8:	2500      	movs	r5, #0
 80104aa:	42a5      	cmp	r5, r4
 80104ac:	d105      	bne.n	80104ba <__libc_init_array+0x2e>
 80104ae:	bd70      	pop	{r4, r5, r6, pc}
 80104b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104b4:	4798      	blx	r3
 80104b6:	3501      	adds	r5, #1
 80104b8:	e7ee      	b.n	8010498 <__libc_init_array+0xc>
 80104ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104be:	4798      	blx	r3
 80104c0:	3501      	adds	r5, #1
 80104c2:	e7f2      	b.n	80104aa <__libc_init_array+0x1e>
 80104c4:	08013c54 	.word	0x08013c54
 80104c8:	08013c54 	.word	0x08013c54
 80104cc:	08013c54 	.word	0x08013c54
 80104d0:	08013c58 	.word	0x08013c58

080104d4 <memcpy>:
 80104d4:	b510      	push	{r4, lr}
 80104d6:	1e43      	subs	r3, r0, #1
 80104d8:	440a      	add	r2, r1
 80104da:	4291      	cmp	r1, r2
 80104dc:	d100      	bne.n	80104e0 <memcpy+0xc>
 80104de:	bd10      	pop	{r4, pc}
 80104e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104e8:	e7f7      	b.n	80104da <memcpy+0x6>

080104ea <memmove>:
 80104ea:	4288      	cmp	r0, r1
 80104ec:	b510      	push	{r4, lr}
 80104ee:	eb01 0302 	add.w	r3, r1, r2
 80104f2:	d803      	bhi.n	80104fc <memmove+0x12>
 80104f4:	1e42      	subs	r2, r0, #1
 80104f6:	4299      	cmp	r1, r3
 80104f8:	d10c      	bne.n	8010514 <memmove+0x2a>
 80104fa:	bd10      	pop	{r4, pc}
 80104fc:	4298      	cmp	r0, r3
 80104fe:	d2f9      	bcs.n	80104f4 <memmove+0xa>
 8010500:	1881      	adds	r1, r0, r2
 8010502:	1ad2      	subs	r2, r2, r3
 8010504:	42d3      	cmn	r3, r2
 8010506:	d100      	bne.n	801050a <memmove+0x20>
 8010508:	bd10      	pop	{r4, pc}
 801050a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801050e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010512:	e7f7      	b.n	8010504 <memmove+0x1a>
 8010514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010518:	f802 4f01 	strb.w	r4, [r2, #1]!
 801051c:	e7eb      	b.n	80104f6 <memmove+0xc>

0801051e <memset>:
 801051e:	4402      	add	r2, r0
 8010520:	4603      	mov	r3, r0
 8010522:	4293      	cmp	r3, r2
 8010524:	d100      	bne.n	8010528 <memset+0xa>
 8010526:	4770      	bx	lr
 8010528:	f803 1b01 	strb.w	r1, [r3], #1
 801052c:	e7f9      	b.n	8010522 <memset+0x4>
	...

08010530 <_free_r>:
 8010530:	b538      	push	{r3, r4, r5, lr}
 8010532:	4605      	mov	r5, r0
 8010534:	2900      	cmp	r1, #0
 8010536:	d045      	beq.n	80105c4 <_free_r+0x94>
 8010538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801053c:	1f0c      	subs	r4, r1, #4
 801053e:	2b00      	cmp	r3, #0
 8010540:	bfb8      	it	lt
 8010542:	18e4      	addlt	r4, r4, r3
 8010544:	f000 f9d0 	bl	80108e8 <__malloc_lock>
 8010548:	4a1f      	ldr	r2, [pc, #124]	; (80105c8 <_free_r+0x98>)
 801054a:	6813      	ldr	r3, [r2, #0]
 801054c:	4610      	mov	r0, r2
 801054e:	b933      	cbnz	r3, 801055e <_free_r+0x2e>
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	6014      	str	r4, [r2, #0]
 8010554:	4628      	mov	r0, r5
 8010556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801055a:	f000 b9c6 	b.w	80108ea <__malloc_unlock>
 801055e:	42a3      	cmp	r3, r4
 8010560:	d90c      	bls.n	801057c <_free_r+0x4c>
 8010562:	6821      	ldr	r1, [r4, #0]
 8010564:	1862      	adds	r2, r4, r1
 8010566:	4293      	cmp	r3, r2
 8010568:	bf04      	itt	eq
 801056a:	681a      	ldreq	r2, [r3, #0]
 801056c:	685b      	ldreq	r3, [r3, #4]
 801056e:	6063      	str	r3, [r4, #4]
 8010570:	bf04      	itt	eq
 8010572:	1852      	addeq	r2, r2, r1
 8010574:	6022      	streq	r2, [r4, #0]
 8010576:	6004      	str	r4, [r0, #0]
 8010578:	e7ec      	b.n	8010554 <_free_r+0x24>
 801057a:	4613      	mov	r3, r2
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	b10a      	cbz	r2, 8010584 <_free_r+0x54>
 8010580:	42a2      	cmp	r2, r4
 8010582:	d9fa      	bls.n	801057a <_free_r+0x4a>
 8010584:	6819      	ldr	r1, [r3, #0]
 8010586:	1858      	adds	r0, r3, r1
 8010588:	42a0      	cmp	r0, r4
 801058a:	d10b      	bne.n	80105a4 <_free_r+0x74>
 801058c:	6820      	ldr	r0, [r4, #0]
 801058e:	4401      	add	r1, r0
 8010590:	1858      	adds	r0, r3, r1
 8010592:	4282      	cmp	r2, r0
 8010594:	6019      	str	r1, [r3, #0]
 8010596:	d1dd      	bne.n	8010554 <_free_r+0x24>
 8010598:	6810      	ldr	r0, [r2, #0]
 801059a:	6852      	ldr	r2, [r2, #4]
 801059c:	605a      	str	r2, [r3, #4]
 801059e:	4401      	add	r1, r0
 80105a0:	6019      	str	r1, [r3, #0]
 80105a2:	e7d7      	b.n	8010554 <_free_r+0x24>
 80105a4:	d902      	bls.n	80105ac <_free_r+0x7c>
 80105a6:	230c      	movs	r3, #12
 80105a8:	602b      	str	r3, [r5, #0]
 80105aa:	e7d3      	b.n	8010554 <_free_r+0x24>
 80105ac:	6820      	ldr	r0, [r4, #0]
 80105ae:	1821      	adds	r1, r4, r0
 80105b0:	428a      	cmp	r2, r1
 80105b2:	bf04      	itt	eq
 80105b4:	6811      	ldreq	r1, [r2, #0]
 80105b6:	6852      	ldreq	r2, [r2, #4]
 80105b8:	6062      	str	r2, [r4, #4]
 80105ba:	bf04      	itt	eq
 80105bc:	1809      	addeq	r1, r1, r0
 80105be:	6021      	streq	r1, [r4, #0]
 80105c0:	605c      	str	r4, [r3, #4]
 80105c2:	e7c7      	b.n	8010554 <_free_r+0x24>
 80105c4:	bd38      	pop	{r3, r4, r5, pc}
 80105c6:	bf00      	nop
 80105c8:	200005f8 	.word	0x200005f8

080105cc <_malloc_r>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	1ccd      	adds	r5, r1, #3
 80105d0:	f025 0503 	bic.w	r5, r5, #3
 80105d4:	3508      	adds	r5, #8
 80105d6:	2d0c      	cmp	r5, #12
 80105d8:	bf38      	it	cc
 80105da:	250c      	movcc	r5, #12
 80105dc:	2d00      	cmp	r5, #0
 80105de:	4606      	mov	r6, r0
 80105e0:	db01      	blt.n	80105e6 <_malloc_r+0x1a>
 80105e2:	42a9      	cmp	r1, r5
 80105e4:	d903      	bls.n	80105ee <_malloc_r+0x22>
 80105e6:	230c      	movs	r3, #12
 80105e8:	6033      	str	r3, [r6, #0]
 80105ea:	2000      	movs	r0, #0
 80105ec:	bd70      	pop	{r4, r5, r6, pc}
 80105ee:	f000 f97b 	bl	80108e8 <__malloc_lock>
 80105f2:	4a23      	ldr	r2, [pc, #140]	; (8010680 <_malloc_r+0xb4>)
 80105f4:	6814      	ldr	r4, [r2, #0]
 80105f6:	4621      	mov	r1, r4
 80105f8:	b991      	cbnz	r1, 8010620 <_malloc_r+0x54>
 80105fa:	4c22      	ldr	r4, [pc, #136]	; (8010684 <_malloc_r+0xb8>)
 80105fc:	6823      	ldr	r3, [r4, #0]
 80105fe:	b91b      	cbnz	r3, 8010608 <_malloc_r+0x3c>
 8010600:	4630      	mov	r0, r6
 8010602:	f000 f841 	bl	8010688 <_sbrk_r>
 8010606:	6020      	str	r0, [r4, #0]
 8010608:	4629      	mov	r1, r5
 801060a:	4630      	mov	r0, r6
 801060c:	f000 f83c 	bl	8010688 <_sbrk_r>
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	d126      	bne.n	8010662 <_malloc_r+0x96>
 8010614:	230c      	movs	r3, #12
 8010616:	6033      	str	r3, [r6, #0]
 8010618:	4630      	mov	r0, r6
 801061a:	f000 f966 	bl	80108ea <__malloc_unlock>
 801061e:	e7e4      	b.n	80105ea <_malloc_r+0x1e>
 8010620:	680b      	ldr	r3, [r1, #0]
 8010622:	1b5b      	subs	r3, r3, r5
 8010624:	d41a      	bmi.n	801065c <_malloc_r+0x90>
 8010626:	2b0b      	cmp	r3, #11
 8010628:	d90f      	bls.n	801064a <_malloc_r+0x7e>
 801062a:	600b      	str	r3, [r1, #0]
 801062c:	50cd      	str	r5, [r1, r3]
 801062e:	18cc      	adds	r4, r1, r3
 8010630:	4630      	mov	r0, r6
 8010632:	f000 f95a 	bl	80108ea <__malloc_unlock>
 8010636:	f104 000b 	add.w	r0, r4, #11
 801063a:	1d23      	adds	r3, r4, #4
 801063c:	f020 0007 	bic.w	r0, r0, #7
 8010640:	1ac3      	subs	r3, r0, r3
 8010642:	d01b      	beq.n	801067c <_malloc_r+0xb0>
 8010644:	425a      	negs	r2, r3
 8010646:	50e2      	str	r2, [r4, r3]
 8010648:	bd70      	pop	{r4, r5, r6, pc}
 801064a:	428c      	cmp	r4, r1
 801064c:	bf0d      	iteet	eq
 801064e:	6863      	ldreq	r3, [r4, #4]
 8010650:	684b      	ldrne	r3, [r1, #4]
 8010652:	6063      	strne	r3, [r4, #4]
 8010654:	6013      	streq	r3, [r2, #0]
 8010656:	bf18      	it	ne
 8010658:	460c      	movne	r4, r1
 801065a:	e7e9      	b.n	8010630 <_malloc_r+0x64>
 801065c:	460c      	mov	r4, r1
 801065e:	6849      	ldr	r1, [r1, #4]
 8010660:	e7ca      	b.n	80105f8 <_malloc_r+0x2c>
 8010662:	1cc4      	adds	r4, r0, #3
 8010664:	f024 0403 	bic.w	r4, r4, #3
 8010668:	42a0      	cmp	r0, r4
 801066a:	d005      	beq.n	8010678 <_malloc_r+0xac>
 801066c:	1a21      	subs	r1, r4, r0
 801066e:	4630      	mov	r0, r6
 8010670:	f000 f80a 	bl	8010688 <_sbrk_r>
 8010674:	3001      	adds	r0, #1
 8010676:	d0cd      	beq.n	8010614 <_malloc_r+0x48>
 8010678:	6025      	str	r5, [r4, #0]
 801067a:	e7d9      	b.n	8010630 <_malloc_r+0x64>
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	bf00      	nop
 8010680:	200005f8 	.word	0x200005f8
 8010684:	200005fc 	.word	0x200005fc

08010688 <_sbrk_r>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	4c06      	ldr	r4, [pc, #24]	; (80106a4 <_sbrk_r+0x1c>)
 801068c:	2300      	movs	r3, #0
 801068e:	4605      	mov	r5, r0
 8010690:	4608      	mov	r0, r1
 8010692:	6023      	str	r3, [r4, #0]
 8010694:	f7ff faa0 	bl	800fbd8 <_sbrk>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d102      	bne.n	80106a2 <_sbrk_r+0x1a>
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	b103      	cbz	r3, 80106a2 <_sbrk_r+0x1a>
 80106a0:	602b      	str	r3, [r5, #0]
 80106a2:	bd38      	pop	{r3, r4, r5, pc}
 80106a4:	200018fc 	.word	0x200018fc

080106a8 <_raise_r>:
 80106a8:	291f      	cmp	r1, #31
 80106aa:	b538      	push	{r3, r4, r5, lr}
 80106ac:	4604      	mov	r4, r0
 80106ae:	460d      	mov	r5, r1
 80106b0:	d904      	bls.n	80106bc <_raise_r+0x14>
 80106b2:	2316      	movs	r3, #22
 80106b4:	6003      	str	r3, [r0, #0]
 80106b6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106be:	b112      	cbz	r2, 80106c6 <_raise_r+0x1e>
 80106c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106c4:	b94b      	cbnz	r3, 80106da <_raise_r+0x32>
 80106c6:	4620      	mov	r0, r4
 80106c8:	f000 f830 	bl	801072c <_getpid_r>
 80106cc:	462a      	mov	r2, r5
 80106ce:	4601      	mov	r1, r0
 80106d0:	4620      	mov	r0, r4
 80106d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106d6:	f000 b817 	b.w	8010708 <_kill_r>
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d00a      	beq.n	80106f4 <_raise_r+0x4c>
 80106de:	1c59      	adds	r1, r3, #1
 80106e0:	d103      	bne.n	80106ea <_raise_r+0x42>
 80106e2:	2316      	movs	r3, #22
 80106e4:	6003      	str	r3, [r0, #0]
 80106e6:	2001      	movs	r0, #1
 80106e8:	bd38      	pop	{r3, r4, r5, pc}
 80106ea:	2400      	movs	r4, #0
 80106ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106f0:	4628      	mov	r0, r5
 80106f2:	4798      	blx	r3
 80106f4:	2000      	movs	r0, #0
 80106f6:	bd38      	pop	{r3, r4, r5, pc}

080106f8 <raise>:
 80106f8:	4b02      	ldr	r3, [pc, #8]	; (8010704 <raise+0xc>)
 80106fa:	4601      	mov	r1, r0
 80106fc:	6818      	ldr	r0, [r3, #0]
 80106fe:	f7ff bfd3 	b.w	80106a8 <_raise_r>
 8010702:	bf00      	nop
 8010704:	2000000c 	.word	0x2000000c

08010708 <_kill_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4c07      	ldr	r4, [pc, #28]	; (8010728 <_kill_r+0x20>)
 801070c:	2300      	movs	r3, #0
 801070e:	4605      	mov	r5, r0
 8010710:	4608      	mov	r0, r1
 8010712:	4611      	mov	r1, r2
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	f7ff fa33 	bl	800fb80 <_kill>
 801071a:	1c43      	adds	r3, r0, #1
 801071c:	d102      	bne.n	8010724 <_kill_r+0x1c>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	b103      	cbz	r3, 8010724 <_kill_r+0x1c>
 8010722:	602b      	str	r3, [r5, #0]
 8010724:	bd38      	pop	{r3, r4, r5, pc}
 8010726:	bf00      	nop
 8010728:	200018fc 	.word	0x200018fc

0801072c <_getpid_r>:
 801072c:	f7ff ba1a 	b.w	800fb64 <_getpid>

08010730 <sniprintf>:
 8010730:	b40c      	push	{r2, r3}
 8010732:	b530      	push	{r4, r5, lr}
 8010734:	4b17      	ldr	r3, [pc, #92]	; (8010794 <sniprintf+0x64>)
 8010736:	1e0c      	subs	r4, r1, #0
 8010738:	b09d      	sub	sp, #116	; 0x74
 801073a:	681d      	ldr	r5, [r3, #0]
 801073c:	da08      	bge.n	8010750 <sniprintf+0x20>
 801073e:	238b      	movs	r3, #139	; 0x8b
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	f04f 30ff 	mov.w	r0, #4294967295
 8010746:	b01d      	add	sp, #116	; 0x74
 8010748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801074c:	b002      	add	sp, #8
 801074e:	4770      	bx	lr
 8010750:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010754:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010758:	bf14      	ite	ne
 801075a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801075e:	4623      	moveq	r3, r4
 8010760:	9304      	str	r3, [sp, #16]
 8010762:	9307      	str	r3, [sp, #28]
 8010764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010768:	9002      	str	r0, [sp, #8]
 801076a:	9006      	str	r0, [sp, #24]
 801076c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010770:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010772:	ab21      	add	r3, sp, #132	; 0x84
 8010774:	a902      	add	r1, sp, #8
 8010776:	4628      	mov	r0, r5
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	f000 f913 	bl	80109a4 <_svfiprintf_r>
 801077e:	1c43      	adds	r3, r0, #1
 8010780:	bfbc      	itt	lt
 8010782:	238b      	movlt	r3, #139	; 0x8b
 8010784:	602b      	strlt	r3, [r5, #0]
 8010786:	2c00      	cmp	r4, #0
 8010788:	d0dd      	beq.n	8010746 <sniprintf+0x16>
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	2200      	movs	r2, #0
 801078e:	701a      	strb	r2, [r3, #0]
 8010790:	e7d9      	b.n	8010746 <sniprintf+0x16>
 8010792:	bf00      	nop
 8010794:	2000000c 	.word	0x2000000c

08010798 <__sread>:
 8010798:	b510      	push	{r4, lr}
 801079a:	460c      	mov	r4, r1
 801079c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a0:	f000 fb8a 	bl	8010eb8 <_read_r>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	bfab      	itete	ge
 80107a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107aa:	89a3      	ldrhlt	r3, [r4, #12]
 80107ac:	181b      	addge	r3, r3, r0
 80107ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107b2:	bfac      	ite	ge
 80107b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80107b6:	81a3      	strhlt	r3, [r4, #12]
 80107b8:	bd10      	pop	{r4, pc}

080107ba <__swrite>:
 80107ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107be:	461f      	mov	r7, r3
 80107c0:	898b      	ldrh	r3, [r1, #12]
 80107c2:	05db      	lsls	r3, r3, #23
 80107c4:	4605      	mov	r5, r0
 80107c6:	460c      	mov	r4, r1
 80107c8:	4616      	mov	r6, r2
 80107ca:	d505      	bpl.n	80107d8 <__swrite+0x1e>
 80107cc:	2302      	movs	r3, #2
 80107ce:	2200      	movs	r2, #0
 80107d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107d4:	f000 f876 	bl	80108c4 <_lseek_r>
 80107d8:	89a3      	ldrh	r3, [r4, #12]
 80107da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107e2:	81a3      	strh	r3, [r4, #12]
 80107e4:	4632      	mov	r2, r6
 80107e6:	463b      	mov	r3, r7
 80107e8:	4628      	mov	r0, r5
 80107ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ee:	f000 b847 	b.w	8010880 <_write_r>

080107f2 <__sseek>:
 80107f2:	b510      	push	{r4, lr}
 80107f4:	460c      	mov	r4, r1
 80107f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fa:	f000 f863 	bl	80108c4 <_lseek_r>
 80107fe:	1c43      	adds	r3, r0, #1
 8010800:	89a3      	ldrh	r3, [r4, #12]
 8010802:	bf15      	itete	ne
 8010804:	6560      	strne	r0, [r4, #84]	; 0x54
 8010806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801080a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801080e:	81a3      	strheq	r3, [r4, #12]
 8010810:	bf18      	it	ne
 8010812:	81a3      	strhne	r3, [r4, #12]
 8010814:	bd10      	pop	{r4, pc}

08010816 <__sclose>:
 8010816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801081a:	f000 b843 	b.w	80108a4 <_close_r>

0801081e <strncpy>:
 801081e:	b570      	push	{r4, r5, r6, lr}
 8010820:	4604      	mov	r4, r0
 8010822:	b902      	cbnz	r2, 8010826 <strncpy+0x8>
 8010824:	bd70      	pop	{r4, r5, r6, pc}
 8010826:	4623      	mov	r3, r4
 8010828:	f811 5b01 	ldrb.w	r5, [r1], #1
 801082c:	f803 5b01 	strb.w	r5, [r3], #1
 8010830:	1e56      	subs	r6, r2, #1
 8010832:	b91d      	cbnz	r5, 801083c <strncpy+0x1e>
 8010834:	4414      	add	r4, r2
 8010836:	42a3      	cmp	r3, r4
 8010838:	d103      	bne.n	8010842 <strncpy+0x24>
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	461c      	mov	r4, r3
 801083e:	4632      	mov	r2, r6
 8010840:	e7ef      	b.n	8010822 <strncpy+0x4>
 8010842:	f803 5b01 	strb.w	r5, [r3], #1
 8010846:	e7f6      	b.n	8010836 <strncpy+0x18>

08010848 <strstr>:
 8010848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801084a:	7803      	ldrb	r3, [r0, #0]
 801084c:	b133      	cbz	r3, 801085c <strstr+0x14>
 801084e:	4603      	mov	r3, r0
 8010850:	4618      	mov	r0, r3
 8010852:	1c5e      	adds	r6, r3, #1
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	b933      	cbnz	r3, 8010866 <strstr+0x1e>
 8010858:	4618      	mov	r0, r3
 801085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801085c:	780b      	ldrb	r3, [r1, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	bf18      	it	ne
 8010862:	2000      	movne	r0, #0
 8010864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010866:	1e4d      	subs	r5, r1, #1
 8010868:	1e44      	subs	r4, r0, #1
 801086a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801086e:	2a00      	cmp	r2, #0
 8010870:	d0f3      	beq.n	801085a <strstr+0x12>
 8010872:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8010876:	4297      	cmp	r7, r2
 8010878:	4633      	mov	r3, r6
 801087a:	d0f6      	beq.n	801086a <strstr+0x22>
 801087c:	e7e8      	b.n	8010850 <strstr+0x8>
	...

08010880 <_write_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4c07      	ldr	r4, [pc, #28]	; (80108a0 <_write_r+0x20>)
 8010884:	4605      	mov	r5, r0
 8010886:	4608      	mov	r0, r1
 8010888:	4611      	mov	r1, r2
 801088a:	2200      	movs	r2, #0
 801088c:	6022      	str	r2, [r4, #0]
 801088e:	461a      	mov	r2, r3
 8010890:	f7ff f98e 	bl	800fbb0 <_write>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_write_r+0x1e>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	b103      	cbz	r3, 801089e <_write_r+0x1e>
 801089c:	602b      	str	r3, [r5, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	200018fc 	.word	0x200018fc

080108a4 <_close_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4c06      	ldr	r4, [pc, #24]	; (80108c0 <_close_r+0x1c>)
 80108a8:	2300      	movs	r3, #0
 80108aa:	4605      	mov	r5, r0
 80108ac:	4608      	mov	r0, r1
 80108ae:	6023      	str	r3, [r4, #0]
 80108b0:	f7ff f9b2 	bl	800fc18 <_close>
 80108b4:	1c43      	adds	r3, r0, #1
 80108b6:	d102      	bne.n	80108be <_close_r+0x1a>
 80108b8:	6823      	ldr	r3, [r4, #0]
 80108ba:	b103      	cbz	r3, 80108be <_close_r+0x1a>
 80108bc:	602b      	str	r3, [r5, #0]
 80108be:	bd38      	pop	{r3, r4, r5, pc}
 80108c0:	200018fc 	.word	0x200018fc

080108c4 <_lseek_r>:
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	4c07      	ldr	r4, [pc, #28]	; (80108e4 <_lseek_r+0x20>)
 80108c8:	4605      	mov	r5, r0
 80108ca:	4608      	mov	r0, r1
 80108cc:	4611      	mov	r1, r2
 80108ce:	2200      	movs	r2, #0
 80108d0:	6022      	str	r2, [r4, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	f7ff f9b2 	bl	800fc3c <_lseek>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d102      	bne.n	80108e2 <_lseek_r+0x1e>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	b103      	cbz	r3, 80108e2 <_lseek_r+0x1e>
 80108e0:	602b      	str	r3, [r5, #0]
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	200018fc 	.word	0x200018fc

080108e8 <__malloc_lock>:
 80108e8:	4770      	bx	lr

080108ea <__malloc_unlock>:
 80108ea:	4770      	bx	lr

080108ec <__ssputs_r>:
 80108ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108f0:	688e      	ldr	r6, [r1, #8]
 80108f2:	429e      	cmp	r6, r3
 80108f4:	4682      	mov	sl, r0
 80108f6:	460c      	mov	r4, r1
 80108f8:	4691      	mov	r9, r2
 80108fa:	4698      	mov	r8, r3
 80108fc:	d835      	bhi.n	801096a <__ssputs_r+0x7e>
 80108fe:	898a      	ldrh	r2, [r1, #12]
 8010900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010904:	d031      	beq.n	801096a <__ssputs_r+0x7e>
 8010906:	6825      	ldr	r5, [r4, #0]
 8010908:	6909      	ldr	r1, [r1, #16]
 801090a:	1a6f      	subs	r7, r5, r1
 801090c:	6965      	ldr	r5, [r4, #20]
 801090e:	2302      	movs	r3, #2
 8010910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010914:	fb95 f5f3 	sdiv	r5, r5, r3
 8010918:	f108 0301 	add.w	r3, r8, #1
 801091c:	443b      	add	r3, r7
 801091e:	429d      	cmp	r5, r3
 8010920:	bf38      	it	cc
 8010922:	461d      	movcc	r5, r3
 8010924:	0553      	lsls	r3, r2, #21
 8010926:	d531      	bpl.n	801098c <__ssputs_r+0xa0>
 8010928:	4629      	mov	r1, r5
 801092a:	f7ff fe4f 	bl	80105cc <_malloc_r>
 801092e:	4606      	mov	r6, r0
 8010930:	b950      	cbnz	r0, 8010948 <__ssputs_r+0x5c>
 8010932:	230c      	movs	r3, #12
 8010934:	f8ca 3000 	str.w	r3, [sl]
 8010938:	89a3      	ldrh	r3, [r4, #12]
 801093a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	f04f 30ff 	mov.w	r0, #4294967295
 8010944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010948:	463a      	mov	r2, r7
 801094a:	6921      	ldr	r1, [r4, #16]
 801094c:	f7ff fdc2 	bl	80104d4 <memcpy>
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801095a:	81a3      	strh	r3, [r4, #12]
 801095c:	6126      	str	r6, [r4, #16]
 801095e:	6165      	str	r5, [r4, #20]
 8010960:	443e      	add	r6, r7
 8010962:	1bed      	subs	r5, r5, r7
 8010964:	6026      	str	r6, [r4, #0]
 8010966:	60a5      	str	r5, [r4, #8]
 8010968:	4646      	mov	r6, r8
 801096a:	4546      	cmp	r6, r8
 801096c:	bf28      	it	cs
 801096e:	4646      	movcs	r6, r8
 8010970:	4632      	mov	r2, r6
 8010972:	4649      	mov	r1, r9
 8010974:	6820      	ldr	r0, [r4, #0]
 8010976:	f7ff fdb8 	bl	80104ea <memmove>
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	1b9b      	subs	r3, r3, r6
 801097e:	60a3      	str	r3, [r4, #8]
 8010980:	6823      	ldr	r3, [r4, #0]
 8010982:	441e      	add	r6, r3
 8010984:	6026      	str	r6, [r4, #0]
 8010986:	2000      	movs	r0, #0
 8010988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801098c:	462a      	mov	r2, r5
 801098e:	f000 faa5 	bl	8010edc <_realloc_r>
 8010992:	4606      	mov	r6, r0
 8010994:	2800      	cmp	r0, #0
 8010996:	d1e1      	bne.n	801095c <__ssputs_r+0x70>
 8010998:	6921      	ldr	r1, [r4, #16]
 801099a:	4650      	mov	r0, sl
 801099c:	f7ff fdc8 	bl	8010530 <_free_r>
 80109a0:	e7c7      	b.n	8010932 <__ssputs_r+0x46>
	...

080109a4 <_svfiprintf_r>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	b09d      	sub	sp, #116	; 0x74
 80109aa:	4680      	mov	r8, r0
 80109ac:	9303      	str	r3, [sp, #12]
 80109ae:	898b      	ldrh	r3, [r1, #12]
 80109b0:	061c      	lsls	r4, r3, #24
 80109b2:	460d      	mov	r5, r1
 80109b4:	4616      	mov	r6, r2
 80109b6:	d50f      	bpl.n	80109d8 <_svfiprintf_r+0x34>
 80109b8:	690b      	ldr	r3, [r1, #16]
 80109ba:	b96b      	cbnz	r3, 80109d8 <_svfiprintf_r+0x34>
 80109bc:	2140      	movs	r1, #64	; 0x40
 80109be:	f7ff fe05 	bl	80105cc <_malloc_r>
 80109c2:	6028      	str	r0, [r5, #0]
 80109c4:	6128      	str	r0, [r5, #16]
 80109c6:	b928      	cbnz	r0, 80109d4 <_svfiprintf_r+0x30>
 80109c8:	230c      	movs	r3, #12
 80109ca:	f8c8 3000 	str.w	r3, [r8]
 80109ce:	f04f 30ff 	mov.w	r0, #4294967295
 80109d2:	e0c5      	b.n	8010b60 <_svfiprintf_r+0x1bc>
 80109d4:	2340      	movs	r3, #64	; 0x40
 80109d6:	616b      	str	r3, [r5, #20]
 80109d8:	2300      	movs	r3, #0
 80109da:	9309      	str	r3, [sp, #36]	; 0x24
 80109dc:	2320      	movs	r3, #32
 80109de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109e2:	2330      	movs	r3, #48	; 0x30
 80109e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109e8:	f04f 0b01 	mov.w	fp, #1
 80109ec:	4637      	mov	r7, r6
 80109ee:	463c      	mov	r4, r7
 80109f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d13c      	bne.n	8010a72 <_svfiprintf_r+0xce>
 80109f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80109fc:	d00b      	beq.n	8010a16 <_svfiprintf_r+0x72>
 80109fe:	4653      	mov	r3, sl
 8010a00:	4632      	mov	r2, r6
 8010a02:	4629      	mov	r1, r5
 8010a04:	4640      	mov	r0, r8
 8010a06:	f7ff ff71 	bl	80108ec <__ssputs_r>
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	f000 80a3 	beq.w	8010b56 <_svfiprintf_r+0x1b2>
 8010a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a12:	4453      	add	r3, sl
 8010a14:	9309      	str	r3, [sp, #36]	; 0x24
 8010a16:	783b      	ldrb	r3, [r7, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 809c 	beq.w	8010b56 <_svfiprintf_r+0x1b2>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f04f 32ff 	mov.w	r2, #4294967295
 8010a24:	9304      	str	r3, [sp, #16]
 8010a26:	9307      	str	r3, [sp, #28]
 8010a28:	9205      	str	r2, [sp, #20]
 8010a2a:	9306      	str	r3, [sp, #24]
 8010a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a30:	931a      	str	r3, [sp, #104]	; 0x68
 8010a32:	2205      	movs	r2, #5
 8010a34:	7821      	ldrb	r1, [r4, #0]
 8010a36:	4850      	ldr	r0, [pc, #320]	; (8010b78 <_svfiprintf_r+0x1d4>)
 8010a38:	f7ef fbd2 	bl	80001e0 <memchr>
 8010a3c:	1c67      	adds	r7, r4, #1
 8010a3e:	9b04      	ldr	r3, [sp, #16]
 8010a40:	b9d8      	cbnz	r0, 8010a7a <_svfiprintf_r+0xd6>
 8010a42:	06d9      	lsls	r1, r3, #27
 8010a44:	bf44      	itt	mi
 8010a46:	2220      	movmi	r2, #32
 8010a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a4c:	071a      	lsls	r2, r3, #28
 8010a4e:	bf44      	itt	mi
 8010a50:	222b      	movmi	r2, #43	; 0x2b
 8010a52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a56:	7822      	ldrb	r2, [r4, #0]
 8010a58:	2a2a      	cmp	r2, #42	; 0x2a
 8010a5a:	d016      	beq.n	8010a8a <_svfiprintf_r+0xe6>
 8010a5c:	9a07      	ldr	r2, [sp, #28]
 8010a5e:	2100      	movs	r1, #0
 8010a60:	200a      	movs	r0, #10
 8010a62:	4627      	mov	r7, r4
 8010a64:	3401      	adds	r4, #1
 8010a66:	783b      	ldrb	r3, [r7, #0]
 8010a68:	3b30      	subs	r3, #48	; 0x30
 8010a6a:	2b09      	cmp	r3, #9
 8010a6c:	d951      	bls.n	8010b12 <_svfiprintf_r+0x16e>
 8010a6e:	b1c9      	cbz	r1, 8010aa4 <_svfiprintf_r+0x100>
 8010a70:	e011      	b.n	8010a96 <_svfiprintf_r+0xf2>
 8010a72:	2b25      	cmp	r3, #37	; 0x25
 8010a74:	d0c0      	beq.n	80109f8 <_svfiprintf_r+0x54>
 8010a76:	4627      	mov	r7, r4
 8010a78:	e7b9      	b.n	80109ee <_svfiprintf_r+0x4a>
 8010a7a:	4a3f      	ldr	r2, [pc, #252]	; (8010b78 <_svfiprintf_r+0x1d4>)
 8010a7c:	1a80      	subs	r0, r0, r2
 8010a7e:	fa0b f000 	lsl.w	r0, fp, r0
 8010a82:	4318      	orrs	r0, r3
 8010a84:	9004      	str	r0, [sp, #16]
 8010a86:	463c      	mov	r4, r7
 8010a88:	e7d3      	b.n	8010a32 <_svfiprintf_r+0x8e>
 8010a8a:	9a03      	ldr	r2, [sp, #12]
 8010a8c:	1d11      	adds	r1, r2, #4
 8010a8e:	6812      	ldr	r2, [r2, #0]
 8010a90:	9103      	str	r1, [sp, #12]
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	db01      	blt.n	8010a9a <_svfiprintf_r+0xf6>
 8010a96:	9207      	str	r2, [sp, #28]
 8010a98:	e004      	b.n	8010aa4 <_svfiprintf_r+0x100>
 8010a9a:	4252      	negs	r2, r2
 8010a9c:	f043 0302 	orr.w	r3, r3, #2
 8010aa0:	9207      	str	r2, [sp, #28]
 8010aa2:	9304      	str	r3, [sp, #16]
 8010aa4:	783b      	ldrb	r3, [r7, #0]
 8010aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8010aa8:	d10e      	bne.n	8010ac8 <_svfiprintf_r+0x124>
 8010aaa:	787b      	ldrb	r3, [r7, #1]
 8010aac:	2b2a      	cmp	r3, #42	; 0x2a
 8010aae:	f107 0101 	add.w	r1, r7, #1
 8010ab2:	d132      	bne.n	8010b1a <_svfiprintf_r+0x176>
 8010ab4:	9b03      	ldr	r3, [sp, #12]
 8010ab6:	1d1a      	adds	r2, r3, #4
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	9203      	str	r2, [sp, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	bfb8      	it	lt
 8010ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ac4:	3702      	adds	r7, #2
 8010ac6:	9305      	str	r3, [sp, #20]
 8010ac8:	4c2c      	ldr	r4, [pc, #176]	; (8010b7c <_svfiprintf_r+0x1d8>)
 8010aca:	7839      	ldrb	r1, [r7, #0]
 8010acc:	2203      	movs	r2, #3
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f7ef fb86 	bl	80001e0 <memchr>
 8010ad4:	b138      	cbz	r0, 8010ae6 <_svfiprintf_r+0x142>
 8010ad6:	2340      	movs	r3, #64	; 0x40
 8010ad8:	1b00      	subs	r0, r0, r4
 8010ada:	fa03 f000 	lsl.w	r0, r3, r0
 8010ade:	9b04      	ldr	r3, [sp, #16]
 8010ae0:	4303      	orrs	r3, r0
 8010ae2:	9304      	str	r3, [sp, #16]
 8010ae4:	3701      	adds	r7, #1
 8010ae6:	7839      	ldrb	r1, [r7, #0]
 8010ae8:	4825      	ldr	r0, [pc, #148]	; (8010b80 <_svfiprintf_r+0x1dc>)
 8010aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aee:	2206      	movs	r2, #6
 8010af0:	1c7e      	adds	r6, r7, #1
 8010af2:	f7ef fb75 	bl	80001e0 <memchr>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d035      	beq.n	8010b66 <_svfiprintf_r+0x1c2>
 8010afa:	4b22      	ldr	r3, [pc, #136]	; (8010b84 <_svfiprintf_r+0x1e0>)
 8010afc:	b9fb      	cbnz	r3, 8010b3e <_svfiprintf_r+0x19a>
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	3307      	adds	r3, #7
 8010b02:	f023 0307 	bic.w	r3, r3, #7
 8010b06:	3308      	adds	r3, #8
 8010b08:	9303      	str	r3, [sp, #12]
 8010b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0c:	444b      	add	r3, r9
 8010b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8010b10:	e76c      	b.n	80109ec <_svfiprintf_r+0x48>
 8010b12:	fb00 3202 	mla	r2, r0, r2, r3
 8010b16:	2101      	movs	r1, #1
 8010b18:	e7a3      	b.n	8010a62 <_svfiprintf_r+0xbe>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	9305      	str	r3, [sp, #20]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	240a      	movs	r4, #10
 8010b22:	460f      	mov	r7, r1
 8010b24:	3101      	adds	r1, #1
 8010b26:	783a      	ldrb	r2, [r7, #0]
 8010b28:	3a30      	subs	r2, #48	; 0x30
 8010b2a:	2a09      	cmp	r2, #9
 8010b2c:	d903      	bls.n	8010b36 <_svfiprintf_r+0x192>
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d0ca      	beq.n	8010ac8 <_svfiprintf_r+0x124>
 8010b32:	9005      	str	r0, [sp, #20]
 8010b34:	e7c8      	b.n	8010ac8 <_svfiprintf_r+0x124>
 8010b36:	fb04 2000 	mla	r0, r4, r0, r2
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e7f1      	b.n	8010b22 <_svfiprintf_r+0x17e>
 8010b3e:	ab03      	add	r3, sp, #12
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	462a      	mov	r2, r5
 8010b44:	4b10      	ldr	r3, [pc, #64]	; (8010b88 <_svfiprintf_r+0x1e4>)
 8010b46:	a904      	add	r1, sp, #16
 8010b48:	4640      	mov	r0, r8
 8010b4a:	f3af 8000 	nop.w
 8010b4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010b52:	4681      	mov	r9, r0
 8010b54:	d1d9      	bne.n	8010b0a <_svfiprintf_r+0x166>
 8010b56:	89ab      	ldrh	r3, [r5, #12]
 8010b58:	065b      	lsls	r3, r3, #25
 8010b5a:	f53f af38 	bmi.w	80109ce <_svfiprintf_r+0x2a>
 8010b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b60:	b01d      	add	sp, #116	; 0x74
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b66:	ab03      	add	r3, sp, #12
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	462a      	mov	r2, r5
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <_svfiprintf_r+0x1e4>)
 8010b6e:	a904      	add	r1, sp, #16
 8010b70:	4640      	mov	r0, r8
 8010b72:	f000 f881 	bl	8010c78 <_printf_i>
 8010b76:	e7ea      	b.n	8010b4e <_svfiprintf_r+0x1aa>
 8010b78:	08013c20 	.word	0x08013c20
 8010b7c:	08013c26 	.word	0x08013c26
 8010b80:	08013c2a 	.word	0x08013c2a
 8010b84:	00000000 	.word	0x00000000
 8010b88:	080108ed 	.word	0x080108ed

08010b8c <_printf_common>:
 8010b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b90:	4691      	mov	r9, r2
 8010b92:	461f      	mov	r7, r3
 8010b94:	688a      	ldr	r2, [r1, #8]
 8010b96:	690b      	ldr	r3, [r1, #16]
 8010b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	bfb8      	it	lt
 8010ba0:	4613      	movlt	r3, r2
 8010ba2:	f8c9 3000 	str.w	r3, [r9]
 8010ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010baa:	4606      	mov	r6, r0
 8010bac:	460c      	mov	r4, r1
 8010bae:	b112      	cbz	r2, 8010bb6 <_printf_common+0x2a>
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	f8c9 3000 	str.w	r3, [r9]
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	0699      	lsls	r1, r3, #26
 8010bba:	bf42      	ittt	mi
 8010bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010bc0:	3302      	addmi	r3, #2
 8010bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8010bc6:	6825      	ldr	r5, [r4, #0]
 8010bc8:	f015 0506 	ands.w	r5, r5, #6
 8010bcc:	d107      	bne.n	8010bde <_printf_common+0x52>
 8010bce:	f104 0a19 	add.w	sl, r4, #25
 8010bd2:	68e3      	ldr	r3, [r4, #12]
 8010bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	429d      	cmp	r5, r3
 8010bdc:	db29      	blt.n	8010c32 <_printf_common+0xa6>
 8010bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010be2:	6822      	ldr	r2, [r4, #0]
 8010be4:	3300      	adds	r3, #0
 8010be6:	bf18      	it	ne
 8010be8:	2301      	movne	r3, #1
 8010bea:	0692      	lsls	r2, r2, #26
 8010bec:	d42e      	bmi.n	8010c4c <_printf_common+0xc0>
 8010bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	47c0      	blx	r8
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d021      	beq.n	8010c40 <_printf_common+0xb4>
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	68e5      	ldr	r5, [r4, #12]
 8010c00:	f8d9 2000 	ldr.w	r2, [r9]
 8010c04:	f003 0306 	and.w	r3, r3, #6
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	bf08      	it	eq
 8010c0c:	1aad      	subeq	r5, r5, r2
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	bf0c      	ite	eq
 8010c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c18:	2500      	movne	r5, #0
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	bfc4      	itt	gt
 8010c1e:	1a9b      	subgt	r3, r3, r2
 8010c20:	18ed      	addgt	r5, r5, r3
 8010c22:	f04f 0900 	mov.w	r9, #0
 8010c26:	341a      	adds	r4, #26
 8010c28:	454d      	cmp	r5, r9
 8010c2a:	d11b      	bne.n	8010c64 <_printf_common+0xd8>
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c32:	2301      	movs	r3, #1
 8010c34:	4652      	mov	r2, sl
 8010c36:	4639      	mov	r1, r7
 8010c38:	4630      	mov	r0, r6
 8010c3a:	47c0      	blx	r8
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d103      	bne.n	8010c48 <_printf_common+0xbc>
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c48:	3501      	adds	r5, #1
 8010c4a:	e7c2      	b.n	8010bd2 <_printf_common+0x46>
 8010c4c:	18e1      	adds	r1, r4, r3
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	2030      	movs	r0, #48	; 0x30
 8010c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c56:	4422      	add	r2, r4
 8010c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c60:	3302      	adds	r3, #2
 8010c62:	e7c4      	b.n	8010bee <_printf_common+0x62>
 8010c64:	2301      	movs	r3, #1
 8010c66:	4622      	mov	r2, r4
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	47c0      	blx	r8
 8010c6e:	3001      	adds	r0, #1
 8010c70:	d0e6      	beq.n	8010c40 <_printf_common+0xb4>
 8010c72:	f109 0901 	add.w	r9, r9, #1
 8010c76:	e7d7      	b.n	8010c28 <_printf_common+0x9c>

08010c78 <_printf_i>:
 8010c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c7c:	4617      	mov	r7, r2
 8010c7e:	7e0a      	ldrb	r2, [r1, #24]
 8010c80:	b085      	sub	sp, #20
 8010c82:	2a6e      	cmp	r2, #110	; 0x6e
 8010c84:	4698      	mov	r8, r3
 8010c86:	4606      	mov	r6, r0
 8010c88:	460c      	mov	r4, r1
 8010c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8010c90:	f000 80bc 	beq.w	8010e0c <_printf_i+0x194>
 8010c94:	d81a      	bhi.n	8010ccc <_printf_i+0x54>
 8010c96:	2a63      	cmp	r2, #99	; 0x63
 8010c98:	d02e      	beq.n	8010cf8 <_printf_i+0x80>
 8010c9a:	d80a      	bhi.n	8010cb2 <_printf_i+0x3a>
 8010c9c:	2a00      	cmp	r2, #0
 8010c9e:	f000 80c8 	beq.w	8010e32 <_printf_i+0x1ba>
 8010ca2:	2a58      	cmp	r2, #88	; 0x58
 8010ca4:	f000 808a 	beq.w	8010dbc <_printf_i+0x144>
 8010ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8010cb0:	e02a      	b.n	8010d08 <_printf_i+0x90>
 8010cb2:	2a64      	cmp	r2, #100	; 0x64
 8010cb4:	d001      	beq.n	8010cba <_printf_i+0x42>
 8010cb6:	2a69      	cmp	r2, #105	; 0x69
 8010cb8:	d1f6      	bne.n	8010ca8 <_printf_i+0x30>
 8010cba:	6821      	ldr	r1, [r4, #0]
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8010cc2:	d023      	beq.n	8010d0c <_printf_i+0x94>
 8010cc4:	1d11      	adds	r1, r2, #4
 8010cc6:	6019      	str	r1, [r3, #0]
 8010cc8:	6813      	ldr	r3, [r2, #0]
 8010cca:	e027      	b.n	8010d1c <_printf_i+0xa4>
 8010ccc:	2a73      	cmp	r2, #115	; 0x73
 8010cce:	f000 80b4 	beq.w	8010e3a <_printf_i+0x1c2>
 8010cd2:	d808      	bhi.n	8010ce6 <_printf_i+0x6e>
 8010cd4:	2a6f      	cmp	r2, #111	; 0x6f
 8010cd6:	d02a      	beq.n	8010d2e <_printf_i+0xb6>
 8010cd8:	2a70      	cmp	r2, #112	; 0x70
 8010cda:	d1e5      	bne.n	8010ca8 <_printf_i+0x30>
 8010cdc:	680a      	ldr	r2, [r1, #0]
 8010cde:	f042 0220 	orr.w	r2, r2, #32
 8010ce2:	600a      	str	r2, [r1, #0]
 8010ce4:	e003      	b.n	8010cee <_printf_i+0x76>
 8010ce6:	2a75      	cmp	r2, #117	; 0x75
 8010ce8:	d021      	beq.n	8010d2e <_printf_i+0xb6>
 8010cea:	2a78      	cmp	r2, #120	; 0x78
 8010cec:	d1dc      	bne.n	8010ca8 <_printf_i+0x30>
 8010cee:	2278      	movs	r2, #120	; 0x78
 8010cf0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010cf4:	496e      	ldr	r1, [pc, #440]	; (8010eb0 <_printf_i+0x238>)
 8010cf6:	e064      	b.n	8010dc2 <_printf_i+0x14a>
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8010cfe:	1d11      	adds	r1, r2, #4
 8010d00:	6019      	str	r1, [r3, #0]
 8010d02:	6813      	ldr	r3, [r2, #0]
 8010d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e0a3      	b.n	8010e54 <_printf_i+0x1dc>
 8010d0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010d10:	f102 0104 	add.w	r1, r2, #4
 8010d14:	6019      	str	r1, [r3, #0]
 8010d16:	d0d7      	beq.n	8010cc8 <_printf_i+0x50>
 8010d18:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	da03      	bge.n	8010d28 <_printf_i+0xb0>
 8010d20:	222d      	movs	r2, #45	; 0x2d
 8010d22:	425b      	negs	r3, r3
 8010d24:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d28:	4962      	ldr	r1, [pc, #392]	; (8010eb4 <_printf_i+0x23c>)
 8010d2a:	220a      	movs	r2, #10
 8010d2c:	e017      	b.n	8010d5e <_printf_i+0xe6>
 8010d2e:	6820      	ldr	r0, [r4, #0]
 8010d30:	6819      	ldr	r1, [r3, #0]
 8010d32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010d36:	d003      	beq.n	8010d40 <_printf_i+0xc8>
 8010d38:	1d08      	adds	r0, r1, #4
 8010d3a:	6018      	str	r0, [r3, #0]
 8010d3c:	680b      	ldr	r3, [r1, #0]
 8010d3e:	e006      	b.n	8010d4e <_printf_i+0xd6>
 8010d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d44:	f101 0004 	add.w	r0, r1, #4
 8010d48:	6018      	str	r0, [r3, #0]
 8010d4a:	d0f7      	beq.n	8010d3c <_printf_i+0xc4>
 8010d4c:	880b      	ldrh	r3, [r1, #0]
 8010d4e:	4959      	ldr	r1, [pc, #356]	; (8010eb4 <_printf_i+0x23c>)
 8010d50:	2a6f      	cmp	r2, #111	; 0x6f
 8010d52:	bf14      	ite	ne
 8010d54:	220a      	movne	r2, #10
 8010d56:	2208      	moveq	r2, #8
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8010d5e:	6865      	ldr	r5, [r4, #4]
 8010d60:	60a5      	str	r5, [r4, #8]
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	f2c0 809c 	blt.w	8010ea0 <_printf_i+0x228>
 8010d68:	6820      	ldr	r0, [r4, #0]
 8010d6a:	f020 0004 	bic.w	r0, r0, #4
 8010d6e:	6020      	str	r0, [r4, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d13f      	bne.n	8010df4 <_printf_i+0x17c>
 8010d74:	2d00      	cmp	r5, #0
 8010d76:	f040 8095 	bne.w	8010ea4 <_printf_i+0x22c>
 8010d7a:	4675      	mov	r5, lr
 8010d7c:	2a08      	cmp	r2, #8
 8010d7e:	d10b      	bne.n	8010d98 <_printf_i+0x120>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	07da      	lsls	r2, r3, #31
 8010d84:	d508      	bpl.n	8010d98 <_printf_i+0x120>
 8010d86:	6923      	ldr	r3, [r4, #16]
 8010d88:	6862      	ldr	r2, [r4, #4]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	bfde      	ittt	le
 8010d8e:	2330      	movle	r3, #48	; 0x30
 8010d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d98:	ebae 0305 	sub.w	r3, lr, r5
 8010d9c:	6123      	str	r3, [r4, #16]
 8010d9e:	f8cd 8000 	str.w	r8, [sp]
 8010da2:	463b      	mov	r3, r7
 8010da4:	aa03      	add	r2, sp, #12
 8010da6:	4621      	mov	r1, r4
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff feef 	bl	8010b8c <_printf_common>
 8010dae:	3001      	adds	r0, #1
 8010db0:	d155      	bne.n	8010e5e <_printf_i+0x1e6>
 8010db2:	f04f 30ff 	mov.w	r0, #4294967295
 8010db6:	b005      	add	sp, #20
 8010db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dbc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8010dc0:	493c      	ldr	r1, [pc, #240]	; (8010eb4 <_printf_i+0x23c>)
 8010dc2:	6822      	ldr	r2, [r4, #0]
 8010dc4:	6818      	ldr	r0, [r3, #0]
 8010dc6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010dca:	f100 0504 	add.w	r5, r0, #4
 8010dce:	601d      	str	r5, [r3, #0]
 8010dd0:	d001      	beq.n	8010dd6 <_printf_i+0x15e>
 8010dd2:	6803      	ldr	r3, [r0, #0]
 8010dd4:	e002      	b.n	8010ddc <_printf_i+0x164>
 8010dd6:	0655      	lsls	r5, r2, #25
 8010dd8:	d5fb      	bpl.n	8010dd2 <_printf_i+0x15a>
 8010dda:	8803      	ldrh	r3, [r0, #0]
 8010ddc:	07d0      	lsls	r0, r2, #31
 8010dde:	bf44      	itt	mi
 8010de0:	f042 0220 	orrmi.w	r2, r2, #32
 8010de4:	6022      	strmi	r2, [r4, #0]
 8010de6:	b91b      	cbnz	r3, 8010df0 <_printf_i+0x178>
 8010de8:	6822      	ldr	r2, [r4, #0]
 8010dea:	f022 0220 	bic.w	r2, r2, #32
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	2210      	movs	r2, #16
 8010df2:	e7b1      	b.n	8010d58 <_printf_i+0xe0>
 8010df4:	4675      	mov	r5, lr
 8010df6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dfa:	fb02 3310 	mls	r3, r2, r0, r3
 8010dfe:	5ccb      	ldrb	r3, [r1, r3]
 8010e00:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e04:	4603      	mov	r3, r0
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d1f5      	bne.n	8010df6 <_printf_i+0x17e>
 8010e0a:	e7b7      	b.n	8010d7c <_printf_i+0x104>
 8010e0c:	6808      	ldr	r0, [r1, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	6949      	ldr	r1, [r1, #20]
 8010e12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010e16:	d004      	beq.n	8010e22 <_printf_i+0x1aa>
 8010e18:	1d10      	adds	r0, r2, #4
 8010e1a:	6018      	str	r0, [r3, #0]
 8010e1c:	6813      	ldr	r3, [r2, #0]
 8010e1e:	6019      	str	r1, [r3, #0]
 8010e20:	e007      	b.n	8010e32 <_printf_i+0x1ba>
 8010e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010e26:	f102 0004 	add.w	r0, r2, #4
 8010e2a:	6018      	str	r0, [r3, #0]
 8010e2c:	6813      	ldr	r3, [r2, #0]
 8010e2e:	d0f6      	beq.n	8010e1e <_printf_i+0x1a6>
 8010e30:	8019      	strh	r1, [r3, #0]
 8010e32:	2300      	movs	r3, #0
 8010e34:	6123      	str	r3, [r4, #16]
 8010e36:	4675      	mov	r5, lr
 8010e38:	e7b1      	b.n	8010d9e <_printf_i+0x126>
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	1d11      	adds	r1, r2, #4
 8010e3e:	6019      	str	r1, [r3, #0]
 8010e40:	6815      	ldr	r5, [r2, #0]
 8010e42:	6862      	ldr	r2, [r4, #4]
 8010e44:	2100      	movs	r1, #0
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7ef f9ca 	bl	80001e0 <memchr>
 8010e4c:	b108      	cbz	r0, 8010e52 <_printf_i+0x1da>
 8010e4e:	1b40      	subs	r0, r0, r5
 8010e50:	6060      	str	r0, [r4, #4]
 8010e52:	6863      	ldr	r3, [r4, #4]
 8010e54:	6123      	str	r3, [r4, #16]
 8010e56:	2300      	movs	r3, #0
 8010e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e5c:	e79f      	b.n	8010d9e <_printf_i+0x126>
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	462a      	mov	r2, r5
 8010e62:	4639      	mov	r1, r7
 8010e64:	4630      	mov	r0, r6
 8010e66:	47c0      	blx	r8
 8010e68:	3001      	adds	r0, #1
 8010e6a:	d0a2      	beq.n	8010db2 <_printf_i+0x13a>
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	079b      	lsls	r3, r3, #30
 8010e70:	d507      	bpl.n	8010e82 <_printf_i+0x20a>
 8010e72:	2500      	movs	r5, #0
 8010e74:	f104 0919 	add.w	r9, r4, #25
 8010e78:	68e3      	ldr	r3, [r4, #12]
 8010e7a:	9a03      	ldr	r2, [sp, #12]
 8010e7c:	1a9b      	subs	r3, r3, r2
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	db05      	blt.n	8010e8e <_printf_i+0x216>
 8010e82:	68e0      	ldr	r0, [r4, #12]
 8010e84:	9b03      	ldr	r3, [sp, #12]
 8010e86:	4298      	cmp	r0, r3
 8010e88:	bfb8      	it	lt
 8010e8a:	4618      	movlt	r0, r3
 8010e8c:	e793      	b.n	8010db6 <_printf_i+0x13e>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	464a      	mov	r2, r9
 8010e92:	4639      	mov	r1, r7
 8010e94:	4630      	mov	r0, r6
 8010e96:	47c0      	blx	r8
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d08a      	beq.n	8010db2 <_printf_i+0x13a>
 8010e9c:	3501      	adds	r5, #1
 8010e9e:	e7eb      	b.n	8010e78 <_printf_i+0x200>
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1a7      	bne.n	8010df4 <_printf_i+0x17c>
 8010ea4:	780b      	ldrb	r3, [r1, #0]
 8010ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010eae:	e765      	b.n	8010d7c <_printf_i+0x104>
 8010eb0:	08013c42 	.word	0x08013c42
 8010eb4:	08013c31 	.word	0x08013c31

08010eb8 <_read_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4c07      	ldr	r4, [pc, #28]	; (8010ed8 <_read_r+0x20>)
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	4608      	mov	r0, r1
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6022      	str	r2, [r4, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f7fe fecc 	bl	800fc64 <_read>
 8010ecc:	1c43      	adds	r3, r0, #1
 8010ece:	d102      	bne.n	8010ed6 <_read_r+0x1e>
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	b103      	cbz	r3, 8010ed6 <_read_r+0x1e>
 8010ed4:	602b      	str	r3, [r5, #0]
 8010ed6:	bd38      	pop	{r3, r4, r5, pc}
 8010ed8:	200018fc 	.word	0x200018fc

08010edc <_realloc_r>:
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	4607      	mov	r7, r0
 8010ee0:	4614      	mov	r4, r2
 8010ee2:	460e      	mov	r6, r1
 8010ee4:	b921      	cbnz	r1, 8010ef0 <_realloc_r+0x14>
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010eec:	f7ff bb6e 	b.w	80105cc <_malloc_r>
 8010ef0:	b922      	cbnz	r2, 8010efc <_realloc_r+0x20>
 8010ef2:	f7ff fb1d 	bl	8010530 <_free_r>
 8010ef6:	4625      	mov	r5, r4
 8010ef8:	4628      	mov	r0, r5
 8010efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010efc:	f000 f814 	bl	8010f28 <_malloc_usable_size_r>
 8010f00:	4284      	cmp	r4, r0
 8010f02:	d90f      	bls.n	8010f24 <_realloc_r+0x48>
 8010f04:	4621      	mov	r1, r4
 8010f06:	4638      	mov	r0, r7
 8010f08:	f7ff fb60 	bl	80105cc <_malloc_r>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d0f2      	beq.n	8010ef8 <_realloc_r+0x1c>
 8010f12:	4631      	mov	r1, r6
 8010f14:	4622      	mov	r2, r4
 8010f16:	f7ff fadd 	bl	80104d4 <memcpy>
 8010f1a:	4631      	mov	r1, r6
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f7ff fb07 	bl	8010530 <_free_r>
 8010f22:	e7e9      	b.n	8010ef8 <_realloc_r+0x1c>
 8010f24:	4635      	mov	r5, r6
 8010f26:	e7e7      	b.n	8010ef8 <_realloc_r+0x1c>

08010f28 <_malloc_usable_size_r>:
 8010f28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	f1a0 0004 	sub.w	r0, r0, #4
 8010f32:	bfbc      	itt	lt
 8010f34:	580b      	ldrlt	r3, [r1, r0]
 8010f36:	18c0      	addlt	r0, r0, r3
 8010f38:	4770      	bx	lr
	...

08010f3c <_init>:
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	bf00      	nop
 8010f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f42:	bc08      	pop	{r3}
 8010f44:	469e      	mov	lr, r3
 8010f46:	4770      	bx	lr

08010f48 <_fini>:
 8010f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4a:	bf00      	nop
 8010f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f4e:	bc08      	pop	{r3}
 8010f50:	469e      	mov	lr, r3
 8010f52:	4770      	bx	lr
