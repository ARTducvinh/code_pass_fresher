
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036f4  08013e6c  08013e6c  00023e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017560  08017560  00027560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017564  08017564  00027564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08017568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030074  2**0
                  CONTENTS
  7 .bss          00002358  20000074  20000074  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  200023cc  200023cc  00030074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039fc4  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000066dd  00000000  00000000  0006a068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001530  00000000  00000000  00070748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001470  00000000  00000000  00071c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f8ca  00000000  00000000  000730e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005b1f  00000000  00000000  000829b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000884d1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005868  00000000  00000000  00088550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e54 	.word	0x08013e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08013e54 	.word	0x08013e54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <send_gsm_command_by_index>:
#include <string.h>
#include <stdbool.h>
#include "uart_line_queue.h"// định nghĩa tạm thời cho biến ppp_mode để xác định trạng thái 

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db1d      	blt.n	80002ca <send_gsm_command_by_index+0x4a>
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <send_gsm_command_by_index+0x54>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	da18      	bge.n	80002ca <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <send_gsm_command_by_index+0x58>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	4413      	add	r3, r2
 80002a0:	3304      	adds	r3, #4
 80002a2:	681c      	ldr	r4, [r3, #0]
 80002a4:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <send_gsm_command_by_index+0x58>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	4413      	add	r3, r2
 80002ac:	3304      	adds	r3, #4
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff8d 	bl	80001d0 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4619      	mov	r1, r3
 80002ba:	4620      	mov	r0, r4
 80002bc:	f000 fca2 	bl	8000c04 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 80002c0:	2102      	movs	r1, #2
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <send_gsm_command_by_index+0x5c>)
 80002c4:	f000 fc9e 	bl	8000c04 <uart1_send_raw>
 80002c8:	e000      	b.n	80002cc <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002ca:	bf00      	nop
}
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd90      	pop	{r4, r7, pc}
 80002d2:	bf00      	nop
 80002d4:	08017084 	.word	0x08017084
 80002d8:	08016fd4 	.word	0x08016fd4
 80002dc:	08013e6c 	.word	0x08013e6c

080002e0 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0d4      	sub	sp, #336	; 0x150
 80002e4:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 80002e6:	4b40      	ldr	r3, [pc, #256]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b40      	ldr	r3, [pc, #256]	; (80003ec <send_all_gsm_commands_with_check+0x10c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	da75      	bge.n	80003de <send_all_gsm_commands_with_check+0xfe>
        return; // Đã gửi hết lệnh
    }

    if (!waiting_for_response) {
 80002f2:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	f083 0301 	eor.w	r3, r3, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00e      	beq.n	800031e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000300:	f000 fb7c 	bl	80009fc <timer2_get_tick>
 8000304:	4602      	mov	r2, r0
 8000306:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 8000308:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800030a:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000312:	3b08      	subs	r3, #8
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 8000316:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a36      	ldr	r2, [pc, #216]	; (80003fc <send_all_gsm_commands_with_check+0x11c>)
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	4413      	add	r3, r2
 8000328:	330c      	adds	r3, #12
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000330:	f000 fb64 	bl	80009fc <timer2_get_tick>
 8000334:	4602      	mov	r2, r0
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1ad2      	subs	r2, r2, r3
 800033c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000340:	429a      	cmp	r2, r3
 8000342:	d231      	bcs.n	80003a8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 5000) {
 8000344:	f000 fb5a 	bl	80009fc <timer2_get_tick>
 8000348:	4602      	mov	r2, r0
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	f241 3287 	movw	r2, #4999	; 0x1387
 8000354:	4293      	cmp	r3, r2
 8000356:	d91e      	bls.n	8000396 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff8f 	bl	8000280 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 8000362:	f000 fb4b 	bl	80009fc <timer2_get_tick>
 8000366:	4602      	mov	r2, r0
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 800036a:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 800036c:	e013      	b.n	8000396 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000376:	4611      	mov	r1, r2
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f957 	bl	800062c <check_gsm_response_by_index>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000392:	6013      	str	r3, [r2, #0]
                return; // Chuyển sang lệnh tiếp theo
 8000394:	e024      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
        while (uart_line_queue_pop(response)) {
 8000396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe0a 	bl	8000fb4 <uart_line_queue_pop>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1e3      	bne.n	800036e <send_all_gsm_commands_with_check+0x8e>
 80003a6:	e01b      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
            }
        }
    } else {
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <send_all_gsm_commands_with_check+0x11c>)
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	4413      	add	r3, r2
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1d38      	adds	r0, r7, #4
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	460b      	mov	r3, r1
 80003be:	4a10      	ldr	r2, [pc, #64]	; (8000400 <send_all_gsm_commands_with_check+0x120>)
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	f013 f941 	bl	8013648 <sniprintf>
        uart_log(log_buf);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fbe3 	bl	8000b94 <uart_log>
        waiting_for_response = false;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count; // Kết thúc gửi lệnh
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <send_all_gsm_commands_with_check+0x10c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003da:	6013      	str	r3, [r2, #0]
 80003dc:	e000      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
        return; // Đã gửi hết lệnh
 80003de:	bf00      	nop
    }
 80003e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000090 	.word	0x20000090
 80003ec:	08017084 	.word	0x08017084
 80003f0:	20000094 	.word	0x20000094
 80003f4:	20000098 	.word	0x20000098
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	08016fd4 	.word	0x08016fd4
 8000400:	08013e70 	.word	0x08013e70

08000404 <parse_response_at>:
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h" // Thêm header để truy cập gsm_ppp_mode


// Hàm phân tích phản hồi cho lệnh "AT"
bool parse_response_at(const char* response) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 fbc1 	bl	8000b94 <uart_log>
    return strstr(response, "OK") != NULL;
 8000412:	4907      	ldr	r1, [pc, #28]	; (8000430 <parse_response_at+0x2c>)
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f013 f9a3 	bl	8013760 <strstr>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf14      	ite	ne
 8000420:	2301      	movne	r3, #1
 8000422:	2300      	moveq	r3, #0
 8000424:	b2db      	uxtb	r3, r3
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	08013ff0 	.word	0x08013ff0

08000434 <parse_response_ati>:

// Hàm phân tích phản hồi cho lệnh "ATI"
bool parse_response_ati(const char* response) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fba9 	bl	8000b94 <uart_log>
    return strstr(response, "Manufacturer: INCORPORATED") != NULL; // Dòng dữ liệu chính
 8000442:	4907      	ldr	r1, [pc, #28]	; (8000460 <parse_response_ati+0x2c>)
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f013 f98b 	bl	8013760 <strstr>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf14      	ite	ne
 8000450:	2301      	movne	r3, #1
 8000452:	2300      	moveq	r3, #0
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08013ff4 	.word	0x08013ff4

08000464 <parse_response_at_cpin>:

// Hàm phân tích phản hồi cho lệnh "AT+CPIN?"
bool parse_response_at_cpin(const char* response) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 fb91 	bl	8000b94 <uart_log>
    return strstr(response, "+CPIN: READY") != NULL; // Dòng dữ liệu chính
 8000472:	4907      	ldr	r1, [pc, #28]	; (8000490 <parse_response_at_cpin+0x2c>)
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f013 f973 	bl	8013760 <strstr>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf14      	ite	ne
 8000480:	2301      	movne	r3, #1
 8000482:	2300      	moveq	r3, #0
 8000484:	b2db      	uxtb	r3, r3
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	08014010 	.word	0x08014010

08000494 <parse_response_at_csq>:

// Hàm phân tích phản hồi cho lệnh "AT+CSQ"
bool parse_response_at_csq(const char* response) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 fb79 	bl	8000b94 <uart_log>
    return strstr(response, "+CSQ:") != NULL; // Dòng dữ liệu chính
 80004a2:	4907      	ldr	r1, [pc, #28]	; (80004c0 <parse_response_at_csq+0x2c>)
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f013 f95b 	bl	8013760 <strstr>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08014020 	.word	0x08014020

080004c4 <parse_response_at_cereg>:

// Hàm phân tích phản hồi cho lệnh "AT+CEREG?"
bool parse_response_at_cereg(const char* response) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 fb61 	bl	8000b94 <uart_log>
    return strstr(response, "+CEREG: 0,1") != NULL; // Dòng dữ liệu chính
 80004d2:	4907      	ldr	r1, [pc, #28]	; (80004f0 <parse_response_at_cereg+0x2c>)
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f013 f943 	bl	8013760 <strstr>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	bf14      	ite	ne
 80004e0:	2301      	movne	r3, #1
 80004e2:	2300      	moveq	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	08014028 	.word	0x08014028

080004f4 <parse_response_at_cops>:

// Hàm phân tích phản hồi cho lệnh "AT+COPS"
bool parse_response_at_cops(const char* response) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 fb49 	bl	8000b94 <uart_log>
    return strstr(response, "+COPS=0") != NULL; // Dòng dữ liệu chính
 8000502:	4907      	ldr	r1, [pc, #28]	; (8000520 <parse_response_at_cops+0x2c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f013 f92b 	bl	8013760 <strstr>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	08014034 	.word	0x08014034

08000524 <parse_response_at_cgdcont>:

// Hàm phân tích phản hồi cho lệnh "AT+CGDCONT"
bool parse_response_at_cgdcont(const char* response) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fb31 	bl	8000b94 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <parse_response_at_cgdcont+0x2c>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f013 f913 	bl	8013760 <strstr>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08013ff0 	.word	0x08013ff0

08000554 <parse_response_at_cgauth>:

// Hàm phân tích phản hồi cho lệnh "AT+CGAUTH"
bool parse_response_at_cgauth(const char* response) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 fb19 	bl	8000b94 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <parse_response_at_cgauth+0x2c>)
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f013 f8fb 	bl	8013760 <strstr>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	08013ff0 	.word	0x08013ff0

08000584 <parse_response_at_cgact>:

// Hàm phân tích phản hồi cho lệnh "AT+CGACT"
bool parse_response_at_cgact(const char* response) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fb01 	bl	8000b94 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000592:	4907      	ldr	r1, [pc, #28]	; (80005b0 <parse_response_at_cgact+0x2c>)
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f013 f8e3 	bl	8013760 <strstr>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	08013ff0 	.word	0x08013ff0

080005b4 <parse_response_at_cgpaddr>:

// Hàm phân tích phản hồi cho lệnh "AT+CGPADDR"
bool parse_response_at_cgpaddr(const char* response) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fae9 	bl	8000b94 <uart_log>
    return strstr(response, "+CGPADDR: 1,") != NULL; // Dòng dữ liệu chính
 80005c2:	4907      	ldr	r1, [pc, #28]	; (80005e0 <parse_response_at_cgpaddr+0x2c>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f013 f8cb 	bl	8013760 <strstr>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0801403c 	.word	0x0801403c

080005e4 <parse_response_atd99>:
    uart_log(response);
    return strstr(response, "CONNECT") != NULL; // Dòng dữ liệu chính
}

// Hàm phân tích phản hồi cho lệnh "ATD*99#"
bool parse_response_atd99(const char* response) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fad1 	bl	8000b94 <uart_log>
    if (strstr(response, "CONNECT") != NULL) {
 80005f2:	490b      	ldr	r1, [pc, #44]	; (8000620 <parse_response_atd99+0x3c>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f013 f8b3 	bl	8013760 <strstr>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d009      	beq.n	8000614 <parse_response_atd99+0x30>
        // Khi nhận được "CONNECT", chuyển sang chế độ PPP
        // Cờ này sẽ được sử dụng trong uart1_poll() để chuyển dữ liệu đến lwIP
        gsm_ppp_mode = true;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <parse_response_atd99+0x40>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
        uart_log("Switching to PPP mode.");
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <parse_response_atd99+0x44>)
 8000608:	f000 fac4 	bl	8000b94 <uart_log>
        
        // Xóa bộ đệm DMA và bắt đầu nhận dữ liệu PPP.
        // Điều này đảm bảo rằng không có dữ liệu AT command cũ nào bị xử lý như dữ liệu PPP.
        restart_dma2_stream2(); 
 800060c:	f000 fc4c 	bl	8000ea8 <restart_dma2_stream2>
        
        return true;
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <parse_response_atd99+0x32>
    }
    return false;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	0801404c 	.word	0x0801404c
 8000624:	20000540 	.word	0x20000540
 8000628:	08014054 	.word	0x08014054

0800062c <check_gsm_response_by_index>:


bool ppp_mode = false;

// Hàm kiểm tra phản hồi dựa trên chỉ số lệnh trong gsm_commands
bool check_gsm_response_by_index(int idx, const char* response) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0a      	cmp	r3, #10
 800063a:	d855      	bhi.n	80006e8 <check_gsm_response_by_index+0xbc>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <check_gsm_response_by_index+0x18>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000671 	.word	0x08000671
 8000648:	0800067b 	.word	0x0800067b
 800064c:	08000685 	.word	0x08000685
 8000650:	0800068f 	.word	0x0800068f
 8000654:	08000699 	.word	0x08000699
 8000658:	080006a3 	.word	0x080006a3
 800065c:	080006b7 	.word	0x080006b7
 8000660:	080006c1 	.word	0x080006c1
 8000664:	080006cb 	.word	0x080006cb
 8000668:	080006d5 	.word	0x080006d5
 800066c:	080006df 	.word	0x080006df
        case 0: // AT
            return parse_response_at(response);
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	f7ff fec7 	bl	8000404 <parse_response_at>
 8000676:	4603      	mov	r3, r0
 8000678:	e037      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 800067a:	6838      	ldr	r0, [r7, #0]
 800067c:	f7ff feda 	bl	8000434 <parse_response_ati>
 8000680:	4603      	mov	r3, r0
 8000682:	e032      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff feed 	bl	8000464 <parse_response_at_cpin>
 800068a:	4603      	mov	r3, r0
 800068c:	e02d      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f7ff ff00 	bl	8000494 <parse_response_at_csq>
 8000694:	4603      	mov	r3, r0
 8000696:	e028      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 8000698:	6838      	ldr	r0, [r7, #0]
 800069a:	f7ff ff13 	bl	80004c4 <parse_response_at_cereg>
 800069e:	4603      	mov	r3, r0
 80006a0:	e023      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 80006a2:	6838      	ldr	r0, [r7, #0]
 80006a4:	f7ff ff26 	bl	80004f4 <parse_response_at_cops>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	e019      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 80006b6:	6838      	ldr	r0, [r7, #0]
 80006b8:	f7ff ff34 	bl	8000524 <parse_response_at_cgdcont>
 80006bc:	4603      	mov	r3, r0
 80006be:	e014      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f7ff ff47 	bl	8000554 <parse_response_at_cgauth>
 80006c6:	4603      	mov	r3, r0
 80006c8:	e00f      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 80006ca:	6838      	ldr	r0, [r7, #0]
 80006cc:	f7ff ff5a 	bl	8000584 <parse_response_at_cgact>
 80006d0:	4603      	mov	r3, r0
 80006d2:	e00a      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 80006d4:	6838      	ldr	r0, [r7, #0]
 80006d6:	f7ff ff6d 	bl	80005b4 <parse_response_at_cgpaddr>
 80006da:	4603      	mov	r3, r0
 80006dc:	e005      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f7ff ff80 	bl	80005e4 <parse_response_atd99>
 80006e4:	4603      	mov	r3, r0
 80006e6:	e000      	b.n	80006ea <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 80006e8:	2300      	movs	r3, #0
    }
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop

080006f4 <button_init>:
#include "button.h"

void button_init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 80006fe:	2300      	movs	r3, #0
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	e008      	b.n	8000716 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d102      	bne.n	8000710 <button_init+0x1c>
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	e005      	b.n	800071c <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	3301      	adds	r3, #1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d9f3      	bls.n	8000704 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 800071c:	4912      	ldr	r1, [pc, #72]	; (8000768 <button_init+0x74>)
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <button_init+0x74>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	2003      	movs	r0, #3
 8000728:	fa00 f303 	lsl.w	r3, r0, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <button_init+0x74>)
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <button_init+0x74>)
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2003      	movs	r0, #3
 800073e:	fa00 f303 	lsl.w	r3, r0, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4013      	ands	r3, r2
 8000746:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <button_init+0x74>)
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <button_init+0x74>)
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	2001      	movs	r0, #1
 8000754:	fa00 f303 	lsl.w	r3, r0, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	60cb      	str	r3, [r1, #12]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40020000 	.word	0x40020000

0800076c <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <hardware_init+0x54>)
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <hardware_init+0x54>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f043 0303 	orr.w	r3, r3, #3
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <hardware_init+0x54>)
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <hardware_init+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <hardware_init+0x54>)
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <hardware_init+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; 
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <hardware_init+0x54>)
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <hardware_init+0x54>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30


    timer2_init_1ms();
 80007a4:	f000 f8e2 	bl	800096c <timer2_init_1ms>
    uart_line_queue_init();
 80007a8:	f000 fbae 	bl	8000f08 <uart_line_queue_init>
    uart_init_all();
 80007ac:	f000 f960 	bl	8000a70 <uart_init_all>
    led_init();
 80007b0:	f000 f854 	bl	800085c <led_init>
    button_init();
 80007b4:	f7ff ff9e 	bl	80006f4 <button_init>
    gsm_module_power_cycle();
 80007b8:	f000 f804 	bl	80007c4 <gsm_module_power_cycle>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800

080007c4 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007d4:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 80007d6:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e0:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ec:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80007f8:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <gsm_module_power_cycle+0x90>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000804:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <gsm_module_power_cycle+0x90>)
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <gsm_module_power_cycle+0x90>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000810:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e002      	b.n	800081e <gsm_module_power_cycle+0x5a>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <gsm_module_power_cycle+0x94>)
 8000822:	4293      	cmp	r3, r2
 8000824:	ddf8      	ble.n	8000818 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <gsm_module_power_cycle+0x90>)
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <gsm_module_power_cycle+0x90>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000830:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	e002      	b.n	800083e <gsm_module_power_cycle+0x7a>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <gsm_module_power_cycle+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	ddf8      	ble.n	8000838 <gsm_module_power_cycle+0x74>
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000
 8000858:	000f423f 	.word	0x000f423f

0800085c <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 8000860:	4a34      	ldr	r2, [pc, #208]	; (8000934 <led_init+0xd8>)
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <led_init+0xd8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800086a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <led_init+0xd8>)
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <led_init+0xd8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000876:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000878:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <led_init+0xd8>)
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <led_init+0xd8>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000882:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 8000884:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <led_init+0xd8>)
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <led_init+0xd8>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800088e:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <led_init+0xd8>)
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <led_init+0xd8>)
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800089a:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <led_init+0xd8>)
 800089e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a2:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <led_init+0xd8>)
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <led_init+0xd8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ae:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <led_init+0xd8>)
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <led_init+0xd8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ba:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <led_init+0xd8>)
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <led_init+0xd8>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f023 0310 	bic.w	r3, r3, #16
 80008c6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <led_init+0xd8>)
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <led_init+0xd8>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008d2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <led_init+0xd8>)
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <led_init+0xd8>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008de:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <led_init+0xd8>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <led_init+0xd8>)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <led_init+0xd8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008f0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <led_init+0xd8>)
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <led_init+0xd8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 80008fe:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <led_init+0xd8>)
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <led_init+0xd8>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f023 0320 	bic.w	r3, r3, #32
 8000908:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <led_init+0xd8>)
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <led_init+0xd8>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000914:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <led_init+0xd8>)
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <led_init+0xd8>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000920:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <led_init+0xd8>)
 8000924:	2220      	movs	r2, #32
 8000926:	835a      	strh	r2, [r3, #26]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40020400 	.word	0x40020400

08000938 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000942:	4909      	ldr	r1, [pc, #36]	; (8000968 <NVIC_EnableIRQ+0x30>)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	095b      	lsrs	r3, r3, #5
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	f002 021f 	and.w	r2, r2, #31
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000974:	220f      	movs	r2, #15
 8000976:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8000982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000986:	2201      	movs	r2, #1
 8000988:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000992:	899b      	ldrh	r3, [r3, #12]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 800099e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 80009b2:	201c      	movs	r0, #28
 80009b4:	f7ff ffc0 	bl	8000938 <NVIC_EnableIRQ>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80009c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c4:	8a1b      	ldrh	r3, [r3, #16]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00e      	beq.n	80009ee <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d8:	8a1b      	ldrh	r3, [r3, #16]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <TIM2_IRQHandler+0x3c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <TIM2_IRQHandler+0x3c>)
 80009ec:	6013      	str	r3, [r2, #0]
    }
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	200000a0 	.word	0x200000a0

080009fc <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <timer2_get_tick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000a0 	.word	0x200000a0

08000a14 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000a1c:	f7ff ffee 	bl	80009fc <timer2_get_tick>
 8000a20:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000a22:	bf00      	nop
 8000a24:	f7ff ffea 	bl	80009fc <timer2_get_tick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1ad2      	subs	r2, r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3f7      	bcc.n	8000a24 <delay_ms+0x10>
    }
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <NVIC_EnableIRQ>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a46:	4909      	ldr	r1, [pc, #36]	; (8000a6c <NVIC_EnableIRQ+0x30>)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	095b      	lsrs	r3, r3, #5
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	f002 021f 	and.w	r2, r2, #31
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a74:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <uart_init_all+0x104>)
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <uart_init_all+0x104>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000a80:	4a3c      	ldr	r2, [pc, #240]	; (8000b74 <uart_init_all+0x104>)
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <uart_init_all+0x104>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000a8c:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <uart_init_all+0x108>)
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <uart_init_all+0x108>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000a96:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000a98:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <uart_init_all+0x108>)
 8000a9a:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <uart_init_all+0x108>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000aa2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <uart_init_all+0x108>)
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <uart_init_all+0x108>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000aae:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ab0:	4a31      	ldr	r2, [pc, #196]	; (8000b78 <uart_init_all+0x108>)
 8000ab2:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <uart_init_all+0x108>)
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000aba:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <uart_init_all+0x10c>)
 8000abe:	228a      	movs	r2, #138	; 0x8a
 8000ac0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <uart_init_all+0x10c>)
 8000ac4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ac8:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <uart_init_all+0x104>)
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <uart_init_all+0x104>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000ad6:	4a28      	ldr	r2, [pc, #160]	; (8000b78 <uart_init_all+0x108>)
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <uart_init_all+0x108>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ae0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <uart_init_all+0x108>)
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <uart_init_all+0x108>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000aec:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <uart_init_all+0x108>)
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <uart_init_all+0x108>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000af8:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <uart_init_all+0x108>)
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <uart_init_all+0x108>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b04:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <uart_init_all+0x110>)
 8000b08:	228a      	movs	r2, #138	; 0x8a
 8000b0a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <uart_init_all+0x110>)
 8000b0e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000b12:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <uart_init_all+0x10c>)
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <uart_init_all+0x10c>)
 8000b18:	8a9b      	ldrh	r3, [r3, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <uart_init_all+0x114>)
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <uart_init_all+0x114>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f023 0301 	bic.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000b30:	bf00      	nop
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <uart_init_all+0x114>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f9      	bne.n	8000b32 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <uart_init_all+0x114>)
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <uart_init_all+0x118>)
 8000b42:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <uart_init_all+0x114>)
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <uart_init_all+0x11c>)
 8000b48:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <uart_init_all+0x114>)
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <uart_init_all+0x114>)
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <uart_init_all+0x120>)
 8000b56:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <uart_init_all+0x114>)
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <uart_init_all+0x114>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b64:	203a      	movs	r0, #58	; 0x3a
 8000b66:	f7ff ff69 	bl	8000a3c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000b6a:	f000 f98b 	bl	8000e84 <uart_enable_uart1_idle_irq>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40026440 	.word	0x40026440
 8000b88:	40011004 	.word	0x40011004
 8000b8c:	200006c4 	.word	0x200006c4
 8000b90:	08000500 	.word	0x08000500

08000b94 <uart_log>:

void uart_log(const char* msg)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000ba0:	e00e      	b.n	8000bc0 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000ba2:	bf00      	nop
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <uart_log+0x6c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f8      	beq.n	8000ba4 <uart_log+0x10>
        USART2->DR = *p++;
 8000bb2:	4913      	ldr	r1, [pc, #76]	; (8000c00 <uart_log+0x6c>)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60fa      	str	r2, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1ec      	bne.n	8000ba2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000bc8:	bf00      	nop
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <uart_log+0x6c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f8      	beq.n	8000bca <uart_log+0x36>
    USART2->DR = '\r';
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <uart_log+0x6c>)
 8000bda:	220d      	movs	r2, #13
 8000bdc:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000bde:	bf00      	nop
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <uart_log+0x6c>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f8      	beq.n	8000be0 <uart_log+0x4c>
    USART2->DR = '\n';
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <uart_log+0x6c>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	809a      	strh	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40004400 	.word	0x40004400

08000c04 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e011      	b.n	8000c38 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8000c14:	bf00      	nop
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <uart1_send_raw+0x58>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f8      	beq.n	8000c16 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8000c24:	490d      	ldr	r1, [pc, #52]	; (8000c5c <uart1_send_raw+0x58>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3e9      	bcc.n	8000c14 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8000c40:	bf00      	nop
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <uart1_send_raw+0x58>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f8      	beq.n	8000c42 <uart1_send_raw+0x3e>
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40011000 	.word	0x40011000

08000c60 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e033      	b.n	8000cd8 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	2b7e      	cmp	r3, #126	; 0x7e
 8000c76:	d829      	bhi.n	8000ccc <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	b291      	uxth	r1, r2
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c82:	8011      	strh	r1, [r2, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000c90:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d005      	beq.n	8000caa <gsm_hw_layer_uart_fill_rx+0x4a>
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b0d      	cmp	r3, #13
 8000ca8:	d113      	bne.n	8000cd2 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d908      	bls.n	8000cc4 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cc0:	f000 f938 	bl	8000f34 <uart_line_queue_push>
                }
                line_idx = 0;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
 8000cca:	e002      	b.n	8000cd2 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0; // quá dài, reset dòng
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d3c7      	bcc.n	8000c70 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000aa 	.word	0x200000aa
 8000cec:	200000ac 	.word	0x200000ac

08000cf0 <uart1_poll>:

void uart1_poll(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
    // Thoát sớm nếu không có dữ liệu mới
    if (!rx_line_ready) {
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <uart1_poll+0x108>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d172      	bne.n	8000dec <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8000d06:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <uart1_poll+0x108>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

    // Lấy vị trí hiện tại của con trỏ ghi DMA
    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <uart1_poll+0x10c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d14:	607b      	str	r3, [r7, #4]

    // Thoát nếu không có dữ liệu mới được ghi
    if (pos == m_old_uart1_dma_rx_pos) {
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <uart1_poll+0x110>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d067      	beq.n	8000df0 <uart1_poll+0x100>
        return;
    }

    // Sử dụng biến gsm_ppp_mode thay vì ppp_mode
    if (gsm_ppp_mode && ppp != NULL) {
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <uart1_poll+0x114>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d02e      	beq.n	8000d88 <uart1_poll+0x98>
 8000d2a:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <uart1_poll+0x118>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d02a      	beq.n	8000d88 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <uart1_poll+0x110>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d90d      	bls.n	8000d58 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <uart1_poll+0x118>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <uart1_poll+0x110>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <uart1_poll+0x11c>)
 8000d46:	1899      	adds	r1, r3, r2
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <uart1_poll+0x110>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f011 f849 	bl	8011de8 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d56:	e03c      	b.n	8000dd2 <uart1_poll+0xe2>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <uart1_poll+0x118>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <uart1_poll+0x110>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <uart1_poll+0x11c>)
 8000d62:	1899      	adds	r1, r3, r2
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <uart1_poll+0x110>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f011 f83b 	bl	8011de8 <pppos_input>
            if (pos > 0) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d02c      	beq.n	8000dd2 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <uart1_poll+0x118>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	4923      	ldr	r1, [pc, #140]	; (8000e0c <uart1_poll+0x11c>)
 8000d80:	4618      	mov	r0, r3
 8000d82:	f011 f831 	bl	8011de8 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d86:	e024      	b.n	8000dd2 <uart1_poll+0xe2>
            }
        }
    } else {
        // Chế độ AT command
        if (pos > m_old_uart1_dma_rx_pos) {
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <uart1_poll+0x110>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d90b      	bls.n	8000daa <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <uart1_poll+0x110>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <uart1_poll+0x11c>)
 8000d98:	1898      	adds	r0, r3, r2
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <uart1_poll+0x110>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff ff5c 	bl	8000c60 <gsm_hw_layer_uart_fill_rx>
 8000da8:	e014      	b.n	8000dd4 <uart1_poll+0xe4>
        } else {
            // Xử lý trường hợp buffer bị tràn (wrap-around)
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <uart1_poll+0x110>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <uart1_poll+0x11c>)
 8000db0:	441a      	add	r2, r3
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <uart1_poll+0x110>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	f7ff ff4f 	bl	8000c60 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4810      	ldr	r0, [pc, #64]	; (8000e0c <uart1_poll+0x11c>)
 8000dcc:	f7ff ff48 	bl	8000c60 <gsm_hw_layer_uart_fill_rx>
 8000dd0:	e000      	b.n	8000dd4 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 8000dd2:	bf00      	nop
            }
        }
    }

    // Cập nhật vị trí cũ cho lần kiểm tra tiếp theo
    m_old_uart1_dma_rx_pos = pos;
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <uart1_poll+0x110>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <uart1_poll+0x110>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de2:	d106      	bne.n	8000df2 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <uart1_poll+0x110>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e002      	b.n	8000df2 <uart1_poll+0x102>
        return;
 8000dec:	bf00      	nop
 8000dee:	e000      	b.n	8000df2 <uart1_poll+0x102>
        return;
 8000df0:	bf00      	nop
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	40026440 	.word	0x40026440
 8000e00:	200000a4 	.word	0x200000a4
 8000e04:	20000540 	.word	0x20000540
 8000e08:	2000053c 	.word	0x2000053c
 8000e0c:	200006c4 	.word	0x200006c4

08000e10 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <DMA2_Stream2_IRQHandler+0x2c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <DMA2_Stream2_IRQHandler+0x30>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
    }
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40026400 	.word	0x40026400
 8000e40:	200000a8 	.word	0x200000a8

08000e44 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <USART1_IRQHandler+0x38>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00b      	beq.n	8000e70 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <USART1_IRQHandler+0x38>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <USART1_IRQHandler+0x38>)
 8000e62:	889b      	ldrh	r3, [r3, #4]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8000e68:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <USART1_IRQHandler+0x3c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	200000a8 	.word	0x200000a8

08000e84 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <uart_enable_uart1_idle_irq+0x20>)
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <uart_enable_uart1_idle_irq+0x20>)
 8000e8c:	899b      	ldrh	r3, [r3, #12]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000e98:	2025      	movs	r0, #37	; 0x25
 8000e9a:	f7ff fdcf 	bl	8000a3c <NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000eb8:	bf00      	nop
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <restart_dma2_stream2+0x54>)
 8000eca:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <restart_dma2_stream2+0x58>)
 8000ed0:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed8:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <restart_dma2_stream2+0x5c>)
 8000ede:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <restart_dma2_stream2+0x50>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40026440 	.word	0x40026440
 8000efc:	40011004 	.word	0x40011004
 8000f00:	200006c4 	.word	0x200006c4
 8000f04:	08000500 	.word	0x08000500

08000f08 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <uart_line_queue_init+0x20>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <uart_line_queue_init+0x24>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <uart_line_queue_init+0x28>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	2000052c 	.word	0x2000052c
 8000f2c:	2000052d 	.word	0x2000052d
 8000f30:	2000052e 	.word	0x2000052e

08000f34 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <uart_line_queue_push+0x74>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d901      	bls.n	8000f4a <uart_line_queue_push+0x16>
 8000f46:	2300      	movs	r3, #0
 8000f48:	e029      	b.n	8000f9e <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <uart_line_queue_push+0x78>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <uart_line_queue_push+0x7c>)
 8000f54:	4413      	add	r3, r2
 8000f56:	227f      	movs	r2, #127	; 0x7f
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f012 fbeb 	bl	8013736 <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <uart_line_queue_push+0x78>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <uart_line_queue_push+0x7c>)
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	4413      	add	r3, r2
 8000f6c:	337f      	adds	r3, #127	; 0x7f
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <uart_line_queue_push+0x78>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	425a      	negs	r2, r3
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	f002 0207 	and.w	r2, r2, #7
 8000f84:	bf58      	it	pl
 8000f86:	4253      	negpl	r3, r2
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <uart_line_queue_push+0x78>)
 8000f8c:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <uart_line_queue_push+0x74>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <uart_line_queue_push+0x74>)
 8000f9a:	701a      	strb	r2, [r3, #0]
    return true;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000052e 	.word	0x2000052e
 8000fac:	2000052c 	.word	0x2000052c
 8000fb0:	2000012c 	.word	0x2000012c

08000fb4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <uart_line_queue_pop+0x60>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <uart_line_queue_pop+0x16>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e020      	b.n	800100c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <uart_line_queue_pop+0x64>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	01db      	lsls	r3, r3, #7
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <uart_line_queue_pop+0x68>)
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f012 fbab 	bl	8013736 <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <uart_line_queue_pop+0x64>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	425a      	negs	r2, r3
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	f002 0207 	and.w	r2, r2, #7
 8000ff2:	bf58      	it	pl
 8000ff4:	4253      	negpl	r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <uart_line_queue_pop+0x64>)
 8000ffa:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <uart_line_queue_pop+0x60>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <uart_line_queue_pop+0x60>)
 8001008:	701a      	strb	r2, [r3, #0]
    return true;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000052e 	.word	0x2000052e
 8001018:	2000052d 	.word	0x2000052d
 800101c:	2000012c 	.word	0x2000012c

08001020 <main>:
#include "ppp_net/net_test.h"
#include "lwip/tcpip.h"
#include <stdio.h>

int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    hardware_init();
 8001024:	f7ff fba2 	bl	800076c <hardware_init>
    uart_log("UART2 log test");
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0x28>)
 800102a:	f7ff fdb3 	bl	8000b94 <uart_log>
    delay_ms(15000); // Đợi module GSM khởi động
 800102e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001032:	f7ff fcef 	bl	8000a14 <delay_ms>
    ppp_connection_init();
 8001036:	f000 fa85 	bl	8001544 <ppp_connection_init>

    while (1) {
        uart1_poll();
 800103a:	f7ff fe59 	bl	8000cf0 <uart1_poll>
        send_all_gsm_commands_with_check();
 800103e:	f7ff f94f 	bl	80002e0 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 8001042:	f000 fab3 	bl	80015ac <ppp_connection_poll>
        uart1_poll();
 8001046:	e7f8      	b.n	800103a <main+0x1a>
 8001048:	0801406c 	.word	0x0801406c

0800104c <mqtt_incoming_publish_cb>:
#endif
};

static void
mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a6      	sub	sp, #152	; 0x98
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
    char log_buf[128];
    snprintf(log_buf, sizeof(log_buf), "Incoming publish: topic %s, len %d", topic, (int)tot_len);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f107 0010 	add.w	r0, r7, #16
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <mqtt_incoming_publish_cb+0x30>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	f012 faef 	bl	8013648 <sniprintf>
    uart_log(log_buf);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fd90 	bl	8000b94 <uart_log>
}
 8001074:	bf00      	nop
 8001076:	3790      	adds	r7, #144	; 0x90
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08014090 	.word	0x08014090

08001080 <mqtt_incoming_data_cb>:

static void
mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0aa      	sub	sp, #168	; 0xa8
 8001084:	af04      	add	r7, sp, #16
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	80fb      	strh	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
    char log_buf[128];
    snprintf(log_buf, sizeof(log_buf), "Incoming data: len %d, flags %d", (int)len, (int)flags);
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	797b      	ldrb	r3, [r7, #5]
 800109a:	f107 0014 	add.w	r0, r7, #20
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <mqtt_incoming_data_cb+0x70>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	f012 facf 	bl	8013648 <sniprintf>
    uart_log(log_buf);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd70 	bl	8000b94 <uart_log>

    // In nội dung dữ liệu nhận được qua log
    uart_log("Received data:");
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <mqtt_incoming_data_cb+0x74>)
 80010b6:	f7ff fd6d 	bl	8000b94 <uart_log>
    uart_log((const char *)data); // In dữ liệu nhận được qua log
 80010ba:	68b8      	ldr	r0, [r7, #8]
 80010bc:	f7ff fd6a 	bl	8000b94 <uart_log>

    // Gửi dữ liệu nhận được qua MQTT publish
    const char *response_topic = "mydevice2/room1/switch01/response";
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <mqtt_incoming_data_cb+0x78>)
 80010c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    mqtt_publish(mqtt_client, response_topic, data, len, 0, 0, NULL, NULL);
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <mqtt_incoming_data_cb+0x7c>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80010e4:	f001 fcb0 	bl	8002a48 <mqtt_publish>
}
 80010e8:	bf00      	nop
 80010ea:	3798      	adds	r7, #152	; 0x98
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	080140b4 	.word	0x080140b4
 80010f4:	080140d4 	.word	0x080140d4
 80010f8:	080140e4 	.word	0x080140e4
 80010fc:	20000530 	.word	0x20000530

08001100 <mqtt_connection_cb>:

static void
mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af04      	add	r7, sp, #16
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	61fb      	str	r3, [r7, #28]

    if (status == MQTT_CONNECT_ACCEPTED) {
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d124      	bne.n	8001162 <mqtt_connection_cb+0x62>
        uart_log("MQTT connection accepted!");
 8001118:	4815      	ldr	r0, [pc, #84]	; (8001170 <mqtt_connection_cb+0x70>)
 800111a:	f7ff fd3b 	bl	8000b94 <uart_log>

        // Subscribe tới topic
        mqtt_sub_unsub(client,
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	2200      	movs	r2, #0
 800112a:	4912      	ldr	r1, [pc, #72]	; (8001174 <mqtt_connection_cb+0x74>)
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f001 fd69 	bl	8002c04 <mqtt_sub_unsub>
                "mydevice1/room1/switch01/cmd", 0, /* QoS 0 */
                NULL, LWIP_CONST_CAST(void*, client_info),
                1);

        // Publish dữ liệu tới broker
        const char *topic = "mydevice2/room1/switch01/cmd";
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <mqtt_connection_cb+0x78>)
 8001134:	61bb      	str	r3, [r7, #24]
        const char *message = "{\"msg\": \"ON\"}";
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <mqtt_connection_cb+0x7c>)
 8001138:	617b      	str	r3, [r7, #20]
        mqtt_publish(client, topic, message, strlen(message), 0, 0, NULL, NULL);
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff f848 	bl	80001d0 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	2300      	movs	r3, #0
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	2300      	movs	r3, #0
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2300      	movs	r3, #0
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	69b9      	ldr	r1, [r7, #24]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f001 fc74 	bl	8002a48 <mqtt_publish>
    } else {
        uart_log("MQTT connection failed!");
    }
}
 8001160:	e002      	b.n	8001168 <mqtt_connection_cb+0x68>
        uart_log("MQTT connection failed!");
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <mqtt_connection_cb+0x80>)
 8001164:	f7ff fd16 	bl	8000b94 <uart_log>
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08014108 	.word	0x08014108
 8001174:	08014124 	.word	0x08014124
 8001178:	08014144 	.word	0x08014144
 800117c:	08014164 	.word	0x08014164
 8001180:	08014174 	.word	0x08014174

08001184 <mqtt_example_init>:

void
mqtt_example_init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af02      	add	r7, sp, #8
#if LWIP_TCP
  mqtt_client = mqtt_client_new();
 800118a:	f001 fe49 	bl	8002e20 <mqtt_client_new>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <mqtt_example_init+0x3c>)
 8001192:	601a      	str	r2, [r3, #0]

  mqtt_set_inpub_callback(mqtt_client,
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <mqtt_example_init+0x3c>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <mqtt_example_init+0x40>)
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <mqtt_example_init+0x44>)
 800119c:	490b      	ldr	r1, [pc, #44]	; (80011cc <mqtt_example_init+0x48>)
 800119e:	f001 fe15 	bl	8002dcc <mqtt_set_inpub_callback>
          mqtt_incoming_publish_cb,
          mqtt_incoming_data_cb,
          LWIP_CONST_CAST(void*, &mqtt_client_info));

  mqtt_client_connect(mqtt_client,
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <mqtt_example_init+0x3c>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <mqtt_example_init+0x40>)
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <mqtt_example_init+0x40>)
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <mqtt_example_init+0x4c>)
 80011b0:	f240 725b 	movw	r2, #1883	; 0x75b
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <mqtt_example_init+0x50>)
 80011b6:	f001 fe3d 	bl	8002e34 <mqtt_client_connect>
          &mqtt_ip, MQTT_PORT,
          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
          &mqtt_client_info);
#endif /* LWIP_TCP */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000530 	.word	0x20000530
 80011c4:	08017088 	.word	0x08017088
 80011c8:	08001081 	.word	0x08001081
 80011cc:	0800104d 	.word	0x0800104d
 80011d0:	08001101 	.word	0x08001101
 80011d4:	20000000 	.word	0x20000000

080011d8 <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	2300      	movs	r3, #0
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	2300      	movs	r3, #0
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <sys_now+0x18>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	4903      	ldr	r1, [pc, #12]	; (80012c4 <sys_now+0x18>)
 80012b8:	600a      	str	r2, [r1, #0]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000534 	.word	0x20000534

080012c8 <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    return sys_now();
 80012cc:	f7ff ffee 	bl	80012ac <sys_now>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <lwip_port_rand+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <lwip_port_rand+0x2c>)
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80012ea:	3339      	adds	r3, #57	; 0x39
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <lwip_port_rand+0x28>)
 80012ee:	6013      	str	r3, [r2, #0]
    return seed;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <lwip_port_rand+0x28>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000004 	.word	0x20000004
 8001304:	41c64e6d 	.word	0x41c64e6d

08001308 <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <test_tcp_connect_google>:
#include "lwip/netdb.h"
#include "lwip/dns.h"
#include "hardware/uart.h"


void test_tcp_connect_google(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b0a4      	sub	sp, #144	; 0x90
 8001330:	af00      	add	r7, sp, #0
    char log_buf[128];
    uart_log("Start test_tcp_connect_google");
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <test_tcp_connect_google+0x74>)
 8001334:	f7ff fc2e 	bl	8000b94 <uart_log>

    struct tcp_pcb *pcb = tcp_new();
 8001338:	f006 f9a6 	bl	8007688 <tcp_new>
 800133c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (pcb == NULL) {
 8001340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <test_tcp_connect_google+0x24>
        uart_log("Failed to create TCP PCB");
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <test_tcp_connect_google+0x78>)
 800134a:	f7ff fc23 	bl	8000b94 <uart_log>
 800134e:	e024      	b.n	800139a <test_tcp_connect_google+0x6e>
        return;
    }

    ip_addr_t google_ip;
    IP4_ADDR(&google_ip, 142, 250, 190, 46); // IP của google.com
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <test_tcp_connect_google+0x7c>)
 8001352:	607b      	str	r3, [r7, #4]

    err_t err = tcp_connect(pcb, &google_ip, 80, NULL); // Không cần callback cho test đơn giản
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	2300      	movs	r3, #0
 8001358:	2250      	movs	r2, #80	; 0x50
 800135a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800135e:	f005 f9f5 	bl	800674c <tcp_connect>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    if (err != ERR_OK) {
 8001368:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00d      	beq.n	800138c <test_tcp_connect_google+0x60>
        snprintf(log_buf, sizeof(log_buf), "TCP Connect failed: %d", err);
 8001370:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8001374:	f107 0008 	add.w	r0, r7, #8
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <test_tcp_connect_google+0x80>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	f012 f964 	bl	8013648 <sniprintf>
        uart_log(log_buf);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc05 	bl	8000b94 <uart_log>
 800138a:	e002      	b.n	8001392 <test_tcp_connect_google+0x66>
    } else {
        uart_log("TCP Connected to google.com:80!");
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <test_tcp_connect_google+0x84>)
 800138e:	f7ff fc01 	bl	8000b94 <uart_log>
    }

    tcp_abort(pcb); // Đóng kết nối sau khi test
 8001392:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001396:	f005 f833 	bl	8006400 <tcp_abort>
}
 800139a:	3790      	adds	r7, #144	; 0x90
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0801418c 	.word	0x0801418c
 80013a4:	080141ac 	.word	0x080141ac
 80013a8:	2ebefa8e 	.word	0x2ebefa8e
 80013ac:	080141c8 	.word	0x080141c8
 80013b0:	080141e0 	.word	0x080141e0

080013b4 <ppp_output_callback>:
 * @param  data: Dữ liệu cần gửi
 * @param  len: Độ dài dữ liệu
 * @param  ctx: Con trỏ ngữ cảnh (không dùng)
 * @retval Luôn trả về độ dài đã gửi.
 */
static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f7ff fc1d 	bl	8000c04 <uart1_send_raw>
    return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09e      	sub	sp, #120	; 0x78
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <ppp_status_cb+0x18>
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d063      	beq.n	80014b2 <ppp_status_cb+0xde>
 80013ea:	e06f      	b.n	80014cc <ppp_status_cb+0xf8>
        case PPPERR_NONE: {
            char log_buf[100];
            uart_log("PPP connected");
 80013ec:	4840      	ldr	r0, [pc, #256]	; (80014f0 <ppp_status_cb+0x11c>)
 80013ee:	f7ff fbd1 	bl	8000b94 <uart_log>
            ppp_connected = true;
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <ppp_status_cb+0x120>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = true;
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <ppp_status_cb+0x124>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]

            // Đặt cờ để báo hiệu kết nối PPP đã được thiết lập
            ppp_connection_established = true;
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <ppp_status_cb+0x128>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]

            sprintf(log_buf, "   IP address:  %s", ipaddr_ntoa(netif_ip4_addr(&ppp_netif)));
 8001404:	483e      	ldr	r0, [pc, #248]	; (8001500 <ppp_status_cb+0x12c>)
 8001406:	f002 fcb3 	bl	8003d70 <ip4addr_ntoa>
 800140a:	4602      	mov	r2, r0
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	493c      	ldr	r1, [pc, #240]	; (8001504 <ppp_status_cb+0x130>)
 8001412:	4618      	mov	r0, r3
 8001414:	f011 fdd2 	bl	8012fbc <siprintf>
            uart_log(log_buf);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbb9 	bl	8000b94 <uart_log>
            sprintf(log_buf, "   Gateway:     %s", ipaddr_ntoa(netif_ip4_gw(&ppp_netif)));
 8001422:	4839      	ldr	r0, [pc, #228]	; (8001508 <ppp_status_cb+0x134>)
 8001424:	f002 fca4 	bl	8003d70 <ip4addr_ntoa>
 8001428:	4602      	mov	r2, r0
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4937      	ldr	r1, [pc, #220]	; (800150c <ppp_status_cb+0x138>)
 8001430:	4618      	mov	r0, r3
 8001432:	f011 fdc3 	bl	8012fbc <siprintf>
            uart_log(log_buf);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbaa 	bl	8000b94 <uart_log>
            sprintf(log_buf, "   Netmask:     %s", ipaddr_ntoa(netif_ip4_netmask(&ppp_netif)));
 8001440:	4833      	ldr	r0, [pc, #204]	; (8001510 <ppp_status_cb+0x13c>)
 8001442:	f002 fc95 	bl	8003d70 <ip4addr_ntoa>
 8001446:	4602      	mov	r2, r0
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4931      	ldr	r1, [pc, #196]	; (8001514 <ppp_status_cb+0x140>)
 800144e:	4618      	mov	r0, r3
 8001450:	f011 fdb4 	bl	8012fbc <siprintf>
            uart_log(log_buf);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fb9b 	bl	8000b94 <uart_log>

            // Thêm delay để PPP ổn định
            uart_log("Waiting for PPP to stabilize...");
 800145e:	482e      	ldr	r0, [pc, #184]	; (8001518 <ppp_status_cb+0x144>)
 8001460:	f7ff fb98 	bl	8000b94 <uart_log>
            delay_ms(2000); // Chờ 2 giây
 8001464:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001468:	f7ff fad4 	bl	8000a14 <delay_ms>

            // Kiểm tra định tuyến
            uart_log("Checking routing...");
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <ppp_status_cb+0x148>)
 800146e:	f7ff fb91 	bl	8000b94 <uart_log>
            if (netif_is_up(&ppp_netif)) {
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <ppp_status_cb+0x14c>)
 8001474:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <ppp_status_cb+0xb4>
                uart_log("PPP netif is up and routing is active.");
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <ppp_status_cb+0x150>)
 8001482:	f7ff fb87 	bl	8000b94 <uart_log>
 8001486:	e002      	b.n	800148e <ppp_status_cb+0xba>
            } else {
                uart_log("PPP netif is down. Routing may not be active.");
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <ppp_status_cb+0x154>)
 800148a:	f7ff fb83 	bl	8000b94 <uart_log>
            }

            // Kiểm tra kết nối Internet
            uart_log("Testing Internet connection...");
 800148e:	4827      	ldr	r0, [pc, #156]	; (800152c <ppp_status_cb+0x158>)
 8001490:	f7ff fb80 	bl	8000b94 <uart_log>
            test_tcp_connect_google();
 8001494:	f7ff ff4a 	bl	800132c <test_tcp_connect_google>
            uart_log("Internet connection test completed.");
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <ppp_status_cb+0x15c>)
 800149a:	f7ff fb7b 	bl	8000b94 <uart_log>

            // Khởi tạo MQTT sau khi kết nối PPP thành công
            uart_log("Initializing MQTT...");
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <ppp_status_cb+0x160>)
 80014a0:	f7ff fb78 	bl	8000b94 <uart_log>
            mqtt_example_init();
 80014a4:	f7ff fe6e 	bl	8001184 <mqtt_example_init>
            uart_log("MQTT initialization completed.");
 80014a8:	4823      	ldr	r0, [pc, #140]	; (8001538 <ppp_status_cb+0x164>)
 80014aa:	f7ff fb73 	bl	8000b94 <uart_log>

            break;
 80014ae:	bf00      	nop
 80014b0:	e019      	b.n	80014e6 <ppp_status_cb+0x112>
        }
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <ppp_status_cb+0x168>)
 80014b4:	f7ff fb6e 	bl	8000b94 <uart_log>
            ppp_connected = false;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <ppp_status_cb+0x120>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <ppp_status_cb+0x124>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <ppp_status_cb+0x128>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
            break;
 80014ca:	e00c      	b.n	80014e6 <ppp_status_cb+0x112>
        default:
            uart_log("PPP connection error");
 80014cc:	481c      	ldr	r0, [pc, #112]	; (8001540 <ppp_status_cb+0x16c>)
 80014ce:	f7ff fb61 	bl	8000b94 <uart_log>
            ppp_connected = false;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <ppp_status_cb+0x120>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <ppp_status_cb+0x124>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <ppp_status_cb+0x128>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
            break;
 80014e4:	bf00      	nop
    }
}
 80014e6:	bf00      	nop
 80014e8:	3778      	adds	r7, #120	; 0x78
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	080142d8 	.word	0x080142d8
 80014f4:	20000574 	.word	0x20000574
 80014f8:	20000540 	.word	0x20000540
 80014fc:	20000538 	.word	0x20000538
 8001500:	20000548 	.word	0x20000548
 8001504:	080142e8 	.word	0x080142e8
 8001508:	20000550 	.word	0x20000550
 800150c:	080142fc 	.word	0x080142fc
 8001510:	2000054c 	.word	0x2000054c
 8001514:	08014310 	.word	0x08014310
 8001518:	08014324 	.word	0x08014324
 800151c:	08014344 	.word	0x08014344
 8001520:	20000544 	.word	0x20000544
 8001524:	08014358 	.word	0x08014358
 8001528:	08014380 	.word	0x08014380
 800152c:	080143b0 	.word	0x080143b0
 8001530:	080143d0 	.word	0x080143d0
 8001534:	080143f4 	.word	0x080143f4
 8001538:	0801440c 	.word	0x0801440c
 800153c:	0801442c 	.word	0x0801442c
 8001540:	08014450 	.word	0x08014450

08001544 <ppp_connection_init>:

void ppp_connection_init(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    uart_log("Initializing PPP connection...");
 8001548:	4812      	ldr	r0, [pc, #72]	; (8001594 <ppp_connection_init+0x50>)
 800154a:	f7ff fb23 	bl	8000b94 <uart_log>

    tcpip_init(NULL, NULL);
 800154e:	2100      	movs	r1, #0
 8001550:	2000      	movs	r0, #0
 8001552:	f000 f915 	bl	8001780 <tcpip_init>

    // Sử dụng hàm wrapper ppp_output_callback
    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 8001556:	2300      	movs	r3, #0
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <ppp_connection_init+0x54>)
 800155a:	4910      	ldr	r1, [pc, #64]	; (800159c <ppp_connection_init+0x58>)
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <ppp_connection_init+0x5c>)
 800155e:	f010 fa6b 	bl	8011a38 <pppos_create>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <ppp_connection_init+0x60>)
 8001566:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <ppp_connection_init+0x60>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d103      	bne.n	8001578 <ppp_connection_init+0x34>
        uart_log("Failed to create PPP control block");
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <ppp_connection_init+0x64>)
 8001572:	f7ff fb0f 	bl	8000b94 <uart_log>
        return;
 8001576:	e00b      	b.n	8001590 <ppp_connection_init+0x4c>
    }

    ppp_set_default(ppp);
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <ppp_connection_init+0x60>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fc30 	bl	8004de4 <netif_set_default>
    // Đặt mật khẩu nếu cần
    // ppp_set_auth(ppp, PPPAUTHTYPE_PAP, "user", "password");
    ppp_connect(ppp, 0);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <ppp_connection_init+0x60>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f00f ff22 	bl	80113d4 <ppp_connect>
}
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08014468 	.word	0x08014468
 8001598:	080013d5 	.word	0x080013d5
 800159c:	080013b5 	.word	0x080013b5
 80015a0:	20000544 	.word	0x20000544
 80015a4:	2000053c 	.word	0x2000053c
 80015a8:	08014488 	.word	0x08014488

080015ac <ppp_connection_poll>:

void ppp_connection_poll(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    // Hàm này nên được gọi thường xuyên từ vòng lặp chính
    sys_check_timeouts();
 80015b0:	f00b fa12 	bl	800c9d8 <sys_check_timeouts>
        // Có thể thêm log ở đây nếu cần, nhưng hạn chế để tránh spam
        // uart_log("PPP connection is active");
    } else {
        // uart_log("PPP connection is not active");
    }
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80015c2:	f00b fa3f 	bl	800ca44 <sys_timeouts_sleeptime>
 80015c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ce:	d10b      	bne.n	80015e8 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <tcpip_mbox_fetch+0x68>)
 80015d2:	f7ff fe20 	bl	8001216 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fe40 	bl	8001260 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <tcpip_mbox_fetch+0x68>)
 80015e2:	f7ff fe0e 	bl	8001202 <sys_mutex_lock>
    return;
 80015e6:	e018      	b.n	800161a <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 80015ee:	f00b f9f3 	bl	800c9d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80015f2:	e7e6      	b.n	80015c2 <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <tcpip_mbox_fetch+0x68>)
 80015f6:	f7ff fe0e 	bl	8001216 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fe2e 	bl	8001260 <sys_arch_mbox_fetch>
 8001604:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <tcpip_mbox_fetch+0x68>)
 8001608:	f7ff fdfb 	bl	8001202 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	d102      	bne.n	800161a <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8001614:	f00b f9e0 	bl	800c9d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8001618:	e7d3      	b.n	80015c2 <tcpip_mbox_fetch+0xa>
  }
}
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200007c4 	.word	0x200007c4

08001624 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <tcpip_thread+0x54>)
 800162e:	f7ff fde8 	bl	8001202 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <tcpip_thread+0x58>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <tcpip_thread+0x58>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <tcpip_thread+0x5c>)
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4610      	mov	r0, r2
 8001644:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <tcpip_thread+0x60>)
 800164e:	f7ff ffb3 	bl	80015b8 <tcpip_mbox_fetch>
    if (msg == NULL) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10a      	bne.n	800166e <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <tcpip_thread+0x64>)
 800165a:	229a      	movs	r2, #154	; 0x9a
 800165c:	490b      	ldr	r1, [pc, #44]	; (800168c <tcpip_thread+0x68>)
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <tcpip_thread+0x6c>)
 8001660:	f011 fcc2 	bl	8012fe8 <iprintf>
 8001664:	2000      	movs	r0, #0
 8001666:	f011 fdc1 	bl	80131ec <fflush>
 800166a:	f011 fd06 	bl	801307a <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f80f 	bl	8001694 <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 8001676:	e7e6      	b.n	8001646 <tcpip_thread+0x22>
 8001678:	200007c4 	.word	0x200007c4
 800167c:	20000578 	.word	0x20000578
 8001680:	2000057c 	.word	0x2000057c
 8001684:	20000580 	.word	0x20000580
 8001688:	080144ac 	.word	0x080144ac
 800168c:	080144cc 	.word	0x080144cc
 8001690:	080144ec 	.word	0x080144ec

08001694 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d018      	beq.n	80016d6 <tcpip_thread_handle_msg+0x42>
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d021      	beq.n	80016ec <tcpip_thread_handle_msg+0x58>
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d126      	bne.n	80016fa <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6850      	ldr	r0, [r2, #4]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6892      	ldr	r2, [r2, #8]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4798      	blx	r3
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 ff70 	bl	80055ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	2004      	movs	r0, #4
 80016d0:	f003 f996 	bl	8004a00 <memp_free>
      break;
 80016d4:	e01c      	b.n	8001710 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6892      	ldr	r2, [r2, #8]
 80016de:	4610      	mov	r0, r2
 80016e0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2003      	movs	r0, #3
 80016e6:	f003 f98b 	bl	8004a00 <memp_free>
      break;
 80016ea:	e011      	b.n	8001710 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6892      	ldr	r2, [r2, #8]
 80016f4:	4610      	mov	r0, r2
 80016f6:	4798      	blx	r3
      break;
 80016f8:	e00a      	b.n	8001710 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <tcpip_thread_handle_msg+0x84>)
 80016fc:	22dd      	movs	r2, #221	; 0xdd
 80016fe:	4907      	ldr	r1, [pc, #28]	; (800171c <tcpip_thread_handle_msg+0x88>)
 8001700:	4807      	ldr	r0, [pc, #28]	; (8001720 <tcpip_thread_handle_msg+0x8c>)
 8001702:	f011 fc71 	bl	8012fe8 <iprintf>
 8001706:	2000      	movs	r0, #0
 8001708:	f011 fd70 	bl	80131ec <fflush>
 800170c:	f011 fcb5 	bl	801307a <abort>
      break;
  }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	080144ac 	.word	0x080144ac
 800171c:	080144cc 	.word	0x080144cc
 8001720:	080144ec 	.word	0x080144ec

08001724 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800172e:	2003      	movs	r0, #3
 8001730:	f003 f8f6 	bl	8004920 <memp_malloc>
 8001734:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <tcpip_try_callback+0x1e>
    return ERR_MEM;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	e017      	b.n	8001772 <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <tcpip_try_callback+0x58>)
 8001758:	f7ff fd76 	bl	8001248 <sys_mbox_trypost>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	2003      	movs	r0, #3
 8001766:	f003 f94b 	bl	8004a00 <memp_free>
    return ERR_MEM;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e000      	b.n	8001772 <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000580 	.word	0x20000580

08001780 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  lwip_init();
 800178a:	f001 ff57 	bl	800363c <lwip_init>

  tcpip_init_done = initfunc;
 800178e:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <tcpip_init+0x7c>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <tcpip_init+0x80>)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800179a:	2100      	movs	r1, #0
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <tcpip_init+0x84>)
 800179e:	f7ff fd44 	bl	800122a <sys_mbox_new>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <tcpip_init+0x88>)
 80017aa:	f240 229a 	movw	r2, #666	; 0x29a
 80017ae:	4917      	ldr	r1, [pc, #92]	; (800180c <tcpip_init+0x8c>)
 80017b0:	4817      	ldr	r0, [pc, #92]	; (8001810 <tcpip_init+0x90>)
 80017b2:	f011 fc19 	bl	8012fe8 <iprintf>
 80017b6:	2000      	movs	r0, #0
 80017b8:	f011 fd18 	bl	80131ec <fflush>
 80017bc:	f011 fc5d 	bl	801307a <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80017c0:	4814      	ldr	r0, [pc, #80]	; (8001814 <tcpip_init+0x94>)
 80017c2:	f7ff fd10 	bl	80011e6 <sys_mutex_new>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <tcpip_init+0x88>)
 80017ce:	f240 229e 	movw	r2, #670	; 0x29e
 80017d2:	4911      	ldr	r1, [pc, #68]	; (8001818 <tcpip_init+0x98>)
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <tcpip_init+0x90>)
 80017d6:	f011 fc07 	bl	8012fe8 <iprintf>
 80017da:	2000      	movs	r0, #0
 80017dc:	f011 fd06 	bl	80131ec <fflush>
 80017e0:	f011 fc4b 	bl	801307a <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80017e4:	2301      	movs	r3, #1
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2300      	movs	r3, #0
 80017ea:	2200      	movs	r2, #0
 80017ec:	490b      	ldr	r1, [pc, #44]	; (800181c <tcpip_init+0x9c>)
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <tcpip_init+0xa0>)
 80017f0:	f7ff fd43 	bl	800127a <sys_thread_new>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000578 	.word	0x20000578
 8001800:	2000057c 	.word	0x2000057c
 8001804:	20000580 	.word	0x20000580
 8001808:	080144ac 	.word	0x080144ac
 800180c:	08014514 	.word	0x08014514
 8001810:	080144ec 	.word	0x080144ec
 8001814:	200007c4 	.word	0x200007c4
 8001818:	08014538 	.word	0x08014538
 800181c:	08001625 	.word	0x08001625
 8001820:	0801455c 	.word	0x0801455c

08001824 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	88db      	ldrh	r3, [r3, #6]
 8001830:	3301      	adds	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	88db      	ldrh	r3, [r3, #6]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	88db      	ldrh	r3, [r3, #6]
 8001844:	3301      	adds	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	88db      	ldrh	r3, [r3, #6]
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d902      	bls.n	8001890 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
  }
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d90a      	bls.n	80018e4 <mqtt_ringbuf_advance_get_idx+0x28>
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <mqtt_ringbuf_advance_get_idx+0x54>)
 80018d0:	22cb      	movs	r2, #203	; 0xcb
 80018d2:	4910      	ldr	r1, [pc, #64]	; (8001914 <mqtt_ringbuf_advance_get_idx+0x58>)
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <mqtt_ringbuf_advance_get_idx+0x5c>)
 80018d6:	f011 fb87 	bl	8012fe8 <iprintf>
 80018da:	2000      	movs	r0, #0
 80018dc:	f011 fc86 	bl	80131ec <fflush>
 80018e0:	f011 fbcb 	bl	801307a <abort>

  rb->get += len;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	885a      	ldrh	r2, [r3, #2]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	885b      	ldrh	r3, [r3, #2]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d906      	bls.n	8001908 <mqtt_ringbuf_advance_get_idx+0x4c>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	885b      	ldrh	r3, [r3, #2]
 80018fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	805a      	strh	r2, [r3, #2]
  }
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	080145fc 	.word	0x080145fc
 8001914:	08014620 	.word	0x08014620
 8001918:	08014660 	.word	0x08014660

0800191c <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	885b      	ldrh	r3, [r3, #2]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d303      	bcc.n	8001942 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001940:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	b29b      	uxth	r3, r3
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffda 	bl	800191c <mqtt_ringbuf_len>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	885b      	ldrh	r3, [r3, #2]
 8001970:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001974:	429a      	cmp	r2, r3
 8001976:	da04      	bge.n	8001982 <mqtt_output_send+0x2e>
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffcf 	bl	800191c <mqtt_ringbuf_len>
 800197e:	4603      	mov	r3, r0
 8001980:	e004      	b.n	800198c <mqtt_output_send+0x38>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	885b      	ldrh	r3, [r3, #2]
 8001986:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800198a:	b29b      	uxth	r3, r3
 800198c:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001994:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <mqtt_output_send+0x5e>
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <mqtt_output_send+0x168>)
 800199e:	22f0      	movs	r2, #240	; 0xf0
 80019a0:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <mqtt_output_send+0x16c>)
 80019a2:	4848      	ldr	r0, [pc, #288]	; (8001ac4 <mqtt_output_send+0x170>)
 80019a4:	f011 fb20 	bl	8012fe8 <iprintf>
 80019a8:	2000      	movs	r0, #0
 80019aa:	f011 fc1f 	bl	80131ec <fflush>
 80019ae:	f011 fb64 	bl	801307a <abort>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80019b2:	89bb      	ldrh	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d07c      	beq.n	8001ab2 <mqtt_output_send+0x15e>
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d079      	beq.n	8001ab2 <mqtt_output_send+0x15e>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80019be:	89ba      	ldrh	r2, [r7, #12]
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90d      	bls.n	80019e2 <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa6 	bl	800191c <mqtt_ringbuf_len>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	bf34      	ite	cc
 80019da:	2301      	movcc	r3, #1
 80019dc:	2300      	movcs	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff5a 	bl	800189c <mqtt_ringbuf_get_ptr>
 80019e8:	4601      	mov	r1, r0
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <mqtt_output_send+0xa0>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e000      	b.n	80019f6 <mqtt_output_send+0xa2>
 80019f4:	2301      	movs	r3, #1
 80019f6:	89ba      	ldrh	r2, [r7, #12]
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	f008 ff3f 	bl	800a87c <tcp_write>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d146      	bne.n	8001a98 <mqtt_output_send+0x144>
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d043      	beq.n	8001a98 <mqtt_output_send+0x144>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8001a10:	89bb      	ldrh	r3, [r7, #12]
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff51 	bl	80018bc <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001a20:	461c      	mov	r4, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff7a 	bl	800191c <mqtt_ringbuf_len>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	885b      	ldrh	r3, [r3, #2]
 8001a30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a34:	429a      	cmp	r2, r3
 8001a36:	da04      	bge.n	8001a42 <mqtt_output_send+0xee>
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff6f 	bl	800191c <mqtt_ringbuf_len>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	e003      	b.n	8001a4a <mqtt_output_send+0xf6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	da03      	bge.n	8001a56 <mqtt_output_send+0x102>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001a54:	e014      	b.n	8001a80 <mqtt_output_send+0x12c>
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff60 	bl	800191c <mqtt_ringbuf_len>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	da04      	bge.n	8001a76 <mqtt_output_send+0x122>
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff55 	bl	800191c <mqtt_ringbuf_len>
 8001a72:	4603      	mov	r3, r0
 8001a74:	e004      	b.n	8001a80 <mqtt_output_send+0x12c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff0a 	bl	800189c <mqtt_ringbuf_get_ptr>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	89ba      	ldrh	r2, [r7, #12]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f008 fef4 	bl	800a87c <tcp_write>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8001a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <mqtt_output_send+0x160>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8001aa0:	89bb      	ldrh	r3, [r7, #12]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff09 	bl	80018bc <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8001aaa:	6838      	ldr	r0, [r7, #0]
 8001aac:	f009 fda4 	bl	800b5f8 <tcp_output>
 8001ab0:	e000      	b.n	8001ab4 <mqtt_output_send+0x160>
    return;
 8001ab2:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	080145fc 	.word	0x080145fc
 8001ac0:	08014688 	.word	0x08014688
 8001ac4:	08014660 	.word	0x08014660

08001ac8 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10b      	bne.n	8001afa <mqtt_create_request+0x32>
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <mqtt_create_request+0x8c>)
 8001ae4:	f240 1223 	movw	r2, #291	; 0x123
 8001ae8:	491b      	ldr	r1, [pc, #108]	; (8001b58 <mqtt_create_request+0x90>)
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <mqtt_create_request+0x94>)
 8001aec:	f011 fa7c 	bl	8012fe8 <iprintf>
 8001af0:	2000      	movs	r0, #0
 8001af2:	f011 fb7b 	bl	80131ec <fflush>
 8001af6:	f011 fac0 	bl	801307a <abort>
  for (n = 0; n < r_objs_len; n++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	74fb      	strb	r3, [r7, #19]
 8001afe:	e01f      	b.n	8001b40 <mqtt_create_request+0x78>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	440b      	add	r3, r1
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d111      	bne.n	8001b3a <mqtt_create_request+0x72>
      r = &r_objs[n];
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	6a3a      	ldr	r2, [r7, #32]
 8001b30:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	819a      	strh	r2, [r3, #12]
      break;
 8001b38:	e006      	b.n	8001b48 <mqtt_create_request+0x80>
  for (n = 0; n < r_objs_len; n++) {
 8001b3a:	7cfb      	ldrb	r3, [r7, #19]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	74fb      	strb	r3, [r7, #19]
 8001b40:	7cfa      	ldrb	r2, [r7, #19]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3db      	bcc.n	8001b00 <mqtt_create_request+0x38>
    }
  }
  return r;
 8001b48:	697b      	ldr	r3, [r7, #20]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	080145fc 	.word	0x080145fc
 8001b58:	080146a8 	.word	0x080146a8
 8001b5c:	08014660 	.word	0x08014660

08001b60 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10b      	bne.n	8001b90 <mqtt_append_request+0x30>
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <mqtt_append_request+0x9c>)
 8001b7a:	f240 123f 	movw	r2, #319	; 0x13f
 8001b7e:	4920      	ldr	r1, [pc, #128]	; (8001c00 <mqtt_append_request+0xa0>)
 8001b80:	4820      	ldr	r0, [pc, #128]	; (8001c04 <mqtt_append_request+0xa4>)
 8001b82:	f011 fa31 	bl	8012fe8 <iprintf>
 8001b86:	2000      	movs	r0, #0
 8001b88:	f011 fb30 	bl	80131ec <fflush>
 8001b8c:	f011 fa75 	bl	801307a <abort>

  /* Iterate through queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e00a      	b.n	8001bae <mqtt_append_request+0x4e>
    time_before += iter->timeout_diff;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	89da      	ldrh	r2, [r3, #14]
 8001b9c:	8a7b      	ldrh	r3, [r7, #18]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	827b      	strh	r3, [r7, #18]
    head = iter;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f1      	bne.n	8001b98 <mqtt_append_request+0x38>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8001bb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb8:	2b1e      	cmp	r3, #30
 8001bba:	dd0b      	ble.n	8001bd4 <mqtt_append_request+0x74>
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <mqtt_append_request+0x9c>)
 8001bbe:	f240 1247 	movw	r2, #327	; 0x147
 8001bc2:	4911      	ldr	r1, [pc, #68]	; (8001c08 <mqtt_append_request+0xa8>)
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <mqtt_append_request+0xa4>)
 8001bc6:	f011 fa0f 	bl	8012fe8 <iprintf>
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f011 fb0e 	bl	80131ec <fflush>
 8001bd0:	f011 fa53 	bl	801307a <abort>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8001bd4:	8a7b      	ldrh	r3, [r7, #18]
 8001bd6:	f1c3 031e 	rsb	r3, r3, #30
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d103      	bne.n	8001bee <mqtt_append_request+0x8e>
    *tail = r;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8001bec:	e002      	b.n	8001bf4 <mqtt_append_request+0x94>
    head->next = r;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	080145fc 	.word	0x080145fc
 8001c00:	080146cc 	.word	0x080146cc
 8001c04:	08014660 	.word	0x08014660
 8001c08:	080146f0 	.word	0x080146f0

08001c0c <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <mqtt_delete_request+0x14>
    r->next = r;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
  }
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <mqtt_take_request+0x32>
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <mqtt_take_request+0xa4>)
 8001c48:	f240 1267 	movw	r2, #359	; 0x167
 8001c4c:	4921      	ldr	r1, [pc, #132]	; (8001cd4 <mqtt_take_request+0xa8>)
 8001c4e:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <mqtt_take_request+0xac>)
 8001c50:	f011 f9ca 	bl	8012fe8 <iprintf>
 8001c54:	2000      	movs	r0, #0
 8001c56:	f011 fac9 	bl	80131ec <fflush>
 8001c5a:	f011 fa0e 	bl	801307a <abort>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e009      	b.n	8001c7a <mqtt_take_request+0x4e>
    if (iter->pkt_id == pkt_id) {
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	899b      	ldrh	r3, [r3, #12]
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d008      	beq.n	8001c82 <mqtt_take_request+0x56>
      break;
    }
    prev = iter;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <mqtt_take_request+0x3a>
 8001c80:	e000      	b.n	8001c84 <mqtt_take_request+0x58>
      break;
 8001c82:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <mqtt_take_request+0x98>
    /* unchain */
    if (prev == NULL) {
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <mqtt_take_request+0x6e>
      *tail = iter->next;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e003      	b.n	8001ca2 <mqtt_take_request+0x76>
    } else {
      prev->next = iter->next;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <mqtt_take_request+0x92>
      iter->next->timeout_diff += iter->timeout_diff;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	89d1      	ldrh	r1, [r2, #14]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	89d2      	ldrh	r2, [r2, #14]
 8001cb8:	440a      	add	r2, r1
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	080145fc 	.word	0x080145fc
 8001cd4:	08014728 	.word	0x08014728
 8001cd8:	08014660 	.word	0x08014660

08001cdc <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <mqtt_request_time_elapsed+0x2a>
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <mqtt_request_time_elapsed+0xa0>)
 8001cf0:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8001cf4:	4922      	ldr	r1, [pc, #136]	; (8001d80 <mqtt_request_time_elapsed+0xa4>)
 8001cf6:	4823      	ldr	r0, [pc, #140]	; (8001d84 <mqtt_request_time_elapsed+0xa8>)
 8001cf8:	f011 f976 	bl	8012fe8 <iprintf>
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f011 fa75 	bl	80131ec <fflush>
 8001d02:	f011 f9ba 	bl	801307a <abort>
  r = *tail;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8001d0c:	e02c      	b.n	8001d68 <mqtt_request_time_elapsed+0x8c>
    if (t >= r->timeout_diff) {
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	89db      	ldrh	r3, [r3, #14]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d31c      	bcc.n	8001d54 <mqtt_request_time_elapsed+0x78>
      t -= (u8_t)r->timeout_diff;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	89db      	ldrh	r3, [r3, #14]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <mqtt_request_time_elapsed+0x6a>
        r->cb(r->arg, ERR_TIMEOUT);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	f06f 0102 	mvn.w	r1, #2
 8001d42:	4610      	mov	r0, r2
 8001d44:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff ff60 	bl	8001c0c <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e009      	b.n	8001d68 <mqtt_request_time_elapsed+0x8c>
    } else {
      r->timeout_diff -= t;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	89da      	ldrh	r2, [r3, #14]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	81da      	strh	r2, [r3, #14]
      t = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <mqtt_request_time_elapsed+0x98>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1cc      	bne.n	8001d0e <mqtt_request_time_elapsed+0x32>
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	080145fc 	.word	0x080145fc
 8001d80:	08014748 	.word	0x08014748
 8001d84:	08014660 	.word	0x08014660

08001d88 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <mqtt_clear_requests+0x26>
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <mqtt_clear_requests+0x54>)
 8001d98:	f240 12a7 	movw	r2, #423	; 0x1a7
 8001d9c:	4910      	ldr	r1, [pc, #64]	; (8001de0 <mqtt_clear_requests+0x58>)
 8001d9e:	4811      	ldr	r0, [pc, #68]	; (8001de4 <mqtt_clear_requests+0x5c>)
 8001da0:	f011 f922 	bl	8012fe8 <iprintf>
 8001da4:	2000      	movs	r0, #0
 8001da6:	f011 fa21 	bl	80131ec <fflush>
 8001daa:	f011 f966 	bl	801307a <abort>
  for (iter = *tail; iter != NULL; iter = next) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e007      	b.n	8001dc6 <mqtt_clear_requests+0x3e>
    next = iter->next;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ff25 	bl	8001c0c <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f4      	bne.n	8001db6 <mqtt_clear_requests+0x2e>
  }
  *tail = NULL;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	080145fc 	.word	0x080145fc
 8001de0:	08014770 	.word	0x08014770
 8001de4:	08014660 	.word	0x08014660

08001de8 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <mqtt_init_requests+0x28>
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <mqtt_init_requests+0x58>)
 8001dfa:	f240 12b7 	movw	r2, #439	; 0x1b7
 8001dfe:	4911      	ldr	r1, [pc, #68]	; (8001e44 <mqtt_init_requests+0x5c>)
 8001e00:	4811      	ldr	r0, [pc, #68]	; (8001e48 <mqtt_init_requests+0x60>)
 8001e02:	f011 f8f1 	bl	8012fe8 <iprintf>
 8001e06:	2000      	movs	r0, #0
 8001e08:	f011 f9f0 	bl	80131ec <fflush>
 8001e0c:	f011 f935 	bl	801307a <abort>
  for (n = 0; n < r_objs_len; n++) {
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e00b      	b.n	8001e2e <mqtt_init_requests+0x46>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	440a      	add	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d3ef      	bcc.n	8001e16 <mqtt_init_requests+0x2e>
  }
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	080145fc 	.word	0x080145fc
 8001e44:	08014794 	.word	0x08014794
 8001e48:	08014660 	.word	0x08014660

08001e4c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fcfd 	bl	800185c <mqtt_ringbuf_put>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fceb 	bl	800185c <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fce5 	bl	800185c <mqtt_ringbuf_put>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	82fb      	strh	r3, [r7, #22]
 8001eac:	e00a      	b.n	8001ec4 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8001eae:	8afb      	ldrh	r3, [r7, #22]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fccf 	bl	800185c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001ebe:	8afb      	ldrh	r3, [r7, #22]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	82fb      	strh	r3, [r7, #22]
 8001ec4:	8afa      	ldrh	r2, [r7, #22]
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3f0      	bcc.n	8001eae <mqtt_output_append_buf+0x14>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fcb5 	bl	800185c <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fcaf 	bl	800185c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	82fb      	strh	r3, [r7, #22]
 8001f02:	e00a      	b.n	8001f1a <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8001f04:	8afb      	ldrh	r3, [r7, #22]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fca4 	bl	800185c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	3301      	adds	r3, #1
 8001f18:	82fb      	strh	r3, [r7, #22]
 8001f1a:	8afa      	ldrh	r2, [r7, #22]
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3f0      	bcc.n	8001f04 <mqtt_output_append_string+0x30>
  }
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70bb      	strb	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	78bb      	ldrb	r3, [r7, #2]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	787b      	ldrb	r3, [r7, #1]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f003 0306 	and.w	r3, r3, #6
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b25a      	sxtb	r2, r3
 8001f6a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff65 	bl	8001e4c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8001f82:	8abb      	ldrh	r3, [r7, #20]
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	8abb      	ldrh	r3, [r7, #20]
 8001f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f90:	d902      	bls.n	8001f98 <mqtt_output_append_fixed_header+0x6e>
 8001f92:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001f96:	e000      	b.n	8001f9a <mqtt_output_append_fixed_header+0x70>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff52 	bl	8001e4c <mqtt_output_append_u8>
    r_length >>= 7;
 8001fa8:	8abb      	ldrh	r3, [r7, #20]
 8001faa:	09db      	lsrs	r3, r3, #7
 8001fac:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8001fae:	8abb      	ldrh	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e6      	bne.n	8001f82 <mqtt_output_append_fixed_header+0x58>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <mqtt_output_check_space+0x30>
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <mqtt_output_check_space+0x64>)
 8001fd6:	f240 2207 	movw	r2, #519	; 0x207
 8001fda:	4912      	ldr	r1, [pc, #72]	; (8002024 <mqtt_output_check_space+0x68>)
 8001fdc:	4812      	ldr	r0, [pc, #72]	; (8002028 <mqtt_output_check_space+0x6c>)
 8001fde:	f011 f803 	bl	8012fe8 <iprintf>
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f011 f902 	bl	80131ec <fflush>
 8001fe8:	f011 f847 	bl	801307a <abort>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	09db      	lsrs	r3, r3, #7
 8001ff6:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8001ff8:	887b      	ldrh	r3, [r7, #2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f6      	bne.n	8001fec <mqtt_output_check_space+0x30>

  return (total_len <= mqtt_ringbuf_free(rb));
 8001ffe:	89fc      	ldrh	r4, [r7, #14]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fc8b 	bl	800191c <mqtt_ringbuf_len>
 8002006:	4603      	mov	r3, r0
 8002008:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800200c:	429c      	cmp	r4, r3
 800200e:	bfd4      	ite	le
 8002010:	2301      	movle	r3, #1
 8002012:	2300      	movgt	r3, #0
 8002014:	b2db      	uxtb	r3, r3
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
 8002020:	080145fc 	.word	0x080145fc
 8002024:	080147b8 	.word	0x080147b8
 8002028:	08014660 	.word	0x08014660

0800202c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <mqtt_close+0x2a>
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <mqtt_close+0xbc>)
 8002040:	f240 221b 	movw	r2, #539	; 0x21b
 8002044:	4929      	ldr	r1, [pc, #164]	; (80020ec <mqtt_close+0xc0>)
 8002046:	482a      	ldr	r0, [pc, #168]	; (80020f0 <mqtt_close+0xc4>)
 8002048:	f010 ffce 	bl	8012fe8 <iprintf>
 800204c:	2000      	movs	r0, #0
 800204e:	f011 f8cd 	bl	80131ec <fflush>
 8002052:	f011 f812 	bl	801307a <abort>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d024      	beq.n	80020a8 <mqtt_close+0x7c>
    err_t res;
    altcp_recv(client->conn, NULL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f005 fb37 	bl	80076d8 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f005 fb7d 	bl	8007770 <tcp_err>
    altcp_sent(client->conn, NULL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f005 fb51 	bl	8007724 <tcp_sent>
    res = altcp_close(client->conn);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 f8cc 	bl	8006224 <tcp_close>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <mqtt_close+0x76>
      altcp_abort(client->conn);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4618      	mov	r0, r3
 800209e:	f004 f9af 	bl	8006400 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3318      	adds	r3, #24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fe6b 	bl	8001d88 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	480f      	ldr	r0, [pc, #60]	; (80020f4 <mqtt_close+0xc8>)
 80020b6:	f00a fc55 	bl	800c964 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7a9b      	ldrb	r3, [r3, #10]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <mqtt_close+0xb2>

    client->conn_state = TCP_DISCONNECTED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <mqtt_close+0xb2>
      client->connect_cb(client, client->connect_arg, reason);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6911      	ldr	r1, [r2, #16]
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
    }
  }
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	080145fc 	.word	0x080145fc
 80020ec:	080147dc 	.word	0x080147dc
 80020f0:	08014660 	.word	0x08014660
 80020f4:	080020f9 	.word	0x080020f9

080020f8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <mqtt_cyclic_timer+0x2e>
 800210e:	4b44      	ldr	r3, [pc, #272]	; (8002220 <mqtt_cyclic_timer+0x128>)
 8002110:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002114:	4943      	ldr	r1, [pc, #268]	; (8002224 <mqtt_cyclic_timer+0x12c>)
 8002116:	4844      	ldr	r0, [pc, #272]	; (8002228 <mqtt_cyclic_timer+0x130>)
 8002118:	f010 ff66 	bl	8012fe8 <iprintf>
 800211c:	2000      	movs	r0, #0
 800211e:	f011 f865 	bl	80131ec <fflush>
 8002122:	f010 ffaa 	bl	801307a <abort>

  if (client->conn_state == MQTT_CONNECTING) {
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	7a9b      	ldrb	r3, [r3, #10]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d115      	bne.n	800215a <mqtt_cyclic_timer+0x62>
    client->cyclic_tick++;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	2b63      	cmp	r3, #99	; 0x63
 8002148:	dd5d      	ble.n	8002206 <mqtt_cyclic_timer+0x10e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800214a:	f240 1101 	movw	r1, #257	; 0x101
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f7ff ff6c 	bl	800202c <mqtt_close>
      restart_timer = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e055      	b.n	8002206 <mqtt_cyclic_timer+0x10e>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	7a9b      	ldrb	r3, [r3, #10]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d14f      	bne.n	8002202 <mqtt_cyclic_timer+0x10a>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3318      	adds	r3, #24
 8002166:	2105      	movs	r1, #5
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fdb7 	bl	8001cdc <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	885b      	ldrh	r3, [r3, #2]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d047      	beq.n	8002206 <mqtt_cyclic_timer+0x10e>

      client->server_watchdog++;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	889b      	ldrh	r3, [r3, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	889b      	ldrh	r3, [r3, #4]
 8002186:	461a      	mov	r2, r3
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	885b      	ldrh	r3, [r3, #2]
 8002192:	4619      	mov	r1, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	885b      	ldrh	r3, [r3, #2]
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	440b      	add	r3, r1
 800219e:	429a      	cmp	r2, r3
 80021a0:	dd06      	ble.n	80021b0 <mqtt_cyclic_timer+0xb8>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80021a2:	f240 1101 	movw	r1, #257	; 0x101
 80021a6:	68b8      	ldr	r0, [r7, #8]
 80021a8:	f7ff ff40 	bl	800202c <mqtt_close>
        restart_timer = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      client->cyclic_tick++;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	801a      	strh	r2, [r3, #0]
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	8852      	ldrh	r2, [r2, #2]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	db1a      	blt.n	8002206 <mqtt_cyclic_timer+0x10e>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	33ec      	adds	r3, #236	; 0xec
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fef0 	bl	8001fbc <mqtt_output_check_space>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <mqtt_cyclic_timer+0x10e>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80021e8:	2300      	movs	r3, #0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	210c      	movs	r1, #12
 80021f6:	f7ff fe98 	bl	8001f2a <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	e001      	b.n	8002206 <mqtt_cyclic_timer+0x10e>
        }
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <mqtt_cyclic_timer+0x120>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4907      	ldr	r1, [pc, #28]	; (800222c <mqtt_cyclic_timer+0x134>)
 8002210:	f241 3088 	movw	r0, #5000	; 0x1388
 8002214:	f00a fb7a 	bl	800c90c <sys_timeout>
  }
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	080145fc 	.word	0x080145fc
 8002224:	080147f8 	.word	0x080147f8
 8002228:	08014660 	.word	0x08014660
 800222c:	080020f9 	.word	0x080020f9

08002230 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	4608      	mov	r0, r1
 800223a:	4611      	mov	r1, r2
 800223c:	461a      	mov	r2, r3
 800223e:	4603      	mov	r3, r0
 8002240:	70fb      	strb	r3, [r7, #3]
 8002242:	460b      	mov	r3, r1
 8002244:	803b      	strh	r3, [r7, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	33ec      	adds	r3, #236	; 0xec
 8002252:	2102      	movs	r1, #2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff feb1 	bl	8001fbc <mqtt_output_check_space>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01d      	beq.n	800229c <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002266:	78ba      	ldrb	r2, [r7, #2]
 8002268:	78f9      	ldrb	r1, [r7, #3]
 800226a:	2302      	movs	r3, #2
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	f7ff fe58 	bl	8001f2a <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	33ec      	adds	r3, #236	; 0xec
 800227e:	883a      	ldrh	r2, [r7, #0]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fdf1 	bl	8001e6a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7ff fb5d 	bl	8001954 <mqtt_output_send>
 800229a:	e001      	b.n	80022a0 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800229c:	23ff      	movs	r3, #255	; 0xff
 800229e:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80022a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <mqtt_incoming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incoming_suback(struct mqtt_request_t *r, u8_t result)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <mqtt_incoming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6890      	ldr	r0, [r2, #8]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	2a02      	cmp	r2, #2
 80022cc:	d801      	bhi.n	80022d2 <mqtt_incoming_suback+0x26>
 80022ce:	2200      	movs	r2, #0
 80022d0:	e001      	b.n	80022d6 <mqtt_incoming_suback+0x2a>
 80022d2:	f06f 020c 	mvn.w	r2, #12
 80022d6:	4611      	mov	r1, r2
 80022d8:	4798      	blx	r3
  }
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <mqtt_message_received>:
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length,
                      u8_t *var_hdr_payload)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b08f      	sub	sp, #60	; 0x3c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	72fb      	strb	r3, [r7, #11]
 80022f2:	4613      	mov	r3, r2
 80022f4:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80022f6:	2300      	movs	r3, #0
 80022f8:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  u16_t pkt_id = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	85bb      	strh	r3, [r7, #44]	; 0x2c

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
 800230a:	7afa      	ldrb	r2, [r7, #11]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002310:	429a      	cmp	r2, r3
 8002312:	d90b      	bls.n	800232c <mqtt_message_received+0x48>
 8002314:	4ba3      	ldr	r3, [pc, #652]	; (80025a4 <mqtt_message_received+0x2c0>)
 8002316:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800231a:	49a3      	ldr	r1, [pc, #652]	; (80025a8 <mqtt_message_received+0x2c4>)
 800231c:	48a3      	ldr	r0, [pc, #652]	; (80025ac <mqtt_message_received+0x2c8>)
 800231e:	f010 fe63 	bl	8012fe8 <iprintf>
 8002322:	2000      	movs	r0, #0
 8002324:	f010 ff62 	bl	80131ec <fflush>
 8002328:	f010 fea7 	bl	801307a <abort>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800232c:	7afa      	ldrb	r2, [r7, #11]
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	dd09      	ble.n	800234a <mqtt_message_received+0x66>
 8002336:	4b9b      	ldr	r3, [pc, #620]	; (80025a4 <mqtt_message_received+0x2c0>)
 8002338:	f240 22aa 	movw	r2, #682	; 0x2aa
 800233c:	499c      	ldr	r1, [pc, #624]	; (80025b0 <mqtt_message_received+0x2cc>)
 800233e:	489b      	ldr	r0, [pc, #620]	; (80025ac <mqtt_message_received+0x2c8>)
 8002340:	f7fe ffa9 	bl	8001296 <lwip_win32_platform_diag>
 8002344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002348:	e184      	b.n	8002654 <mqtt_message_received+0x370>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800234a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	7a9b      	ldrb	r3, [r3, #10]
 8002356:	2b02      	cmp	r3, #2
 8002358:	f040 8165 	bne.w	8002626 <mqtt_message_received+0x342>
      if (length < 2) {
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f240 8163 	bls.w	800262a <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	3301      	adds	r3, #1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800236c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 8159 	bne.w	8002626 <mqtt_message_received+0x342>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2203      	movs	r2, #3
 800237e:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != NULL) {
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 814e 	beq.w	8002626 <mqtt_message_received+0x342>
          client->connect_cb(client, client->connect_arg, res);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	4798      	blx	r3
 8002398:	e145      	b.n	8002626 <mqtt_message_received+0x342>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800239a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800239e:	2b0d      	cmp	r3, #13
 80023a0:	f000 8141 	beq.w	8002626 <mqtt_message_received+0x342>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80023a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	f040 80d2 	bne.w	8002552 <mqtt_message_received+0x26e>
    u16_t payload_offset = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80023b2:	893b      	ldrh	r3, [r7, #8]
 80023b4:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80023bc:	105b      	asrs	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (client->msg_idx == (u32_t)(fixed_hdr_len + length)) {
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	7af9      	ldrb	r1, [r7, #11]
 80023ce:	893a      	ldrh	r2, [r7, #8]
 80023d0:	440a      	add	r2, r1
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f040 8085 	bne.w	80024e2 <mqtt_message_received+0x1fe>
      /* First publish message frame. Should have topic and pkt id*/
      size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80023e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <mqtt_message_received+0x108>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e000      	b.n	80023ee <mqtt_message_received+0x10a>
 80023ec:	2300      	movs	r3, #0
 80023ee:	847b      	strh	r3, [r7, #34]	; 0x22
      if (length < 2 + qos_len) {
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023f4:	3302      	adds	r3, #2
 80023f6:	429a      	cmp	r2, r3
 80023f8:	f2c0 8119 	blt.w	800262e <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80023fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	843b      	strh	r3, [r7, #32]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8002402:	8c3b      	ldrh	r3, [r7, #32]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	b29a      	uxth	r2, r3
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	3301      	adds	r3, #1
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	843b      	strh	r3, [r7, #32]
      if ((topic_len > length - (2 + qos_len)) ||
 8002414:	8c3a      	ldrh	r2, [r7, #32]
 8002416:	8939      	ldrh	r1, [r7, #8]
 8002418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800241a:	3302      	adds	r3, #2
 800241c:	1acb      	subs	r3, r1, r3
 800241e:	429a      	cmp	r2, r3
 8002420:	f300 8107 	bgt.w	8002632 <mqtt_message_received+0x34e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8002424:	8c3a      	ldrh	r2, [r7, #32]
 8002426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800242a:	1acb      	subs	r3, r1, r3
 800242c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	f200 80ff 	bhi.w	8002632 <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8002434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002436:	3302      	adds	r3, #2
 8002438:	61fb      	str	r3, [r7, #28]
      after_topic = 2 + topic_len;
 800243a:	8c3b      	ldrh	r3, [r7, #32]
 800243c:	3302      	adds	r3, #2
 800243e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8002440:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <mqtt_message_received+0x16a>
 800244a:	2302      	movs	r3, #2
 800244c:	e000      	b.n	8002450 <mqtt_message_received+0x16c>
 800244e:	2301      	movs	r3, #1
 8002450:	441a      	add	r2, r3
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	429a      	cmp	r2, r3
 8002456:	f200 80ee 	bhi.w	8002636 <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800245a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01a      	beq.n	8002498 <mqtt_message_received+0x1b4>
        if (length < after_topic + 2U) {
 8002462:	893a      	ldrh	r2, [r7, #8]
 8002464:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002466:	3302      	adds	r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	f0c0 80e6 	bcc.w	800263a <mqtt_message_received+0x356>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800246e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b29a      	uxth	r2, r3
 800247c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800247e:	3301      	adds	r3, #1
 8002480:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002482:	440b      	add	r3, r1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8002490:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002492:	3302      	adds	r3, #2
 8002494:	863b      	strh	r3, [r7, #48]	; 0x30
 8002496:	e002      	b.n	800249e <mqtt_message_received+0x1ba>
      } else {
        client->inpub_pkt_id = 0;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800249e:	8c3b      	ldrh	r3, [r7, #32]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	76fb      	strb	r3, [r7, #27]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80024a8:	8c3b      	ldrh	r3, [r7, #32]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80024b2:	893a      	ldrh	r2, [r7, #8]
 80024b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80024ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80024bc:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <mqtt_message_received+0x1f4>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80024ce:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	440a      	add	r2, r1
 80024d4:	69f9      	ldr	r1, [r7, #28]
 80024d6:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 80024d8:	8c3b      	ldrh	r3, [r7, #32]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	7efa      	ldrb	r2, [r7, #27]
 80024e0:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 80024e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <mqtt_message_received+0x20c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 809b 	bne.w	8002626 <mqtt_message_received+0x342>
      if (length < (size_t)(payload_offset + payload_length)) {
 80024f0:	893b      	ldrh	r3, [r7, #8]
 80024f2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80024f4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80024f6:	440a      	add	r2, r1
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f0c0 80a0 	bcc.w	800263e <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      if (client->data_cb != NULL) {
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00e      	beq.n	8002524 <mqtt_message_received+0x240>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800250e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002512:	18d1      	adds	r1, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002522:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d17d      	bne.n	8002626 <mqtt_message_received+0x342>
 800252a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800252e:	2b00      	cmp	r3, #0
 8002530:	d079      	beq.n	8002626 <mqtt_message_received+0x342>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8002532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <mqtt_message_received+0x25a>
 800253a:	2304      	movs	r3, #4
 800253c:	e000      	b.n	8002540 <mqtt_message_received+0x25c>
 800253e:	2305      	movs	r3, #5
 8002540:	76bb      	strb	r3, [r7, #26]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	891a      	ldrh	r2, [r3, #8]
 8002546:	7eb9      	ldrb	r1, [r7, #26]
 8002548:	2300      	movs	r3, #0
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff fe70 	bl	8002230 <pub_ack_rec_rel_response>
 8002550:	e069      	b.n	8002626 <mqtt_message_received+0x342>
      }
    }
  } else {
    if (length < 2) {
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d974      	bls.n	8002642 <mqtt_message_received+0x35e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short message\n"));
      goto out_disconnect;
    }
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8002558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	85bb      	strh	r3, [r7, #44]	; 0x2c
    pkt_id |= (u16_t)var_hdr_payload[1];
 8002562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002564:	3301      	adds	r3, #1
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b29a      	uxth	r2, r3
 800256a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800256c:	4313      	orrs	r3, r2
 800256e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (pkt_id == 0) {
 8002570:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d067      	beq.n	8002646 <mqtt_message_received+0x362>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8002576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257a:	2b05      	cmp	r3, #5
 800257c:	d106      	bne.n	800258c <mqtt_message_received+0x2a8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800257e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002580:	2301      	movs	r3, #1
 8002582:	2106      	movs	r1, #6
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff fe53 	bl	8002230 <pub_ack_rec_rel_response>
 800258a:	e04c      	b.n	8002626 <mqtt_message_received+0x342>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800258c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002590:	2b06      	cmp	r3, #6
 8002592:	d10f      	bne.n	80025b4 <mqtt_message_received+0x2d0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8002594:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002596:	2300      	movs	r3, #0
 8002598:	2107      	movs	r1, #7
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff fe48 	bl	8002230 <pub_ack_rec_rel_response>
 80025a0:	e041      	b.n	8002626 <mqtt_message_received+0x342>
 80025a2:	bf00      	nop
 80025a4:	080145fc 	.word	0x080145fc
 80025a8:	0801481c 	.word	0x0801481c
 80025ac:	08014660 	.word	0x08014660
 80025b0:	08014840 	.word	0x08014840

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80025b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d00b      	beq.n	80025d4 <mqtt_message_received+0x2f0>
 80025bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025c0:	2b0b      	cmp	r3, #11
 80025c2:	d007      	beq.n	80025d4 <mqtt_message_received+0x2f0>
 80025c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	d003      	beq.n	80025d4 <mqtt_message_received+0x2f0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80025cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d13a      	bne.n	800264a <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3318      	adds	r3, #24
 80025d8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb25 	bl	8001c2c <mqtt_take_request>
 80025e2:	6178      	str	r0, [r7, #20]
      if (r != NULL) {
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01c      	beq.n	8002624 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 80025ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	d10a      	bne.n	8002608 <mqtt_message_received+0x324>
          if (length < 3) {
 80025f2:	893b      	ldrh	r3, [r7, #8]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d92a      	bls.n	800264e <mqtt_message_received+0x36a>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incoming_suback(r, var_hdr_payload[2]);
 80025f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fa:	3302      	adds	r3, #2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7ff fe53 	bl	80022ac <mqtt_incoming_suback>
 8002606:	e00a      	b.n	800261e <mqtt_message_received+0x33a>
          }
        } else if (r->cb != NULL) {
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <mqtt_message_received+0x33a>
          r->cb(r->arg, ERR_OK);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	2100      	movs	r1, #0
 800261a:	4610      	mov	r0, r2
 800261c:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff faf4 	bl	8001c0c <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8002624:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8002626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002628:	e014      	b.n	8002654 <mqtt_message_received+0x370>
        goto out_disconnect;
 800262a:	bf00      	nop
 800262c:	e010      	b.n	8002650 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800262e:	bf00      	nop
 8002630:	e00e      	b.n	8002650 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8002632:	bf00      	nop
 8002634:	e00c      	b.n	8002650 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8002636:	bf00      	nop
 8002638:	e00a      	b.n	8002650 <mqtt_message_received+0x36c>
          goto out_disconnect;
 800263a:	bf00      	nop
 800263c:	e008      	b.n	8002650 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800263e:	bf00      	nop
 8002640:	e006      	b.n	8002650 <mqtt_message_received+0x36c>
      goto out_disconnect;
 8002642:	bf00      	nop
 8002644:	e004      	b.n	8002650 <mqtt_message_received+0x36c>
      goto out_disconnect;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <mqtt_message_received+0x36c>
      goto out_disconnect;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <mqtt_message_received+0x36c>
            goto out_disconnect;
 800264e:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8002650:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8002654:	4618      	mov	r0, r3
 8002656:	373c      	adds	r7, #60	; 0x3c
 8002658:	46bd      	mov	sp, r7
 800265a:	bd90      	pop	{r4, r7, pc}

0800265c <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_len = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8002676:	e0b7      	b.n	80027e8 <mqtt_parse_incoming+0x18c>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d903      	bls.n	8002686 <mqtt_parse_incoming+0x2a>
 800267e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da4f      	bge.n	8002726 <mqtt_parse_incoming+0xca>

      if (fixed_hdr_len < client->msg_idx) {
 8002686:	7dfa      	ldrb	r2, [r7, #23]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800269a:	75bb      	strb	r3, [r7, #22]
 800269c:	e012      	b.n	80026c4 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800269e:	8bfb      	ldrh	r3, [r7, #30]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	83fa      	strh	r2, [r7, #30]
 80026a4:	4619      	mov	r1, r3
 80026a6:	6838      	ldr	r0, [r7, #0]
 80026a8:	f003 fb40 	bl	8005d2c <pbuf_get_at>
 80026ac:	4603      	mov	r3, r0
 80026ae:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	1c59      	adds	r1, r3, #1
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6691      	str	r1, [r2, #104]	; 0x68
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	7dba      	ldrb	r2, [r7, #22]
 80026c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	3301      	adds	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_len >= 2) {
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f240 808b 	bls.w	80027e8 <mqtt_parse_incoming+0x18c>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 80026d2:	7dbb      	ldrb	r3, [r7, #22]
 80026d4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	1e9a      	subs	r2, r3, #2
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 80026ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db79      	blt.n	80027e8 <mqtt_parse_incoming+0x18c>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <mqtt_parse_incoming+0xba>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0, NULL);
 80026fa:	7df9      	ldrb	r1, [r7, #23]
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	2200      	movs	r2, #0
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fded 	bl	80022e4 <mqtt_message_received>
            client->msg_idx = 0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e068      	b.n	80027e8 <mqtt_parse_incoming+0x18c>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 8002716:	7dfa      	ldrb	r2, [r7, #23]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	441a      	add	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_len >= 2) {
 8002724:	e060      	b.n	80027e8 <mqtt_parse_incoming+0x18c>
      u16_t cpy_len, buffer_space;
      u8_t *var_hdr_payload;
      mqtt_connection_status_t res;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	891a      	ldrh	r2, [r3, #8]
 800272a:	8bfb      	ldrh	r3, [r7, #30]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	d205      	bcs.n	8002744 <mqtt_parse_incoming+0xe8>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	891a      	ldrh	r2, [r3, #8]
 800273c:	8bfb      	ldrh	r3, [r7, #30]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	b29b      	uxth	r3, r3
 8002742:	e001      	b.n	8002748 <mqtt_parse_incoming+0xec>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	b29b      	uxth	r3, r3
 8002748:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002752:	827b      	strh	r3, [r7, #18]
      if (cpy_len > buffer_space) {
 8002754:	8aba      	ldrh	r2, [r7, #20]
 8002756:	8a7b      	ldrh	r3, [r7, #18]
 8002758:	429a      	cmp	r2, r3
 800275a:	d901      	bls.n	8002760 <mqtt_parse_incoming+0x104>
        cpy_len = buffer_space;
 800275c:	8a7b      	ldrh	r3, [r7, #18]
 800275e:	82bb      	strh	r3, [r7, #20]
      }
      /* Adjust cpy_len to ensure zero-copy operation for remaining parts of current message */
      if (client->msg_idx >= MQTT_VAR_HEADER_BUFFER_LEN) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002764:	2b7f      	cmp	r3, #127	; 0x7f
 8002766:	d90c      	bls.n	8002782 <mqtt_parse_incoming+0x126>
        if (cpy_len > (p->len - in_offset))
 8002768:	8aba      	ldrh	r2, [r7, #20]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	895b      	ldrh	r3, [r3, #10]
 800276e:	4619      	mov	r1, r3
 8002770:	8bfb      	ldrh	r3, [r7, #30]
 8002772:	1acb      	subs	r3, r1, r3
 8002774:	429a      	cmp	r2, r3
 8002776:	dd04      	ble.n	8002782 <mqtt_parse_incoming+0x126>
          cpy_len = p->len - in_offset;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	895a      	ldrh	r2, [r3, #10]
 800277c:	8bfb      	ldrh	r3, [r7, #30]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	82bb      	strh	r3, [r7, #20]
      }
      var_hdr_payload = (u8_t*)pbuf_get_contiguous(p, client->rx_buffer + fixed_hdr_len,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	18d1      	adds	r1, r2, r3
 800278c:	8a7a      	ldrh	r2, [r7, #18]
 800278e:	8ab8      	ldrh	r0, [r7, #20]
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4603      	mov	r3, r0
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f003 f9ea 	bl	8005b70 <pbuf_get_contiguous>
 800279c:	60f8      	str	r0, [r7, #12]
                                                   buffer_space, cpy_len, in_offset);

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027a2:	8abb      	ldrh	r3, [r7, #20]
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80027aa:	8bfa      	ldrh	r2, [r7, #30]
 80027ac:	8abb      	ldrh	r3, [r7, #20]
 80027ae:	4413      	add	r3, r2
 80027b0:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80027b2:	8abb      	ldrh	r3, [r7, #20]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      /* Whole or partial message received */
      res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len, var_hdr_payload);
 80027ba:	8aba      	ldrh	r2, [r7, #20]
 80027bc:	7df9      	ldrb	r1, [r7, #23]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fd8d 	bl	80022e4 <mqtt_message_received>
 80027ca:	4603      	mov	r3, r0
 80027cc:	817b      	strh	r3, [r7, #10]
      if (res != MQTT_CONNECT_ACCEPTED) {
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <mqtt_parse_incoming+0x17c>
        return res;
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	e00e      	b.n	80027f6 <mqtt_parse_incoming+0x19a>
      }
      if (msg_rem_len == 0) {
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <mqtt_parse_incoming+0x18c>
        /* Reset parser state */
        client->msg_idx = 0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	669a      	str	r2, [r3, #104]	; 0x68
        /* msg_tot_len = 0; */
        fixed_hdr_len = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	891b      	ldrh	r3, [r3, #8]
 80027ec:	8bfa      	ldrh	r2, [r7, #30]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	f4ff af42 	bcc.w	8002678 <mqtt_parse_incoming+0x1c>
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <mqtt_tcp_recv_cb+0x30>
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <mqtt_tcp_recv_cb+0xc0>)
 800281a:	f240 32ae 	movw	r2, #942	; 0x3ae
 800281e:	4929      	ldr	r1, [pc, #164]	; (80028c4 <mqtt_tcp_recv_cb+0xc4>)
 8002820:	4829      	ldr	r0, [pc, #164]	; (80028c8 <mqtt_tcp_recv_cb+0xc8>)
 8002822:	f010 fbe1 	bl	8012fe8 <iprintf>
 8002826:	2000      	movs	r0, #0
 8002828:	f010 fce0 	bl	80131ec <fflush>
 800282c:	f010 fc25 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d00b      	beq.n	8002852 <mqtt_tcp_recv_cb+0x52>
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <mqtt_tcp_recv_cb+0xc0>)
 800283c:	f240 32af 	movw	r2, #943	; 0x3af
 8002840:	4922      	ldr	r1, [pc, #136]	; (80028cc <mqtt_tcp_recv_cb+0xcc>)
 8002842:	4821      	ldr	r0, [pc, #132]	; (80028c8 <mqtt_tcp_recv_cb+0xc8>)
 8002844:	f010 fbd0 	bl	8012fe8 <iprintf>
 8002848:	2000      	movs	r0, #0
 800284a:	f010 fccf 	bl	80131ec <fflush>
 800284e:	f010 fc14 	bl	801307a <abort>

  if (p == NULL) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <mqtt_tcp_recv_cb+0x64>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8002858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff fbe5 	bl	800202c <mqtt_close>
 8002862:	e027      	b.n	80028b4 <mqtt_tcp_recv_cb+0xb4>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8002864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <mqtt_tcp_recv_cb+0x78>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f002 fe9d 	bl	80055ac <pbuf_free>
      return err;
 8002872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002876:	e01e      	b.n	80028b6 <mqtt_tcp_recv_cb+0xb6>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	891b      	ldrh	r3, [r3, #8]
 800287c:	4619      	mov	r1, r3
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f003 fec8 	bl	8006614 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff fee8 	bl	800265c <mqtt_parse_incoming>
 800288c:	4603      	mov	r3, r0
 800288e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f002 fe8b 	bl	80055ac <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <mqtt_tcp_recv_cb+0xa6>
      mqtt_close(client, res);
 800289c:	8a7b      	ldrh	r3, [r7, #18]
 800289e:	4619      	mov	r1, r3
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7ff fbc3 	bl	800202c <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	885b      	ldrh	r3, [r3, #2]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <mqtt_tcp_recv_cb+0xb4>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	080145fc 	.word	0x080145fc
 80028c4:	08014858 	.word	0x08014858
 80028c8:	08014660 	.word	0x08014660
 80028cc:	0801487c 	.word	0x0801487c

080028d0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	7a9b      	ldrb	r3, [r3, #10]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d127      	bne.n	800293a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80028f6:	e00d      	b.n	8002914 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	2100      	movs	r1, #0
 800290a:	4610      	mov	r0, r2
 800290c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800290e:	6938      	ldr	r0, [r7, #16]
 8002910:	f7ff f97c 	bl	8001c0c <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3318      	adds	r3, #24
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f986 	bl	8001c2c <mqtt_take_request>
 8002920:	6138      	str	r0, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e7      	bne.n	80028f8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7ff f80d 	bl	8001954 <mqtt_output_send>
  }
  return ERR_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <mqtt_tcp_err_cb+0x2e>
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <mqtt_tcp_err_cb+0x48>)
 800295c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002960:	490b      	ldr	r1, [pc, #44]	; (8002990 <mqtt_tcp_err_cb+0x4c>)
 8002962:	480c      	ldr	r0, [pc, #48]	; (8002994 <mqtt_tcp_err_cb+0x50>)
 8002964:	f010 fb40 	bl	8012fe8 <iprintf>
 8002968:	2000      	movs	r0, #0
 800296a:	f010 fc3f 	bl	80131ec <fflush>
 800296e:	f010 fb84 	bl	801307a <abort>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = NULL;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8002978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fb55 	bl	800202c <mqtt_close>
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	080145fc 	.word	0x080145fc
 8002990:	080148a4 	.word	0x080148a4
 8002994:	08014660 	.word	0x08014660

08002998 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	7a9b      	ldrb	r3, [r3, #10]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d105      	bne.n	80029ba <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	33ec      	adds	r3, #236	; 0xec
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe ffcd 	bl	8001954 <mqtt_output_send>
  }
  return ERR_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	e025      	b.n	8002a30 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2200      	movs	r2, #0
 80029e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80029ea:	4913      	ldr	r1, [pc, #76]	; (8002a38 <mqtt_tcp_connect_cb+0x74>)
 80029ec:	68b8      	ldr	r0, [r7, #8]
 80029ee:	f004 fe73 	bl	80076d8 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80029f2:	4912      	ldr	r1, [pc, #72]	; (8002a3c <mqtt_tcp_connect_cb+0x78>)
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f004 fe95 	bl	8007724 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 80029fa:	2202      	movs	r2, #2
 80029fc:	4910      	ldr	r1, [pc, #64]	; (8002a40 <mqtt_tcp_connect_cb+0x7c>)
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f004 fedc 	bl	80077bc <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2202      	movs	r2, #2
 8002a08:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	490d      	ldr	r1, [pc, #52]	; (8002a44 <mqtt_tcp_connect_cb+0x80>)
 8002a0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a12:	f009 ff7b 	bl	800c90c <sys_timeout>
  client->cyclic_tick = 0;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe ff93 	bl	8001954 <mqtt_output_send>

  return ERR_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08002801 	.word	0x08002801
 8002a3c:	080028d1 	.word	0x080028d1
 8002a40:	08002999 	.word	0x08002999
 8002a44:	080020f9 	.word	0x080020f9

08002a48 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <mqtt_publish+0x2c>
 8002a5c:	4b62      	ldr	r3, [pc, #392]	; (8002be8 <mqtt_publish+0x1a0>)
 8002a5e:	f240 425b 	movw	r2, #1115	; 0x45b
 8002a62:	4962      	ldr	r1, [pc, #392]	; (8002bec <mqtt_publish+0x1a4>)
 8002a64:	4862      	ldr	r0, [pc, #392]	; (8002bf0 <mqtt_publish+0x1a8>)
 8002a66:	f010 fabf 	bl	8012fe8 <iprintf>
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f010 fbbe 	bl	80131ec <fflush>
 8002a70:	f010 fb03 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <mqtt_publish+0x4a>
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <mqtt_publish+0x1a0>)
 8002a7c:	f240 425c 	movw	r2, #1116	; 0x45c
 8002a80:	495c      	ldr	r1, [pc, #368]	; (8002bf4 <mqtt_publish+0x1ac>)
 8002a82:	485b      	ldr	r0, [pc, #364]	; (8002bf0 <mqtt_publish+0x1a8>)
 8002a84:	f010 fab0 	bl	8012fe8 <iprintf>
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f010 fbaf 	bl	80131ec <fflush>
 8002a8e:	f010 faf4 	bl	801307a <abort>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <mqtt_publish+0x66>
 8002a9a:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <mqtt_publish+0x1a0>)
 8002a9c:	f240 425d 	movw	r2, #1117	; 0x45d
 8002aa0:	4955      	ldr	r1, [pc, #340]	; (8002bf8 <mqtt_publish+0x1b0>)
 8002aa2:	4853      	ldr	r0, [pc, #332]	; (8002bf0 <mqtt_publish+0x1a8>)
 8002aa4:	f7fe fbf7 	bl	8001296 <lwip_win32_platform_diag>
 8002aa8:	f06f 030a 	mvn.w	r3, #10
 8002aac:	e097      	b.n	8002bde <mqtt_publish+0x196>

  topic_strlen = strlen(topic);
 8002aae:	68b8      	ldr	r0, [r7, #8]
 8002ab0:	f7fd fb8e 	bl	80001d0 <strlen>
 8002ab4:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d909      	bls.n	8002ad4 <mqtt_publish+0x8c>
 8002ac0:	4b49      	ldr	r3, [pc, #292]	; (8002be8 <mqtt_publish+0x1a0>)
 8002ac2:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8002ac6:	494d      	ldr	r1, [pc, #308]	; (8002bfc <mqtt_publish+0x1b4>)
 8002ac8:	4849      	ldr	r0, [pc, #292]	; (8002bf0 <mqtt_publish+0x1a8>)
 8002aca:	f7fe fbe4 	bl	8001296 <lwip_win32_platform_diag>
 8002ace:	f06f 030f 	mvn.w	r3, #15
 8002ad2:	e084      	b.n	8002bde <mqtt_publish+0x196>
  topic_len = (u16_t)topic_strlen;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8002ad8:	8b7b      	ldrh	r3, [r7, #26]
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	4413      	add	r3, r2
 8002ae0:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8002ae2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <mqtt_publish+0xb4>
    total_len += 2;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	3302      	adds	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7fe fe97 	bl	8001824 <msg_generate_packet_id>
 8002af6:	4603      	mov	r3, r0
 8002af8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002afa:	e001      	b.n	8002b00 <mqtt_publish+0xb8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d309      	bcc.n	8002b1c <mqtt_publish+0xd4>
 8002b08:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <mqtt_publish+0x1a0>)
 8002b0a:	f240 426c 	movw	r2, #1132	; 0x46c
 8002b0e:	493c      	ldr	r1, [pc, #240]	; (8002c00 <mqtt_publish+0x1b8>)
 8002b10:	4837      	ldr	r0, [pc, #220]	; (8002bf0 <mqtt_publish+0x1a8>)
 8002b12:	f7fe fbc0 	bl	8001296 <lwip_win32_platform_diag>
 8002b16:	f06f 030f 	mvn.w	r3, #15
 8002b1a:	e060      	b.n	8002bde <mqtt_publish+0x196>
  remaining_length = (u16_t)total_len;
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f103 001c 	add.w	r0, r3, #28
 8002b26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2104      	movs	r1, #4
 8002b30:	f7fe ffca 	bl	8001ac8 <mqtt_create_request>
 8002b34:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <mqtt_publish+0xfa>
    return ERR_MEM;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b40:	e04d      	b.n	8002bde <mqtt_publish+0x196>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	33ec      	adds	r3, #236	; 0xec
 8002b46:	8b3a      	ldrh	r2, [r7, #24]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fa36 	bl	8001fbc <mqtt_output_check_space>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <mqtt_publish+0x11a>
    mqtt_delete_request(r);
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff f858 	bl	8001c0c <mqtt_delete_request>
    return ERR_MEM;
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b60:	e03d      	b.n	8002bde <mqtt_publish+0x196>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002b68:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b6c:	8b3b      	ldrh	r3, [r7, #24]
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2103      	movs	r1, #3
 8002b7c:	f7ff f9d5 	bl	8001f2a <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	33ec      	adds	r3, #236	; 0xec
 8002b84:	8b7a      	ldrh	r2, [r7, #26]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f9a3 	bl	8001ed4 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8002b8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <mqtt_publish+0x15c>
    mqtt_output_append_u16(&client->output, pkt_id);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	33ec      	adds	r3, #236	; 0xec
 8002b9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f963 	bl	8001e6a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <mqtt_publish+0x176>
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <mqtt_publish+0x176>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	33ec      	adds	r3, #236	; 0xec
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f96e 	bl	8001e9a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ffcb 	bl	8001b60 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f7fe febc 	bl	8001954 <mqtt_output_send>
  return ERR_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	080145fc 	.word	0x080145fc
 8002bec:	080148c4 	.word	0x080148c4
 8002bf0:	08014660 	.word	0x08014660
 8002bf4:	080148e4 	.word	0x080148e4
 8002bf8:	08014900 	.word	0x08014900
 8002bfc:	08014920 	.word	0x08014920
 8002c00:	08014944 	.word	0x08014944

08002c04 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <mqtt_sub_unsub+0x2e>
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <mqtt_sub_unsub+0x1ac>)
 8002c1c:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8002c20:	4964      	ldr	r1, [pc, #400]	; (8002db4 <mqtt_sub_unsub+0x1b0>)
 8002c22:	4865      	ldr	r0, [pc, #404]	; (8002db8 <mqtt_sub_unsub+0x1b4>)
 8002c24:	f010 f9e0 	bl	8012fe8 <iprintf>
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f010 fadf 	bl	80131ec <fflush>
 8002c2e:	f010 fa24 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <mqtt_sub_unsub+0x4c>
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <mqtt_sub_unsub+0x1ac>)
 8002c3a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8002c3e:	495f      	ldr	r1, [pc, #380]	; (8002dbc <mqtt_sub_unsub+0x1b8>)
 8002c40:	485d      	ldr	r0, [pc, #372]	; (8002db8 <mqtt_sub_unsub+0x1b4>)
 8002c42:	f010 f9d1 	bl	8012fe8 <iprintf>
 8002c46:	2000      	movs	r0, #0
 8002c48:	f010 fad0 	bl	80131ec <fflush>
 8002c4c:	f010 fa15 	bl	801307a <abort>

  topic_strlen = strlen(topic);
 8002c50:	68b8      	ldr	r0, [r7, #8]
 8002c52:	f7fd fabd 	bl	80001d0 <strlen>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d909      	bls.n	8002c76 <mqtt_sub_unsub+0x72>
 8002c62:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <mqtt_sub_unsub+0x1ac>)
 8002c64:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8002c68:	4955      	ldr	r1, [pc, #340]	; (8002dc0 <mqtt_sub_unsub+0x1bc>)
 8002c6a:	4853      	ldr	r0, [pc, #332]	; (8002db8 <mqtt_sub_unsub+0x1b4>)
 8002c6c:	f7fe fb13 	bl	8001296 <lwip_win32_platform_diag>
 8002c70:	f06f 030f 	mvn.w	r3, #15
 8002c74:	e098      	b.n	8002da8 <mqtt_sub_unsub+0x1a4>
  topic_len = (u16_t)topic_strlen;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8002c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2201      	movne	r2, #1
 8002c88:	2200      	moveq	r2, #0
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d309      	bcc.n	8002cac <mqtt_sub_unsub+0xa8>
 8002c98:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <mqtt_sub_unsub+0x1ac>)
 8002c9a:	f240 42ae 	movw	r2, #1198	; 0x4ae
 8002c9e:	4949      	ldr	r1, [pc, #292]	; (8002dc4 <mqtt_sub_unsub+0x1c0>)
 8002ca0:	4845      	ldr	r0, [pc, #276]	; (8002db8 <mqtt_sub_unsub+0x1b4>)
 8002ca2:	f7fe faf8 	bl	8001296 <lwip_win32_platform_diag>
 8002ca6:	f06f 030f 	mvn.w	r3, #15
 8002caa:	e07d      	b.n	8002da8 <mqtt_sub_unsub+0x1a4>
  remaining_length = (u16_t)total_len;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d90b      	bls.n	8002cce <mqtt_sub_unsub+0xca>
 8002cb6:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <mqtt_sub_unsub+0x1ac>)
 8002cb8:	f240 42b1 	movw	r2, #1201	; 0x4b1
 8002cbc:	4942      	ldr	r1, [pc, #264]	; (8002dc8 <mqtt_sub_unsub+0x1c4>)
 8002cbe:	483e      	ldr	r0, [pc, #248]	; (8002db8 <mqtt_sub_unsub+0x1b4>)
 8002cc0:	f010 f992 	bl	8012fe8 <iprintf>
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f010 fa91 	bl	80131ec <fflush>
 8002cca:	f010 f9d6 	bl	801307a <abort>
  if (client->conn_state == TCP_DISCONNECTED) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	7a9b      	ldrb	r3, [r3, #10]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <mqtt_sub_unsub+0xd8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8002cd6:	f06f 030a 	mvn.w	r3, #10
 8002cda:	e065      	b.n	8002da8 <mqtt_sub_unsub+0x1a4>
  }

  pkt_id = msg_generate_packet_id(client);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7fe fda1 	bl	8001824 <msg_generate_packet_id>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f103 001c 	add.w	r0, r3, #28
 8002cec:	8b3a      	ldrh	r2, [r7, #24]
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	f7fe fee7 	bl	8001ac8 <mqtt_create_request>
 8002cfa:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <mqtt_sub_unsub+0x104>
    return ERR_MEM;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e04f      	b.n	8002da8 <mqtt_sub_unsub+0x1a4>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	33ec      	adds	r3, #236	; 0xec
 8002d0c:	8b7a      	ldrh	r2, [r7, #26]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f953 	bl	8001fbc <mqtt_output_check_space>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <mqtt_sub_unsub+0x124>
    mqtt_delete_request(r);
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7fe ff75 	bl	8001c0c <mqtt_delete_request>
    return ERR_MEM;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e03f      	b.n	8002da8 <mqtt_sub_unsub+0x1a4>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002d2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <mqtt_sub_unsub+0x136>
 8002d36:	2108      	movs	r1, #8
 8002d38:	e000      	b.n	8002d3c <mqtt_sub_unsub+0x138>
 8002d3a:	210a      	movs	r1, #10
 8002d3c:	8b7b      	ldrh	r3, [r7, #26]
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	2200      	movs	r2, #0
 8002d48:	f7ff f8ef 	bl	8001f2a <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	33ec      	adds	r3, #236	; 0xec
 8002d50:	8b3a      	ldrh	r2, [r7, #24]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f888 	bl	8001e6a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	33ec      	adds	r3, #236	; 0xec
 8002d5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f8b6 	bl	8001ed4 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8002d68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <mqtt_sub_unsub+0x184>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	bf28      	it	cs
 8002d7c:	2302      	movcs	r3, #2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f7ff f862 	bl	8001e4c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3318      	adds	r3, #24
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fee6 	bl	8001b60 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fdd7 	bl	8001954 <mqtt_output_send>
  return ERR_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	080145fc 	.word	0x080145fc
 8002db4:	08014968 	.word	0x08014968
 8002db8:	08014660 	.word	0x08014660
 8002dbc:	08014988 	.word	0x08014988
 8002dc0:	080149a8 	.word	0x080149a8
 8002dc4:	080149d0 	.word	0x080149d0
 8002dc8:	080149f8 	.word	0x080149f8

08002dcc <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <mqtt_set_inpub_callback+0x2c>
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <mqtt_set_inpub_callback+0x48>)
 8002de2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <mqtt_set_inpub_callback+0x4c>)
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <mqtt_set_inpub_callback+0x50>)
 8002dea:	f010 f8fd 	bl	8012fe8 <iprintf>
 8002dee:	2000      	movs	r0, #0
 8002df0:	f010 f9fc 	bl	80131ec <fflush>
 8002df4:	f010 f941 	bl	801307a <abort>
  client->data_cb = data_cb;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	080145fc 	.word	0x080145fc
 8002e18:	08014a10 	.word	0x08014a10
 8002e1c:	08014660 	.word	0x08014660

08002e20 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8002e24:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fc95 	bl	8004758 <mem_calloc>
 8002e2e:	4603      	mov	r3, r0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08e      	sub	sp, #56	; 0x38
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8002e44:	230a      	movs	r3, #10
 8002e46:	85bb      	strh	r3, [r7, #44]	; 0x2c
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  u16_t client_user_len = 0, client_pass_len = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e5e:	2300      	movs	r3, #0
 8002e60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mqtt_incoming_data_cb_t data_cb;
  mqtt_incoming_publish_cb_t pub_cb;
  void *inpub_arg;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <mqtt_client_connect+0x4c>
 8002e68:	4bab      	ldr	r3, [pc, #684]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002e6a:	f240 5219 	movw	r2, #1305	; 0x519
 8002e6e:	49ab      	ldr	r1, [pc, #684]	; (800311c <mqtt_client_connect+0x2e8>)
 8002e70:	48ab      	ldr	r0, [pc, #684]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002e72:	f010 f8b9 	bl	8012fe8 <iprintf>
 8002e76:	2000      	movs	r0, #0
 8002e78:	f010 f9b8 	bl	80131ec <fflush>
 8002e7c:	f010 f8fd 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <mqtt_client_connect+0x6a>
 8002e86:	4ba4      	ldr	r3, [pc, #656]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002e88:	f240 521a 	movw	r2, #1306	; 0x51a
 8002e8c:	49a5      	ldr	r1, [pc, #660]	; (8003124 <mqtt_client_connect+0x2f0>)
 8002e8e:	48a4      	ldr	r0, [pc, #656]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002e90:	f010 f8aa 	bl	8012fe8 <iprintf>
 8002e94:	2000      	movs	r0, #0
 8002e96:	f010 f9a9 	bl	80131ec <fflush>
 8002e9a:	f010 f8ee 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8002e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <mqtt_client_connect+0x88>
 8002ea4:	4b9c      	ldr	r3, [pc, #624]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002ea6:	f240 521b 	movw	r2, #1307	; 0x51b
 8002eaa:	499f      	ldr	r1, [pc, #636]	; (8003128 <mqtt_client_connect+0x2f4>)
 8002eac:	489c      	ldr	r0, [pc, #624]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002eae:	f010 f89b 	bl	8012fe8 <iprintf>
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f010 f99a 	bl	80131ec <fflush>
 8002eb8:	f010 f8df 	bl	801307a <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <mqtt_client_connect+0xa8>
 8002ec4:	4b94      	ldr	r3, [pc, #592]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002ec6:	f240 521c 	movw	r2, #1308	; 0x51c
 8002eca:	4998      	ldr	r1, [pc, #608]	; (800312c <mqtt_client_connect+0x2f8>)
 8002ecc:	4894      	ldr	r0, [pc, #592]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002ece:	f010 f88b 	bl	8012fe8 <iprintf>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f010 f98a 	bl	80131ec <fflush>
 8002ed8:	f010 f8cf 	bl	801307a <abort>

  if (client->conn_state != TCP_DISCONNECTED) {
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	7a9b      	ldrb	r3, [r3, #10]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <mqtt_client_connect+0xb6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8002ee4:	f06f 0309 	mvn.w	r3, #9
 8002ee8:	e23a      	b.n	8003360 <mqtt_client_connect+0x52c>
  }

  /* Wipe clean, but keep callbacks */
  data_cb = client->data_cb;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eee:	623b      	str	r3, [r7, #32]
  pub_cb = client->pub_cb;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef4:	61fb      	str	r3, [r7, #28]
  inpub_arg = client->inpub_arg;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	61bb      	str	r3, [r7, #24]
  memset(client, 0, sizeof(mqtt_client_t));
 8002efc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002f00:	2100      	movs	r1, #0
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f010 fa97 	bl	8013436 <memset>
  client->data_cb = data_cb;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a3a      	ldr	r2, [r7, #32]
 8002f0c:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = inpub_arg;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	65da      	str	r2, [r3, #92]	; 0x5c

  client->connect_arg = arg;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f1e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8002f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f28:	899a      	ldrh	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	331c      	adds	r3, #28
 8002f32:	2104      	movs	r1, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ff57 	bl	8001de8 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d07c      	beq.n	800303c <mqtt_client_connect+0x208>
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d078      	beq.n	800303c <mqtt_client_connect+0x208>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8002f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    flags |= (client_info->will_qos & 3) << 3;
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	7e5b      	ldrb	r3, [r3, #25]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	f003 0318 	and.w	r3, r3, #24
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (client_info->will_retain) {
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	7e9b      	ldrb	r3, [r3, #26]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <mqtt_client_connect+0x150>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8002f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    len = strlen(client_info->will_topic);
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd f921 	bl	80001d0 <strlen>
 8002f8e:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2bff      	cmp	r3, #255	; 0xff
 8002f94:	d909      	bls.n	8002faa <mqtt_client_connect+0x176>
 8002f96:	4b60      	ldr	r3, [pc, #384]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002f98:	f240 5239 	movw	r2, #1337	; 0x539
 8002f9c:	4964      	ldr	r1, [pc, #400]	; (8003130 <mqtt_client_connect+0x2fc>)
 8002f9e:	4860      	ldr	r0, [pc, #384]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002fa0:	f7fe f979 	bl	8001296 <lwip_win32_platform_diag>
 8002fa4:	f06f 0305 	mvn.w	r3, #5
 8002fa8:	e1da      	b.n	8003360 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <mqtt_client_connect+0x190>
 8002fb0:	4b59      	ldr	r3, [pc, #356]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002fb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8002fb6:	495f      	ldr	r1, [pc, #380]	; (8003134 <mqtt_client_connect+0x300>)
 8002fb8:	4859      	ldr	r0, [pc, #356]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002fba:	f7fe f96c 	bl	8001296 <lwip_win32_platform_diag>
 8002fbe:	f06f 0305 	mvn.w	r3, #5
 8002fc2:	e1cd      	b.n	8003360 <mqtt_client_connect+0x52c>
    will_topic_len = (u8_t)len;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    if (client_info->will_msg_len == 0)
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	7e1b      	ldrb	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <mqtt_client_connect+0x1cc>
    {
        len = strlen(client_info->will_msg);
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd f8fa 	bl	80001d0 <strlen>
 8002fdc:	6178      	str	r0, [r7, #20]
        LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2bff      	cmp	r3, #255	; 0xff
 8002fe2:	d909      	bls.n	8002ff8 <mqtt_client_connect+0x1c4>
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <mqtt_client_connect+0x2e4>)
 8002fe6:	f240 523f 	movw	r2, #1343	; 0x53f
 8002fea:	4953      	ldr	r1, [pc, #332]	; (8003138 <mqtt_client_connect+0x304>)
 8002fec:	484c      	ldr	r0, [pc, #304]	; (8003120 <mqtt_client_connect+0x2ec>)
 8002fee:	f7fe f952 	bl	8001296 <lwip_win32_platform_diag>
 8002ff2:	f06f 0305 	mvn.w	r3, #5
 8002ff6:	e1b3      	b.n	8003360 <mqtt_client_connect+0x52c>
        will_msg_len = (u8_t)len;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002ffe:	e003      	b.n	8003008 <mqtt_client_connect+0x1d4>
    }
    else
    {
        will_msg_len = client_info->will_msg_len;
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	7e1b      	ldrb	r3, [r3, #24]
 8003004:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8003008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003010:	4413      	add	r3, r2
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003018:	4413      	add	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d309      	bcc.n	8003038 <mqtt_client_connect+0x204>
 8003024:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <mqtt_client_connect+0x2e4>)
 8003026:	f240 5247 	movw	r2, #1351	; 0x547
 800302a:	4944      	ldr	r1, [pc, #272]	; (800313c <mqtt_client_connect+0x308>)
 800302c:	483c      	ldr	r0, [pc, #240]	; (8003120 <mqtt_client_connect+0x2ec>)
 800302e:	f7fe f932 	bl	8001296 <lwip_win32_platform_diag>
 8003032:	f06f 0305 	mvn.w	r3, #5
 8003036:	e193      	b.n	8003360 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_user != NULL) {
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d03d      	beq.n	80030c0 <mqtt_client_connect+0x28c>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8003044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003048:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800304c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_user);
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f8bb 	bl	80001d0 <strlen>
 800305a:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d309      	bcc.n	8003078 <mqtt_client_connect+0x244>
 8003064:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <mqtt_client_connect+0x2e4>)
 8003066:	f240 524d 	movw	r2, #1357	; 0x54d
 800306a:	4935      	ldr	r1, [pc, #212]	; (8003140 <mqtt_client_connect+0x30c>)
 800306c:	482c      	ldr	r0, [pc, #176]	; (8003120 <mqtt_client_connect+0x2ec>)
 800306e:	f7fe f912 	bl	8001296 <lwip_win32_platform_diag>
 8003072:	f06f 0305 	mvn.w	r3, #5
 8003076:	e173      	b.n	8003360 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <mqtt_client_connect+0x25e>
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <mqtt_client_connect+0x2e4>)
 8003080:	f240 524e 	movw	r2, #1358	; 0x54e
 8003084:	492f      	ldr	r1, [pc, #188]	; (8003144 <mqtt_client_connect+0x310>)
 8003086:	4826      	ldr	r0, [pc, #152]	; (8003120 <mqtt_client_connect+0x2ec>)
 8003088:	f7fe f905 	bl	8001296 <lwip_win32_platform_diag>
 800308c:	f06f 0305 	mvn.w	r3, #5
 8003090:	e166      	b.n	8003360 <mqtt_client_connect+0x52c>
    client_user_len = (u16_t)len;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	84fb      	strh	r3, [r7, #38]	; 0x26
    len = remaining_length + 2 + client_user_len;
 8003096:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d309      	bcc.n	80030bc <mqtt_client_connect+0x288>
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <mqtt_client_connect+0x2e4>)
 80030aa:	f240 5251 	movw	r2, #1361	; 0x551
 80030ae:	4923      	ldr	r1, [pc, #140]	; (800313c <mqtt_client_connect+0x308>)
 80030b0:	481b      	ldr	r0, [pc, #108]	; (8003120 <mqtt_client_connect+0x2ec>)
 80030b2:	f7fe f8f0 	bl	8001296 <lwip_win32_platform_diag>
 80030b6:	f06f 0305 	mvn.w	r3, #5
 80030ba:	e151      	b.n	8003360 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_pass != NULL) {
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05a      	beq.n	800317e <mqtt_client_connect+0x34a>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 80030c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_pass);
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd f879 	bl	80001d0 <strlen>
 80030de:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d309      	bcc.n	80030fc <mqtt_client_connect+0x2c8>
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <mqtt_client_connect+0x2e4>)
 80030ea:	f240 5257 	movw	r2, #1367	; 0x557
 80030ee:	4916      	ldr	r1, [pc, #88]	; (8003148 <mqtt_client_connect+0x314>)
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <mqtt_client_connect+0x2ec>)
 80030f2:	f7fe f8d0 	bl	8001296 <lwip_win32_platform_diag>
 80030f6:	f06f 0305 	mvn.w	r3, #5
 80030fa:	e131      	b.n	8003360 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d126      	bne.n	8003150 <mqtt_client_connect+0x31c>
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <mqtt_client_connect+0x2e4>)
 8003104:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8003108:	4910      	ldr	r1, [pc, #64]	; (800314c <mqtt_client_connect+0x318>)
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <mqtt_client_connect+0x2ec>)
 800310c:	f7fe f8c3 	bl	8001296 <lwip_win32_platform_diag>
 8003110:	f06f 0305 	mvn.w	r3, #5
 8003114:	e124      	b.n	8003360 <mqtt_client_connect+0x52c>
 8003116:	bf00      	nop
 8003118:	080145fc 	.word	0x080145fc
 800311c:	08014a38 	.word	0x08014a38
 8003120:	08014660 	.word	0x08014660
 8003124:	08014a5c 	.word	0x08014a5c
 8003128:	08014a84 	.word	0x08014a84
 800312c:	08014ab0 	.word	0x08014ab0
 8003130:	08014ae4 	.word	0x08014ae4
 8003134:	08014b24 	.word	0x08014b24
 8003138:	08014b64 	.word	0x08014b64
 800313c:	08014ba0 	.word	0x08014ba0
 8003140:	08014bd0 	.word	0x08014bd0
 8003144:	08014c10 	.word	0x08014c10
 8003148:	08014c54 	.word	0x08014c54
 800314c:	08014c94 	.word	0x08014c94
    client_pass_len = (u16_t)len;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	84bb      	strh	r3, [r7, #36]	; 0x24
    len = remaining_length + 2 + client_pass_len;
 8003154:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003156:	1c9a      	adds	r2, r3, #2
 8003158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800315a:	4413      	add	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d309      	bcc.n	800317a <mqtt_client_connect+0x346>
 8003166:	4b80      	ldr	r3, [pc, #512]	; (8003368 <mqtt_client_connect+0x534>)
 8003168:	f240 525b 	movw	r2, #1371	; 0x55b
 800316c:	497f      	ldr	r1, [pc, #508]	; (800336c <mqtt_client_connect+0x538>)
 800316e:	4880      	ldr	r0, [pc, #512]	; (8003370 <mqtt_client_connect+0x53c>)
 8003170:	f7fe f891 	bl	8001296 <lwip_win32_platform_diag>
 8003174:	f06f 0305 	mvn.w	r3, #5
 8003178:	e0f2      	b.n	8003360 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800317e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  len = strlen(client_info->client_id);
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f81e 	bl	80001d0 <strlen>
 8003194:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d309      	bcc.n	80031b2 <mqtt_client_connect+0x37e>
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <mqtt_client_connect+0x534>)
 80031a0:	f240 5263 	movw	r2, #1379	; 0x563
 80031a4:	4973      	ldr	r1, [pc, #460]	; (8003374 <mqtt_client_connect+0x540>)
 80031a6:	4872      	ldr	r0, [pc, #456]	; (8003370 <mqtt_client_connect+0x53c>)
 80031a8:	f7fe f875 	bl	8001296 <lwip_win32_platform_diag>
 80031ac:	f06f 0305 	mvn.w	r3, #5
 80031b0:	e0d6      	b.n	8003360 <mqtt_client_connect+0x52c>
  client_id_length = (u16_t)len;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 80031b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	8a7b      	ldrh	r3, [r7, #18]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d309      	bcc.n	80031dc <mqtt_client_connect+0x3a8>
 80031c8:	4b67      	ldr	r3, [pc, #412]	; (8003368 <mqtt_client_connect+0x534>)
 80031ca:	f240 5266 	movw	r2, #1382	; 0x566
 80031ce:	4967      	ldr	r1, [pc, #412]	; (800336c <mqtt_client_connect+0x538>)
 80031d0:	4867      	ldr	r0, [pc, #412]	; (8003370 <mqtt_client_connect+0x53c>)
 80031d2:	f7fe f860 	bl	8001296 <lwip_win32_platform_diag>
 80031d6:	f06f 0305 	mvn.w	r3, #5
 80031da:	e0c1      	b.n	8003360 <mqtt_client_connect+0x52c>
  remaining_length = (u16_t)len;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	33ec      	adds	r3, #236	; 0xec
 80031e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fee7 	bl	8001fbc <mqtt_output_check_space>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <mqtt_client_connect+0x3c6>
    return ERR_MEM;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	e0b2      	b.n	8003360 <mqtt_client_connect+0x52c>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 80031fa:	2000      	movs	r0, #0
 80031fc:	f004 fa4c 	bl	8007698 <tcp_new_ip_type>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <mqtt_client_connect+0x3e0>
    return ERR_MEM;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e0a5      	b.n	8003360 <mqtt_client_connect+0x52c>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fa4a 	bl	80076b4 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	4954      	ldr	r1, [pc, #336]	; (8003378 <mqtt_client_connect+0x544>)
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f8f5 	bl	8006418 <tcp_bind>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003234:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 8084 	bne.w	8003346 <mqtt_client_connect+0x512>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68d8      	ldr	r0, [r3, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	4b4d      	ldr	r3, [pc, #308]	; (800337c <mqtt_client_connect+0x548>)
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	f003 fa80 	bl	800674c <tcp_connect>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003252:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003256:	2b00      	cmp	r3, #0
 8003258:	d177      	bne.n	800334a <mqtt_client_connect+0x516>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4948      	ldr	r1, [pc, #288]	; (8003380 <mqtt_client_connect+0x54c>)
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fa85 	bl	8007770 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003272:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	f7fe fe53 	bl	8001f2a <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	33ec      	adds	r3, #236	; 0xec
 8003288:	2204      	movs	r2, #4
 800328a:	493e      	ldr	r1, [pc, #248]	; (8003384 <mqtt_client_connect+0x550>)
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fe21 	bl	8001ed4 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	33ec      	adds	r3, #236	; 0xec
 8003296:	2104      	movs	r1, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fdd7 	bl	8001e4c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	33ec      	adds	r3, #236	; 0xec
 80032a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fdcf 	bl	8001e4c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	899b      	ldrh	r3, [r3, #12]
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7fe fdd5 	bl	8001e6a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	8a7a      	ldrh	r2, [r7, #18]
 80032cc:	4619      	mov	r1, r3
 80032ce:	f7fe fe01 	bl	8001ed4 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80032d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <mqtt_client_connect+0x4d6>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80032ec:	b292      	uxth	r2, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fe fdf0 	bl	8001ed4 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003302:	b292      	uxth	r2, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f7fe fde5 	bl	8001ed4 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800330a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800330e:	2b00      	cmp	r3, #0
 8003310:	da08      	bge.n	8003324 <mqtt_client_connect+0x4f0>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800331e:	4619      	mov	r1, r3
 8003320:	f7fe fdd8 	bl	8001ed4 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8003324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <mqtt_client_connect+0x50e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800333c:	4619      	mov	r1, r3
 800333e:	f7fe fdc9 	bl	8001ed4 <mqtt_output_append_string>
  }
  return ERR_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e00c      	b.n	8003360 <mqtt_client_connect+0x52c>
    goto tcp_fail;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <mqtt_client_connect+0x518>
    goto tcp_fail;
 800334a:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4618      	mov	r0, r3
 8003352:	f003 f855 	bl	8006400 <tcp_abort>
  client->conn = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
  return err;
 800335c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003360:	4618      	mov	r0, r3
 8003362:	3730      	adds	r7, #48	; 0x30
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	080145fc 	.word	0x080145fc
 800336c:	08014ba0 	.word	0x08014ba0
 8003370:	08014660 	.word	0x08014660
 8003374:	08014cd8 	.word	0x08014cd8
 8003378:	080170a4 	.word	0x080170a4
 800337c:	080029c5 	.word	0x080029c5
 8003380:	08002945 	.word	0x08002945
 8003384:	08014d14 	.word	0x08014d14

08003388 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	b21a      	sxth	r2, r3
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b29b      	uxth	r3, r3
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	061a      	lsls	r2, r3, #24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	4313      	orrs	r3, r2
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <lwip_standard_chksum+0x40>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	dd0a      	ble.n	8003424 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800340e:	f107 030e 	add.w	r3, r7, #14
 8003412:	3301      	adds	r3, #1
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	1c51      	adds	r1, r2, #1
 8003418:	61f9      	str	r1, [r7, #28]
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
    len--;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3b01      	subs	r3, #1
 8003422:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8003428:	e00a      	b.n	8003440 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	61ba      	str	r2, [r7, #24]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4413      	add	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
    len -= 2;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3b02      	subs	r3, #2
 800343e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	dcf1      	bgt.n	800342a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	dd04      	ble.n	8003456 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800344c:	f107 030e 	add.w	r3, r7, #14
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	461a      	mov	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4413      	add	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	0c1a      	lsrs	r2, r3, #16
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4413      	add	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	0c1a      	lsrs	r2, r3, #16
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4413      	add	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	b29a      	uxth	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b2db      	uxtb	r3, r3
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	b29b      	uxth	r3, r3
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	72fb      	strb	r3, [r7, #11]
 80034ac:	4613      	mov	r3, r2
 80034ae:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e02b      	b.n	8003512 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	895b      	ldrh	r3, [r3, #10]
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7ff ff8d 	bl	80033e4 <lwip_standard_chksum>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0c1a      	lsrs	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	4413      	add	r3, r2
 80034de:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	895b      	ldrh	r3, [r3, #10]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4313      	orrs	r3, r2
 800350a:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1d0      	bne.n	80034ba <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4313      	orrs	r3, r2
 800352c:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff28 	bl	8003388 <lwip_htons>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8003542:	893b      	ldrh	r3, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff1f 	bl	8003388 <lwip_htons>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0c1a      	lsrs	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	b29b      	uxth	r3, r3
 800355c:	4413      	add	r3, r2
 800355e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0c1a      	lsrs	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4413      	add	r3, r2
 800356a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	b29b      	uxth	r3, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	b29b      	uxth	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	72fb      	strb	r3, [r7, #11]
 800358a:	4613      	mov	r3, r2
 800358c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	b29b      	uxth	r3, r3
 8003598:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	0c1a      	lsrs	r2, r3, #16
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	0c1a      	lsrs	r2, r3, #16
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80035d6:	893a      	ldrh	r2, [r7, #8]
 80035d8:	7af9      	ldrb	r1, [r7, #11]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff ff5e 	bl	800349e <inet_cksum_pseudo_base>
 80035e2:	4603      	mov	r3, r0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	72fb      	strb	r3, [r7, #11]
 80035fa:	4613      	mov	r3, r2
 80035fc:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80035fe:	893a      	ldrh	r2, [r7, #8]
 8003600:	7af9      	ldrb	r1, [r7, #11]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff ffb7 	bl	800357c <inet_chksum_pseudo>
 800360e:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fedb 	bl	80033e4 <lwip_standard_chksum>
 800362e:	4603      	mov	r3, r0
 8003630:	43db      	mvns	r3, r3
 8003632:	b29b      	uxth	r3, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8003646:	f002 fbab 	bl	8005da0 <stats_init>
#if !NO_SYS
  sys_init();
 800364a:	f7fd fdc5 	bl	80011d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800364e:	f000 fcfb 	bl	8004048 <mem_init>
  memp_init();
 8003652:	f001 f8df 	bl	8004814 <memp_init>
  pbuf_init();
  netif_init();
 8003656:	f001 f9fd 	bl	8004a54 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800365a:	f002 fbaf 	bl	8005dbc <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 800365e:	f00d ff81 	bl	8011564 <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003662:	f009 f933 	bl	800c8cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <ip4_route+0xdc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e033      	b.n	80036e8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d029      	beq.n	80036e2 <ip4_route+0x72>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d022      	beq.n	80036e2 <ip4_route+0x72>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3304      	adds	r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01d      	beq.n	80036e2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	405a      	eors	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3308      	adds	r3, #8
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	e03e      	b.n	8003740 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d108      	bne.n	80036e2 <ip4_route+0x72>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	330c      	adds	r3, #12
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d101      	bne.n	80036e2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	e02e      	b.n	8003740 <ip4_route+0xd0>
  NETIF_FOREACH(netif) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1c8      	bne.n	8003680 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <ip4_route+0xe0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01a      	beq.n	800372c <ip4_route+0xbc>
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <ip4_route+0xe0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d012      	beq.n	800372c <ip4_route+0xbc>
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <ip4_route+0xe0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <ip4_route+0xe0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3304      	adds	r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b7f      	cmp	r3, #127	; 0x7f
 800372a:	d107      	bne.n	800373c <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <ip4_route+0xe4>)
 800372e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003730:	3301      	adds	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <ip4_route+0xe4>)
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	e001      	b.n	8003740 <ip4_route+0xd0>
  }

  return netif_default;
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <ip4_route+0xe0>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	20002158 	.word	0x20002158
 8003750:	2000215c 	.word	0x2000215c
 8003754:	20002164 	.word	0x20002164

08003758 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <ip4_input_accept+0x44>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <ip4_input_accept+0x50>)
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d008      	beq.n	8003798 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <ip4_input_accept+0x50>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 faad 	bl	8003cec <ip4_addr_isbroadcast_u32>
 8003792:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200007c8 	.word	0x200007c8

080037ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80037b6:	4b8e      	ldr	r3, [pc, #568]	; (80039f0 <ip4_input+0x244>)
 80037b8:	8b5b      	ldrh	r3, [r3, #26]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	4b8c      	ldr	r3, [pc, #560]	; (80039f0 <ip4_input+0x244>)
 80037c0:	835a      	strh	r2, [r3, #26]
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d010      	beq.n	80037f6 <ip4_input+0x4a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f001 fee9 	bl	80055ac <pbuf_free>
    IP_STATS_INC(ip.err);
 80037da:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <ip4_input+0x244>)
 80037dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037de:	3301      	adds	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	4b83      	ldr	r3, [pc, #524]	; (80039f0 <ip4_input+0x244>)
 80037e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    IP_STATS_INC(ip.drop);
 80037e6:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <ip4_input+0x244>)
 80037e8:	8bdb      	ldrh	r3, [r3, #30]
 80037ea:	3301      	adds	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	4b80      	ldr	r3, [pc, #512]	; (80039f0 <ip4_input+0x244>)
 80037f0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e125      	b.n	8003a42 <ip4_input+0x296>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	b2db      	uxtb	r3, r3
 8003804:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	885b      	ldrh	r3, [r3, #2]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fdbb 	bl	8003388 <lwip_htons>
 8003812:	4603      	mov	r3, r0
 8003814:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	891b      	ldrh	r3, [r3, #8]
 800381a:	89ba      	ldrh	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d204      	bcs.n	800382a <ip4_input+0x7e>
    pbuf_realloc(p, iphdr_len);
 8003820:	89bb      	ldrh	r3, [r7, #12]
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f001 fd49 	bl	80052bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	895b      	ldrh	r3, [r3, #10]
 800382e:	89fa      	ldrh	r2, [r7, #14]
 8003830:	429a      	cmp	r2, r3
 8003832:	d807      	bhi.n	8003844 <ip4_input+0x98>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	891b      	ldrh	r3, [r3, #8]
 8003838:	89ba      	ldrh	r2, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	d802      	bhi.n	8003844 <ip4_input+0x98>
 800383e:	89fb      	ldrh	r3, [r7, #14]
 8003840:	2b13      	cmp	r3, #19
 8003842:	d810      	bhi.n	8003866 <ip4_input+0xba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f001 feb1 	bl	80055ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800384a:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <ip4_input+0x244>)
 800384c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800384e:	3301      	adds	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <ip4_input+0x244>)
 8003854:	845a      	strh	r2, [r3, #34]	; 0x22
    IP_STATS_INC(ip.drop);
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <ip4_input+0x244>)
 8003858:	8bdb      	ldrh	r3, [r3, #30]
 800385a:	3301      	adds	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <ip4_input+0x244>)
 8003860:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e0ed      	b.n	8003a42 <ip4_input+0x296>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8003866:	89fb      	ldrh	r3, [r7, #14]
 8003868:	4619      	mov	r1, r3
 800386a:	6938      	ldr	r0, [r7, #16]
 800386c:	f7ff fed4 	bl	8003618 <inet_chksum>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <ip4_input+0xec>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f001 fe98 	bl	80055ac <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 800387c:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <ip4_input+0x244>)
 800387e:	8c1b      	ldrh	r3, [r3, #32]
 8003880:	3301      	adds	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <ip4_input+0x244>)
 8003886:	841a      	strh	r2, [r3, #32]
      IP_STATS_INC(ip.drop);
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <ip4_input+0x244>)
 800388a:	8bdb      	ldrh	r3, [r3, #30]
 800388c:	3301      	adds	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	4b57      	ldr	r3, [pc, #348]	; (80039f0 <ip4_input+0x244>)
 8003892:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e0d4      	b.n	8003a42 <ip4_input+0x296>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4a55      	ldr	r2, [pc, #340]	; (80039f4 <ip4_input+0x248>)
 800389e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a53      	ldr	r2, [pc, #332]	; (80039f4 <ip4_input+0x248>)
 80038a6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <ip4_input+0x248>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b0:	2be0      	cmp	r3, #224	; 0xe0
 80038b2:	d111      	bne.n	80038d8 <ip4_input+0x12c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <ip4_input+0x126>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	3304      	adds	r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <ip4_input+0x126>
      netif = inp;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e02a      	b.n	8003928 <ip4_input+0x17c>
    } else {
      netif = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e027      	b.n	8003928 <ip4_input+0x17c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f7ff ff3d 	bl	8003758 <ip4_input_accept>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <ip4_input+0x13e>
      netif = inp;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e01e      	b.n	8003928 <ip4_input+0x17c>
    } else {
      netif = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <ip4_input+0x248>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b7f      	cmp	r3, #127	; 0x7f
 80038f6:	d017      	beq.n	8003928 <ip4_input+0x17c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80038f8:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <ip4_input+0x24c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e00e      	b.n	800391e <ip4_input+0x172>
          if (netif == inp) {
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d006      	beq.n	8003916 <ip4_input+0x16a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f7ff ff25 	bl	8003758 <ip4_input_accept>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d108      	bne.n	8003926 <ip4_input+0x17a>
 8003914:	e000      	b.n	8003918 <ip4_input+0x16c>
            continue;
 8003916:	bf00      	nop
        NETIF_FOREACH(netif) {
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ed      	bne.n	8003900 <ip4_input+0x154>
 8003924:	e000      	b.n	8003928 <ip4_input+0x17c>
            break;
 8003926:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <ip4_input+0x248>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f9dc 	bl	8003cec <ip4_addr_isbroadcast_u32>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <ip4_input+0x248>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003942:	2be0      	cmp	r3, #224	; 0xe0
 8003944:	d10a      	bne.n	800395c <ip4_input+0x1b0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f001 fe30 	bl	80055ac <pbuf_free>
      IP_STATS_INC(ip.drop);
 800394c:	4b28      	ldr	r3, [pc, #160]	; (80039f0 <ip4_input+0x244>)
 800394e:	8bdb      	ldrh	r3, [r3, #30]
 8003950:	3301      	adds	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <ip4_input+0x244>)
 8003956:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e072      	b.n	8003a42 <ip4_input+0x296>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <ip4_input+0x1cc>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <ip4_input+0x244>)
 8003964:	8bdb      	ldrh	r3, [r3, #30]
 8003966:	3301      	adds	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <ip4_input+0x244>)
 800396c:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f001 fe1c 	bl	80055ac <pbuf_free>
    return ERR_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e064      	b.n	8003a42 <ip4_input+0x296>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	88db      	ldrh	r3, [r3, #6]
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <ip4_input+0x200>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fe0e 	bl	80055ac <pbuf_free>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <ip4_input+0x244>)
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	3301      	adds	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <ip4_input+0x244>)
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
    IP_STATS_INC(ip.drop);
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <ip4_input+0x244>)
 800399e:	8bdb      	ldrh	r3, [r3, #30]
 80039a0:	3301      	adds	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <ip4_input+0x244>)
 80039a6:	83da      	strh	r2, [r3, #30]
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e04a      	b.n	8003a42 <ip4_input+0x296>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <ip4_input+0x248>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <ip4_input+0x248>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80039b8:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <ip4_input+0x248>)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <ip4_input+0x248>)
 80039d0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80039d2:	89fb      	ldrh	r3, [r7, #14]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 fd92 	bl	8005500 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	7a5b      	ldrb	r3, [r3, #9]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d10b      	bne.n	80039fc <ip4_input+0x250>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f004 f90a 	bl	8007c00 <tcp_input>
        break;
 80039ec:	e016      	b.n	8003a1c <ip4_input+0x270>
 80039ee:	bf00      	nop
 80039f0:	20002164 	.word	0x20002164
 80039f4:	200007c8 	.word	0x200007c8
 80039f8:	20002158 	.word	0x20002158
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 80039fc:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <ip4_input+0x2a0>)
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3301      	adds	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <ip4_input+0x2a0>)
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          IP_STATS_INC(ip.drop);
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <ip4_input+0x2a0>)
 8003a0a:	8bdb      	ldrh	r3, [r3, #30]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <ip4_input+0x2a0>)
 8003a12:	83da      	strh	r2, [r3, #30]
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f001 fdc9 	bl	80055ac <pbuf_free>
        break;
 8003a1a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <ip4_input+0x2a4>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <ip4_input+0x2a4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <ip4_input+0x2a4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <ip4_input+0x2a4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <ip4_input+0x2a4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <ip4_input+0x2a4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20002164 	.word	0x20002164
 8003a50:	200007c8 	.word	0x200007c8

08003a54 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <ip4_output_if+0x26>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f805 	bl	8003aa8 <ip4_output_if_src>
 8003a9e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	7b9b      	ldrb	r3, [r3, #14]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d00b      	beq.n	8003ada <ip4_output_if_src+0x32>
 8003ac2:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <ip4_output_if_src+0x228>)
 8003ac4:	f240 326b 	movw	r2, #875	; 0x36b
 8003ac8:	4982      	ldr	r1, [pc, #520]	; (8003cd4 <ip4_output_if_src+0x22c>)
 8003aca:	4883      	ldr	r0, [pc, #524]	; (8003cd8 <ip4_output_if_src+0x230>)
 8003acc:	f00f fa8c 	bl	8012fe8 <iprintf>
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f00f fb8b 	bl	80131ec <fflush>
 8003ad6:	f00f fad0 	bl	801307a <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80cf 	beq.w	8003c80 <ip4_output_if_src+0x1d8>
    u16_t ip_hlen = IP_HLEN;
 8003ae2:	2314      	movs	r3, #20
 8003ae4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8003ae6:	2114      	movs	r1, #20
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f001 fcf9 	bl	80054e0 <pbuf_add_header>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <ip4_output_if_src+0x5e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8003af4:	4b79      	ldr	r3, [pc, #484]	; (8003cdc <ip4_output_if_src+0x234>)
 8003af6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003af8:	3301      	adds	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <ip4_output_if_src+0x234>)
 8003afe:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8003b00:	f06f 0301 	mvn.w	r3, #1
 8003b04:	e0df      	b.n	8003cc6 <ip4_output_if_src+0x21e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	895b      	ldrh	r3, [r3, #10]
 8003b10:	2b13      	cmp	r3, #19
 8003b12:	d80b      	bhi.n	8003b2c <ip4_output_if_src+0x84>
 8003b14:	4b6e      	ldr	r3, [pc, #440]	; (8003cd0 <ip4_output_if_src+0x228>)
 8003b16:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8003b1a:	4971      	ldr	r1, [pc, #452]	; (8003ce0 <ip4_output_if_src+0x238>)
 8003b1c:	486e      	ldr	r0, [pc, #440]	; (8003cd8 <ip4_output_if_src+0x230>)
 8003b1e:	f00f fa63 	bl	8012fe8 <iprintf>
 8003b22:	2000      	movs	r0, #0
 8003b24:	f00f fb62 	bl	80131ec <fflush>
 8003b28:	f00f faa7 	bl	801307a <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003b38:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8003b3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4313      	orrs	r3, r2
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b21a      	sxth	r2, r3
 8003b48:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	430b      	orrs	r3, r1
 8003b52:	121b      	asrs	r3, r3, #8
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ba0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8003ba2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	4313      	orrs	r3, r2
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	b21a      	sxth	r2, r3
 8003bb2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	121b      	asrs	r3, r3, #8
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	891b      	ldrh	r3, [r3, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fbd5 	bl	8003388 <lwip_htons>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	885b      	ldrh	r3, [r3, #2]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	719a      	strb	r2, [r3, #6]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <ip4_output_if_src+0x23c>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fbc0 	bl	8003388 <lwip_htons>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	889b      	ldrh	r3, [r3, #4]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <ip4_output_if_src+0x23c>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <ip4_output_if_src+0x23c>)
 8003c28:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <ip4_output_if_src+0x192>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8003c30:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <ip4_output_if_src+0x240>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	e003      	b.n	8003c42 <ip4_output_if_src+0x19a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	0c1a      	lsrs	r2, r3, #16
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	815a      	strh	r2, [r3, #10]
 8003c7e:	e015      	b.n	8003cac <ip4_output_if_src+0x204>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	895b      	ldrh	r3, [r3, #10]
 8003c84:	2b13      	cmp	r3, #19
 8003c86:	d808      	bhi.n	8003c9a <ip4_output_if_src+0x1f2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <ip4_output_if_src+0x234>)
 8003c8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <ip4_output_if_src+0x234>)
 8003c92:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8003c94:	f06f 0301 	mvn.w	r3, #1
 8003c98:	e015      	b.n	8003cc6 <ip4_output_if_src+0x21e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8003ca6:	f107 0310 	add.w	r3, r7, #16
 8003caa:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <ip4_output_if_src+0x234>)
 8003cae:	8b1b      	ldrh	r3, [r3, #24]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <ip4_output_if_src+0x234>)
 8003cb6:	831a      	strh	r2, [r3, #24]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc2:	4798      	blx	r3
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08014d68 	.word	0x08014d68
 8003cd4:	08014d8c 	.word	0x08014d8c
 8003cd8:	08014d98 	.word	0x08014d98
 8003cdc:	20002164 	.word	0x20002164
 8003ce0:	08014dc0 	.word	0x08014dc0
 8003ce4:	20000582 	.word	0x20000582
 8003ce8:	080170a4 	.word	0x080170a4

08003cec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d002      	beq.n	8003d08 <ip4_addr_isbroadcast_u32+0x1c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02a      	b.n	8003d62 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e021      	b.n	8003d62 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d101      	bne.n	8003d2e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e019      	b.n	8003d62 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	3304      	adds	r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	405a      	eors	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d101      	bne.n	8003d60 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8003d60:	2300      	movs	r3, #0
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8003d78:	2210      	movs	r2, #16
 8003d7a:	4904      	ldr	r1, [pc, #16]	; (8003d8c <ip4addr_ntoa+0x1c>)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f807 	bl	8003d90 <ip4addr_ntoa_r>
 8003d82:	4603      	mov	r3, r0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000584 	.word	0x20000584

08003d90 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b08d      	sub	sp, #52	; 0x34
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8003daa:	f107 0318 	add.w	r3, r7, #24
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003db6:	e059      	b.n	8003e6c <ip4addr_ntoa_r+0xdc>
    i = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <ip4addr_ntoa_r+0x100>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	08d9      	lsrs	r1, r3, #3
 8003dca:	460b      	mov	r3, r1
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <ip4addr_ntoa_r+0x100>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8003de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003df2:	4619      	mov	r1, r3
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	3330      	adds	r3, #48	; 0x30
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dfe:	440b      	add	r3, r1
 8003e00:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1d8      	bne.n	8003dbe <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8003e0c:	e012      	b.n	8003e34 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	623a      	str	r2, [r7, #32]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4293      	cmp	r3, r2
 8003e18:	db01      	blt.n	8003e1e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e031      	b.n	8003e82 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003e28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003e32:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8003e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e38:	1e5a      	subs	r2, r3, #1
 8003e3a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	623a      	str	r2, [r7, #32]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	db01      	blt.n	8003e52 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e017      	b.n	8003e82 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e58:	222e      	movs	r2, #46	; 0x2e
 8003e5a:	701a      	strb	r2, [r3, #0]
    ap++;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	3301      	adds	r3, #1
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8003e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e66:	3301      	adds	r3, #1
 8003e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d9a1      	bls.n	8003db8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	3b01      	subs	r3, #1
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
  return buf;
 8003e80:	68bb      	ldr	r3, [r7, #8]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3734      	adds	r7, #52	; 0x34
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	cccccccd 	.word	0xcccccccd

08003e94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <ptr_to_mem+0x20>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	4413      	add	r3, r2
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000594 	.word	0x20000594

08003eb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <mem_to_ptr+0x20>)
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	b29b      	uxth	r3, r3
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000594 	.word	0x20000594

08003edc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003ee4:	4b4f      	ldr	r3, [pc, #316]	; (8004024 <plug_holes+0x148>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d20b      	bcs.n	8003f06 <plug_holes+0x2a>
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <plug_holes+0x14c>)
 8003ef0:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <plug_holes+0x150>)
 8003ef6:	484e      	ldr	r0, [pc, #312]	; (8004030 <plug_holes+0x154>)
 8003ef8:	f00f f876 	bl	8012fe8 <iprintf>
 8003efc:	2000      	movs	r0, #0
 8003efe:	f00f f975 	bl	80131ec <fflush>
 8003f02:	f00f f8ba 	bl	801307a <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003f06:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <plug_holes+0x158>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d30b      	bcc.n	8003f28 <plug_holes+0x4c>
 8003f10:	4b45      	ldr	r3, [pc, #276]	; (8004028 <plug_holes+0x14c>)
 8003f12:	f240 12d3 	movw	r2, #467	; 0x1d3
 8003f16:	4948      	ldr	r1, [pc, #288]	; (8004038 <plug_holes+0x15c>)
 8003f18:	4845      	ldr	r0, [pc, #276]	; (8004030 <plug_holes+0x154>)
 8003f1a:	f00f f865 	bl	8012fe8 <iprintf>
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f00f f964 	bl	80131ec <fflush>
 8003f24:	f00f f8a9 	bl	801307a <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	791b      	ldrb	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <plug_holes+0x6c>
 8003f30:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <plug_holes+0x14c>)
 8003f32:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8003f36:	4941      	ldr	r1, [pc, #260]	; (800403c <plug_holes+0x160>)
 8003f38:	483d      	ldr	r0, [pc, #244]	; (8004030 <plug_holes+0x154>)
 8003f3a:	f00f f855 	bl	8012fe8 <iprintf>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f00f f954 	bl	80131ec <fflush>
 8003f44:	f00f f899 	bl	801307a <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f50:	d90b      	bls.n	8003f6a <plug_holes+0x8e>
 8003f52:	4b35      	ldr	r3, [pc, #212]	; (8004028 <plug_holes+0x14c>)
 8003f54:	f240 12d7 	movw	r2, #471	; 0x1d7
 8003f58:	4939      	ldr	r1, [pc, #228]	; (8004040 <plug_holes+0x164>)
 8003f5a:	4835      	ldr	r0, [pc, #212]	; (8004030 <plug_holes+0x154>)
 8003f5c:	f00f f844 	bl	8012fe8 <iprintf>
 8003f60:	2000      	movs	r0, #0
 8003f62:	f00f f943 	bl	80131ec <fflush>
 8003f66:	f00f f888 	bl	801307a <abort>

  nmem = ptr_to_mem(mem->next);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff90 	bl	8003e94 <ptr_to_mem>
 8003f74:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d024      	beq.n	8003fc8 <plug_holes+0xec>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	791b      	ldrb	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d120      	bne.n	8003fc8 <plug_holes+0xec>
 8003f86:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <plug_holes+0x158>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d01b      	beq.n	8003fc8 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <plug_holes+0x168>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d102      	bne.n	8003fa0 <plug_holes+0xc4>
      lfree = mem;
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <plug_holes+0x168>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003fb0:	d00a      	beq.n	8003fc8 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff6c 	bl	8003e94 <ptr_to_mem>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ff7a 	bl	8003eb8 <mem_to_ptr>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	885b      	ldrh	r3, [r3, #2]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff61 	bl	8003e94 <ptr_to_mem>
 8003fd2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d01f      	beq.n	800401c <plug_holes+0x140>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11b      	bne.n	800401c <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <plug_holes+0x168>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d102      	bne.n	8003ff4 <plug_holes+0x118>
      lfree = pmem;
 8003fee:	4a15      	ldr	r2, [pc, #84]	; (8004044 <plug_holes+0x168>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004004:	d00a      	beq.n	800401c <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff42 	bl	8003e94 <ptr_to_mem>
 8004010:	4604      	mov	r4, r0
 8004012:	68b8      	ldr	r0, [r7, #8]
 8004014:	f7ff ff50 	bl	8003eb8 <mem_to_ptr>
 8004018:	4603      	mov	r3, r0
 800401a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	20000594 	.word	0x20000594
 8004028:	08014df0 	.word	0x08014df0
 800402c:	08014e10 	.word	0x08014e10
 8004030:	08014e28 	.word	0x08014e28
 8004034:	20000598 	.word	0x20000598
 8004038:	08014e50 	.word	0x08014e50
 800403c:	08014e6c 	.word	0x08014e6c
 8004040:	08014e88 	.word	0x08014e88
 8004044:	200005a0 	.word	0x200005a0

08004048 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800404e:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <mem_init+0x90>)
 8004050:	4a22      	ldr	r2, [pc, #136]	; (80040dc <mem_init+0x94>)
 8004052:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <mem_init+0x90>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004060:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800406e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004072:	f7ff ff0f 	bl	8003e94 <ptr_to_mem>
 8004076:	4602      	mov	r2, r0
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <mem_init+0x98>)
 800407a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <mem_init+0x98>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <mem_init+0x98>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800408c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <mem_init+0x98>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004096:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <mem_init+0x90>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <mem_init+0x9c>)
 800409e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <mem_init+0xa0>)
 80040a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80040a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80040aa:	4810      	ldr	r0, [pc, #64]	; (80040ec <mem_init+0xa4>)
 80040ac:	f7fd f89b 	bl	80011e6 <sys_mutex_new>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <mem_init+0x86>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <mem_init+0xa8>)
 80040b8:	f240 2212 	movw	r2, #530	; 0x212
 80040bc:	490d      	ldr	r1, [pc, #52]	; (80040f4 <mem_init+0xac>)
 80040be:	480e      	ldr	r0, [pc, #56]	; (80040f8 <mem_init+0xb0>)
 80040c0:	f00e ff92 	bl	8012fe8 <iprintf>
 80040c4:	2000      	movs	r0, #0
 80040c6:	f00f f891 	bl	80131ec <fflush>
 80040ca:	f00e ffd6 	bl	801307a <abort>
  }
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000594 	.word	0x20000594
 80040dc:	200007e0 	.word	0x200007e0
 80040e0:	20000598 	.word	0x20000598
 80040e4:	200005a0 	.word	0x200005a0
 80040e8:	20002164 	.word	0x20002164
 80040ec:	2000059c 	.word	0x2000059c
 80040f0:	08014df0 	.word	0x08014df0
 80040f4:	08014eb4 	.word	0x08014eb4
 80040f8:	08014e28 	.word	0x08014e28

080040fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fed7 	bl	8003eb8 <mem_to_ptr>
 800410a:	4603      	mov	r3, r0
 800410c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff febe 	bl	8003e94 <ptr_to_mem>
 8004118:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	885b      	ldrh	r3, [r3, #2]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff feb8 	bl	8003e94 <ptr_to_mem>
 8004124:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800412e:	d818      	bhi.n	8004162 <mem_link_valid+0x66>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	885b      	ldrh	r3, [r3, #2]
 8004134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004138:	d813      	bhi.n	8004162 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800413e:	8afa      	ldrh	r2, [r7, #22]
 8004140:	429a      	cmp	r2, r3
 8004142:	d004      	beq.n	800414e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	8afa      	ldrh	r2, [r7, #22]
 800414a:	429a      	cmp	r2, r3
 800414c:	d109      	bne.n	8004162 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <mem_link_valid+0x74>)
 8004150:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	429a      	cmp	r2, r3
 8004156:	d006      	beq.n	8004166 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	885b      	ldrh	r3, [r3, #2]
 800415c:	8afa      	ldrh	r2, [r7, #22]
 800415e:	429a      	cmp	r2, r3
 8004160:	d001      	beq.n	8004166 <mem_link_valid+0x6a>
    return 0;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <mem_link_valid+0x6c>
  }
  return 1;
 8004166:	2301      	movs	r3, #1
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000598 	.word	0x20000598

08004174 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d062      	beq.n	8004248 <mem_free+0xd4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3b06      	subs	r3, #6
 8004186:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <mem_free+0xdc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	429a      	cmp	r2, r3
 8004190:	d306      	bcc.n	80041a0 <mem_free+0x2c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 020c 	add.w	r2, r3, #12
 8004198:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <mem_free+0xe0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d90b      	bls.n	80041b8 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <mem_free+0xe4>)
 80041a2:	f240 2272 	movw	r2, #626	; 0x272
 80041a6:	492d      	ldr	r1, [pc, #180]	; (800425c <mem_free+0xe8>)
 80041a8:	482d      	ldr	r0, [pc, #180]	; (8004260 <mem_free+0xec>)
 80041aa:	f00e ff1d 	bl	8012fe8 <iprintf>
 80041ae:	2000      	movs	r0, #0
 80041b0:	f00f f81c 	bl	80131ec <fflush>
 80041b4:	f00e ff61 	bl	801307a <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80041b8:	482a      	ldr	r0, [pc, #168]	; (8004264 <mem_free+0xf0>)
 80041ba:	f7fd f822 	bl	8001202 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <mem_free+0xe4>)
 80041c8:	f240 227f 	movw	r2, #639	; 0x27f
 80041cc:	4926      	ldr	r1, [pc, #152]	; (8004268 <mem_free+0xf4>)
 80041ce:	4824      	ldr	r0, [pc, #144]	; (8004260 <mem_free+0xec>)
 80041d0:	f00e ff0a 	bl	8012fe8 <iprintf>
 80041d4:	2000      	movs	r0, #0
 80041d6:	f00f f809 	bl	80131ec <fflush>
 80041da:	f00e ff4e 	bl	801307a <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff ff8c 	bl	80040fc <mem_link_valid>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <mem_free+0xe4>)
 80041ec:	f44f 7222 	mov.w	r2, #648	; 0x288
 80041f0:	491e      	ldr	r1, [pc, #120]	; (800426c <mem_free+0xf8>)
 80041f2:	481b      	ldr	r0, [pc, #108]	; (8004260 <mem_free+0xec>)
 80041f4:	f00e fef8 	bl	8012fe8 <iprintf>
 80041f8:	2000      	movs	r0, #0
 80041fa:	f00e fff7 	bl	80131ec <fflush>
 80041fe:	f00e ff3c 	bl	801307a <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <mem_free+0xfc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	429a      	cmp	r2, r3
 8004210:	d202      	bcs.n	8004218 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <mem_free+0xfc>)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <mem_free+0x100>)
 800421a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	490b      	ldr	r1, [pc, #44]	; (8004250 <mem_free+0xdc>)
 8004222:	6809      	ldr	r1, [r1, #0]
 8004224:	1a5b      	subs	r3, r3, r1
 8004226:	b299      	uxth	r1, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	1acb      	subs	r3, r1, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	4413      	add	r3, r2
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <mem_free+0x100>)
 8004236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fe4e 	bl	8003edc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004240:	4808      	ldr	r0, [pc, #32]	; (8004264 <mem_free+0xf0>)
 8004242:	f7fc ffe8 	bl	8001216 <sys_mutex_unlock>
 8004246:	e000      	b.n	800424a <mem_free+0xd6>
    return;
 8004248:	bf00      	nop
}
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000594 	.word	0x20000594
 8004254:	20000598 	.word	0x20000598
 8004258:	08014df0 	.word	0x08014df0
 800425c:	08014ed0 	.word	0x08014ed0
 8004260:	08014e28 	.word	0x08014e28
 8004264:	2000059c 	.word	0x2000059c
 8004268:	08014eec 	.word	0x08014eec
 800426c:	08014f14 	.word	0x08014f14
 8004270:	200005a0 	.word	0x200005a0
 8004274:	20002164 	.word	0x20002164

08004278 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	2b0b      	cmp	r3, #11
 800428c:	d801      	bhi.n	8004292 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800428e:	230c      	movs	r3, #12
 8004290:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004292:	8bfb      	ldrh	r3, [r7, #30]
 8004294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004298:	d803      	bhi.n	80042a2 <mem_trim+0x2a>
 800429a:	8bfa      	ldrh	r2, [r7, #30]
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d201      	bcs.n	80042a6 <mem_trim+0x2e>
    return NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e10c      	b.n	80044c0 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80042a6:	4b88      	ldr	r3, [pc, #544]	; (80044c8 <mem_trim+0x250>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d304      	bcc.n	80042ba <mem_trim+0x42>
 80042b0:	4b86      	ldr	r3, [pc, #536]	; (80044cc <mem_trim+0x254>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d30b      	bcc.n	80042d2 <mem_trim+0x5a>
 80042ba:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <mem_trim+0x258>)
 80042bc:	f240 22c5 	movw	r2, #709	; 0x2c5
 80042c0:	4984      	ldr	r1, [pc, #528]	; (80044d4 <mem_trim+0x25c>)
 80042c2:	4885      	ldr	r0, [pc, #532]	; (80044d8 <mem_trim+0x260>)
 80042c4:	f00e fe90 	bl	8012fe8 <iprintf>
 80042c8:	2000      	movs	r0, #0
 80042ca:	f00e ff8f 	bl	80131ec <fflush>
 80042ce:	f00e fed4 	bl	801307a <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80042d2:	4b7d      	ldr	r3, [pc, #500]	; (80044c8 <mem_trim+0x250>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d304      	bcc.n	80042e6 <mem_trim+0x6e>
 80042dc:	4b7b      	ldr	r3, [pc, #492]	; (80044cc <mem_trim+0x254>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d30f      	bcc.n	8004306 <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80042e6:	f7fd f80f 	bl	8001308 <sys_arch_protect>
 80042ea:	60b8      	str	r0, [r7, #8]
 80042ec:	4b7b      	ldr	r3, [pc, #492]	; (80044dc <mem_trim+0x264>)
 80042ee:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80042f2:	3301      	adds	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	4b79      	ldr	r3, [pc, #484]	; (80044dc <mem_trim+0x264>)
 80042f8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7fd f80b 	bl	8001318 <sys_arch_unprotect>
    return rmem;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	e0dc      	b.n	80044c0 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3b06      	subs	r3, #6
 800430a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800430c:	69b8      	ldr	r0, [r7, #24]
 800430e:	f7ff fdd3 	bl	8003eb8 <mem_to_ptr>
 8004312:	4603      	mov	r3, r0
 8004314:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b06      	subs	r3, #6
 8004322:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004324:	8bfa      	ldrh	r2, [r7, #30]
 8004326:	8abb      	ldrh	r3, [r7, #20]
 8004328:	429a      	cmp	r2, r3
 800432a:	d90b      	bls.n	8004344 <mem_trim+0xcc>
 800432c:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <mem_trim+0x258>)
 800432e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004332:	496b      	ldr	r1, [pc, #428]	; (80044e0 <mem_trim+0x268>)
 8004334:	4868      	ldr	r0, [pc, #416]	; (80044d8 <mem_trim+0x260>)
 8004336:	f00e fe57 	bl	8012fe8 <iprintf>
 800433a:	2000      	movs	r0, #0
 800433c:	f00e ff56 	bl	80131ec <fflush>
 8004340:	f00e fe9b 	bl	801307a <abort>
  if (newsize > size) {
 8004344:	8bfa      	ldrh	r2, [r7, #30]
 8004346:	8abb      	ldrh	r3, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	d901      	bls.n	8004350 <mem_trim+0xd8>
    /* not supported */
    return NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	e0b7      	b.n	80044c0 <mem_trim+0x248>
  }
  if (newsize == size) {
 8004350:	8bfa      	ldrh	r2, [r7, #30]
 8004352:	8abb      	ldrh	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	d101      	bne.n	800435c <mem_trim+0xe4>
    /* No change in size, simply return */
    return rmem;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	e0b1      	b.n	80044c0 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800435c:	4861      	ldr	r0, [pc, #388]	; (80044e4 <mem_trim+0x26c>)
 800435e:	f7fc ff50 	bl	8001202 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fd94 	bl	8003e94 <ptr_to_mem>
 800436c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d150      	bne.n	8004418 <mem_trim+0x1a0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800437e:	d10b      	bne.n	8004398 <mem_trim+0x120>
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <mem_trim+0x258>)
 8004382:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004386:	4958      	ldr	r1, [pc, #352]	; (80044e8 <mem_trim+0x270>)
 8004388:	4853      	ldr	r0, [pc, #332]	; (80044d8 <mem_trim+0x260>)
 800438a:	f00e fe2d 	bl	8012fe8 <iprintf>
 800438e:	2000      	movs	r0, #0
 8004390:	f00e ff2c 	bl	80131ec <fflush>
 8004394:	f00e fe71 	bl	801307a <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800439e:	8afa      	ldrh	r2, [r7, #22]
 80043a0:	8bfb      	ldrh	r3, [r7, #30]
 80043a2:	4413      	add	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3306      	adds	r3, #6
 80043a8:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 80043aa:	4b50      	ldr	r3, [pc, #320]	; (80044ec <mem_trim+0x274>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <mem_trim+0x14a>
      lfree = ptr_to_mem(ptr2);
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fd6c 	bl	8003e94 <ptr_to_mem>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <mem_trim+0x274>)
 80043c0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80043c2:	89bb      	ldrh	r3, [r7, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fd65 	bl	8003e94 <ptr_to_mem>
 80043ca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2200      	movs	r2, #0
 80043d0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	89fa      	ldrh	r2, [r7, #14]
 80043d6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	8afa      	ldrh	r2, [r7, #22]
 80043dc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	89ba      	ldrh	r2, [r7, #12]
 80043e2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043ec:	d007      	beq.n	80043fe <mem_trim+0x186>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fd4e 	bl	8003e94 <ptr_to_mem>
 80043f8:	4602      	mov	r2, r0
 80043fa:	89bb      	ldrh	r3, [r7, #12]
 80043fc:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80043fe:	4b37      	ldr	r3, [pc, #220]	; (80044dc <mem_trim+0x264>)
 8004400:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004404:	8bf9      	ldrh	r1, [r7, #30]
 8004406:	8abb      	ldrh	r3, [r7, #20]
 8004408:	1acb      	subs	r3, r1, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	4413      	add	r3, r2
 800440e:	b29a      	uxth	r2, r3
 8004410:	4b32      	ldr	r3, [pc, #200]	; (80044dc <mem_trim+0x264>)
 8004412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004416:	e04f      	b.n	80044b8 <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004418:	8bfb      	ldrh	r3, [r7, #30]
 800441a:	f103 0212 	add.w	r2, r3, #18
 800441e:	8abb      	ldrh	r3, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d849      	bhi.n	80044b8 <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004424:	8afa      	ldrh	r2, [r7, #22]
 8004426:	8bfb      	ldrh	r3, [r7, #30]
 8004428:	4413      	add	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	3306      	adds	r3, #6
 800442e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004438:	d10b      	bne.n	8004452 <mem_trim+0x1da>
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <mem_trim+0x258>)
 800443c:	f240 3209 	movw	r2, #777	; 0x309
 8004440:	4929      	ldr	r1, [pc, #164]	; (80044e8 <mem_trim+0x270>)
 8004442:	4825      	ldr	r0, [pc, #148]	; (80044d8 <mem_trim+0x260>)
 8004444:	f00e fdd0 	bl	8012fe8 <iprintf>
 8004448:	2000      	movs	r0, #0
 800444a:	f00e fecf 	bl	80131ec <fflush>
 800444e:	f00e fe14 	bl	801307a <abort>
    mem2 = ptr_to_mem(ptr2);
 8004452:	89bb      	ldrh	r3, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fd1d 	bl	8003e94 <ptr_to_mem>
 800445a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <mem_trim+0x274>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d202      	bcs.n	800446c <mem_trim+0x1f4>
      lfree = mem2;
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <mem_trim+0x274>)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2200      	movs	r2, #0
 8004470:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	8afa      	ldrh	r2, [r7, #22]
 800447e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	89ba      	ldrh	r2, [r7, #12]
 8004484:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800448e:	d007      	beq.n	80044a0 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fcfd 	bl	8003e94 <ptr_to_mem>
 800449a:	4602      	mov	r2, r0
 800449c:	89bb      	ldrh	r3, [r7, #12]
 800449e:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <mem_trim+0x264>)
 80044a2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80044a6:	8bf9      	ldrh	r1, [r7, #30]
 80044a8:	8abb      	ldrh	r3, [r7, #20]
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <mem_trim+0x264>)
 80044b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <mem_trim+0x26c>)
 80044ba:	f7fc feac 	bl	8001216 <sys_mutex_unlock>
  return rmem;
 80044be:	687b      	ldr	r3, [r7, #4]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000594 	.word	0x20000594
 80044cc:	20000598 	.word	0x20000598
 80044d0:	08014df0 	.word	0x08014df0
 80044d4:	08014f48 	.word	0x08014f48
 80044d8:	08014e28 	.word	0x08014e28
 80044dc:	20002164 	.word	0x20002164
 80044e0:	08014f60 	.word	0x08014f60
 80044e4:	2000059c 	.word	0x2000059c
 80044e8:	08014f80 	.word	0x08014f80
 80044ec:	200005a0 	.word	0x200005a0

080044f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <mem_malloc+0x14>
    return NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	e112      	b.n	800472a <mem_malloc+0x23a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004508:	8bbb      	ldrh	r3, [r7, #28]
 800450a:	2b0b      	cmp	r3, #11
 800450c:	d801      	bhi.n	8004512 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800450e:	230c      	movs	r3, #12
 8004510:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004512:	8bbb      	ldrh	r3, [r7, #28]
 8004514:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004518:	d803      	bhi.n	8004522 <mem_malloc+0x32>
 800451a:	8bba      	ldrh	r2, [r7, #28]
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	429a      	cmp	r2, r3
 8004520:	d201      	bcs.n	8004526 <mem_malloc+0x36>
    return NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	e101      	b.n	800472a <mem_malloc+0x23a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8004526:	4883      	ldr	r0, [pc, #524]	; (8004734 <mem_malloc+0x244>)
 8004528:	f7fc fe6b 	bl	8001202 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800452c:	4b82      	ldr	r3, [pc, #520]	; (8004738 <mem_malloc+0x248>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fcc1 	bl	8003eb8 <mem_to_ptr>
 8004536:	4603      	mov	r3, r0
 8004538:	83fb      	strh	r3, [r7, #30]
 800453a:	e0e3      	b.n	8004704 <mem_malloc+0x214>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fca8 	bl	8003e94 <ptr_to_mem>
 8004544:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80d3 	bne.w	80046f6 <mem_malloc+0x206>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	1f9a      	subs	r2, r3, #6
 800455c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800455e:	429a      	cmp	r2, r3
 8004560:	f0c0 80c9 	bcc.w	80046f6 <mem_malloc+0x206>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	8bfb      	ldrh	r3, [r7, #30]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	1f9a      	subs	r2, r3, #6
 8004570:	8bbb      	ldrh	r3, [r7, #28]
 8004572:	3312      	adds	r3, #18
 8004574:	429a      	cmp	r2, r3
 8004576:	d351      	bcc.n	800461c <mem_malloc+0x12c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004578:	8bfa      	ldrh	r2, [r7, #30]
 800457a:	8bbb      	ldrh	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	3306      	adds	r3, #6
 8004582:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004584:	8a7b      	ldrh	r3, [r7, #18]
 8004586:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800458a:	d10b      	bne.n	80045a4 <mem_malloc+0xb4>
 800458c:	4b6b      	ldr	r3, [pc, #428]	; (800473c <mem_malloc+0x24c>)
 800458e:	f240 327a 	movw	r2, #890	; 0x37a
 8004592:	496b      	ldr	r1, [pc, #428]	; (8004740 <mem_malloc+0x250>)
 8004594:	486b      	ldr	r0, [pc, #428]	; (8004744 <mem_malloc+0x254>)
 8004596:	f00e fd27 	bl	8012fe8 <iprintf>
 800459a:	2000      	movs	r0, #0
 800459c:	f00e fe26 	bl	80131ec <fflush>
 80045a0:	f00e fd6b 	bl	801307a <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80045a4:	8a7b      	ldrh	r3, [r7, #18]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fc74 	bl	8003e94 <ptr_to_mem>
 80045ac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8bfa      	ldrh	r2, [r7, #30]
 80045c0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	8a7a      	ldrh	r2, [r7, #18]
 80045c6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2201      	movs	r2, #1
 80045cc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045d6:	d007      	beq.n	80045e8 <mem_malloc+0xf8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fc59 	bl	8003e94 <ptr_to_mem>
 80045e2:	4602      	mov	r2, r0
 80045e4:	8a7b      	ldrh	r3, [r7, #18]
 80045e6:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80045e8:	4b57      	ldr	r3, [pc, #348]	; (8004748 <mem_malloc+0x258>)
 80045ea:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80045ee:	8bbb      	ldrh	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3306      	adds	r3, #6
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <mem_malloc+0x258>)
 80045fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80045fe:	4b52      	ldr	r3, [pc, #328]	; (8004748 <mem_malloc+0x258>)
 8004600:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8004604:	4b50      	ldr	r3, [pc, #320]	; (8004748 <mem_malloc+0x258>)
 8004606:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800460a:	429a      	cmp	r2, r3
 800460c:	d227      	bcs.n	800465e <mem_malloc+0x16e>
 800460e:	4b4e      	ldr	r3, [pc, #312]	; (8004748 <mem_malloc+0x258>)
 8004610:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <mem_malloc+0x258>)
 8004616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800461a:	e020      	b.n	800465e <mem_malloc+0x16e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2201      	movs	r2, #1
 8004620:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8004622:	4b49      	ldr	r3, [pc, #292]	; (8004748 <mem_malloc+0x258>)
 8004624:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	4413      	add	r3, r2
 800462e:	b29c      	uxth	r4, r3
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7ff fc41 	bl	8003eb8 <mem_to_ptr>
 8004636:	4603      	mov	r3, r0
 8004638:	1ae3      	subs	r3, r4, r3
 800463a:	b29a      	uxth	r2, r3
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <mem_malloc+0x258>)
 800463e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <mem_malloc+0x258>)
 8004644:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <mem_malloc+0x258>)
 800464a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800464e:	429a      	cmp	r2, r3
 8004650:	d205      	bcs.n	800465e <mem_malloc+0x16e>
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <mem_malloc+0x258>)
 8004654:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004658:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <mem_malloc+0x258>)
 800465a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <mem_malloc+0x248>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	d12c      	bne.n	80046c2 <mem_malloc+0x1d2>
          struct mem *cur = lfree;
 8004668:	4b33      	ldr	r3, [pc, #204]	; (8004738 <mem_malloc+0x248>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800466e:	e005      	b.n	800467c <mem_malloc+0x18c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fc0d 	bl	8003e94 <ptr_to_mem>
 800467a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	791b      	ldrb	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <mem_malloc+0x19e>
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <mem_malloc+0x25c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	429a      	cmp	r2, r3
 800468c:	d1f0      	bne.n	8004670 <mem_malloc+0x180>
          }
          lfree = cur;
 800468e:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <mem_malloc+0x248>)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004694:	4b28      	ldr	r3, [pc, #160]	; (8004738 <mem_malloc+0x248>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b2c      	ldr	r3, [pc, #176]	; (800474c <mem_malloc+0x25c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d010      	beq.n	80046c2 <mem_malloc+0x1d2>
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <mem_malloc+0x248>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	791b      	ldrb	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <mem_malloc+0x1d2>
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <mem_malloc+0x24c>)
 80046ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80046b0:	4927      	ldr	r1, [pc, #156]	; (8004750 <mem_malloc+0x260>)
 80046b2:	4824      	ldr	r0, [pc, #144]	; (8004744 <mem_malloc+0x254>)
 80046b4:	f00e fc98 	bl	8012fe8 <iprintf>
 80046b8:	2000      	movs	r0, #0
 80046ba:	f00e fd97 	bl	80131ec <fflush>
 80046be:	f00e fcdc 	bl	801307a <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80046c2:	481c      	ldr	r0, [pc, #112]	; (8004734 <mem_malloc+0x244>)
 80046c4:	f7fc fda7 	bl	8001216 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80046c8:	8bba      	ldrh	r2, [r7, #28]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4413      	add	r3, r2
 80046ce:	3306      	adds	r3, #6
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <mem_malloc+0x25c>)
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d90b      	bls.n	80046f0 <mem_malloc+0x200>
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <mem_malloc+0x24c>)
 80046da:	f240 32ad 	movw	r2, #941	; 0x3ad
 80046de:	491d      	ldr	r1, [pc, #116]	; (8004754 <mem_malloc+0x264>)
 80046e0:	4818      	ldr	r0, [pc, #96]	; (8004744 <mem_malloc+0x254>)
 80046e2:	f00e fc81 	bl	8012fe8 <iprintf>
 80046e6:	2000      	movs	r0, #0
 80046e8:	f00e fd80 	bl	80131ec <fflush>
 80046ec:	f00e fcc5 	bl	801307a <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3306      	adds	r3, #6
 80046f4:	e019      	b.n	800472a <mem_malloc+0x23a>
         ptr = ptr_to_mem(ptr)->next) {
 80046f6:	8bfb      	ldrh	r3, [r7, #30]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fbcb 	bl	8003e94 <ptr_to_mem>
 80046fe:	4603      	mov	r3, r0
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004704:	8bfa      	ldrh	r2, [r7, #30]
 8004706:	8bbb      	ldrh	r3, [r7, #28]
 8004708:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800470c:	429a      	cmp	r2, r3
 800470e:	f4ff af15 	bcc.w	800453c <mem_malloc+0x4c>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <mem_malloc+0x258>)
 8004714:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004718:	3301      	adds	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <mem_malloc+0x258>)
 800471e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8004722:	4804      	ldr	r0, [pc, #16]	; (8004734 <mem_malloc+0x244>)
 8004724:	f7fc fd77 	bl	8001216 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	2000059c 	.word	0x2000059c
 8004738:	200005a0 	.word	0x200005a0
 800473c:	08014df0 	.word	0x08014df0
 8004740:	08014f80 	.word	0x08014f80
 8004744:	08014e28 	.word	0x08014e28
 8004748:	20002164 	.word	0x20002164
 800474c:	20000598 	.word	0x20000598
 8004750:	08014f94 	.word	0x08014f94
 8004754:	08014fb0 	.word	0x08014fb0

08004758 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	460a      	mov	r2, r1
 8004762:	80fb      	strh	r3, [r7, #6]
 8004764:	4613      	mov	r3, r2
 8004766:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	88ba      	ldrh	r2, [r7, #4]
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	e00e      	b.n	80047a0 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	b29b      	uxth	r3, r3
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff feb2 	bl	80044f0 <mem_malloc>
 800478c:	60b8      	str	r0, [r7, #8]
  if (p) {
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	2100      	movs	r1, #0
 8004798:	68b8      	ldr	r0, [r7, #8]
 800479a:	f00e fe4c 	bl	8013436 <memset>
  }
  return p;
 800479e:	68bb      	ldr	r3, [r7, #8]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e011      	b.n	80047e8 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	891b      	ldrh	r3, [r3, #8]
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4413      	add	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	895b      	ldrh	r3, [r3, #10]
 80047ec:	461a      	mov	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dce7      	bgt.n	80047c4 <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	8952      	ldrh	r2, [r2, #10]
 80047fc:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800481a:	2300      	movs	r3, #0
 800481c:	80fb      	strh	r3, [r7, #6]
 800481e:	e013      	b.n	8004848 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <memp_init+0x44>)
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ffbd 	bl	80047a8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	4909      	ldr	r1, [pc, #36]	; (8004858 <memp_init+0x44>)
 8004834:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004838:	6852      	ldr	r2, [r2, #4]
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <memp_init+0x48>)
 800483c:	331c      	adds	r3, #28
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	3301      	adds	r3, #1
 8004846:	80fb      	strh	r3, [r7, #6]
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d9e8      	bls.n	8004820 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	0801714c 	.word	0x0801714c
 800485c:	20002164 	.word	0x20002164

08004860 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8004868:	f7fc fd4e 	bl	8001308 <sys_arch_protect>
 800486c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01d      	beq.n	80048b8 <do_memp_malloc_pool+0x58>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	891a      	ldrh	r2, [r3, #8]
 800488c:	3201      	adds	r2, #1
 800488e:	b292      	uxth	r2, r2
 8004890:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	891a      	ldrh	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	895b      	ldrh	r3, [r3, #10]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d905      	bls.n	80048ae <do_memp_malloc_pool+0x4e>
      desc->stats->max = desc->stats->used;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6852      	ldr	r2, [r2, #4]
 80048aa:	8912      	ldrh	r2, [r2, #8]
 80048ac:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7fc fd32 	bl	8001318 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	e009      	b.n	80048cc <do_memp_malloc_pool+0x6c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	889a      	ldrh	r2, [r3, #4]
 80048be:	3201      	adds	r2, #1
 80048c0:	b292      	uxth	r2, r2
 80048c2:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7fc fd27 	bl	8001318 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <memp_malloc_pool+0x26>
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <memp_malloc_pool+0x40>)
 80048e4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80048e8:	490b      	ldr	r1, [pc, #44]	; (8004918 <memp_malloc_pool+0x44>)
 80048ea:	480c      	ldr	r0, [pc, #48]	; (800491c <memp_malloc_pool+0x48>)
 80048ec:	f00e fb7c 	bl	8012fe8 <iprintf>
 80048f0:	2000      	movs	r0, #0
 80048f2:	f00e fc7b 	bl	80131ec <fflush>
 80048f6:	f00e fbc0 	bl	801307a <abort>
  if (desc == NULL) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <memp_malloc_pool+0x30>
    return NULL;
 8004900:	2300      	movs	r3, #0
 8004902:	e003      	b.n	800490c <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ffab 	bl	8004860 <do_memp_malloc_pool>
 800490a:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	08015048 	.word	0x08015048
 8004918:	08015068 	.word	0x08015068
 800491c:	0801507c 	.word	0x0801507c

08004920 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	2b07      	cmp	r3, #7
 800492e:	d908      	bls.n	8004942 <memp_malloc+0x22>
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <memp_malloc+0x3c>)
 8004932:	f240 1257 	movw	r2, #343	; 0x157
 8004936:	490a      	ldr	r1, [pc, #40]	; (8004960 <memp_malloc+0x40>)
 8004938:	480a      	ldr	r0, [pc, #40]	; (8004964 <memp_malloc+0x44>)
 800493a:	f7fc fcac 	bl	8001296 <lwip_win32_platform_diag>
 800493e:	2300      	movs	r3, #0
 8004940:	e008      	b.n	8004954 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <memp_malloc+0x48>)
 8004946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff88 	bl	8004860 <do_memp_malloc_pool>
 8004950:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08015048 	.word	0x08015048
 8004960:	080150a4 	.word	0x080150a4
 8004964:	0801507c 	.word	0x0801507c
 8004968:	0801714c 	.word	0x0801714c

0800496c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800497a:	f7fc fcc5 	bl	8001308 <sys_arch_protect>
 800497e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	891a      	ldrh	r2, [r3, #8]
 8004986:	3a01      	subs	r2, #1
 8004988:	b292      	uxth	r2, r2
 800498a:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f7fc fcba 	bl	8001318 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <memp_free_pool+0x28>
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <memp_free_pool+0x48>)
 80049be:	f240 1295 	movw	r2, #405	; 0x195
 80049c2:	490d      	ldr	r1, [pc, #52]	; (80049f8 <memp_free_pool+0x4c>)
 80049c4:	480d      	ldr	r0, [pc, #52]	; (80049fc <memp_free_pool+0x50>)
 80049c6:	f00e fb0f 	bl	8012fe8 <iprintf>
 80049ca:	2000      	movs	r0, #0
 80049cc:	f00e fc0e 	bl	80131ec <fflush>
 80049d0:	f00e fb53 	bl	801307a <abort>
  if ((desc == NULL) || (mem == NULL)) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <memp_free_pool+0x3e>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ffc2 	bl	800496c <do_memp_free_pool>
 80049e8:	e000      	b.n	80049ec <memp_free_pool+0x40>
    return;
 80049ea:	bf00      	nop
}
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	08015048 	.word	0x08015048
 80049f8:	08015068 	.word	0x08015068
 80049fc:	0801507c 	.word	0x0801507c

08004a00 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	2b07      	cmp	r3, #7
 8004a10:	d907      	bls.n	8004a22 <memp_free+0x22>
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <memp_free+0x44>)
 8004a14:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004a18:	490b      	ldr	r1, [pc, #44]	; (8004a48 <memp_free+0x48>)
 8004a1a:	480c      	ldr	r0, [pc, #48]	; (8004a4c <memp_free+0x4c>)
 8004a1c:	f7fc fc3b 	bl	8001296 <lwip_win32_platform_diag>
 8004a20:	e00c      	b.n	8004a3c <memp_free+0x3c>

  if (mem == NULL) {
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <memp_free+0x50>)
 8004a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff9a 	bl	800496c <do_memp_free_pool>
 8004a38:	e000      	b.n	8004a3c <memp_free+0x3c>
    return;
 8004a3a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	08015048 	.word	0x08015048
 8004a48:	080150c4 	.word	0x080150c4
 8004a4c:	0801507c 	.word	0x0801507c
 8004a50:	0801714c 	.word	0x0801714c

08004a54 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d108      	bne.n	8004a8a <netif_add+0x26>
 8004a78:	4b5b      	ldr	r3, [pc, #364]	; (8004be8 <netif_add+0x184>)
 8004a7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004a7e:	495b      	ldr	r1, [pc, #364]	; (8004bec <netif_add+0x188>)
 8004a80:	485b      	ldr	r0, [pc, #364]	; (8004bf0 <netif_add+0x18c>)
 8004a82:	f7fc fc08 	bl	8001296 <lwip_win32_platform_diag>
 8004a86:	2300      	movs	r3, #0
 8004a88:	e0a9      	b.n	8004bde <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <netif_add+0x3e>
 8004a90:	4b55      	ldr	r3, [pc, #340]	; (8004be8 <netif_add+0x184>)
 8004a92:	f240 1233 	movw	r2, #307	; 0x133
 8004a96:	4957      	ldr	r1, [pc, #348]	; (8004bf4 <netif_add+0x190>)
 8004a98:	4855      	ldr	r0, [pc, #340]	; (8004bf0 <netif_add+0x18c>)
 8004a9a:	f7fc fbfc 	bl	8001296 <lwip_win32_platform_diag>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e09d      	b.n	8004bde <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <netif_add+0x194>)
 8004aaa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004ab2:	4b51      	ldr	r3, [pc, #324]	; (8004bf8 <netif_add+0x194>)
 8004ab4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004abc:	4b4e      	ldr	r3, [pc, #312]	; (8004bf8 <netif_add+0x194>)
 8004abe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a49      	ldr	r2, [pc, #292]	; (8004bfc <netif_add+0x198>)
 8004ad6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8004aec:	4b44      	ldr	r3, [pc, #272]	; (8004c00 <netif_add+0x19c>)
 8004aee:	781a      	ldrb	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afa:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f924 	bl	8004d50 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	4798      	blx	r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <netif_add+0xb4>
    return NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e062      	b.n	8004bde <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b1e:	2bff      	cmp	r3, #255	; 0xff
 8004b20:	d103      	bne.n	8004b2a <netif_add+0xc6>
        netif->num = 0;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b2e:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <netif_add+0x1a0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e035      	b.n	8004ba2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d10b      	bne.n	8004b56 <netif_add+0xf2>
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <netif_add+0x184>)
 8004b40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004b44:	4930      	ldr	r1, [pc, #192]	; (8004c08 <netif_add+0x1a4>)
 8004b46:	482a      	ldr	r0, [pc, #168]	; (8004bf0 <netif_add+0x18c>)
 8004b48:	f00e fa4e 	bl	8012fe8 <iprintf>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f00e fb4d 	bl	80131ec <fflush>
 8004b52:	f00e fa92 	bl	801307a <abort>
        num_netifs++;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2bff      	cmp	r3, #255	; 0xff
 8004b60:	dd0b      	ble.n	8004b7a <netif_add+0x116>
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <netif_add+0x184>)
 8004b64:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8004b68:	4928      	ldr	r1, [pc, #160]	; (8004c0c <netif_add+0x1a8>)
 8004b6a:	4821      	ldr	r0, [pc, #132]	; (8004bf0 <netif_add+0x18c>)
 8004b6c:	f00e fa3c 	bl	8012fe8 <iprintf>
 8004b70:	2000      	movs	r0, #0
 8004b72:	f00e fb3b 	bl	80131ec <fflush>
 8004b76:	f00e fa80 	bl	801307a <abort>
        if (netif2->num == netif->num) {
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d108      	bne.n	8004b9c <netif_add+0x138>
          netif->num++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8004b9a:	e005      	b.n	8004ba8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1c6      	bne.n	8004b36 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1b4      	bne.n	8004b18 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bb4:	2bfe      	cmp	r3, #254	; 0xfe
 8004bb6:	d103      	bne.n	8004bc0 <netif_add+0x15c>
    netif_num = 0;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <netif_add+0x19c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e006      	b.n	8004bce <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <netif_add+0x19c>)
 8004bcc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <netif_add+0x1a0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <netif_add+0x1a0>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	080150e0 	.word	0x080150e0
 8004bec:	08015160 	.word	0x08015160
 8004bf0:	0801511c 	.word	0x0801511c
 8004bf4:	0801517c 	.word	0x0801517c
 8004bf8:	080170a4 	.word	0x080170a4
 8004bfc:	08004f69 	.word	0x08004f69
 8004c00:	20000644 	.word	0x20000644
 8004c04:	20002158 	.word	0x20002158
 8004c08:	080151a0 	.word	0x080151a0
 8004c0c:	080151b4 	.word	0x080151b4

08004c10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004c1a:	6839      	ldr	r1, [r7, #0]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f002 ff9d 	bl	8007b5c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <netif_do_set_ipaddr+0x2a>
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <netif_do_set_ipaddr+0x9c>)
 8004c40:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8004c44:	4921      	ldr	r1, [pc, #132]	; (8004ccc <netif_do_set_ipaddr+0xa0>)
 8004c46:	4822      	ldr	r0, [pc, #136]	; (8004cd0 <netif_do_set_ipaddr+0xa4>)
 8004c48:	f00e f9ce 	bl	8012fe8 <iprintf>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f00e facd 	bl	80131ec <fflush>
 8004c52:	f00e fa12 	bl	801307a <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <netif_do_set_ipaddr+0x48>
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <netif_do_set_ipaddr+0x9c>)
 8004c5e:	f240 12dd 	movw	r2, #477	; 0x1dd
 8004c62:	491a      	ldr	r1, [pc, #104]	; (8004ccc <netif_do_set_ipaddr+0xa0>)
 8004c64:	481a      	ldr	r0, [pc, #104]	; (8004cd0 <netif_do_set_ipaddr+0xa4>)
 8004c66:	f00e f9bf 	bl	8012fe8 <iprintf>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f00e fabe 	bl	80131ec <fflush>
 8004c70:	f00e fa03 	bl	801307a <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d01c      	beq.n	8004cbc <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004c92:	f107 0314 	add.w	r3, r7, #20
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ffb9 	bl	8004c10 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <netif_do_set_ipaddr+0x7e>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	e000      	b.n	8004cac <netif_do_set_ipaddr+0x80>
 8004caa:	2300      	movs	r3, #0
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f8d2 	bl	8004e5c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	080150e0 	.word	0x080150e0
 8004ccc:	080151e4 	.word	0x080151e4
 8004cd0:	0801511c 	.word	0x0801511c

08004cd4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d00a      	beq.n	8004d04 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <netif_do_set_netmask+0x26>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	e000      	b.n	8004cfc <netif_do_set_netmask+0x28>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	330c      	adds	r3, #12
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d00a      	beq.n	8004d42 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <netif_do_set_gw+0x26>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <netif_do_set_gw+0x28>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <netif_set_addr+0x90>)
 8004d6e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004d76:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <netif_set_addr+0x90>)
 8004d78:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004d80:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <netif_set_addr+0x90>)
 8004d82:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <netif_set_addr+0x42>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <netif_set_addr+0x46>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <netif_set_addr+0x48>
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d006      	beq.n	8004dae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	461a      	mov	r2, r3
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ff3f 	bl	8004c2c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff ff8e 	bl	8004cd4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff ffa8 	bl	8004d12 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004dc8:	f107 0310 	add.w	r3, r7, #16
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff ff2b 	bl	8004c2c <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004dd6:	bf00      	nop
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	080170a4 	.word	0x080170a4

08004de4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004dec:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <netif_set_default+0x1c>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	2000215c 	.word	0x2000215c

08004e04 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <netif_set_up+0x1e>
 8004e12:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <netif_set_up+0x4c>)
 8004e14:	f240 326b 	movw	r2, #875	; 0x36b
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <netif_set_up+0x50>)
 8004e1a:	480f      	ldr	r0, [pc, #60]	; (8004e58 <netif_set_up+0x54>)
 8004e1c:	f7fc fa3b 	bl	8001296 <lwip_win32_platform_diag>
 8004e20:	e013      	b.n	8004e4a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e42:	2103      	movs	r1, #3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f809 	bl	8004e5c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	080150e0 	.word	0x080150e0
 8004e54:	08015254 	.word	0x08015254
 8004e58:	0801511c 	.word	0x0801511c

08004e5c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <netif_issue_reports+0x2a>
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <netif_issue_reports+0x58>)
 8004e70:	f44f 7262 	mov.w	r2, #904	; 0x388
 8004e74:	4910      	ldr	r1, [pc, #64]	; (8004eb8 <netif_issue_reports+0x5c>)
 8004e76:	4811      	ldr	r0, [pc, #68]	; (8004ebc <netif_issue_reports+0x60>)
 8004e78:	f00e f8b6 	bl	8012fe8 <iprintf>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f00e f9b5 	bl	80131ec <fflush>
 8004e82:	f00e f8fa 	bl	801307a <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e9a:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	e000      	b.n	8004eae <netif_issue_reports+0x52>
    return;
 8004eac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	080150e0 	.word	0x080150e0
 8004eb8:	08015270 	.word	0x08015270
 8004ebc:	0801511c 	.word	0x0801511c

08004ec0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <netif_set_link_up+0x1e>
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <netif_set_link_up+0x4c>)
 8004ed0:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <netif_set_link_up+0x50>)
 8004ed6:	480f      	ldr	r0, [pc, #60]	; (8004f14 <netif_set_link_up+0x54>)
 8004ed8:	f7fc f9dd 	bl	8001296 <lwip_win32_platform_diag>
 8004edc:	e013      	b.n	8004f06 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ef2:	f043 0304 	orr.w	r3, r3, #4
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004efe:	2103      	movs	r1, #3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffab 	bl	8004e5c <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	080150e0 	.word	0x080150e0
 8004f10:	080152b4 	.word	0x080152b4
 8004f14:	0801511c 	.word	0x0801511c

08004f18 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <netif_set_link_down+0x1e>
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <netif_set_link_down+0x44>)
 8004f28:	f240 4223 	movw	r2, #1059	; 0x423
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <netif_set_link_down+0x48>)
 8004f2e:	480d      	ldr	r0, [pc, #52]	; (8004f64 <netif_set_link_down+0x4c>)
 8004f30:	f7fc f9b1 	bl	8001296 <lwip_win32_platform_diag>
 8004f34:	e00f      	b.n	8004f56 <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	080150e0 	.word	0x080150e0
 8004f60:	080152d8 	.word	0x080152d8
 8004f64:	0801511c 	.word	0x0801511c

08004f68 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004f74:	f06f 030b 	mvn.w	r3, #11
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004f94:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <netif_get_by_index+0x48>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e00c      	b.n	8004fb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	79fa      	ldrb	r2, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d101      	bne.n	8004fb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e006      	b.n	8004fbe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ef      	bne.n	8004f9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20002158 	.word	0x20002158

08004fd0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004fd6:	f7fc f997 	bl	8001308 <sys_arch_protect>
 8004fda:	6038      	str	r0, [r7, #0]
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <pbuf_free_ooseq+0x44>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	6838      	ldr	r0, [r7, #0]
 8004fe4:	f7fc f998 	bl	8001318 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <pbuf_free_ooseq+0x48>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	e00a      	b.n	8005006 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f002 fded 	bl	8007bd8 <tcp_free_ooseq>
      return;
 8004ffe:	e005      	b.n	800500c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f1      	bne.n	8004ff0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20002160 	.word	0x20002160
 8005018:	2000220c 	.word	0x2000220c

0800501c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8005024:	f7ff ffd4 	bl	8004fd0 <pbuf_free_ooseq>
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8005036:	f7fc f967 	bl	8001308 <sys_arch_protect>
 800503a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <pbuf_pool_is_empty+0x4c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <pbuf_pool_is_empty+0x4c>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fc f965 	bl	8001318 <sys_arch_unprotect>

  if (!queued) {
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10f      	bne.n	8005074 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005054:	2100      	movs	r1, #0
 8005056:	480a      	ldr	r0, [pc, #40]	; (8005080 <pbuf_pool_is_empty+0x50>)
 8005058:	f7fc fb64 	bl	8001724 <tcpip_try_callback>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <pbuf_pool_is_empty+0x44>
 8005062:	f7fc f951 	bl	8001308 <sys_arch_protect>
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <pbuf_pool_is_empty+0x4c>)
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f952 	bl	8001318 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20002160 	.word	0x20002160
 8005080:	0800501d 	.word	0x0800501d

08005084 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	80fb      	strh	r3, [r7, #6]
 8005096:	4613      	mov	r3, r2
 8005098:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88ba      	ldrh	r2, [r7, #4]
 80050b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80050b2:	8b3b      	ldrh	r3, [r7, #24]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	7f3a      	ldrb	r2, [r7, #28]
 80050be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af02      	add	r7, sp, #8
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
 80050e2:	460b      	mov	r3, r1
 80050e4:	80bb      	strh	r3, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	2b41      	cmp	r3, #65	; 0x41
 80050f2:	d00b      	beq.n	800510c <pbuf_alloc+0x34>
 80050f4:	2b41      	cmp	r3, #65	; 0x41
 80050f6:	dc02      	bgt.n	80050fe <pbuf_alloc+0x26>
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d007      	beq.n	800510c <pbuf_alloc+0x34>
 80050fc:	e08b      	b.n	8005216 <pbuf_alloc+0x13e>
 80050fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005102:	d00b      	beq.n	800511c <pbuf_alloc+0x44>
 8005104:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005108:	d05b      	beq.n	80051c2 <pbuf_alloc+0xea>
 800510a:	e084      	b.n	8005216 <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	88bb      	ldrh	r3, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	2000      	movs	r0, #0
 8005114:	f000 f898 	bl	8005248 <pbuf_alloc_reference>
 8005118:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800511a:	e088      	b.n	800522e <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005124:	88bb      	ldrh	r3, [r7, #4]
 8005126:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005128:	2007      	movs	r0, #7
 800512a:	f7ff fbf9 	bl	8004920 <memp_malloc>
 800512e:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8005136:	f7ff ff7b 	bl	8005030 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8005140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005142:	f000 fa33 	bl	80055ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	e072      	b.n	8005230 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800514a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800514c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005150:	b29a      	uxth	r2, r3
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	4293      	cmp	r3, r2
 8005156:	bf28      	it	cs
 8005158:	4613      	movcs	r3, r2
 800515a:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800515c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800515e:	3310      	adds	r3, #16
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	18d1      	adds	r1, r2, r3
 8005164:	8a78      	ldrh	r0, [r7, #18]
 8005166:	8b7a      	ldrh	r2, [r7, #26]
 8005168:	2300      	movs	r3, #0
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7ff ff86 	bl	8005084 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800517a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517e:	d10b      	bne.n	8005198 <pbuf_alloc+0xc0>
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <pbuf_alloc+0x160>)
 8005182:	f240 1205 	movw	r2, #261	; 0x105
 8005186:	492d      	ldr	r1, [pc, #180]	; (800523c <pbuf_alloc+0x164>)
 8005188:	482d      	ldr	r0, [pc, #180]	; (8005240 <pbuf_alloc+0x168>)
 800518a:	f00d ff2d 	bl	8012fe8 <iprintf>
 800518e:	2000      	movs	r0, #0
 8005190:	f00e f82c 	bl	80131ec <fflush>
 8005194:	f00d ff71 	bl	801307a <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
 80051a2:	e002      	b.n	80051aa <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80051ae:	8b7a      	ldrh	r2, [r7, #26]
 80051b0:	8a7b      	ldrh	r3, [r7, #18]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80051ba:	8b7b      	ldrh	r3, [r7, #26]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1b3      	bne.n	8005128 <pbuf_alloc+0x50>
      break;
 80051c0:	e035      	b.n	800522e <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80051c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80051c4:	88bb      	ldrh	r3, [r7, #4]
 80051c6:	4413      	add	r3, r2
 80051c8:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80051ca:	8a3b      	ldrh	r3, [r7, #16]
 80051cc:	3310      	adds	r3, #16
 80051ce:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80051d0:	8a3a      	ldrh	r2, [r7, #16]
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d303      	bcc.n	80051e0 <pbuf_alloc+0x108>
 80051d8:	89fa      	ldrh	r2, [r7, #14]
 80051da:	88bb      	ldrh	r3, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d201      	bcs.n	80051e4 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e025      	b.n	8005230 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff f982 	bl	80044f0 <mem_malloc>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <pbuf_alloc+0x120>
        return NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e01b      	b.n	8005230 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80051f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051fa:	3310      	adds	r3, #16
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	18d1      	adds	r1, r2, r3
 8005200:	88b8      	ldrh	r0, [r7, #4]
 8005202:	88ba      	ldrh	r2, [r7, #4]
 8005204:	2300      	movs	r3, #0
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	4603      	mov	r3, r0
 800520e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005210:	f7ff ff38 	bl	8005084 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005214:	e00b      	b.n	800522e <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <pbuf_alloc+0x160>)
 8005218:	f240 1229 	movw	r2, #297	; 0x129
 800521c:	4909      	ldr	r1, [pc, #36]	; (8005244 <pbuf_alloc+0x16c>)
 800521e:	4808      	ldr	r0, [pc, #32]	; (8005240 <pbuf_alloc+0x168>)
 8005220:	f00d fee2 	bl	8012fe8 <iprintf>
 8005224:	2000      	movs	r0, #0
 8005226:	f00d ffe1 	bl	80131ec <fflush>
 800522a:	f00d ff26 	bl	801307a <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	080152fc 	.word	0x080152fc
 800523c:	0801531c 	.word	0x0801531c
 8005240:	08015350 	.word	0x08015350
 8005244:	08015378 	.word	0x08015378

08005248 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
 8005254:	4613      	mov	r3, r2
 8005256:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005258:	883b      	ldrh	r3, [r7, #0]
 800525a:	2b41      	cmp	r3, #65	; 0x41
 800525c:	d00e      	beq.n	800527c <pbuf_alloc_reference+0x34>
 800525e:	883b      	ldrh	r3, [r7, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00b      	beq.n	800527c <pbuf_alloc_reference+0x34>
 8005264:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <pbuf_alloc_reference+0x68>)
 8005266:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800526a:	4912      	ldr	r1, [pc, #72]	; (80052b4 <pbuf_alloc_reference+0x6c>)
 800526c:	4812      	ldr	r0, [pc, #72]	; (80052b8 <pbuf_alloc_reference+0x70>)
 800526e:	f00d febb 	bl	8012fe8 <iprintf>
 8005272:	2000      	movs	r0, #0
 8005274:	f00d ffba 	bl	80131ec <fflush>
 8005278:	f00d feff 	bl	801307a <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800527c:	2006      	movs	r0, #6
 800527e:	f7ff fb4f 	bl	8004920 <memp_malloc>
 8005282:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	e00b      	b.n	80052a6 <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800528e:	8879      	ldrh	r1, [r7, #2]
 8005290:	887a      	ldrh	r2, [r7, #2]
 8005292:	2300      	movs	r3, #0
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	883b      	ldrh	r3, [r7, #0]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	460b      	mov	r3, r1
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff fef0 	bl	8005084 <pbuf_init_alloced_pbuf>
  return p;
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	080152fc 	.word	0x080152fc
 80052b4:	08015394 	.word	0x08015394
 80052b8:	08015350 	.word	0x08015350

080052bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <pbuf_realloc+0x2a>
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <pbuf_realloc+0x130>)
 80052d0:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80052d4:	4946      	ldr	r1, [pc, #280]	; (80053f0 <pbuf_realloc+0x134>)
 80052d6:	4847      	ldr	r0, [pc, #284]	; (80053f4 <pbuf_realloc+0x138>)
 80052d8:	f00d fe86 	bl	8012fe8 <iprintf>
 80052dc:	2000      	movs	r0, #0
 80052de:	f00d ff85 	bl	80131ec <fflush>
 80052e2:	f00d feca 	bl	801307a <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	891b      	ldrh	r3, [r3, #8]
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d278      	bcs.n	80053e2 <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	891a      	ldrh	r2, [r3, #8]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	827b      	strh	r3, [r7, #18]
  q = p;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005302:	e01d      	b.n	8005340 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	895b      	ldrh	r3, [r3, #10]
 8005308:	8a7a      	ldrh	r2, [r7, #18]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	891a      	ldrh	r2, [r3, #8]
 8005312:	8a3b      	ldrh	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	b29a      	uxth	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <pbuf_realloc+0x84>
 8005328:	4b30      	ldr	r3, [pc, #192]	; (80053ec <pbuf_realloc+0x130>)
 800532a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800532e:	4932      	ldr	r1, [pc, #200]	; (80053f8 <pbuf_realloc+0x13c>)
 8005330:	4830      	ldr	r0, [pc, #192]	; (80053f4 <pbuf_realloc+0x138>)
 8005332:	f00d fe59 	bl	8012fe8 <iprintf>
 8005336:	2000      	movs	r0, #0
 8005338:	f00d ff58 	bl	80131ec <fflush>
 800533c:	f00d fe9d 	bl	801307a <abort>
  while (rem_len > q->len) {
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	895b      	ldrh	r3, [r3, #10]
 8005344:	8a7a      	ldrh	r2, [r7, #18]
 8005346:	429a      	cmp	r2, r3
 8005348:	d8dc      	bhi.n	8005304 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	7b1b      	ldrb	r3, [r3, #12]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	2b00      	cmp	r3, #0
 8005354:	d131      	bne.n	80053ba <pbuf_realloc+0xfe>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	895b      	ldrh	r3, [r3, #10]
 800535a:	8a7a      	ldrh	r2, [r7, #18]
 800535c:	429a      	cmp	r2, r3
 800535e:	d02c      	beq.n	80053ba <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461a      	mov	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	b29a      	uxth	r2, r3
 800536c:	8a7b      	ldrh	r3, [r7, #18]
 800536e:	4413      	add	r3, r2
 8005370:	b29b      	uxth	r3, r3
 8005372:	4619      	mov	r1, r3
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7fe ff7f 	bl	8004278 <mem_trim>
 800537a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <pbuf_realloc+0xde>
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <pbuf_realloc+0x130>)
 8005384:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005388:	491c      	ldr	r1, [pc, #112]	; (80053fc <pbuf_realloc+0x140>)
 800538a:	481a      	ldr	r0, [pc, #104]	; (80053f4 <pbuf_realloc+0x138>)
 800538c:	f00d fe2c 	bl	8012fe8 <iprintf>
 8005390:	2000      	movs	r0, #0
 8005392:	f00d ff2b 	bl	80131ec <fflush>
 8005396:	f00d fe70 	bl	801307a <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d00b      	beq.n	80053ba <pbuf_realloc+0xfe>
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <pbuf_realloc+0x130>)
 80053a4:	f240 12c1 	movw	r2, #449	; 0x1c1
 80053a8:	4915      	ldr	r1, [pc, #84]	; (8005400 <pbuf_realloc+0x144>)
 80053aa:	4812      	ldr	r0, [pc, #72]	; (80053f4 <pbuf_realloc+0x138>)
 80053ac:	f00d fe1c 	bl	8012fe8 <iprintf>
 80053b0:	2000      	movs	r0, #0
 80053b2:	f00d ff1b 	bl	80131ec <fflush>
 80053b6:	f00d fe60 	bl	801307a <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	8a7a      	ldrh	r2, [r7, #18]
 80053be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	895a      	ldrh	r2, [r3, #10]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f8e9 	bl	80055ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e000      	b.n	80053e4 <pbuf_realloc+0x128>
    return;
 80053e2:	bf00      	nop

}
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	080152fc 	.word	0x080152fc
 80053f0:	080153a8 	.word	0x080153a8
 80053f4:	08015350 	.word	0x08015350
 80053f8:	080153c0 	.word	0x080153c0
 80053fc:	080153d8 	.word	0x080153d8
 8005400:	080153f4 	.word	0x080153f4

08005404 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <pbuf_add_header_impl+0x2c>
 8005418:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <pbuf_add_header_impl+0xd0>)
 800541a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800541e:	492e      	ldr	r1, [pc, #184]	; (80054d8 <pbuf_add_header_impl+0xd4>)
 8005420:	482e      	ldr	r0, [pc, #184]	; (80054dc <pbuf_add_header_impl+0xd8>)
 8005422:	f00d fde1 	bl	8012fe8 <iprintf>
 8005426:	2000      	movs	r0, #0
 8005428:	f00d fee0 	bl	80131ec <fflush>
 800542c:	f00d fe25 	bl	801307a <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <pbuf_add_header_impl+0x3a>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d301      	bcc.n	8005442 <pbuf_add_header_impl+0x3e>
    return 1;
 800543e:	2301      	movs	r3, #1
 8005440:	e044      	b.n	80054cc <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <pbuf_add_header_impl+0x48>
    return 0;
 8005448:	2300      	movs	r3, #0
 800544a:	e03f      	b.n	80054cc <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	891a      	ldrh	r2, [r3, #8]
 8005454:	8a7b      	ldrh	r3, [r7, #18]
 8005456:	4413      	add	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	8a7a      	ldrh	r2, [r7, #18]
 800545c:	429a      	cmp	r2, r3
 800545e:	d901      	bls.n	8005464 <pbuf_add_header_impl+0x60>
    return 1;
 8005460:	2301      	movs	r3, #1
 8005462:	e033      	b.n	80054cc <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	7b1b      	ldrb	r3, [r3, #12]
 8005468:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800546a:	8a3b      	ldrh	r3, [r7, #16]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	425b      	negs	r3, r3
 800547c:	4413      	add	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f103 0210 	add.w	r2, r3, #16
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	d90d      	bls.n	80054a8 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800548c:	2301      	movs	r3, #1
 800548e:	e01d      	b.n	80054cc <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	425b      	negs	r3, r3
 800549e:	4413      	add	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e001      	b.n	80054a8 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e011      	b.n	80054cc <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	895a      	ldrh	r2, [r3, #10]
 80054b2:	8a7b      	ldrh	r3, [r7, #18]
 80054b4:	4413      	add	r3, r2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	891a      	ldrh	r2, [r3, #8]
 80054c0:	8a7b      	ldrh	r3, [r7, #18]
 80054c2:	4413      	add	r3, r2
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	811a      	strh	r2, [r3, #8]


  return 0;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080152fc 	.word	0x080152fc
 80054d8:	08015410 	.word	0x08015410
 80054dc:	08015350 	.word	0x08015350

080054e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff88 	bl	8005404 <pbuf_add_header_impl>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <pbuf_remove_header+0x28>
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <pbuf_remove_header+0x9c>)
 8005512:	f44f 7214 	mov.w	r2, #592	; 0x250
 8005516:	4922      	ldr	r1, [pc, #136]	; (80055a0 <pbuf_remove_header+0xa0>)
 8005518:	4822      	ldr	r0, [pc, #136]	; (80055a4 <pbuf_remove_header+0xa4>)
 800551a:	f00d fd65 	bl	8012fe8 <iprintf>
 800551e:	2000      	movs	r0, #0
 8005520:	f00d fe64 	bl	80131ec <fflush>
 8005524:	f00d fda9 	bl	801307a <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <pbuf_remove_header+0x36>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005534:	d301      	bcc.n	800553a <pbuf_remove_header+0x3a>
    return 1;
 8005536:	2301      	movs	r3, #1
 8005538:	e02c      	b.n	8005594 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <pbuf_remove_header+0x44>
    return 0;
 8005540:	2300      	movs	r3, #0
 8005542:	e027      	b.n	8005594 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	895b      	ldrh	r3, [r3, #10]
 800554c:	89fa      	ldrh	r2, [r7, #14]
 800554e:	429a      	cmp	r2, r3
 8005550:	d908      	bls.n	8005564 <pbuf_remove_header+0x64>
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <pbuf_remove_header+0x9c>)
 8005554:	f240 225a 	movw	r2, #602	; 0x25a
 8005558:	4913      	ldr	r1, [pc, #76]	; (80055a8 <pbuf_remove_header+0xa8>)
 800555a:	4812      	ldr	r0, [pc, #72]	; (80055a4 <pbuf_remove_header+0xa4>)
 800555c:	f7fb fe9b 	bl	8001296 <lwip_win32_platform_diag>
 8005560:	2301      	movs	r3, #1
 8005562:	e017      	b.n	8005594 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	441a      	add	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	895a      	ldrh	r2, [r3, #10]
 800557a:	89fb      	ldrh	r3, [r7, #14]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	891a      	ldrh	r2, [r3, #8]
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	080152fc 	.word	0x080152fc
 80055a0:	08015410 	.word	0x08015410
 80055a4:	08015350 	.word	0x08015350
 80055a8:	0801541c 	.word	0x0801541c

080055ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <pbuf_free+0x2c>
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <pbuf_free+0xf0>)
 80055c2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80055c6:	4936      	ldr	r1, [pc, #216]	; (80056a0 <pbuf_free+0xf4>)
 80055c8:	4836      	ldr	r0, [pc, #216]	; (80056a4 <pbuf_free+0xf8>)
 80055ca:	f00d fd0d 	bl	8012fe8 <iprintf>
 80055ce:	2000      	movs	r0, #0
 80055d0:	f00d fe0c 	bl	80131ec <fflush>
 80055d4:	f00d fd51 	bl	801307a <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	e05b      	b.n	8005694 <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80055e0:	e054      	b.n	800568c <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80055e2:	f7fb fe91 	bl	8001308 <sys_arch_protect>
 80055e6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7b9b      	ldrb	r3, [r3, #14]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <pbuf_free+0x5c>
 80055f0:	4b2a      	ldr	r3, [pc, #168]	; (800569c <pbuf_free+0xf0>)
 80055f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80055f6:	492c      	ldr	r1, [pc, #176]	; (80056a8 <pbuf_free+0xfc>)
 80055f8:	482a      	ldr	r0, [pc, #168]	; (80056a4 <pbuf_free+0xf8>)
 80055fa:	f00d fcf5 	bl	8012fe8 <iprintf>
 80055fe:	2000      	movs	r0, #0
 8005600:	f00d fdf4 	bl	80131ec <fflush>
 8005604:	f00d fd39 	bl	801307a <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	7b9b      	ldrb	r3, [r3, #14]
 800560c:	3b01      	subs	r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	739a      	strb	r2, [r3, #14]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7b9b      	ldrb	r3, [r3, #14]
 8005618:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800561a:	69b8      	ldr	r0, [r7, #24]
 800561c:	f7fb fe7c 	bl	8001318 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d130      	bne.n	8005688 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d104      	bne.n	8005646 <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	2007      	movs	r0, #7
 8005640:	f7ff f9de 	bl	8004a00 <memp_free>
 8005644:	e01a      	b.n	800567c <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d104      	bne.n	8005656 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	2006      	movs	r0, #6
 8005650:	f7ff f9d6 	bl	8004a00 <memp_free>
 8005654:	e012      	b.n	800567c <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <pbuf_free+0xb8>
          mem_free(p);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fe fd89 	bl	8004174 <mem_free>
 8005662:	e00b      	b.n	800567c <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <pbuf_free+0xf0>)
 8005666:	f240 3213 	movw	r2, #787	; 0x313
 800566a:	4910      	ldr	r1, [pc, #64]	; (80056ac <pbuf_free+0x100>)
 800566c:	480d      	ldr	r0, [pc, #52]	; (80056a4 <pbuf_free+0xf8>)
 800566e:	f00d fcbb 	bl	8012fe8 <iprintf>
 8005672:	2000      	movs	r0, #0
 8005674:	f00d fdba 	bl	80131ec <fflush>
 8005678:	f00d fcff 	bl	801307a <abort>
        }
      }
      count++;
 800567c:	7ffb      	ldrb	r3, [r7, #31]
 800567e:	3301      	adds	r3, #1
 8005680:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	e001      	b.n	800568c <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1a7      	bne.n	80055e2 <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	080152fc 	.word	0x080152fc
 80056a0:	08015410 	.word	0x08015410
 80056a4:	08015350 	.word	0x08015350
 80056a8:	0801543c 	.word	0x0801543c
 80056ac:	08015454 	.word	0x08015454

080056b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80056bc:	e005      	b.n	80056ca <pbuf_clen+0x1a>
    ++len;
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	3301      	adds	r3, #1
 80056c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f6      	bne.n	80056be <pbuf_clen+0xe>
  }
  return len;
 80056d0:	89fb      	ldrh	r3, [r7, #14]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01b      	beq.n	8005726 <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80056ee:	f7fb fe0b 	bl	8001308 <sys_arch_protect>
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7b9b      	ldrb	r3, [r3, #14]
 80056f8:	3301      	adds	r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	739a      	strb	r2, [r3, #14]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7fb fe09 	bl	8001318 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	7b9b      	ldrb	r3, [r3, #14]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <pbuf_ref+0x46>
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <pbuf_ref+0x50>)
 8005710:	f240 3246 	movw	r2, #838	; 0x346
 8005714:	4907      	ldr	r1, [pc, #28]	; (8005734 <pbuf_ref+0x54>)
 8005716:	4808      	ldr	r0, [pc, #32]	; (8005738 <pbuf_ref+0x58>)
 8005718:	f00d fc66 	bl	8012fe8 <iprintf>
 800571c:	2000      	movs	r0, #0
 800571e:	f00d fd65 	bl	80131ec <fflush>
 8005722:	f00d fcaa 	bl	801307a <abort>
  }
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	080152fc 	.word	0x080152fc
 8005734:	08015468 	.word	0x08015468
 8005738:	08015350 	.word	0x08015350

0800573c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <pbuf_cat+0x16>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <pbuf_cat+0x26>
 8005752:	4b2d      	ldr	r3, [pc, #180]	; (8005808 <pbuf_cat+0xcc>)
 8005754:	f240 325e 	movw	r2, #862	; 0x35e
 8005758:	492c      	ldr	r1, [pc, #176]	; (800580c <pbuf_cat+0xd0>)
 800575a:	482d      	ldr	r0, [pc, #180]	; (8005810 <pbuf_cat+0xd4>)
 800575c:	f7fb fd9b 	bl	8001296 <lwip_win32_platform_diag>
 8005760:	e04e      	b.n	8005800 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d10b      	bne.n	8005782 <pbuf_cat+0x46>
 800576a:	4b27      	ldr	r3, [pc, #156]	; (8005808 <pbuf_cat+0xcc>)
 800576c:	f240 325f 	movw	r2, #863	; 0x35f
 8005770:	4928      	ldr	r1, [pc, #160]	; (8005814 <pbuf_cat+0xd8>)
 8005772:	4827      	ldr	r0, [pc, #156]	; (8005810 <pbuf_cat+0xd4>)
 8005774:	f00d fc38 	bl	8012fe8 <iprintf>
 8005778:	2000      	movs	r0, #0
 800577a:	f00d fd37 	bl	80131ec <fflush>
 800577e:	f00d fc7c 	bl	801307a <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e00a      	b.n	800579e <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	891a      	ldrh	r2, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	891b      	ldrh	r3, [r3, #8]
 8005790:	4413      	add	r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	891a      	ldrh	r2, [r3, #8]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	895b      	ldrh	r3, [r3, #10]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d00b      	beq.n	80057ca <pbuf_cat+0x8e>
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <pbuf_cat+0xcc>)
 80057b4:	f240 3267 	movw	r2, #871	; 0x367
 80057b8:	4917      	ldr	r1, [pc, #92]	; (8005818 <pbuf_cat+0xdc>)
 80057ba:	4815      	ldr	r0, [pc, #84]	; (8005810 <pbuf_cat+0xd4>)
 80057bc:	f00d fc14 	bl	8012fe8 <iprintf>
 80057c0:	2000      	movs	r0, #0
 80057c2:	f00d fd13 	bl	80131ec <fflush>
 80057c6:	f00d fc58 	bl	801307a <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <pbuf_cat+0xae>
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <pbuf_cat+0xcc>)
 80057d4:	f44f 725a 	mov.w	r2, #872	; 0x368
 80057d8:	4910      	ldr	r1, [pc, #64]	; (800581c <pbuf_cat+0xe0>)
 80057da:	480d      	ldr	r0, [pc, #52]	; (8005810 <pbuf_cat+0xd4>)
 80057dc:	f00d fc04 	bl	8012fe8 <iprintf>
 80057e0:	2000      	movs	r0, #0
 80057e2:	f00d fd03 	bl	80131ec <fflush>
 80057e6:	f00d fc48 	bl	801307a <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	891a      	ldrh	r2, [r3, #8]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	891b      	ldrh	r3, [r3, #8]
 80057f2:	4413      	add	r3, r2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	080152fc 	.word	0x080152fc
 800580c:	0801547c 	.word	0x0801547c
 8005810:	08015350 	.word	0x08015350
 8005814:	080154b4 	.word	0x080154b4
 8005818:	080154d0 	.word	0x080154d0
 800581c:	08015500 	.word	0x08015500

08005820 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <pbuf_copy+0x24>
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <pbuf_copy+0x3c>)
 8005832:	f240 32c7 	movw	r2, #967	; 0x3c7
 8005836:	490a      	ldr	r1, [pc, #40]	; (8005860 <pbuf_copy+0x40>)
 8005838:	480a      	ldr	r0, [pc, #40]	; (8005864 <pbuf_copy+0x44>)
 800583a:	f7fb fd2c 	bl	8001296 <lwip_win32_platform_diag>
 800583e:	f06f 030f 	mvn.w	r3, #15
 8005842:	e007      	b.n	8005854 <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	891a      	ldrh	r2, [r3, #8]
 8005848:	2300      	movs	r3, #0
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f80b 	bl	8005868 <pbuf_copy_partial_pbuf>
 8005852:	4603      	mov	r3, r0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	080152fc 	.word	0x080152fc
 8005860:	0801554c 	.word	0x0801554c
 8005864:	08015350 	.word	0x08015350

08005868 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	460b      	mov	r3, r1
 8005878:	80fb      	strh	r3, [r7, #6]
 800587a:	4613      	mov	r3, r2
 800587c:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <pbuf_copy_partial_pbuf+0x2e>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	891b      	ldrh	r3, [r3, #8]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	429a      	cmp	r2, r3
 8005894:	d909      	bls.n	80058aa <pbuf_copy_partial_pbuf+0x42>
 8005896:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 8005898:	f240 32e6 	movw	r2, #998	; 0x3e6
 800589c:	4973      	ldr	r1, [pc, #460]	; (8005a6c <pbuf_copy_partial_pbuf+0x204>)
 800589e:	4874      	ldr	r0, [pc, #464]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 80058a0:	f7fb fcf9 	bl	8001296 <lwip_win32_platform_diag>
 80058a4:	f06f 030f 	mvn.w	r3, #15
 80058a8:	e0d9      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <pbuf_copy_partial_pbuf+0x58>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	4619      	mov	r1, r3
 80058b6:	88ba      	ldrh	r2, [r7, #4]
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	4413      	add	r3, r2
 80058bc:	4299      	cmp	r1, r3
 80058be:	da09      	bge.n	80058d4 <pbuf_copy_partial_pbuf+0x6c>
 80058c0:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 80058c2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80058c6:	496b      	ldr	r1, [pc, #428]	; (8005a74 <pbuf_copy_partial_pbuf+0x20c>)
 80058c8:	4869      	ldr	r0, [pc, #420]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 80058ca:	f7fb fce4 	bl	8001296 <lwip_win32_platform_diag>
 80058ce:	f06f 030f 	mvn.w	r3, #15
 80058d2:	e0c4      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	895b      	ldrh	r3, [r3, #10]
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1ad2      	subs	r2, r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	895b      	ldrh	r3, [r3, #10]
 80058e2:	4619      	mov	r1, r3
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d306      	bcc.n	80058fa <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	895b      	ldrh	r3, [r3, #10]
 80058f0:	461a      	mov	r2, r3
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e005      	b.n	8005906 <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	895b      	ldrh	r3, [r3, #10]
 80058fe:	461a      	mov	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4293      	cmp	r3, r2
 800590c:	bf28      	it	cs
 800590e:	4613      	movcs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	18d0      	adds	r0, r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	4413      	add	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4619      	mov	r1, r3
 8005926:	f00d fd61 	bl	80133ec <memcpy>
    offset_to += len;
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	b29b      	uxth	r3, r3
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	895b      	ldrh	r3, [r3, #10]
 8005948:	461a      	mov	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	429a      	cmp	r2, r3
 800594e:	d20b      	bcs.n	8005968 <pbuf_copy_partial_pbuf+0x100>
 8005950:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 8005952:	f240 32fa 	movw	r2, #1018	; 0x3fa
 8005956:	4948      	ldr	r1, [pc, #288]	; (8005a78 <pbuf_copy_partial_pbuf+0x210>)
 8005958:	4845      	ldr	r0, [pc, #276]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 800595a:	f00d fb45 	bl	8012fe8 <iprintf>
 800595e:	2000      	movs	r0, #0
 8005960:	f00d fc44 	bl	80131ec <fflush>
 8005964:	f00d fb89 	bl	801307a <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	461a      	mov	r2, r3
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	429a      	cmp	r2, r3
 8005972:	d20b      	bcs.n	800598c <pbuf_copy_partial_pbuf+0x124>
 8005974:	4b3c      	ldr	r3, [pc, #240]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 8005976:	f240 32fb 	movw	r2, #1019	; 0x3fb
 800597a:	4940      	ldr	r1, [pc, #256]	; (8005a7c <pbuf_copy_partial_pbuf+0x214>)
 800597c:	483c      	ldr	r0, [pc, #240]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 800597e:	f00d fb33 	bl	8012fe8 <iprintf>
 8005982:	2000      	movs	r0, #0
 8005984:	f00d fc32 	bl	80131ec <fflush>
 8005988:	f00d fb77 	bl	801307a <abort>
    if (offset_from >= p_from->len) {
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	895b      	ldrh	r3, [r3, #10]
 8005990:	461a      	mov	r2, r3
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	429a      	cmp	r2, r3
 8005996:	d814      	bhi.n	80059c2 <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10c      	bne.n	80059c2 <pbuf_copy_partial_pbuf+0x15a>
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <pbuf_copy_partial_pbuf+0x15a>
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 80059b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059b4:	4932      	ldr	r1, [pc, #200]	; (8005a80 <pbuf_copy_partial_pbuf+0x218>)
 80059b6:	482e      	ldr	r0, [pc, #184]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 80059b8:	f7fb fc6d 	bl	8001296 <lwip_win32_platform_diag>
 80059bc:	f06f 030f 	mvn.w	r3, #15
 80059c0:	e04d      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	895b      	ldrh	r3, [r3, #10]
 80059c6:	461a      	mov	r2, r3
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d114      	bne.n	80059f8 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <pbuf_copy_partial_pbuf+0x190>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <pbuf_copy_partial_pbuf+0x190>
 80059e4:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 80059e6:	f240 4206 	movw	r2, #1030	; 0x406
 80059ea:	4926      	ldr	r1, [pc, #152]	; (8005a84 <pbuf_copy_partial_pbuf+0x21c>)
 80059ec:	4820      	ldr	r0, [pc, #128]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 80059ee:	f7fb fc52 	bl	8001296 <lwip_win32_platform_diag>
 80059f2:	f06f 030f 	mvn.w	r3, #15
 80059f6:	e032      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d013      	beq.n	8005a26 <pbuf_copy_partial_pbuf+0x1be>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	895a      	ldrh	r2, [r3, #10]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	891b      	ldrh	r3, [r3, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d10d      	bne.n	8005a26 <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <pbuf_copy_partial_pbuf+0x1be>
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 8005a14:	f240 420c 	movw	r2, #1036	; 0x40c
 8005a18:	491b      	ldr	r1, [pc, #108]	; (8005a88 <pbuf_copy_partial_pbuf+0x220>)
 8005a1a:	4815      	ldr	r0, [pc, #84]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 8005a1c:	f7fb fc3b 	bl	8001296 <lwip_win32_platform_diag>
 8005a20:	f06f 0305 	mvn.w	r3, #5
 8005a24:	e01b      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <pbuf_copy_partial_pbuf+0x1ec>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	895a      	ldrh	r2, [r3, #10]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	891b      	ldrh	r3, [r3, #8]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d10d      	bne.n	8005a54 <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <pbuf_copy_partial_pbuf+0x1ec>
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <pbuf_copy_partial_pbuf+0x200>)
 8005a42:	f240 4211 	movw	r2, #1041	; 0x411
 8005a46:	4910      	ldr	r1, [pc, #64]	; (8005a88 <pbuf_copy_partial_pbuf+0x220>)
 8005a48:	4809      	ldr	r0, [pc, #36]	; (8005a70 <pbuf_copy_partial_pbuf+0x208>)
 8005a4a:	f7fb fc24 	bl	8001296 <lwip_win32_platform_diag>
 8005a4e:	f06f 0305 	mvn.w	r3, #5
 8005a52:	e004      	b.n	8005a5e <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f47f af3c 	bne.w	80058d4 <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	080152fc 	.word	0x080152fc
 8005a6c:	08015568 	.word	0x08015568
 8005a70:	08015350 	.word	0x08015350
 8005a74:	0801559c 	.word	0x0801559c
 8005a78:	080155cc 	.word	0x080155cc
 8005a7c:	080155e4 	.word	0x080155e4
 8005a80:	08015600 	.word	0x08015600
 8005a84:	08015610 	.word	0x08015610
 8005a88:	08015620 	.word	0x08015620

08005a8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	80fb      	strh	r3, [r7, #6]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <pbuf_copy_partial+0x36>
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <pbuf_copy_partial+0xd4>)
 8005ab2:	f240 422c 	movw	r2, #1068	; 0x42c
 8005ab6:	492b      	ldr	r1, [pc, #172]	; (8005b64 <pbuf_copy_partial+0xd8>)
 8005ab8:	482b      	ldr	r0, [pc, #172]	; (8005b68 <pbuf_copy_partial+0xdc>)
 8005aba:	f7fb fbec 	bl	8001296 <lwip_win32_platform_diag>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e04a      	b.n	8005b58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <pbuf_copy_partial+0x4e>
 8005ac8:	4b25      	ldr	r3, [pc, #148]	; (8005b60 <pbuf_copy_partial+0xd4>)
 8005aca:	f240 422d 	movw	r2, #1069	; 0x42d
 8005ace:	4927      	ldr	r1, [pc, #156]	; (8005b6c <pbuf_copy_partial+0xe0>)
 8005ad0:	4825      	ldr	r0, [pc, #148]	; (8005b68 <pbuf_copy_partial+0xdc>)
 8005ad2:	f7fb fbe0 	bl	8001296 <lwip_win32_platform_diag>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e03e      	b.n	8005b58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e034      	b.n	8005b4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005ae0:	88bb      	ldrh	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <pbuf_copy_partial+0x70>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	895b      	ldrh	r3, [r3, #10]
 8005aea:	88ba      	ldrh	r2, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d305      	bcc.n	8005afc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	895b      	ldrh	r3, [r3, #10]
 8005af4:	88ba      	ldrh	r2, [r7, #4]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	80bb      	strh	r3, [r7, #4]
 8005afa:	e023      	b.n	8005b44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	895a      	ldrh	r2, [r3, #10]
 8005b00:	88bb      	ldrh	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005b06:	8b3a      	ldrh	r2, [r7, #24]
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d901      	bls.n	8005b12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005b12:	8b7b      	ldrh	r3, [r7, #26]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	18d0      	adds	r0, r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	88bb      	ldrh	r3, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	8b3a      	ldrh	r2, [r7, #24]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f00d fc62 	bl	80133ec <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005b28:	8afa      	ldrh	r2, [r7, #22]
 8005b2a:	8b3b      	ldrh	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005b30:	8b7a      	ldrh	r2, [r7, #26]
 8005b32:	8b3b      	ldrh	r3, [r7, #24]
 8005b34:	4413      	add	r3, r2
 8005b36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	8b3b      	ldrh	r3, [r7, #24]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <pbuf_copy_partial+0xca>
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1c4      	bne.n	8005ae0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005b56:	8afb      	ldrh	r3, [r7, #22]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	080152fc 	.word	0x080152fc
 8005b64:	08015658 	.word	0x08015658
 8005b68:	08015350 	.word	0x08015350
 8005b6c:	08015678 	.word	0x08015678

08005b70 <pbuf_get_contiguous>:
 *         - pointer to 'buffer' if data was not contiguous and had to be copied
 *         - NULL on error
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d108      	bne.n	8005b96 <pbuf_get_contiguous+0x26>
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <pbuf_get_contiguous+0xac>)
 8005b86:	f240 425c 	movw	r2, #1116	; 0x45c
 8005b8a:	4925      	ldr	r1, [pc, #148]	; (8005c20 <pbuf_get_contiguous+0xb0>)
 8005b8c:	4825      	ldr	r0, [pc, #148]	; (8005c24 <pbuf_get_contiguous+0xb4>)
 8005b8e:	f7fb fb82 	bl	8001296 <lwip_win32_platform_diag>
 8005b92:	2300      	movs	r3, #0
 8005b94:	e03d      	b.n	8005c12 <pbuf_get_contiguous+0xa2>
  LWIP_ERROR("pbuf_get_contiguous: invalid bufsize", (buffer == NULL) || (bufsize >= len), return NULL;);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <pbuf_get_contiguous+0x46>
 8005b9c:	887a      	ldrh	r2, [r7, #2]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d908      	bls.n	8005bb6 <pbuf_get_contiguous+0x46>
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <pbuf_get_contiguous+0xac>)
 8005ba6:	f240 425d 	movw	r2, #1117	; 0x45d
 8005baa:	491f      	ldr	r1, [pc, #124]	; (8005c28 <pbuf_get_contiguous+0xb8>)
 8005bac:	481d      	ldr	r0, [pc, #116]	; (8005c24 <pbuf_get_contiguous+0xb4>)
 8005bae:	f7fb fb72 	bl	8001296 <lwip_win32_platform_diag>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e02d      	b.n	8005c12 <pbuf_get_contiguous+0xa2>

  q = pbuf_skip_const(p, offset, &out_offset);
 8005bb6:	f107 0212 	add.w	r2, r7, #18
 8005bba:	8c3b      	ldrh	r3, [r7, #32]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f834 	bl	8005c2c <pbuf_skip_const>
 8005bc4:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d021      	beq.n	8005c10 <pbuf_get_contiguous+0xa0>
    if (q->len >= (out_offset + len)) {
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	895b      	ldrh	r3, [r3, #10]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	8a7b      	ldrh	r3, [r7, #18]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	440b      	add	r3, r1
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	db04      	blt.n	8005be8 <pbuf_get_contiguous+0x78>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	8a7a      	ldrh	r2, [r7, #18]
 8005be4:	4413      	add	r3, r2
 8005be6:	e014      	b.n	8005c12 <pbuf_get_contiguous+0xa2>
    }
    if (buffer == NULL) {
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <pbuf_get_contiguous+0x82>
      /* the caller does not want to copy */
      return NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e00f      	b.n	8005c12 <pbuf_get_contiguous+0xa2>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 8005bf2:	8a7b      	ldrh	r3, [r7, #18]
 8005bf4:	887a      	ldrh	r2, [r7, #2]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f7ff ff47 	bl	8005a8c <pbuf_copy_partial>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	887b      	ldrh	r3, [r7, #2]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d001      	beq.n	8005c0c <pbuf_get_contiguous+0x9c>
      /* copying failed: pbuf is too short */
      return NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e002      	b.n	8005c12 <pbuf_get_contiguous+0xa2>
    }
    return buffer;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	e000      	b.n	8005c12 <pbuf_get_contiguous+0xa2>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	080152fc 	.word	0x080152fc
 8005c20:	0801569c 	.word	0x0801569c
 8005c24:	08015350 	.word	0x08015350
 8005c28:	080156c0 	.word	0x080156c0

08005c2c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	460b      	mov	r3, r1
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8005c42:	e007      	b.n	8005c54 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	895b      	ldrh	r3, [r3, #10]
 8005c48:	8afa      	ldrh	r2, [r7, #22]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <pbuf_skip_const+0x38>
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	895b      	ldrh	r3, [r3, #10]
 8005c5e:	8afa      	ldrh	r2, [r7, #22]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d2ef      	bcs.n	8005c44 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8afa      	ldrh	r2, [r7, #22]
 8005c6e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8005c70:	693b      	ldr	r3, [r7, #16]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <pbuf_coalesce+0x18>
    return p;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	e010      	b.n	8005cb8 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f80e 	bl	8005cc0 <pbuf_clone>
 8005ca4:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	e003      	b.n	8005cb8 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fc7b 	bl	80055ac <pbuf_free>
  return q;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	603a      	str	r2, [r7, #0]
 8005cca:	71fb      	strb	r3, [r7, #7]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	8919      	ldrh	r1, [r3, #8]
 8005cd4:	88ba      	ldrh	r2, [r7, #4]
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f9fd 	bl	80050d8 <pbuf_alloc>
 8005cde:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <pbuf_clone+0x2a>
    return NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e016      	b.n	8005d18 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fd97 	bl	8005820 <pbuf_copy>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005cf6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <pbuf_clone+0x56>
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <pbuf_clone+0x60>)
 8005d00:	f240 524c 	movw	r2, #1356	; 0x54c
 8005d04:	4907      	ldr	r1, [pc, #28]	; (8005d24 <pbuf_clone+0x64>)
 8005d06:	4808      	ldr	r0, [pc, #32]	; (8005d28 <pbuf_clone+0x68>)
 8005d08:	f00d f96e 	bl	8012fe8 <iprintf>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f00d fa6d 	bl	80131ec <fflush>
 8005d12:	f00d f9b2 	bl	801307a <abort>
  return q;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080152fc 	.word	0x080152fc
 8005d24:	08015784 	.word	0x08015784
 8005d28:	08015350 	.word	0x08015350

08005d2c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8005d38:	887b      	ldrh	r3, [r7, #2]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f80c 	bl	8005d5a <pbuf_try_get_at>
 8005d42:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	db02      	blt.n	8005d50 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	e000      	b.n	8005d52 <pbuf_get_at+0x26>
  }
  return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8005d66:	f107 020a 	add.w	r2, r7, #10
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ff5c 	bl	8005c2c <pbuf_skip_const>
 8005d74:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <pbuf_try_get_at+0x38>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	895a      	ldrh	r2, [r3, #10]
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d905      	bls.n	8005d92 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	897a      	ldrh	r2, [r7, #10]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	e001      	b.n	8005d96 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <stats_init+0x14>)
 8005da6:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <stats_init+0x18>)
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20002164 	.word	0x20002164
 8005db8:	08015798 	.word	0x08015798

08005dbc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005dc0:	f7fb fa8a 	bl	80012d8 <lwip_port_rand>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	4b01      	ldr	r3, [pc, #4]	; (8005ddc <tcp_init+0x20>)
 8005dd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000008 	.word	0x20000008

08005de0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7d1b      	ldrb	r3, [r3, #20]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d10a      	bne.n	8005e06 <tcp_free+0x26>
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <tcp_free+0x38>)
 8005df2:	22d4      	movs	r2, #212	; 0xd4
 8005df4:	4909      	ldr	r1, [pc, #36]	; (8005e1c <tcp_free+0x3c>)
 8005df6:	480a      	ldr	r0, [pc, #40]	; (8005e20 <tcp_free+0x40>)
 8005df8:	f00d f8f6 	bl	8012fe8 <iprintf>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f00d f9f5 	bl	80131ec <fflush>
 8005e02:	f00d f93a 	bl	801307a <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f7fe fdf9 	bl	8004a00 <memp_free>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	08015814 	.word	0x08015814
 8005e1c:	08015834 	.word	0x08015834
 8005e20:	08015848 	.word	0x08015848

08005e24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7d1b      	ldrb	r3, [r3, #20]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10a      	bne.n	8005e4a <tcp_free_listen+0x26>
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <tcp_free_listen+0x38>)
 8005e36:	22df      	movs	r2, #223	; 0xdf
 8005e38:	4909      	ldr	r1, [pc, #36]	; (8005e60 <tcp_free_listen+0x3c>)
 8005e3a:	480a      	ldr	r0, [pc, #40]	; (8005e64 <tcp_free_listen+0x40>)
 8005e3c:	f00d f8d4 	bl	8012fe8 <iprintf>
 8005e40:	2000      	movs	r0, #0
 8005e42:	f00d f9d3 	bl	80131ec <fflush>
 8005e46:	f00d f918 	bl	801307a <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7fe fdd7 	bl	8004a00 <memp_free>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08015814 	.word	0x08015814
 8005e60:	08015870 	.word	0x08015870
 8005e64:	08015848 	.word	0x08015848

08005e68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e6c:	f001 f8f8 	bl	8007060 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <tcp_tmr+0x28>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <tcp_tmr+0x28>)
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <tcp_tmr+0x28>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e88:	f000 fd78 	bl	800697c <tcp_slowtmr>
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000645 	.word	0x20000645

08005e94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <tcp_remove_listener+0x26>
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <tcp_remove_listener+0x50>)
 8005ea6:	22ff      	movs	r2, #255	; 0xff
 8005ea8:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <tcp_remove_listener+0x54>)
 8005eaa:	4810      	ldr	r0, [pc, #64]	; (8005eec <tcp_remove_listener+0x58>)
 8005eac:	f00d f89c 	bl	8012fe8 <iprintf>
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f00d f99b 	bl	80131ec <fflush>
 8005eb6:	f00d f8e0 	bl	801307a <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e00a      	b.n	8005ed6 <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d102      	bne.n	8005ed0 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f1      	bne.n	8005ec0 <tcp_remove_listener+0x2c>
    }
  }
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	08015814 	.word	0x08015814
 8005ee8:	0801588c 	.word	0x0801588c
 8005eec:	08015848 	.word	0x08015848

08005ef0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <tcp_listen_closed+0x26>
 8005efe:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <tcp_listen_closed+0x74>)
 8005f00:	f240 1211 	movw	r2, #273	; 0x111
 8005f04:	4918      	ldr	r1, [pc, #96]	; (8005f68 <tcp_listen_closed+0x78>)
 8005f06:	4819      	ldr	r0, [pc, #100]	; (8005f6c <tcp_listen_closed+0x7c>)
 8005f08:	f00d f86e 	bl	8012fe8 <iprintf>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f00d f96d 	bl	80131ec <fflush>
 8005f12:	f00d f8b2 	bl	801307a <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	7d1b      	ldrb	r3, [r3, #20]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d00b      	beq.n	8005f36 <tcp_listen_closed+0x46>
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <tcp_listen_closed+0x74>)
 8005f20:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f24:	4912      	ldr	r1, [pc, #72]	; (8005f70 <tcp_listen_closed+0x80>)
 8005f26:	4811      	ldr	r0, [pc, #68]	; (8005f6c <tcp_listen_closed+0x7c>)
 8005f28:	f00d f85e 	bl	8012fe8 <iprintf>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f00d f95d 	bl	80131ec <fflush>
 8005f32:	f00d f8a2 	bl	801307a <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f36:	2301      	movs	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e00b      	b.n	8005f54 <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <tcp_listen_closed+0x84>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ffa3 	bl	8005e94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d9f0      	bls.n	8005f3c <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	08015814 	.word	0x08015814
 8005f68:	080158b4 	.word	0x080158b4
 8005f6c:	08015848 	.word	0x08015848
 8005f70:	080158c0 	.word	0x080158c0
 8005f74:	08017184 	.word	0x08017184

08005f78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f78:	b5b0      	push	{r4, r5, r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af04      	add	r7, sp, #16
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <tcp_close_shutdown+0x2a>
 8005f8a:	4b67      	ldr	r3, [pc, #412]	; (8006128 <tcp_close_shutdown+0x1b0>)
 8005f8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005f90:	4966      	ldr	r1, [pc, #408]	; (800612c <tcp_close_shutdown+0x1b4>)
 8005f92:	4867      	ldr	r0, [pc, #412]	; (8006130 <tcp_close_shutdown+0x1b8>)
 8005f94:	f00d f828 	bl	8012fe8 <iprintf>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f00d f927 	bl	80131ec <fflush>
 8005f9e:	f00d f86c 	bl	801307a <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d06c      	beq.n	8006082 <tcp_close_shutdown+0x10a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7d1b      	ldrb	r3, [r3, #20]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d003      	beq.n	8005fb8 <tcp_close_shutdown+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7d1b      	ldrb	r3, [r3, #20]
 8005fb4:	2b07      	cmp	r3, #7
 8005fb6:	d164      	bne.n	8006082 <tcp_close_shutdown+0x10a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <tcp_close_shutdown+0x54>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d05a      	beq.n	8006082 <tcp_close_shutdown+0x10a>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8b5b      	ldrh	r3, [r3, #26]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <tcp_close_shutdown+0x78>
 8005fd8:	4b53      	ldr	r3, [pc, #332]	; (8006128 <tcp_close_shutdown+0x1b0>)
 8005fda:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005fde:	4955      	ldr	r1, [pc, #340]	; (8006134 <tcp_close_shutdown+0x1bc>)
 8005fe0:	4853      	ldr	r0, [pc, #332]	; (8006130 <tcp_close_shutdown+0x1b8>)
 8005fe2:	f00d f801 	bl	8012fe8 <iprintf>
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f00d f900 	bl	80131ec <fflush>
 8005fec:	f00d f845 	bl	801307a <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ff8:	687d      	ldr	r5, [r7, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	8ad2      	ldrh	r2, [r2, #22]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	8b09      	ldrh	r1, [r1, #24]
 8006006:	9102      	str	r1, [sp, #8]
 8006008:	9201      	str	r2, [sp, #4]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	462b      	mov	r3, r5
 800600e:	4622      	mov	r2, r4
 8006010:	4601      	mov	r1, r0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f006 f9d8 	bl	800c3c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fc03 	bl	8007824 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800601e:	4b46      	ldr	r3, [pc, #280]	; (8006138 <tcp_close_shutdown+0x1c0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d105      	bne.n	8006034 <tcp_close_shutdown+0xbc>
 8006028:	4b43      	ldr	r3, [pc, #268]	; (8006138 <tcp_close_shutdown+0x1c0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	4a42      	ldr	r2, [pc, #264]	; (8006138 <tcp_close_shutdown+0x1c0>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e013      	b.n	800605c <tcp_close_shutdown+0xe4>
 8006034:	4b40      	ldr	r3, [pc, #256]	; (8006138 <tcp_close_shutdown+0x1c0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e00c      	b.n	8006056 <tcp_close_shutdown+0xde>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d104      	bne.n	8006050 <tcp_close_shutdown+0xd8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e005      	b.n	800605c <tcp_close_shutdown+0xe4>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ef      	bne.n	800603c <tcp_close_shutdown+0xc4>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	4b36      	ldr	r3, [pc, #216]	; (800613c <tcp_close_shutdown+0x1c4>)
 8006064:	2201      	movs	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006068:	4b35      	ldr	r3, [pc, #212]	; (8006140 <tcp_close_shutdown+0x1c8>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d102      	bne.n	8006078 <tcp_close_shutdown+0x100>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006072:	f004 fa03 	bl	800a47c <tcp_trigger_input_pcb_close>
 8006076:	e002      	b.n	800607e <tcp_close_shutdown+0x106>
      } else {
        tcp_free(pcb);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff feb1 	bl	8005de0 <tcp_free>
      }
      return ERR_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e04d      	b.n	800611e <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7d1b      	ldrb	r3, [r3, #20]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d02d      	beq.n	80060e6 <tcp_close_shutdown+0x16e>
 800608a:	2b02      	cmp	r3, #2
 800608c:	d036      	beq.n	80060fc <tcp_close_shutdown+0x184>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d13f      	bne.n	8006112 <tcp_close_shutdown+0x19a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	8adb      	ldrh	r3, [r3, #22]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d021      	beq.n	80060de <tcp_close_shutdown+0x166>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <tcp_close_shutdown+0x1cc>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d105      	bne.n	80060b0 <tcp_close_shutdown+0x138>
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <tcp_close_shutdown+0x1cc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4a26      	ldr	r2, [pc, #152]	; (8006144 <tcp_close_shutdown+0x1cc>)
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e013      	b.n	80060d8 <tcp_close_shutdown+0x160>
 80060b0:	4b24      	ldr	r3, [pc, #144]	; (8006144 <tcp_close_shutdown+0x1cc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	e00c      	b.n	80060d2 <tcp_close_shutdown+0x15a>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d104      	bne.n	80060cc <tcp_close_shutdown+0x154>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	e005      	b.n	80060d8 <tcp_close_shutdown+0x160>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1ef      	bne.n	80060b8 <tcp_close_shutdown+0x140>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fe7e 	bl	8005de0 <tcp_free>
      break;
 80060e4:	e01a      	b.n	800611c <tcp_close_shutdown+0x1a4>
    case LISTEN:
      tcp_listen_closed(pcb);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff ff02 	bl	8005ef0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4816      	ldr	r0, [pc, #88]	; (8006148 <tcp_close_shutdown+0x1d0>)
 80060f0:	f001 fbe8 	bl	80078c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fe95 	bl	8005e24 <tcp_free_listen>
      break;
 80060fa:	e00f      	b.n	800611c <tcp_close_shutdown+0x1a4>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	480e      	ldr	r0, [pc, #56]	; (8006138 <tcp_close_shutdown+0x1c0>)
 8006100:	f001 fbe0 	bl	80078c4 <tcp_pcb_remove>
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <tcp_close_shutdown+0x1c4>)
 8006106:	2201      	movs	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fe68 	bl	8005de0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006110:	e004      	b.n	800611c <tcp_close_shutdown+0x1a4>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f81a 	bl	800614c <tcp_close_shutdown_fin>
 8006118:	4603      	mov	r3, r0
 800611a:	e000      	b.n	800611e <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bdb0      	pop	{r4, r5, r7, pc}
 8006126:	bf00      	nop
 8006128:	08015814 	.word	0x08015814
 800612c:	080158d8 	.word	0x080158d8
 8006130:	08015848 	.word	0x08015848
 8006134:	080158f8 	.word	0x080158f8
 8006138:	2000220c 	.word	0x2000220c
 800613c:	20002208 	.word	0x20002208
 8006140:	20002220 	.word	0x20002220
 8006144:	20002218 	.word	0x20002218
 8006148:	20002214 	.word	0x20002214

0800614c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <tcp_close_shutdown_fin+0x26>
 800615a:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <tcp_close_shutdown_fin+0xcc>)
 800615c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006160:	492e      	ldr	r1, [pc, #184]	; (800621c <tcp_close_shutdown_fin+0xd0>)
 8006162:	482f      	ldr	r0, [pc, #188]	; (8006220 <tcp_close_shutdown_fin+0xd4>)
 8006164:	f00c ff40 	bl	8012fe8 <iprintf>
 8006168:	2000      	movs	r0, #0
 800616a:	f00d f83f 	bl	80131ec <fflush>
 800616e:	f00c ff84 	bl	801307a <abort>

  switch (pcb->state) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7d1b      	ldrb	r3, [r3, #20]
 8006176:	2b04      	cmp	r3, #4
 8006178:	d010      	beq.n	800619c <tcp_close_shutdown_fin+0x50>
 800617a:	2b07      	cmp	r3, #7
 800617c:	d01b      	beq.n	80061b6 <tcp_close_shutdown_fin+0x6a>
 800617e:	2b03      	cmp	r3, #3
 8006180:	d126      	bne.n	80061d0 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f005 f8d8 	bl	800b338 <tcp_send_fin>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800618c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11f      	bne.n	80061d4 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2205      	movs	r2, #5
 8006198:	751a      	strb	r2, [r3, #20]
      }
      break;
 800619a:	e01b      	b.n	80061d4 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f005 f8cb 	bl	800b338 <tcp_send_fin>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2205      	movs	r2, #5
 80061b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061b4:	e010      	b.n	80061d8 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f005 f8be 	bl	800b338 <tcp_send_fin>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2209      	movs	r2, #9
 80061cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061ce:	e005      	b.n	80061dc <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e01c      	b.n	800620e <tcp_close_shutdown_fin+0xc2>
      break;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <tcp_close_shutdown_fin+0x92>
      break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <tcp_close_shutdown_fin+0x92>
      break;
 80061dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80061de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f005 fa06 	bl	800b5f8 <tcp_output>
 80061ec:	e00d      	b.n	800620a <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d108      	bne.n	800620a <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8b5b      	ldrh	r3, [r3, #26]
 80061fc:	f043 0308 	orr.w	r3, r3, #8
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e001      	b.n	800620e <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 800620a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	08015814 	.word	0x08015814
 800621c:	080158b4 	.word	0x080158b4
 8006220:	08015848 	.word	0x08015848

08006224 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <tcp_close+0x22>
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <tcp_close+0x4c>)
 8006234:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006238:	490e      	ldr	r1, [pc, #56]	; (8006274 <tcp_close+0x50>)
 800623a:	480f      	ldr	r0, [pc, #60]	; (8006278 <tcp_close+0x54>)
 800623c:	f7fb f82b 	bl	8001296 <lwip_win32_platform_diag>
 8006240:	f06f 030f 	mvn.w	r3, #15
 8006244:	e00f      	b.n	8006266 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7d1b      	ldrb	r3, [r3, #20]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d006      	beq.n	800625c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8b5b      	ldrh	r3, [r3, #26]
 8006252:	f043 0310 	orr.w	r3, r3, #16
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800625c:	2101      	movs	r1, #1
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fe8a 	bl	8005f78 <tcp_close_shutdown>
 8006264:	4603      	mov	r3, r0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	08015814 	.word	0x08015814
 8006274:	08015914 	.word	0x08015914
 8006278:	08015848 	.word	0x08015848

0800627c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	; 0x38
 8006280:	af04      	add	r7, sp, #16
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <tcp_abandon+0x20>
 800628c:	4b54      	ldr	r3, [pc, #336]	; (80063e0 <tcp_abandon+0x164>)
 800628e:	f240 223d 	movw	r2, #573	; 0x23d
 8006292:	4954      	ldr	r1, [pc, #336]	; (80063e4 <tcp_abandon+0x168>)
 8006294:	4854      	ldr	r0, [pc, #336]	; (80063e8 <tcp_abandon+0x16c>)
 8006296:	f7fa fffe 	bl	8001296 <lwip_win32_platform_diag>
 800629a:	e09e      	b.n	80063da <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7d1b      	ldrb	r3, [r3, #20]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10b      	bne.n	80062bc <tcp_abandon+0x40>
 80062a4:	4b4e      	ldr	r3, [pc, #312]	; (80063e0 <tcp_abandon+0x164>)
 80062a6:	f240 2241 	movw	r2, #577	; 0x241
 80062aa:	4950      	ldr	r1, [pc, #320]	; (80063ec <tcp_abandon+0x170>)
 80062ac:	484e      	ldr	r0, [pc, #312]	; (80063e8 <tcp_abandon+0x16c>)
 80062ae:	f00c fe9b 	bl	8012fe8 <iprintf>
 80062b2:	2000      	movs	r0, #0
 80062b4:	f00c ff9a 	bl	80131ec <fflush>
 80062b8:	f00c fedf 	bl	801307a <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7d1b      	ldrb	r3, [r3, #20]
 80062c0:	2b0a      	cmp	r3, #10
 80062c2:	d107      	bne.n	80062d4 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	484a      	ldr	r0, [pc, #296]	; (80063f0 <tcp_abandon+0x174>)
 80062c8:	f001 fafc 	bl	80078c4 <tcp_pcb_remove>
    tcp_free(pcb);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fd87 	bl	8005de0 <tcp_free>
 80062d2:	e082      	b.n	80063da <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7d1b      	ldrb	r3, [r3, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d126      	bne.n	800634c <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8adb      	ldrh	r3, [r3, #22]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02e      	beq.n	8006364 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006306:	4b3b      	ldr	r3, [pc, #236]	; (80063f4 <tcp_abandon+0x178>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d105      	bne.n	800631c <tcp_abandon+0xa0>
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <tcp_abandon+0x178>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4a37      	ldr	r2, [pc, #220]	; (80063f4 <tcp_abandon+0x178>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e013      	b.n	8006344 <tcp_abandon+0xc8>
 800631c:	4b35      	ldr	r3, [pc, #212]	; (80063f4 <tcp_abandon+0x178>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	e00c      	b.n	800633e <tcp_abandon+0xc2>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d104      	bne.n	8006338 <tcp_abandon+0xbc>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	60da      	str	r2, [r3, #12]
 8006336:	e005      	b.n	8006344 <tcp_abandon+0xc8>
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ef      	bne.n	8006324 <tcp_abandon+0xa8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e00b      	b.n	8006364 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8adb      	ldrh	r3, [r3, #22]
 8006354:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4827      	ldr	r0, [pc, #156]	; (80063f8 <tcp_abandon+0x17c>)
 800635a:	f001 fab3 	bl	80078c4 <tcp_pcb_remove>
 800635e:	4b27      	ldr	r3, [pc, #156]	; (80063fc <tcp_abandon+0x180>)
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	4618      	mov	r0, r3
 8006372:	f000 ff57 	bl	8007224 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff4e 	bl	8007224 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006394:	4618      	mov	r0, r3
 8006396:	f000 ff45 	bl	8007224 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	8b12      	ldrh	r2, [r2, #24]
 80063aa:	9202      	str	r2, [sp, #8]
 80063ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80063ae:	9201      	str	r2, [sp, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	460b      	mov	r3, r1
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	69b9      	ldr	r1, [r7, #24]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f006 f805 	bl	800c3c8 <tcp_rst>
    }
    last_state = pcb->state;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7d1b      	ldrb	r3, [r3, #20]
 80063c2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fd0b 	bl	8005de0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <tcp_abandon+0x15e>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f06f 010c 	mvn.w	r1, #12
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	4798      	blx	r3
  }
}
 80063da:	3728      	adds	r7, #40	; 0x28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	08015814 	.word	0x08015814
 80063e4:	08015948 	.word	0x08015948
 80063e8:	08015848 	.word	0x08015848
 80063ec:	08015964 	.word	0x08015964
 80063f0:	2000221c 	.word	0x2000221c
 80063f4:	20002218 	.word	0x20002218
 80063f8:	2000220c 	.word	0x2000220c
 80063fc:	20002208 	.word	0x20002208

08006400 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006408:	2101      	movs	r1, #1
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ff36 	bl	800627c <tcp_abandon>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006426:	2304      	movs	r3, #4
 8006428:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006430:	4b3e      	ldr	r3, [pc, #248]	; (800652c <tcp_bind+0x114>)
 8006432:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <tcp_bind+0x36>
 800643a:	4b3d      	ldr	r3, [pc, #244]	; (8006530 <tcp_bind+0x118>)
 800643c:	f240 22aa 	movw	r2, #682	; 0x2aa
 8006440:	493c      	ldr	r1, [pc, #240]	; (8006534 <tcp_bind+0x11c>)
 8006442:	483d      	ldr	r0, [pc, #244]	; (8006538 <tcp_bind+0x120>)
 8006444:	f7fa ff27 	bl	8001296 <lwip_win32_platform_diag>
 8006448:	f06f 030f 	mvn.w	r3, #15
 800644c:	e06a      	b.n	8006524 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	7d1b      	ldrb	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <tcp_bind+0x52>
 8006456:	4b36      	ldr	r3, [pc, #216]	; (8006530 <tcp_bind+0x118>)
 8006458:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <tcp_bind+0x124>)
 800645e:	4836      	ldr	r0, [pc, #216]	; (8006538 <tcp_bind+0x120>)
 8006460:	f7fa ff19 	bl	8001296 <lwip_win32_platform_diag>
 8006464:	f06f 0305 	mvn.w	r3, #5
 8006468:	e05c      	b.n	8006524 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006470:	f000 f926 	bl	80066c0 <tcp_new_port>
 8006474:	4603      	mov	r3, r0
 8006476:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d135      	bne.n	80064ea <tcp_bind+0xd2>
      return ERR_BUF;
 800647e:	f06f 0301 	mvn.w	r3, #1
 8006482:	e04f      	b.n	8006524 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e02b      	b.n	80064e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800648a:	4a2d      	ldr	r2, [pc, #180]	; (8006540 <tcp_bind+0x128>)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	e01e      	b.n	80064d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	8adb      	ldrh	r3, [r3, #22]
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d116      	bne.n	80064d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80064a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d010      	beq.n	80064ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <tcp_bind+0xb2>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <tcp_bind+0xb2>
                 ip_addr_eq(&cpcb->local_ip, ipaddr))) {
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d102      	bne.n	80064d0 <tcp_bind+0xb8>
              return ERR_USE;
 80064ca:	f06f 0307 	mvn.w	r3, #7
 80064ce:	e029      	b.n	8006524 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1dd      	bne.n	8006498 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	dbcf      	blt.n	800648a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <tcp_bind+0xf2>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <tcp_bind+0xec>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	e000      	b.n	8006506 <tcp_bind+0xee>
 8006504:	2300      	movs	r3, #0
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <tcp_bind+0x12c>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <tcp_bind+0x12c>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	f006 f91d 	bl	800c75c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	080170a4 	.word	0x080170a4
 8006530:	08015814 	.word	0x08015814
 8006534:	08015998 	.word	0x08015998
 8006538:	08015848 	.word	0x08015848
 800653c:	080159b0 	.word	0x080159b0
 8006540:	08017184 	.word	0x08017184
 8006544:	20002218 	.word	0x20002218

08006548 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <tcp_update_rcv_ann_wnd+0x26>
 8006556:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <tcp_update_rcv_ann_wnd+0xbc>)
 8006558:	f240 32aa 	movw	r2, #938	; 0x3aa
 800655c:	492a      	ldr	r1, [pc, #168]	; (8006608 <tcp_update_rcv_ann_wnd+0xc0>)
 800655e:	482b      	ldr	r0, [pc, #172]	; (800660c <tcp_update_rcv_ann_wnd+0xc4>)
 8006560:	f00c fd42 	bl	8012fe8 <iprintf>
 8006564:	2000      	movs	r0, #0
 8006566:	f00c fe41 	bl	80131ec <fflush>
 800656a:	f00c fd86 	bl	801307a <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006576:	4413      	add	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006582:	f240 21da 	movw	r1, #730	; 0x2da
 8006586:	428a      	cmp	r2, r1
 8006588:	d802      	bhi.n	8006590 <tcp_update_rcv_ann_wnd+0x48>
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800658e:	e001      	b.n	8006594 <tcp_update_rcv_ann_wnd+0x4c>
 8006590:	f240 22da 	movw	r2, #730	; 0x2da
 8006594:	4413      	add	r3, r2
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	db08      	blt.n	80065b0 <tcp_update_rcv_ann_wnd+0x68>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	e025      	b.n	80065fc <tcp_update_rcv_ann_wnd+0xb4>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da03      	bge.n	80065c6 <tcp_update_rcv_ann_wnd+0x7e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065c4:	e019      	b.n	80065fa <tcp_update_rcv_ann_wnd+0xb2>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d8:	d30b      	bcc.n	80065f2 <tcp_update_rcv_ann_wnd+0xaa>
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <tcp_update_rcv_ann_wnd+0xbc>)
 80065dc:	f240 32ba 	movw	r2, #954	; 0x3ba
 80065e0:	490b      	ldr	r1, [pc, #44]	; (8006610 <tcp_update_rcv_ann_wnd+0xc8>)
 80065e2:	480a      	ldr	r0, [pc, #40]	; (800660c <tcp_update_rcv_ann_wnd+0xc4>)
 80065e4:	f00c fd00 	bl	8012fe8 <iprintf>
 80065e8:	2000      	movs	r0, #0
 80065ea:	f00c fdff 	bl	80131ec <fflush>
 80065ee:	f00c fd44 	bl	801307a <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80065fa:	2300      	movs	r3, #0
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08015814 	.word	0x08015814
 8006608:	08015a60 	.word	0x08015a60
 800660c:	08015848 	.word	0x08015848
 8006610:	08015a84 	.word	0x08015a84

08006614 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <tcp_recved+0x22>
 8006626:	4b22      	ldr	r3, [pc, #136]	; (80066b0 <tcp_recved+0x9c>)
 8006628:	f240 32d3 	movw	r2, #979	; 0x3d3
 800662c:	4921      	ldr	r1, [pc, #132]	; (80066b4 <tcp_recved+0xa0>)
 800662e:	4822      	ldr	r0, [pc, #136]	; (80066b8 <tcp_recved+0xa4>)
 8006630:	f7fa fe31 	bl	8001296 <lwip_win32_platform_diag>
 8006634:	e038      	b.n	80066a8 <tcp_recved+0x94>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7d1b      	ldrb	r3, [r3, #20]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10b      	bne.n	8006656 <tcp_recved+0x42>
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <tcp_recved+0x9c>)
 8006640:	f240 32d7 	movw	r2, #983	; 0x3d7
 8006644:	491d      	ldr	r1, [pc, #116]	; (80066bc <tcp_recved+0xa8>)
 8006646:	481c      	ldr	r0, [pc, #112]	; (80066b8 <tcp_recved+0xa4>)
 8006648:	f00c fcce 	bl	8012fe8 <iprintf>
 800664c:	2000      	movs	r0, #0
 800664e:	f00c fdcd 	bl	80131ec <fflush>
 8006652:	f00c fd12 	bl	801307a <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	4413      	add	r3, r2
 800665e:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006666:	4293      	cmp	r3, r2
 8006668:	d804      	bhi.n	8006674 <tcp_recved+0x60>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666e:	89fa      	ldrh	r2, [r7, #14]
 8006670:	429a      	cmp	r2, r3
 8006672:	d204      	bcs.n	800667e <tcp_recved+0x6a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
 800667c:	e002      	b.n	8006684 <tcp_recved+0x70>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	89fa      	ldrh	r2, [r7, #14]
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff5f 	bl	8006548 <tcp_update_rcv_ann_wnd>
 800668a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8006692:	d909      	bls.n	80066a8 <tcp_recved+0x94>
    tcp_ack_now(pcb);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8b5b      	ldrh	r3, [r3, #26]
 8006698:	f043 0302 	orr.w	r3, r3, #2
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f004 ffa8 	bl	800b5f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	08015814 	.word	0x08015814
 80066b4:	08015aa0 	.word	0x08015aa0
 80066b8:	08015848 	.word	0x08015848
 80066bc:	08015ab8 	.word	0x08015ab8

080066c0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80066ca:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <tcp_new_port+0x84>)
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <tcp_new_port+0x84>)
 80066d4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80066d6:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <tcp_new_port+0x84>)
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066de:	4293      	cmp	r3, r2
 80066e0:	d103      	bne.n	80066ea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <tcp_new_port+0x84>)
 80066e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80066e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80066ea:	2300      	movs	r3, #0
 80066ec:	71fb      	strb	r3, [r7, #7]
 80066ee:	e01e      	b.n	800672e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <tcp_new_port+0x88>)
 80066f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	e011      	b.n	8006722 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	8ada      	ldrh	r2, [r3, #22]
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <tcp_new_port+0x84>)
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d108      	bne.n	800671c <tcp_new_port+0x5c>
        n++;
 800670a:	88bb      	ldrh	r3, [r7, #4]
 800670c:	3301      	adds	r3, #1
 800670e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006710:	88bb      	ldrh	r3, [r7, #4]
 8006712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006716:	d3d8      	bcc.n	80066ca <tcp_new_port+0xa>
          return 0;
 8006718:	2300      	movs	r3, #0
 800671a:	e00d      	b.n	8006738 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ea      	bne.n	80066fe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	3301      	adds	r3, #1
 800672c:	71fb      	strb	r3, [r7, #7]
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d9dd      	bls.n	80066f0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006734:	4b03      	ldr	r3, [pc, #12]	; (8006744 <tcp_new_port+0x84>)
 8006736:	881b      	ldrh	r3, [r3, #0]
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000008 	.word	0x20000008
 8006748:	08017184 	.word	0x08017184

0800674c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <tcp_connect+0x2e>
 8006766:	4b7d      	ldr	r3, [pc, #500]	; (800695c <tcp_connect+0x210>)
 8006768:	f240 4239 	movw	r2, #1081	; 0x439
 800676c:	497c      	ldr	r1, [pc, #496]	; (8006960 <tcp_connect+0x214>)
 800676e:	487d      	ldr	r0, [pc, #500]	; (8006964 <tcp_connect+0x218>)
 8006770:	f7fa fd91 	bl	8001296 <lwip_win32_platform_diag>
 8006774:	f06f 030f 	mvn.w	r3, #15
 8006778:	e0ec      	b.n	8006954 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <tcp_connect+0x48>
 8006780:	4b76      	ldr	r3, [pc, #472]	; (800695c <tcp_connect+0x210>)
 8006782:	f240 423a 	movw	r2, #1082	; 0x43a
 8006786:	4978      	ldr	r1, [pc, #480]	; (8006968 <tcp_connect+0x21c>)
 8006788:	4876      	ldr	r0, [pc, #472]	; (8006964 <tcp_connect+0x218>)
 800678a:	f7fa fd84 	bl	8001296 <lwip_win32_platform_diag>
 800678e:	f06f 030f 	mvn.w	r3, #15
 8006792:	e0df      	b.n	8006954 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7d1b      	ldrb	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <tcp_connect+0x64>
 800679c:	4b6f      	ldr	r3, [pc, #444]	; (800695c <tcp_connect+0x210>)
 800679e:	f240 423c 	movw	r2, #1084	; 0x43c
 80067a2:	4972      	ldr	r1, [pc, #456]	; (800696c <tcp_connect+0x220>)
 80067a4:	486f      	ldr	r0, [pc, #444]	; (8006964 <tcp_connect+0x218>)
 80067a6:	f7fa fd76 	bl	8001296 <lwip_win32_platform_diag>
 80067aa:	f06f 0309 	mvn.w	r3, #9
 80067ae:	e0d1      	b.n	8006954 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <tcp_connect+0x70>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	e000      	b.n	80067be <tcp_connect+0x72>
 80067bc:	2300      	movs	r3, #0
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7a1b      	ldrb	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d006      	beq.n	80067de <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7a1b      	ldrb	r3, [r3, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fe fbd5 	bl	8004f84 <netif_get_by_index>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24
 80067dc:	e005      	b.n	80067ea <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fc ff44 	bl	8003670 <ip4_route>
 80067e8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80067f0:	f06f 0303 	mvn.w	r3, #3
 80067f4:	e0ae      	b.n	8006954 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <tcp_connect+0xb8>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d111      	bne.n	8006828 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <tcp_connect+0xc4>
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	3304      	adds	r3, #4
 800680e:	e000      	b.n	8006812 <tcp_connect+0xc6>
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d102      	bne.n	8006820 <tcp_connect+0xd4>
      return ERR_RTE;
 800681a:	f06f 0303 	mvn.w	r3, #3
 800681e:	e099      	b.n	8006954 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8adb      	ldrh	r3, [r3, #22]
 800682c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8adb      	ldrh	r3, [r3, #22]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10c      	bne.n	8006850 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006836:	f7ff ff43 	bl	80066c0 <tcp_new_port>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8adb      	ldrh	r3, [r3, #22]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <tcp_connect+0x104>
      return ERR_BUF;
 800684a:	f06f 0301 	mvn.w	r3, #1
 800684e:	e081      	b.n	8006954 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f001 f8e3 	bl	8007a1c <tcp_next_iss>
 8006856:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800689a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80068a4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3304      	adds	r3, #4
 80068ae:	461a      	mov	r2, r3
 80068b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068b2:	f001 f8dd 	bl	8007a70 <tcp_eff_send_mss_netif>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80068ce:	2102      	movs	r1, #2
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f004 fd85 	bl	800b3e0 <tcp_enqueue_flags>
 80068d6:	4603      	mov	r3, r0
 80068d8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80068da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d136      	bne.n	8006950 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2202      	movs	r2, #2
 80068e6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80068e8:	8b7b      	ldrh	r3, [r7, #26]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d021      	beq.n	8006932 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80068ee:	4b20      	ldr	r3, [pc, #128]	; (8006970 <tcp_connect+0x224>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d105      	bne.n	8006904 <tcp_connect+0x1b8>
 80068f8:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <tcp_connect+0x224>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <tcp_connect+0x224>)
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e013      	b.n	800692c <tcp_connect+0x1e0>
 8006904:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <tcp_connect+0x224>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	e00c      	b.n	8006926 <tcp_connect+0x1da>
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	429a      	cmp	r2, r3
 8006914:	d104      	bne.n	8006920 <tcp_connect+0x1d4>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e005      	b.n	800692c <tcp_connect+0x1e0>
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ef      	bne.n	800690c <tcp_connect+0x1c0>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8006932:	4b10      	ldr	r3, [pc, #64]	; (8006974 <tcp_connect+0x228>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <tcp_connect+0x228>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	f005 ff0c 	bl	800c75c <tcp_timer_needed>
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <tcp_connect+0x22c>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f004 fe54 	bl	800b5f8 <tcp_output>
  }
  return ret;
 8006950:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	08015814 	.word	0x08015814
 8006960:	08015ae0 	.word	0x08015ae0
 8006964:	08015848 	.word	0x08015848
 8006968:	08015afc 	.word	0x08015afc
 800696c:	08015b18 	.word	0x08015b18
 8006970:	20002218 	.word	0x20002218
 8006974:	2000220c 	.word	0x2000220c
 8006978:	20002208 	.word	0x20002208

0800697c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b090      	sub	sp, #64	; 0x40
 8006980:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006988:	4ba1      	ldr	r3, [pc, #644]	; (8006c10 <tcp_slowtmr+0x294>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	4aa0      	ldr	r2, [pc, #640]	; (8006c10 <tcp_slowtmr+0x294>)
 8006990:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006992:	4ba0      	ldr	r3, [pc, #640]	; (8006c14 <tcp_slowtmr+0x298>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	b2da      	uxtb	r2, r3
 800699a:	4b9e      	ldr	r3, [pc, #632]	; (8006c14 <tcp_slowtmr+0x298>)
 800699c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80069a2:	4b9d      	ldr	r3, [pc, #628]	; (8006c18 <tcp_slowtmr+0x29c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80069a8:	e2c3      	b.n	8006f32 <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	7d1b      	ldrb	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <tcp_slowtmr+0x4e>
 80069b2:	4b9a      	ldr	r3, [pc, #616]	; (8006c1c <tcp_slowtmr+0x2a0>)
 80069b4:	f240 42c2 	movw	r2, #1218	; 0x4c2
 80069b8:	4999      	ldr	r1, [pc, #612]	; (8006c20 <tcp_slowtmr+0x2a4>)
 80069ba:	489a      	ldr	r0, [pc, #616]	; (8006c24 <tcp_slowtmr+0x2a8>)
 80069bc:	f00c fb14 	bl	8012fe8 <iprintf>
 80069c0:	2000      	movs	r0, #0
 80069c2:	f00c fc13 	bl	80131ec <fflush>
 80069c6:	f00c fb58 	bl	801307a <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	7d1b      	ldrb	r3, [r3, #20]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10b      	bne.n	80069ea <tcp_slowtmr+0x6e>
 80069d2:	4b92      	ldr	r3, [pc, #584]	; (8006c1c <tcp_slowtmr+0x2a0>)
 80069d4:	f240 42c3 	movw	r2, #1219	; 0x4c3
 80069d8:	4993      	ldr	r1, [pc, #588]	; (8006c28 <tcp_slowtmr+0x2ac>)
 80069da:	4892      	ldr	r0, [pc, #584]	; (8006c24 <tcp_slowtmr+0x2a8>)
 80069dc:	f00c fb04 	bl	8012fe8 <iprintf>
 80069e0:	2000      	movs	r0, #0
 80069e2:	f00c fc03 	bl	80131ec <fflush>
 80069e6:	f00c fb48 	bl	801307a <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	7d1b      	ldrb	r3, [r3, #20]
 80069ee:	2b0a      	cmp	r3, #10
 80069f0:	d10b      	bne.n	8006a0a <tcp_slowtmr+0x8e>
 80069f2:	4b8a      	ldr	r3, [pc, #552]	; (8006c1c <tcp_slowtmr+0x2a0>)
 80069f4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80069f8:	498c      	ldr	r1, [pc, #560]	; (8006c2c <tcp_slowtmr+0x2b0>)
 80069fa:	488a      	ldr	r0, [pc, #552]	; (8006c24 <tcp_slowtmr+0x2a8>)
 80069fc:	f00c faf4 	bl	8012fe8 <iprintf>
 8006a00:	2000      	movs	r0, #0
 8006a02:	f00c fbf3 	bl	80131ec <fflush>
 8006a06:	f00c fb38 	bl	801307a <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	7f9a      	ldrb	r2, [r3, #30]
 8006a0e:	4b81      	ldr	r3, [pc, #516]	; (8006c14 <tcp_slowtmr+0x298>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d105      	bne.n	8006a22 <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006a20:	e287      	b.n	8006f32 <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006a22:	4b7c      	ldr	r3, [pc, #496]	; (8006c14 <tcp_slowtmr+0x298>)
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	7d1b      	ldrb	r3, [r3, #20]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d10a      	bne.n	8006a54 <tcp_slowtmr+0xd8>
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d905      	bls.n	8006a54 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8006a52:	e129      	b.n	8006ca8 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a5a:	2b0b      	cmp	r3, #11
 8006a5c:	d905      	bls.n	8006a6a <tcp_slowtmr+0xee>
      ++pcb_remove;
 8006a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a62:	3301      	adds	r3, #1
 8006a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a68:	e11e      	b.n	8006ca8 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d07f      	beq.n	8006b74 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <tcp_slowtmr+0x118>
 8006a7c:	4b67      	ldr	r3, [pc, #412]	; (8006c1c <tcp_slowtmr+0x2a0>)
 8006a7e:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8006a82:	496b      	ldr	r1, [pc, #428]	; (8006c30 <tcp_slowtmr+0x2b4>)
 8006a84:	4867      	ldr	r0, [pc, #412]	; (8006c24 <tcp_slowtmr+0x2a8>)
 8006a86:	f00c faaf 	bl	8012fe8 <iprintf>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f00c fbae 	bl	80131ec <fflush>
 8006a90:	f00c faf3 	bl	801307a <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <tcp_slowtmr+0x138>
 8006a9c:	4b5f      	ldr	r3, [pc, #380]	; (8006c1c <tcp_slowtmr+0x2a0>)
 8006a9e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8006aa2:	4964      	ldr	r1, [pc, #400]	; (8006c34 <tcp_slowtmr+0x2b8>)
 8006aa4:	485f      	ldr	r0, [pc, #380]	; (8006c24 <tcp_slowtmr+0x2a8>)
 8006aa6:	f00c fa9f 	bl	8012fe8 <iprintf>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	f00c fb9e 	bl	80131ec <fflush>
 8006ab0:	f00c fae3 	bl	801307a <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006aba:	2b0b      	cmp	r3, #11
 8006abc:	d905      	bls.n	8006aca <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 8006abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ac8:	e0ee      	b.n	8006ca8 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	4a59      	ldr	r2, [pc, #356]	; (8006c38 <tcp_slowtmr+0x2bc>)
 8006ad4:	5cd3      	ldrb	r3, [r2, r3]
 8006ad6:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ade:	7ffa      	ldrb	r2, [r7, #31]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d907      	bls.n	8006af4 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006aea:	3301      	adds	r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006afa:	7ffa      	ldrb	r2, [r7, #31]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f200 80d3 	bhi.w	8006ca8 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8006b02:	2301      	movs	r3, #1
 8006b04:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d108      	bne.n	8006b22 <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b12:	f005 fd51 	bl	800c5b8 <tcp_zero_window_probe>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d014      	beq.n	8006b46 <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	e011      	b.n	8006b46 <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b2c:	f004 fa96 	bl	800b05c <tcp_split_unsent_seg>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 8006b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b38:	f004 fd5e 	bl	800b5f8 <tcp_output>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80ad 	beq.w	8006ca8 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	f200 80a3 	bhi.w	8006ca8 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006b72:	e099      	b.n	8006ca8 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	db0f      	blt.n	8006b9e <tcp_slowtmr+0x222>
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d008      	beq.n	8006b9e <tcp_slowtmr+0x222>
          ++pcb->rtime;
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3301      	adds	r3, #1
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	b21a      	sxth	r2, r3
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006baa:	429a      	cmp	r2, r3
 8006bac:	db7c      	blt.n	8006ca8 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bb0:	f005 f862 	bl	800bc78 <tcp_rexmit_rto_prepare>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <tcp_slowtmr+0x24e>
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d172      	bne.n	8006ca8 <tcp_slowtmr+0x32c>
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d06e      	beq.n	8006ca8 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	7d1b      	ldrb	r3, [r3, #20]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d03b      	beq.n	8006c4a <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	bf28      	it	cs
 8006bdc:	230c      	movcs	r3, #12
 8006bde:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006be6:	10db      	asrs	r3, r3, #3
 8006be8:	b21b      	sxth	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006bf2:	4413      	add	r3, r2
 8006bf4:	7fba      	ldrb	r2, [r7, #30]
 8006bf6:	4911      	ldr	r1, [pc, #68]	; (8006c3c <tcp_slowtmr+0x2c0>)
 8006bf8:	5c8a      	ldrb	r2, [r1, r2]
 8006bfa:	4093      	lsls	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006c04:	4293      	cmp	r3, r2
 8006c06:	dc1b      	bgt.n	8006c40 <tcp_slowtmr+0x2c4>
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	b21a      	sxth	r2, r3
 8006c0c:	e01a      	b.n	8006c44 <tcp_slowtmr+0x2c8>
 8006c0e:	bf00      	nop
 8006c10:	20002210 	.word	0x20002210
 8006c14:	20000646 	.word	0x20000646
 8006c18:	2000220c 	.word	0x2000220c
 8006c1c:	08015814 	.word	0x08015814
 8006c20:	08015b48 	.word	0x08015b48
 8006c24:	08015848 	.word	0x08015848
 8006c28:	08015b74 	.word	0x08015b74
 8006c2c:	08015ba0 	.word	0x08015ba0
 8006c30:	08015bcc 	.word	0x08015bcc
 8006c34:	08015c00 	.word	0x08015c00
 8006c38:	0801717c 	.word	0x0801717c
 8006c3c:	0801716c 	.word	0x0801716c
 8006c40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	bf28      	it	cs
 8006c60:	4613      	movcs	r3, r2
 8006c62:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8006c64:	8afb      	ldrh	r3, [r7, #22]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d206      	bcs.n	8006c90 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006ca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca4:	f005 f866 	bl	800bd74 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	7d1b      	ldrb	r3, [r3, #20]
 8006cac:	2b06      	cmp	r3, #6
 8006cae:	d111      	bne.n	8006cd4 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	8b5b      	ldrh	r3, [r3, #26]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cbc:	4ba2      	ldr	r3, [pc, #648]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b28      	cmp	r3, #40	; 0x28
 8006cc8:	d904      	bls.n	8006cd4 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	7a5b      	ldrb	r3, [r3, #9]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d04c      	beq.n	8006d7a <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d003      	beq.n	8006cf0 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006cec:	2b07      	cmp	r3, #7
 8006cee:	d144      	bne.n	8006d7a <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cf0:	4b95      	ldr	r3, [pc, #596]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d00:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006d04:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006d08:	4990      	ldr	r1, [pc, #576]	; (8006f4c <tcp_slowtmr+0x5d0>)
 8006d0a:	fba1 1303 	umull	r1, r3, r1, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d90a      	bls.n	8006d2a <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d22:	3301      	adds	r3, #1
 8006d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d28:	e027      	b.n	8006d7a <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d2a:	4b87      	ldr	r3, [pc, #540]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006d40:	4618      	mov	r0, r3
 8006d42:	4b83      	ldr	r3, [pc, #524]	; (8006f50 <tcp_slowtmr+0x5d4>)
 8006d44:	fb03 f300 	mul.w	r3, r3, r0
 8006d48:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006d4a:	4980      	ldr	r1, [pc, #512]	; (8006f4c <tcp_slowtmr+0x5d0>)
 8006d4c:	fba1 1303 	umull	r1, r3, r1, r3
 8006d50:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d911      	bls.n	8006d7a <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 8006d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d58:	f005 fbe8 	bl	800c52c <tcp_keepalive>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006d62:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d107      	bne.n	8006d7a <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006d70:	3301      	adds	r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006d82:	4b71      	ldr	r3, [pc, #452]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006d92:	4619      	mov	r1, r3
 8006d94:	460b      	mov	r3, r1
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	440b      	add	r3, r1
 8006d9a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006da0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da2:	f000 ff19 	bl	8007bd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	7d1b      	ldrb	r3, [r3, #20]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d10b      	bne.n	8006dc6 <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006dae:	4b66      	ldr	r3, [pc, #408]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b28      	cmp	r3, #40	; 0x28
 8006dba:	d904      	bls.n	8006dc6 <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	7d1b      	ldrb	r3, [r3, #20]
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	d10b      	bne.n	8006de6 <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006dce:	4b5e      	ldr	r3, [pc, #376]	; (8006f48 <tcp_slowtmr+0x5cc>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2bf0      	cmp	r3, #240	; 0xf0
 8006dda:	d904      	bls.n	8006de6 <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	3301      	adds	r3, #1
 8006de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d06a      	beq.n	8006ec4 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df8:	f000 fd14 	bl	8007824 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006e02:	4b54      	ldr	r3, [pc, #336]	; (8006f54 <tcp_slowtmr+0x5d8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d10b      	bne.n	8006e24 <tcp_slowtmr+0x4a8>
 8006e0c:	4b52      	ldr	r3, [pc, #328]	; (8006f58 <tcp_slowtmr+0x5dc>)
 8006e0e:	f240 5271 	movw	r2, #1393	; 0x571
 8006e12:	4952      	ldr	r1, [pc, #328]	; (8006f5c <tcp_slowtmr+0x5e0>)
 8006e14:	4852      	ldr	r0, [pc, #328]	; (8006f60 <tcp_slowtmr+0x5e4>)
 8006e16:	f00c f8e7 	bl	8012fe8 <iprintf>
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f00c f9e6 	bl	80131ec <fflush>
 8006e20:	f00c f92b 	bl	801307a <abort>
        prev->next = pcb->next;
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e014      	b.n	8006e58 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006e2e:	4b49      	ldr	r3, [pc, #292]	; (8006f54 <tcp_slowtmr+0x5d8>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d00b      	beq.n	8006e50 <tcp_slowtmr+0x4d4>
 8006e38:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <tcp_slowtmr+0x5dc>)
 8006e3a:	f240 5275 	movw	r2, #1397	; 0x575
 8006e3e:	4949      	ldr	r1, [pc, #292]	; (8006f64 <tcp_slowtmr+0x5e8>)
 8006e40:	4847      	ldr	r0, [pc, #284]	; (8006f60 <tcp_slowtmr+0x5e4>)
 8006e42:	f00c f8d1 	bl	8012fe8 <iprintf>
 8006e46:	2000      	movs	r0, #0
 8006e48:	f00c f9d0 	bl	80131ec <fflush>
 8006e4c:	f00c f915 	bl	801307a <abort>
        tcp_active_pcbs = pcb->next;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a3f      	ldr	r2, [pc, #252]	; (8006f54 <tcp_slowtmr+0x5d8>)
 8006e56:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d013      	beq.n	8006e88 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006e68:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e70:	8ad2      	ldrh	r2, [r2, #22]
 8006e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e74:	8b09      	ldrh	r1, [r1, #24]
 8006e76:	9102      	str	r1, [sp, #8]
 8006e78:	9201      	str	r2, [sp, #4]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	4622      	mov	r2, r4
 8006e80:	4601      	mov	r1, r0
 8006e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e84:	f005 faa0 	bl	800c3c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	7d1b      	ldrb	r3, [r3, #20]
 8006e92:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe ff9e 	bl	8005de0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006ea4:	4b30      	ldr	r3, [pc, #192]	; (8006f68 <tcp_slowtmr+0x5ec>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <tcp_slowtmr+0x53e>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f06f 010c 	mvn.w	r1, #12
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006eba:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <tcp_slowtmr+0x5ec>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d037      	beq.n	8006f32 <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 8006ec2:	e56c      	b.n	800699e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	7f1b      	ldrb	r3, [r3, #28]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	7f1a      	ldrb	r2, [r3, #28]
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	7f5b      	ldrb	r3, [r3, #29]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d325      	bcc.n	8006f32 <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006eec:	4b1e      	ldr	r3, [pc, #120]	; (8006f68 <tcp_slowtmr+0x5ec>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <tcp_slowtmr+0x598>
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f04:	6912      	ldr	r2, [r2, #16]
 8006f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006f12:	e002      	b.n	8006f1a <tcp_slowtmr+0x59e>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <tcp_slowtmr+0x5ec>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d000      	beq.n	8006f24 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8006f22:	e53c      	b.n	800699e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006f24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8006f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2e:	f004 fb63 	bl	800b5f8 <tcp_output>
  while (pcb != NULL) {
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f47f ad38 	bne.w	80069aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <tcp_slowtmr+0x5f0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006f44:	e076      	b.n	8007034 <tcp_slowtmr+0x6b8>
 8006f46:	bf00      	nop
 8006f48:	20002210 	.word	0x20002210
 8006f4c:	10624dd3 	.word	0x10624dd3
 8006f50:	000124f8 	.word	0x000124f8
 8006f54:	2000220c 	.word	0x2000220c
 8006f58:	08015814 	.word	0x08015814
 8006f5c:	08015c38 	.word	0x08015c38
 8006f60:	08015848 	.word	0x08015848
 8006f64:	08015c64 	.word	0x08015c64
 8006f68:	20002208 	.word	0x20002208
 8006f6c:	2000221c 	.word	0x2000221c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	7d1b      	ldrb	r3, [r3, #20]
 8006f74:	2b0a      	cmp	r3, #10
 8006f76:	d00b      	beq.n	8006f90 <tcp_slowtmr+0x614>
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <tcp_slowtmr+0x6c8>)
 8006f7a:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8006f7e:	4932      	ldr	r1, [pc, #200]	; (8007048 <tcp_slowtmr+0x6cc>)
 8006f80:	4832      	ldr	r0, [pc, #200]	; (800704c <tcp_slowtmr+0x6d0>)
 8006f82:	f00c f831 	bl	8012fe8 <iprintf>
 8006f86:	2000      	movs	r0, #0
 8006f88:	f00c f930 	bl	80131ec <fflush>
 8006f8c:	f00c f875 	bl	801307a <abort>
    pcb_remove = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006f96:	4b2e      	ldr	r3, [pc, #184]	; (8007050 <tcp_slowtmr+0x6d4>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2bf0      	cmp	r3, #240	; 0xf0
 8006fa2:	d904      	bls.n	8006fae <tcp_slowtmr+0x632>
      ++pcb_remove;
 8006fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa8:	3301      	adds	r3, #1
 8006faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d039      	beq.n	800702a <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006fb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fb8:	f000 fc34 	bl	8007824 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d015      	beq.n	8006fee <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006fc2:	4b24      	ldr	r3, [pc, #144]	; (8007054 <tcp_slowtmr+0x6d8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d10b      	bne.n	8006fe4 <tcp_slowtmr+0x668>
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <tcp_slowtmr+0x6c8>)
 8006fce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006fd2:	4921      	ldr	r1, [pc, #132]	; (8007058 <tcp_slowtmr+0x6dc>)
 8006fd4:	481d      	ldr	r0, [pc, #116]	; (800704c <tcp_slowtmr+0x6d0>)
 8006fd6:	f00c f807 	bl	8012fe8 <iprintf>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f00c f906 	bl	80131ec <fflush>
 8006fe0:	f00c f84b 	bl	801307a <abort>
        prev->next = pcb->next;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	60da      	str	r2, [r3, #12]
 8006fec:	e014      	b.n	8007018 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006fee:	4b19      	ldr	r3, [pc, #100]	; (8007054 <tcp_slowtmr+0x6d8>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d00b      	beq.n	8007010 <tcp_slowtmr+0x694>
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <tcp_slowtmr+0x6c8>)
 8006ffa:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8006ffe:	4917      	ldr	r1, [pc, #92]	; (800705c <tcp_slowtmr+0x6e0>)
 8007000:	4812      	ldr	r0, [pc, #72]	; (800704c <tcp_slowtmr+0x6d0>)
 8007002:	f00b fff1 	bl	8012fe8 <iprintf>
 8007006:	2000      	movs	r0, #0
 8007008:	f00c f8f0 	bl	80131ec <fflush>
 800700c:	f00c f835 	bl	801307a <abort>
        tcp_tw_pcbs = pcb->next;
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <tcp_slowtmr+0x6d8>)
 8007016:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007022:	6838      	ldr	r0, [r7, #0]
 8007024:	f7fe fedc 	bl	8005de0 <tcp_free>
 8007028:	e004      	b.n	8007034 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d19a      	bne.n	8006f70 <tcp_slowtmr+0x5f4>
    }
  }
}
 800703a:	bf00      	nop
 800703c:	3730      	adds	r7, #48	; 0x30
 800703e:	46bd      	mov	sp, r7
 8007040:	bdb0      	pop	{r4, r5, r7, pc}
 8007042:	bf00      	nop
 8007044:	08015814 	.word	0x08015814
 8007048:	08015c90 	.word	0x08015c90
 800704c:	08015848 	.word	0x08015848
 8007050:	20002210 	.word	0x20002210
 8007054:	2000221c 	.word	0x2000221c
 8007058:	08015cc0 	.word	0x08015cc0
 800705c:	08015ce8 	.word	0x08015ce8

08007060 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007066:	4b2d      	ldr	r3, [pc, #180]	; (800711c <tcp_fasttmr+0xbc>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	4b2b      	ldr	r3, [pc, #172]	; (800711c <tcp_fasttmr+0xbc>)
 8007070:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007072:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <tcp_fasttmr+0xc0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007078:	e048      	b.n	800710c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7f9a      	ldrb	r2, [r3, #30]
 800707e:	4b27      	ldr	r3, [pc, #156]	; (800711c <tcp_fasttmr+0xbc>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d03f      	beq.n	8007106 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007086:	4b25      	ldr	r3, [pc, #148]	; (800711c <tcp_fasttmr+0xbc>)
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8b5b      	ldrh	r3, [r3, #26]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8b5b      	ldrh	r3, [r3, #26]
 800709e:	f043 0302 	orr.w	r3, r3, #2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f004 faa5 	bl	800b5f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	8b5b      	ldrh	r3, [r3, #26]
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8b5b      	ldrh	r3, [r3, #26]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8b5b      	ldrh	r3, [r3, #26]
 80070cc:	f023 0308 	bic.w	r3, r3, #8
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff f838 	bl	800614c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <tcp_fasttmr+0xc4>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f819 	bl	8007128 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <tcp_fasttmr+0xc4>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d000      	beq.n	8007100 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80070fe:	e7b8      	b.n	8007072 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	e002      	b.n	800710c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1b3      	bne.n	800707a <tcp_fasttmr+0x1a>
    }
  }
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000646 	.word	0x20000646
 8007120:	2000220c 	.word	0x2000220c
 8007124:	20002208 	.word	0x20002208

08007128 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <tcp_process_refused_data+0x22>
 8007136:	4b38      	ldr	r3, [pc, #224]	; (8007218 <tcp_process_refused_data+0xf0>)
 8007138:	f240 620d 	movw	r2, #1549	; 0x60d
 800713c:	4937      	ldr	r1, [pc, #220]	; (800721c <tcp_process_refused_data+0xf4>)
 800713e:	4838      	ldr	r0, [pc, #224]	; (8007220 <tcp_process_refused_data+0xf8>)
 8007140:	f7fa f8a9 	bl	8001296 <lwip_win32_platform_diag>
 8007144:	f06f 030f 	mvn.w	r3, #15
 8007148:	e061      	b.n	800720e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800714e:	7b5b      	ldrb	r3, [r3, #13]
 8007150:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007156:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <tcp_process_refused_data+0x58>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6918      	ldr	r0, [r3, #16]
 8007172:	2300      	movs	r3, #0
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	47a0      	blx	r4
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	e007      	b.n	8007190 <tcp_process_refused_data+0x68>
 8007180:	2300      	movs	r3, #0
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	2000      	movs	r0, #0
 8007188:	f000 f8aa 	bl	80072e0 <tcp_recv_null>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d12b      	bne.n	80071f0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d034      	beq.n	800720c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d005      	beq.n	80071ba <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	3301      	adds	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <tcp_process_refused_data+0xb4>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6918      	ldr	r0, [r3, #16]
 80071ce:	2300      	movs	r3, #0
 80071d0:	2200      	movs	r2, #0
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	47a0      	blx	r4
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e001      	b.n	80071e0 <tcp_process_refused_data+0xb8>
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80071e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e4:	f113 0f0d 	cmn.w	r3, #13
 80071e8:	d110      	bne.n	800720c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80071ea:	f06f 030c 	mvn.w	r3, #12
 80071ee:	e00e      	b.n	800720e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80071f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f4:	f113 0f0d 	cmn.w	r3, #13
 80071f8:	d102      	bne.n	8007200 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80071fa:	f06f 030c 	mvn.w	r3, #12
 80071fe:	e006      	b.n	800720e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007206:	f06f 0304 	mvn.w	r3, #4
 800720a:	e000      	b.n	800720e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bd90      	pop	{r4, r7, pc}
 8007216:	bf00      	nop
 8007218:	08015814 	.word	0x08015814
 800721c:	08015d10 	.word	0x08015d10
 8007220:	08015848 	.word	0x08015848

08007224 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800722c:	e007      	b.n	800723e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f809 	bl	800724c <tcp_seg_free>
    seg = next;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f4      	bne.n	800722e <tcp_segs_free+0xa>
  }
}
 8007244:	bf00      	nop
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe f9a0 	bl	80055ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	2002      	movs	r0, #2
 8007270:	f7fd fbc6 	bl	8004a00 <memp_free>
  }
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <tcp_seg_copy+0x26>
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <tcp_seg_copy+0x58>)
 800728c:	f240 6286 	movw	r2, #1670	; 0x686
 8007290:	4911      	ldr	r1, [pc, #68]	; (80072d8 <tcp_seg_copy+0x5c>)
 8007292:	4812      	ldr	r0, [pc, #72]	; (80072dc <tcp_seg_copy+0x60>)
 8007294:	f00b fea8 	bl	8012fe8 <iprintf>
 8007298:	2000      	movs	r0, #0
 800729a:	f00b ffa7 	bl	80131ec <fflush>
 800729e:	f00b feec 	bl	801307a <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80072a2:	2002      	movs	r0, #2
 80072a4:	f7fd fb3c 	bl	8004920 <memp_malloc>
 80072a8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <tcp_seg_copy+0x38>
    return NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e00a      	b.n	80072ca <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80072b4:	2214      	movs	r2, #20
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f00c f897 	bl	80133ec <memcpy>
  pbuf_ref(cseg->p);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fa0c 	bl	80056e0 <pbuf_ref>
  return cseg;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	08015814 	.word	0x08015814
 80072d8:	08015d54 	.word	0x08015d54
 80072dc:	08015848 	.word	0x08015848

080072e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <tcp_recv_null+0x28>
 80072f4:	4b12      	ldr	r3, [pc, #72]	; (8007340 <tcp_recv_null+0x60>)
 80072f6:	f240 629c 	movw	r2, #1692	; 0x69c
 80072fa:	4912      	ldr	r1, [pc, #72]	; (8007344 <tcp_recv_null+0x64>)
 80072fc:	4812      	ldr	r0, [pc, #72]	; (8007348 <tcp_recv_null+0x68>)
 80072fe:	f7f9 ffca 	bl	8001296 <lwip_win32_platform_diag>
 8007302:	f06f 030f 	mvn.w	r3, #15
 8007306:	e016      	b.n	8007336 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d009      	beq.n	8007322 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	891b      	ldrh	r3, [r3, #8]
 8007312:	4619      	mov	r1, r3
 8007314:	68b8      	ldr	r0, [r7, #8]
 8007316:	f7ff f97d 	bl	8006614 <tcp_recved>
    pbuf_free(p);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fe f946 	bl	80055ac <pbuf_free>
 8007320:	e008      	b.n	8007334 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800732a:	68b8      	ldr	r0, [r7, #8]
 800732c:	f7fe ff7a 	bl	8006224 <tcp_close>
 8007330:	4603      	mov	r3, r0
 8007332:	e000      	b.n	8007336 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	08015814 	.word	0x08015814
 8007344:	08015d70 	.word	0x08015d70
 8007348:	08015848 	.word	0x08015848

0800734c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db01      	blt.n	8007362 <tcp_kill_prio+0x16>
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	e000      	b.n	8007364 <tcp_kill_prio+0x18>
 8007362:	237f      	movs	r3, #127	; 0x7f
 8007364:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d034      	beq.n	80073d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3b01      	subs	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800737a:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <tcp_kill_prio+0x94>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	e01f      	b.n	80073c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	7d5b      	ldrb	r3, [r3, #21]
 8007386:	7afa      	ldrb	r2, [r7, #11]
 8007388:	429a      	cmp	r2, r3
 800738a:	d80c      	bhi.n	80073a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007390:	7afa      	ldrb	r2, [r7, #11]
 8007392:	429a      	cmp	r2, r3
 8007394:	d112      	bne.n	80073bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007396:	4b13      	ldr	r3, [pc, #76]	; (80073e4 <tcp_kill_prio+0x98>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d30a      	bcc.n	80073bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <tcp_kill_prio+0x98>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	7d5b      	ldrb	r3, [r3, #21]
 80073ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1dc      	bne.n	8007382 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7ff f816 	bl	8006400 <tcp_abort>
 80073d4:	e000      	b.n	80073d8 <tcp_kill_prio+0x8c>
    return;
 80073d6:	bf00      	nop
  }
}
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000220c 	.word	0x2000220c
 80073e4:	20002210 	.word	0x20002210

080073e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d00e      	beq.n	8007416 <tcp_kill_state+0x2e>
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d00b      	beq.n	8007416 <tcp_kill_state+0x2e>
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <tcp_kill_state+0x8c>)
 8007400:	f240 62e1 	movw	r2, #1761	; 0x6e1
 8007404:	491c      	ldr	r1, [pc, #112]	; (8007478 <tcp_kill_state+0x90>)
 8007406:	481d      	ldr	r0, [pc, #116]	; (800747c <tcp_kill_state+0x94>)
 8007408:	f00b fdee 	bl	8012fe8 <iprintf>
 800740c:	2000      	movs	r0, #0
 800740e:	f00b feed 	bl	80131ec <fflush>
 8007412:	f00b fe32 	bl	801307a <abort>

  inactivity = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <tcp_kill_state+0x98>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e017      	b.n	8007456 <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	79fa      	ldrb	r2, [r7, #7]
 800742c:	429a      	cmp	r2, r3
 800742e:	d10f      	bne.n	8007450 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <tcp_kill_state+0x9c>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	1ad2      	subs	r2, r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d307      	bcc.n	8007450 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8007440:	4b10      	ldr	r3, [pc, #64]	; (8007484 <tcp_kill_state+0x9c>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007462:	2100      	movs	r1, #0
 8007464:	6938      	ldr	r0, [r7, #16]
 8007466:	f7fe ff09 	bl	800627c <tcp_abandon>
  }
}
 800746a:	bf00      	nop
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	08015814 	.word	0x08015814
 8007478:	08015d8c 	.word	0x08015d8c
 800747c:	08015848 	.word	0x08015848
 8007480:	2000220c 	.word	0x2000220c
 8007484:	20002210 	.word	0x20002210

08007488 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <tcp_kill_timewait+0x58>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e012      	b.n	80074c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800749e:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <tcp_kill_timewait+0x5c>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d307      	bcc.n	80074be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <tcp_kill_timewait+0x5c>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e9      	bne.n	800749e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80074d0:	68b8      	ldr	r0, [r7, #8]
 80074d2:	f7fe ff95 	bl	8006400 <tcp_abort>
  }
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	2000221c 	.word	0x2000221c
 80074e4:	20002210 	.word	0x20002210

080074e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <tcp_handle_closepend+0x48>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80074f4:	e014      	b.n	8007520 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8b5b      	ldrh	r3, [r3, #26]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8b5b      	ldrh	r3, [r3, #26]
 800750c:	f023 0308 	bic.w	r3, r3, #8
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fe fe18 	bl	800614c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e7      	bne.n	80074f6 <tcp_handle_closepend+0xe>
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	2000220c 	.word	0x2000220c

08007534 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800753e:	2000      	movs	r0, #0
 8007540:	f7fd f9ee 	bl	8004920 <memp_malloc>
 8007544:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d14a      	bne.n	80075e2 <tcp_alloc+0xae>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800754c:	f7ff ffcc 	bl	80074e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007550:	f7ff ff9a 	bl	8007488 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007554:	2000      	movs	r0, #0
 8007556:	f7fd f9e3 	bl	8004920 <memp_malloc>
 800755a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d136      	bne.n	80075d0 <tcp_alloc+0x9c>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007562:	2009      	movs	r0, #9
 8007564:	f7ff ff40 	bl	80073e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007568:	2000      	movs	r0, #0
 800756a:	f7fd f9d9 	bl	8004920 <memp_malloc>
 800756e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d123      	bne.n	80075be <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007576:	2008      	movs	r0, #8
 8007578:	f7ff ff36 	bl	80073e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800757c:	2000      	movs	r0, #0
 800757e:	f7fd f9cf 	bl	8004920 <memp_malloc>
 8007582:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d110      	bne.n	80075ac <tcp_alloc+0x78>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fedd 	bl	800734c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007592:	2000      	movs	r0, #0
 8007594:	f7fd f9c4 	bl	8004920 <memp_malloc>
 8007598:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <tcp_alloc+0x78>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80075a0:	4b34      	ldr	r3, [pc, #208]	; (8007674 <tcp_alloc+0x140>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	889a      	ldrh	r2, [r3, #4]
 80075a6:	3a01      	subs	r2, #1
 80075a8:	b292      	uxth	r2, r2
 80075aa:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80075b2:	4b30      	ldr	r3, [pc, #192]	; (8007674 <tcp_alloc+0x140>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	889a      	ldrh	r2, [r3, #4]
 80075b8:	3a01      	subs	r2, #1
 80075ba:	b292      	uxth	r2, r2
 80075bc:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <tcp_alloc+0x9c>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80075c4:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <tcp_alloc+0x140>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	889a      	ldrh	r2, [r3, #4]
 80075ca:	3a01      	subs	r2, #1
 80075cc:	b292      	uxth	r2, r2
 80075ce:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <tcp_alloc+0xae>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80075d6:	4b27      	ldr	r3, [pc, #156]	; (8007674 <tcp_alloc+0x140>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	889a      	ldrh	r2, [r3, #4]
 80075dc:	3a01      	subs	r2, #1
 80075de:	b292      	uxth	r2, r2
 80075e0:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d03f      	beq.n	8007668 <tcp_alloc+0x134>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80075e8:	229c      	movs	r2, #156	; 0x9c
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f00b ff22 	bl	8013436 <memset>
    pcb->prio = prio;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f640 3268 	movw	r2, #2920	; 0xb68
 80075fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007608:	855a      	strh	r2, [r3, #42]	; 0x2a
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800761e:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2206      	movs	r2, #6
 8007624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2206      	movs	r2, #6
 800762c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007634:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800763e:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <tcp_alloc+0x144>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <tcp_alloc+0x148>)
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f640 3268 	movw	r2, #2920	; 0xb68
 8007654:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a09      	ldr	r2, [pc, #36]	; (8007680 <tcp_alloc+0x14c>)
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a08      	ldr	r2, [pc, #32]	; (8007684 <tcp_alloc+0x150>)
 8007664:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20002164 	.word	0x20002164
 8007678:	20002210 	.word	0x20002210
 800767c:	20000646 	.word	0x20000646
 8007680:	080072e1 	.word	0x080072e1
 8007684:	006ddd00 	.word	0x006ddd00

08007688 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800768c:	2040      	movs	r0, #64	; 0x40
 800768e:	f7ff ff51 	bl	8007534 <tcp_alloc>
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}

08007698 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80076a2:	2040      	movs	r0, #64	; 0x40
 80076a4:	f7ff ff46 	bl	8007534 <tcp_alloc>
 80076a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	611a      	str	r2, [r3, #16]
  }
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d013      	beq.n	8007710 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7d1b      	ldrb	r3, [r3, #20]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10b      	bne.n	8007708 <tcp_recv+0x30>
 80076f0:	4b09      	ldr	r3, [pc, #36]	; (8007718 <tcp_recv+0x40>)
 80076f2:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80076f6:	4909      	ldr	r1, [pc, #36]	; (800771c <tcp_recv+0x44>)
 80076f8:	4809      	ldr	r0, [pc, #36]	; (8007720 <tcp_recv+0x48>)
 80076fa:	f00b fc75 	bl	8012fe8 <iprintf>
 80076fe:	2000      	movs	r0, #0
 8007700:	f00b fd74 	bl	80131ec <fflush>
 8007704:	f00b fcb9 	bl	801307a <abort>
    pcb->recv = recv;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	08015814 	.word	0x08015814
 800771c:	08015d9c 	.word	0x08015d9c
 8007720:	08015848 	.word	0x08015848

08007724 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7d1b      	ldrb	r3, [r3, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d10b      	bne.n	8007754 <tcp_sent+0x30>
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <tcp_sent+0x40>)
 800773e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8007742:	4909      	ldr	r1, [pc, #36]	; (8007768 <tcp_sent+0x44>)
 8007744:	4809      	ldr	r0, [pc, #36]	; (800776c <tcp_sent+0x48>)
 8007746:	f00b fc4f 	bl	8012fe8 <iprintf>
 800774a:	2000      	movs	r0, #0
 800774c:	f00b fd4e 	bl	80131ec <fflush>
 8007750:	f00b fc93 	bl	801307a <abort>
    pcb->sent = sent;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	08015814 	.word	0x08015814
 8007768:	08015dc4 	.word	0x08015dc4
 800776c:	08015848 	.word	0x08015848

08007770 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d013      	beq.n	80077a8 <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7d1b      	ldrb	r3, [r3, #20]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10b      	bne.n	80077a0 <tcp_err+0x30>
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <tcp_err+0x40>)
 800778a:	f640 0216 	movw	r2, #2070	; 0x816
 800778e:	4909      	ldr	r1, [pc, #36]	; (80077b4 <tcp_err+0x44>)
 8007790:	4809      	ldr	r0, [pc, #36]	; (80077b8 <tcp_err+0x48>)
 8007792:	f00b fc29 	bl	8012fe8 <iprintf>
 8007796:	2000      	movs	r0, #0
 8007798:	f00b fd28 	bl	80131ec <fflush>
 800779c:	f00b fc6d 	bl	801307a <abort>
    pcb->errf = err;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	08015814 	.word	0x08015814
 80077b4:	08015dec 	.word	0x08015dec
 80077b8:	08015848 	.word	0x08015848

080077bc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d107      	bne.n	80077e0 <tcp_poll+0x24>
 80077d0:	4b10      	ldr	r3, [pc, #64]	; (8007814 <tcp_poll+0x58>)
 80077d2:	f640 0247 	movw	r2, #2119	; 0x847
 80077d6:	4910      	ldr	r1, [pc, #64]	; (8007818 <tcp_poll+0x5c>)
 80077d8:	4810      	ldr	r0, [pc, #64]	; (800781c <tcp_poll+0x60>)
 80077da:	f7f9 fd5c 	bl	8001296 <lwip_win32_platform_diag>
 80077de:	e016      	b.n	800780e <tcp_poll+0x52>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10b      	bne.n	8007800 <tcp_poll+0x44>
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <tcp_poll+0x58>)
 80077ea:	f640 0248 	movw	r2, #2120	; 0x848
 80077ee:	490c      	ldr	r1, [pc, #48]	; (8007820 <tcp_poll+0x64>)
 80077f0:	480a      	ldr	r0, [pc, #40]	; (800781c <tcp_poll+0x60>)
 80077f2:	f00b fbf9 	bl	8012fe8 <iprintf>
 80077f6:	2000      	movs	r0, #0
 80077f8:	f00b fcf8 	bl	80131ec <fflush>
 80077fc:	f00b fc3d 	bl	801307a <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	79fa      	ldrb	r2, [r7, #7]
 800780c:	775a      	strb	r2, [r3, #29]
}
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	08015814 	.word	0x08015814
 8007818:	08015e14 	.word	0x08015e14
 800781c:	08015848 	.word	0x08015848
 8007820:	08015e2c 	.word	0x08015e2c

08007824 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d107      	bne.n	8007842 <tcp_pcb_purge+0x1e>
 8007832:	4b21      	ldr	r3, [pc, #132]	; (80078b8 <tcp_pcb_purge+0x94>)
 8007834:	f640 025b 	movw	r2, #2139	; 0x85b
 8007838:	4920      	ldr	r1, [pc, #128]	; (80078bc <tcp_pcb_purge+0x98>)
 800783a:	4821      	ldr	r0, [pc, #132]	; (80078c0 <tcp_pcb_purge+0x9c>)
 800783c:	f7f9 fd2b 	bl	8001296 <lwip_win32_platform_diag>
 8007840:	e037      	b.n	80078b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7d1b      	ldrb	r3, [r3, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d033      	beq.n	80078b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800784e:	2b0a      	cmp	r3, #10
 8007850:	d02f      	beq.n	80078b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007856:	2b01      	cmp	r3, #1
 8007858:	d02b      	beq.n	80078b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd fea0 	bl	80055ac <pbuf_free>
      pcb->refused_data = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9ac 	bl	8007bd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007886:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fcc9 	bl	8007224 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fcc4 	bl	8007224 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	08015814 	.word	0x08015814
 80078bc:	08015e4c 	.word	0x08015e4c
 80078c0:	08015848 	.word	0x08015848

080078c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <tcp_pcb_remove+0x28>
 80078d4:	4b4a      	ldr	r3, [pc, #296]	; (8007a00 <tcp_pcb_remove+0x13c>)
 80078d6:	f640 028d 	movw	r2, #2189	; 0x88d
 80078da:	494a      	ldr	r1, [pc, #296]	; (8007a04 <tcp_pcb_remove+0x140>)
 80078dc:	484a      	ldr	r0, [pc, #296]	; (8007a08 <tcp_pcb_remove+0x144>)
 80078de:	f00b fb83 	bl	8012fe8 <iprintf>
 80078e2:	2000      	movs	r0, #0
 80078e4:	f00b fc82 	bl	80131ec <fflush>
 80078e8:	f00b fbc7 	bl	801307a <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <tcp_pcb_remove+0x46>
 80078f2:	4b43      	ldr	r3, [pc, #268]	; (8007a00 <tcp_pcb_remove+0x13c>)
 80078f4:	f640 028e 	movw	r2, #2190	; 0x88e
 80078f8:	4944      	ldr	r1, [pc, #272]	; (8007a0c <tcp_pcb_remove+0x148>)
 80078fa:	4843      	ldr	r0, [pc, #268]	; (8007a08 <tcp_pcb_remove+0x144>)
 80078fc:	f00b fb74 	bl	8012fe8 <iprintf>
 8007900:	2000      	movs	r0, #0
 8007902:	f00b fc73 	bl	80131ec <fflush>
 8007906:	f00b fbb8 	bl	801307a <abort>

  TCP_RMV(pcblist, pcb);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d105      	bne.n	8007920 <tcp_pcb_remove+0x5c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e013      	b.n	8007948 <tcp_pcb_remove+0x84>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	e00c      	b.n	8007942 <tcp_pcb_remove+0x7e>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d104      	bne.n	800793c <tcp_pcb_remove+0x78>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60da      	str	r2, [r3, #12]
 800793a:	e005      	b.n	8007948 <tcp_pcb_remove+0x84>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1ef      	bne.n	8007928 <tcp_pcb_remove+0x64>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800794e:	6838      	ldr	r0, [r7, #0]
 8007950:	f7ff ff68 	bl	8007824 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	7d1b      	ldrb	r3, [r3, #20]
 8007958:	2b0a      	cmp	r3, #10
 800795a:	d013      	beq.n	8007984 <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007960:	2b01      	cmp	r3, #1
 8007962:	d00f      	beq.n	8007984 <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	8b5b      	ldrh	r3, [r3, #26]
 8007968:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	8b5b      	ldrh	r3, [r3, #26]
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	b29a      	uxth	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f003 fe3a 	bl	800b5f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	7d1b      	ldrb	r3, [r3, #20]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d02f      	beq.n	80079ec <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <tcp_pcb_remove+0xe8>
 8007994:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <tcp_pcb_remove+0x13c>)
 8007996:	f640 029d 	movw	r2, #2205	; 0x89d
 800799a:	491d      	ldr	r1, [pc, #116]	; (8007a10 <tcp_pcb_remove+0x14c>)
 800799c:	481a      	ldr	r0, [pc, #104]	; (8007a08 <tcp_pcb_remove+0x144>)
 800799e:	f00b fb23 	bl	8012fe8 <iprintf>
 80079a2:	2000      	movs	r0, #0
 80079a4:	f00b fc22 	bl	80131ec <fflush>
 80079a8:	f00b fb67 	bl	801307a <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <tcp_pcb_remove+0x108>
 80079b4:	4b12      	ldr	r3, [pc, #72]	; (8007a00 <tcp_pcb_remove+0x13c>)
 80079b6:	f640 029e 	movw	r2, #2206	; 0x89e
 80079ba:	4916      	ldr	r1, [pc, #88]	; (8007a14 <tcp_pcb_remove+0x150>)
 80079bc:	4812      	ldr	r0, [pc, #72]	; (8007a08 <tcp_pcb_remove+0x144>)
 80079be:	f00b fb13 	bl	8012fe8 <iprintf>
 80079c2:	2000      	movs	r0, #0
 80079c4:	f00b fc12 	bl	80131ec <fflush>
 80079c8:	f00b fb57 	bl	801307a <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <tcp_pcb_remove+0x128>
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <tcp_pcb_remove+0x13c>)
 80079d6:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 80079da:	490f      	ldr	r1, [pc, #60]	; (8007a18 <tcp_pcb_remove+0x154>)
 80079dc:	480a      	ldr	r0, [pc, #40]	; (8007a08 <tcp_pcb_remove+0x144>)
 80079de:	f00b fb03 	bl	8012fe8 <iprintf>
 80079e2:	2000      	movs	r0, #0
 80079e4:	f00b fc02 	bl	80131ec <fflush>
 80079e8:	f00b fb47 	bl	801307a <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	08015814 	.word	0x08015814
 8007a04:	08015e68 	.word	0x08015e68
 8007a08:	08015848 	.word	0x08015848
 8007a0c:	08015e84 	.word	0x08015e84
 8007a10:	08015ea4 	.word	0x08015ea4
 8007a14:	08015ebc 	.word	0x08015ebc
 8007a18:	08015ed8 	.word	0x08015ed8

08007a1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <tcp_next_iss+0x26>
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <tcp_next_iss+0x40>)
 8007a2c:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8007a30:	490b      	ldr	r1, [pc, #44]	; (8007a60 <tcp_next_iss+0x44>)
 8007a32:	480c      	ldr	r0, [pc, #48]	; (8007a64 <tcp_next_iss+0x48>)
 8007a34:	f00b fad8 	bl	8012fe8 <iprintf>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f00b fbd7 	bl	80131ec <fflush>
 8007a3e:	f00b fb1c 	bl	801307a <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <tcp_next_iss+0x4c>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <tcp_next_iss+0x50>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	4a06      	ldr	r2, [pc, #24]	; (8007a68 <tcp_next_iss+0x4c>)
 8007a4e:	6013      	str	r3, [r2, #0]
  return iss;
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <tcp_next_iss+0x4c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08015814 	.word	0x08015814
 8007a60:	08015ef0 	.word	0x08015ef0
 8007a64:	08015848 	.word	0x08015848
 8007a68:	2000000c 	.word	0x2000000c
 8007a6c:	20002210 	.word	0x20002210

08007a70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <tcp_eff_send_mss_netif+0x2c>
 8007a84:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <tcp_eff_send_mss_netif+0x74>)
 8007a86:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8007a8a:	4917      	ldr	r1, [pc, #92]	; (8007ae8 <tcp_eff_send_mss_netif+0x78>)
 8007a8c:	4817      	ldr	r0, [pc, #92]	; (8007aec <tcp_eff_send_mss_netif+0x7c>)
 8007a8e:	f00b faab 	bl	8012fe8 <iprintf>
 8007a92:	2000      	movs	r0, #0
 8007a94:	f00b fbaa 	bl	80131ec <fflush>
 8007a98:	f00b faef 	bl	801307a <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8007aa2:	89fb      	ldrh	r3, [r7, #14]
 8007aa4:	e019      	b.n	8007ada <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	8c1b      	ldrh	r3, [r3, #32]
 8007aaa:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007aac:	8afb      	ldrh	r3, [r7, #22]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d012      	beq.n	8007ad8 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007ab2:	2328      	movs	r3, #40	; 0x28
 8007ab4:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007ab6:	8afa      	ldrh	r2, [r7, #22]
 8007ab8:	8abb      	ldrh	r3, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d904      	bls.n	8007ac8 <tcp_eff_send_mss_netif+0x58>
 8007abe:	8afa      	ldrh	r2, [r7, #22]
 8007ac0:	8abb      	ldrh	r3, [r7, #20]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	e000      	b.n	8007aca <tcp_eff_send_mss_netif+0x5a>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007acc:	8a7a      	ldrh	r2, [r7, #18]
 8007ace:	89fb      	ldrh	r3, [r7, #14]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	bf28      	it	cs
 8007ad4:	4613      	movcs	r3, r2
 8007ad6:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08015814 	.word	0x08015814
 8007ae8:	08015f0c 	.word	0x08015f0c
 8007aec:	08015848 	.word	0x08015848

08007af0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11d      	bne.n	8007b40 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8007b04:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b06:	f640 120a 	movw	r2, #2314	; 0x90a
 8007b0a:	4912      	ldr	r1, [pc, #72]	; (8007b54 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8007b0c:	4812      	ldr	r0, [pc, #72]	; (8007b58 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8007b0e:	f00b fa6b 	bl	8012fe8 <iprintf>
 8007b12:	2000      	movs	r0, #0
 8007b14:	f00b fb6a 	bl	80131ec <fflush>
 8007b18:	f00b faaf 	bl	801307a <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d108      	bne.n	8007b3a <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7fe fc66 	bl	8006400 <tcp_abort>
      pcb = next;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e002      	b.n	8007b40 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ea      	bne.n	8007b1c <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	08015814 	.word	0x08015814
 8007b54:	08015f34 	.word	0x08015f34
 8007b58:	08015848 	.word	0x08015848

08007b5c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d02a      	beq.n	8007bc2 <tcp_netif_ip_addr_changed+0x66>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d026      	beq.n	8007bc2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007b74:	4b15      	ldr	r3, [pc, #84]	; (8007bcc <tcp_netif_ip_addr_changed+0x70>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff ffb8 	bl	8007af0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007b80:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <tcp_netif_ip_addr_changed+0x74>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff ffb2 	bl	8007af0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d017      	beq.n	8007bc2 <tcp_netif_ip_addr_changed+0x66>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d013      	beq.n	8007bc2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <tcp_netif_ip_addr_changed+0x78>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	e00c      	b.n	8007bbc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d103      	bne.n	8007bb6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1ef      	bne.n	8007ba2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	2000220c 	.word	0x2000220c
 8007bd0:	20002218 	.word	0x20002218
 8007bd4:	20002214 	.word	0x20002214

08007bd8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fb19 	bl	8007224 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b08d      	sub	sp, #52	; 0x34
 8007c04:	af04      	add	r7, sp, #16
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <tcp_input+0x26>
 8007c10:	4b7b      	ldr	r3, [pc, #492]	; (8007e00 <tcp_input+0x200>)
 8007c12:	2283      	movs	r2, #131	; 0x83
 8007c14:	497b      	ldr	r1, [pc, #492]	; (8007e04 <tcp_input+0x204>)
 8007c16:	487c      	ldr	r0, [pc, #496]	; (8007e08 <tcp_input+0x208>)
 8007c18:	f00b f9e6 	bl	8012fe8 <iprintf>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f00b fae5 	bl	80131ec <fflush>
 8007c22:	f00b fa2a 	bl	801307a <abort>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8007c26:	4b79      	ldr	r3, [pc, #484]	; (8007e0c <tcp_input+0x20c>)
 8007c28:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	4b76      	ldr	r3, [pc, #472]	; (8007e0c <tcp_input+0x20c>)
 8007c32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4a75      	ldr	r2, [pc, #468]	; (8007e10 <tcp_input+0x210>)
 8007c3c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	895b      	ldrh	r3, [r3, #10]
 8007c42:	2b13      	cmp	r3, #19
 8007c44:	d809      	bhi.n	8007c5a <tcp_input+0x5a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8007c46:	4b71      	ldr	r3, [pc, #452]	; (8007e0c <tcp_input+0x20c>)
 8007c48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	4b6e      	ldr	r3, [pc, #440]	; (8007e0c <tcp_input+0x20c>)
 8007c52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 8007c56:	f000 bc6a 	b.w	800852e <tcp_input+0x92e>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c5a:	4b6e      	ldr	r3, [pc, #440]	; (8007e14 <tcp_input+0x214>)
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	4b6d      	ldr	r3, [pc, #436]	; (8007e14 <tcp_input+0x214>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fc f841 	bl	8003cec <ip4_addr_isbroadcast_u32>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c70:	4b68      	ldr	r3, [pc, #416]	; (8007e14 <tcp_input+0x214>)
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c78:	2be0      	cmp	r3, #224	; 0xe0
 8007c7a:	d109      	bne.n	8007c90 <tcp_input+0x90>
    TCP_STATS_INC(tcp.proterr);
 8007c7c:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <tcp_input+0x20c>)
 8007c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c82:	3301      	adds	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	4b61      	ldr	r3, [pc, #388]	; (8007e0c <tcp_input+0x20c>)
 8007c88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    goto dropped;
 8007c8c:	f000 bc4f 	b.w	800852e <tcp_input+0x92e>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	891a      	ldrh	r2, [r3, #8]
 8007c94:	4b60      	ldr	r3, [pc, #384]	; (8007e18 <tcp_input+0x218>)
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4b60      	ldr	r3, [pc, #384]	; (8007e1c <tcp_input+0x21c>)
 8007c9a:	2106      	movs	r1, #6
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fb fca5 	bl	80035ec <ip_chksum_pseudo>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8007ca6:	8a3b      	ldrh	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <tcp_input+0xc0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8007cac:	4b57      	ldr	r3, [pc, #348]	; (8007e0c <tcp_input+0x20c>)
 8007cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <tcp_input+0x20c>)
 8007cb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      goto dropped;
 8007cbc:	f000 bc37 	b.w	800852e <tcp_input+0x92e>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <tcp_input+0x210>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	899b      	ldrh	r3, [r3, #12]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fb fb5d 	bl	8003388 <lwip_htons>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	0b1b      	lsrs	r3, r3, #12
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b13      	cmp	r3, #19
 8007cde:	d905      	bls.n	8007cec <tcp_input+0xec>
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	891b      	ldrh	r3, [r3, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d909      	bls.n	8007d00 <tcp_input+0x100>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8007cec:	4b47      	ldr	r3, [pc, #284]	; (8007e0c <tcp_input+0x20c>)
 8007cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	4b45      	ldr	r3, [pc, #276]	; (8007e0c <tcp_input+0x20c>)
 8007cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 8007cfc:	f000 bc17 	b.w	800852e <tcp_input+0x92e>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b14      	subs	r3, #20
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <tcp_input+0x220>)
 8007d0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007d0c:	4b45      	ldr	r3, [pc, #276]	; (8007e24 <tcp_input+0x224>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	895a      	ldrh	r2, [r3, #10]
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d309      	bcc.n	8007d32 <tcp_input+0x132>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007d1e:	4b40      	ldr	r3, [pc, #256]	; (8007e20 <tcp_input+0x220>)
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	4b41      	ldr	r3, [pc, #260]	; (8007e28 <tcp_input+0x228>)
 8007d24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fd fbe8 	bl	8005500 <pbuf_remove_header>
 8007d30:	e082      	b.n	8007e38 <tcp_input+0x238>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <tcp_input+0x150>
 8007d3a:	4b31      	ldr	r3, [pc, #196]	; (8007e00 <tcp_input+0x200>)
 8007d3c:	22c2      	movs	r2, #194	; 0xc2
 8007d3e:	493b      	ldr	r1, [pc, #236]	; (8007e2c <tcp_input+0x22c>)
 8007d40:	4831      	ldr	r0, [pc, #196]	; (8007e08 <tcp_input+0x208>)
 8007d42:	f00b f951 	bl	8012fe8 <iprintf>
 8007d46:	2000      	movs	r0, #0
 8007d48:	f00b fa50 	bl	80131ec <fflush>
 8007d4c:	f00b f995 	bl	801307a <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007d50:	2114      	movs	r1, #20
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fd fbd4 	bl	8005500 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	895a      	ldrh	r2, [r3, #10]
 8007d5c:	4b32      	ldr	r3, [pc, #200]	; (8007e28 <tcp_input+0x228>)
 8007d5e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007d60:	4b2f      	ldr	r3, [pc, #188]	; (8007e20 <tcp_input+0x220>)
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <tcp_input+0x228>)
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007d6c:	4b2e      	ldr	r3, [pc, #184]	; (8007e28 <tcp_input+0x228>)
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fd fbc4 	bl	8005500 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	895b      	ldrh	r3, [r3, #10]
 8007d7e:	89ba      	ldrh	r2, [r7, #12]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d908      	bls.n	8007d96 <tcp_input+0x196>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8007d84:	4b21      	ldr	r3, [pc, #132]	; (8007e0c <tcp_input+0x20c>)
 8007d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	4b1f      	ldr	r3, [pc, #124]	; (8007e0c <tcp_input+0x20c>)
 8007d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8007d94:	e3cb      	b.n	800852e <tcp_input+0x92e>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <tcp_input+0x224>)
 8007d9e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	89ba      	ldrh	r2, [r7, #12]
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd fba9 	bl	8005500 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	891a      	ldrh	r2, [r3, #8]
 8007db2:	89bb      	ldrh	r3, [r7, #12]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	895b      	ldrh	r3, [r3, #10]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <tcp_input+0x1da>
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <tcp_input+0x200>)
 8007dc6:	22df      	movs	r2, #223	; 0xdf
 8007dc8:	4919      	ldr	r1, [pc, #100]	; (8007e30 <tcp_input+0x230>)
 8007dca:	480f      	ldr	r0, [pc, #60]	; (8007e08 <tcp_input+0x208>)
 8007dcc:	f00b f90c 	bl	8012fe8 <iprintf>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f00b fa0b 	bl	80131ec <fflush>
 8007dd6:	f00b f950 	bl	801307a <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	891a      	ldrh	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	891b      	ldrh	r3, [r3, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d027      	beq.n	8007e38 <tcp_input+0x238>
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <tcp_input+0x200>)
 8007dea:	22e0      	movs	r2, #224	; 0xe0
 8007dec:	4911      	ldr	r1, [pc, #68]	; (8007e34 <tcp_input+0x234>)
 8007dee:	4806      	ldr	r0, [pc, #24]	; (8007e08 <tcp_input+0x208>)
 8007df0:	f00b f8fa 	bl	8012fe8 <iprintf>
 8007df4:	2000      	movs	r0, #0
 8007df6:	f00b f9f9 	bl	80131ec <fflush>
 8007dfa:	f00b f93e 	bl	801307a <abort>
 8007dfe:	bf00      	nop
 8007e00:	08015f68 	.word	0x08015f68
 8007e04:	08015f8c 	.word	0x08015f8c
 8007e08:	08015fa4 	.word	0x08015fa4
 8007e0c:	20002164 	.word	0x20002164
 8007e10:	2000065c 	.word	0x2000065c
 8007e14:	200007c8 	.word	0x200007c8
 8007e18:	200007dc 	.word	0x200007dc
 8007e1c:	200007d8 	.word	0x200007d8
 8007e20:	20000660 	.word	0x20000660
 8007e24:	20000664 	.word	0x20000664
 8007e28:	20000662 	.word	0x20000662
 8007e2c:	08015fcc 	.word	0x08015fcc
 8007e30:	08015fdc 	.word	0x08015fdc
 8007e34:	08015fe8 	.word	0x08015fe8
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007e38:	4b91      	ldr	r3, [pc, #580]	; (8008080 <tcp_input+0x480>)
 8007e3a:	681c      	ldr	r4, [r3, #0]
 8007e3c:	4b90      	ldr	r3, [pc, #576]	; (8008080 <tcp_input+0x480>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fb fa9f 	bl	8003388 <lwip_htons>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007e4e:	4b8c      	ldr	r3, [pc, #560]	; (8008080 <tcp_input+0x480>)
 8007e50:	681c      	ldr	r4, [r3, #0]
 8007e52:	4b8b      	ldr	r3, [pc, #556]	; (8008080 <tcp_input+0x480>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	885b      	ldrh	r3, [r3, #2]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fb fa94 	bl	8003388 <lwip_htons>
 8007e60:	4603      	mov	r3, r0
 8007e62:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007e64:	4b86      	ldr	r3, [pc, #536]	; (8008080 <tcp_input+0x480>)
 8007e66:	681c      	ldr	r4, [r3, #0]
 8007e68:	4b85      	ldr	r3, [pc, #532]	; (8008080 <tcp_input+0x480>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fb fa9f 	bl	80033b2 <lwip_htonl>
 8007e74:	4603      	mov	r3, r0
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	4a82      	ldr	r2, [pc, #520]	; (8008084 <tcp_input+0x484>)
 8007e7c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007e7e:	4b80      	ldr	r3, [pc, #512]	; (8008080 <tcp_input+0x480>)
 8007e80:	681c      	ldr	r4, [r3, #0]
 8007e82:	4b7f      	ldr	r3, [pc, #508]	; (8008080 <tcp_input+0x480>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fb fa92 	bl	80033b2 <lwip_htonl>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	4a7c      	ldr	r2, [pc, #496]	; (8008088 <tcp_input+0x488>)
 8007e96:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007e98:	4b79      	ldr	r3, [pc, #484]	; (8008080 <tcp_input+0x480>)
 8007e9a:	681c      	ldr	r4, [r3, #0]
 8007e9c:	4b78      	ldr	r3, [pc, #480]	; (8008080 <tcp_input+0x480>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	89db      	ldrh	r3, [r3, #14]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fb fa6f 	bl	8003388 <lwip_htons>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007eae:	4b74      	ldr	r3, [pc, #464]	; (8008080 <tcp_input+0x480>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	899b      	ldrh	r3, [r3, #12]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fb fa66 	bl	8003388 <lwip_htons>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	4b71      	ldr	r3, [pc, #452]	; (800808c <tcp_input+0x48c>)
 8007ec8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	891a      	ldrh	r2, [r3, #8]
 8007ece:	4b70      	ldr	r3, [pc, #448]	; (8008090 <tcp_input+0x490>)
 8007ed0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007ed2:	4b6e      	ldr	r3, [pc, #440]	; (800808c <tcp_input+0x48c>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <tcp_input+0x308>
    tcplen++;
 8007ede:	4b6c      	ldr	r3, [pc, #432]	; (8008090 <tcp_input+0x490>)
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	4b6a      	ldr	r3, [pc, #424]	; (8008090 <tcp_input+0x490>)
 8007ee8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	891a      	ldrh	r2, [r3, #8]
 8007eee:	4b68      	ldr	r3, [pc, #416]	; (8008090 <tcp_input+0x490>)
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d908      	bls.n	8007f08 <tcp_input+0x308>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8007ef6:	4b67      	ldr	r3, [pc, #412]	; (8008094 <tcp_input+0x494>)
 8007ef8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007efc:	3301      	adds	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	4b64      	ldr	r3, [pc, #400]	; (8008094 <tcp_input+0x494>)
 8007f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8007f06:	e312      	b.n	800852e <tcp_input+0x92e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f0c:	4b62      	ldr	r3, [pc, #392]	; (8008098 <tcp_input+0x498>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	e097      	b.n	8008044 <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <tcp_input+0x332>
 8007f1c:	4b5f      	ldr	r3, [pc, #380]	; (800809c <tcp_input+0x49c>)
 8007f1e:	22fb      	movs	r2, #251	; 0xfb
 8007f20:	495f      	ldr	r1, [pc, #380]	; (80080a0 <tcp_input+0x4a0>)
 8007f22:	4860      	ldr	r0, [pc, #384]	; (80080a4 <tcp_input+0x4a4>)
 8007f24:	f00b f860 	bl	8012fe8 <iprintf>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f00b f95f 	bl	80131ec <fflush>
 8007f2e:	f00b f8a4 	bl	801307a <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	7d1b      	ldrb	r3, [r3, #20]
 8007f36:	2b0a      	cmp	r3, #10
 8007f38:	d10a      	bne.n	8007f50 <tcp_input+0x350>
 8007f3a:	4b58      	ldr	r3, [pc, #352]	; (800809c <tcp_input+0x49c>)
 8007f3c:	22fc      	movs	r2, #252	; 0xfc
 8007f3e:	495a      	ldr	r1, [pc, #360]	; (80080a8 <tcp_input+0x4a8>)
 8007f40:	4858      	ldr	r0, [pc, #352]	; (80080a4 <tcp_input+0x4a4>)
 8007f42:	f00b f851 	bl	8012fe8 <iprintf>
 8007f46:	2000      	movs	r0, #0
 8007f48:	f00b f950 	bl	80131ec <fflush>
 8007f4c:	f00b f895 	bl	801307a <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	7d1b      	ldrb	r3, [r3, #20]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d10a      	bne.n	8007f6e <tcp_input+0x36e>
 8007f58:	4b50      	ldr	r3, [pc, #320]	; (800809c <tcp_input+0x49c>)
 8007f5a:	22fd      	movs	r2, #253	; 0xfd
 8007f5c:	4953      	ldr	r1, [pc, #332]	; (80080ac <tcp_input+0x4ac>)
 8007f5e:	4851      	ldr	r0, [pc, #324]	; (80080a4 <tcp_input+0x4a4>)
 8007f60:	f00b f842 	bl	8012fe8 <iprintf>
 8007f64:	2000      	movs	r0, #0
 8007f66:	f00b f941 	bl	80131ec <fflush>
 8007f6a:	f00b f886 	bl	801307a <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	7a1b      	ldrb	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <tcp_input+0x390>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	7a1a      	ldrb	r2, [r3, #8]
 8007f7a:	4b4d      	ldr	r3, [pc, #308]	; (80080b0 <tcp_input+0x4b0>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d002      	beq.n	8007f90 <tcp_input+0x390>
      prev = pcb;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	61bb      	str	r3, [r7, #24]
      continue;
 8007f8e:	e056      	b.n	800803e <tcp_input+0x43e>
    }

    if (pcb->remote_port == tcphdr->src &&
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	8b1a      	ldrh	r2, [r3, #24]
 8007f94:	4b3a      	ldr	r3, [pc, #232]	; (8008080 <tcp_input+0x480>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d14c      	bne.n	800803a <tcp_input+0x43a>
        pcb->local_port == tcphdr->dest &&
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	8ada      	ldrh	r2, [r3, #22]
 8007fa4:	4b36      	ldr	r3, [pc, #216]	; (8008080 <tcp_input+0x480>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d144      	bne.n	800803a <tcp_input+0x43a>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	4b3e      	ldr	r3, [pc, #248]	; (80080b0 <tcp_input+0x4b0>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d13e      	bne.n	800803a <tcp_input+0x43a>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	4b3b      	ldr	r3, [pc, #236]	; (80080b0 <tcp_input+0x4b0>)
 8007fc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d138      	bne.n	800803a <tcp_input+0x43a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d10b      	bne.n	8007fea <tcp_input+0x3ea>
 8007fd2:	4b32      	ldr	r3, [pc, #200]	; (800809c <tcp_input+0x49c>)
 8007fd4:	f240 120d 	movw	r2, #269	; 0x10d
 8007fd8:	4936      	ldr	r1, [pc, #216]	; (80080b4 <tcp_input+0x4b4>)
 8007fda:	4832      	ldr	r0, [pc, #200]	; (80080a4 <tcp_input+0x4a4>)
 8007fdc:	f00b f804 	bl	8012fe8 <iprintf>
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f00b f903 	bl	80131ec <fflush>
 8007fe6:	f00b f848 	bl	801307a <abort>
      if (prev != NULL) {
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <tcp_input+0x408>
        prev->next = pcb->next;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007ff8:	4b27      	ldr	r3, [pc, #156]	; (8008098 <tcp_input+0x498>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008000:	4a25      	ldr	r2, [pc, #148]	; (8008098 <tcp_input+0x498>)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e007      	b.n	8008018 <tcp_input+0x418>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008008:	4b22      	ldr	r3, [pc, #136]	; (8008094 <tcp_input+0x494>)
 800800a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800800e:	3301      	adds	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	4b20      	ldr	r3, [pc, #128]	; (8008094 <tcp_input+0x494>)
 8008014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	429a      	cmp	r2, r3
 8008020:	d115      	bne.n	800804e <tcp_input+0x44e>
 8008022:	4b1e      	ldr	r3, [pc, #120]	; (800809c <tcp_input+0x49c>)
 8008024:	f240 1215 	movw	r2, #277	; 0x115
 8008028:	4923      	ldr	r1, [pc, #140]	; (80080b8 <tcp_input+0x4b8>)
 800802a:	481e      	ldr	r0, [pc, #120]	; (80080a4 <tcp_input+0x4a4>)
 800802c:	f00a ffdc 	bl	8012fe8 <iprintf>
 8008030:	2000      	movs	r0, #0
 8008032:	f00b f8db 	bl	80131ec <fflush>
 8008036:	f00b f820 	bl	801307a <abort>
      break;
    }
    prev = pcb;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f47f af64 	bne.w	8007f14 <tcp_input+0x314>
 800804c:	e000      	b.n	8008050 <tcp_input+0x450>
      break;
 800804e:	bf00      	nop
  }

  if (pcb == NULL) {
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 80c5 	bne.w	80081e2 <tcp_input+0x5e2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008058:	4b18      	ldr	r3, [pc, #96]	; (80080bc <tcp_input+0x4bc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	e066      	b.n	800812e <tcp_input+0x52e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	7d1b      	ldrb	r3, [r3, #20]
 8008064:	2b0a      	cmp	r3, #10
 8008066:	d02d      	beq.n	80080c4 <tcp_input+0x4c4>
 8008068:	4b0c      	ldr	r3, [pc, #48]	; (800809c <tcp_input+0x49c>)
 800806a:	f240 121f 	movw	r2, #287	; 0x11f
 800806e:	4914      	ldr	r1, [pc, #80]	; (80080c0 <tcp_input+0x4c0>)
 8008070:	480c      	ldr	r0, [pc, #48]	; (80080a4 <tcp_input+0x4a4>)
 8008072:	f00a ffb9 	bl	8012fe8 <iprintf>
 8008076:	2000      	movs	r0, #0
 8008078:	f00b f8b8 	bl	80131ec <fflush>
 800807c:	f00a fffd 	bl	801307a <abort>
 8008080:	2000065c 	.word	0x2000065c
 8008084:	2000066c 	.word	0x2000066c
 8008088:	20000670 	.word	0x20000670
 800808c:	20000678 	.word	0x20000678
 8008090:	20000676 	.word	0x20000676
 8008094:	20002164 	.word	0x20002164
 8008098:	2000220c 	.word	0x2000220c
 800809c:	08015f68 	.word	0x08015f68
 80080a0:	08016008 	.word	0x08016008
 80080a4:	08015fa4 	.word	0x08015fa4
 80080a8:	08016030 	.word	0x08016030
 80080ac:	0801605c 	.word	0x0801605c
 80080b0:	200007c8 	.word	0x200007c8
 80080b4:	08016084 	.word	0x08016084
 80080b8:	080160b0 	.word	0x080160b0
 80080bc:	2000221c 	.word	0x2000221c
 80080c0:	080160dc 	.word	0x080160dc

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	7a1b      	ldrb	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <tcp_input+0x4e0>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	7a1a      	ldrb	r2, [r3, #8]
 80080d0:	4b9e      	ldr	r3, [pc, #632]	; (800834c <tcp_input+0x74c>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080d8:	3301      	adds	r3, #1
 80080da:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080dc:	429a      	cmp	r2, r3
 80080de:	d122      	bne.n	8008126 <tcp_input+0x526>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	8b1a      	ldrh	r2, [r3, #24]
 80080e4:	4b9a      	ldr	r3, [pc, #616]	; (8008350 <tcp_input+0x750>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d11b      	bne.n	8008128 <tcp_input+0x528>
          pcb->local_port == tcphdr->dest &&
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	8ada      	ldrh	r2, [r3, #22]
 80080f4:	4b96      	ldr	r3, [pc, #600]	; (8008350 <tcp_input+0x750>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d113      	bne.n	8008128 <tcp_input+0x528>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4b91      	ldr	r3, [pc, #580]	; (800834c <tcp_input+0x74c>)
 8008106:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008108:	429a      	cmp	r2, r3
 800810a:	d10d      	bne.n	8008128 <tcp_input+0x528>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	4b8e      	ldr	r3, [pc, #568]	; (800834c <tcp_input+0x74c>)
 8008112:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008114:	429a      	cmp	r2, r3
 8008116:	d107      	bne.n	8008128 <tcp_input+0x528>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008118:	69f8      	ldr	r0, [r7, #28]
 800811a:	f000 fb85 	bl	8008828 <tcp_timewait_input>
        }
        pbuf_free(p);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fd fa44 	bl	80055ac <pbuf_free>
        return;
 8008124:	e210      	b.n	8008548 <tcp_input+0x948>
        continue;
 8008126:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d195      	bne.n	8008060 <tcp_input+0x460>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008138:	4b86      	ldr	r3, [pc, #536]	; (8008354 <tcp_input+0x754>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	e02a      	b.n	8008196 <tcp_input+0x596>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	7a1b      	ldrb	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <tcp_input+0x562>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	7a1a      	ldrb	r2, [r3, #8]
 800814c:	4b7f      	ldr	r3, [pc, #508]	; (800834c <tcp_input+0x74c>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008154:	3301      	adds	r3, #1
 8008156:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008158:	429a      	cmp	r2, r3
 800815a:	d002      	beq.n	8008162 <tcp_input+0x562>
        prev = (struct tcp_pcb *)lpcb;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	61bb      	str	r3, [r7, #24]
        continue;
 8008160:	e016      	b.n	8008190 <tcp_input+0x590>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	8ada      	ldrh	r2, [r3, #22]
 8008166:	4b7a      	ldr	r3, [pc, #488]	; (8008350 <tcp_input+0x750>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	885b      	ldrh	r3, [r3, #2]
 800816c:	b29b      	uxth	r3, r3
 800816e:	429a      	cmp	r2, r3
 8008170:	d10c      	bne.n	800818c <tcp_input+0x58c>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b75      	ldr	r3, [pc, #468]	; (800834c <tcp_input+0x74c>)
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	d00f      	beq.n	800819e <tcp_input+0x59e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00d      	beq.n	80081a0 <tcp_input+0x5a0>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <tcp_input+0x5a0>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	617b      	str	r3, [r7, #20]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1d1      	bne.n	8008140 <tcp_input+0x540>
 800819c:	e000      	b.n	80081a0 <tcp_input+0x5a0>
            break;
 800819e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01d      	beq.n	80081e2 <tcp_input+0x5e2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <tcp_input+0x5c4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80081b4:	4b67      	ldr	r3, [pc, #412]	; (8008354 <tcp_input+0x754>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80081bc:	4a65      	ldr	r2, [pc, #404]	; (8008354 <tcp_input+0x754>)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	e007      	b.n	80081d4 <tcp_input+0x5d4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80081c4:	4b64      	ldr	r3, [pc, #400]	; (8008358 <tcp_input+0x758>)
 80081c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ca:	3301      	adds	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	4b62      	ldr	r3, [pc, #392]	; (8008358 <tcp_input+0x758>)
 80081d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80081d4:	6978      	ldr	r0, [r7, #20]
 80081d6:	f000 fa19 	bl	800860c <tcp_listen_input>
      }
      pbuf_free(p);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fd f9e6 	bl	80055ac <pbuf_free>
      return;
 80081e0:	e1b2      	b.n	8008548 <tcp_input+0x948>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8167 	beq.w	80084b8 <tcp_input+0x8b8>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80081ea:	4b5c      	ldr	r3, [pc, #368]	; (800835c <tcp_input+0x75c>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	891a      	ldrh	r2, [r3, #8]
 80081f4:	4b59      	ldr	r3, [pc, #356]	; (800835c <tcp_input+0x75c>)
 80081f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80081f8:	4a58      	ldr	r2, [pc, #352]	; (800835c <tcp_input+0x75c>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80081fe:	4b54      	ldr	r3, [pc, #336]	; (8008350 <tcp_input+0x750>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a56      	ldr	r2, [pc, #344]	; (800835c <tcp_input+0x75c>)
 8008204:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008206:	4b56      	ldr	r3, [pc, #344]	; (8008360 <tcp_input+0x760>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800820c:	4b55      	ldr	r3, [pc, #340]	; (8008364 <tcp_input+0x764>)
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008212:	4b55      	ldr	r3, [pc, #340]	; (8008368 <tcp_input+0x768>)
 8008214:	2200      	movs	r2, #0
 8008216:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008218:	4b54      	ldr	r3, [pc, #336]	; (800836c <tcp_input+0x76c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <tcp_input+0x632>
      p->flags |= PBUF_FLAG_PUSH;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7b5b      	ldrb	r3, [r3, #13]
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	b2da      	uxtb	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01e      	beq.n	8008278 <tcp_input+0x678>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800823a:	69f8      	ldr	r0, [r7, #28]
 800823c:	f7fe ff74 	bl	8007128 <tcp_process_refused_data>
 8008240:	4603      	mov	r3, r0
 8008242:	f113 0f0d 	cmn.w	r3, #13
 8008246:	d007      	beq.n	8008258 <tcp_input+0x658>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800824c:	2b00      	cmp	r3, #0
 800824e:	d013      	beq.n	8008278 <tcp_input+0x678>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008250:	4b47      	ldr	r3, [pc, #284]	; (8008370 <tcp_input+0x770>)
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00f      	beq.n	8008278 <tcp_input+0x678>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <tcp_input+0x666>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008260:	69f8      	ldr	r0, [r7, #28]
 8008262:	f004 f8f9 	bl	800c458 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8008266:	4b3c      	ldr	r3, [pc, #240]	; (8008358 <tcp_input+0x758>)
 8008268:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800826c:	3301      	adds	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	4b39      	ldr	r3, [pc, #228]	; (8008358 <tcp_input+0x758>)
 8008272:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008276:	e10c      	b.n	8008492 <tcp_input+0x892>
      }
    }
    tcp_input_pcb = pcb;
 8008278:	4a3e      	ldr	r2, [pc, #248]	; (8008374 <tcp_input+0x774>)
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800827e:	69f8      	ldr	r0, [r7, #28]
 8008280:	f000 fb52 	bl	8008928 <tcp_process>
 8008284:	4603      	mov	r3, r0
 8008286:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800828c:	f113 0f0d 	cmn.w	r3, #13
 8008290:	f000 80ff 	beq.w	8008492 <tcp_input+0x892>
      if (recv_flags & TF_RESET) {
 8008294:	4b33      	ldr	r3, [pc, #204]	; (8008364 <tcp_input+0x764>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d015      	beq.n	80082cc <tcp_input+0x6cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <tcp_input+0x6bc>
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	6912      	ldr	r2, [r2, #16]
 80082b4:	f06f 010d 	mvn.w	r1, #13
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80082bc:	69f9      	ldr	r1, [r7, #28]
 80082be:	482e      	ldr	r0, [pc, #184]	; (8008378 <tcp_input+0x778>)
 80082c0:	f7ff fb00 	bl	80078c4 <tcp_pcb_remove>
        tcp_free(pcb);
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	f7fd fd8b 	bl	8005de0 <tcp_free>
 80082ca:	e0e2      	b.n	8008492 <tcp_input+0x892>
      } else {
        err = ERR_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <tcp_input+0x768>)
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01d      	beq.n	8008314 <tcp_input+0x714>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80082d8:	4b23      	ldr	r3, [pc, #140]	; (8008368 <tcp_input+0x768>)
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <tcp_input+0x6fe>
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	6910      	ldr	r0, [r2, #16]
 80082f2:	897a      	ldrh	r2, [r7, #10]
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	4798      	blx	r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	74fb      	strb	r3, [r7, #19]
 80082fc:	e001      	b.n	8008302 <tcp_input+0x702>
 80082fe:	2300      	movs	r3, #0
 8008300:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008306:	f113 0f0d 	cmn.w	r3, #13
 800830a:	f000 80b9 	beq.w	8008480 <tcp_input+0x880>
              goto aborted;
            }
          }
          recv_acked = 0;
 800830e:	4b16      	ldr	r3, [pc, #88]	; (8008368 <tcp_input+0x768>)
 8008310:	2200      	movs	r2, #0
 8008312:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008314:	69f8      	ldr	r0, [r7, #28]
 8008316:	f000 f933 	bl	8008580 <tcp_input_delayed_close>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 80b1 	bne.w	8008484 <tcp_input+0x884>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <tcp_input+0x760>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d065      	beq.n	80083f6 <tcp_input+0x7f6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832e:	2b00      	cmp	r3, #0
 8008330:	d02a      	beq.n	8008388 <tcp_input+0x788>
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <tcp_input+0x77c>)
 8008334:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008338:	4911      	ldr	r1, [pc, #68]	; (8008380 <tcp_input+0x780>)
 800833a:	4812      	ldr	r0, [pc, #72]	; (8008384 <tcp_input+0x784>)
 800833c:	f00a fe54 	bl	8012fe8 <iprintf>
 8008340:	2000      	movs	r0, #0
 8008342:	f00a ff53 	bl	80131ec <fflush>
 8008346:	f00a fe98 	bl	801307a <abort>
 800834a:	bf00      	nop
 800834c:	200007c8 	.word	0x200007c8
 8008350:	2000065c 	.word	0x2000065c
 8008354:	20002214 	.word	0x20002214
 8008358:	20002164 	.word	0x20002164
 800835c:	20000648 	.word	0x20000648
 8008360:	2000067c 	.word	0x2000067c
 8008364:	20000679 	.word	0x20000679
 8008368:	20000674 	.word	0x20000674
 800836c:	20000678 	.word	0x20000678
 8008370:	20000676 	.word	0x20000676
 8008374:	20002220 	.word	0x20002220
 8008378:	2000220c 	.word	0x2000220c
 800837c:	08015f68 	.word	0x08015f68
 8008380:	0801610c 	.word	0x0801610c
 8008384:	08015fa4 	.word	0x08015fa4
          if (pcb->flags & TF_RXCLOSED) {
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	8b5b      	ldrh	r3, [r3, #26]
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <tcp_input+0x7a6>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008394:	4b6e      	ldr	r3, [pc, #440]	; (8008550 <tcp_input+0x950>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd f907 	bl	80055ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800839e:	69f8      	ldr	r0, [r7, #28]
 80083a0:	f7fe f82e 	bl	8006400 <tcp_abort>
            goto aborted;
 80083a4:	e075      	b.n	8008492 <tcp_input+0x892>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <tcp_input+0x7ca>
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	6918      	ldr	r0, [r3, #16]
 80083ba:	4b65      	ldr	r3, [pc, #404]	; (8008550 <tcp_input+0x950>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	47a0      	blx	r4
 80083c4:	4603      	mov	r3, r0
 80083c6:	74fb      	strb	r3, [r7, #19]
 80083c8:	e008      	b.n	80083dc <tcp_input+0x7dc>
 80083ca:	4b61      	ldr	r3, [pc, #388]	; (8008550 <tcp_input+0x950>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	2300      	movs	r3, #0
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	2000      	movs	r0, #0
 80083d4:	f7fe ff84 	bl	80072e0 <tcp_recv_null>
 80083d8:	4603      	mov	r3, r0
 80083da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80083dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083e0:	f113 0f0d 	cmn.w	r3, #13
 80083e4:	d050      	beq.n	8008488 <tcp_input+0x888>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80083e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <tcp_input+0x7f6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80083ee:	4b58      	ldr	r3, [pc, #352]	; (8008550 <tcp_input+0x950>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80083f6:	4b57      	ldr	r3, [pc, #348]	; (8008554 <tcp_input+0x954>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d031      	beq.n	8008466 <tcp_input+0x866>
          if (pcb->refused_data != NULL) {
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <tcp_input+0x81e>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008412:	7b52      	ldrb	r2, [r2, #13]
 8008414:	f042 0220 	orr.w	r2, r2, #32
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	735a      	strb	r2, [r3, #13]
 800841c:	e023      	b.n	8008466 <tcp_input+0x866>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008422:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008426:	4293      	cmp	r3, r2
 8008428:	d005      	beq.n	8008436 <tcp_input+0x836>
              pcb->rcv_wnd++;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <tcp_input+0x858>
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	6918      	ldr	r0, [r3, #16]
 800844a:	2300      	movs	r3, #0
 800844c:	2200      	movs	r2, #0
 800844e:	69f9      	ldr	r1, [r7, #28]
 8008450:	47a0      	blx	r4
 8008452:	4603      	mov	r3, r0
 8008454:	74fb      	strb	r3, [r7, #19]
 8008456:	e001      	b.n	800845c <tcp_input+0x85c>
 8008458:	2300      	movs	r3, #0
 800845a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800845c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008460:	f113 0f0d 	cmn.w	r3, #13
 8008464:	d012      	beq.n	800848c <tcp_input+0x88c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008466:	4b3c      	ldr	r3, [pc, #240]	; (8008558 <tcp_input+0x958>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800846c:	69f8      	ldr	r0, [r7, #28]
 800846e:	f000 f887 	bl	8008580 <tcp_input_delayed_close>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <tcp_input+0x890>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008478:	69f8      	ldr	r0, [r7, #28]
 800847a:	f003 f8bd 	bl	800b5f8 <tcp_output>
 800847e:	e008      	b.n	8008492 <tcp_input+0x892>
              goto aborted;
 8008480:	bf00      	nop
 8008482:	e006      	b.n	8008492 <tcp_input+0x892>
          goto aborted;
 8008484:	bf00      	nop
 8008486:	e004      	b.n	8008492 <tcp_input+0x892>
            goto aborted;
 8008488:	bf00      	nop
 800848a:	e002      	b.n	8008492 <tcp_input+0x892>
              goto aborted;
 800848c:	bf00      	nop
 800848e:	e000      	b.n	8008492 <tcp_input+0x892>
          goto aborted;
 8008490:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8008492:	4b31      	ldr	r3, [pc, #196]	; (8008558 <tcp_input+0x958>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008498:	4b2d      	ldr	r3, [pc, #180]	; (8008550 <tcp_input+0x950>)
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800849e:	4b2f      	ldr	r3, [pc, #188]	; (800855c <tcp_input+0x95c>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d04f      	beq.n	8008546 <tcp_input+0x946>
      pbuf_free(inseg.p);
 80084a6:	4b2d      	ldr	r3, [pc, #180]	; (800855c <tcp_input+0x95c>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd f87e 	bl	80055ac <pbuf_free>
      inseg.p = NULL;
 80084b0:	4b2a      	ldr	r3, [pc, #168]	; (800855c <tcp_input+0x95c>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80084b6:	e046      	b.n	8008546 <tcp_input+0x946>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80084b8:	4b29      	ldr	r3, [pc, #164]	; (8008560 <tcp_input+0x960>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	899b      	ldrh	r3, [r3, #12]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fa ff61 	bl	8003388 <lwip_htons>
 80084c6:	4603      	mov	r3, r0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d129      	bne.n	8008526 <tcp_input+0x926>
      TCP_STATS_INC(tcp.proterr);
 80084d2:	4b24      	ldr	r3, [pc, #144]	; (8008564 <tcp_input+0x964>)
 80084d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084d8:	3301      	adds	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	4b21      	ldr	r3, [pc, #132]	; (8008564 <tcp_input+0x964>)
 80084de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      TCP_STATS_INC(tcp.drop);
 80084e2:	4b20      	ldr	r3, [pc, #128]	; (8008564 <tcp_input+0x964>)
 80084e4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80084e8:	3301      	adds	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <tcp_input+0x964>)
 80084ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <tcp_input+0x968>)
 80084f4:	6858      	ldr	r0, [r3, #4]
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <tcp_input+0x96c>)
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <tcp_input+0x970>)
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <tcp_input+0x974>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008506:	4b16      	ldr	r3, [pc, #88]	; (8008560 <tcp_input+0x960>)
 8008508:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800850e:	4a14      	ldr	r2, [pc, #80]	; (8008560 <tcp_input+0x960>)
 8008510:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008512:	8812      	ldrh	r2, [r2, #0]
 8008514:	b292      	uxth	r2, r2
 8008516:	9202      	str	r2, [sp, #8]
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	4b17      	ldr	r3, [pc, #92]	; (8008578 <tcp_input+0x978>)
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4b17      	ldr	r3, [pc, #92]	; (800857c <tcp_input+0x97c>)
 8008520:	4622      	mov	r2, r4
 8008522:	f003 ff72 	bl	800c40a <tcp_rst_netif>
    pbuf_free(p);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fd f840 	bl	80055ac <pbuf_free>
  return;
 800852c:	e00b      	b.n	8008546 <tcp_input+0x946>
dropped:
  TCP_STATS_INC(tcp.drop);
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <tcp_input+0x964>)
 8008530:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008534:	3301      	adds	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <tcp_input+0x964>)
 800853a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fd f834 	bl	80055ac <pbuf_free>
 8008544:	e000      	b.n	8008548 <tcp_input+0x948>
  return;
 8008546:	bf00      	nop
}
 8008548:	3724      	adds	r7, #36	; 0x24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd90      	pop	{r4, r7, pc}
 800854e:	bf00      	nop
 8008550:	2000067c 	.word	0x2000067c
 8008554:	20000679 	.word	0x20000679
 8008558:	20002220 	.word	0x20002220
 800855c:	20000648 	.word	0x20000648
 8008560:	2000065c 	.word	0x2000065c
 8008564:	20002164 	.word	0x20002164
 8008568:	200007c8 	.word	0x200007c8
 800856c:	20000670 	.word	0x20000670
 8008570:	20000676 	.word	0x20000676
 8008574:	2000066c 	.word	0x2000066c
 8008578:	200007d8 	.word	0x200007d8
 800857c:	200007dc 	.word	0x200007dc

08008580 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <tcp_input_delayed_close+0x26>
 800858e:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <tcp_input_delayed_close+0x78>)
 8008590:	f240 225a 	movw	r2, #602	; 0x25a
 8008594:	4919      	ldr	r1, [pc, #100]	; (80085fc <tcp_input_delayed_close+0x7c>)
 8008596:	481a      	ldr	r0, [pc, #104]	; (8008600 <tcp_input_delayed_close+0x80>)
 8008598:	f00a fd26 	bl	8012fe8 <iprintf>
 800859c:	2000      	movs	r0, #0
 800859e:	f00a fe25 	bl	80131ec <fflush>
 80085a2:	f00a fd6a 	bl	801307a <abort>

  if (recv_flags & TF_CLOSED) {
 80085a6:	4b17      	ldr	r3, [pc, #92]	; (8008604 <tcp_input_delayed_close+0x84>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 0310 	and.w	r3, r3, #16
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01c      	beq.n	80085ec <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8b5b      	ldrh	r3, [r3, #26]
 80085b6:	f003 0310 	and.w	r3, r3, #16
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10d      	bne.n	80085da <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d008      	beq.n	80085da <tcp_input_delayed_close+0x5a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6912      	ldr	r2, [r2, #16]
 80085d2:	f06f 010e 	mvn.w	r1, #14
 80085d6:	4610      	mov	r0, r2
 80085d8:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	480a      	ldr	r0, [pc, #40]	; (8008608 <tcp_input_delayed_close+0x88>)
 80085de:	f7ff f971 	bl	80078c4 <tcp_pcb_remove>
    tcp_free(pcb);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fd fbfc 	bl	8005de0 <tcp_free>
    return 1;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <tcp_input_delayed_close+0x6e>
  }
  return 0;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08015f68 	.word	0x08015f68
 80085fc:	08016128 	.word	0x08016128
 8008600:	08015fa4 	.word	0x08015fa4
 8008604:	20000679 	.word	0x20000679
 8008608:	2000220c 	.word	0x2000220c

0800860c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b08b      	sub	sp, #44	; 0x2c
 8008610:	af04      	add	r7, sp, #16
 8008612:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008614:	4b76      	ldr	r3, [pc, #472]	; (80087f0 <tcp_listen_input+0x1e4>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 80e1 	bne.w	80087e4 <tcp_listen_input+0x1d8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <tcp_listen_input+0x34>
 8008628:	4b72      	ldr	r3, [pc, #456]	; (80087f4 <tcp_listen_input+0x1e8>)
 800862a:	f240 2281 	movw	r2, #641	; 0x281
 800862e:	4972      	ldr	r1, [pc, #456]	; (80087f8 <tcp_listen_input+0x1ec>)
 8008630:	4872      	ldr	r0, [pc, #456]	; (80087fc <tcp_listen_input+0x1f0>)
 8008632:	f00a fcd9 	bl	8012fe8 <iprintf>
 8008636:	2000      	movs	r0, #0
 8008638:	f00a fdd8 	bl	80131ec <fflush>
 800863c:	f00a fd1d 	bl	801307a <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008640:	4b6b      	ldr	r3, [pc, #428]	; (80087f0 <tcp_listen_input+0x1e4>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01a      	beq.n	8008682 <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800864c:	4b6c      	ldr	r3, [pc, #432]	; (8008800 <tcp_listen_input+0x1f4>)
 800864e:	6858      	ldr	r0, [r3, #4]
 8008650:	4b6c      	ldr	r3, [pc, #432]	; (8008804 <tcp_listen_input+0x1f8>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	4b6c      	ldr	r3, [pc, #432]	; (8008808 <tcp_listen_input+0x1fc>)
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	4b6c      	ldr	r3, [pc, #432]	; (800880c <tcp_listen_input+0x200>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008660:	4b6b      	ldr	r3, [pc, #428]	; (8008810 <tcp_listen_input+0x204>)
 8008662:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008668:	4a69      	ldr	r2, [pc, #420]	; (8008810 <tcp_listen_input+0x204>)
 800866a:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800866c:	8812      	ldrh	r2, [r2, #0]
 800866e:	b292      	uxth	r2, r2
 8008670:	9202      	str	r2, [sp, #8]
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	4b67      	ldr	r3, [pc, #412]	; (8008814 <tcp_listen_input+0x208>)
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4b67      	ldr	r3, [pc, #412]	; (8008818 <tcp_listen_input+0x20c>)
 800867a:	4622      	mov	r2, r4
 800867c:	f003 fec5 	bl	800c40a <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008680:	e0b2      	b.n	80087e8 <tcp_listen_input+0x1dc>
  } else if (flags & TCP_SYN) {
 8008682:	4b5b      	ldr	r3, [pc, #364]	; (80087f0 <tcp_listen_input+0x1e4>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80ac 	beq.w	80087e8 <tcp_listen_input+0x1dc>
    npcb = tcp_alloc(pcb->prio);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7d5b      	ldrb	r3, [r3, #21]
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe ff4d 	bl	8007534 <tcp_alloc>
 800869a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d119      	bne.n	80086d6 <tcp_listen_input+0xca>
      TCP_STATS_INC(tcp.memerr);
 80086a2:	4b5e      	ldr	r3, [pc, #376]	; (800881c <tcp_listen_input+0x210>)
 80086a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80086a8:	3301      	adds	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	4b5b      	ldr	r3, [pc, #364]	; (800881c <tcp_listen_input+0x210>)
 80086ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <tcp_listen_input+0xc4>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6910      	ldr	r0, [r2, #16]
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	2100      	movs	r1, #0
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	74fb      	strb	r3, [r7, #19]
      return;
 80086ce:	e08c      	b.n	80087ea <tcp_listen_input+0x1de>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80086d0:	23f0      	movs	r3, #240	; 0xf0
 80086d2:	74fb      	strb	r3, [r7, #19]
      return;
 80086d4:	e089      	b.n	80087ea <tcp_listen_input+0x1de>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80086d6:	4b4a      	ldr	r3, [pc, #296]	; (8008800 <tcp_listen_input+0x1f4>)
 80086d8:	695a      	ldr	r2, [r3, #20]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80086de:	4b48      	ldr	r3, [pc, #288]	; (8008800 <tcp_listen_input+0x1f4>)
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8ada      	ldrh	r2, [r3, #22]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80086ee:	4b48      	ldr	r3, [pc, #288]	; (8008810 <tcp_listen_input+0x204>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2203      	movs	r2, #3
 80086fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008700:	4b42      	ldr	r3, [pc, #264]	; (800880c <tcp_listen_input+0x200>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008712:	6978      	ldr	r0, [r7, #20]
 8008714:	f7ff f982 	bl	8007a1c <tcp_next_iss>
 8008718:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <tcp_listen_input+0x200>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7a5b      	ldrb	r3, [r3, #9]
 800874e:	f003 030c 	and.w	r3, r3, #12
 8008752:	b2da      	uxtb	r2, r3
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7a1a      	ldrb	r2, [r3, #8]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008760:	4b2f      	ldr	r3, [pc, #188]	; (8008820 <tcp_listen_input+0x214>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	60da      	str	r2, [r3, #12]
 8008768:	4a2d      	ldr	r2, [pc, #180]	; (8008820 <tcp_listen_input+0x214>)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	f003 fff5 	bl	800c75c <tcp_timer_needed>
 8008772:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <tcp_listen_input+0x218>)
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008778:	6978      	ldr	r0, [r7, #20]
 800877a:	f001 fe05 	bl	800a388 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <tcp_listen_input+0x204>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	89db      	ldrh	r3, [r3, #14]
 8008784:	b29a      	uxth	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	3304      	adds	r3, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fa ff65 	bl	8003670 <ip4_route>
 80087a6:	4601      	mov	r1, r0
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3304      	adds	r3, #4
 80087ac:	461a      	mov	r2, r3
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff f95e 	bl	8007a70 <tcp_eff_send_mss_netif>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80087bc:	2112      	movs	r1, #18
 80087be:	6978      	ldr	r0, [r7, #20]
 80087c0:	f002 fe0e 	bl	800b3e0 <tcp_enqueue_flags>
 80087c4:	4603      	mov	r3, r0
 80087c6:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80087c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d004      	beq.n	80087da <tcp_listen_input+0x1ce>
      tcp_abandon(npcb, 0);
 80087d0:	2100      	movs	r1, #0
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7fd fd52 	bl	800627c <tcp_abandon>
      return;
 80087d8:	e007      	b.n	80087ea <tcp_listen_input+0x1de>
    tcp_output(npcb);
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f002 ff0c 	bl	800b5f8 <tcp_output>
  return;
 80087e0:	bf00      	nop
 80087e2:	e001      	b.n	80087e8 <tcp_listen_input+0x1dc>
    return;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <tcp_listen_input+0x1de>
  return;
 80087e8:	bf00      	nop
}
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}
 80087f0:	20000678 	.word	0x20000678
 80087f4:	08015f68 	.word	0x08015f68
 80087f8:	08016150 	.word	0x08016150
 80087fc:	08015fa4 	.word	0x08015fa4
 8008800:	200007c8 	.word	0x200007c8
 8008804:	20000670 	.word	0x20000670
 8008808:	20000676 	.word	0x20000676
 800880c:	2000066c 	.word	0x2000066c
 8008810:	2000065c 	.word	0x2000065c
 8008814:	200007d8 	.word	0x200007d8
 8008818:	200007dc 	.word	0x200007dc
 800881c:	20002164 	.word	0x20002164
 8008820:	2000220c 	.word	0x2000220c
 8008824:	20002208 	.word	0x20002208

08008828 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af04      	add	r7, sp, #16
 800882e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008830:	4b32      	ldr	r3, [pc, #200]	; (80088fc <tcp_timewait_input+0xd4>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d159      	bne.n	80088f0 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <tcp_timewait_input+0x32>
 8008842:	4b2f      	ldr	r3, [pc, #188]	; (8008900 <tcp_timewait_input+0xd8>)
 8008844:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008848:	492e      	ldr	r1, [pc, #184]	; (8008904 <tcp_timewait_input+0xdc>)
 800884a:	482f      	ldr	r0, [pc, #188]	; (8008908 <tcp_timewait_input+0xe0>)
 800884c:	f00a fbcc 	bl	8012fe8 <iprintf>
 8008850:	2000      	movs	r0, #0
 8008852:	f00a fccb 	bl	80131ec <fflush>
 8008856:	f00a fc10 	bl	801307a <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800885a:	4b28      	ldr	r3, [pc, #160]	; (80088fc <tcp_timewait_input+0xd4>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d02a      	beq.n	80088bc <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <tcp_timewait_input+0xe4>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	db2d      	blt.n	80088d0 <tcp_timewait_input+0xa8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800887c:	441a      	add	r2, r3
 800887e:	4b23      	ldr	r3, [pc, #140]	; (800890c <tcp_timewait_input+0xe4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	db23      	blt.n	80088d0 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008888:	4b21      	ldr	r3, [pc, #132]	; (8008910 <tcp_timewait_input+0xe8>)
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	4b21      	ldr	r3, [pc, #132]	; (8008914 <tcp_timewait_input+0xec>)
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <tcp_timewait_input+0xe4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008898:	4b1f      	ldr	r3, [pc, #124]	; (8008918 <tcp_timewait_input+0xf0>)
 800889a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088a0:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <tcp_timewait_input+0xf0>)
 80088a2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a4:	8812      	ldrh	r2, [r2, #0]
 80088a6:	b292      	uxth	r2, r2
 80088a8:	9202      	str	r2, [sp, #8]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	4b1b      	ldr	r3, [pc, #108]	; (800891c <tcp_timewait_input+0xf4>)
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <tcp_timewait_input+0xf8>)
 80088b2:	4602      	mov	r2, r0
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f003 fd87 	bl	800c3c8 <tcp_rst>
      return;
 80088ba:	e01c      	b.n	80088f6 <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <tcp_timewait_input+0xd4>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80088c8:	4b16      	ldr	r3, [pc, #88]	; (8008924 <tcp_timewait_input+0xfc>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80088d0:	4b10      	ldr	r3, [pc, #64]	; (8008914 <tcp_timewait_input+0xec>)
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00d      	beq.n	80088f4 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	8b5b      	ldrh	r3, [r3, #26]
 80088dc:	f043 0302 	orr.w	r3, r3, #2
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f002 fe86 	bl	800b5f8 <tcp_output>
  }
  return;
 80088ec:	bf00      	nop
 80088ee:	e001      	b.n	80088f4 <tcp_timewait_input+0xcc>
    return;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <tcp_timewait_input+0xce>
  return;
 80088f4:	bf00      	nop
}
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000678 	.word	0x20000678
 8008900:	08015f68 	.word	0x08015f68
 8008904:	08016170 	.word	0x08016170
 8008908:	08015fa4 	.word	0x08015fa4
 800890c:	2000066c 	.word	0x2000066c
 8008910:	20000670 	.word	0x20000670
 8008914:	20000676 	.word	0x20000676
 8008918:	2000065c 	.word	0x2000065c
 800891c:	200007d8 	.word	0x200007d8
 8008920:	200007dc 	.word	0x200007dc
 8008924:	20002210 	.word	0x20002210

08008928 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b08d      	sub	sp, #52	; 0x34
 800892c:	af04      	add	r7, sp, #16
 800892e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <tcp_process+0x2e>
 800893e:	4b9c      	ldr	r3, [pc, #624]	; (8008bb0 <tcp_process+0x288>)
 8008940:	f240 321f 	movw	r2, #799	; 0x31f
 8008944:	499b      	ldr	r1, [pc, #620]	; (8008bb4 <tcp_process+0x28c>)
 8008946:	489c      	ldr	r0, [pc, #624]	; (8008bb8 <tcp_process+0x290>)
 8008948:	f00a fb4e 	bl	8012fe8 <iprintf>
 800894c:	2000      	movs	r0, #0
 800894e:	f00a fc4d 	bl	80131ec <fflush>
 8008952:	f00a fb92 	bl	801307a <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008956:	4b99      	ldr	r3, [pc, #612]	; (8008bbc <tcp_process+0x294>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b00      	cmp	r3, #0
 8008960:	d053      	beq.n	8008a0a <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d108      	bne.n	800897c <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800896e:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <tcp_process+0x298>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d123      	bne.n	80089be <tcp_process+0x96>
        acceptable = 1;
 8008976:	2301      	movs	r3, #1
 8008978:	76fb      	strb	r3, [r7, #27]
 800897a:	e020      	b.n	80089be <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008980:	4b90      	ldr	r3, [pc, #576]	; (8008bc4 <tcp_process+0x29c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d102      	bne.n	800898e <tcp_process+0x66>
        acceptable = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	76fb      	strb	r3, [r7, #27]
 800898c:	e017      	b.n	80089be <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800898e:	4b8d      	ldr	r3, [pc, #564]	; (8008bc4 <tcp_process+0x29c>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	db10      	blt.n	80089be <tcp_process+0x96>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80089a4:	441a      	add	r2, r3
 80089a6:	4b87      	ldr	r3, [pc, #540]	; (8008bc4 <tcp_process+0x29c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db06      	blt.n	80089be <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8b5b      	ldrh	r3, [r3, #26]
 80089b4:	f043 0302 	orr.w	r3, r3, #2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80089be:	7efb      	ldrb	r3, [r7, #27]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d020      	beq.n	8008a06 <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	7d1b      	ldrb	r3, [r3, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <tcp_process+0xbc>
 80089cc:	4b78      	ldr	r3, [pc, #480]	; (8008bb0 <tcp_process+0x288>)
 80089ce:	f240 323b 	movw	r2, #827	; 0x33b
 80089d2:	497d      	ldr	r1, [pc, #500]	; (8008bc8 <tcp_process+0x2a0>)
 80089d4:	4878      	ldr	r0, [pc, #480]	; (8008bb8 <tcp_process+0x290>)
 80089d6:	f00a fb07 	bl	8012fe8 <iprintf>
 80089da:	2000      	movs	r0, #0
 80089dc:	f00a fc06 	bl	80131ec <fflush>
 80089e0:	f00a fb4b 	bl	801307a <abort>
      recv_flags |= TF_RESET;
 80089e4:	4b79      	ldr	r3, [pc, #484]	; (8008bcc <tcp_process+0x2a4>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	f043 0308 	orr.w	r3, r3, #8
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	4b77      	ldr	r3, [pc, #476]	; (8008bcc <tcp_process+0x2a4>)
 80089f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	8b5b      	ldrh	r3, [r3, #26]
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008a00:	f06f 030d 	mvn.w	r3, #13
 8008a04:	e3a1      	b.n	800914a <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e39f      	b.n	800914a <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008a0a:	4b6c      	ldr	r3, [pc, #432]	; (8008bbc <tcp_process+0x294>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <tcp_process+0x110>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	7d1b      	ldrb	r3, [r3, #20]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d00c      	beq.n	8008a38 <tcp_process+0x110>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d008      	beq.n	8008a38 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	8b5b      	ldrh	r3, [r3, #26]
 8008a2a:	f043 0302 	orr.w	r3, r3, #2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	e388      	b.n	800914a <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8b5b      	ldrh	r3, [r3, #26]
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d103      	bne.n	8008a4c <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008a44:	4b62      	ldr	r3, [pc, #392]	; (8008bd0 <tcp_process+0x2a8>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fc93 	bl	800a388 <tcp_parseopt>

  if (flags & TCP_SYN) {
 8008a62:	4b56      	ldr	r3, [pc, #344]	; (8008bbc <tcp_process+0x294>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d005      	beq.n	8008a82 <tcp_process+0x15a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7d1b      	ldrb	r3, [r3, #20]
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d001      	beq.n	8008a82 <tcp_process+0x15a>
      return ERR_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e363      	b.n	800914a <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7d1b      	ldrb	r3, [r3, #20]
 8008a86:	3b02      	subs	r3, #2
 8008a88:	2b07      	cmp	r3, #7
 8008a8a:	f200 834e 	bhi.w	800912a <tcp_process+0x802>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <tcp_process+0x16c>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008cf3 	.word	0x08008cf3
 8008a9c:	08008ea9 	.word	0x08008ea9
 8008aa0:	08008ed3 	.word	0x08008ed3
 8008aa4:	08008fc1 	.word	0x08008fc1
 8008aa8:	08008ea9 	.word	0x08008ea9
 8008aac:	0800904d 	.word	0x0800904d
 8008ab0:	080090f5 	.word	0x080090f5
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008ab4:	4b41      	ldr	r3, [pc, #260]	; (8008bbc <tcp_process+0x294>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80eb 	beq.w	8008c98 <tcp_process+0x370>
 8008ac2:	4b3e      	ldr	r3, [pc, #248]	; (8008bbc <tcp_process+0x294>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 80e4 	beq.w	8008c98 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	4b3a      	ldr	r3, [pc, #232]	; (8008bc0 <tcp_process+0x298>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	f040 80dc 	bne.w	8008c98 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8008ae0:	4b38      	ldr	r3, [pc, #224]	; (8008bc4 <tcp_process+0x29c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008af2:	4b33      	ldr	r3, [pc, #204]	; (8008bc0 <tcp_process+0x298>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008afa:	4b36      	ldr	r3, [pc, #216]	; (8008bd4 <tcp_process+0x2ac>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	89db      	ldrh	r3, [r3, #14]
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008b14:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <tcp_process+0x29c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	1e5a      	subs	r2, r3, #1
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2204      	movs	r2, #4
 8008b22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fa fd9f 	bl	8003670 <ip4_route>
 8008b32:	4601      	mov	r1, r0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3304      	adds	r3, #4
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7fe ff98 	bl	8007a70 <tcp_eff_send_mss_netif>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b4c:	009a      	lsls	r2, r3, #2
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	f241 111c 	movw	r1, #4380	; 0x111c
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf38      	it	cc
 8008b5c:	460b      	movcc	r3, r1
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d204      	bcs.n	8008b6c <tcp_process+0x244>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	e00d      	b.n	8008b88 <tcp_process+0x260>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	f241 121c 	movw	r2, #4380	; 0x111c
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d904      	bls.n	8008b84 <tcp_process+0x25c>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	e001      	b.n	8008b88 <tcp_process+0x260>
 8008b84:	f241 131c 	movw	r3, #4380	; 0x111c
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d121      	bne.n	8008bdc <tcp_process+0x2b4>
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <tcp_process+0x288>)
 8008b9a:	f240 3277 	movw	r2, #887	; 0x377
 8008b9e:	490e      	ldr	r1, [pc, #56]	; (8008bd8 <tcp_process+0x2b0>)
 8008ba0:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <tcp_process+0x290>)
 8008ba2:	f00a fa21 	bl	8012fe8 <iprintf>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f00a fb20 	bl	80131ec <fflush>
 8008bac:	f00a fa65 	bl	801307a <abort>
 8008bb0:	08015f68 	.word	0x08015f68
 8008bb4:	08016190 	.word	0x08016190
 8008bb8:	08015fa4 	.word	0x08015fa4
 8008bbc:	20000678 	.word	0x20000678
 8008bc0:	20000670 	.word	0x20000670
 8008bc4:	2000066c 	.word	0x2000066c
 8008bc8:	080161ac 	.word	0x080161ac
 8008bcc:	20000679 	.word	0x20000679
 8008bd0:	20002210 	.word	0x20002210
 8008bd4:	2000065c 	.word	0x2000065c
 8008bd8:	080161cc 	.word	0x080161cc
        --pcb->snd_queuelen;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008be2:	3b01      	subs	r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d116      	bne.n	8008c26 <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <tcp_process+0x2f4>
 8008c04:	4b9b      	ldr	r3, [pc, #620]	; (8008e74 <tcp_process+0x54c>)
 8008c06:	f240 327f 	movw	r2, #895	; 0x37f
 8008c0a:	499b      	ldr	r1, [pc, #620]	; (8008e78 <tcp_process+0x550>)
 8008c0c:	489b      	ldr	r0, [pc, #620]	; (8008e7c <tcp_process+0x554>)
 8008c0e:	f00a f9eb 	bl	8012fe8 <iprintf>
 8008c12:	2000      	movs	r0, #0
 8008c14:	f00a faea 	bl	80131ec <fflush>
 8008c18:	f00a fa2f 	bl	801307a <abort>
          pcb->unsent = rseg->next;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c24:	e003      	b.n	8008c2e <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008c2e:	69f8      	ldr	r0, [r7, #28]
 8008c30:	f7fe fb0c 	bl	800724c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <tcp_process+0x31e>
          pcb->rtime = -1;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c42:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c44:	e006      	b.n	8008c54 <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <tcp_process+0x34c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6910      	ldr	r0, [r2, #16]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	4798      	blx	r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	76bb      	strb	r3, [r7, #26]
 8008c72:	e001      	b.n	8008c78 <tcp_process+0x350>
 8008c74:	2300      	movs	r3, #0
 8008c76:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008c78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008c7c:	f113 0f0d 	cmn.w	r3, #13
 8008c80:	d102      	bne.n	8008c88 <tcp_process+0x360>
          return ERR_ABRT;
 8008c82:	f06f 030c 	mvn.w	r3, #12
 8008c86:	e260      	b.n	800914a <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	8b5b      	ldrh	r3, [r3, #26]
 8008c8c:	f043 0302 	orr.w	r3, r3, #2
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008c96:	e24a      	b.n	800912e <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 8008c98:	4b79      	ldr	r3, [pc, #484]	; (8008e80 <tcp_process+0x558>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8244 	beq.w	800912e <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ca6:	4b77      	ldr	r3, [pc, #476]	; (8008e84 <tcp_process+0x55c>)
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	4b77      	ldr	r3, [pc, #476]	; (8008e88 <tcp_process+0x560>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	4b76      	ldr	r3, [pc, #472]	; (8008e8c <tcp_process+0x564>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cb6:	4b76      	ldr	r3, [pc, #472]	; (8008e90 <tcp_process+0x568>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cba:	885b      	ldrh	r3, [r3, #2]
 8008cbc:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cbe:	4a74      	ldr	r2, [pc, #464]	; (8008e90 <tcp_process+0x568>)
 8008cc0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cc2:	8812      	ldrh	r2, [r2, #0]
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	9202      	str	r2, [sp, #8]
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	4b72      	ldr	r3, [pc, #456]	; (8008e94 <tcp_process+0x56c>)
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	4b72      	ldr	r3, [pc, #456]	; (8008e98 <tcp_process+0x570>)
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f003 fb78 	bl	800c3c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	f200 8225 	bhi.w	800912e <tcp_process+0x806>
          pcb->rtime = 0;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 f870 	bl	800bdd0 <tcp_rexmit_rto>
      break;
 8008cf0:	e21d      	b.n	800912e <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8008cf2:	4b63      	ldr	r3, [pc, #396]	; (8008e80 <tcp_process+0x558>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	1e5a      	subs	r2, r3, #1
 8008d04:	4b61      	ldr	r3, [pc, #388]	; (8008e8c <tcp_process+0x564>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f040 8212 	bne.w	8009132 <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f003 f884 	bl	800be1c <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8008d14:	e20d      	b.n	8009132 <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 8008d16:	4b5a      	ldr	r3, [pc, #360]	; (8008e80 <tcp_process+0x558>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8207 	beq.w	8009132 <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d24:	4b57      	ldr	r3, [pc, #348]	; (8008e84 <tcp_process+0x55c>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f2c0 8084 	blt.w	8008e3e <tcp_process+0x516>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d3a:	4b52      	ldr	r3, [pc, #328]	; (8008e84 <tcp_process+0x55c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db7c      	blt.n	8008e3e <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2204      	movs	r2, #4
 8008d48:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <tcp_process+0x430>
            err = ERR_VAL;
 8008d52:	23fa      	movs	r3, #250	; 0xfa
 8008d54:	76bb      	strb	r3, [r7, #26]
 8008d56:	e022      	b.n	8008d9e <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <tcp_process+0x452>
 8008d62:	4b44      	ldr	r3, [pc, #272]	; (8008e74 <tcp_process+0x54c>)
 8008d64:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8008d68:	494c      	ldr	r1, [pc, #304]	; (8008e9c <tcp_process+0x574>)
 8008d6a:	4844      	ldr	r0, [pc, #272]	; (8008e7c <tcp_process+0x554>)
 8008d6c:	f00a f93c 	bl	8012fe8 <iprintf>
 8008d70:	2000      	movs	r0, #0
 8008d72:	f00a fa3b 	bl	80131ec <fflush>
 8008d76:	f00a f980 	bl	801307a <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <tcp_process+0x472>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6910      	ldr	r0, [r2, #16]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	4798      	blx	r3
 8008d94:	4603      	mov	r3, r0
 8008d96:	76bb      	strb	r3, [r7, #26]
 8008d98:	e001      	b.n	8008d9e <tcp_process+0x476>
 8008d9a:	23f0      	movs	r3, #240	; 0xf0
 8008d9c:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8008d9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <tcp_process+0x494>
            if (err != ERR_ABRT) {
 8008da6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008daa:	f113 0f0d 	cmn.w	r3, #13
 8008dae:	d002      	beq.n	8008db6 <tcp_process+0x48e>
              tcp_abort(pcb);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fd fb25 	bl	8006400 <tcp_abort>
            return ERR_ABRT;
 8008db6:	f06f 030c 	mvn.w	r3, #12
 8008dba:	e1c6      	b.n	800914a <tcp_process+0x822>
          tcp_receive(pcb);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fae1 	bl	8009384 <tcp_receive>
          if (recv_acked != 0) {
 8008dc2:	4b37      	ldr	r3, [pc, #220]	; (8008ea0 <tcp_process+0x578>)
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <tcp_process+0x4ae>
            recv_acked--;
 8008dca:	4b35      	ldr	r3, [pc, #212]	; (8008ea0 <tcp_process+0x578>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	4b33      	ldr	r3, [pc, #204]	; (8008ea0 <tcp_process+0x578>)
 8008dd4:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dda:	009a      	lsls	r2, r3, #2
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	f241 111c 	movw	r1, #4380	; 0x111c
 8008de6:	428b      	cmp	r3, r1
 8008de8:	bf38      	it	cc
 8008dea:	460b      	movcc	r3, r1
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d204      	bcs.n	8008dfa <tcp_process+0x4d2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	e00d      	b.n	8008e16 <tcp_process+0x4ee>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d904      	bls.n	8008e12 <tcp_process+0x4ea>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	e001      	b.n	8008e16 <tcp_process+0x4ee>
 8008e12:	f241 131c 	movw	r3, #4380	; 0x111c
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8008e1c:	4b21      	ldr	r3, [pc, #132]	; (8008ea4 <tcp_process+0x57c>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d024      	beq.n	8008e72 <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8b5b      	ldrh	r3, [r3, #26]
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2207      	movs	r2, #7
 8008e3a:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008e3c:	e019      	b.n	8008e72 <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e3e:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <tcp_process+0x55c>)
 8008e40:	6819      	ldr	r1, [r3, #0]
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <tcp_process+0x560>)
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	4b10      	ldr	r3, [pc, #64]	; (8008e8c <tcp_process+0x564>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e4e:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <tcp_process+0x568>)
 8008e50:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e56:	4a0e      	ldr	r2, [pc, #56]	; (8008e90 <tcp_process+0x568>)
 8008e58:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e5a:	8812      	ldrh	r2, [r2, #0]
 8008e5c:	b292      	uxth	r2, r2
 8008e5e:	9202      	str	r2, [sp, #8]
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <tcp_process+0x56c>)
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <tcp_process+0x570>)
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f003 faac 	bl	800c3c8 <tcp_rst>
      break;
 8008e70:	e15f      	b.n	8009132 <tcp_process+0x80a>
 8008e72:	e15e      	b.n	8009132 <tcp_process+0x80a>
 8008e74:	08015f68 	.word	0x08015f68
 8008e78:	080161e4 	.word	0x080161e4
 8008e7c:	08015fa4 	.word	0x08015fa4
 8008e80:	20000678 	.word	0x20000678
 8008e84:	20000670 	.word	0x20000670
 8008e88:	20000676 	.word	0x20000676
 8008e8c:	2000066c 	.word	0x2000066c
 8008e90:	2000065c 	.word	0x2000065c
 8008e94:	200007d8 	.word	0x200007d8
 8008e98:	200007dc 	.word	0x200007dc
 8008e9c:	080161f8 	.word	0x080161f8
 8008ea0:	20000674 	.word	0x20000674
 8008ea4:	20000679 	.word	0x20000679
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fa6b 	bl	8009384 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008eae:	4b8b      	ldr	r3, [pc, #556]	; (80090dc <tcp_process+0x7b4>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 813d 	beq.w	8009136 <tcp_process+0x80e>
        tcp_ack_now(pcb);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8b5b      	ldrh	r3, [r3, #26]
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2207      	movs	r2, #7
 8008ece:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ed0:	e131      	b.n	8009136 <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa56 	bl	8009384 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008ed8:	4b80      	ldr	r3, [pc, #512]	; (80090dc <tcp_process+0x7b4>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d056      	beq.n	8008f92 <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ee4:	4b7e      	ldr	r3, [pc, #504]	; (80090e0 <tcp_process+0x7b8>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d045      	beq.n	8008f7c <tcp_process+0x654>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ef4:	4b7b      	ldr	r3, [pc, #492]	; (80090e4 <tcp_process+0x7bc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d13f      	bne.n	8008f7c <tcp_process+0x654>
            pcb->unsent == NULL) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d13b      	bne.n	8008f7c <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8b5b      	ldrh	r3, [r3, #26]
 8008f08:	f043 0302 	orr.w	r3, r3, #2
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe fc86 	bl	8007824 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008f18:	4b73      	ldr	r3, [pc, #460]	; (80090e8 <tcp_process+0x7c0>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d105      	bne.n	8008f2e <tcp_process+0x606>
 8008f22:	4b71      	ldr	r3, [pc, #452]	; (80090e8 <tcp_process+0x7c0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a6f      	ldr	r2, [pc, #444]	; (80090e8 <tcp_process+0x7c0>)
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e013      	b.n	8008f56 <tcp_process+0x62e>
 8008f2e:	4b6e      	ldr	r3, [pc, #440]	; (80090e8 <tcp_process+0x7c0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e00c      	b.n	8008f50 <tcp_process+0x628>
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d104      	bne.n	8008f4a <tcp_process+0x622>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	60da      	str	r2, [r3, #12]
 8008f48:	e005      	b.n	8008f56 <tcp_process+0x62e>
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1ef      	bne.n	8008f36 <tcp_process+0x60e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	4b63      	ldr	r3, [pc, #396]	; (80090ec <tcp_process+0x7c4>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	220a      	movs	r2, #10
 8008f66:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008f68:	4b61      	ldr	r3, [pc, #388]	; (80090f0 <tcp_process+0x7c8>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	4a5f      	ldr	r2, [pc, #380]	; (80090f0 <tcp_process+0x7c8>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	f003 fbf1 	bl	800c75c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008f7a:	e0de      	b.n	800913a <tcp_process+0x812>
          tcp_ack_now(pcb);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8b5b      	ldrh	r3, [r3, #26]
 8008f80:	f043 0302 	orr.w	r3, r3, #2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	751a      	strb	r2, [r3, #20]
      break;
 8008f90:	e0d3      	b.n	800913a <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f92:	4b53      	ldr	r3, [pc, #332]	; (80090e0 <tcp_process+0x7b8>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80cd 	beq.w	800913a <tcp_process+0x812>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fa4:	4b4f      	ldr	r3, [pc, #316]	; (80090e4 <tcp_process+0x7bc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	f040 80c6 	bne.w	800913a <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 80c1 	bne.w	800913a <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2206      	movs	r2, #6
 8008fbc:	751a      	strb	r2, [r3, #20]
      break;
 8008fbe:	e0bc      	b.n	800913a <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9df 	bl	8009384 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008fc6:	4b45      	ldr	r3, [pc, #276]	; (80090dc <tcp_process+0x7b4>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 80b5 	beq.w	800913e <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8b5b      	ldrh	r3, [r3, #26]
 8008fd8:	f043 0302 	orr.w	r3, r3, #2
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7fe fc1e 	bl	8007824 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008fe8:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <tcp_process+0x7c0>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d105      	bne.n	8008ffe <tcp_process+0x6d6>
 8008ff2:	4b3d      	ldr	r3, [pc, #244]	; (80090e8 <tcp_process+0x7c0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a3b      	ldr	r2, [pc, #236]	; (80090e8 <tcp_process+0x7c0>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e013      	b.n	8009026 <tcp_process+0x6fe>
 8008ffe:	4b3a      	ldr	r3, [pc, #232]	; (80090e8 <tcp_process+0x7c0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	e00c      	b.n	8009020 <tcp_process+0x6f8>
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d104      	bne.n	800901a <tcp_process+0x6f2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e005      	b.n	8009026 <tcp_process+0x6fe>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1ef      	bne.n	8009006 <tcp_process+0x6de>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	60da      	str	r2, [r3, #12]
 800902c:	4b2f      	ldr	r3, [pc, #188]	; (80090ec <tcp_process+0x7c4>)
 800902e:	2201      	movs	r2, #1
 8009030:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	220a      	movs	r2, #10
 8009036:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009038:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <tcp_process+0x7c8>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]
 8009040:	4a2b      	ldr	r2, [pc, #172]	; (80090f0 <tcp_process+0x7c8>)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	f003 fb89 	bl	800c75c <tcp_timer_needed>
      }
      break;
 800904a:	e078      	b.n	800913e <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f999 	bl	8009384 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <tcp_process+0x7b8>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b00      	cmp	r3, #0
 800905c:	d071      	beq.n	8009142 <tcp_process+0x81a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009062:	4b20      	ldr	r3, [pc, #128]	; (80090e4 <tcp_process+0x7bc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d16b      	bne.n	8009142 <tcp_process+0x81a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d167      	bne.n	8009142 <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fe fbd6 	bl	8007824 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009078:	4b1b      	ldr	r3, [pc, #108]	; (80090e8 <tcp_process+0x7c0>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d105      	bne.n	800908e <tcp_process+0x766>
 8009082:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <tcp_process+0x7c0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <tcp_process+0x7c0>)
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	e013      	b.n	80090b6 <tcp_process+0x78e>
 800908e:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <tcp_process+0x7c0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e00c      	b.n	80090b0 <tcp_process+0x788>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	429a      	cmp	r2, r3
 800909e:	d104      	bne.n	80090aa <tcp_process+0x782>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	60da      	str	r2, [r3, #12]
 80090a8:	e005      	b.n	80090b6 <tcp_process+0x78e>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ef      	bne.n	8009096 <tcp_process+0x76e>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	60da      	str	r2, [r3, #12]
 80090bc:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <tcp_process+0x7c4>)
 80090be:	2201      	movs	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	220a      	movs	r2, #10
 80090c6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <tcp_process+0x7c8>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]
 80090d0:	4a07      	ldr	r2, [pc, #28]	; (80090f0 <tcp_process+0x7c8>)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	f003 fb41 	bl	800c75c <tcp_timer_needed>
      }
      break;
 80090da:	e032      	b.n	8009142 <tcp_process+0x81a>
 80090dc:	20000679 	.word	0x20000679
 80090e0:	20000678 	.word	0x20000678
 80090e4:	20000670 	.word	0x20000670
 80090e8:	2000220c 	.word	0x2000220c
 80090ec:	20002208 	.word	0x20002208
 80090f0:	2000221c 	.word	0x2000221c
    case LAST_ACK:
      tcp_receive(pcb);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f945 	bl	8009384 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80090fa:	4b16      	ldr	r3, [pc, #88]	; (8009154 <tcp_process+0x82c>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 0310 	and.w	r3, r3, #16
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01f      	beq.n	8009146 <tcp_process+0x81e>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800910a:	4b13      	ldr	r3, [pc, #76]	; (8009158 <tcp_process+0x830>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d119      	bne.n	8009146 <tcp_process+0x81e>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d115      	bne.n	8009146 <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800911a:	4b10      	ldr	r3, [pc, #64]	; (800915c <tcp_process+0x834>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f043 0310 	orr.w	r3, r3, #16
 8009122:	b2da      	uxtb	r2, r3
 8009124:	4b0d      	ldr	r3, [pc, #52]	; (800915c <tcp_process+0x834>)
 8009126:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009128:	e00d      	b.n	8009146 <tcp_process+0x81e>
    default:
      break;
 800912a:	bf00      	nop
 800912c:	e00c      	b.n	8009148 <tcp_process+0x820>
      break;
 800912e:	bf00      	nop
 8009130:	e00a      	b.n	8009148 <tcp_process+0x820>
      break;
 8009132:	bf00      	nop
 8009134:	e008      	b.n	8009148 <tcp_process+0x820>
      break;
 8009136:	bf00      	nop
 8009138:	e006      	b.n	8009148 <tcp_process+0x820>
      break;
 800913a:	bf00      	nop
 800913c:	e004      	b.n	8009148 <tcp_process+0x820>
      break;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <tcp_process+0x820>
      break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <tcp_process+0x820>
      break;
 8009146:	bf00      	nop
  }
  return ERR_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3724      	adds	r7, #36	; 0x24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	bf00      	nop
 8009154:	20000678 	.word	0x20000678
 8009158:	20000670 	.word	0x20000670
 800915c:	20000679 	.word	0x20000679

08009160 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009160:	b5b0      	push	{r4, r5, r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <tcp_oos_insert_segment+0x28>
 8009170:	4b3d      	ldr	r3, [pc, #244]	; (8009268 <tcp_oos_insert_segment+0x108>)
 8009172:	f240 422c 	movw	r2, #1068	; 0x42c
 8009176:	493d      	ldr	r1, [pc, #244]	; (800926c <tcp_oos_insert_segment+0x10c>)
 8009178:	483d      	ldr	r0, [pc, #244]	; (8009270 <tcp_oos_insert_segment+0x110>)
 800917a:	f009 ff35 	bl	8012fe8 <iprintf>
 800917e:	2000      	movs	r0, #0
 8009180:	f00a f834 	bl	80131ec <fflush>
 8009184:	f009 ff79 	bl	801307a <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	899b      	ldrh	r3, [r3, #12]
 800918e:	b29b      	uxth	r3, r3
 8009190:	4618      	mov	r0, r3
 8009192:	f7fa f8f9 	bl	8003388 <lwip_htons>
 8009196:	4603      	mov	r3, r0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d027      	beq.n	80091f2 <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80091a2:	6838      	ldr	r0, [r7, #0]
 80091a4:	f7fe f83e 	bl	8007224 <tcp_segs_free>
    next = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	e055      	b.n	800925a <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	899b      	ldrh	r3, [r3, #12]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fa f8e6 	bl	8003388 <lwip_htons>
 80091bc:	4603      	mov	r3, r0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691c      	ldr	r4, [r3, #16]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	899b      	ldrh	r3, [r3, #12]
 80091d2:	b29d      	uxth	r5, r3
 80091d4:	2001      	movs	r0, #1
 80091d6:	f7fa f8d7 	bl	8003388 <lwip_htons>
 80091da:	4603      	mov	r3, r0
 80091dc:	432b      	orrs	r3, r5
 80091de:	b29b      	uxth	r3, r3
 80091e0:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7fe f82d 	bl	800724c <tcp_seg_free>
    while (next &&
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	891b      	ldrh	r3, [r3, #8]
 80091fc:	461a      	mov	r2, r3
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <tcp_oos_insert_segment+0x114>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	441a      	add	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	8909      	ldrh	r1, [r1, #8]
 800920e:	440b      	add	r3, r1
 8009210:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009212:	2b00      	cmp	r3, #0
 8009214:	dacb      	bge.n	80091ae <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d01e      	beq.n	800925a <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	891b      	ldrh	r3, [r3, #8]
 8009226:	4619      	mov	r1, r3
 8009228:	4b12      	ldr	r3, [pc, #72]	; (8009274 <tcp_oos_insert_segment+0x114>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	440b      	add	r3, r1
 800922e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009230:	2b00      	cmp	r3, #0
 8009232:	da12      	bge.n	800925a <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b29a      	uxth	r2, r3
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <tcp_oos_insert_segment+0x114>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	891b      	ldrh	r3, [r3, #8]
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fc f831 	bl	80052bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	601a      	str	r2, [r3, #0]
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bdb0      	pop	{r4, r5, r7, pc}
 8009268:	08015f68 	.word	0x08015f68
 800926c:	08016218 	.word	0x08016218
 8009270:	08015fa4 	.word	0x08015fa4
 8009274:	2000066c 	.word	0x2000066c

08009278 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009286:	e048      	b.n	800931a <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	f7fc fa0a 	bl	80056b0 <pbuf_clen>
 800929c:	4603      	mov	r3, r0
 800929e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092a6:	8a7a      	ldrh	r2, [r7, #18]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d90b      	bls.n	80092c4 <tcp_free_acked_segments+0x4c>
 80092ac:	4b2f      	ldr	r3, [pc, #188]	; (800936c <tcp_free_acked_segments+0xf4>)
 80092ae:	f240 4264 	movw	r2, #1124	; 0x464
 80092b2:	492f      	ldr	r1, [pc, #188]	; (8009370 <tcp_free_acked_segments+0xf8>)
 80092b4:	482f      	ldr	r0, [pc, #188]	; (8009374 <tcp_free_acked_segments+0xfc>)
 80092b6:	f009 fe97 	bl	8012fe8 <iprintf>
 80092ba:	2000      	movs	r0, #0
 80092bc:	f009 ff96 	bl	80131ec <fflush>
 80092c0:	f009 fedb 	bl	801307a <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80092ca:	8a7b      	ldrh	r3, [r7, #18]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	891a      	ldrh	r2, [r3, #8]
 80092da:	4b27      	ldr	r3, [pc, #156]	; (8009378 <tcp_free_acked_segments+0x100>)
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	4413      	add	r3, r2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	4b25      	ldr	r3, [pc, #148]	; (8009378 <tcp_free_acked_segments+0x100>)
 80092e4:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f7fd ffb0 	bl	800724c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d011      	beq.n	800931a <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10e      	bne.n	800931a <tcp_free_acked_segments+0xa2>
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <tcp_free_acked_segments+0xa2>
 8009302:	4b1a      	ldr	r3, [pc, #104]	; (800936c <tcp_free_acked_segments+0xf4>)
 8009304:	f240 426f 	movw	r2, #1135	; 0x46f
 8009308:	491c      	ldr	r1, [pc, #112]	; (800937c <tcp_free_acked_segments+0x104>)
 800930a:	481a      	ldr	r0, [pc, #104]	; (8009374 <tcp_free_acked_segments+0xfc>)
 800930c:	f009 fe6c 	bl	8012fe8 <iprintf>
 8009310:	2000      	movs	r0, #0
 8009312:	f009 ff6b 	bl	80131ec <fflush>
 8009316:	f009 feb0 	bl	801307a <abort>
  while (seg_list != NULL &&
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d020      	beq.n	8009362 <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009320:	4b17      	ldr	r3, [pc, #92]	; (8009380 <tcp_free_acked_segments+0x108>)
 8009322:	681c      	ldr	r4, [r3, #0]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f7fa f841 	bl	80033b2 <lwip_htonl>
 8009330:	4605      	mov	r5, r0
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	891b      	ldrh	r3, [r3, #8]
 8009336:	461e      	mov	r6, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	899b      	ldrh	r3, [r3, #12]
 800933e:	b29b      	uxth	r3, r3
 8009340:	4618      	mov	r0, r3
 8009342:	f7fa f821 	bl	8003388 <lwip_htons>
 8009346:	4603      	mov	r3, r0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <tcp_free_acked_segments+0xde>
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <tcp_free_acked_segments+0xe0>
 8009356:	2300      	movs	r3, #0
 8009358:	4433      	add	r3, r6
 800935a:	442b      	add	r3, r5
 800935c:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 800935e:	2b00      	cmp	r3, #0
 8009360:	da92      	bge.n	8009288 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009362:	68bb      	ldr	r3, [r7, #8]
}
 8009364:	4618      	mov	r0, r3
 8009366:	371c      	adds	r7, #28
 8009368:	46bd      	mov	sp, r7
 800936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936c:	08015f68 	.word	0x08015f68
 8009370:	08016240 	.word	0x08016240
 8009374:	08015fa4 	.word	0x08015fa4
 8009378:	20000674 	.word	0x20000674
 800937c:	08016268 	.word	0x08016268
 8009380:	20000670 	.word	0x20000670

08009384 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009384:	b5b0      	push	{r4, r5, r7, lr}
 8009386:	b094      	sub	sp, #80	; 0x50
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10b      	bne.n	80093aa <tcp_receive+0x26>
 8009392:	4bab      	ldr	r3, [pc, #684]	; (8009640 <tcp_receive+0x2bc>)
 8009394:	f240 4287 	movw	r2, #1159	; 0x487
 8009398:	49aa      	ldr	r1, [pc, #680]	; (8009644 <tcp_receive+0x2c0>)
 800939a:	48ab      	ldr	r0, [pc, #684]	; (8009648 <tcp_receive+0x2c4>)
 800939c:	f009 fe24 	bl	8012fe8 <iprintf>
 80093a0:	2000      	movs	r0, #0
 80093a2:	f009 ff23 	bl	80131ec <fflush>
 80093a6:	f009 fe68 	bl	801307a <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7d1b      	ldrb	r3, [r3, #20]
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d80b      	bhi.n	80093ca <tcp_receive+0x46>
 80093b2:	4ba3      	ldr	r3, [pc, #652]	; (8009640 <tcp_receive+0x2bc>)
 80093b4:	f44f 6291 	mov.w	r2, #1160	; 0x488
 80093b8:	49a4      	ldr	r1, [pc, #656]	; (800964c <tcp_receive+0x2c8>)
 80093ba:	48a3      	ldr	r0, [pc, #652]	; (8009648 <tcp_receive+0x2c4>)
 80093bc:	f009 fe14 	bl	8012fe8 <iprintf>
 80093c0:	2000      	movs	r0, #0
 80093c2:	f009 ff13 	bl	80131ec <fflush>
 80093c6:	f009 fe58 	bl	801307a <abort>

  if (flags & TCP_ACK) {
 80093ca:	4ba1      	ldr	r3, [pc, #644]	; (8009650 <tcp_receive+0x2cc>)
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	f003 0310 	and.w	r3, r3, #16
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8263 	beq.w	800989e <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e4:	4413      	add	r3, r2
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ec:	4b99      	ldr	r3, [pc, #612]	; (8009654 <tcp_receive+0x2d0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	db1b      	blt.n	800942e <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093fa:	4b96      	ldr	r3, [pc, #600]	; (8009654 <tcp_receive+0x2d0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80093fe:	429a      	cmp	r2, r3
 8009400:	d106      	bne.n	8009410 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009406:	4b94      	ldr	r3, [pc, #592]	; (8009658 <tcp_receive+0x2d4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	db0e      	blt.n	800942e <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009414:	4b90      	ldr	r3, [pc, #576]	; (8009658 <tcp_receive+0x2d4>)
 8009416:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009418:	429a      	cmp	r2, r3
 800941a:	d125      	bne.n	8009468 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800941c:	4b8f      	ldr	r3, [pc, #572]	; (800965c <tcp_receive+0x2d8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	89db      	ldrh	r3, [r3, #14]
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800942a:	429a      	cmp	r2, r3
 800942c:	d91c      	bls.n	8009468 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800942e:	4b8b      	ldr	r3, [pc, #556]	; (800965c <tcp_receive+0x2d8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	89db      	ldrh	r3, [r3, #14]
 8009434:	b29a      	uxth	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009448:	429a      	cmp	r2, r3
 800944a:	d205      	bcs.n	8009458 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009458:	4b7e      	ldr	r3, [pc, #504]	; (8009654 <tcp_receive+0x2d0>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009460:	4b7d      	ldr	r3, [pc, #500]	; (8009658 <tcp_receive+0x2d4>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800946c:	4b7a      	ldr	r3, [pc, #488]	; (8009658 <tcp_receive+0x2d4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	db58      	blt.n	8009528 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8009476:	4b7a      	ldr	r3, [pc, #488]	; (8009660 <tcp_receive+0x2dc>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 81af 	bne.w	80097de <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800948a:	441a      	add	r2, r3
 800948c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948e:	429a      	cmp	r2, r3
 8009490:	f040 81a5 	bne.w	80097de <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800949a:	2b00      	cmp	r3, #0
 800949c:	f2c0 819f 	blt.w	80097de <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a4:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <tcp_receive+0x2d4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	f040 8198 	bne.w	80097de <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094be:	429a      	cmp	r2, r3
 80094c0:	d907      	bls.n	80094d2 <tcp_receive+0x14e>
                ++pcb->dupacks;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094c8:	3301      	adds	r3, #1
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d91b      	bls.n	8009514 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094e6:	4413      	add	r3, r2
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d30a      	bcc.n	800950a <tcp_receive+0x186>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094fe:	4413      	add	r3, r2
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009508:	e004      	b.n	8009514 <tcp_receive+0x190>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800951a:	2b02      	cmp	r3, #2
 800951c:	f240 815f 	bls.w	80097de <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f002 fced 	bl	800bf00 <tcp_rexmit_fast>
 8009526:	e15a      	b.n	80097de <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009528:	4b4b      	ldr	r3, [pc, #300]	; (8009658 <tcp_receive+0x2d4>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	f2c0 814d 	blt.w	80097d4 <tcp_receive+0x450>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800953e:	4b46      	ldr	r3, [pc, #280]	; (8009658 <tcp_receive+0x2d4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	f2c0 8145 	blt.w	80097d4 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	8b5b      	ldrh	r3, [r3, #26]
 800954e:	f003 0304 	and.w	r3, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	d010      	beq.n	8009578 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	8b5b      	ldrh	r3, [r3, #26]
 800955a:	f023 0304 	bic.w	r3, r3, #4
 800955e:	b29a      	uxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009586:	10db      	asrs	r3, r3, #3
 8009588:	b21b      	sxth	r3, r3
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009592:	b29b      	uxth	r3, r3
 8009594:	4413      	add	r3, r2
 8009596:	b29b      	uxth	r3, r3
 8009598:	b21a      	sxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80095a0:	4b2d      	ldr	r3, [pc, #180]	; (8009658 <tcp_receive+0x2d4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80095b8:	4b27      	ldr	r3, [pc, #156]	; (8009658 <tcp_receive+0x2d4>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	7d1b      	ldrb	r3, [r3, #20]
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	f240 8096 	bls.w	80096f6 <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d244      	bcs.n	8009664 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8b5b      	ldrh	r3, [r3, #26]
 80095de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <tcp_receive+0x266>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <tcp_receive+0x268>
 80095ea:	2302      	movs	r3, #2
 80095ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80095f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095fa:	fb12 f303 	smulbb	r3, r2, r3
 80095fe:	b29a      	uxth	r2, r3
 8009600:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009602:	4293      	cmp	r3, r2
 8009604:	bf28      	it	cs
 8009606:	4613      	movcs	r3, r2
 8009608:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009612:	4413      	add	r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800961c:	429a      	cmp	r2, r3
 800961e:	d309      	bcc.n	8009634 <tcp_receive+0x2b0>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009628:	4413      	add	r3, r2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009632:	e060      	b.n	80096f6 <tcp_receive+0x372>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800963a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800963e:	e05a      	b.n	80096f6 <tcp_receive+0x372>
 8009640:	08015f68 	.word	0x08015f68
 8009644:	08016288 	.word	0x08016288
 8009648:	08015fa4 	.word	0x08015fa4
 800964c:	080162a4 	.word	0x080162a4
 8009650:	20000678 	.word	0x20000678
 8009654:	2000066c 	.word	0x2000066c
 8009658:	20000670 	.word	0x20000670
 800965c:	2000065c 	.word	0x2000065c
 8009660:	20000676 	.word	0x20000676
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800966a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800966c:	4413      	add	r3, r2
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009676:	429a      	cmp	r2, r3
 8009678:	d309      	bcc.n	800968e <tcp_receive+0x30a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009680:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009682:	4413      	add	r3, r2
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800968c:	e004      	b.n	8009698 <tcp_receive+0x314>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d326      	bcc.n	80096f6 <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096c8:	4413      	add	r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d30a      	bcc.n	80096ec <tcp_receive+0x368>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096e0:	4413      	add	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80096ea:	e004      	b.n	80096f6 <tcp_receive+0x372>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096fe:	4aa0      	ldr	r2, [pc, #640]	; (8009980 <tcp_receive+0x5fc>)
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff fdb9 	bl	8009278 <tcp_free_acked_segments>
 8009706:	4602      	mov	r2, r0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	4a9b      	ldr	r2, [pc, #620]	; (8009984 <tcp_receive+0x600>)
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fdae 	bl	8009278 <tcp_free_acked_segments>
 800971c:	4602      	mov	r2, r0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009726:	2b00      	cmp	r3, #0
 8009728:	d104      	bne.n	8009734 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009730:	861a      	strh	r2, [r3, #48]	; 0x30
 8009732:	e002      	b.n	800973a <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009756:	4b8c      	ldr	r3, [pc, #560]	; (8009988 <tcp_receive+0x604>)
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	4413      	add	r3, r2
 800975c:	b29a      	uxth	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8b5b      	ldrh	r3, [r3, #26]
 8009768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800976c:	2b00      	cmp	r3, #0
 800976e:	d035      	beq.n	80097dc <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009774:	2b00      	cmp	r3, #0
 8009776:	d118      	bne.n	80097aa <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4618      	mov	r0, r3
 800978a:	f7f9 fe12 	bl	80033b2 <lwip_htonl>
 800978e:	4602      	mov	r2, r0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009794:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 8009796:	2b00      	cmp	r3, #0
 8009798:	db20      	blt.n	80097dc <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8b5b      	ldrh	r3, [r3, #26]
 800979e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097a8:	e018      	b.n	80097dc <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f9 fdfd 	bl	80033b2 <lwip_htonl>
 80097b8:	4602      	mov	r2, r0
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	db0b      	blt.n	80097dc <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	8b5b      	ldrh	r3, [r3, #26]
 80097c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097d2:	e003      	b.n	80097dc <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 fe3f 	bl	800c458 <tcp_send_empty_ack>
 80097da:	e000      	b.n	80097de <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097dc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d05b      	beq.n	800989e <tcp_receive+0x51a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ea:	4b68      	ldr	r3, [pc, #416]	; (800998c <tcp_receive+0x608>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	da54      	bge.n	800989e <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80097f4:	4b66      	ldr	r3, [pc, #408]	; (8009990 <tcp_receive+0x60c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	b29b      	uxth	r3, r3
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009808:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009812:	10db      	asrs	r3, r3, #3
 8009814:	b21b      	sxth	r3, r3
 8009816:	b29b      	uxth	r3, r3
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	b29b      	uxth	r3, r3
 800981c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009826:	b29a      	uxth	r2, r3
 8009828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800982c:	4413      	add	r3, r2
 800982e:	b29b      	uxth	r3, r3
 8009830:	b21a      	sxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009836:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800983a:	2b00      	cmp	r3, #0
 800983c:	da05      	bge.n	800984a <tcp_receive+0x4c6>
        m = (s16_t) - m;
 800983e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009842:	425b      	negs	r3, r3
 8009844:	b29b      	uxth	r3, r3
 8009846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800984a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009854:	109b      	asrs	r3, r3, #2
 8009856:	b21b      	sxth	r3, r3
 8009858:	b29b      	uxth	r3, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	b29b      	uxth	r3, r3
 800985e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009868:	b29a      	uxth	r2, r3
 800986a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800986e:	4413      	add	r3, r2
 8009870:	b29b      	uxth	r3, r3
 8009872:	b21a      	sxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800987e:	10db      	asrs	r3, r3, #3
 8009880:	b21b      	sxth	r3, r3
 8009882:	b29a      	uxth	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	4413      	add	r3, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	b21a      	sxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800989e:	4b3d      	ldr	r3, [pc, #244]	; (8009994 <tcp_receive+0x610>)
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 850f 	beq.w	800a2c6 <tcp_receive+0xf42>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7d1b      	ldrb	r3, [r3, #20]
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	f200 850a 	bhi.w	800a2c6 <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098b6:	4b38      	ldr	r3, [pc, #224]	; (8009998 <tcp_receive+0x614>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f2c0 809e 	blt.w	8009a00 <tcp_receive+0x67c>
 80098c4:	4b33      	ldr	r3, [pc, #204]	; (8009994 <tcp_receive+0x610>)
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	4b33      	ldr	r3, [pc, #204]	; (8009998 <tcp_receive+0x614>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	441a      	add	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	425b      	negs	r3, r3
 80098d6:	4413      	add	r3, r2
 80098d8:	3b01      	subs	r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f2c0 8090 	blt.w	8009a00 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80098e0:	4b2e      	ldr	r3, [pc, #184]	; (800999c <tcp_receive+0x618>)
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ea:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <tcp_receive+0x614>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80098f2:	4b2a      	ldr	r3, [pc, #168]	; (800999c <tcp_receive+0x618>)
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <tcp_receive+0x58e>
 80098fa:	4b29      	ldr	r3, [pc, #164]	; (80099a0 <tcp_receive+0x61c>)
 80098fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8009900:	4928      	ldr	r1, [pc, #160]	; (80099a4 <tcp_receive+0x620>)
 8009902:	4829      	ldr	r0, [pc, #164]	; (80099a8 <tcp_receive+0x624>)
 8009904:	f009 fb70 	bl	8012fe8 <iprintf>
 8009908:	2000      	movs	r0, #0
 800990a:	f009 fc6f 	bl	80131ec <fflush>
 800990e:	f009 fbb4 	bl	801307a <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009918:	4293      	cmp	r3, r2
 800991a:	d90b      	bls.n	8009934 <tcp_receive+0x5b0>
 800991c:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <tcp_receive+0x61c>)
 800991e:	f240 529b 	movw	r2, #1435	; 0x59b
 8009922:	4922      	ldr	r1, [pc, #136]	; (80099ac <tcp_receive+0x628>)
 8009924:	4820      	ldr	r0, [pc, #128]	; (80099a8 <tcp_receive+0x624>)
 8009926:	f009 fb5f 	bl	8012fe8 <iprintf>
 800992a:	2000      	movs	r0, #0
 800992c:	f009 fc5e 	bl	80131ec <fflush>
 8009930:	f009 fba3 	bl	801307a <abort>
      off = (u16_t)off32;
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800993a:	4b18      	ldr	r3, [pc, #96]	; (800999c <tcp_receive+0x618>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	891b      	ldrh	r3, [r3, #8]
 8009940:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009944:	429a      	cmp	r2, r3
 8009946:	d90b      	bls.n	8009960 <tcp_receive+0x5dc>
 8009948:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <tcp_receive+0x61c>)
 800994a:	f240 529d 	movw	r2, #1437	; 0x59d
 800994e:	4918      	ldr	r1, [pc, #96]	; (80099b0 <tcp_receive+0x62c>)
 8009950:	4815      	ldr	r0, [pc, #84]	; (80099a8 <tcp_receive+0x624>)
 8009952:	f009 fb49 	bl	8012fe8 <iprintf>
 8009956:	2000      	movs	r0, #0
 8009958:	f009 fc48 	bl	80131ec <fflush>
 800995c:	f009 fb8d 	bl	801307a <abort>
      inseg.len -= off;
 8009960:	4b0e      	ldr	r3, [pc, #56]	; (800999c <tcp_receive+0x618>)
 8009962:	891a      	ldrh	r2, [r3, #8]
 8009964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	b29a      	uxth	r2, r3
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <tcp_receive+0x618>)
 800996e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <tcp_receive+0x618>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	891a      	ldrh	r2, [r3, #8]
 8009976:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 800997e:	e029      	b.n	80099d4 <tcp_receive+0x650>
 8009980:	080162c0 	.word	0x080162c0
 8009984:	080162c8 	.word	0x080162c8
 8009988:	20000674 	.word	0x20000674
 800998c:	20000670 	.word	0x20000670
 8009990:	20002210 	.word	0x20002210
 8009994:	20000676 	.word	0x20000676
 8009998:	2000066c 	.word	0x2000066c
 800999c:	20000648 	.word	0x20000648
 80099a0:	08015f68 	.word	0x08015f68
 80099a4:	080162d0 	.word	0x080162d0
 80099a8:	08015fa4 	.word	0x08015fa4
 80099ac:	080162e0 	.word	0x080162e0
 80099b0:	080162f0 	.word	0x080162f0
        off -= p->len;
 80099b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b6:	895b      	ldrh	r3, [r3, #10]
 80099b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80099c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80099c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ca:	2200      	movs	r2, #0
 80099cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80099ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 80099d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d6:	895b      	ldrh	r3, [r3, #10]
 80099d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80099dc:	429a      	cmp	r2, r3
 80099de:	d8e9      	bhi.n	80099b4 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80099e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80099e4:	4619      	mov	r1, r3
 80099e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80099e8:	f7fb fd8a 	bl	8005500 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80099ec:	4b94      	ldr	r3, [pc, #592]	; (8009c40 <tcp_receive+0x8bc>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099f4:	4993      	ldr	r1, [pc, #588]	; (8009c44 <tcp_receive+0x8c0>)
 80099f6:	600a      	str	r2, [r1, #0]
 80099f8:	4a92      	ldr	r2, [pc, #584]	; (8009c44 <tcp_receive+0x8c0>)
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80099fe:	e00d      	b.n	8009a1c <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009a00:	4b90      	ldr	r3, [pc, #576]	; (8009c44 <tcp_receive+0x8c0>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da06      	bge.n	8009a1c <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8b5b      	ldrh	r3, [r3, #26]
 8009a12:	f043 0302 	orr.w	r3, r3, #2
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a1c:	4b89      	ldr	r3, [pc, #548]	; (8009c44 <tcp_receive+0x8c0>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f2c0 8448 	blt.w	800a2bc <tcp_receive+0xf38>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009a34:	441a      	add	r2, r3
 8009a36:	4b83      	ldr	r3, [pc, #524]	; (8009c44 <tcp_receive+0x8c0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	425b      	negs	r3, r3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f2c0 843b 	blt.w	800a2bc <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a4a:	4b7e      	ldr	r3, [pc, #504]	; (8009c44 <tcp_receive+0x8c0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	f040 82ab 	bne.w	8009faa <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009a54:	4b7a      	ldr	r3, [pc, #488]	; (8009c40 <tcp_receive+0x8bc>)
 8009a56:	891c      	ldrh	r4, [r3, #8]
 8009a58:	4b79      	ldr	r3, [pc, #484]	; (8009c40 <tcp_receive+0x8bc>)
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	899b      	ldrh	r3, [r3, #12]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f9 fc91 	bl	8003388 <lwip_htons>
 8009a66:	4603      	mov	r3, r0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <tcp_receive+0x6f2>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <tcp_receive+0x6f4>
 8009a76:	2300      	movs	r3, #0
 8009a78:	4423      	add	r3, r4
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	4b72      	ldr	r3, [pc, #456]	; (8009c48 <tcp_receive+0x8c4>)
 8009a7e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a84:	4b70      	ldr	r3, [pc, #448]	; (8009c48 <tcp_receive+0x8c4>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d27a      	bcs.n	8009b82 <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a8c:	4b6c      	ldr	r3, [pc, #432]	; (8009c40 <tcp_receive+0x8bc>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	899b      	ldrh	r3, [r3, #12]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f9 fc77 	bl	8003388 <lwip_htons>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01f      	beq.n	8009ae6 <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009aa6:	4b66      	ldr	r3, [pc, #408]	; (8009c40 <tcp_receive+0x8bc>)
 8009aa8:	691c      	ldr	r4, [r3, #16]
 8009aaa:	4b65      	ldr	r3, [pc, #404]	; (8009c40 <tcp_receive+0x8bc>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	899b      	ldrh	r3, [r3, #12]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	b21b      	sxth	r3, r3
 8009ab4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ab8:	b21d      	sxth	r5, r3
 8009aba:	4b61      	ldr	r3, [pc, #388]	; (8009c40 <tcp_receive+0x8bc>)
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f9 fc60 	bl	8003388 <lwip_htons>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7f9 fc57 	bl	8003388 <lwip_htons>
 8009ada:	4603      	mov	r3, r0
 8009adc:	b21b      	sxth	r3, r3
 8009ade:	432b      	orrs	r3, r5
 8009ae0:	b21b      	sxth	r3, r3
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009aea:	4b55      	ldr	r3, [pc, #340]	; (8009c40 <tcp_receive+0x8bc>)
 8009aec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009aee:	4b54      	ldr	r3, [pc, #336]	; (8009c40 <tcp_receive+0x8bc>)
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	899b      	ldrh	r3, [r3, #12]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f9 fc46 	bl	8003388 <lwip_htons>
 8009afc:	4603      	mov	r3, r0
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <tcp_receive+0x790>
            inseg.len -= 1;
 8009b08:	4b4d      	ldr	r3, [pc, #308]	; (8009c40 <tcp_receive+0x8bc>)
 8009b0a:	891b      	ldrh	r3, [r3, #8]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	4b4b      	ldr	r3, [pc, #300]	; (8009c40 <tcp_receive+0x8bc>)
 8009b12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009b14:	4b4a      	ldr	r3, [pc, #296]	; (8009c40 <tcp_receive+0x8bc>)
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	4b49      	ldr	r3, [pc, #292]	; (8009c40 <tcp_receive+0x8bc>)
 8009b1a:	891b      	ldrh	r3, [r3, #8]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fb fbcc 	bl	80052bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b24:	4b46      	ldr	r3, [pc, #280]	; (8009c40 <tcp_receive+0x8bc>)
 8009b26:	891c      	ldrh	r4, [r3, #8]
 8009b28:	4b45      	ldr	r3, [pc, #276]	; (8009c40 <tcp_receive+0x8bc>)
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	899b      	ldrh	r3, [r3, #12]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f9 fc29 	bl	8003388 <lwip_htons>
 8009b36:	4603      	mov	r3, r0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <tcp_receive+0x7c2>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <tcp_receive+0x7c4>
 8009b46:	2300      	movs	r3, #0
 8009b48:	4423      	add	r3, r4
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	4b3e      	ldr	r3, [pc, #248]	; (8009c48 <tcp_receive+0x8c4>)
 8009b4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8009b50:	4b3d      	ldr	r3, [pc, #244]	; (8009c48 <tcp_receive+0x8c4>)
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	4b3b      	ldr	r3, [pc, #236]	; (8009c44 <tcp_receive+0x8c0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b64:	440b      	add	r3, r1
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d00b      	beq.n	8009b82 <tcp_receive+0x7fe>
 8009b6a:	4b38      	ldr	r3, [pc, #224]	; (8009c4c <tcp_receive+0x8c8>)
 8009b6c:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8009b70:	4937      	ldr	r1, [pc, #220]	; (8009c50 <tcp_receive+0x8cc>)
 8009b72:	4838      	ldr	r0, [pc, #224]	; (8009c54 <tcp_receive+0x8d0>)
 8009b74:	f009 fa38 	bl	8012fe8 <iprintf>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f009 fb37 	bl	80131ec <fflush>
 8009b7e:	f009 fa7c 	bl	801307a <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80ea 	beq.w	8009d60 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b8c:	4b2c      	ldr	r3, [pc, #176]	; (8009c40 <tcp_receive+0x8bc>)
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	899b      	ldrh	r3, [r3, #12]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f9 fbf7 	bl	8003388 <lwip_htons>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ba6:	e00a      	b.n	8009bbe <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bac:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009bb8:	6a38      	ldr	r0, [r7, #32]
 8009bba:	f7fd fb47 	bl	800724c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f0      	bne.n	8009ba8 <tcp_receive+0x824>
 8009bc6:	e0cb      	b.n	8009d60 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bcc:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009bce:	e050      	b.n	8009c72 <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	899b      	ldrh	r3, [r3, #12]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7f9 fbd5 	bl	8003388 <lwip_htons>
 8009bde:	4603      	mov	r3, r0
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d03b      	beq.n	8009c62 <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009bea:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <tcp_receive+0x8bc>)
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	899b      	ldrh	r3, [r3, #12]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7f9 fbc8 	bl	8003388 <lwip_htons>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d12e      	bne.n	8009c62 <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <tcp_receive+0x8bc>)
 8009c06:	691c      	ldr	r4, [r3, #16]
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <tcp_receive+0x8bc>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	899b      	ldrh	r3, [r3, #12]
 8009c0e:	b29d      	uxth	r5, r3
 8009c10:	2001      	movs	r0, #1
 8009c12:	f7f9 fbb9 	bl	8003388 <lwip_htons>
 8009c16:	4603      	mov	r3, r0
 8009c18:	432b      	orrs	r3, r5
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c1e:	4b08      	ldr	r3, [pc, #32]	; (8009c40 <tcp_receive+0x8bc>)
 8009c20:	891c      	ldrh	r4, [r3, #8]
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <tcp_receive+0x8bc>)
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	899b      	ldrh	r3, [r3, #12]
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f9 fbac 	bl	8003388 <lwip_htons>
 8009c30:	4603      	mov	r3, r0
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00d      	beq.n	8009c58 <tcp_receive+0x8d4>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e00c      	b.n	8009c5a <tcp_receive+0x8d6>
 8009c40:	20000648 	.word	0x20000648
 8009c44:	2000066c 	.word	0x2000066c
 8009c48:	20000676 	.word	0x20000676
 8009c4c:	08015f68 	.word	0x08015f68
 8009c50:	08016300 	.word	0x08016300
 8009c54:	08015fa4 	.word	0x08015fa4
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4423      	add	r3, r4
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	4b9f      	ldr	r3, [pc, #636]	; (8009edc <tcp_receive+0xb58>)
 8009c60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c64:	61fb      	str	r3, [r7, #28]
              next = next->next;
 8009c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 8009c6c:	69f8      	ldr	r0, [r7, #28]
 8009c6e:	f7fd faed 	bl	800724c <tcp_seg_free>
            while (next &&
 8009c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00e      	beq.n	8009c96 <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009c78:	4b98      	ldr	r3, [pc, #608]	; (8009edc <tcp_receive+0xb58>)
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b98      	ldr	r3, [pc, #608]	; (8009ee0 <tcp_receive+0xb5c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	441a      	add	r2, r3
 8009c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c8c:	8909      	ldrh	r1, [r1, #8]
 8009c8e:	440b      	add	r3, r1
 8009c90:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	da9c      	bge.n	8009bd0 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d05e      	beq.n	8009d5a <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 8009c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	4b8e      	ldr	r3, [pc, #568]	; (8009edc <tcp_receive+0xb58>)
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4b8d      	ldr	r3, [pc, #564]	; (8009ee0 <tcp_receive+0xb5c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	440b      	add	r3, r1
 8009cae:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da52      	bge.n	8009d5a <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	4b88      	ldr	r3, [pc, #544]	; (8009ee0 <tcp_receive+0xb5c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	4b87      	ldr	r3, [pc, #540]	; (8009ee4 <tcp_receive+0xb60>)
 8009cc8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009cca:	4b86      	ldr	r3, [pc, #536]	; (8009ee4 <tcp_receive+0xb60>)
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	899b      	ldrh	r3, [r3, #12]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f9 fb58 	bl	8003388 <lwip_htons>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <tcp_receive+0x96c>
                inseg.len -= 1;
 8009ce4:	4b7f      	ldr	r3, [pc, #508]	; (8009ee4 <tcp_receive+0xb60>)
 8009ce6:	891b      	ldrh	r3, [r3, #8]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	4b7d      	ldr	r3, [pc, #500]	; (8009ee4 <tcp_receive+0xb60>)
 8009cee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009cf0:	4b7c      	ldr	r3, [pc, #496]	; (8009ee4 <tcp_receive+0xb60>)
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	4b7b      	ldr	r3, [pc, #492]	; (8009ee4 <tcp_receive+0xb60>)
 8009cf6:	891b      	ldrh	r3, [r3, #8]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7fb fade 	bl	80052bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d00:	4b78      	ldr	r3, [pc, #480]	; (8009ee4 <tcp_receive+0xb60>)
 8009d02:	891c      	ldrh	r4, [r3, #8]
 8009d04:	4b77      	ldr	r3, [pc, #476]	; (8009ee4 <tcp_receive+0xb60>)
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f9 fb3b 	bl	8003388 <lwip_htons>
 8009d12:	4603      	mov	r3, r0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <tcp_receive+0x99e>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <tcp_receive+0x9a0>
 8009d22:	2300      	movs	r3, #0
 8009d24:	4423      	add	r3, r4
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	4b6c      	ldr	r3, [pc, #432]	; (8009edc <tcp_receive+0xb58>)
 8009d2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8009d2c:	4b6b      	ldr	r3, [pc, #428]	; (8009edc <tcp_receive+0xb58>)
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	4b6b      	ldr	r3, [pc, #428]	; (8009ee0 <tcp_receive+0xb5c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	441a      	add	r2, r3
 8009d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d00b      	beq.n	8009d5a <tcp_receive+0x9d6>
 8009d42:	4b69      	ldr	r3, [pc, #420]	; (8009ee8 <tcp_receive+0xb64>)
 8009d44:	f240 6203 	movw	r2, #1539	; 0x603
 8009d48:	4968      	ldr	r1, [pc, #416]	; (8009eec <tcp_receive+0xb68>)
 8009d4a:	4869      	ldr	r0, [pc, #420]	; (8009ef0 <tcp_receive+0xb6c>)
 8009d4c:	f009 f94c 	bl	8012fe8 <iprintf>
 8009d50:	2000      	movs	r0, #0
 8009d52:	f009 fa4b 	bl	80131ec <fflush>
 8009d56:	f009 f990 	bl	801307a <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d5e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009d60:	4b5e      	ldr	r3, [pc, #376]	; (8009edc <tcp_receive+0xb58>)
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	461a      	mov	r2, r3
 8009d66:	4b5e      	ldr	r3, [pc, #376]	; (8009ee0 <tcp_receive+0xb5c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d74:	4b59      	ldr	r3, [pc, #356]	; (8009edc <tcp_receive+0xb58>)
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d20b      	bcs.n	8009d94 <tcp_receive+0xa10>
 8009d7c:	4b5a      	ldr	r3, [pc, #360]	; (8009ee8 <tcp_receive+0xb64>)
 8009d7e:	f240 620d 	movw	r2, #1549	; 0x60d
 8009d82:	495c      	ldr	r1, [pc, #368]	; (8009ef4 <tcp_receive+0xb70>)
 8009d84:	485a      	ldr	r0, [pc, #360]	; (8009ef0 <tcp_receive+0xb6c>)
 8009d86:	f009 f92f 	bl	8012fe8 <iprintf>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f009 fa2e 	bl	80131ec <fflush>
 8009d90:	f009 f973 	bl	801307a <abort>
        pcb->rcv_wnd -= tcplen;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d98:	4b50      	ldr	r3, [pc, #320]	; (8009edc <tcp_receive+0xb58>)
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fc fbcf 	bl	8006548 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009daa:	4b4e      	ldr	r3, [pc, #312]	; (8009ee4 <tcp_receive+0xb60>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	891b      	ldrh	r3, [r3, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <tcp_receive+0xa3e>
          recv_data = inseg.p;
 8009db4:	4b4b      	ldr	r3, [pc, #300]	; (8009ee4 <tcp_receive+0xb60>)
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	4a4f      	ldr	r2, [pc, #316]	; (8009ef8 <tcp_receive+0xb74>)
 8009dba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 8009dbc:	4b49      	ldr	r3, [pc, #292]	; (8009ee4 <tcp_receive+0xb60>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009dc2:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <tcp_receive+0xb60>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	899b      	ldrh	r3, [r3, #12]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f9 fadc 	bl	8003388 <lwip_htons>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 80bc 	beq.w	8009f56 <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009dde:	4b47      	ldr	r3, [pc, #284]	; (8009efc <tcp_receive+0xb78>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f043 0320 	orr.w	r3, r3, #32
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	4b44      	ldr	r3, [pc, #272]	; (8009efc <tcp_receive+0xb78>)
 8009dea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009dec:	e0b3      	b.n	8009f56 <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df2:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	4a38      	ldr	r2, [pc, #224]	; (8009ee0 <tcp_receive+0xb5c>)
 8009dfe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	891b      	ldrh	r3, [r3, #8]
 8009e04:	461c      	mov	r4, r3
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	899b      	ldrh	r3, [r3, #12]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7f9 faba 	bl	8003388 <lwip_htons>
 8009e14:	4603      	mov	r3, r0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <tcp_receive+0xaa0>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <tcp_receive+0xaa2>
 8009e24:	2300      	movs	r3, #0
 8009e26:	4423      	add	r3, r4
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e2c:	441a      	add	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e36:	461c      	mov	r4, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	891b      	ldrh	r3, [r3, #8]
 8009e3c:	461d      	mov	r5, r3
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	899b      	ldrh	r3, [r3, #12]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f9 fa9e 	bl	8003388 <lwip_htons>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <tcp_receive+0xad8>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <tcp_receive+0xada>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	442b      	add	r3, r5
 8009e60:	429c      	cmp	r4, r3
 8009e62:	d20b      	bcs.n	8009e7c <tcp_receive+0xaf8>
 8009e64:	4b20      	ldr	r3, [pc, #128]	; (8009ee8 <tcp_receive+0xb64>)
 8009e66:	f240 6232 	movw	r2, #1586	; 0x632
 8009e6a:	4925      	ldr	r1, [pc, #148]	; (8009f00 <tcp_receive+0xb7c>)
 8009e6c:	4820      	ldr	r0, [pc, #128]	; (8009ef0 <tcp_receive+0xb6c>)
 8009e6e:	f009 f8bb 	bl	8012fe8 <iprintf>
 8009e72:	2000      	movs	r0, #0
 8009e74:	f009 f9ba 	bl	80131ec <fflush>
 8009e78:	f009 f8ff 	bl	801307a <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	891b      	ldrh	r3, [r3, #8]
 8009e80:	461c      	mov	r4, r3
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	899b      	ldrh	r3, [r3, #12]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f9 fa7c 	bl	8003388 <lwip_htons>
 8009e90:	4603      	mov	r3, r0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <tcp_receive+0xb1c>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <tcp_receive+0xb1e>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	18e1      	adds	r1, r4, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ea8:	b28b      	uxth	r3, r1
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fc fb48 	bl	8006548 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	891b      	ldrh	r3, [r3, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d027      	beq.n	8009f12 <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <tcp_receive+0xb74>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01c      	beq.n	8009f04 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 8009eca:	4b0b      	ldr	r3, [pc, #44]	; (8009ef8 <tcp_receive+0xb74>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f7fb fc31 	bl	800573c <pbuf_cat>
 8009eda:	e017      	b.n	8009f0c <tcp_receive+0xb88>
 8009edc:	20000676 	.word	0x20000676
 8009ee0:	2000066c 	.word	0x2000066c
 8009ee4:	20000648 	.word	0x20000648
 8009ee8:	08015f68 	.word	0x08015f68
 8009eec:	08016338 	.word	0x08016338
 8009ef0:	08015fa4 	.word	0x08015fa4
 8009ef4:	08016374 	.word	0x08016374
 8009ef8:	2000067c 	.word	0x2000067c
 8009efc:	20000679 	.word	0x20000679
 8009f00:	08016394 	.word	0x08016394
            } else {
              recv_data = cseg->p;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a73      	ldr	r2, [pc, #460]	; (800a0d8 <tcp_receive+0xd54>)
 8009f0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	899b      	ldrh	r3, [r3, #12]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f9 fa34 	bl	8003388 <lwip_htons>
 8009f20:	4603      	mov	r3, r0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00d      	beq.n	8009f48 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009f2c:	4b6b      	ldr	r3, [pc, #428]	; (800a0dc <tcp_receive+0xd58>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	4b69      	ldr	r3, [pc, #420]	; (800a0dc <tcp_receive+0xd58>)
 8009f38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7d1b      	ldrb	r3, [r3, #20]
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d102      	bne.n	8009f48 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2207      	movs	r2, #7
 8009f46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009f50:	69b8      	ldr	r0, [r7, #24]
 8009f52:	f7fd f97b 	bl	800724c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d008      	beq.n	8009f70 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	f43f af3f 	beq.w	8009dee <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	8b5b      	ldrh	r3, [r3, #26]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00e      	beq.n	8009f9a <tcp_receive+0xc16>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8b5b      	ldrh	r3, [r3, #26]
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	835a      	strh	r2, [r3, #26]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	8b5b      	ldrh	r3, [r3, #26]
 8009f8e:	f043 0302 	orr.w	r3, r3, #2
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009f98:	e194      	b.n	800a2c4 <tcp_receive+0xf40>
        tcp_ack(pcb);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8b5b      	ldrh	r3, [r3, #26]
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fa8:	e18c      	b.n	800a2c4 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009fb2:	484b      	ldr	r0, [pc, #300]	; (800a0e0 <tcp_receive+0xd5c>)
 8009fb4:	f7fd f962 	bl	800727c <tcp_seg_copy>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	675a      	str	r2, [r3, #116]	; 0x74
 8009fbe:	e179      	b.n	800a2b4 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fca:	e161      	b.n	800a290 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4b44      	ldr	r3, [pc, #272]	; (800a0e4 <tcp_receive+0xd60>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d122      	bne.n	800a020 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009fda:	4b41      	ldr	r3, [pc, #260]	; (800a0e0 <tcp_receive+0xd5c>)
 8009fdc:	891a      	ldrh	r2, [r3, #8]
 8009fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe0:	891b      	ldrh	r3, [r3, #8]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	f240 8159 	bls.w	800a29a <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8156 	beq.w	800a29e <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8009ff2:	483b      	ldr	r0, [pc, #236]	; (800a0e0 <tcp_receive+0xd5c>)
 8009ff4:	f7fd f942 	bl	800727c <tcp_seg_copy>
 8009ff8:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 8150 	beq.w	800a2a2 <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <tcp_receive+0xc8c>
                    prev->next = cseg;
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e002      	b.n	800a016 <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff f8a1 	bl	8009160 <tcp_oos_insert_segment>
                }
                break;
 800a01e:	e140      	b.n	800a2a2 <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	2b00      	cmp	r3, #0
 800a024:	d117      	bne.n	800a056 <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <tcp_receive+0xd60>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	da58      	bge.n	800a0e8 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a036:	482a      	ldr	r0, [pc, #168]	; (800a0e0 <tcp_receive+0xd5c>)
 800a038:	f7fd f920 	bl	800727c <tcp_seg_copy>
 800a03c:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8130 	beq.w	800a2a6 <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a04c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a04e:	6978      	ldr	r0, [r7, #20]
 800a050:	f7ff f886 	bl	8009160 <tcp_oos_insert_segment>
                  }
                  break;
 800a054:	e127      	b.n	800a2a6 <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a056:	4b23      	ldr	r3, [pc, #140]	; (800a0e4 <tcp_receive+0xd60>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	2b00      	cmp	r3, #0
 800a066:	db3f      	blt.n	800a0e8 <tcp_receive+0xd64>
 800a068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <tcp_receive+0xd60>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	db36      	blt.n	800a0e8 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a07a:	4819      	ldr	r0, [pc, #100]	; (800a0e0 <tcp_receive+0xd5c>)
 800a07c:	f7fd f8fe 	bl	800727c <tcp_seg_copy>
 800a080:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8110 	beq.w	800a2aa <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a08a:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <tcp_receive+0xd60>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a096:	8909      	ldrh	r1, [r1, #8]
 800a098:	440b      	add	r3, r1
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da12      	bge.n	800a0c6 <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a0a0:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <tcp_receive+0xd60>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	891b      	ldrh	r3, [r3, #8]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fb f8fb 	bl	80052bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a0cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ce:	6938      	ldr	r0, [r7, #16]
 800a0d0:	f7ff f846 	bl	8009160 <tcp_oos_insert_segment>
                  }
                  break;
 800a0d4:	e0e9      	b.n	800a2aa <tcp_receive+0xf26>
 800a0d6:	bf00      	nop
 800a0d8:	2000067c 	.word	0x2000067c
 800a0dc:	20000679 	.word	0x20000679
 800a0e0:	20000648 	.word	0x20000648
 800a0e4:	2000066c 	.word	0x2000066c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ea:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 80ca 	bne.w	800a28a <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4b81      	ldr	r3, [pc, #516]	; (800a304 <tcp_receive+0xf80>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a102:	2b00      	cmp	r3, #0
 800a104:	f280 80c1 	bge.w	800a28a <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	899b      	ldrh	r3, [r3, #12]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4618      	mov	r0, r3
 800a112:	f7f9 f939 	bl	8003388 <lwip_htons>
 800a116:	4603      	mov	r3, r0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f040 80c5 	bne.w	800a2ae <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a124:	4878      	ldr	r0, [pc, #480]	; (800a308 <tcp_receive+0xf84>)
 800a126:	f7fd f8a9 	bl	800727c <tcp_seg_copy>
 800a12a:	4602      	mov	r2, r0
 800a12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 80bc 	beq.w	800a2b2 <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a13a:	4b72      	ldr	r3, [pc, #456]	; (800a304 <tcp_receive+0xf80>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a146:	8909      	ldrh	r1, [r1, #8]
 800a148:	440b      	add	r3, r1
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da12      	bge.n	800a176 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a150:	4b6c      	ldr	r3, [pc, #432]	; (800a304 <tcp_receive+0xf80>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	b29a      	uxth	r2, r3
 800a156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	b29a      	uxth	r2, r3
 800a162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a164:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fb f8a3 	bl	80052bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a17e:	441a      	add	r2, r3
 800a180:	4b62      	ldr	r3, [pc, #392]	; (800a30c <tcp_receive+0xf88>)
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	4619      	mov	r1, r3
 800a186:	4b5f      	ldr	r3, [pc, #380]	; (800a304 <tcp_receive+0xf80>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	440b      	add	r3, r1
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f280 808f 	bge.w	800a2b2 <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	899b      	ldrh	r3, [r3, #12]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7f9 f8f2 	bl	8003388 <lwip_htons>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d022      	beq.n	800a1f6 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	691c      	ldr	r4, [r3, #16]
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	899b      	ldrh	r3, [r3, #12]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	b21b      	sxth	r3, r3
 800a1c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1c6:	b21d      	sxth	r5, r3
 800a1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	899b      	ldrh	r3, [r3, #12]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7f9 f8d8 	bl	8003388 <lwip_htons>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7f9 f8cf 	bl	8003388 <lwip_htons>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	b21b      	sxth	r3, r3
 800a1ee:	432b      	orrs	r3, r5
 800a1f0:	b21b      	sxth	r3, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1fe:	b291      	uxth	r1, r2
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a204:	440a      	add	r2, r1
 800a206:	b291      	uxth	r1, r2
 800a208:	4a3e      	ldr	r2, [pc, #248]	; (800a304 <tcp_receive+0xf80>)
 800a20a:	6812      	ldr	r2, [r2, #0]
 800a20c:	b292      	uxth	r2, r2
 800a20e:	1a8a      	subs	r2, r1, r2
 800a210:	b292      	uxth	r2, r2
 800a212:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	891b      	ldrh	r3, [r3, #8]
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fb f84a 	bl	80052bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	891c      	ldrh	r4, [r3, #8]
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	899b      	ldrh	r3, [r3, #12]
 800a236:	b29b      	uxth	r3, r3
 800a238:	4618      	mov	r0, r3
 800a23a:	f7f9 f8a5 	bl	8003388 <lwip_htons>
 800a23e:	4603      	mov	r3, r0
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <tcp_receive+0xeca>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <tcp_receive+0xecc>
 800a24e:	2300      	movs	r3, #0
 800a250:	4423      	add	r3, r4
 800a252:	b29a      	uxth	r2, r3
 800a254:	4b2d      	ldr	r3, [pc, #180]	; (800a30c <tcp_receive+0xf88>)
 800a256:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800a258:	4b2c      	ldr	r3, [pc, #176]	; (800a30c <tcp_receive+0xf88>)
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b29      	ldr	r3, [pc, #164]	; (800a304 <tcp_receive+0xf80>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	441a      	add	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a26c:	440b      	add	r3, r1
 800a26e:	429a      	cmp	r2, r3
 800a270:	d01f      	beq.n	800a2b2 <tcp_receive+0xf2e>
 800a272:	4b27      	ldr	r3, [pc, #156]	; (800a310 <tcp_receive+0xf8c>)
 800a274:	f240 7209 	movw	r2, #1801	; 0x709
 800a278:	4926      	ldr	r1, [pc, #152]	; (800a314 <tcp_receive+0xf90>)
 800a27a:	4827      	ldr	r0, [pc, #156]	; (800a318 <tcp_receive+0xf94>)
 800a27c:	f008 feb4 	bl	8012fe8 <iprintf>
 800a280:	2000      	movs	r0, #0
 800a282:	f008 ffb3 	bl	80131ec <fflush>
 800a286:	f008 fef8 	bl	801307a <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a292:	2b00      	cmp	r3, #0
 800a294:	f47f ae9a 	bne.w	8009fcc <tcp_receive+0xc48>
 800a298:	e00c      	b.n	800a2b4 <tcp_receive+0xf30>
                break;
 800a29a:	bf00      	nop
 800a29c:	e00a      	b.n	800a2b4 <tcp_receive+0xf30>
                  break;
 800a29e:	bf00      	nop
 800a2a0:	e008      	b.n	800a2b4 <tcp_receive+0xf30>
                break;
 800a2a2:	bf00      	nop
 800a2a4:	e006      	b.n	800a2b4 <tcp_receive+0xf30>
                  break;
 800a2a6:	bf00      	nop
 800a2a8:	e004      	b.n	800a2b4 <tcp_receive+0xf30>
                  break;
 800a2aa:	bf00      	nop
 800a2ac:	e002      	b.n	800a2b4 <tcp_receive+0xf30>
                  break;
 800a2ae:	bf00      	nop
 800a2b0:	e000      	b.n	800a2b4 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a2b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 f8cf 	bl	800c458 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a2ba:	e003      	b.n	800a2c4 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f002 f8cb 	bl	800c458 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a2c2:	e01b      	b.n	800a2fc <tcp_receive+0xf78>
 800a2c4:	e01a      	b.n	800a2fc <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <tcp_receive+0xf80>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	db0b      	blt.n	800a2ec <tcp_receive+0xf68>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a2dc:	441a      	add	r2, r3
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <tcp_receive+0xf80>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	425b      	negs	r3, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da07      	bge.n	800a2fc <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8b5b      	ldrh	r3, [r3, #26]
 800a2f0:	f043 0302 	orr.w	r3, r3, #2
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a2fa:	e7ff      	b.n	800a2fc <tcp_receive+0xf78>
 800a2fc:	bf00      	nop
 800a2fe:	3750      	adds	r7, #80	; 0x50
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}
 800a304:	2000066c 	.word	0x2000066c
 800a308:	20000648 	.word	0x20000648
 800a30c:	20000676 	.word	0x20000676
 800a310:	08015f68 	.word	0x08015f68
 800a314:	08016300 	.word	0x08016300
 800a318:	08015fa4 	.word	0x08015fa4

0800a31c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <tcp_get_next_optbyte+0x5c>)
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	b291      	uxth	r1, r2
 800a32a:	4a13      	ldr	r2, [pc, #76]	; (800a378 <tcp_get_next_optbyte+0x5c>)
 800a32c:	8011      	strh	r1, [r2, #0]
 800a32e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <tcp_get_next_optbyte+0x60>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <tcp_get_next_optbyte+0x26>
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <tcp_get_next_optbyte+0x64>)
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d208      	bcs.n	800a354 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <tcp_get_next_optbyte+0x68>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3314      	adds	r3, #20
 800a348:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a34a:	88fb      	ldrh	r3, [r7, #6]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	e00b      	b.n	800a36c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	4b09      	ldr	r3, [pc, #36]	; (800a380 <tcp_get_next_optbyte+0x64>)
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <tcp_get_next_optbyte+0x60>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	797b      	ldrb	r3, [r7, #5]
 800a368:	4413      	add	r3, r2
 800a36a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	20000668 	.word	0x20000668
 800a37c:	20000664 	.word	0x20000664
 800a380:	20000662 	.word	0x20000662
 800a384:	2000065c 	.word	0x2000065c

0800a388 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <tcp_parseopt+0x26>
 800a396:	4b34      	ldr	r3, [pc, #208]	; (800a468 <tcp_parseopt+0xe0>)
 800a398:	f240 728d 	movw	r2, #1933	; 0x78d
 800a39c:	4933      	ldr	r1, [pc, #204]	; (800a46c <tcp_parseopt+0xe4>)
 800a39e:	4834      	ldr	r0, [pc, #208]	; (800a470 <tcp_parseopt+0xe8>)
 800a3a0:	f008 fe22 	bl	8012fe8 <iprintf>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f008 ff21 	bl	80131ec <fflush>
 800a3aa:	f008 fe66 	bl	801307a <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a3ae:	4b31      	ldr	r3, [pc, #196]	; (800a474 <tcp_parseopt+0xec>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d054      	beq.n	800a460 <tcp_parseopt+0xd8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a3b6:	4b30      	ldr	r3, [pc, #192]	; (800a478 <tcp_parseopt+0xf0>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	801a      	strh	r2, [r3, #0]
 800a3bc:	e044      	b.n	800a448 <tcp_parseopt+0xc0>
      u8_t opt = tcp_get_next_optbyte();
 800a3be:	f7ff ffad 	bl	800a31c <tcp_get_next_optbyte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d03d      	beq.n	800a448 <tcp_parseopt+0xc0>
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d002      	beq.n	800a3d6 <tcp_parseopt+0x4e>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d040      	beq.n	800a456 <tcp_parseopt+0xce>
 800a3d4:	e027      	b.n	800a426 <tcp_parseopt+0x9e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a3d6:	f7ff ffa1 	bl	800a31c <tcp_get_next_optbyte>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d13c      	bne.n	800a45a <tcp_parseopt+0xd2>
 800a3e0:	4b25      	ldr	r3, [pc, #148]	; (800a478 <tcp_parseopt+0xf0>)
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	4a23      	ldr	r2, [pc, #140]	; (800a474 <tcp_parseopt+0xec>)
 800a3e8:	8812      	ldrh	r2, [r2, #0]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	dc35      	bgt.n	800a45a <tcp_parseopt+0xd2>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a3ee:	f7ff ff95 	bl	800a31c <tcp_get_next_optbyte>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a3fa:	f7ff ff8f 	bl	800a31c <tcp_get_next_optbyte>
 800a3fe:	4603      	mov	r3, r0
 800a400:	b29a      	uxth	r2, r3
 800a402:	89bb      	ldrh	r3, [r7, #12]
 800a404:	4313      	orrs	r3, r2
 800a406:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a408:	89bb      	ldrh	r3, [r7, #12]
 800a40a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a40e:	4293      	cmp	r3, r2
 800a410:	d804      	bhi.n	800a41c <tcp_parseopt+0x94>
 800a412:	89bb      	ldrh	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <tcp_parseopt+0x94>
 800a418:	89ba      	ldrh	r2, [r7, #12]
 800a41a:	e001      	b.n	800a420 <tcp_parseopt+0x98>
 800a41c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a424:	e010      	b.n	800a448 <tcp_parseopt+0xc0>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a426:	f7ff ff79 	bl	800a31c <tcp_get_next_optbyte>
 800a42a:	4603      	mov	r3, r0
 800a42c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d914      	bls.n	800a45e <tcp_parseopt+0xd6>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a434:	7afb      	ldrb	r3, [r7, #11]
 800a436:	b29a      	uxth	r2, r3
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <tcp_parseopt+0xf0>)
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	4413      	add	r3, r2
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3b02      	subs	r3, #2
 800a442:	b29a      	uxth	r2, r3
 800a444:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <tcp_parseopt+0xf0>)
 800a446:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a448:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <tcp_parseopt+0xf0>)
 800a44a:	881a      	ldrh	r2, [r3, #0]
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <tcp_parseopt+0xec>)
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d3b4      	bcc.n	800a3be <tcp_parseopt+0x36>
 800a454:	e004      	b.n	800a460 <tcp_parseopt+0xd8>
          return;
 800a456:	bf00      	nop
 800a458:	e002      	b.n	800a460 <tcp_parseopt+0xd8>
            return;
 800a45a:	bf00      	nop
 800a45c:	e000      	b.n	800a460 <tcp_parseopt+0xd8>
            return;
 800a45e:	bf00      	nop
      }
    }
  }
}
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	08015f68 	.word	0x08015f68
 800a46c:	080163b8 	.word	0x080163b8
 800a470:	08015fa4 	.word	0x08015fa4
 800a474:	20000660 	.word	0x20000660
 800a478:	20000668 	.word	0x20000668

0800a47c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <tcp_trigger_input_pcb_close+0x1c>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	f043 0310 	orr.w	r3, r3, #16
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	4b03      	ldr	r3, [pc, #12]	; (800a498 <tcp_trigger_input_pcb_close+0x1c>)
 800a48c:	701a      	strb	r2, [r3, #0]
}
 800a48e:	bf00      	nop
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	20000679 	.word	0x20000679

0800a49c <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <tcp_route+0x28>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	7a1b      	ldrb	r3, [r3, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	7a1b      	ldrb	r3, [r3, #8]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fa fd62 	bl	8004f84 <netif_get_by_index>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	e003      	b.n	800a4cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7f9 f8d3 	bl	8003670 <ip4_route>
 800a4ca:	4603      	mov	r3, r0
  }
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <tcp_create_segment+0x2c>
 800a4ea:	4b52      	ldr	r3, [pc, #328]	; (800a634 <tcp_create_segment+0x160>)
 800a4ec:	22a6      	movs	r2, #166	; 0xa6
 800a4ee:	4952      	ldr	r1, [pc, #328]	; (800a638 <tcp_create_segment+0x164>)
 800a4f0:	4852      	ldr	r0, [pc, #328]	; (800a63c <tcp_create_segment+0x168>)
 800a4f2:	f008 fd79 	bl	8012fe8 <iprintf>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f008 fe78 	bl	80131ec <fflush>
 800a4fc:	f008 fdbd 	bl	801307a <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <tcp_create_segment+0x48>
 800a506:	4b4b      	ldr	r3, [pc, #300]	; (800a634 <tcp_create_segment+0x160>)
 800a508:	22a7      	movs	r2, #167	; 0xa7
 800a50a:	494d      	ldr	r1, [pc, #308]	; (800a640 <tcp_create_segment+0x16c>)
 800a50c:	484b      	ldr	r0, [pc, #300]	; (800a63c <tcp_create_segment+0x168>)
 800a50e:	f008 fd6b 	bl	8012fe8 <iprintf>
 800a512:	2000      	movs	r0, #0
 800a514:	f008 fe6a 	bl	80131ec <fflush>
 800a518:	f008 fdaf 	bl	801307a <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a51c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <tcp_create_segment+0x58>
 800a528:	2304      	movs	r3, #4
 800a52a:	e000      	b.n	800a52e <tcp_create_segment+0x5a>
 800a52c:	2300      	movs	r3, #0
 800a52e:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a530:	2002      	movs	r0, #2
 800a532:	f7fa f9f5 	bl	8004920 <memp_malloc>
 800a536:	6138      	str	r0, [r7, #16]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a53e:	68b8      	ldr	r0, [r7, #8]
 800a540:	f7fb f834 	bl	80055ac <pbuf_free>
    return NULL;
 800a544:	2300      	movs	r3, #0
 800a546:	e071      	b.n	800a62c <tcp_create_segment+0x158>
  }
  seg->flags = optflags;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a54e:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	891a      	ldrh	r2, [r3, #8]
 800a560:	7dfb      	ldrb	r3, [r7, #23]
 800a562:	b29b      	uxth	r3, r3
 800a564:	429a      	cmp	r2, r3
 800a566:	d20a      	bcs.n	800a57e <tcp_create_segment+0xaa>
 800a568:	4b32      	ldr	r3, [pc, #200]	; (800a634 <tcp_create_segment+0x160>)
 800a56a:	22b3      	movs	r2, #179	; 0xb3
 800a56c:	4935      	ldr	r1, [pc, #212]	; (800a644 <tcp_create_segment+0x170>)
 800a56e:	4833      	ldr	r0, [pc, #204]	; (800a63c <tcp_create_segment+0x168>)
 800a570:	f008 fd3a 	bl	8012fe8 <iprintf>
 800a574:	2000      	movs	r0, #0
 800a576:	f008 fe39 	bl	80131ec <fflush>
 800a57a:	f008 fd7e 	bl	801307a <abort>
  seg->len = p->tot_len - optlen;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	891a      	ldrh	r2, [r3, #8]
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	b29b      	uxth	r3, r3
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	b29a      	uxth	r2, r3
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2200      	movs	r2, #0
 800a592:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a594:	2114      	movs	r1, #20
 800a596:	68b8      	ldr	r0, [r7, #8]
 800a598:	f7fa ffa2 	bl	80054e0 <pbuf_add_header>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <tcp_create_segment+0xe8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800a5a2:	4b29      	ldr	r3, [pc, #164]	; (800a648 <tcp_create_segment+0x174>)
 800a5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	4b26      	ldr	r3, [pc, #152]	; (800a648 <tcp_create_segment+0x174>)
 800a5ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    tcp_seg_free(seg);
 800a5b2:	6938      	ldr	r0, [r7, #16]
 800a5b4:	f7fc fe4a 	bl	800724c <tcp_seg_free>
    return NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e037      	b.n	800a62c <tcp_create_segment+0x158>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	691c      	ldr	r4, [r3, #16]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8adb      	ldrh	r3, [r3, #22]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f8 feda 	bl	8003388 <lwip_htons>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	691c      	ldr	r4, [r3, #16]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	8b1b      	ldrh	r3, [r3, #24]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f8 fed1 	bl	8003388 <lwip_htons>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	691c      	ldr	r4, [r3, #16]
 800a5ee:	6838      	ldr	r0, [r7, #0]
 800a5f0:	f7f8 fedf 	bl	80033b2 <lwip_htonl>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	691c      	ldr	r4, [r3, #16]
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	089b      	lsrs	r3, r3, #2
 800a600:	b2db      	uxtb	r3, r3
 800a602:	b29b      	uxth	r3, r3
 800a604:	3305      	adds	r3, #5
 800a606:	b29b      	uxth	r3, r3
 800a608:	031b      	lsls	r3, r3, #12
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4313      	orrs	r3, r2
 800a612:	b29b      	uxth	r3, r3
 800a614:	4618      	mov	r0, r3
 800a616:	f7f8 feb7 	bl	8003388 <lwip_htons>
 800a61a:	4603      	mov	r3, r0
 800a61c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2200      	movs	r2, #0
 800a624:	749a      	strb	r2, [r3, #18]
 800a626:	2200      	movs	r2, #0
 800a628:	74da      	strb	r2, [r3, #19]
  return seg;
 800a62a:	693b      	ldr	r3, [r7, #16]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	bd90      	pop	{r4, r7, pc}
 800a634:	080163d4 	.word	0x080163d4
 800a638:	080163f8 	.word	0x080163f8
 800a63c:	08016418 	.word	0x08016418
 800a640:	08016440 	.word	0x08016440
 800a644:	08016464 	.word	0x08016464
 800a648:	20002164 	.word	0x20002164

0800a64c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]
 800a658:	460b      	mov	r3, r1
 800a65a:	81bb      	strh	r3, [r7, #12]
 800a65c:	4613      	mov	r3, r2
 800a65e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a660:	89bb      	ldrh	r3, [r7, #12]
 800a662:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10a      	bne.n	800a680 <tcp_pbuf_prealloc+0x34>
 800a66a:	4b36      	ldr	r3, [pc, #216]	; (800a744 <tcp_pbuf_prealloc+0xf8>)
 800a66c:	22eb      	movs	r2, #235	; 0xeb
 800a66e:	4936      	ldr	r1, [pc, #216]	; (800a748 <tcp_pbuf_prealloc+0xfc>)
 800a670:	4836      	ldr	r0, [pc, #216]	; (800a74c <tcp_pbuf_prealloc+0x100>)
 800a672:	f008 fcb9 	bl	8012fe8 <iprintf>
 800a676:	2000      	movs	r0, #0
 800a678:	f008 fdb8 	bl	80131ec <fflush>
 800a67c:	f008 fcfd 	bl	801307a <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <tcp_pbuf_prealloc+0x50>
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <tcp_pbuf_prealloc+0xf8>)
 800a688:	22ec      	movs	r2, #236	; 0xec
 800a68a:	4931      	ldr	r1, [pc, #196]	; (800a750 <tcp_pbuf_prealloc+0x104>)
 800a68c:	482f      	ldr	r0, [pc, #188]	; (800a74c <tcp_pbuf_prealloc+0x100>)
 800a68e:	f008 fcab 	bl	8012fe8 <iprintf>
 800a692:	2000      	movs	r0, #0
 800a694:	f008 fdaa 	bl	80131ec <fflush>
 800a698:	f008 fcef 	bl	801307a <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a69c:	89ba      	ldrh	r2, [r7, #12]
 800a69e:	897b      	ldrh	r3, [r7, #10]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d21f      	bcs.n	800a6e4 <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a6a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d111      	bne.n	800a6d4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	8b5b      	ldrh	r3, [r3, #26]
 800a6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d113      	bne.n	800a6e4 <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800a6bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d007      	beq.n	800a6d4 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a6d4:	89bb      	ldrh	r3, [r7, #12]
 800a6d6:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	bf28      	it	cs
 800a6e0:	4613      	movcs	r3, r2
 800a6e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a6e4:	8af9      	ldrh	r1, [r7, #22]
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fa fcf3 	bl	80050d8 <pbuf_alloc>
 800a6f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e01e      	b.n	800a73c <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <tcp_pbuf_prealloc+0xd2>
 800a706:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <tcp_pbuf_prealloc+0xf8>)
 800a708:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800a70c:	4911      	ldr	r1, [pc, #68]	; (800a754 <tcp_pbuf_prealloc+0x108>)
 800a70e:	480f      	ldr	r0, [pc, #60]	; (800a74c <tcp_pbuf_prealloc+0x100>)
 800a710:	f008 fc6a 	bl	8012fe8 <iprintf>
 800a714:	2000      	movs	r0, #0
 800a716:	f008 fd69 	bl	80131ec <fflush>
 800a71a:	f008 fcae 	bl	801307a <abort>
  *oversize = p->len - length;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	895a      	ldrh	r2, [r3, #10]
 800a722:	89bb      	ldrh	r3, [r7, #12]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	89ba      	ldrh	r2, [r7, #12]
 800a730:	811a      	strh	r2, [r3, #8]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	891a      	ldrh	r2, [r3, #8]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	815a      	strh	r2, [r3, #10]
  return p;
 800a73a:	693b      	ldr	r3, [r7, #16]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	080163d4 	.word	0x080163d4
 800a748:	0801647c 	.word	0x0801647c
 800a74c:	08016418 	.word	0x08016418
 800a750:	080164a0 	.word	0x080164a0
 800a754:	080164c0 	.word	0x080164c0

0800a758 <tcp_write_checks>:
 * @param len length of data to send (checked against snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <tcp_write_checks+0x2a>
 800a76a:	4b3e      	ldr	r3, [pc, #248]	; (800a864 <tcp_write_checks+0x10c>)
 800a76c:	f44f 729b 	mov.w	r2, #310	; 0x136
 800a770:	493d      	ldr	r1, [pc, #244]	; (800a868 <tcp_write_checks+0x110>)
 800a772:	483e      	ldr	r0, [pc, #248]	; (800a86c <tcp_write_checks+0x114>)
 800a774:	f008 fc38 	bl	8012fe8 <iprintf>
 800a778:	2000      	movs	r0, #0
 800a77a:	f008 fd37 	bl	80131ec <fflush>
 800a77e:	f008 fc7c 	bl	801307a <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	7d1b      	ldrb	r3, [r3, #20]
 800a786:	2b04      	cmp	r3, #4
 800a788:	d00e      	beq.n	800a7a8 <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a78e:	2b07      	cmp	r3, #7
 800a790:	d00a      	beq.n	800a7a8 <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a796:	2b02      	cmp	r3, #2
 800a798:	d006      	beq.n	800a7a8 <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d002      	beq.n	800a7a8 <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a7a2:	f06f 030a 	mvn.w	r3, #10
 800a7a6:	e059      	b.n	800a85c <tcp_write_checks+0x104>
  } else if (len == 0) {
 800a7a8:	887b      	ldrh	r3, [r7, #2]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <tcp_write_checks+0x5a>
    return ERR_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e054      	b.n	800a85c <tcp_write_checks+0x104>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a7b8:	887a      	ldrh	r2, [r7, #2]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d909      	bls.n	800a7d2 <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	8b5b      	ldrh	r3, [r3, #26]
 800a7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d0:	e044      	b.n	800a85c <tcp_write_checks+0x104>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7d8:	2b07      	cmp	r3, #7
 800a7da:	d911      	bls.n	800a800 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800a7dc:	4b24      	ldr	r3, [pc, #144]	; (800a870 <tcp_write_checks+0x118>)
 800a7de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	4b22      	ldr	r3, [pc, #136]	; (800a870 <tcp_write_checks+0x118>)
 800a7e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8b5b      	ldrh	r3, [r3, #26]
 800a7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fe:	e02d      	b.n	800a85c <tcp_write_checks+0x104>
  }
  if (pcb->snd_queuelen != 0) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a806:	2b00      	cmp	r3, #0
 800a808:	d013      	beq.n	800a832 <tcp_write_checks+0xda>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d123      	bne.n	800a85a <tcp_write_checks+0x102>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d11f      	bne.n	800a85a <tcp_write_checks+0x102>
 800a81a:	4b12      	ldr	r3, [pc, #72]	; (800a864 <tcp_write_checks+0x10c>)
 800a81c:	f240 1259 	movw	r2, #345	; 0x159
 800a820:	4914      	ldr	r1, [pc, #80]	; (800a874 <tcp_write_checks+0x11c>)
 800a822:	4812      	ldr	r0, [pc, #72]	; (800a86c <tcp_write_checks+0x114>)
 800a824:	f008 fbe0 	bl	8012fe8 <iprintf>
 800a828:	2000      	movs	r0, #0
 800a82a:	f008 fcdf 	bl	80131ec <fflush>
 800a82e:	f008 fc24 	bl	801307a <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	2b00      	cmp	r3, #0
 800a838:	d103      	bne.n	800a842 <tcp_write_checks+0xea>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <tcp_write_checks+0x102>
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <tcp_write_checks+0x10c>)
 800a844:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800a848:	490b      	ldr	r1, [pc, #44]	; (800a878 <tcp_write_checks+0x120>)
 800a84a:	4808      	ldr	r0, [pc, #32]	; (800a86c <tcp_write_checks+0x114>)
 800a84c:	f008 fbcc 	bl	8012fe8 <iprintf>
 800a850:	2000      	movs	r0, #0
 800a852:	f008 fccb 	bl	80131ec <fflush>
 800a856:	f008 fc10 	bl	801307a <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	080163d4 	.word	0x080163d4
 800a868:	080164d4 	.word	0x080164d4
 800a86c:	08016418 	.word	0x08016418
 800a870:	20002164 	.word	0x20002164
 800a874:	080164f4 	.word	0x080164f4
 800a878:	08016530 	.word	0x08016530

0800a87c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a87c:	b5b0      	push	{r4, r5, r7, lr}
 800a87e:	b09a      	sub	sp, #104	; 0x68
 800a880:	af04      	add	r7, sp, #16
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4611      	mov	r1, r2
 800a888:	461a      	mov	r2, r3
 800a88a:	460b      	mov	r3, r1
 800a88c:	80fb      	strh	r3, [r7, #6]
 800a88e:	4613      	mov	r3, r2
 800a890:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	653b      	str	r3, [r7, #80]	; 0x50
 800a89a:	2300      	movs	r3, #0
 800a89c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a89e:	2300      	movs	r3, #0
 800a8a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <tcp_write+0x60>
 800a8c8:	4ba3      	ldr	r3, [pc, #652]	; (800ab58 <tcp_write+0x2dc>)
 800a8ca:	f240 12a1 	movw	r2, #417	; 0x1a1
 800a8ce:	49a3      	ldr	r1, [pc, #652]	; (800ab5c <tcp_write+0x2e0>)
 800a8d0:	48a3      	ldr	r0, [pc, #652]	; (800ab60 <tcp_write+0x2e4>)
 800a8d2:	f7f6 fce0 	bl	8001296 <lwip_win32_platform_diag>
 800a8d6:	f06f 030f 	mvn.w	r3, #15
 800a8da:	e3b0      	b.n	800b03e <tcp_write+0x7c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8e2:	085b      	lsrs	r3, r3, #1
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bf28      	it	cs
 800a8ee:	4613      	movcs	r3, r2
 800a8f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a8f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <tcp_write+0x82>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8fc:	e000      	b.n	800a900 <tcp_write+0x84>
 800a8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a900:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <tcp_write+0xa0>
 800a908:	4b93      	ldr	r3, [pc, #588]	; (800ab58 <tcp_write+0x2dc>)
 800a90a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800a90e:	4995      	ldr	r1, [pc, #596]	; (800ab64 <tcp_write+0x2e8>)
 800a910:	4893      	ldr	r0, [pc, #588]	; (800ab60 <tcp_write+0x2e4>)
 800a912:	f7f6 fcc0 	bl	8001296 <lwip_win32_platform_diag>
 800a916:	f06f 030f 	mvn.w	r3, #15
 800a91a:	e390      	b.n	800b03e <tcp_write+0x7c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a91c:	88fb      	ldrh	r3, [r7, #6]
 800a91e:	4619      	mov	r1, r3
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff ff19 	bl	800a758 <tcp_write_checks>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a92c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <tcp_write+0xbe>
    return err;
 800a934:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a938:	e381      	b.n	800b03e <tcp_write+0x7c2>
  }
  queuelen = pcb->snd_queuelen;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a940:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a944:	2300      	movs	r3, #0
 800a946:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 8136 	beq.w	800abc0 <tcp_write+0x344>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a958:	653b      	str	r3, [r7, #80]	; 0x50
 800a95a:	e002      	b.n	800a962 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 800a95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1f8      	bne.n	800a95c <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a96c:	7b1b      	ldrb	r3, [r3, #12]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <tcp_write+0xfe>
 800a976:	2304      	movs	r3, #4
 800a978:	e000      	b.n	800a97c <tcp_write+0x100>
 800a97a:	2300      	movs	r3, #0
 800a97c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a97e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a982:	891b      	ldrh	r3, [r3, #8]
 800a984:	4619      	mov	r1, r3
 800a986:	8c3b      	ldrh	r3, [r7, #32]
 800a988:	440b      	add	r3, r1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	da0b      	bge.n	800a9a6 <tcp_write+0x12a>
 800a98e:	4b72      	ldr	r3, [pc, #456]	; (800ab58 <tcp_write+0x2dc>)
 800a990:	f240 12e9 	movw	r2, #489	; 0x1e9
 800a994:	4974      	ldr	r1, [pc, #464]	; (800ab68 <tcp_write+0x2ec>)
 800a996:	4872      	ldr	r0, [pc, #456]	; (800ab60 <tcp_write+0x2e4>)
 800a998:	f008 fb26 	bl	8012fe8 <iprintf>
 800a99c:	2000      	movs	r0, #0
 800a99e:	f008 fc25 	bl	80131ec <fflush>
 800a9a2:	f008 fb6a 	bl	801307a <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a8:	891a      	ldrh	r2, [r3, #8]
 800a9aa:	8c3b      	ldrh	r3, [r7, #32]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	873b      	strh	r3, [r7, #56]	; 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800a9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9be:	895b      	ldrh	r3, [r3, #10]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d00b      	beq.n	800a9dc <tcp_write+0x160>
 800a9c4:	4b64      	ldr	r3, [pc, #400]	; (800ab58 <tcp_write+0x2dc>)
 800a9c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a9ca:	4968      	ldr	r1, [pc, #416]	; (800ab6c <tcp_write+0x2f0>)
 800a9cc:	4864      	ldr	r0, [pc, #400]	; (800ab60 <tcp_write+0x2e4>)
 800a9ce:	f008 fb0b 	bl	8012fe8 <iprintf>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	f008 fc0a 	bl	80131ec <fflush>
 800a9d8:	f008 fb4f 	bl	801307a <abort>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9e2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a9e4:	8a7b      	ldrh	r3, [r7, #18]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d02c      	beq.n	800aa44 <tcp_write+0x1c8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a9ea:	8a7b      	ldrh	r3, [r7, #18]
 800a9ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d20b      	bcs.n	800aa0a <tcp_write+0x18e>
 800a9f2:	4b59      	ldr	r3, [pc, #356]	; (800ab58 <tcp_write+0x2dc>)
 800a9f4:	f240 12fb 	movw	r2, #507	; 0x1fb
 800a9f8:	495d      	ldr	r1, [pc, #372]	; (800ab70 <tcp_write+0x2f4>)
 800a9fa:	4859      	ldr	r0, [pc, #356]	; (800ab60 <tcp_write+0x2e4>)
 800a9fc:	f008 faf4 	bl	8012fe8 <iprintf>
 800aa00:	2000      	movs	r0, #0
 800aa02:	f008 fbf3 	bl	80131ec <fflush>
 800aa06:	f008 fb38 	bl	801307a <abort>
      seg = last_unsent;
 800aa0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800aa0e:	8a7b      	ldrh	r3, [r7, #18]
 800aa10:	88fa      	ldrh	r2, [r7, #6]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d901      	bls.n	800aa1a <tcp_write+0x19e>
 800aa16:	8a7b      	ldrh	r3, [r7, #18]
 800aa18:	e000      	b.n	800aa1c <tcp_write+0x1a0>
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	bfa8      	it	ge
 800aa22:	4613      	movge	r3, r2
 800aa24:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800aa26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800aa32:	8a7a      	ldrh	r2, [r7, #18]
 800aa34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800aa3c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800aa3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800aa44:	8a7b      	ldrh	r3, [r7, #18]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d010      	beq.n	800aa6c <tcp_write+0x1f0>
 800aa4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d00b      	beq.n	800aa6c <tcp_write+0x1f0>
 800aa54:	4b40      	ldr	r3, [pc, #256]	; (800ab58 <tcp_write+0x2dc>)
 800aa56:	f240 2203 	movw	r2, #515	; 0x203
 800aa5a:	4946      	ldr	r1, [pc, #280]	; (800ab74 <tcp_write+0x2f8>)
 800aa5c:	4840      	ldr	r0, [pc, #256]	; (800ab60 <tcp_write+0x2e4>)
 800aa5e:	f008 fac3 	bl	8012fe8 <iprintf>
 800aa62:	2000      	movs	r0, #0
 800aa64:	f008 fbc2 	bl	80131ec <fflush>
 800aa68:	f008 fb07 	bl	801307a <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800aa6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	f080 8185 	bcs.w	800ad82 <tcp_write+0x506>
 800aa78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8181 	beq.w	800ad82 <tcp_write+0x506>
 800aa80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa82:	891b      	ldrh	r3, [r3, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 817c 	beq.w	800ad82 <tcp_write+0x506>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa90:	1ad2      	subs	r2, r2, r3
 800aa92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa94:	4293      	cmp	r3, r2
 800aa96:	bfa8      	it	ge
 800aa98:	4613      	movge	r3, r2
 800aa9a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800aa9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa9e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aaa0:	797b      	ldrb	r3, [r7, #5]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d029      	beq.n	800aafe <tcp_write+0x282>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800aaaa:	f107 0012 	add.w	r0, r7, #18
 800aaae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800aab0:	8bf9      	ldrh	r1, [r7, #30]
 800aab2:	2301      	movs	r3, #1
 800aab4:	9302      	str	r3, [sp, #8]
 800aab6:	797b      	ldrb	r3, [r7, #5]
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	4603      	mov	r3, r0
 800aac0:	2000      	movs	r0, #0
 800aac2:	f7ff fdc3 	bl	800a64c <tcp_pbuf_prealloc>
 800aac6:	6578      	str	r0, [r7, #84]	; 0x54
 800aac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8278 	beq.w	800afc0 <tcp_write+0x744>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800aad0:	8a7b      	ldrh	r3, [r7, #18]
 800aad2:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800aad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad6:	6858      	ldr	r0, [r3, #4]
 800aad8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	4413      	add	r3, r2
 800aae0:	8bfa      	ldrh	r2, [r7, #30]
 800aae2:	4619      	mov	r1, r3
 800aae4:	f008 fc82 	bl	80133ec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800aae8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aaea:	f7fa fde1 	bl	80056b0 <pbuf_clen>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aafc:	e059      	b.n	800abb2 <tcp_write+0x336>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800aafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	637b      	str	r3, [r7, #52]	; 0x34
 800ab04:	e002      	b.n	800ab0c <tcp_write+0x290>
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f8      	bne.n	800ab06 <tcp_write+0x28a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	7b1b      	ldrb	r3, [r3, #12]
 800ab18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d12d      	bne.n	800ab7c <tcp_write+0x300>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ab20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab26:	8952      	ldrh	r2, [r2, #10]
 800ab28:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d125      	bne.n	800ab7c <tcp_write+0x300>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ab30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <tcp_write+0x2d4>
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <tcp_write+0x2dc>)
 800ab3a:	f44f 720d 	mov.w	r2, #564	; 0x234
 800ab3e:	490e      	ldr	r1, [pc, #56]	; (800ab78 <tcp_write+0x2fc>)
 800ab40:	4807      	ldr	r0, [pc, #28]	; (800ab60 <tcp_write+0x2e4>)
 800ab42:	f008 fa51 	bl	8012fe8 <iprintf>
 800ab46:	2000      	movs	r0, #0
 800ab48:	f008 fb50 	bl	80131ec <fflush>
 800ab4c:	f008 fa95 	bl	801307a <abort>
          extendlen = seglen;
 800ab50:	8bfb      	ldrh	r3, [r7, #30]
 800ab52:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ab54:	e02d      	b.n	800abb2 <tcp_write+0x336>
 800ab56:	bf00      	nop
 800ab58:	080163d4 	.word	0x080163d4
 800ab5c:	08016564 	.word	0x08016564
 800ab60:	08016418 	.word	0x08016418
 800ab64:	0801657c 	.word	0x0801657c
 800ab68:	080165b0 	.word	0x080165b0
 800ab6c:	080165c8 	.word	0x080165c8
 800ab70:	080165f8 	.word	0x080165f8
 800ab74:	08016618 	.word	0x08016618
 800ab78:	08016638 	.word	0x08016638
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ab7c:	8bfb      	ldrh	r3, [r7, #30]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4619      	mov	r1, r3
 800ab82:	2000      	movs	r0, #0
 800ab84:	f7fa faa8 	bl	80050d8 <pbuf_alloc>
 800ab88:	6578      	str	r0, [r7, #84]	; 0x54
 800ab8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8219 	beq.w	800afc4 <tcp_write+0x748>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ab92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	441a      	add	r2, r3
 800ab9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab9c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ab9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aba0:	f7fa fd86 	bl	80056b0 <pbuf_clen>
 800aba4:	4603      	mov	r3, r0
 800aba6:	461a      	mov	r2, r3
 800aba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abac:	4413      	add	r3, r2
 800abae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800abb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800abb6:	8bfb      	ldrh	r3, [r7, #30]
 800abb8:	4413      	add	r3, r2
 800abba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800abbe:	e0e0      	b.n	800ad82 <tcp_write+0x506>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 80db 	beq.w	800ad82 <tcp_write+0x506>
 800abcc:	4ba5      	ldr	r3, [pc, #660]	; (800ae64 <tcp_write+0x5e8>)
 800abce:	f240 224e 	movw	r2, #590	; 0x24e
 800abd2:	49a5      	ldr	r1, [pc, #660]	; (800ae68 <tcp_write+0x5ec>)
 800abd4:	48a5      	ldr	r0, [pc, #660]	; (800ae6c <tcp_write+0x5f0>)
 800abd6:	f008 fa07 	bl	8012fe8 <iprintf>
 800abda:	2000      	movs	r0, #0
 800abdc:	f008 fb06 	bl	80131ec <fflush>
 800abe0:	f008 fa4b 	bl	801307a <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800abe4:	88fa      	ldrh	r2, [r7, #6]
 800abe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800abee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800abfa:	8b7a      	ldrh	r2, [r7, #26]
 800abfc:	8bbb      	ldrh	r3, [r7, #28]
 800abfe:	4293      	cmp	r3, r2
 800ac00:	bf28      	it	cs
 800ac02:	4613      	movcs	r3, r2
 800ac04:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ac06:	797b      	ldrb	r3, [r7, #5]
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d03b      	beq.n	800ac88 <tcp_write+0x40c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ac10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	8b3b      	ldrh	r3, [r7, #24]
 800ac18:	4413      	add	r3, r2
 800ac1a:	b299      	uxth	r1, r3
 800ac1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bf0c      	ite	eq
 800ac22:	2301      	moveq	r3, #1
 800ac24:	2300      	movne	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f107 0012 	add.w	r0, r7, #18
 800ac2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac2e:	9302      	str	r3, [sp, #8]
 800ac30:	797b      	ldrb	r3, [r7, #5]
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2036      	movs	r0, #54	; 0x36
 800ac3c:	f7ff fd06 	bl	800a64c <tcp_pbuf_prealloc>
 800ac40:	6338      	str	r0, [r7, #48]	; 0x30
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 81bf 	beq.w	800afc8 <tcp_write+0x74c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	895b      	ldrh	r3, [r3, #10]
 800ac4e:	8b3a      	ldrh	r2, [r7, #24]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d90b      	bls.n	800ac6c <tcp_write+0x3f0>
 800ac54:	4b83      	ldr	r3, [pc, #524]	; (800ae64 <tcp_write+0x5e8>)
 800ac56:	f240 226a 	movw	r2, #618	; 0x26a
 800ac5a:	4985      	ldr	r1, [pc, #532]	; (800ae70 <tcp_write+0x5f4>)
 800ac5c:	4883      	ldr	r0, [pc, #524]	; (800ae6c <tcp_write+0x5f0>)
 800ac5e:	f008 f9c3 	bl	8012fe8 <iprintf>
 800ac62:	2000      	movs	r0, #0
 800ac64:	f008 fac2 	bl	80131ec <fflush>
 800ac68:	f008 fa07 	bl	801307a <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac74:	18d0      	adds	r0, r2, r3
 800ac76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	8b3a      	ldrh	r2, [r7, #24]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f008 fbb3 	bl	80133ec <memcpy>
 800ac86:	e034      	b.n	800acf2 <tcp_write+0x476>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ac88:	8a7b      	ldrh	r3, [r7, #18]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <tcp_write+0x42a>
 800ac8e:	4b75      	ldr	r3, [pc, #468]	; (800ae64 <tcp_write+0x5e8>)
 800ac90:	f44f 721d 	mov.w	r2, #628	; 0x274
 800ac94:	4977      	ldr	r1, [pc, #476]	; (800ae74 <tcp_write+0x5f8>)
 800ac96:	4875      	ldr	r0, [pc, #468]	; (800ae6c <tcp_write+0x5f0>)
 800ac98:	f008 f9a6 	bl	8012fe8 <iprintf>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	f008 faa5 	bl	80131ec <fflush>
 800aca2:	f008 f9ea 	bl	801307a <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800aca6:	8b3b      	ldrh	r3, [r7, #24]
 800aca8:	2201      	movs	r2, #1
 800acaa:	4619      	mov	r1, r3
 800acac:	2036      	movs	r0, #54	; 0x36
 800acae:	f7fa fa13 	bl	80050d8 <pbuf_alloc>
 800acb2:	6178      	str	r0, [r7, #20]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8188 	beq.w	800afcc <tcp_write+0x750>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800acbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	441a      	add	r2, r3
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800acc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800accc:	b29b      	uxth	r3, r3
 800acce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acd2:	4619      	mov	r1, r3
 800acd4:	2036      	movs	r0, #54	; 0x36
 800acd6:	f7fa f9ff 	bl	80050d8 <pbuf_alloc>
 800acda:	6338      	str	r0, [r7, #48]	; 0x30
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <tcp_write+0x46e>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ace2:	6978      	ldr	r0, [r7, #20]
 800ace4:	f7fa fc62 	bl	80055ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ace8:	e173      	b.n	800afd2 <tcp_write+0x756>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800acea:	6979      	ldr	r1, [r7, #20]
 800acec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acee:	f7fa fd25 	bl	800573c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800acf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf4:	f7fa fcdc 	bl	80056b0 <pbuf_clen>
 800acf8:	4603      	mov	r3, r0
 800acfa:	461a      	mov	r2, r3
 800acfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad00:	4413      	add	r3, r2
 800ad02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ad06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	d903      	bls.n	800ad16 <tcp_write+0x49a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ad0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad10:	f7fa fc4c 	bl	80055ac <pbuf_free>
      goto memerr;
 800ad14:	e15d      	b.n	800afd2 <tcp_write+0x756>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad1e:	441a      	add	r2, r3
 800ad20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	4613      	mov	r3, r2
 800ad28:	2200      	movs	r2, #0
 800ad2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff fbd1 	bl	800a4d4 <tcp_create_segment>
 800ad32:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ad34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 814a 	beq.w	800afd0 <tcp_write+0x754>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800ad3c:	8a7a      	ldrh	r2, [r7, #18]
 800ad3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad40:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ad42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d102      	bne.n	800ad4e <tcp_write+0x4d2>
      queue = seg;
 800ad48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad4c:	e011      	b.n	800ad72 <tcp_write+0x4f6>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ad4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <tcp_write+0x4f0>
 800ad54:	4b43      	ldr	r3, [pc, #268]	; (800ae64 <tcp_write+0x5e8>)
 800ad56:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ad5a:	4947      	ldr	r1, [pc, #284]	; (800ae78 <tcp_write+0x5fc>)
 800ad5c:	4843      	ldr	r0, [pc, #268]	; (800ae6c <tcp_write+0x5f0>)
 800ad5e:	f008 f943 	bl	8012fe8 <iprintf>
 800ad62:	2000      	movs	r0, #0
 800ad64:	f008 fa42 	bl	80131ec <fflush>
 800ad68:	f008 f987 	bl	801307a <abort>
      prev_seg->next = seg;
 800ad6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad70:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ad72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad74:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ad76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad7a:	8b3b      	ldrh	r3, [r7, #24]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ad82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	f4ff af2b 	bcc.w	800abe4 <tcp_write+0x368>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800ad8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <tcp_write+0x52c>
 800ad94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d006      	beq.n	800ada8 <tcp_write+0x52c>
    last_unsent->oversize_left += oversize_add;
 800ad9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9c:	895a      	ldrh	r2, [r3, #10]
 800ad9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ada0:	4413      	add	r3, r2
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada6:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ada8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d044      	beq.n	800ae38 <tcp_write+0x5bc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800adae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adb4:	e01e      	b.n	800adf4 <tcp_write+0x578>
      p->tot_len += oversize_used;
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	891a      	ldrh	r2, [r3, #8]
 800adba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adbc:	4413      	add	r3, r2
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d110      	bne.n	800adee <tcp_write+0x572>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800add2:	8952      	ldrh	r2, [r2, #10]
 800add4:	4413      	add	r3, r2
 800add6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	4618      	mov	r0, r3
 800addc:	f008 fb06 	bl	80133ec <memcpy>
        p->len += oversize_used;
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	895a      	ldrh	r2, [r3, #10]
 800ade4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ade6:	4413      	add	r3, r2
 800ade8:	b29a      	uxth	r2, r3
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1dd      	bne.n	800adb6 <tcp_write+0x53a>
      }
    }
    last_unsent->len += oversize_used;
 800adfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adfc:	891a      	ldrh	r2, [r3, #8]
 800adfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae00:	4413      	add	r3, r2
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae06:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800ae08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae0a:	895b      	ldrh	r3, [r3, #10]
 800ae0c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d90b      	bls.n	800ae2a <tcp_write+0x5ae>
 800ae12:	4b14      	ldr	r3, [pc, #80]	; (800ae64 <tcp_write+0x5e8>)
 800ae14:	f240 22d7 	movw	r2, #727	; 0x2d7
 800ae18:	4918      	ldr	r1, [pc, #96]	; (800ae7c <tcp_write+0x600>)
 800ae1a:	4814      	ldr	r0, [pc, #80]	; (800ae6c <tcp_write+0x5f0>)
 800ae1c:	f008 f8e4 	bl	8012fe8 <iprintf>
 800ae20:	2000      	movs	r0, #0
 800ae22:	f008 f9e3 	bl	80131ec <fflush>
 800ae26:	f008 f928 	bl	801307a <abort>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800ae2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2c:	895a      	ldrh	r2, [r3, #10]
 800ae2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae36:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ae38:	8a7a      	ldrh	r2, [r7, #18]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ae40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d02d      	beq.n	800aea2 <tcp_write+0x626>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ae46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d11b      	bne.n	800ae84 <tcp_write+0x608>
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <tcp_write+0x5e8>)
 800ae4e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ae52:	490b      	ldr	r1, [pc, #44]	; (800ae80 <tcp_write+0x604>)
 800ae54:	4805      	ldr	r0, [pc, #20]	; (800ae6c <tcp_write+0x5f0>)
 800ae56:	f008 f8c7 	bl	8012fe8 <iprintf>
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f008 f9c6 	bl	80131ec <fflush>
 800ae60:	f008 f90b 	bl	801307a <abort>
 800ae64:	080163d4 	.word	0x080163d4
 800ae68:	08016664 	.word	0x08016664
 800ae6c:	08016418 	.word	0x08016418
 800ae70:	08016694 	.word	0x08016694
 800ae74:	080166d4 	.word	0x080166d4
 800ae78:	080166e4 	.word	0x080166e4
 800ae7c:	080166f8 	.word	0x080166f8
 800ae80:	08016724 	.word	0x08016724
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ae84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fa fc56 	bl	800573c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ae90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae92:	891a      	ldrh	r2, [r3, #8]
 800ae94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae9e:	811a      	strh	r2, [r3, #8]
 800aea0:	e03c      	b.n	800af1c <tcp_write+0x6a0>
  } else if (extendlen > 0) {
 800aea2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d039      	beq.n	800af1c <tcp_write+0x6a0>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800aea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <tcp_write+0x63a>
 800aeae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <tcp_write+0x652>
 800aeb6:	4b64      	ldr	r3, [pc, #400]	; (800b048 <tcp_write+0x7cc>)
 800aeb8:	f240 22ea 	movw	r2, #746	; 0x2ea
 800aebc:	4963      	ldr	r1, [pc, #396]	; (800b04c <tcp_write+0x7d0>)
 800aebe:	4864      	ldr	r0, [pc, #400]	; (800b050 <tcp_write+0x7d4>)
 800aec0:	f008 f892 	bl	8012fe8 <iprintf>
 800aec4:	2000      	movs	r0, #0
 800aec6:	f008 f991 	bl	80131ec <fflush>
 800aeca:	f008 f8d6 	bl	801307a <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aed4:	e009      	b.n	800aeea <tcp_write+0x66e>
      p->tot_len += extendlen;
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	891a      	ldrh	r2, [r3, #8]
 800aeda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aedc:	4413      	add	r3, r2
 800aede:	b29a      	uxth	r2, r3
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f1      	bne.n	800aed6 <tcp_write+0x65a>
    }
    p->tot_len += extendlen;
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	891a      	ldrh	r2, [r3, #8]
 800aef6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aef8:	4413      	add	r3, r2
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	895a      	ldrh	r2, [r3, #10]
 800af04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800af06:	4413      	add	r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800af0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af10:	891a      	ldrh	r2, [r3, #8]
 800af12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800af14:	4413      	add	r3, r2
 800af16:	b29a      	uxth	r2, r3
 800af18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800af1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <tcp_write+0x6ae>
    pcb->unsent = queue;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af26:	66da      	str	r2, [r3, #108]	; 0x6c
 800af28:	e002      	b.n	800af30 <tcp_write+0x6b4>
  } else {
    last_unsent->next = queue;
 800af2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af2e:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	441a      	add	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800af42:	88fb      	ldrh	r3, [r7, #6]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	b29a      	uxth	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800af54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d013      	beq.n	800af8a <tcp_write+0x70e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10f      	bne.n	800af8a <tcp_write+0x70e>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10b      	bne.n	800af8a <tcp_write+0x70e>
 800af72:	4b35      	ldr	r3, [pc, #212]	; (800b048 <tcp_write+0x7cc>)
 800af74:	f240 3216 	movw	r2, #790	; 0x316
 800af78:	4936      	ldr	r1, [pc, #216]	; (800b054 <tcp_write+0x7d8>)
 800af7a:	4835      	ldr	r0, [pc, #212]	; (800b050 <tcp_write+0x7d4>)
 800af7c:	f008 f834 	bl	8012fe8 <iprintf>
 800af80:	2000      	movs	r0, #0
 800af82:	f008 f933 	bl	80131ec <fflush>
 800af86:	f008 f878 	bl	801307a <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800af8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d015      	beq.n	800afbc <tcp_write+0x740>
 800af90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d011      	beq.n	800afbc <tcp_write+0x740>
 800af98:	797b      	ldrb	r3, [r7, #5]
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10c      	bne.n	800afbc <tcp_write+0x740>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800afa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa4:	691c      	ldr	r4, [r3, #16]
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	899b      	ldrh	r3, [r3, #12]
 800afac:	b29d      	uxth	r5, r3
 800afae:	2008      	movs	r0, #8
 800afb0:	f7f8 f9ea 	bl	8003388 <lwip_htons>
 800afb4:	4603      	mov	r3, r0
 800afb6:	432b      	orrs	r3, r5
 800afb8:	b29b      	uxth	r3, r3
 800afba:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e03e      	b.n	800b03e <tcp_write+0x7c2>
          goto memerr;
 800afc0:	bf00      	nop
 800afc2:	e006      	b.n	800afd2 <tcp_write+0x756>
            goto memerr;
 800afc4:	bf00      	nop
 800afc6:	e004      	b.n	800afd2 <tcp_write+0x756>
        goto memerr;
 800afc8:	bf00      	nop
 800afca:	e002      	b.n	800afd2 <tcp_write+0x756>
        goto memerr;
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <tcp_write+0x756>
      goto memerr;
 800afd0:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8b5b      	ldrh	r3, [r3, #26]
 800afd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800afe0:	4b1d      	ldr	r3, [pc, #116]	; (800b058 <tcp_write+0x7dc>)
 800afe2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800afe6:	3301      	adds	r3, #1
 800afe8:	b29a      	uxth	r2, r3
 800afea:	4b1b      	ldr	r3, [pc, #108]	; (800b058 <tcp_write+0x7dc>)
 800afec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  if (concat_p != NULL) {
 800aff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <tcp_write+0x780>
    pbuf_free(concat_p);
 800aff6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aff8:	f7fa fad8 	bl	80055ac <pbuf_free>
  }
  if (queue != NULL) {
 800affc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <tcp_write+0x78c>
    tcp_segs_free(queue);
 800b002:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b004:	f7fc f90e 	bl	8007224 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d013      	beq.n	800b03a <tcp_write+0x7be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10f      	bne.n	800b03a <tcp_write+0x7be>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10b      	bne.n	800b03a <tcp_write+0x7be>
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <tcp_write+0x7cc>)
 800b024:	f240 322b 	movw	r2, #811	; 0x32b
 800b028:	490a      	ldr	r1, [pc, #40]	; (800b054 <tcp_write+0x7d8>)
 800b02a:	4809      	ldr	r0, [pc, #36]	; (800b050 <tcp_write+0x7d4>)
 800b02c:	f007 ffdc 	bl	8012fe8 <iprintf>
 800b030:	2000      	movs	r0, #0
 800b032:	f008 f8db 	bl	80131ec <fflush>
 800b036:	f008 f820 	bl	801307a <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b03a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3758      	adds	r7, #88	; 0x58
 800b042:	46bd      	mov	sp, r7
 800b044:	bdb0      	pop	{r4, r5, r7, pc}
 800b046:	bf00      	nop
 800b048:	080163d4 	.word	0x080163d4
 800b04c:	0801675c 	.word	0x0801675c
 800b050:	08016418 	.word	0x08016418
 800b054:	08016794 	.word	0x08016794
 800b058:	20002164 	.word	0x20002164

0800b05c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b05c:	b5b0      	push	{r4, r5, r7, lr}
 800b05e:	b08a      	sub	sp, #40	; 0x28
 800b060:	af02      	add	r7, sp, #8
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b068:	2300      	movs	r3, #0
 800b06a:	61fb      	str	r3, [r7, #28]
 800b06c:	2300      	movs	r3, #0
 800b06e:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <tcp_split_unsent_seg+0x36>
 800b07a:	4ba7      	ldr	r3, [pc, #668]	; (800b318 <tcp_split_unsent_seg+0x2bc>)
 800b07c:	f240 324e 	movw	r2, #846	; 0x34e
 800b080:	49a6      	ldr	r1, [pc, #664]	; (800b31c <tcp_split_unsent_seg+0x2c0>)
 800b082:	48a7      	ldr	r0, [pc, #668]	; (800b320 <tcp_split_unsent_seg+0x2c4>)
 800b084:	f007 ffb0 	bl	8012fe8 <iprintf>
 800b088:	2000      	movs	r0, #0
 800b08a:	f008 f8af 	bl	80131ec <fflush>
 800b08e:	f007 fff4 	bl	801307a <abort>

  useg = pcb->unsent;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	e135      	b.n	800b310 <tcp_split_unsent_seg+0x2b4>
  }

  if (split == 0) {
 800b0a4:	887b      	ldrh	r3, [r7, #2]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10b      	bne.n	800b0c2 <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b0aa:	4b9b      	ldr	r3, [pc, #620]	; (800b318 <tcp_split_unsent_seg+0x2bc>)
 800b0ac:	f240 3256 	movw	r2, #854	; 0x356
 800b0b0:	499c      	ldr	r1, [pc, #624]	; (800b324 <tcp_split_unsent_seg+0x2c8>)
 800b0b2:	489b      	ldr	r0, [pc, #620]	; (800b320 <tcp_split_unsent_seg+0x2c4>)
 800b0b4:	f007 ff98 	bl	8012fe8 <iprintf>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	f008 f897 	bl	80131ec <fflush>
 800b0be:	f007 ffdc 	bl	801307a <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	891b      	ldrh	r3, [r3, #8]
 800b0c6:	887a      	ldrh	r2, [r7, #2]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d301      	bcc.n	800b0d0 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e11f      	b.n	800b310 <tcp_split_unsent_seg+0x2b4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0d4:	887a      	ldrh	r2, [r7, #2]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d90b      	bls.n	800b0f2 <tcp_split_unsent_seg+0x96>
 800b0da:	4b8f      	ldr	r3, [pc, #572]	; (800b318 <tcp_split_unsent_seg+0x2bc>)
 800b0dc:	f240 325e 	movw	r2, #862	; 0x35e
 800b0e0:	4991      	ldr	r1, [pc, #580]	; (800b328 <tcp_split_unsent_seg+0x2cc>)
 800b0e2:	488f      	ldr	r0, [pc, #572]	; (800b320 <tcp_split_unsent_seg+0x2c4>)
 800b0e4:	f007 ff80 	bl	8012fe8 <iprintf>
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	f008 f87f 	bl	80131ec <fflush>
 800b0ee:	f007 ffc4 	bl	801307a <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	891b      	ldrh	r3, [r3, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <tcp_split_unsent_seg+0xb6>
 800b0fa:	4b87      	ldr	r3, [pc, #540]	; (800b318 <tcp_split_unsent_seg+0x2bc>)
 800b0fc:	f240 325f 	movw	r2, #863	; 0x35f
 800b100:	498a      	ldr	r1, [pc, #552]	; (800b32c <tcp_split_unsent_seg+0x2d0>)
 800b102:	4887      	ldr	r0, [pc, #540]	; (800b320 <tcp_split_unsent_seg+0x2c4>)
 800b104:	f007 ff70 	bl	8012fe8 <iprintf>
 800b108:	2000      	movs	r0, #0
 800b10a:	f008 f86f 	bl	80131ec <fflush>
 800b10e:	f007 ffb4 	bl	801307a <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	7b1b      	ldrb	r3, [r3, #12]
 800b116:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <tcp_split_unsent_seg+0xca>
 800b122:	2304      	movs	r3, #4
 800b124:	e000      	b.n	800b128 <tcp_split_unsent_seg+0xcc>
 800b126:	2300      	movs	r3, #0
 800b128:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	891a      	ldrh	r2, [r3, #8]
 800b12e:	887b      	ldrh	r3, [r7, #2]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	b29a      	uxth	r2, r3
 800b138:	89bb      	ldrh	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b142:	4619      	mov	r1, r3
 800b144:	2036      	movs	r0, #54	; 0x36
 800b146:	f7f9 ffc7 	bl	80050d8 <pbuf_alloc>
 800b14a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80bc 	beq.w	800b2cc <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	891a      	ldrh	r2, [r3, #8]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	891b      	ldrh	r3, [r3, #8]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	b29a      	uxth	r2, r3
 800b162:	887b      	ldrh	r3, [r7, #2]
 800b164:	4413      	add	r3, r2
 800b166:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	6858      	ldr	r0, [r3, #4]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	18d1      	adds	r1, r2, r3
 800b174:	897b      	ldrh	r3, [r7, #10]
 800b176:	89ba      	ldrh	r2, [r7, #12]
 800b178:	f7fa fc88 	bl	8005a8c <pbuf_copy_partial>
 800b17c:	4603      	mov	r3, r0
 800b17e:	461a      	mov	r2, r3
 800b180:	89bb      	ldrh	r3, [r7, #12]
 800b182:	4293      	cmp	r3, r2
 800b184:	f040 80a4 	bne.w	800b2d0 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	899b      	ldrh	r3, [r3, #12]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	4618      	mov	r0, r3
 800b192:	f7f8 f8f9 	bl	8003388 <lwip_htons>
 800b196:	4603      	mov	r3, r0
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b19e:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	f023 0308 	bic.w	r3, r3, #8
 800b1b4:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800b1b6:	7dbb      	ldrb	r3, [r7, #22]
 800b1b8:	f043 0308 	orr.w	r3, r3, #8
 800b1bc:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	f023 0301 	bic.w	r3, r3, #1
 800b1ce:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800b1d0:	7dbb      	ldrb	r3, [r7, #22]
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f8 f8e7 	bl	80033b2 <lwip_htonl>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	887b      	ldrh	r3, [r7, #2]
 800b1e8:	18d1      	adds	r1, r2, r3
 800b1ea:	7dba      	ldrb	r2, [r7, #22]
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	69b9      	ldr	r1, [r7, #24]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff f96d 	bl	800a4d4 <tcp_create_segment>
 800b1fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d102      	bne.n	800b208 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800b202:	2300      	movs	r3, #0
 800b204:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800b206:	e064      	b.n	800b2d2 <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fa fa4f 	bl	80056b0 <pbuf_clen>
 800b212:	4603      	mov	r3, r0
 800b214:	461a      	mov	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b21c:	1a9b      	subs	r3, r3, r2
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	6858      	ldr	r0, [r3, #4]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	891a      	ldrh	r2, [r3, #8]
 800b230:	89bb      	ldrh	r3, [r7, #12]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	b29b      	uxth	r3, r3
 800b236:	4619      	mov	r1, r3
 800b238:	f7fa f840 	bl	80052bc <pbuf_realloc>
  useg->len -= remainder;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	891a      	ldrh	r2, [r3, #8]
 800b240:	89bb      	ldrh	r3, [r7, #12]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	b29a      	uxth	r2, r3
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	691c      	ldr	r4, [r3, #16]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	899b      	ldrh	r3, [r3, #12]
 800b254:	b29d      	uxth	r5, r3
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f8 f894 	bl	8003388 <lwip_htons>
 800b260:	4603      	mov	r3, r0
 800b262:	432b      	orrs	r3, r5
 800b264:	b29b      	uxth	r3, r3
 800b266:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2200      	movs	r2, #0
 800b26c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4618      	mov	r0, r3
 800b274:	f7fa fa1c 	bl	80056b0 <pbuf_clen>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b282:	4413      	add	r3, r2
 800b284:	b29a      	uxth	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	f7fa fa0d 	bl	80056b0 <pbuf_clen>
 800b296:	4603      	mov	r3, r0
 800b298:	461a      	mov	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2a0:	4413      	add	r3, r2
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	69fa      	ldr	r2, [r7, #28]
 800b2b6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d103      	bne.n	800b2c8 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e021      	b.n	800b310 <tcp_split_unsent_seg+0x2b4>
    goto memerr;
 800b2cc:	bf00      	nop
 800b2ce:	e000      	b.n	800b2d2 <tcp_split_unsent_seg+0x276>
    goto memerr;
 800b2d0:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800b2d2:	4b17      	ldr	r3, [pc, #92]	; (800b330 <tcp_split_unsent_seg+0x2d4>)
 800b2d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b2d8:	3301      	adds	r3, #1
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	4b14      	ldr	r3, [pc, #80]	; (800b330 <tcp_split_unsent_seg+0x2d4>)
 800b2de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <tcp_split_unsent_seg+0x2a4>
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	; (800b318 <tcp_split_unsent_seg+0x2bc>)
 800b2ea:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800b2ee:	4911      	ldr	r1, [pc, #68]	; (800b334 <tcp_split_unsent_seg+0x2d8>)
 800b2f0:	480b      	ldr	r0, [pc, #44]	; (800b320 <tcp_split_unsent_seg+0x2c4>)
 800b2f2:	f007 fe79 	bl	8012fe8 <iprintf>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f007 ff78 	bl	80131ec <fflush>
 800b2fc:	f007 febd 	bl	801307a <abort>
  if (p != NULL) {
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <tcp_split_unsent_seg+0x2b0>
    pbuf_free(p);
 800b306:	69b8      	ldr	r0, [r7, #24]
 800b308:	f7fa f950 	bl	80055ac <pbuf_free>
  }

  return ERR_MEM;
 800b30c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b310:	4618      	mov	r0, r3
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bdb0      	pop	{r4, r5, r7, pc}
 800b318:	080163d4 	.word	0x080163d4
 800b31c:	080167b4 	.word	0x080167b4
 800b320:	08016418 	.word	0x08016418
 800b324:	080167d8 	.word	0x080167d8
 800b328:	080167fc 	.word	0x080167fc
 800b32c:	0801680c 	.word	0x0801680c
 800b330:	20002164 	.word	0x20002164
 800b334:	0801681c 	.word	0x0801681c

0800b338 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b338:	b5b0      	push	{r4, r5, r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <tcp_send_fin+0x26>
 800b346:	4b23      	ldr	r3, [pc, #140]	; (800b3d4 <tcp_send_fin+0x9c>)
 800b348:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b34c:	4922      	ldr	r1, [pc, #136]	; (800b3d8 <tcp_send_fin+0xa0>)
 800b34e:	4823      	ldr	r0, [pc, #140]	; (800b3dc <tcp_send_fin+0xa4>)
 800b350:	f007 fe4a 	bl	8012fe8 <iprintf>
 800b354:	2000      	movs	r0, #0
 800b356:	f007 ff49 	bl	80131ec <fflush>
 800b35a:	f007 fe8e 	bl	801307a <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d02d      	beq.n	800b3c2 <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e002      	b.n	800b374 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f8      	bne.n	800b36e <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	899b      	ldrh	r3, [r3, #12]
 800b382:	b29b      	uxth	r3, r3
 800b384:	4618      	mov	r0, r3
 800b386:	f7f7 ffff 	bl	8003388 <lwip_htons>
 800b38a:	4603      	mov	r3, r0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0307 	and.w	r3, r3, #7
 800b392:	2b00      	cmp	r3, #0
 800b394:	d115      	bne.n	800b3c2 <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	691c      	ldr	r4, [r3, #16]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	899b      	ldrh	r3, [r3, #12]
 800b3a0:	b29d      	uxth	r5, r3
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f7f7 fff0 	bl	8003388 <lwip_htons>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	432b      	orrs	r3, r5
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8b5b      	ldrh	r3, [r3, #26]
 800b3b4:	f043 0320 	orr.w	r3, r3, #32
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e004      	b.n	800b3cc <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f80b 	bl	800b3e0 <tcp_enqueue_flags>
 800b3ca:	4603      	mov	r3, r0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d4:	080163d4 	.word	0x080163d4
 800b3d8:	08016828 	.word	0x08016828
 800b3dc:	08016418 	.word	0x08016418

0800b3e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	; 0x28
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b3f4:	78fb      	ldrb	r3, [r7, #3]
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10b      	bne.n	800b416 <tcp_enqueue_flags+0x36>
 800b3fe:	4b76      	ldr	r3, [pc, #472]	; (800b5d8 <tcp_enqueue_flags+0x1f8>)
 800b400:	f240 4214 	movw	r2, #1044	; 0x414
 800b404:	4975      	ldr	r1, [pc, #468]	; (800b5dc <tcp_enqueue_flags+0x1fc>)
 800b406:	4876      	ldr	r0, [pc, #472]	; (800b5e0 <tcp_enqueue_flags+0x200>)
 800b408:	f007 fdee 	bl	8012fe8 <iprintf>
 800b40c:	2000      	movs	r0, #0
 800b40e:	f007 feed 	bl	80131ec <fflush>
 800b412:	f007 fe32 	bl	801307a <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10b      	bne.n	800b434 <tcp_enqueue_flags+0x54>
 800b41c:	4b6e      	ldr	r3, [pc, #440]	; (800b5d8 <tcp_enqueue_flags+0x1f8>)
 800b41e:	f240 4215 	movw	r2, #1045	; 0x415
 800b422:	4970      	ldr	r1, [pc, #448]	; (800b5e4 <tcp_enqueue_flags+0x204>)
 800b424:	486e      	ldr	r0, [pc, #440]	; (800b5e0 <tcp_enqueue_flags+0x200>)
 800b426:	f007 fddf 	bl	8012fe8 <iprintf>
 800b42a:	2000      	movs	r0, #0
 800b42c:	f007 fede 	bl	80131ec <fflush>
 800b430:	f007 fe23 	bl	801307a <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800b43e:	2301      	movs	r3, #1
 800b440:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b442:	7ffb      	ldrb	r3, [r7, #31]
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <tcp_enqueue_flags+0x70>
 800b44c:	2304      	movs	r3, #4
 800b44e:	e000      	b.n	800b452 <tcp_enqueue_flags+0x72>
 800b450:	2300      	movs	r3, #0
 800b452:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	b29b      	uxth	r3, r3
 800b458:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b45c:	4619      	mov	r1, r3
 800b45e:	2036      	movs	r0, #54	; 0x36
 800b460:	f7f9 fe3a 	bl	80050d8 <pbuf_alloc>
 800b464:	6138      	str	r0, [r7, #16]
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d111      	bne.n	800b490 <tcp_enqueue_flags+0xb0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8b5b      	ldrh	r3, [r3, #26]
 800b470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800b47a:	4b5b      	ldr	r3, [pc, #364]	; (800b5e8 <tcp_enqueue_flags+0x208>)
 800b47c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b480:	3301      	adds	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	4b58      	ldr	r3, [pc, #352]	; (800b5e8 <tcp_enqueue_flags+0x208>)
 800b486:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800b48a:	f04f 33ff 	mov.w	r3, #4294967295
 800b48e:	e09f      	b.n	800b5d0 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	895a      	ldrh	r2, [r3, #10]
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	b29b      	uxth	r3, r3
 800b498:	429a      	cmp	r2, r3
 800b49a:	d20b      	bcs.n	800b4b4 <tcp_enqueue_flags+0xd4>
 800b49c:	4b4e      	ldr	r3, [pc, #312]	; (800b5d8 <tcp_enqueue_flags+0x1f8>)
 800b49e:	f240 423e 	movw	r2, #1086	; 0x43e
 800b4a2:	4952      	ldr	r1, [pc, #328]	; (800b5ec <tcp_enqueue_flags+0x20c>)
 800b4a4:	484e      	ldr	r0, [pc, #312]	; (800b5e0 <tcp_enqueue_flags+0x200>)
 800b4a6:	f007 fd9f 	bl	8012fe8 <iprintf>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	f007 fe9e 	bl	80131ec <fflush>
 800b4b0:	f007 fde3 	bl	801307a <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	7ffb      	ldrb	r3, [r7, #31]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	6939      	ldr	r1, [r7, #16]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff f806 	bl	800a4d4 <tcp_create_segment>
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d111      	bne.n	800b4f4 <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8b5b      	ldrh	r3, [r3, #26]
 800b4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800b4de:	4b42      	ldr	r3, [pc, #264]	; (800b5e8 <tcp_enqueue_flags+0x208>)
 800b4e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	4b3f      	ldr	r3, [pc, #252]	; (800b5e8 <tcp_enqueue_flags+0x208>)
 800b4ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f2:	e06d      	b.n	800b5d0 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	891b      	ldrh	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <tcp_enqueue_flags+0x134>
 800b4fc:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <tcp_enqueue_flags+0x1f8>)
 800b4fe:	f240 4247 	movw	r2, #1095	; 0x447
 800b502:	493b      	ldr	r1, [pc, #236]	; (800b5f0 <tcp_enqueue_flags+0x210>)
 800b504:	4836      	ldr	r0, [pc, #216]	; (800b5e0 <tcp_enqueue_flags+0x200>)
 800b506:	f007 fd6f 	bl	8012fe8 <iprintf>
 800b50a:	2000      	movs	r0, #0
 800b50c:	f007 fe6e 	bl	80131ec <fflush>
 800b510:	f007 fdb3 	bl	801307a <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d103      	bne.n	800b524 <tcp_enqueue_flags+0x144>
    pcb->unsent = seg;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	66da      	str	r2, [r3, #108]	; 0x6c
 800b522:	e00d      	b.n	800b540 <tcp_enqueue_flags+0x160>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	e002      	b.n	800b532 <tcp_enqueue_flags+0x152>
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f8      	bne.n	800b52c <tcp_enqueue_flags+0x14c>
    useg->next = seg;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d104      	bne.n	800b55c <tcp_enqueue_flags+0x17c>
 800b552:	78fb      	ldrb	r3, [r7, #3]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <tcp_enqueue_flags+0x186>
    pcb->snd_lbb++;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d006      	beq.n	800b57e <tcp_enqueue_flags+0x19e>
    tcp_set_flags(pcb, TF_FIN);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	8b5b      	ldrh	r3, [r3, #26]
 800b574:	f043 0320 	orr.w	r3, r3, #32
 800b578:	b29a      	uxth	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4618      	mov	r0, r3
 800b584:	f7fa f894 	bl	80056b0 <pbuf_clen>
 800b588:	4603      	mov	r3, r0
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b592:	4413      	add	r3, r2
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d013      	beq.n	800b5ce <tcp_enqueue_flags+0x1ee>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10f      	bne.n	800b5ce <tcp_enqueue_flags+0x1ee>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <tcp_enqueue_flags+0x1ee>
 800b5b6:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <tcp_enqueue_flags+0x1f8>)
 800b5b8:	f240 426a 	movw	r2, #1130	; 0x46a
 800b5bc:	490d      	ldr	r1, [pc, #52]	; (800b5f4 <tcp_enqueue_flags+0x214>)
 800b5be:	4808      	ldr	r0, [pc, #32]	; (800b5e0 <tcp_enqueue_flags+0x200>)
 800b5c0:	f007 fd12 	bl	8012fe8 <iprintf>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f007 fe11 	bl	80131ec <fflush>
 800b5ca:	f007 fd56 	bl	801307a <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3720      	adds	r7, #32
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	080163d4 	.word	0x080163d4
 800b5dc:	08016844 	.word	0x08016844
 800b5e0:	08016418 	.word	0x08016418
 800b5e4:	0801689c 	.word	0x0801689c
 800b5e8:	20002164 	.word	0x20002164
 800b5ec:	080168bc 	.word	0x080168bc
 800b5f0:	080168f8 	.word	0x080168f8
 800b5f4:	08016924 	.word	0x08016924

0800b5f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b5f8:	b5b0      	push	{r4, r5, r7, lr}
 800b5fa:	b08a      	sub	sp, #40	; 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10b      	bne.n	800b61e <tcp_output+0x26>
 800b606:	4ba9      	ldr	r3, [pc, #676]	; (800b8ac <tcp_output+0x2b4>)
 800b608:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800b60c:	49a8      	ldr	r1, [pc, #672]	; (800b8b0 <tcp_output+0x2b8>)
 800b60e:	48a9      	ldr	r0, [pc, #676]	; (800b8b4 <tcp_output+0x2bc>)
 800b610:	f007 fcea 	bl	8012fe8 <iprintf>
 800b614:	2000      	movs	r0, #0
 800b616:	f007 fde9 	bl	80131ec <fflush>
 800b61a:	f007 fd2e 	bl	801307a <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7d1b      	ldrb	r3, [r3, #20]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d10b      	bne.n	800b63e <tcp_output+0x46>
 800b626:	4ba1      	ldr	r3, [pc, #644]	; (800b8ac <tcp_output+0x2b4>)
 800b628:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800b62c:	49a2      	ldr	r1, [pc, #648]	; (800b8b8 <tcp_output+0x2c0>)
 800b62e:	48a1      	ldr	r0, [pc, #644]	; (800b8b4 <tcp_output+0x2bc>)
 800b630:	f007 fcda 	bl	8012fe8 <iprintf>
 800b634:	2000      	movs	r0, #0
 800b636:	f007 fdd9 	bl	80131ec <fflush>
 800b63a:	f007 fd1e 	bl	801307a <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b63e:	4b9f      	ldr	r3, [pc, #636]	; (800b8bc <tcp_output+0x2c4>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	429a      	cmp	r2, r3
 800b646:	d101      	bne.n	800b64c <tcp_output+0x54>
    return ERR_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	e1d8      	b.n	800b9fe <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b658:	429a      	cmp	r2, r3
 800b65a:	d203      	bcs.n	800b664 <tcp_output+0x6c>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b662:	e002      	b.n	800b66a <tcp_output+0x72>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b66a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b670:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10b      	bne.n	800b690 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	8b5b      	ldrh	r3, [r3, #26]
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 81b1 	beq.w	800b9e8 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fee6 	bl	800c458 <tcp_send_empty_ack>
 800b68c:	4603      	mov	r3, r0
 800b68e:	e1b6      	b.n	800b9fe <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3304      	adds	r3, #4
 800b696:	461a      	mov	r2, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7fe feff 	bl	800a49c <tcp_route>
 800b69e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <tcp_output+0xb4>
    return ERR_RTE;
 800b6a6:	f06f 0303 	mvn.w	r3, #3
 800b6aa:	e1a8      	b.n	800b9fe <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <tcp_output+0xc2>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d111      	bne.n	800b6de <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <tcp_output+0xce>
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	e000      	b.n	800b6c8 <tcp_output+0xd0>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <tcp_output+0xde>
      return ERR_RTE;
 800b6d0:	f06f 0303 	mvn.w	r3, #3
 800b6d4:	e193      	b.n	800b9fe <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7f7 fe64 	bl	80033b2 <lwip_htonl>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f4:	8912      	ldrh	r2, [r2, #8]
 800b6f6:	441a      	add	r2, r3
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d927      	bls.n	800b74e <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b704:	461a      	mov	r2, r3
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d114      	bne.n	800b736 <tcp_output+0x13e>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b710:	2b00      	cmp	r3, #0
 800b712:	d110      	bne.n	800b736 <tcp_output+0x13e>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10b      	bne.n	800b736 <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	8b5b      	ldrh	r3, [r3, #26]
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 8154 	beq.w	800b9ec <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fe87 	bl	800c458 <tcp_send_empty_ack>
 800b74a:	4603      	mov	r3, r0
 800b74c:	e157      	b.n	800b9fe <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8123 	beq.w	800b9aa <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 800b764:	e002      	b.n	800b76c <tcp_output+0x174>
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	623b      	str	r3, [r7, #32]
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1f8      	bne.n	800b766 <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b774:	e119      	b.n	800b9aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	899b      	ldrh	r3, [r3, #12]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	4618      	mov	r0, r3
 800b780:	f7f7 fe02 	bl	8003388 <lwip_htons>
 800b784:	4603      	mov	r3, r0
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00b      	beq.n	800b7a8 <tcp_output+0x1b0>
 800b790:	4b46      	ldr	r3, [pc, #280]	; (800b8ac <tcp_output+0x2b4>)
 800b792:	f240 523b 	movw	r2, #1339	; 0x53b
 800b796:	494a      	ldr	r1, [pc, #296]	; (800b8c0 <tcp_output+0x2c8>)
 800b798:	4846      	ldr	r0, [pc, #280]	; (800b8b4 <tcp_output+0x2bc>)
 800b79a:	f007 fc25 	bl	8012fe8 <iprintf>
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f007 fd24 	bl	80131ec <fflush>
 800b7a4:	f007 fc69 	bl	801307a <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01f      	beq.n	800b7f0 <tcp_output+0x1f8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	8b5b      	ldrh	r3, [r3, #26]
 800b7b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d119      	bne.n	800b7f0 <tcp_output+0x1f8>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00b      	beq.n	800b7dc <tcp_output+0x1e4>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d110      	bne.n	800b7f0 <tcp_output+0x1f8>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d2:	891a      	ldrh	r2, [r3, #8]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d209      	bcs.n	800b7f0 <tcp_output+0x1f8>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <tcp_output+0x1f8>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7ec:	2b07      	cmp	r3, #7
 800b7ee:	d901      	bls.n	800b7f4 <tcp_output+0x1fc>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <tcp_output+0x1fe>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	8b5b      	ldrh	r3, [r3, #26]
 800b7fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 80e6 	beq.w	800b9d4 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	7d1b      	ldrb	r3, [r3, #20]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d00c      	beq.n	800b82a <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	691c      	ldr	r4, [r3, #16]
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	b29d      	uxth	r5, r3
 800b81c:	2010      	movs	r0, #16
 800b81e:	f7f7 fdb3 	bl	8003388 <lwip_htons>
 800b822:	4603      	mov	r3, r0
 800b824:	432b      	orrs	r3, r5
 800b826:	b29b      	uxth	r3, r3
 800b828:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b830:	f000 f910 	bl	800ba54 <tcp_output_segment>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d009      	beq.n	800b854 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	8b5b      	ldrh	r3, [r3, #26]
 800b844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	835a      	strh	r2, [r3, #26]
      return err;
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	e0d4      	b.n	800b9fe <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	2200      	movs	r2, #0
 800b858:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	7d1b      	ldrb	r3, [r3, #20]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d006      	beq.n	800b878 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	8b5b      	ldrh	r3, [r3, #26]
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f7 fd97 	bl	80033b2 <lwip_htonl>
 800b884:	4604      	mov	r4, r0
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	891b      	ldrh	r3, [r3, #8]
 800b88a:	461d      	mov	r5, r3
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	899b      	ldrh	r3, [r3, #12]
 800b892:	b29b      	uxth	r3, r3
 800b894:	4618      	mov	r0, r3
 800b896:	f7f7 fd77 	bl	8003388 <lwip_htons>
 800b89a:	4603      	mov	r3, r0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00e      	beq.n	800b8c4 <tcp_output+0x2cc>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e00d      	b.n	800b8c6 <tcp_output+0x2ce>
 800b8aa:	bf00      	nop
 800b8ac:	080163d4 	.word	0x080163d4
 800b8b0:	0801694c 	.word	0x0801694c
 800b8b4:	08016418 	.word	0x08016418
 800b8b8:	08016964 	.word	0x08016964
 800b8bc:	20002220 	.word	0x20002220
 800b8c0:	0801698c 	.word	0x0801698c
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	442b      	add	r3, r5
 800b8c8:	4423      	add	r3, r4
 800b8ca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	da02      	bge.n	800b8de <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	891b      	ldrh	r3, [r3, #8]
 800b8e2:	461c      	mov	r4, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	899b      	ldrh	r3, [r3, #12]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f7 fd4b 	bl	8003388 <lwip_htons>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <tcp_output+0x30a>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <tcp_output+0x30c>
 800b902:	2300      	movs	r3, #0
 800b904:	4423      	add	r3, r4
 800b906:	2b00      	cmp	r3, #0
 800b908:	d049      	beq.n	800b99e <tcp_output+0x3a6>
      seg->next = NULL;
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b914:	2b00      	cmp	r3, #0
 800b916:	d105      	bne.n	800b924 <tcp_output+0x32c>
        pcb->unacked = seg;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	623b      	str	r3, [r7, #32]
 800b922:	e03f      	b.n	800b9a4 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f7 fd41 	bl	80033b2 <lwip_htonl>
 800b930:	4604      	mov	r4, r0
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f7 fd3a 	bl	80033b2 <lwip_htonl>
 800b93e:	4603      	mov	r3, r0
 800b940:	1ae3      	subs	r3, r4, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	da24      	bge.n	800b990 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3370      	adds	r3, #112	; 0x70
 800b94a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b94c:	e002      	b.n	800b954 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d011      	beq.n	800b980 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	4618      	mov	r0, r3
 800b966:	f7f7 fd24 	bl	80033b2 <lwip_htonl>
 800b96a:	4604      	mov	r4, r0
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	4618      	mov	r0, r3
 800b974:	f7f7 fd1d 	bl	80033b2 <lwip_htonl>
 800b978:	4603      	mov	r3, r0
 800b97a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dbe6      	blt.n	800b94e <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e009      	b.n	800b9a4 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b994:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	623b      	str	r3, [r7, #32]
 800b99c:	e002      	b.n	800b9a4 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b99e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9a0:	f7fb fc54 	bl	800724c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d012      	beq.n	800b9d6 <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f7 fcfb 	bl	80033b2 <lwip_htonl>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c6:	8912      	ldrh	r2, [r2, #8]
 800b9c8:	441a      	add	r2, r3
  while (seg != NULL &&
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	f67f aed2 	bls.w	800b776 <tcp_output+0x17e>
 800b9d2:	e000      	b.n	800b9d6 <tcp_output+0x3de>
      break;
 800b9d4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d107      	bne.n	800b9ee <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b9e6:	e002      	b.n	800b9ee <tcp_output+0x3f6>
    goto output_done;
 800b9e8:	bf00      	nop
 800b9ea:	e000      	b.n	800b9ee <tcp_output+0x3f6>
    goto output_done;
 800b9ec:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	8b5b      	ldrh	r3, [r3, #26]
 800b9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3728      	adds	r7, #40	; 0x28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bdb0      	pop	{r4, r5, r7, pc}
 800ba06:	bf00      	nop

0800ba08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10b      	bne.n	800ba2e <tcp_output_segment_busy+0x26>
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <tcp_output_segment_busy+0x40>)
 800ba18:	f240 529e 	movw	r2, #1438	; 0x59e
 800ba1c:	490b      	ldr	r1, [pc, #44]	; (800ba4c <tcp_output_segment_busy+0x44>)
 800ba1e:	480c      	ldr	r0, [pc, #48]	; (800ba50 <tcp_output_segment_busy+0x48>)
 800ba20:	f007 fae2 	bl	8012fe8 <iprintf>
 800ba24:	2000      	movs	r0, #0
 800ba26:	f007 fbe1 	bl	80131ec <fflush>
 800ba2a:	f007 fb26 	bl	801307a <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	7b9b      	ldrb	r3, [r3, #14]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d001      	beq.n	800ba3c <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e000      	b.n	800ba3e <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	080163d4 	.word	0x080163d4
 800ba4c:	080169a4 	.word	0x080169a4
 800ba50:	08016418 	.word	0x08016418

0800ba54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ba54:	b5b0      	push	{r4, r5, r7, lr}
 800ba56:	b08c      	sub	sp, #48	; 0x30
 800ba58:	af04      	add	r7, sp, #16
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <tcp_output_segment+0x2a>
 800ba66:	4b7c      	ldr	r3, [pc, #496]	; (800bc58 <tcp_output_segment+0x204>)
 800ba68:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800ba6c:	497b      	ldr	r1, [pc, #492]	; (800bc5c <tcp_output_segment+0x208>)
 800ba6e:	487c      	ldr	r0, [pc, #496]	; (800bc60 <tcp_output_segment+0x20c>)
 800ba70:	f007 faba 	bl	8012fe8 <iprintf>
 800ba74:	2000      	movs	r0, #0
 800ba76:	f007 fbb9 	bl	80131ec <fflush>
 800ba7a:	f007 fafe 	bl	801307a <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10b      	bne.n	800ba9c <tcp_output_segment+0x48>
 800ba84:	4b74      	ldr	r3, [pc, #464]	; (800bc58 <tcp_output_segment+0x204>)
 800ba86:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800ba8a:	4976      	ldr	r1, [pc, #472]	; (800bc64 <tcp_output_segment+0x210>)
 800ba8c:	4874      	ldr	r0, [pc, #464]	; (800bc60 <tcp_output_segment+0x20c>)
 800ba8e:	f007 faab 	bl	8012fe8 <iprintf>
 800ba92:	2000      	movs	r0, #0
 800ba94:	f007 fbaa 	bl	80131ec <fflush>
 800ba98:	f007 faef 	bl	801307a <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10b      	bne.n	800baba <tcp_output_segment+0x66>
 800baa2:	4b6d      	ldr	r3, [pc, #436]	; (800bc58 <tcp_output_segment+0x204>)
 800baa4:	f240 52be 	movw	r2, #1470	; 0x5be
 800baa8:	496f      	ldr	r1, [pc, #444]	; (800bc68 <tcp_output_segment+0x214>)
 800baaa:	486d      	ldr	r0, [pc, #436]	; (800bc60 <tcp_output_segment+0x20c>)
 800baac:	f007 fa9c 	bl	8012fe8 <iprintf>
 800bab0:	2000      	movs	r0, #0
 800bab2:	f007 fb9b 	bl	80131ec <fflush>
 800bab6:	f007 fae0 	bl	801307a <abort>

  if (tcp_output_segment_busy(seg)) {
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7ff ffa4 	bl	800ba08 <tcp_output_segment_busy>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e0c2      	b.n	800bc50 <tcp_output_segment+0x1fc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	691c      	ldr	r4, [r3, #16]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f7 fc6d 	bl	80033b2 <lwip_htonl>
 800bad8:	4603      	mov	r3, r0
 800bada:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	691c      	ldr	r4, [r3, #16]
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7f7 fc4f 	bl	8003388 <lwip_htons>
 800baea:	4603      	mov	r3, r0
 800baec:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800baf6:	441a      	add	r2, r3
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	3314      	adds	r3, #20
 800bb02:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	7b1b      	ldrb	r3, [r3, #12]
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d015      	beq.n	800bb3c <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3304      	adds	r3, #4
 800bb14:	461a      	mov	r2, r3
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800bb1c:	f7fb ffa8 	bl	8007a70 <tcp_eff_send_mss_netif>
 800bb20:	4603      	mov	r3, r0
 800bb22:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bb24:	8b7b      	ldrh	r3, [r7, #26]
 800bb26:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7f7 fc41 	bl	80033b2 <lwip_htonl>
 800bb30:	4602      	mov	r2, r0
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da02      	bge.n	800bb4c <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10c      	bne.n	800bb6e <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800bb54:	4b45      	ldr	r3, [pc, #276]	; (800bc6c <tcp_output_segment+0x218>)
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f7 fc25 	bl	80033b2 <lwip_htonl>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	461a      	mov	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	6852      	ldr	r2, [r2, #4]
 800bb86:	8951      	ldrh	r1, [r2, #10]
 800bb88:	8b3a      	ldrh	r2, [r7, #24]
 800bb8a:	1a8a      	subs	r2, r1, r2
 800bb8c:	b292      	uxth	r2, r2
 800bb8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	6852      	ldr	r2, [r2, #4]
 800bb98:	8911      	ldrh	r1, [r2, #8]
 800bb9a:	8b3a      	ldrh	r2, [r7, #24]
 800bb9c:	1a8a      	subs	r2, r1, r2
 800bb9e:	b292      	uxth	r2, r2
 800bba0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	6912      	ldr	r2, [r2, #16]
 800bbaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	741a      	strb	r2, [r3, #16]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	f103 0214 	add.w	r2, r3, #20
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	7b1b      	ldrb	r3, [r3, #12]
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <tcp_output_segment+0x17c>
 800bbcc:	2304      	movs	r3, #4
 800bbce:	e000      	b.n	800bbd2 <tcp_output_segment+0x17e>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	441a      	add	r2, r3
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d00b      	beq.n	800bbf2 <tcp_output_segment+0x19e>
 800bbda:	4b1f      	ldr	r3, [pc, #124]	; (800bc58 <tcp_output_segment+0x204>)
 800bbdc:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800bbe0:	4923      	ldr	r1, [pc, #140]	; (800bc70 <tcp_output_segment+0x21c>)
 800bbe2:	481f      	ldr	r0, [pc, #124]	; (800bc60 <tcp_output_segment+0x20c>)
 800bbe4:	f007 fa00 	bl	8012fe8 <iprintf>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f007 faff 	bl	80131ec <fflush>
 800bbee:	f007 fa44 	bl	801307a <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	691c      	ldr	r4, [r3, #16]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800bbfe:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	2106      	movs	r1, #6
 800bc0c:	f7f7 fcee 	bl	80035ec <ip_chksum_pseudo>
 800bc10:	4603      	mov	r3, r0
 800bc12:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800bc14:	4b17      	ldr	r3, [pc, #92]	; (800bc74 <tcp_output_segment+0x220>)
 800bc16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <tcp_output_segment+0x220>)
 800bc20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6858      	ldr	r0, [r3, #4]
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	1d1c      	adds	r4, r3, #4
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	7add      	ldrb	r5, [r3, #11]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	7a9b      	ldrb	r3, [r3, #10]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	9202      	str	r2, [sp, #8]
 800bc3a:	2206      	movs	r2, #6
 800bc3c:	9201      	str	r2, [sp, #4]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	462b      	mov	r3, r5
 800bc42:	4622      	mov	r2, r4
 800bc44:	f7f7 ff06 	bl	8003a54 <ip4_output_if>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bdb0      	pop	{r4, r5, r7, pc}
 800bc58:	080163d4 	.word	0x080163d4
 800bc5c:	080169cc 	.word	0x080169cc
 800bc60:	08016418 	.word	0x08016418
 800bc64:	080169ec 	.word	0x080169ec
 800bc68:	08016a0c 	.word	0x08016a0c
 800bc6c:	20002210 	.word	0x20002210
 800bc70:	08016a30 	.word	0x08016a30
 800bc74:	20002164 	.word	0x20002164

0800bc78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10b      	bne.n	800bc9e <tcp_rexmit_rto_prepare+0x26>
 800bc86:	4b38      	ldr	r3, [pc, #224]	; (800bd68 <tcp_rexmit_rto_prepare+0xf0>)
 800bc88:	f240 6267 	movw	r2, #1639	; 0x667
 800bc8c:	4937      	ldr	r1, [pc, #220]	; (800bd6c <tcp_rexmit_rto_prepare+0xf4>)
 800bc8e:	4838      	ldr	r0, [pc, #224]	; (800bd70 <tcp_rexmit_rto_prepare+0xf8>)
 800bc90:	f007 f9aa 	bl	8012fe8 <iprintf>
 800bc94:	2000      	movs	r0, #0
 800bc96:	f007 faa9 	bl	80131ec <fflush>
 800bc9a:	f007 f9ee 	bl	801307a <abort>

  if (pcb->unacked == NULL) {
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800bca6:	f06f 0305 	mvn.w	r3, #5
 800bcaa:	e059      	b.n	800bd60 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e00b      	b.n	800bccc <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fea7 	bl	800ba08 <tcp_output_segment_busy>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bcc0:	f06f 0305 	mvn.w	r3, #5
 800bcc4:	e04c      	b.n	800bd60 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ef      	bne.n	800bcb4 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7ff fe97 	bl	800ba08 <tcp_output_segment_busy>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bce0:	f06f 0305 	mvn.w	r3, #5
 800bce4:	e03c      	b.n	800bd60 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d104      	bne.n	800bd00 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	895a      	ldrh	r2, [r3, #10]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8b5b      	ldrh	r3, [r3, #26]
 800bd12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7f7 fb45 	bl	80033b2 <lwip_htonl>
 800bd28:	4604      	mov	r4, r0
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	891b      	ldrh	r3, [r3, #8]
 800bd2e:	461d      	mov	r5, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	899b      	ldrh	r3, [r3, #12]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f7 fb25 	bl	8003388 <lwip_htons>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	f003 0303 	and.w	r3, r3, #3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <tcp_rexmit_rto_prepare+0xd6>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e000      	b.n	800bd50 <tcp_rexmit_rto_prepare+0xd8>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	442b      	add	r3, r5
 800bd52:	18e2      	adds	r2, r4, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bdb0      	pop	{r4, r5, r7, pc}
 800bd68:	080163d4 	.word	0x080163d4
 800bd6c:	08016a44 	.word	0x08016a44
 800bd70:	08016418 	.word	0x08016418

0800bd74 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10b      	bne.n	800bd9a <tcp_rexmit_rto_commit+0x26>
 800bd82:	4b10      	ldr	r3, [pc, #64]	; (800bdc4 <tcp_rexmit_rto_commit+0x50>)
 800bd84:	f240 629c 	movw	r2, #1692	; 0x69c
 800bd88:	490f      	ldr	r1, [pc, #60]	; (800bdc8 <tcp_rexmit_rto_commit+0x54>)
 800bd8a:	4810      	ldr	r0, [pc, #64]	; (800bdcc <tcp_rexmit_rto_commit+0x58>)
 800bd8c:	f007 f92c 	bl	8012fe8 <iprintf>
 800bd90:	2000      	movs	r0, #0
 800bd92:	f007 fa2b 	bl	80131ec <fflush>
 800bd96:	f007 f970 	bl	801307a <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bda0:	2bff      	cmp	r3, #255	; 0xff
 800bda2:	d007      	beq.n	800bdb4 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdaa:	3301      	adds	r3, #1
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff fc1f 	bl	800b5f8 <tcp_output>
}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	080163d4 	.word	0x080163d4
 800bdc8:	08016a68 	.word	0x08016a68
 800bdcc:	08016418 	.word	0x08016418

0800bdd0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <tcp_rexmit_rto+0x26>
 800bdde:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <tcp_rexmit_rto+0x40>)
 800bde0:	f240 62b1 	movw	r2, #1713	; 0x6b1
 800bde4:	490b      	ldr	r1, [pc, #44]	; (800be14 <tcp_rexmit_rto+0x44>)
 800bde6:	480c      	ldr	r0, [pc, #48]	; (800be18 <tcp_rexmit_rto+0x48>)
 800bde8:	f007 f8fe 	bl	8012fe8 <iprintf>
 800bdec:	2000      	movs	r0, #0
 800bdee:	f007 f9fd 	bl	80131ec <fflush>
 800bdf2:	f007 f942 	bl	801307a <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff ff3e 	bl	800bc78 <tcp_rexmit_rto_prepare>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d102      	bne.n	800be08 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff ffb6 	bl	800bd74 <tcp_rexmit_rto_commit>
  }
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	080163d4 	.word	0x080163d4
 800be14:	08016a8c 	.word	0x08016a8c
 800be18:	08016418 	.word	0x08016418

0800be1c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800be1c:	b590      	push	{r4, r7, lr}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10b      	bne.n	800be42 <tcp_rexmit+0x26>
 800be2a:	4b32      	ldr	r3, [pc, #200]	; (800bef4 <tcp_rexmit+0xd8>)
 800be2c:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800be30:	4931      	ldr	r1, [pc, #196]	; (800bef8 <tcp_rexmit+0xdc>)
 800be32:	4832      	ldr	r0, [pc, #200]	; (800befc <tcp_rexmit+0xe0>)
 800be34:	f007 f8d8 	bl	8012fe8 <iprintf>
 800be38:	2000      	movs	r0, #0
 800be3a:	f007 f9d7 	bl	80131ec <fflush>
 800be3e:	f007 f91c 	bl	801307a <abort>

  if (pcb->unacked == NULL) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <tcp_rexmit+0x34>
    return ERR_VAL;
 800be4a:	f06f 0305 	mvn.w	r3, #5
 800be4e:	e04c      	b.n	800beea <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be54:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800be56:	68b8      	ldr	r0, [r7, #8]
 800be58:	f7ff fdd6 	bl	800ba08 <tcp_output_segment_busy>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800be62:	f06f 0305 	mvn.w	r3, #5
 800be66:	e040      	b.n	800beea <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	336c      	adds	r3, #108	; 0x6c
 800be74:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be76:	e002      	b.n	800be7e <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d011      	beq.n	800beaa <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f7 fa8f 	bl	80033b2 <lwip_htonl>
 800be94:	4604      	mov	r4, r0
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f7 fa88 	bl	80033b2 <lwip_htonl>
 800bea2:	4603      	mov	r3, r0
 800bea4:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dbe6      	blt.n	800be78 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d103      	bne.n	800bec8 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bece:	2bff      	cmp	r3, #255	; 0xff
 800bed0:	d007      	beq.n	800bee2 <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bed8:	3301      	adds	r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd90      	pop	{r4, r7, pc}
 800bef2:	bf00      	nop
 800bef4:	080163d4 	.word	0x080163d4
 800bef8:	08016aa8 	.word	0x08016aa8
 800befc:	08016418 	.word	0x08016418

0800bf00 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10b      	bne.n	800bf26 <tcp_rexmit_fast+0x26>
 800bf0e:	4b31      	ldr	r3, [pc, #196]	; (800bfd4 <tcp_rexmit_fast+0xd4>)
 800bf10:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800bf14:	4930      	ldr	r1, [pc, #192]	; (800bfd8 <tcp_rexmit_fast+0xd8>)
 800bf16:	4831      	ldr	r0, [pc, #196]	; (800bfdc <tcp_rexmit_fast+0xdc>)
 800bf18:	f007 f866 	bl	8012fe8 <iprintf>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f007 f965 	bl	80131ec <fflush>
 800bf22:	f007 f8aa 	bl	801307a <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d04d      	beq.n	800bfca <tcp_rexmit_fast+0xca>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	8b5b      	ldrh	r3, [r3, #26]
 800bf32:	f003 0304 	and.w	r3, r3, #4
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d147      	bne.n	800bfca <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff ff6e 	bl	800be1c <tcp_rexmit>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d141      	bne.n	800bfca <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d207      	bcs.n	800bf66 <tcp_rexmit_fast+0x66>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf5c:	0fda      	lsrs	r2, r3, #31
 800bf5e:	4413      	add	r3, r2
 800bf60:	105b      	asrs	r3, r3, #1
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	e006      	b.n	800bf74 <tcp_rexmit_fast+0x74>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf6c:	0fda      	lsrs	r2, r3, #31
 800bf6e:	4413      	add	r3, r2
 800bf70:	105b      	asrs	r3, r3, #1
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bf80:	461a      	mov	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d206      	bcs.n	800bf9a <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	0049      	lsls	r1, r1, #1
 800bfa8:	440b      	add	r3, r1
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	4413      	add	r3, r2
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	8b5b      	ldrh	r3, [r3, #26]
 800bfba:	f043 0304 	orr.w	r3, r3, #4
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	080163d4 	.word	0x080163d4
 800bfd8:	08016ac0 	.word	0x08016ac0
 800bfdc:	08016418 	.word	0x08016418

0800bfe0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	607b      	str	r3, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	817b      	strh	r3, [r7, #10]
 800bfee:	4613      	mov	r3, r2
 800bff0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bff2:	897a      	ldrh	r2, [r7, #10]
 800bff4:	893b      	ldrh	r3, [r7, #8]
 800bff6:	4413      	add	r3, r2
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3314      	adds	r3, #20
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c002:	4619      	mov	r1, r3
 800c004:	2022      	movs	r0, #34	; 0x22
 800c006:	f7f9 f867 	bl	80050d8 <pbuf_alloc>
 800c00a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d053      	beq.n	800c0ba <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	895b      	ldrh	r3, [r3, #10]
 800c016:	461a      	mov	r2, r3
 800c018:	897b      	ldrh	r3, [r7, #10]
 800c01a:	3314      	adds	r3, #20
 800c01c:	429a      	cmp	r2, r3
 800c01e:	da0b      	bge.n	800c038 <tcp_output_alloc_header_common+0x58>
 800c020:	4b28      	ldr	r3, [pc, #160]	; (800c0c4 <tcp_output_alloc_header_common+0xe4>)
 800c022:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c026:	4928      	ldr	r1, [pc, #160]	; (800c0c8 <tcp_output_alloc_header_common+0xe8>)
 800c028:	4828      	ldr	r0, [pc, #160]	; (800c0cc <tcp_output_alloc_header_common+0xec>)
 800c02a:	f006 ffdd 	bl	8012fe8 <iprintf>
 800c02e:	2000      	movs	r0, #0
 800c030:	f007 f8dc 	bl	80131ec <fflush>
 800c034:	f007 f821 	bl	801307a <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c03e:	8c3b      	ldrh	r3, [r7, #32]
 800c040:	4618      	mov	r0, r3
 800c042:	f7f7 f9a1 	bl	8003388 <lwip_htons>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c050:	4618      	mov	r0, r3
 800c052:	f7f7 f999 	bl	8003388 <lwip_htons>
 800c056:	4603      	mov	r3, r0
 800c058:	461a      	mov	r2, r3
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f7f7 f9a4 	bl	80033b2 <lwip_htonl>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c070:	897b      	ldrh	r3, [r7, #10]
 800c072:	089b      	lsrs	r3, r3, #2
 800c074:	b29b      	uxth	r3, r3
 800c076:	3305      	adds	r3, #5
 800c078:	b29b      	uxth	r3, r3
 800c07a:	031b      	lsls	r3, r3, #12
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c082:	b29b      	uxth	r3, r3
 800c084:	4313      	orrs	r3, r2
 800c086:	b29b      	uxth	r3, r3
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f7 f97d 	bl	8003388 <lwip_htons>
 800c08e:	4603      	mov	r3, r0
 800c090:	461a      	mov	r2, r3
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c096:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c098:	4618      	mov	r0, r3
 800c09a:	f7f7 f975 	bl	8003388 <lwip_htons>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	741a      	strb	r2, [r3, #16]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	749a      	strb	r2, [r3, #18]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c0ba:	697b      	ldr	r3, [r7, #20]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	080163d4 	.word	0x080163d4
 800c0c8:	08016ae0 	.word	0x08016ae0
 800c0cc:	08016418 	.word	0x08016418

0800c0d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c0d0:	b5b0      	push	{r4, r5, r7, lr}
 800c0d2:	b08a      	sub	sp, #40	; 0x28
 800c0d4:	af04      	add	r7, sp, #16
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	607b      	str	r3, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	817b      	strh	r3, [r7, #10]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10b      	bne.n	800c100 <tcp_output_alloc_header+0x30>
 800c0e8:	4b17      	ldr	r3, [pc, #92]	; (800c148 <tcp_output_alloc_header+0x78>)
 800c0ea:	f240 7246 	movw	r2, #1862	; 0x746
 800c0ee:	4917      	ldr	r1, [pc, #92]	; (800c14c <tcp_output_alloc_header+0x7c>)
 800c0f0:	4817      	ldr	r0, [pc, #92]	; (800c150 <tcp_output_alloc_header+0x80>)
 800c0f2:	f006 ff79 	bl	8012fe8 <iprintf>
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f007 f878 	bl	80131ec <fflush>
 800c0fc:	f006 ffbd 	bl	801307a <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	8adb      	ldrh	r3, [r3, #22]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	8b12      	ldrh	r2, [r2, #24]
 800c10c:	68f9      	ldr	r1, [r7, #12]
 800c10e:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c110:	893d      	ldrh	r5, [r7, #8]
 800c112:	897c      	ldrh	r4, [r7, #10]
 800c114:	9103      	str	r1, [sp, #12]
 800c116:	2110      	movs	r1, #16
 800c118:	9102      	str	r1, [sp, #8]
 800c11a:	9201      	str	r2, [sp, #4]
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	462a      	mov	r2, r5
 800c122:	4621      	mov	r1, r4
 800c124:	f7ff ff5c 	bl	800bfe0 <tcp_output_alloc_header_common>
 800c128:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c138:	441a      	add	r2, r3
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c13e:	697b      	ldr	r3, [r7, #20]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bdb0      	pop	{r4, r5, r7, pc}
 800c148:	080163d4 	.word	0x080163d4
 800c14c:	08016b10 	.word	0x08016b10
 800c150:	08016418 	.word	0x08016418

0800c154 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4611      	mov	r1, r2
 800c160:	461a      	mov	r2, r3
 800c162:	460b      	mov	r3, r1
 800c164:	71fb      	strb	r3, [r7, #7]
 800c166:	4613      	mov	r3, r2
 800c168:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10b      	bne.n	800c18c <tcp_output_fill_options+0x38>
 800c174:	4b1a      	ldr	r3, [pc, #104]	; (800c1e0 <tcp_output_fill_options+0x8c>)
 800c176:	f240 725a 	movw	r2, #1882	; 0x75a
 800c17a:	491a      	ldr	r1, [pc, #104]	; (800c1e4 <tcp_output_fill_options+0x90>)
 800c17c:	481a      	ldr	r0, [pc, #104]	; (800c1e8 <tcp_output_fill_options+0x94>)
 800c17e:	f006 ff33 	bl	8012fe8 <iprintf>
 800c182:	2000      	movs	r0, #0
 800c184:	f007 f832 	bl	80131ec <fflush>
 800c188:	f006 ff77 	bl	801307a <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	3314      	adds	r3, #20
 800c196:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	f103 0214 	add.w	r2, r3, #20
 800c19e:	8bfb      	ldrh	r3, [r7, #30]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	79fb      	ldrb	r3, [r7, #7]
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <tcp_output_fill_options+0x5e>
 800c1ae:	2304      	movs	r3, #4
 800c1b0:	e000      	b.n	800c1b4 <tcp_output_fill_options+0x60>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	440b      	add	r3, r1
 800c1b6:	441a      	add	r2, r3
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d00b      	beq.n	800c1d6 <tcp_output_fill_options+0x82>
 800c1be:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <tcp_output_fill_options+0x8c>)
 800c1c0:	f240 7279 	movw	r2, #1913	; 0x779
 800c1c4:	4909      	ldr	r1, [pc, #36]	; (800c1ec <tcp_output_fill_options+0x98>)
 800c1c6:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <tcp_output_fill_options+0x94>)
 800c1c8:	f006 ff0e 	bl	8012fe8 <iprintf>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f007 f80d 	bl	80131ec <fflush>
 800c1d2:	f006 ff52 	bl	801307a <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c1d6:	bf00      	nop
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	080163d4 	.word	0x080163d4
 800c1e4:	08016b38 	.word	0x08016b38
 800c1e8:	08016418 	.word	0x08016418
 800c1ec:	08016a30 	.word	0x08016a30

0800c1f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af02      	add	r7, sp, #8
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10b      	bne.n	800c21c <tcp_output_control_segment+0x2c>
 800c204:	4b13      	ldr	r3, [pc, #76]	; (800c254 <tcp_output_control_segment+0x64>)
 800c206:	f240 728a 	movw	r2, #1930	; 0x78a
 800c20a:	4913      	ldr	r1, [pc, #76]	; (800c258 <tcp_output_control_segment+0x68>)
 800c20c:	4813      	ldr	r0, [pc, #76]	; (800c25c <tcp_output_control_segment+0x6c>)
 800c20e:	f006 feeb 	bl	8012fe8 <iprintf>
 800c212:	2000      	movs	r0, #0
 800c214:	f006 ffea 	bl	80131ec <fflush>
 800c218:	f006 ff2f 	bl	801307a <abort>

  netif = tcp_route(pcb, src, dst);
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7fe f93b 	bl	800a49c <tcp_route>
 800c226:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d105      	bne.n	800c23a <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 800c22e:	68b8      	ldr	r0, [r7, #8]
 800c230:	f7f9 f9bc 	bl	80055ac <pbuf_free>
    return ERR_RTE;
 800c234:	f06f 0303 	mvn.w	r3, #3
 800c238:	e008      	b.n	800c24c <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f80b 	bl	800c260 <tcp_output_control_segment_netif>
 800c24a:	4603      	mov	r3, r0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	080163d4 	.word	0x080163d4
 800c258:	08016b60 	.word	0x08016b60
 800c25c:	08016418 	.word	0x08016418

0800c260 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08c      	sub	sp, #48	; 0x30
 800c264:	af04      	add	r7, sp, #16
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10b      	bne.n	800c28c <tcp_output_control_segment_netif+0x2c>
 800c274:	4b24      	ldr	r3, [pc, #144]	; (800c308 <tcp_output_control_segment_netif+0xa8>)
 800c276:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800c27a:	4924      	ldr	r1, [pc, #144]	; (800c30c <tcp_output_control_segment_netif+0xac>)
 800c27c:	4824      	ldr	r0, [pc, #144]	; (800c310 <tcp_output_control_segment_netif+0xb0>)
 800c27e:	f006 feb3 	bl	8012fe8 <iprintf>
 800c282:	2000      	movs	r0, #0
 800c284:	f006 ffb2 	bl	80131ec <fflush>
 800c288:	f006 fef7 	bl	801307a <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	891a      	ldrh	r2, [r3, #8]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2106      	movs	r1, #6
 800c29e:	68b8      	ldr	r0, [r7, #8]
 800c2a0:	f7f7 f9a4 	bl	80035ec <ip_chksum_pseudo>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d006      	beq.n	800c2c0 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	7adb      	ldrb	r3, [r3, #11]
 800c2b6:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	7a9b      	ldrb	r3, [r3, #10]
 800c2bc:	77bb      	strb	r3, [r7, #30]
 800c2be:	e003      	b.n	800c2c8 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 800c2c0:	23ff      	movs	r3, #255	; 0xff
 800c2c2:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
 800c2c8:	4b12      	ldr	r3, [pc, #72]	; (800c314 <tcp_output_control_segment_netif+0xb4>)
 800c2ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	4b10      	ldr	r3, [pc, #64]	; (800c314 <tcp_output_control_segment_netif+0xb4>)
 800c2d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2d8:	7ffa      	ldrb	r2, [r7, #31]
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	2306      	movs	r3, #6
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	7fbb      	ldrb	r3, [r7, #30]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	68b8      	ldr	r0, [r7, #8]
 800c2ee:	f7f7 fbb1 	bl	8003a54 <ip4_output_if>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800c2f6:	68b8      	ldr	r0, [r7, #8]
 800c2f8:	f7f9 f958 	bl	80055ac <pbuf_free>
  return err;
 800c2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	080163d4 	.word	0x080163d4
 800c30c:	08016b8c 	.word	0x08016b8c
 800c310:	08016418 	.word	0x08016418
 800c314:	20002164 	.word	0x20002164

0800c318 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 800c318:	b590      	push	{r4, r7, lr}
 800c31a:	b08b      	sub	sp, #44	; 0x2c
 800c31c:	af04      	add	r7, sp, #16
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10b      	bne.n	800c344 <tcp_rst_common+0x2c>
 800c32c:	4b22      	ldr	r3, [pc, #136]	; (800c3b8 <tcp_rst_common+0xa0>)
 800c32e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c332:	4922      	ldr	r1, [pc, #136]	; (800c3bc <tcp_rst_common+0xa4>)
 800c334:	4822      	ldr	r0, [pc, #136]	; (800c3c0 <tcp_rst_common+0xa8>)
 800c336:	f006 fe57 	bl	8012fe8 <iprintf>
 800c33a:	2000      	movs	r0, #0
 800c33c:	f006 ff56 	bl	80131ec <fflush>
 800c340:	f006 fe9b 	bl	801307a <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <tcp_rst_common+0x4a>
 800c34a:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <tcp_rst_common+0xa0>)
 800c34c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c350:	491c      	ldr	r1, [pc, #112]	; (800c3c4 <tcp_rst_common+0xac>)
 800c352:	481b      	ldr	r0, [pc, #108]	; (800c3c0 <tcp_rst_common+0xa8>)
 800c354:	f006 fe48 	bl	8012fe8 <iprintf>
 800c358:	2000      	movs	r0, #0
 800c35a:	f006 ff47 	bl	80131ec <fflush>
 800c35e:	f006 fe8c 	bl	801307a <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c366:	f24b 4305 	movw	r3, #46085	; 0xb405
 800c36a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c36c:	7dfb      	ldrb	r3, [r7, #23]
 800c36e:	b29c      	uxth	r4, r3
 800c370:	68b8      	ldr	r0, [r7, #8]
 800c372:	f7f7 f81e 	bl	80033b2 <lwip_htonl>
 800c376:	4602      	mov	r2, r0
 800c378:	8abb      	ldrh	r3, [r7, #20]
 800c37a:	9303      	str	r3, [sp, #12]
 800c37c:	2314      	movs	r3, #20
 800c37e:	9302      	str	r3, [sp, #8]
 800c380:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c382:	9301      	str	r3, [sp, #4]
 800c384:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	4613      	mov	r3, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	4621      	mov	r1, r4
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff fe26 	bl	800bfe0 <tcp_output_alloc_header_common>
 800c394:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 800c39c:	2300      	movs	r3, #0
 800c39e:	e006      	b.n	800c3ae <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	6939      	ldr	r1, [r7, #16]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff fed4 	bl	800c154 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 800c3ac:	693b      	ldr	r3, [r7, #16]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	371c      	adds	r7, #28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd90      	pop	{r4, r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	080163d4 	.word	0x080163d4
 800c3bc:	08016bc0 	.word	0x08016bc0
 800c3c0:	08016418 	.word	0x08016418
 800c3c4:	08016bdc 	.word	0x08016bdc

0800c3c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08a      	sub	sp, #40	; 0x28
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800c3d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3d8:	9302      	str	r3, [sp, #8]
 800c3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff ff95 	bl	800c318 <tcp_rst_common>
 800c3ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c3f6:	6a3b      	ldr	r3, [r7, #32]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	6979      	ldr	r1, [r7, #20]
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff fef7 	bl	800c1f0 <tcp_output_control_segment>
  }
}
 800c402:	bf00      	nop
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b08a      	sub	sp, #40	; 0x28
 800c40e:	af04      	add	r7, sp, #16
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
 800c416:	603b      	str	r3, [r7, #0]
  if (netif) {
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d017      	beq.n	800c44e <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800c41e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c420:	9302      	str	r3, [sp, #8]
 800c422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	2000      	movs	r0, #0
 800c432:	f7ff ff71 	bl	800c318 <tcp_rst_common>
 800c436:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	6979      	ldr	r1, [r7, #20]
 800c448:	2000      	movs	r0, #0
 800c44a:	f7ff ff09 	bl	800c260 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800c44e:	bf00      	nop
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c458:	b590      	push	{r4, r7, lr}
 800c45a:	b087      	sub	sp, #28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10b      	bne.n	800c486 <tcp_send_empty_ack+0x2e>
 800c46e:	4b2c      	ldr	r3, [pc, #176]	; (800c520 <tcp_send_empty_ack+0xc8>)
 800c470:	f44f 6203 	mov.w	r2, #2096	; 0x830
 800c474:	492b      	ldr	r1, [pc, #172]	; (800c524 <tcp_send_empty_ack+0xcc>)
 800c476:	482c      	ldr	r0, [pc, #176]	; (800c528 <tcp_send_empty_ack+0xd0>)
 800c478:	f006 fdb6 	bl	8012fe8 <iprintf>
 800c47c:	2000      	movs	r0, #0
 800c47e:	f006 feb5 	bl	80131ec <fflush>
 800c482:	f006 fdfa 	bl	801307a <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <tcp_send_empty_ack+0x3c>
 800c490:	2304      	movs	r3, #4
 800c492:	e000      	b.n	800c496 <tcp_send_empty_ack+0x3e>
 800c494:	2300      	movs	r3, #0
 800c496:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c498:	7d7b      	ldrb	r3, [r7, #21]
 800c49a:	b29c      	uxth	r4, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f6 ff86 	bl	80033b2 <lwip_htonl>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7ff fe0f 	bl	800c0d0 <tcp_output_alloc_header>
 800c4b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d109      	bne.n	800c4ce <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8b5b      	ldrh	r3, [r3, #26]
 800c4be:	f043 0303 	orr.w	r3, r3, #3
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c4c8:	f06f 0301 	mvn.w	r3, #1
 800c4cc:	e023      	b.n	800c516 <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c4ce:	7dbb      	ldrb	r3, [r7, #22]
 800c4d0:	7dfa      	ldrb	r2, [r7, #23]
 800c4d2:	6939      	ldr	r1, [r7, #16]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff fe3d 	bl	800c154 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	6939      	ldr	r1, [r7, #16]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe84 	bl	800c1f0 <tcp_output_control_segment>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d007      	beq.n	800c504 <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	8b5b      	ldrh	r3, [r3, #26]
 800c4f8:	f043 0303 	orr.w	r3, r3, #3
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	835a      	strh	r2, [r3, #26]
 800c502:	e006      	b.n	800c512 <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	8b5b      	ldrh	r3, [r3, #26]
 800c508:	f023 0303 	bic.w	r3, r3, #3
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	371c      	adds	r7, #28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}
 800c51e:	bf00      	nop
 800c520:	080163d4 	.word	0x080163d4
 800c524:	08016bf8 	.word	0x08016bf8
 800c528:	08016418 	.word	0x08016418

0800c52c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c52c:	b590      	push	{r4, r7, lr}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c534:	2300      	movs	r3, #0
 800c536:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <tcp_keepalive+0x2a>
 800c53e:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <tcp_keepalive+0x80>)
 800c540:	f640 026a 	movw	r2, #2154	; 0x86a
 800c544:	491a      	ldr	r1, [pc, #104]	; (800c5b0 <tcp_keepalive+0x84>)
 800c546:	481b      	ldr	r0, [pc, #108]	; (800c5b4 <tcp_keepalive+0x88>)
 800c548:	f006 fd4e 	bl	8012fe8 <iprintf>
 800c54c:	2000      	movs	r0, #0
 800c54e:	f006 fe4d 	bl	80131ec <fflush>
 800c552:	f006 fd92 	bl	801307a <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	b29c      	uxth	r4, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55e:	3b01      	subs	r3, #1
 800c560:	4618      	mov	r0, r3
 800c562:	f7f6 ff26 	bl	80033b2 <lwip_htonl>
 800c566:	4603      	mov	r3, r0
 800c568:	2200      	movs	r2, #0
 800c56a:	4621      	mov	r1, r4
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff fdaf 	bl	800c0d0 <tcp_output_alloc_header>
 800c572:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d102      	bne.n	800c580 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c57a:	f04f 33ff 	mov.w	r3, #4294967295
 800c57e:	e010      	b.n	800c5a2 <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800c580:	2300      	movs	r3, #0
 800c582:	2200      	movs	r2, #0
 800c584:	6939      	ldr	r1, [r7, #16]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff fde4 	bl	800c154 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3304      	adds	r3, #4
 800c592:	6939      	ldr	r1, [r7, #16]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff fe2b 	bl	800c1f0 <tcp_output_control_segment>
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	371c      	adds	r7, #28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd90      	pop	{r4, r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	080163d4 	.word	0x080163d4
 800c5b0:	08016c18 	.word	0x08016c18
 800c5b4:	08016418 	.word	0x08016418

0800c5b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b08b      	sub	sp, #44	; 0x2c
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <tcp_zero_window_probe+0x2c>
 800c5cc:	4b4e      	ldr	r3, [pc, #312]	; (800c708 <tcp_zero_window_probe+0x150>)
 800c5ce:	f640 0295 	movw	r2, #2197	; 0x895
 800c5d2:	494e      	ldr	r1, [pc, #312]	; (800c70c <tcp_zero_window_probe+0x154>)
 800c5d4:	484e      	ldr	r0, [pc, #312]	; (800c710 <tcp_zero_window_probe+0x158>)
 800c5d6:	f006 fd07 	bl	8012fe8 <iprintf>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	f006 fe06 	bl	80131ec <fflush>
 800c5e0:	f006 fd4b 	bl	801307a <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e8:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e085      	b.n	800c700 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5fa:	2bff      	cmp	r3, #255	; 0xff
 800c5fc:	d007      	beq.n	800c60e <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c604:	3301      	adds	r3, #1
 800c606:	b2da      	uxtb	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	899b      	ldrh	r3, [r3, #12]
 800c614:	b29b      	uxth	r3, r3
 800c616:	4618      	mov	r0, r3
 800c618:	f7f6 feb6 	bl	8003388 <lwip_htons>
 800c61c:	4603      	mov	r3, r0
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	f003 0301 	and.w	r3, r3, #1
 800c624:	2b00      	cmp	r3, #0
 800c626:	d005      	beq.n	800c634 <tcp_zero_window_probe+0x7c>
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	891b      	ldrh	r3, [r3, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <tcp_zero_window_probe+0x7c>
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <tcp_zero_window_probe+0x7e>
 800c634:	2300      	movs	r3, #0
 800c636:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c638:	7ffb      	ldrb	r3, [r7, #31]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf0c      	ite	eq
 800c63e:	2301      	moveq	r3, #1
 800c640:	2300      	movne	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c64a:	b299      	uxth	r1, r3
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	8bba      	ldrh	r2, [r7, #28]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff fd3b 	bl	800c0d0 <tcp_output_alloc_header>
 800c65a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c662:	f04f 33ff 	mov.w	r3, #4294967295
 800c666:	e04b      	b.n	800c700 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c66e:	7ffb      	ldrb	r3, [r7, #31]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d011      	beq.n	800c698 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	899b      	ldrh	r3, [r3, #12]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c680:	b21c      	sxth	r4, r3
 800c682:	2011      	movs	r0, #17
 800c684:	f7f6 fe80 	bl	8003388 <lwip_htons>
 800c688:	4603      	mov	r3, r0
 800c68a:	b21b      	sxth	r3, r3
 800c68c:	4323      	orrs	r3, r4
 800c68e:	b21b      	sxth	r3, r3
 800c690:	b29a      	uxth	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	819a      	strh	r2, [r3, #12]
 800c696:	e010      	b.n	800c6ba <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	3314      	adds	r3, #20
 800c69e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	6858      	ldr	r0, [r3, #4]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	891a      	ldrh	r2, [r3, #8]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	891b      	ldrh	r3, [r3, #8]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	6939      	ldr	r1, [r7, #16]
 800c6b6:	f7f9 f9e9 	bl	8005a8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7f6 fe76 	bl	80033b2 <lwip_htonl>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	da02      	bge.n	800c6de <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800c6de:	2300      	movs	r3, #0
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	69b9      	ldr	r1, [r7, #24]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff fd35 	bl	800c154 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	69b9      	ldr	r1, [r7, #24]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff fd7c 	bl	800c1f0 <tcp_output_control_segment>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c6fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c700:	4618      	mov	r0, r3
 800c702:	372c      	adds	r7, #44	; 0x2c
 800c704:	46bd      	mov	sp, r7
 800c706:	bd90      	pop	{r4, r7, pc}
 800c708:	080163d4 	.word	0x080163d4
 800c70c:	08016c34 	.word	0x08016c34
 800c710:	08016418 	.word	0x08016418

0800c714 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c71c:	f7f9 fba4 	bl	8005e68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <tcpip_tcp_timer+0x38>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d103      	bne.n	800c730 <tcpip_tcp_timer+0x1c>
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <tcpip_tcp_timer+0x3c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c730:	2200      	movs	r2, #0
 800c732:	4908      	ldr	r1, [pc, #32]	; (800c754 <tcpip_tcp_timer+0x40>)
 800c734:	20fa      	movs	r0, #250	; 0xfa
 800c736:	f000 f8e9 	bl	800c90c <sys_timeout>
 800c73a:	e002      	b.n	800c742 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <tcpip_tcp_timer+0x44>)
 800c73e:	2200      	movs	r2, #0
 800c740:	601a      	str	r2, [r3, #0]
  }
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	2000220c 	.word	0x2000220c
 800c750:	2000221c 	.word	0x2000221c
 800c754:	0800c715 	.word	0x0800c715
 800c758:	20000688 	.word	0x20000688

0800c75c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <tcp_timer_needed+0x30>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10f      	bne.n	800c788 <tcp_timer_needed+0x2c>
 800c768:	4b09      	ldr	r3, [pc, #36]	; (800c790 <tcp_timer_needed+0x34>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <tcp_timer_needed+0x1c>
 800c770:	4b08      	ldr	r3, [pc, #32]	; (800c794 <tcp_timer_needed+0x38>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c778:	4b04      	ldr	r3, [pc, #16]	; (800c78c <tcp_timer_needed+0x30>)
 800c77a:	2201      	movs	r2, #1
 800c77c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c77e:	2200      	movs	r2, #0
 800c780:	4905      	ldr	r1, [pc, #20]	; (800c798 <tcp_timer_needed+0x3c>)
 800c782:	20fa      	movs	r0, #250	; 0xfa
 800c784:	f000 f8c2 	bl	800c90c <sys_timeout>
  }
}
 800c788:	bf00      	nop
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000688 	.word	0x20000688
 800c790:	2000220c 	.word	0x2000220c
 800c794:	2000221c 	.word	0x2000221c
 800c798:	0800c715 	.word	0x0800c715

0800c79c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c7a8:	2005      	movs	r0, #5
 800c7aa:	f7f8 f8b9 	bl	8004920 <memp_malloc>
 800c7ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10d      	bne.n	800c7d2 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d14d      	bne.n	800c858 <sys_timeout_abs+0xbc>
 800c7bc:	4b28      	ldr	r3, [pc, #160]	; (800c860 <sys_timeout_abs+0xc4>)
 800c7be:	22be      	movs	r2, #190	; 0xbe
 800c7c0:	4928      	ldr	r1, [pc, #160]	; (800c864 <sys_timeout_abs+0xc8>)
 800c7c2:	4829      	ldr	r0, [pc, #164]	; (800c868 <sys_timeout_abs+0xcc>)
 800c7c4:	f006 fc10 	bl	8012fe8 <iprintf>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	f006 fd0f 	bl	80131ec <fflush>
 800c7ce:	f006 fc54 	bl	801307a <abort>
    return;
  }

  timeout->next = NULL;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c7ea:	4b20      	ldr	r3, [pc, #128]	; (800c86c <sys_timeout_abs+0xd0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d103      	bne.n	800c7fa <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800c7f2:	4a1e      	ldr	r2, [pc, #120]	; (800c86c <sys_timeout_abs+0xd0>)
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	6013      	str	r3, [r2, #0]
    return;
 800c7f8:	e02f      	b.n	800c85a <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	4b1b      	ldr	r3, [pc, #108]	; (800c86c <sys_timeout_abs+0xd0>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	da07      	bge.n	800c81a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <sys_timeout_abs+0xd0>)
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c812:	4a16      	ldr	r2, [pc, #88]	; (800c86c <sys_timeout_abs+0xd0>)
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	e01f      	b.n	800c85a <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c81a:	4b14      	ldr	r3, [pc, #80]	; (800c86c <sys_timeout_abs+0xd0>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	617b      	str	r3, [r7, #20]
 800c820:	e016      	b.n	800c850 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <sys_timeout_abs+0x9e>
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	da07      	bge.n	800c84a <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	601a      	str	r2, [r3, #0]
        break;
 800c848:	e007      	b.n	800c85a <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1e5      	bne.n	800c822 <sys_timeout_abs+0x86>
 800c856:	e000      	b.n	800c85a <sys_timeout_abs+0xbe>
    return;
 800c858:	bf00      	nop
      }
    }
  }
}
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08016c58 	.word	0x08016c58
 800c864:	08016c7c 	.word	0x08016c7c
 800c868:	08016cbc 	.word	0x08016cbc
 800c86c:	20000680 	.word	0x20000680

0800c870 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	4798      	blx	r3

  now = sys_now();
 800c882:	f7f4 fd13 	bl	80012ac <sys_now>
 800c886:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <lwip_cyclic_timer+0x54>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4413      	add	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	da09      	bge.n	800c8b2 <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	4907      	ldr	r1, [pc, #28]	; (800c8c8 <lwip_cyclic_timer+0x58>)
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7ff ff76 	bl	800c79c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c8b0:	e004      	b.n	800c8bc <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	4904      	ldr	r1, [pc, #16]	; (800c8c8 <lwip_cyclic_timer+0x58>)
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff ff70 	bl	800c79c <sys_timeout_abs>
}
 800c8bc:	bf00      	nop
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20000684 	.word	0x20000684
 800c8c8:	0800c871 	.word	0x0800c871

0800c8cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	e00e      	b.n	800c8f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c8d8:	4a0a      	ldr	r2, [pc, #40]	; (800c904 <sys_timeouts_init+0x38>)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	4a07      	ldr	r2, [pc, #28]	; (800c904 <sys_timeouts_init+0x38>)
 800c8e6:	4413      	add	r3, r2
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4907      	ldr	r1, [pc, #28]	; (800c908 <sys_timeouts_init+0x3c>)
 800c8ec:	f000 f80e 	bl	800c90c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0ed      	beq.n	800c8d8 <sys_timeouts_init+0xc>
  }
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	08017194 	.word	0x08017194
 800c908:	0800c871 	.word	0x0800c871

0800c90c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c91e:	d30b      	bcc.n	800c938 <sys_timeout+0x2c>
 800c920:	4b0d      	ldr	r3, [pc, #52]	; (800c958 <sys_timeout+0x4c>)
 800c922:	f240 1229 	movw	r2, #297	; 0x129
 800c926:	490d      	ldr	r1, [pc, #52]	; (800c95c <sys_timeout+0x50>)
 800c928:	480d      	ldr	r0, [pc, #52]	; (800c960 <sys_timeout+0x54>)
 800c92a:	f006 fb5d 	bl	8012fe8 <iprintf>
 800c92e:	2000      	movs	r0, #0
 800c930:	f006 fc5c 	bl	80131ec <fflush>
 800c934:	f006 fba1 	bl	801307a <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800c938:	f7f4 fcb8 	bl	80012ac <sys_now>
 800c93c:	4602      	mov	r2, r0
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	6978      	ldr	r0, [r7, #20]
 800c94a:	f7ff ff27 	bl	800c79c <sys_timeout_abs>
#endif
}
 800c94e:	bf00      	nop
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	08016c58 	.word	0x08016c58
 800c95c:	08016ce4 	.word	0x08016ce4
 800c960:	08016cbc 	.word	0x08016cbc

0800c964 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <sys_untimeout+0x70>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d02a      	beq.n	800c9cc <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800c976:	4b17      	ldr	r3, [pc, #92]	; (800c9d4 <sys_untimeout+0x70>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	60bb      	str	r3, [r7, #8]
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e01f      	b.n	800c9c2 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d115      	bne.n	800c9b8 <sys_untimeout+0x54>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	68da      	ldr	r2, [r3, #12]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	429a      	cmp	r2, r3
 800c994:	d110      	bne.n	800c9b8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d104      	bne.n	800c9a6 <sys_untimeout+0x42>
        next_timeout = t->next;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a0c      	ldr	r2, [pc, #48]	; (800c9d4 <sys_untimeout+0x70>)
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	e003      	b.n	800c9ae <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	2005      	movs	r0, #5
 800c9b2:	f7f8 f825 	bl	8004a00 <memp_free>
      return;
 800c9b6:	e00a      	b.n	800c9ce <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60bb      	str	r3, [r7, #8]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1dc      	bne.n	800c982 <sys_untimeout+0x1e>
    }
  }
  return;
 800c9c8:	bf00      	nop
 800c9ca:	e000      	b.n	800c9ce <sys_untimeout+0x6a>
    return;
 800c9cc:	bf00      	nop
}
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20000680 	.word	0x20000680

0800c9d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c9de:	f7f4 fc65 	bl	80012ac <sys_now>
 800c9e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <sys_check_timeouts+0x64>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01e      	beq.n	800ca2e <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	db1a      	blt.n	800ca32 <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a0e      	ldr	r2, [pc, #56]	; (800ca3c <sys_check_timeouts+0x64>)
 800ca02:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a0a      	ldr	r2, [pc, #40]	; (800ca40 <sys_check_timeouts+0x68>)
 800ca16:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	2005      	movs	r0, #5
 800ca1c:	f7f7 fff0 	bl	8004a00 <memp_free>
    if (handler != NULL) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0de      	beq.n	800c9e4 <sys_check_timeouts+0xc>
      handler(arg);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6838      	ldr	r0, [r7, #0]
 800ca2a:	4798      	blx	r3
  do {
 800ca2c:	e7da      	b.n	800c9e4 <sys_check_timeouts+0xc>
      return;
 800ca2e:	bf00      	nop
 800ca30:	e000      	b.n	800ca34 <sys_check_timeouts+0x5c>
      return;
 800ca32:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000680 	.word	0x20000680
 800ca40:	20000684 	.word	0x20000684

0800ca44 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ca4a:	4b16      	ldr	r3, [pc, #88]	; (800caa4 <sys_timeouts_sleeptime+0x60>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ca52:	f04f 33ff 	mov.w	r3, #4294967295
 800ca56:	e021      	b.n	800ca9c <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800ca58:	f7f4 fc28 	bl	80012ac <sys_now>
 800ca5c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ca5e:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <sys_timeouts_sleeptime+0x60>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	da01      	bge.n	800ca70 <sys_timeouts_sleeptime+0x2c>
    return 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e015      	b.n	800ca9c <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <sys_timeouts_sleeptime+0x60>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	da0b      	bge.n	800ca9a <sys_timeouts_sleeptime+0x56>
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <sys_timeouts_sleeptime+0x64>)
 800ca84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ca88:	4908      	ldr	r1, [pc, #32]	; (800caac <sys_timeouts_sleeptime+0x68>)
 800ca8a:	4809      	ldr	r0, [pc, #36]	; (800cab0 <sys_timeouts_sleeptime+0x6c>)
 800ca8c:	f006 faac 	bl	8012fe8 <iprintf>
 800ca90:	2000      	movs	r0, #0
 800ca92:	f006 fbab 	bl	80131ec <fflush>
 800ca96:	f006 faf0 	bl	801307a <abort>
    return ret;
 800ca9a:	683b      	ldr	r3, [r7, #0]
  }
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20000680 	.word	0x20000680
 800caa8:	08016c58 	.word	0x08016c58
 800caac:	08016d1c 	.word	0x08016d1c
 800cab0:	08016cbc 	.word	0x08016cbc

0800cab4 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00a      	beq.n	800caf0 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800cada:	210c      	movs	r1, #12
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f004 fedd 	bl	801189c <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f002 fc30 	bl	800f348 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f004 fec7 	bl	801187c <ppp_link_terminated>
 800caee:	e000      	b.n	800caf2 <link_terminated+0x2a>
	return;
 800caf0:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f80d 	bl	800cb20 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800cb10:	2106      	movs	r1, #6
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f004 fec2 	bl	801189c <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	e01e      	b.n	800cb6c <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	f24c 0221 	movw	r2, #49185	; 0xc021
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d007      	beq.n	800cb4a <upper_layers_down+0x2a>
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	695b      	ldr	r3, [r3, #20]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb52:	d208      	bcs.n	800cb66 <upper_layers_down+0x46>
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	490c      	ldr	r1, [pc, #48]	; (800cb94 <upper_layers_down+0x74>)
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	4a0a      	ldr	r2, [pc, #40]	; (800cb98 <upper_layers_down+0x78>)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb74:	60bb      	str	r3, [r7, #8]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1d8      	bne.n	800cb2e <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800cb8c:	bf00      	nop
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	08016d30 	.word	0x08016d30
 800cb98:	08017268 	.word	0x08017268

0800cb9c <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	33cc      	adds	r3, #204	; 0xcc
 800cba8:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cbaa:	2300      	movs	r3, #0
 800cbac:	613b      	str	r3, [r7, #16]
 800cbae:	e010      	b.n	800cbd2 <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	881b      	ldrh	r3, [r3, #0]
 800cbb4:	f24c 0221 	movw	r2, #49185	; 0xc021
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d007      	beq.n	800cbcc <link_established+0x30>
		&& protp->lowerup != NULL)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <link_established+0x30>
		(*protp->lowerup)(pcb);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	613b      	str	r3, [r7, #16]
 800cbd2:	4a19      	ldr	r2, [pc, #100]	; (800cc38 <link_established+0x9c>)
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbda:	60bb      	str	r3, [r7, #8]
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1e6      	bne.n	800cbb0 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800cbe2:	2107      	movs	r1, #7
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f004 fe59 	bl	801189c <new_phase>
    auth = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	f003 0310 	and.w	r3, r3, #16
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6859      	ldr	r1, [r3, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	461a      	mov	r2, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f005 fca8 	bl	801255c <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f807 	bl	800cc3c <network_phase>
}
 800cc2e:	bf00      	nop
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	08017268 	.word	0x08017268

0800cc3c <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f804 	bl	800cc52 <start_networks>
}
 800cc4a:	bf00      	nop
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800cc5a:	2109      	movs	r1, #9
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f004 fe1d 	bl	801189c <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f804 	bl	800cc70 <continue_networks>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	e017      	b.n	800ccae <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cc86:	d20f      	bcs.n	800cca8 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00b      	beq.n	800cca8 <continue_networks+0x38>
	    (*protp->open)(pcb);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	4798      	blx	r3
	    ++pcb->num_np_open;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800cc9e:	3301      	adds	r3, #1
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	4a0a      	ldr	r2, [pc, #40]	; (800ccd8 <continue_networks+0x68>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb6:	60bb      	str	r3, [r7, #8]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1df      	bne.n	800cc7e <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d103      	bne.n	800ccd0 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800ccc8:	4904      	ldr	r1, [pc, #16]	; (800ccdc <continue_networks+0x6c>)
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f002 faa0 	bl	800f210 <lcp_close>
}
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	08017268 	.word	0x08017268
 800ccdc:	08016d3c 	.word	0x08016d3c

0800cce0 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2207      	movs	r2, #7
 800ccee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800ccf2:	4904      	ldr	r1, [pc, #16]	; (800cd04 <auth_withpeer_fail+0x24>)
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f002 fa8b 	bl	800f210 <lcp_close>
}
 800ccfa:	bf00      	nop
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	08016d5c 	.word	0x08016d5c

0800cd08 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800cd14:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <auth_withpeer_success+0x6c>)
 800cd16:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d104      	bne.n	800cd2c <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800cd22:	2301      	movs	r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800cd26:	4b14      	ldr	r3, [pc, #80]	; (800cd78 <auth_withpeer_success+0x70>)
 800cd28:	613b      	str	r3, [r7, #16]
	break;
 800cd2a:	e001      	b.n	800cd30 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd34:	b21a      	sxth	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	b21b      	sxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cd48:	b21a      	sxth	r2, r3
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	b21b      	sxth	r3, r3
 800cd4e:	43db      	mvns	r3, r3
 800cd50:	b21b      	sxth	r3, r3
 800cd52:	4013      	ands	r3, r2
 800cd54:	b21b      	sxth	r3, r3
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	861a      	strh	r2, [r3, #48]	; 0x30
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <auth_withpeer_success+0x62>
	network_phase(pcb);
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7ff ff69 	bl	800cc3c <network_phase>
}
 800cd6a:	bf00      	nop
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	08016d88 	.word	0x08016d88
 800cd78:	08016d8c 	.word	0x08016d8c

0800cd7c <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800cd90:	210a      	movs	r1, #10
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f004 fd82 	bl	801189c <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d103      	bne.n	800cddc <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800cdd4:	2109      	movs	r1, #9
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f004 fd60 	bl	801189c <new_phase>
    }
}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800ce08:	4903      	ldr	r1, [pc, #12]	; (800ce18 <np_finished+0x34>)
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f002 fa00 	bl	800f210 <lcp_close>
    }
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	08016d3c 	.word	0x08016d3c

0800ce1c <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	7c5a      	ldrb	r2, [r3, #17]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	761a      	strb	r2, [r3, #24]
}
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7c1b      	ldrb	r3, [r3, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <fsm_lowerup+0x16>
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d004      	beq.n	800ce74 <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800ce6a:	e015      	b.n	800ce98 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	741a      	strb	r2, [r3, #16]
	break;
 800ce72:	e011      	b.n	800ce98 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7c5b      	ldrb	r3, [r3, #17]
 800ce78:	f003 0304 	and.w	r3, r3, #4
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d003      	beq.n	800ce88 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2203      	movs	r2, #3
 800ce84:	741a      	strb	r2, [r3, #16]
	break;
 800ce86:	e006      	b.n	800ce96 <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fdb2 	bl	800d9f4 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2206      	movs	r2, #6
 800ce94:	741a      	strb	r2, [r3, #16]
	break;
 800ce96:	bf00      	nop
}
 800ce98:	bf00      	nop
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7c1b      	ldrb	r3, [r3, #16]
 800ceac:	3b02      	subs	r3, #2
 800ceae:	2b07      	cmp	r3, #7
 800ceb0:	d843      	bhi.n	800cf3a <fsm_lowerdown+0x9a>
 800ceb2:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <fsm_lowerdown+0x18>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800ced9 	.word	0x0800ced9
 800cebc:	0800cee1 	.word	0x0800cee1
 800cec0:	0800cefd 	.word	0x0800cefd
 800cec4:	0800cf0d 	.word	0x0800cf0d
 800cec8:	0800cf0d 	.word	0x0800cf0d
 800cecc:	0800cf0d 	.word	0x0800cf0d
 800ced0:	0800cf0d 	.word	0x0800cf0d
 800ced4:	0800cf1d 	.word	0x0800cf1d
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	741a      	strb	r2, [r3, #16]
	break;
 800cede:	e02c      	b.n	800cf3a <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d023      	beq.n	800cf38 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	4798      	blx	r3
	break;
 800cefa:	e01d      	b.n	800cf38 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	480f      	ldr	r0, [pc, #60]	; (800cf44 <fsm_lowerdown+0xa4>)
 800cf06:	f7ff fd2d 	bl	800c964 <sys_untimeout>
	break;
 800cf0a:	e016      	b.n	800cf3a <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	480b      	ldr	r0, [pc, #44]	; (800cf44 <fsm_lowerdown+0xa4>)
 800cf16:	f7ff fd25 	bl	800c964 <sys_untimeout>
	break;
 800cf1a:	e00e      	b.n	800cf3a <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d004      	beq.n	800cf30 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	741a      	strb	r2, [r3, #16]
	break;
 800cf36:	e000      	b.n	800cf3a <fsm_lowerdown+0x9a>
	break;
 800cf38:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0800d171 	.word	0x0800d171

0800cf48 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	7c1b      	ldrb	r3, [r3, #16]
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	d847      	bhi.n	800cfe8 <fsm_open+0xa0>
 800cf58:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <fsm_open+0x18>)
 800cf5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5e:	bf00      	nop
 800cf60:	0800cf89 	.word	0x0800cf89
 800cf64:	0800cfe9 	.word	0x0800cfe9
 800cf68:	0800cfa5 	.word	0x0800cfa5
 800cf6c:	0800cfcf 	.word	0x0800cfcf
 800cf70:	0800cfc9 	.word	0x0800cfc9
 800cf74:	0800cfe9 	.word	0x0800cfe9
 800cf78:	0800cfe9 	.word	0x0800cfe9
 800cf7c:	0800cfe9 	.word	0x0800cfe9
 800cf80:	0800cfe9 	.word	0x0800cfe9
 800cf84:	0800cfcf 	.word	0x0800cfcf
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d029      	beq.n	800cfec <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	4798      	blx	r3
	break;
 800cfa2:	e023      	b.n	800cfec <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7c5b      	ldrb	r3, [r3, #17]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d003      	beq.n	800cfb8 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2203      	movs	r2, #3
 800cfb4:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800cfb6:	e01c      	b.n	800cff2 <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800cfb8:	2100      	movs	r1, #0
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fd1a 	bl	800d9f4 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2206      	movs	r2, #6
 800cfc4:	741a      	strb	r2, [r3, #16]
	break;
 800cfc6:	e014      	b.n	800cff2 <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2205      	movs	r2, #5
 800cfcc:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7c5b      	ldrb	r3, [r3, #17]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff ff60 	bl	800cea0 <fsm_lowerdown>
	    fsm_lowerup(f);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ff38 	bl	800ce56 <fsm_lowerup>
	}
	break;
 800cfe6:	e003      	b.n	800cff0 <fsm_open+0xa8>
    default:
	break;
 800cfe8:	bf00      	nop
 800cfea:	e002      	b.n	800cff2 <fsm_open+0xaa>
	break;
 800cfec:	bf00      	nop
 800cfee:	e000      	b.n	800cff2 <fsm_open+0xaa>
	break;
 800cff0:	bf00      	nop
    }
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop

0800cffc <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af02      	add	r7, sp, #8
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	7c1b      	ldrb	r3, [r3, #16]
 800d010:	2b09      	cmp	r3, #9
 800d012:	d004      	beq.n	800d01e <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	482f      	ldr	r0, [pc, #188]	; (800d0d4 <terminate_layer+0xd8>)
 800d018:	f7ff fca4 	bl	800c964 <sys_untimeout>
 800d01c:	e009      	b.n	800d032 <terminate_layer+0x36>
    else if( f->callbacks->down )
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	6a1b      	ldr	r3, [r3, #32]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	7c1a      	ldrb	r2, [r3, #16]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7c9b      	ldrb	r3, [r3, #18]
 800d03e:	3301      	adds	r3, #1
 800d040:	b2da      	uxtb	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	749a      	strb	r2, [r3, #18]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7c9a      	ldrb	r2, [r3, #18]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	74da      	strb	r2, [r3, #19]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6899      	ldr	r1, [r3, #8]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	460b      	mov	r3, r1
 800d05e:	2105      	movs	r1, #5
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fdb5 	bl	800dbd0 <fsm_sdata>

    if (f->retransmits == 0) {
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7d1b      	ldrb	r3, [r3, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d112      	bne.n	800d094 <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2b04      	cmp	r3, #4
 800d072:	d101      	bne.n	800d078 <terminate_layer+0x7c>
 800d074:	2202      	movs	r2, #2
 800d076:	e000      	b.n	800d07a <terminate_layer+0x7e>
 800d078:	2203      	movs	r2, #3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d084:	2b00      	cmp	r3, #0
 800d086:	d020      	beq.n	800d0ca <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	4798      	blx	r3
	return;
 800d092:	e01a      	b.n	800d0ca <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	480f      	ldr	r0, [pc, #60]	; (800d0d4 <terminate_layer+0xd8>)
 800d098:	f7ff fc64 	bl	800c964 <sys_untimeout>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	7b9b      	ldrb	r3, [r3, #14]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d0a6:	fb03 f302 	mul.w	r3, r3, r2
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	4909      	ldr	r1, [pc, #36]	; (800d0d4 <terminate_layer+0xd8>)
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff fc2c 	bl	800c90c <sys_timeout>
    --f->retransmits;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7d1b      	ldrb	r3, [r3, #20]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	741a      	strb	r2, [r3, #16]
 800d0c8:	e000      	b.n	800d0cc <terminate_layer+0xd0>
	return;
 800d0ca:	bf00      	nop
}
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800d171 	.word	0x0800d171

0800d0d8 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00d      	beq.n	800d10a <fsm_close+0x32>
 800d0ee:	6838      	ldr	r0, [r7, #0]
 800d0f0:	f7f3 f86e 	bl	80001d0 <strlen>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2bfe      	cmp	r3, #254	; 0xfe
 800d0f8:	d805      	bhi.n	800d106 <fsm_close+0x2e>
 800d0fa:	6838      	ldr	r0, [r7, #0]
 800d0fc:	f7f3 f868 	bl	80001d0 <strlen>
 800d100:	4603      	mov	r3, r0
 800d102:	b2db      	uxtb	r3, r3
 800d104:	e002      	b.n	800d10c <fsm_close+0x34>
 800d106:	23ff      	movs	r3, #255	; 0xff
 800d108:	e000      	b.n	800d10c <fsm_close+0x34>
 800d10a:	2300      	movs	r3, #0
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7c1b      	ldrb	r3, [r3, #16]
 800d114:	3b01      	subs	r3, #1
 800d116:	2b08      	cmp	r3, #8
 800d118:	d825      	bhi.n	800d166 <fsm_close+0x8e>
 800d11a:	a201      	add	r2, pc, #4	; (adr r2, 800d120 <fsm_close+0x48>)
 800d11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d120:	0800d145 	.word	0x0800d145
 800d124:	0800d167 	.word	0x0800d167
 800d128:	0800d14d 	.word	0x0800d14d
 800d12c:	0800d167 	.word	0x0800d167
 800d130:	0800d155 	.word	0x0800d155
 800d134:	0800d15d 	.word	0x0800d15d
 800d138:	0800d15d 	.word	0x0800d15d
 800d13c:	0800d15d 	.word	0x0800d15d
 800d140:	0800d15d 	.word	0x0800d15d
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	741a      	strb	r2, [r3, #16]
	break;
 800d14a:	e00d      	b.n	800d168 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	741a      	strb	r2, [r3, #16]
	break;
 800d152:	e009      	b.n	800d168 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2204      	movs	r2, #4
 800d158:	741a      	strb	r2, [r3, #16]
	break;
 800d15a:	e005      	b.n	800d168 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800d15c:	2104      	movs	r1, #4
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff ff4c 	bl	800cffc <terminate_layer>
	break;
 800d164:	e000      	b.n	800d168 <fsm_close+0x90>
    default:
	break;
 800d166:	bf00      	nop
    }
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7c1b      	ldrb	r3, [r3, #16]
 800d186:	3b04      	subs	r3, #4
 800d188:	2b04      	cmp	r3, #4
 800d18a:	f200 8083 	bhi.w	800d294 <fsm_timeout+0x124>
 800d18e:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <fsm_timeout+0x24>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1a9 	.word	0x0800d1a9
 800d198:	0800d1a9 	.word	0x0800d1a9
 800d19c:	0800d233 	.word	0x0800d233
 800d1a0:	0800d233 	.word	0x0800d233
 800d1a4:	0800d233 	.word	0x0800d233
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	7d1b      	ldrb	r3, [r3, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d113      	bne.n	800d1d8 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	7c1b      	ldrb	r3, [r3, #16]
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	d101      	bne.n	800d1bc <fsm_timeout+0x4c>
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	e000      	b.n	800d1be <fsm_timeout+0x4e>
 800d1bc:	2203      	movs	r2, #3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d060      	beq.n	800d28e <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800d1d6:	e05a      	b.n	800d28e <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	7c9b      	ldrb	r3, [r3, #18]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	749a      	strb	r2, [r3, #18]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	7c9a      	ldrb	r2, [r3, #18]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	74da      	strb	r2, [r3, #19]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6899      	ldr	r1, [r3, #8]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	2105      	movs	r1, #5
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f000 fce6 	bl	800dbd0 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800d204:	68f9      	ldr	r1, [r7, #12]
 800d206:	4825      	ldr	r0, [pc, #148]	; (800d29c <fsm_timeout+0x12c>)
 800d208:	f7ff fbac 	bl	800c964 <sys_untimeout>
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	7b9b      	ldrb	r3, [r3, #14]
 800d210:	461a      	mov	r2, r3
 800d212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d216:	fb03 f302 	mul.w	r3, r3, r2
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	491f      	ldr	r1, [pc, #124]	; (800d29c <fsm_timeout+0x12c>)
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff fb74 	bl	800c90c <sys_timeout>
	    --f->retransmits;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7d1b      	ldrb	r3, [r3, #20]
 800d228:	3b01      	subs	r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	751a      	strb	r2, [r3, #20]
	break;
 800d230:	e02d      	b.n	800d28e <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	7d1b      	ldrb	r3, [r3, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d113      	bne.n	800d262 <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2203      	movs	r2, #3
 800d23e:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	7c5b      	ldrb	r3, [r3, #17]
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d122      	bne.n	800d292 <fsm_timeout+0x122>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01d      	beq.n	800d292 <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800d260:	e017      	b.n	800d292 <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d004      	beq.n	800d276 <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800d276:	2101      	movs	r1, #1
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 fbbb 	bl	800d9f4 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	7c1b      	ldrb	r3, [r3, #16]
 800d282:	2b07      	cmp	r3, #7
 800d284:	d105      	bne.n	800d292 <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2206      	movs	r2, #6
 800d28a:	741a      	strb	r2, [r3, #16]
	break;
 800d28c:	e001      	b.n	800d292 <fsm_timeout+0x122>
	break;
 800d28e:	bf00      	nop
 800d290:	e000      	b.n	800d294 <fsm_timeout+0x124>
	break;
 800d292:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800d294:	bf00      	nop
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	0800d171 	.word	0x0800d171

0800d2a0 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b08b      	sub	sp, #44	; 0x2c
 800d2a4:	af02      	add	r7, sp, #8
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	f340 808c 	ble.w	800d3d0 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	61fa      	str	r2, [r7, #28]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	61fa      	str	r2, [r7, #28]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	61fa      	str	r2, [r7, #28]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	617b      	str	r3, [r7, #20]
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	61fa      	str	r2, [r7, #28]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	dd72      	ble.n	800d3d4 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	dc70      	bgt.n	800d3d8 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	3b04      	subs	r3, #4
 800d2fa:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	7c1b      	ldrb	r3, [r3, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d06b      	beq.n	800d3dc <fsm_input+0x13c>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	7c1b      	ldrb	r3, [r3, #16]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d067      	beq.n	800d3dc <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800d30c:	7efb      	ldrb	r3, [r7, #27]
 800d30e:	3b01      	subs	r3, #1
 800d310:	2b06      	cmp	r3, #6
 800d312:	d839      	bhi.n	800d388 <fsm_input+0xe8>
 800d314:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <fsm_input+0x7c>)
 800d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31a:	bf00      	nop
 800d31c:	0800d339 	.word	0x0800d339
 800d320:	0800d347 	.word	0x0800d347
 800d324:	0800d355 	.word	0x0800d355
 800d328:	0800d355 	.word	0x0800d355
 800d32c:	0800d367 	.word	0x0800d367
 800d330:	0800d375 	.word	0x0800d375
 800d334:	0800d37d 	.word	0x0800d37d
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800d338:	7eb9      	ldrb	r1, [r7, #26]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	69fa      	ldr	r2, [r7, #28]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f000 f852 	bl	800d3e8 <fsm_rconfreq>
	break;
 800d344:	e04d      	b.n	800d3e2 <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800d346:	7eb9      	ldrb	r1, [r7, #26]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	69fa      	ldr	r2, [r7, #28]
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f000 f8f1 	bl	800d534 <fsm_rconfack>
	break;
 800d352:	e046      	b.n	800d3e2 <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800d354:	7ef9      	ldrb	r1, [r7, #27]
 800d356:	7eba      	ldrb	r2, [r7, #26]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f988 	bl	800d674 <fsm_rconfnakrej>
	break;
 800d364:	e03d      	b.n	800d3e2 <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800d366:	7eb9      	ldrb	r1, [r7, #26]
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	69fa      	ldr	r2, [r7, #28]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 fa2b 	bl	800d7c8 <fsm_rtermreq>
	break;
 800d372:	e036      	b.n	800d3e2 <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 fa6f 	bl	800d858 <fsm_rtermack>
	break;
 800d37a:	e032      	b.n	800d3e2 <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	69f9      	ldr	r1, [r7, #28]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f000 fac7 	bl	800d914 <fsm_rcoderej>
	break;
 800d386:	e02c      	b.n	800d3e2 <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d398:	7ef9      	ldrb	r1, [r7, #27]
 800d39a:	7eba      	ldrb	r2, [r7, #26]
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	47a0      	blx	r4
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d119      	bne.n	800d3e0 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	7c9b      	ldrb	r3, [r3, #18]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	749a      	strb	r2, [r3, #18]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	7c9a      	ldrb	r2, [r3, #18]
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2107      	movs	r1, #7
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 fc02 	bl	800dbd0 <fsm_sdata>
	break;
 800d3cc:	bf00      	nop
 800d3ce:	e007      	b.n	800d3e0 <fsm_input+0x140>
	return;
 800d3d0:	bf00      	nop
 800d3d2:	e006      	b.n	800d3e2 <fsm_input+0x142>
	return;
 800d3d4:	bf00      	nop
 800d3d6:	e004      	b.n	800d3e2 <fsm_input+0x142>
	return;
 800d3d8:	bf00      	nop
 800d3da:	e002      	b.n	800d3e2 <fsm_input+0x142>
	return;
 800d3dc:	bf00      	nop
 800d3de:	e000      	b.n	800d3e2 <fsm_input+0x142>
	break;
 800d3e0:	bf00      	nop
    }
}
 800d3e2:	3724      	adds	r7, #36	; 0x24
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd90      	pop	{r4, r7, pc}

0800d3e8 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800d3e8:	b590      	push	{r4, r7, lr}
 800d3ea:	b089      	sub	sp, #36	; 0x24
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	607a      	str	r2, [r7, #4]
 800d3f2:	603b      	str	r3, [r7, #0]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	7c1b      	ldrb	r3, [r3, #16]
 800d3fc:	3b02      	subs	r3, #2
 800d3fe:	2b07      	cmp	r3, #7
 800d400:	d835      	bhi.n	800d46e <fsm_rconfreq+0x86>
 800d402:	a201      	add	r2, pc, #4	; (adr r2, 800d408 <fsm_rconfreq+0x20>)
 800d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d408:	0800d429 	.word	0x0800d429
 800d40c:	0800d45f 	.word	0x0800d45f
 800d410:	0800d527 	.word	0x0800d527
 800d414:	0800d527 	.word	0x0800d527
 800d418:	0800d46f 	.word	0x0800d46f
 800d41c:	0800d46f 	.word	0x0800d46f
 800d420:	0800d46f 	.word	0x0800d46f
 800d424:	0800d43b 	.word	0x0800d43b
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800d428:	7afa      	ldrb	r2, [r7, #11]
 800d42a:	2300      	movs	r3, #0
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	2300      	movs	r3, #0
 800d430:	2106      	movs	r1, #6
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 fbcc 	bl	800dbd0 <fsm_sdata>
	return;
 800d438:	e076      	b.n	800d528 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	6a1b      	ldr	r3, [r3, #32]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800d44e:	2100      	movs	r1, #0
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 facf 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2206      	movs	r2, #6
 800d45a:	741a      	strb	r2, [r3, #16]
	break;
 800d45c:	e008      	b.n	800d470 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800d45e:	2100      	movs	r1, #0
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f000 fac7 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2206      	movs	r2, #6
 800d46a:	741a      	strb	r2, [r3, #16]
	break;
 800d46c:	e000      	b.n	800d470 <fsm_rconfreq+0x88>
    default:
	break;
 800d46e:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d013      	beq.n	800d4a2 <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	7d5a      	ldrb	r2, [r3, #21]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	7ddb      	ldrb	r3, [r3, #23]
 800d482:	429a      	cmp	r2, r3
 800d484:	bf2c      	ite	cs
 800d486:	2301      	movcs	r3, #1
 800d488:	2300      	movcc	r3, #0
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	699c      	ldr	r4, [r3, #24]
 800d494:	463a      	mov	r2, r7
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	6879      	ldr	r1, [r7, #4]
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	47a0      	blx	r4
 800d49e:	6178      	str	r0, [r7, #20]
 800d4a0:	e007      	b.n	800d4b2 <fsm_rconfreq+0xca>
    } else if (len)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	617b      	str	r3, [r7, #20]
 800d4ac:	e001      	b.n	800d4b2 <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	b2d9      	uxtb	r1, r3
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	7afa      	ldrb	r2, [r7, #11]
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 fb86 	bl	800dbd0 <fsm_sdata>

    if (code == CONFACK) {
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	d11c      	bne.n	800d504 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	7c1b      	ldrb	r3, [r3, #16]
 800d4ce:	2b07      	cmp	r3, #7
 800d4d0:	d111      	bne.n	800d4f6 <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d4d2:	68f9      	ldr	r1, [r7, #12]
 800d4d4:	4816      	ldr	r0, [pc, #88]	; (800d530 <fsm_rconfreq+0x148>)
 800d4d6:	f7ff fa45 	bl	800c964 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2209      	movs	r2, #9
 800d4de:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	69db      	ldr	r3, [r3, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d008      	beq.n	800d4fc <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	69db      	ldr	r3, [r3, #28]
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	4798      	blx	r3
 800d4f4:	e002      	b.n	800d4fc <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2208      	movs	r2, #8
 800d4fa:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	755a      	strb	r2, [r3, #21]
 800d502:	e011      	b.n	800d528 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	7c1b      	ldrb	r3, [r3, #16]
 800d508:	2b07      	cmp	r3, #7
 800d50a:	d002      	beq.n	800d512 <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2206      	movs	r2, #6
 800d510:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b03      	cmp	r3, #3
 800d516:	d107      	bne.n	800d528 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	7d5b      	ldrb	r3, [r3, #21]
 800d51c:	3301      	adds	r3, #1
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	755a      	strb	r2, [r3, #21]
 800d524:	e000      	b.n	800d528 <fsm_rconfreq+0x140>
	return;
 800d526:	bf00      	nop
    }
}
 800d528:	371c      	adds	r7, #28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd90      	pop	{r4, r7, pc}
 800d52e:	bf00      	nop
 800d530:	0800d171 	.word	0x0800d171

0800d534 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af02      	add	r7, sp, #8
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	7cdb      	ldrb	r3, [r3, #19]
 800d54c:	461a      	mov	r2, r3
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	429a      	cmp	r2, r3
 800d552:	f040 8083 	bne.w	800d65c <fsm_rconfack+0x128>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	7b1b      	ldrb	r3, [r3, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d17e      	bne.n	800d65c <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00d      	beq.n	800d584 <fsm_rconfack+0x50>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	6879      	ldr	r1, [r7, #4]
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	4798      	blx	r3
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bf0c      	ite	eq
 800d57c:	2301      	moveq	r3, #1
 800d57e:	2300      	movne	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	e005      	b.n	800d590 <fsm_rconfack+0x5c>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	bf14      	ite	ne
 800d58a:	2301      	movne	r3, #1
 800d58c:	2300      	moveq	r3, #0
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	d165      	bne.n	800d660 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2201      	movs	r2, #1
 800d598:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	7c1b      	ldrb	r3, [r3, #16]
 800d5a4:	3b02      	subs	r3, #2
 800d5a6:	2b07      	cmp	r3, #7
 800d5a8:	d85c      	bhi.n	800d664 <fsm_rconfack+0x130>
 800d5aa:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <fsm_rconfack+0x7c>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d5d1 	.word	0x0800d5d1
 800d5b4:	0800d5d1 	.word	0x0800d5d1
 800d5b8:	0800d665 	.word	0x0800d665
 800d5bc:	0800d665 	.word	0x0800d665
 800d5c0:	0800d5e5 	.word	0x0800d5e5
 800d5c4:	0800d5f5 	.word	0x0800d5f5
 800d5c8:	0800d60d 	.word	0x0800d60d
 800d5cc:	0800d639 	.word	0x0800d639
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2106      	movs	r1, #6
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 faf7 	bl	800dbd0 <fsm_sdata>
	break;
 800d5e2:	e042      	b.n	800d66a <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2207      	movs	r2, #7
 800d5e8:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	7bda      	ldrb	r2, [r3, #15]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	751a      	strb	r2, [r3, #20]
	break;
 800d5f2:	e03a      	b.n	800d66a <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d5f4:	68f9      	ldr	r1, [r7, #12]
 800d5f6:	481e      	ldr	r0, [pc, #120]	; (800d670 <fsm_rconfack+0x13c>)
 800d5f8:	f7ff f9b4 	bl	800c964 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 f9f8 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2206      	movs	r2, #6
 800d608:	741a      	strb	r2, [r3, #16]
	break;
 800d60a:	e02e      	b.n	800d66a <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d60c:	68f9      	ldr	r1, [r7, #12]
 800d60e:	4818      	ldr	r0, [pc, #96]	; (800d670 <fsm_rconfack+0x13c>)
 800d610:	f7ff f9a8 	bl	800c964 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2209      	movs	r2, #9
 800d618:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	7bda      	ldrb	r2, [r3, #15]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	69db      	ldr	r3, [r3, #28]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d01d      	beq.n	800d668 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	4798      	blx	r3
	break;
 800d636:	e017      	b.n	800d668 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800d64c:	2100      	movs	r1, #0
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 f9d0 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2206      	movs	r2, #6
 800d658:	741a      	strb	r2, [r3, #16]
	break;
 800d65a:	e006      	b.n	800d66a <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800d65c:	bf00      	nop
 800d65e:	e004      	b.n	800d66a <fsm_rconfack+0x136>
	return;
 800d660:	bf00      	nop
 800d662:	e002      	b.n	800d66a <fsm_rconfack+0x136>
    default:
	break;
 800d664:	bf00      	nop
 800d666:	e000      	b.n	800d66a <fsm_rconfack+0x136>
	break;
 800d668:	bf00      	nop
    }
}
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	0800d171 	.word	0x0800d171

0800d674 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b089      	sub	sp, #36	; 0x24
 800d678:	af02      	add	r7, sp, #8
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	7cdb      	ldrb	r3, [r3, #19]
 800d686:	461a      	mov	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	f040 8090 	bne.w	800d7b0 <fsm_rconfnakrej+0x13c>
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	7b1b      	ldrb	r3, [r3, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	f040 808b 	bne.w	800d7b0 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b03      	cmp	r3, #3
 800d69e:	d121      	bne.n	800d6e4 <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	7d9b      	ldrb	r3, [r3, #22]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7d9a      	ldrb	r2, [r3, #22]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	7ddb      	ldrb	r3, [r3, #23]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	bf2c      	ite	cs
 800d6b8:	2301      	movcs	r3, #1
 800d6ba:	2300      	movcc	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d074      	beq.n	800d7b4 <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	691c      	ldr	r4, [r3, #16]
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d4:	6839      	ldr	r1, [r7, #0]
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	47a0      	blx	r4
 800d6da:	6178      	str	r0, [r7, #20]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d113      	bne.n	800d70a <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800d6e2:	e067      	b.n	800d7b4 <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d061      	beq.n	800d7b8 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	4798      	blx	r3
 800d702:	6178      	str	r0, [r7, #20]
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d056      	beq.n	800d7b8 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2201      	movs	r2, #1
 800d70e:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	7c1b      	ldrb	r3, [r3, #16]
 800d714:	3b02      	subs	r3, #2
 800d716:	2b07      	cmp	r3, #7
 800d718:	d850      	bhi.n	800d7bc <fsm_rconfnakrej+0x148>
 800d71a:	a201      	add	r2, pc, #4	; (adr r2, 800d720 <fsm_rconfnakrej+0xac>)
 800d71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d720:	0800d741 	.word	0x0800d741
 800d724:	0800d741 	.word	0x0800d741
 800d728:	0800d7bd 	.word	0x0800d7bd
 800d72c:	0800d7bd 	.word	0x0800d7bd
 800d730:	0800d755 	.word	0x0800d755
 800d734:	0800d775 	.word	0x0800d775
 800d738:	0800d755 	.word	0x0800d755
 800d73c:	0800d78d 	.word	0x0800d78d
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	b2da      	uxtb	r2, r3
 800d744:	2300      	movs	r3, #0
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	2300      	movs	r3, #0
 800d74a:	2106      	movs	r1, #6
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f000 fa3f 	bl	800dbd0 <fsm_sdata>
	break;
 800d752:	e034      	b.n	800d7be <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d754:	68f9      	ldr	r1, [r7, #12]
 800d756:	481b      	ldr	r0, [pc, #108]	; (800d7c4 <fsm_rconfnakrej+0x150>)
 800d758:	f7ff f904 	bl	800c964 <sys_untimeout>
	if (ret < 0)
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	da03      	bge.n	800d76a <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2203      	movs	r2, #3
 800d766:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800d768:	e029      	b.n	800d7be <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800d76a:	2100      	movs	r1, #0
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f000 f941 	bl	800d9f4 <fsm_sconfreq>
	break;
 800d772:	e024      	b.n	800d7be <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d774:	68f9      	ldr	r1, [r7, #12]
 800d776:	4813      	ldr	r0, [pc, #76]	; (800d7c4 <fsm_rconfnakrej+0x150>)
 800d778:	f7ff f8f4 	bl	800c964 <sys_untimeout>
	fsm_sconfreq(f, 0);
 800d77c:	2100      	movs	r1, #0
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f000 f938 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2206      	movs	r2, #6
 800d788:	741a      	strb	r2, [r3, #16]
	break;
 800d78a:	e018      	b.n	800d7be <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d004      	beq.n	800d7a0 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	6a1b      	ldr	r3, [r3, #32]
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f000 f926 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2206      	movs	r2, #6
 800d7ac:	741a      	strb	r2, [r3, #16]
	break;
 800d7ae:	e006      	b.n	800d7be <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800d7b0:	bf00      	nop
 800d7b2:	e004      	b.n	800d7be <fsm_rconfnakrej+0x14a>
	    return;
 800d7b4:	bf00      	nop
 800d7b6:	e002      	b.n	800d7be <fsm_rconfnakrej+0x14a>
	    return;
 800d7b8:	bf00      	nop
 800d7ba:	e000      	b.n	800d7be <fsm_rconfnakrej+0x14a>
    default:
	break;
 800d7bc:	bf00      	nop
    }
}
 800d7be:	371c      	adds	r7, #28
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd90      	pop	{r4, r7, pc}
 800d7c4:	0800d171 	.word	0x0800d171

0800d7c8 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b088      	sub	sp, #32
 800d7cc:	af02      	add	r7, sp, #8
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
 800d7d4:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	7c1b      	ldrb	r3, [r3, #16]
 800d7e0:	2b07      	cmp	r3, #7
 800d7e2:	db29      	blt.n	800d838 <fsm_rtermreq+0x70>
 800d7e4:	2b08      	cmp	r3, #8
 800d7e6:	dd02      	ble.n	800d7ee <fsm_rtermreq+0x26>
 800d7e8:	2b09      	cmp	r3, #9
 800d7ea:	d004      	beq.n	800d7f6 <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800d7ec:	e024      	b.n	800d838 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2206      	movs	r2, #6
 800d7f2:	741a      	strb	r2, [r3, #16]
	break;
 800d7f4:	e021      	b.n	800d83a <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2205      	movs	r2, #5
 800d800:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800d816:	68f9      	ldr	r1, [r7, #12]
 800d818:	480e      	ldr	r0, [pc, #56]	; (800d854 <fsm_rtermreq+0x8c>)
 800d81a:	f7ff f8a3 	bl	800c964 <sys_untimeout>
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	7b9b      	ldrb	r3, [r3, #14]
 800d822:	461a      	mov	r2, r3
 800d824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d828:	fb03 f302 	mul.w	r3, r3, r2
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4909      	ldr	r1, [pc, #36]	; (800d854 <fsm_rtermreq+0x8c>)
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff f86b 	bl	800c90c <sys_timeout>
	break;
 800d836:	e000      	b.n	800d83a <fsm_rtermreq+0x72>
	break;
 800d838:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	2300      	movs	r3, #0
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	2106      	movs	r1, #6
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f000 f9c2 	bl	800dbd0 <fsm_sdata>
}
 800d84c:	bf00      	nop
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	0800d171 	.word	0x0800d171

0800d858 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7c1b      	ldrb	r3, [r3, #16]
 800d864:	3b04      	subs	r3, #4
 800d866:	2b05      	cmp	r3, #5
 800d868:	d848      	bhi.n	800d8fc <fsm_rtermack+0xa4>
 800d86a:	a201      	add	r2, pc, #4	; (adr r2, 800d870 <fsm_rtermack+0x18>)
 800d86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d870:	0800d889 	.word	0x0800d889
 800d874:	0800d8ad 	.word	0x0800d8ad
 800d878:	0800d8fd 	.word	0x0800d8fd
 800d87c:	0800d8d1 	.word	0x0800d8d1
 800d880:	0800d8fd 	.word	0x0800d8fd
 800d884:	0800d8d9 	.word	0x0800d8d9
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4821      	ldr	r0, [pc, #132]	; (800d910 <fsm_rtermack+0xb8>)
 800d88c:	f7ff f86a 	bl	800c964 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d02f      	beq.n	800d900 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	4798      	blx	r3
	break;
 800d8aa:	e029      	b.n	800d900 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	4818      	ldr	r0, [pc, #96]	; (800d910 <fsm_rtermack+0xb8>)
 800d8b0:	f7ff f858 	bl	800c964 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d01f      	beq.n	800d904 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	4798      	blx	r3
	break;
 800d8ce:	e019      	b.n	800d904 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2206      	movs	r2, #6
 800d8d4:	741a      	strb	r2, [r3, #16]
	break;
 800d8d6:	e016      	b.n	800d906 <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f880 	bl	800d9f4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	741a      	strb	r2, [r3, #16]
	break;
 800d8fa:	e004      	b.n	800d906 <fsm_rtermack+0xae>
    default:
	break;
 800d8fc:	bf00      	nop
 800d8fe:	e002      	b.n	800d906 <fsm_rtermack+0xae>
	break;
 800d900:	bf00      	nop
 800d902:	e000      	b.n	800d906 <fsm_rtermack+0xae>
	break;
 800d904:	bf00      	nop
    }
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	0800d171 	.word	0x0800d171

0800d914 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800d914:	b480      	push	{r7}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b03      	cmp	r3, #3
 800d924:	dd11      	ble.n	800d94a <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	1c5a      	adds	r2, r3, #1
 800d92a:	60ba      	str	r2, [r7, #8]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	60ba      	str	r2, [r7, #8]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	7c1b      	ldrb	r3, [r3, #16]
 800d93e:	2b07      	cmp	r3, #7
 800d940:	d104      	bne.n	800d94c <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2206      	movs	r2, #6
 800d946:	741a      	strb	r2, [r3, #16]
 800d948:	e000      	b.n	800d94c <fsm_rcoderej+0x38>
	return;
 800d94a:	bf00      	nop
}
 800d94c:	371c      	adds	r7, #28
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7c1b      	ldrb	r3, [r3, #16]
 800d964:	3b02      	subs	r3, #2
 800d966:	2b07      	cmp	r3, #7
 800d968:	d83e      	bhi.n	800d9e8 <fsm_protreject+0x90>
 800d96a:	a201      	add	r2, pc, #4	; (adr r2, 800d970 <fsm_protreject+0x18>)
 800d96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d970:	0800d999 	.word	0x0800d999
 800d974:	0800d9bd 	.word	0x0800d9bd
 800d978:	0800d991 	.word	0x0800d991
 800d97c:	0800d9b5 	.word	0x0800d9b5
 800d980:	0800d9b5 	.word	0x0800d9b5
 800d984:	0800d9b5 	.word	0x0800d9b5
 800d988:	0800d9b5 	.word	0x0800d9b5
 800d98c:	0800d9d9 	.word	0x0800d9d9
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	4817      	ldr	r0, [pc, #92]	; (800d9f0 <fsm_protreject+0x98>)
 800d994:	f7fe ffe6 	bl	800c964 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2202      	movs	r2, #2
 800d99c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01c      	beq.n	800d9e2 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	4798      	blx	r3
	break;
 800d9b2:	e016      	b.n	800d9e2 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	480e      	ldr	r0, [pc, #56]	; (800d9f0 <fsm_protreject+0x98>)
 800d9b8:	f7fe ffd4 	bl	800c964 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2203      	movs	r2, #3
 800d9c0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00c      	beq.n	800d9e6 <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	4798      	blx	r3
	break;
 800d9d6:	e006      	b.n	800d9e6 <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800d9d8:	2105      	movs	r1, #5
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7ff fb0e 	bl	800cffc <terminate_layer>
	break;
 800d9e0:	e002      	b.n	800d9e8 <fsm_protreject+0x90>
	break;
 800d9e2:	bf00      	nop
 800d9e4:	e000      	b.n	800d9e8 <fsm_protreject+0x90>
	break;
 800d9e6:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	0800d171 	.word	0x0800d171

0800d9f4 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	7c1b      	ldrb	r3, [r3, #16]
 800da08:	2b06      	cmp	r3, #6
 800da0a:	d017      	beq.n	800da3c <fsm_sconfreq+0x48>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7c1b      	ldrb	r3, [r3, #16]
 800da10:	2b07      	cmp	r3, #7
 800da12:	d013      	beq.n	800da3c <fsm_sconfreq+0x48>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7c1b      	ldrb	r3, [r3, #16]
 800da18:	2b08      	cmp	r3, #8
 800da1a:	d00f      	beq.n	800da3c <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d004      	beq.n	800da30 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	4798      	blx	r3
	f->nakloops = 0;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10d      	bne.n	800da5e <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	7bda      	ldrb	r2, [r3, #15]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7c9b      	ldrb	r3, [r3, #18]
 800da4e:	3301      	adds	r3, #1
 800da50:	b2da      	uxtb	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	749a      	strb	r2, [r3, #18]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	7c9a      	ldrb	r2, [r3, #18]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d018      	beq.n	800daa0 <fsm_sconfreq+0xac>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d013      	beq.n	800daa0 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
 800da82:	4603      	mov	r3, r0
 800da84:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800da8c:	1f1a      	subs	r2, r3, #4
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	429a      	cmp	r2, r3
 800da92:	da07      	bge.n	800daa4 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800da9a:	3b04      	subs	r3, #4
 800da9c:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800da9e:	e001      	b.n	800daa4 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	3308      	adds	r3, #8
 800daaa:	b29b      	uxth	r3, r3
 800daac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dab0:	4619      	mov	r1, r3
 800dab2:	2000      	movs	r0, #0
 800dab4:	f7f7 fb10 	bl	80050d8 <pbuf_alloc>
 800dab8:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d07a      	beq.n	800dbb6 <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	891a      	ldrh	r2, [r3, #8]
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	895b      	ldrh	r3, [r3, #10]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d003      	beq.n	800dad4 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800dacc:	6938      	ldr	r0, [r7, #16]
 800dace:	f7f7 fd6d 	bl	80055ac <pbuf_free>
        return;
 800dad2:	e071      	b.n	800dbb8 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	60fa      	str	r2, [r7, #12]
 800dae0:	22ff      	movs	r2, #255	; 0xff
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	60fa      	str	r2, [r7, #12]
 800daea:	2203      	movs	r2, #3
 800daec:	701a      	strb	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	1c5a      	adds	r2, r3, #1
 800daf2:	60fa      	str	r2, [r7, #12]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	89d2      	ldrh	r2, [r2, #14]
 800daf8:	0a12      	lsrs	r2, r2, #8
 800dafa:	b292      	uxth	r2, r2
 800dafc:	b2d2      	uxtb	r2, r2
 800dafe:	701a      	strb	r2, [r3, #0]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	60fa      	str	r2, [r7, #12]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	89d2      	ldrh	r2, [r2, #14]
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	1c5a      	adds	r2, r3, #1
 800db12:	60fa      	str	r2, [r7, #12]
 800db14:	2201      	movs	r2, #1
 800db16:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	60fa      	str	r2, [r7, #12]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	7cd2      	ldrb	r2, [r2, #19]
 800db22:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	60fa      	str	r2, [r7, #12]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	3204      	adds	r2, #4
 800db2e:	1212      	asrs	r2, r2, #8
 800db30:	b2d2      	uxtb	r2, r2
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	60fa      	str	r2, [r7, #12]
 800db3a:	68ba      	ldr	r2, [r7, #8]
 800db3c:	b2d2      	uxtb	r2, r2
 800db3e:	3204      	adds	r2, #4
 800db40:	b2d2      	uxtb	r2, r2
 800db42:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d01a      	beq.n	800db80 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	f107 0208 	add.w	r2, r7, #8
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	895b      	ldrh	r3, [r3, #10]
 800db5e:	f1a3 0208 	sub.w	r2, r3, #8
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	429a      	cmp	r2, r3
 800db66:	d00b      	beq.n	800db80 <fsm_sconfreq+0x18c>
 800db68:	4b15      	ldr	r3, [pc, #84]	; (800dbc0 <fsm_sconfreq+0x1cc>)
 800db6a:	f240 22f2 	movw	r2, #754	; 0x2f2
 800db6e:	4915      	ldr	r1, [pc, #84]	; (800dbc4 <fsm_sconfreq+0x1d0>)
 800db70:	4815      	ldr	r0, [pc, #84]	; (800dbc8 <fsm_sconfreq+0x1d4>)
 800db72:	f005 fa39 	bl	8012fe8 <iprintf>
 800db76:	2000      	movs	r0, #0
 800db78:	f005 fb38 	bl	80131ec <fflush>
 800db7c:	f005 fa7d 	bl	801307a <abort>
    }

    ppp_write(pcb, p);
 800db80:	6939      	ldr	r1, [r7, #16]
 800db82:	6978      	ldr	r0, [r7, #20]
 800db84:	f003 fe68 	bl	8011858 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7d1b      	ldrb	r3, [r3, #20]
 800db8c:	3b01      	subs	r3, #1
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	480d      	ldr	r0, [pc, #52]	; (800dbcc <fsm_sconfreq+0x1d8>)
 800db98:	f7fe fee4 	bl	800c964 <sys_untimeout>
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	7b9b      	ldrb	r3, [r3, #14]
 800dba0:	461a      	mov	r2, r3
 800dba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dba6:	fb03 f302 	mul.w	r3, r3, r2
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	4907      	ldr	r1, [pc, #28]	; (800dbcc <fsm_sconfreq+0x1d8>)
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe feac 	bl	800c90c <sys_timeout>
 800dbb4:	e000      	b.n	800dbb8 <fsm_sconfreq+0x1c4>
        return;
 800dbb6:	bf00      	nop
}
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08016d90 	.word	0x08016d90
 800dbc4:	08016db4 	.word	0x08016db4
 800dbc8:	08016de0 	.word	0x08016de0
 800dbcc:	0800d171 	.word	0x0800d171

0800dbd0 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	72fb      	strb	r3, [r7, #11]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800dbee:	1f1a      	subs	r2, r3, #4
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	da04      	bge.n	800dc00 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800dbfc:	3b04      	subs	r3, #4
 800dbfe:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	3304      	adds	r3, #4
 800dc04:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc12:	4619      	mov	r1, r3
 800dc14:	2000      	movs	r0, #0
 800dc16:	f7f7 fa5f 	bl	80050d8 <pbuf_alloc>
 800dc1a:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d04f      	beq.n	800dcc2 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	891a      	ldrh	r2, [r3, #8]
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	895b      	ldrh	r3, [r3, #10]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d003      	beq.n	800dc36 <fsm_sdata+0x66>
        pbuf_free(p);
 800dc2e:	6978      	ldr	r0, [r7, #20]
 800dc30:	f7f7 fcbc 	bl	80055ac <pbuf_free>
        return;
 800dc34:	e046      	b.n	800dcc4 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d009      	beq.n	800dc56 <fsm_sdata+0x86>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d006      	beq.n	800dc56 <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	3308      	adds	r3, #8
 800dc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4e:	6879      	ldr	r1, [r7, #4]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f005 fbcb 	bl	80133ec <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	1c5a      	adds	r2, r3, #1
 800dc5a:	613a      	str	r2, [r7, #16]
 800dc5c:	22ff      	movs	r2, #255	; 0xff
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	613a      	str	r2, [r7, #16]
 800dc66:	2203      	movs	r2, #3
 800dc68:	701a      	strb	r2, [r3, #0]
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	613a      	str	r2, [r7, #16]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	89d2      	ldrh	r2, [r2, #14]
 800dc74:	0a12      	lsrs	r2, r2, #8
 800dc76:	b292      	uxth	r2, r2
 800dc78:	b2d2      	uxtb	r2, r2
 800dc7a:	701a      	strb	r2, [r3, #0]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	613a      	str	r2, [r7, #16]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	89d2      	ldrh	r2, [r2, #14]
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	613a      	str	r2, [r7, #16]
 800dc90:	7afa      	ldrb	r2, [r7, #11]
 800dc92:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	613a      	str	r2, [r7, #16]
 800dc9a:	7aba      	ldrb	r2, [r7, #10]
 800dc9c:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	613a      	str	r2, [r7, #16]
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	1212      	asrs	r2, r2, #8
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	613a      	str	r2, [r7, #16]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	b2d2      	uxtb	r2, r2
 800dcb6:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800dcb8:	6979      	ldr	r1, [r7, #20]
 800dcba:	69f8      	ldr	r0, [r7, #28]
 800dcbc:	f003 fdcc 	bl	8011858 <ppp_write>
 800dcc0:	e000      	b.n	800dcc4 <fsm_sdata+0xf4>
        return;
 800dcc2:	bf00      	nop
}
 800dcc4:	3720      	adds	r7, #32
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	33f8      	adds	r3, #248	; 0xf8
 800dcd8:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800dce0:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dce8:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f248 0221 	movw	r2, #32801	; 0x8021
 800dcf6:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <ipcp_init+0x84>)
 800dcfc:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800dcfe:	6978      	ldr	r0, [r7, #20]
 800dd00:	f7ff f88c 	bl	800ce1c <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2264      	movs	r2, #100	; 0x64
 800dd08:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	7813      	ldrb	r3, [r2, #0]
 800dd0e:	f043 0302 	orr.w	r3, r3, #2
 800dd12:	7013      	strb	r3, [r2, #0]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dd1c:	b2d9      	uxtb	r1, r3
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	7813      	ldrb	r3, [r2, #0]
 800dd22:	f361 0300 	bfi	r3, r1, #0, #1
 800dd26:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	7813      	ldrb	r3, [r2, #0]
 800dd2c:	f043 0302 	orr.w	r3, r3, #2
 800dd30:	7013      	strb	r3, [r2, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dd3a:	b2d9      	uxtb	r1, r3
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	7813      	ldrb	r3, [r2, #0]
 800dd40:	f361 0300 	bfi	r3, r1, #0, #1
 800dd44:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800dd46:	bf00      	nop
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	0801719c 	.word	0x0801719c

0800dd54 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	33f8      	adds	r3, #248	; 0xf8
 800dd60:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff f8f0 	bl	800cf48 <fsm_open>
    pcb->ipcp_is_open = 1;
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800dd6e:	f043 0302 	orr.w	r3, r3, #2
 800dd72:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800dd76:	bf00      	nop
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b084      	sub	sp, #16
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	33f8      	adds	r3, #248	; 0xf8
 800dd8c:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f7ff f9a1 	bl	800d0d8 <fsm_close>
}
 800dd96:	bf00      	nop
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	33f8      	adds	r3, #248	; 0xf8
 800ddaa:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff f852 	bl	800ce56 <fsm_lowerup>
}
 800ddb2:	bf00      	nop
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	33f8      	adds	r3, #248	; 0xf8
 800ddc6:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff f869 	bl	800cea0 <fsm_lowerdown>
}
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b086      	sub	sp, #24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	33f8      	adds	r3, #248	; 0xf8
 800dde6:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	6978      	ldr	r0, [r7, #20]
 800ddee:	f7ff fa57 	bl	800d2a0 <fsm_input>
}
 800ddf2:	bf00      	nop
 800ddf4:	3718      	adds	r7, #24
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b084      	sub	sp, #16
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	33f8      	adds	r3, #248	; 0xf8
 800de06:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f7ff f849 	bl	800cea0 <fsm_lowerdown>
}
 800de0e:	bf00      	nop
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800de16:	b580      	push	{r7, lr}
 800de18:	b086      	sub	sp, #24
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800de2a:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800de32:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800de3a:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d106      	bne.n	800de58 <ipcp_resetci+0x42>
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	f003 0302 	and.w	r3, r3, #2
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00f      	beq.n	800de78 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800de62:	2b00      	cmp	r3, #0
 800de64:	d106      	bne.n	800de74 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	f003 0302 	and.w	r3, r3, #2
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800de74:	2301      	movs	r3, #1
 800de76:	e000      	b.n	800de7a <ipcp_resetci+0x64>
 800de78:	2300      	movs	r3, #0
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	f003 0301 	and.w	r3, r3, #1
 800de80:	b2d9      	uxtb	r1, r3
 800de82:	693a      	ldr	r2, [r7, #16]
 800de84:	7813      	ldrb	r3, [r2, #0]
 800de86:	f361 0382 	bfi	r3, r1, #2, #1
 800de8a:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d104      	bne.n	800de9e <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	7813      	ldrb	r3, [r2, #0]
 800de98:	f043 0308 	orr.w	r3, r3, #8
 800de9c:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d104      	bne.n	800deb0 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	7813      	ldrb	r3, [r2, #0]
 800deaa:	f043 0310 	orr.w	r3, r3, #16
 800deae:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	ca07      	ldmia	r2, {r0, r1, r2}
 800deb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d102      	bne.n	800ded0 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2200      	movs	r2, #0
 800dece:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ded6:	220c      	movs	r2, #12
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f005 faab 	bl	8013436 <memset>
}
 800dee0:	bf00      	nop
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800dee8:	b480      	push	{r7}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800defc:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800df04:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d019      	beq.n	800df48 <ipcp_cilen+0x60>
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f003 0302 	and.w	r3, r3, #2
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d012      	beq.n	800df48 <ipcp_cilen+0x60>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10b      	bne.n	800df48 <ipcp_cilen+0x60>
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	f003 0302 	and.w	r3, r3, #2
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	7813      	ldrb	r3, [r2, #0]
 800df42:	f36f 0300 	bfc	r3, #0, #1
 800df46:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d108      	bne.n	800df68 <ipcp_cilen+0x80>
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	f003 0302 	and.w	r3, r3, #2
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <ipcp_cilen+0x80>
 800df64:	220a      	movs	r2, #10
 800df66:	e000      	b.n	800df6a <ipcp_cilen+0x82>
 800df68:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	f003 0301 	and.w	r3, r3, #1
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <ipcp_cilen+0x94>
 800df78:	2306      	movs	r3, #6
 800df7a:	e000      	b.n	800df7e <ipcp_cilen+0x96>
 800df7c:	2300      	movs	r3, #0
 800df7e:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800df80:	4618      	mov	r0, r3
 800df82:	371c      	adds	r7, #28
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b08a      	sub	sp, #40	; 0x28
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800dfa4:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d15e      	bne.n	800e078 <ipcp_addci+0xec>
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d057      	beq.n	800e078 <ipcp_addci+0xec>
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	2b09      	cmp	r3, #9
 800dfcc:	dd4f      	ble.n	800e06e <ipcp_addci+0xe2>
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	60ba      	str	r2, [r7, #8]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	701a      	strb	r2, [r3, #0]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	1c5a      	adds	r2, r3, #1
 800dfdc:	60ba      	str	r2, [r7, #8]
 800dfde:	220a      	movs	r2, #10
 800dfe0:	701a      	strb	r2, [r3, #0]
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f5 f9e3 	bl	80033b2 <lwip_htonl>
 800dfec:	61b8      	str	r0, [r7, #24]
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	60ba      	str	r2, [r7, #8]
 800dff4:	69ba      	ldr	r2, [r7, #24]
 800dff6:	0e12      	lsrs	r2, r2, #24
 800dff8:	b2d2      	uxtb	r2, r2
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	60ba      	str	r2, [r7, #8]
 800e002:	69ba      	ldr	r2, [r7, #24]
 800e004:	0c12      	lsrs	r2, r2, #16
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	701a      	strb	r2, [r3, #0]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	1c5a      	adds	r2, r3, #1
 800e00e:	60ba      	str	r2, [r7, #8]
 800e010:	69ba      	ldr	r2, [r7, #24]
 800e012:	0a12      	lsrs	r2, r2, #8
 800e014:	b2d2      	uxtb	r2, r2
 800e016:	701a      	strb	r2, [r3, #0]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	60ba      	str	r2, [r7, #8]
 800e01e:	69ba      	ldr	r2, [r7, #24]
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f5 f9c2 	bl	80033b2 <lwip_htonl>
 800e02e:	61b8      	str	r0, [r7, #24]
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	1c5a      	adds	r2, r3, #1
 800e034:	60ba      	str	r2, [r7, #8]
 800e036:	69ba      	ldr	r2, [r7, #24]
 800e038:	0e12      	lsrs	r2, r2, #24
 800e03a:	b2d2      	uxtb	r2, r2
 800e03c:	701a      	strb	r2, [r3, #0]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	1c5a      	adds	r2, r3, #1
 800e042:	60ba      	str	r2, [r7, #8]
 800e044:	69ba      	ldr	r2, [r7, #24]
 800e046:	0c12      	lsrs	r2, r2, #16
 800e048:	b2d2      	uxtb	r2, r2
 800e04a:	701a      	strb	r2, [r3, #0]
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	1c5a      	adds	r2, r3, #1
 800e050:	60ba      	str	r2, [r7, #8]
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	0a12      	lsrs	r2, r2, #8
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	701a      	strb	r2, [r3, #0]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	60ba      	str	r2, [r7, #8]
 800e060:	69ba      	ldr	r2, [r7, #24]
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	701a      	strb	r2, [r3, #0]
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	3b0a      	subs	r3, #10
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
 800e06c:	e004      	b.n	800e078 <ipcp_addci+0xec>
 800e06e:	69fa      	ldr	r2, [r7, #28]
 800e070:	7813      	ldrb	r3, [r2, #0]
 800e072:	f36f 0341 	bfc	r3, #1, #1
 800e076:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	f003 0301 	and.w	r3, r3, #1
 800e080:	b2db      	uxtb	r3, r3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d036      	beq.n	800e0f4 <ipcp_addci+0x168>
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	2b05      	cmp	r3, #5
 800e08a:	dd2e      	ble.n	800e0ea <ipcp_addci+0x15e>
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	1c5a      	adds	r2, r3, #1
 800e090:	60ba      	str	r2, [r7, #8]
 800e092:	2203      	movs	r2, #3
 800e094:	701a      	strb	r2, [r3, #0]
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	60ba      	str	r2, [r7, #8]
 800e09c:	2206      	movs	r2, #6
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f5 f984 	bl	80033b2 <lwip_htonl>
 800e0aa:	6178      	str	r0, [r7, #20]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	60ba      	str	r2, [r7, #8]
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	0e12      	lsrs	r2, r2, #24
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	1c5a      	adds	r2, r3, #1
 800e0be:	60ba      	str	r2, [r7, #8]
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	0c12      	lsrs	r2, r2, #16
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	60ba      	str	r2, [r7, #8]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	0a12      	lsrs	r2, r2, #8
 800e0d2:	b2d2      	uxtb	r2, r2
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	60ba      	str	r2, [r7, #8]
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	b2d2      	uxtb	r2, r2
 800e0e0:	701a      	strb	r2, [r3, #0]
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	3b06      	subs	r3, #6
 800e0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e0e8:	e004      	b.n	800e0f4 <ipcp_addci+0x168>
 800e0ea:	69fa      	ldr	r2, [r7, #28]
 800e0ec:	7813      	ldrb	r3, [r2, #0]
 800e0ee:	f36f 0300 	bfc	r3, #0, #1
 800e0f2:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	601a      	str	r2, [r3, #0]
}
 800e100:	bf00      	nop
 800e102:	3728      	adds	r7, #40	; 0x28
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	; 0x28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e120:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d179      	bne.n	800e224 <ipcp_ackci+0x11c>
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	f003 0302 	and.w	r3, r3, #2
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d072      	beq.n	800e224 <ipcp_ackci+0x11c>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	3b0a      	subs	r3, #10
 800e142:	607b      	str	r3, [r7, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f2c0 80bb 	blt.w	800e2c2 <ipcp_ackci+0x1ba>
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	60ba      	str	r2, [r7, #8]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	83fb      	strh	r3, [r7, #30]
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	60ba      	str	r2, [r7, #8]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	83bb      	strh	r3, [r7, #28]
 800e160:	8bbb      	ldrh	r3, [r7, #28]
 800e162:	2b0a      	cmp	r3, #10
 800e164:	f040 80b8 	bne.w	800e2d8 <ipcp_ackci+0x1d0>
 800e168:	8bfb      	ldrh	r3, [r7, #30]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	f040 80b4 	bne.w	800e2d8 <ipcp_ackci+0x1d0>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	60ba      	str	r2, [r7, #8]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	021b      	lsls	r3, r3, #8
 800e17a:	61bb      	str	r3, [r7, #24]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	60ba      	str	r2, [r7, #8]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	4313      	orrs	r3, r2
 800e18a:	61bb      	str	r3, [r7, #24]
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	021b      	lsls	r3, r3, #8
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	60ba      	str	r2, [r7, #8]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	61bb      	str	r3, [r7, #24]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	021b      	lsls	r3, r3, #8
 800e1a6:	61bb      	str	r3, [r7, #24]
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	60ba      	str	r2, [r7, #8]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	61bb      	str	r3, [r7, #24]
 800e1b8:	69b8      	ldr	r0, [r7, #24]
 800e1ba:	f7f5 f8fa 	bl	80033b2 <lwip_htonl>
 800e1be:	6178      	str	r0, [r7, #20]
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d17d      	bne.n	800e2c6 <ipcp_ackci+0x1be>
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	60ba      	str	r2, [r7, #8]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	021b      	lsls	r3, r3, #8
 800e1d4:	61bb      	str	r3, [r7, #24]
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	60ba      	str	r2, [r7, #8]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	61bb      	str	r3, [r7, #24]
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	021b      	lsls	r3, r3, #8
 800e1ea:	61bb      	str	r3, [r7, #24]
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	60ba      	str	r2, [r7, #8]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	61bb      	str	r3, [r7, #24]
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	021b      	lsls	r3, r3, #8
 800e200:	61bb      	str	r3, [r7, #24]
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	60ba      	str	r2, [r7, #8]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	4313      	orrs	r3, r2
 800e210:	61bb      	str	r3, [r7, #24]
 800e212:	69b8      	ldr	r0, [r7, #24]
 800e214:	f7f5 f8cd 	bl	80033b2 <lwip_htonl>
 800e218:	6178      	str	r0, [r7, #20]
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	689a      	ldr	r2, [r3, #8]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	429a      	cmp	r2, r3
 800e222:	d152      	bne.n	800e2ca <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d042      	beq.n	800e2b8 <ipcp_ackci+0x1b0>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	3b06      	subs	r3, #6
 800e236:	607b      	str	r3, [r7, #4]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	db47      	blt.n	800e2ce <ipcp_ackci+0x1c6>
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	60ba      	str	r2, [r7, #8]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	83fb      	strh	r3, [r7, #30]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	60ba      	str	r2, [r7, #8]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	83bb      	strh	r3, [r7, #28]
 800e252:	8bbb      	ldrh	r3, [r7, #28]
 800e254:	2b06      	cmp	r3, #6
 800e256:	d13f      	bne.n	800e2d8 <ipcp_ackci+0x1d0>
 800e258:	8bfb      	ldrh	r3, [r7, #30]
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d13c      	bne.n	800e2d8 <ipcp_ackci+0x1d0>
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	60ba      	str	r2, [r7, #8]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	021b      	lsls	r3, r3, #8
 800e268:	613b      	str	r3, [r7, #16]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	1c5a      	adds	r2, r3, #1
 800e26e:	60ba      	str	r2, [r7, #8]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	4313      	orrs	r3, r2
 800e278:	613b      	str	r3, [r7, #16]
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	021b      	lsls	r3, r3, #8
 800e27e:	613b      	str	r3, [r7, #16]
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	60ba      	str	r2, [r7, #8]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	613b      	str	r3, [r7, #16]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	021b      	lsls	r3, r3, #8
 800e294:	613b      	str	r3, [r7, #16]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	60ba      	str	r2, [r7, #8]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	6938      	ldr	r0, [r7, #16]
 800e2a8:	f7f5 f883 	bl	80033b2 <lwip_htonl>
 800e2ac:	6178      	str	r0, [r7, #20]
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d10c      	bne.n	800e2d2 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10b      	bne.n	800e2d6 <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e00b      	b.n	800e2da <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800e2c2:	bf00      	nop
 800e2c4:	e008      	b.n	800e2d8 <ipcp_ackci+0x1d0>
 800e2c6:	bf00      	nop
 800e2c8:	e006      	b.n	800e2d8 <ipcp_ackci+0x1d0>
 800e2ca:	bf00      	nop
 800e2cc:	e004      	b.n	800e2d8 <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800e2ce:	bf00      	nop
 800e2d0:	e002      	b.n	800e2d8 <ipcp_ackci+0x1d0>
 800e2d2:	bf00      	nop
 800e2d4:	e000      	b.n	800e2d8 <ipcp_ackci+0x1d0>
	goto bad;
 800e2d6:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3728      	adds	r7, #40	; 0x28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800e2e2:	b590      	push	{r4, r7, lr}
 800e2e4:	b093      	sub	sp, #76	; 0x4c
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	607a      	str	r2, [r7, #4]
 800e2ee:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e2fc:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800e2fe:	f107 031c 	add.w	r3, r7, #28
 800e302:	220c      	movs	r2, #12
 800e304:	2100      	movs	r1, #0
 800e306:	4618      	mov	r0, r3
 800e308:	f005 f895 	bl	8013436 <memset>
    try_ = *go;
 800e30c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e30e:	f107 0310 	add.w	r3, r7, #16
 800e312:	ca07      	ldmia	r2, {r0, r1, r2}
 800e314:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800e318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b00      	cmp	r3, #0
 800e324:	f040 8096 	bne.w	800e454 <ipcp_nakci+0x172>
 800e328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	f003 0302 	and.w	r3, r3, #2
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 808e 	beq.w	800e454 <ipcp_nakci+0x172>
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	785b      	ldrb	r3, [r3, #1]
 800e33c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e344:	2b0a      	cmp	r3, #10
 800e346:	f040 8085 	bne.w	800e454 <ipcp_nakci+0x172>
 800e34a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	429a      	cmp	r2, r3
 800e352:	dc7f      	bgt.n	800e454 <ipcp_nakci+0x172>
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d17b      	bne.n	800e454 <ipcp_nakci+0x172>
 800e35c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	3302      	adds	r3, #2
 800e36a:	60bb      	str	r3, [r7, #8]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	60ba      	str	r2, [r7, #8]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	63bb      	str	r3, [r7, #56]	; 0x38
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	1c5a      	adds	r2, r3, #1
 800e37c:	60ba      	str	r2, [r7, #8]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	461a      	mov	r2, r3
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	4313      	orrs	r3, r2
 800e386:	63bb      	str	r3, [r7, #56]	; 0x38
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	021b      	lsls	r3, r3, #8
 800e38c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	60ba      	str	r2, [r7, #8]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39a:	4313      	orrs	r3, r2
 800e39c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	021b      	lsls	r3, r3, #8
 800e3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	60ba      	str	r2, [r7, #8]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3b6:	f7f4 fffc 	bl	80033b2 <lwip_htonl>
 800e3ba:	6378      	str	r0, [r7, #52]	; 0x34
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	1c5a      	adds	r2, r3, #1
 800e3c0:	60ba      	str	r2, [r7, #8]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	021b      	lsls	r3, r3, #8
 800e3c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	1c5a      	adds	r2, r3, #1
 800e3cc:	60ba      	str	r2, [r7, #8]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	021b      	lsls	r3, r3, #8
 800e3dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	60ba      	str	r2, [r7, #8]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	021b      	lsls	r3, r3, #8
 800e3f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	1c5a      	adds	r2, r3, #1
 800e3f8:	60ba      	str	r2, [r7, #8]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	4313      	orrs	r3, r2
 800e402:	63bb      	str	r3, [r7, #56]	; 0x38
 800e404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e406:	f7f4 ffd4 	bl	80033b2 <lwip_htonl>
 800e40a:	6338      	str	r0, [r7, #48]	; 0x30
 800e40c:	7f3b      	ldrb	r3, [r7, #28]
 800e40e:	f043 0302 	orr.w	r3, r3, #2
 800e412:	773b      	strb	r3, [r7, #28]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d004      	beq.n	800e424 <ipcp_nakci+0x142>
 800e41a:	7c3b      	ldrb	r3, [r7, #16]
 800e41c:	f36f 0341 	bfc	r3, #1, #1
 800e420:	743b      	strb	r3, [r7, #16]
 800e422:	e017      	b.n	800e454 <ipcp_nakci+0x172>
 800e424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d004      	beq.n	800e43c <ipcp_nakci+0x15a>
 800e432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <ipcp_nakci+0x15a>
 800e438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43a:	617b      	str	r3, [r7, #20]
 800e43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f003 0310 	and.w	r3, r3, #16
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d004      	beq.n	800e454 <ipcp_nakci+0x172>
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <ipcp_nakci+0x172>
 800e450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e452:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800e454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 816e 	beq.w	800e740 <ipcp_nakci+0x45e>
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	785b      	ldrb	r3, [r3, #1]
 800e468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e46c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e470:	2b06      	cmp	r3, #6
 800e472:	f040 8165 	bne.w	800e740 <ipcp_nakci+0x45e>
 800e476:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	f300 815f 	bgt.w	800e740 <ipcp_nakci+0x45e>
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b03      	cmp	r3, #3
 800e488:	f040 815a 	bne.w	800e740 <ipcp_nakci+0x45e>
 800e48c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	607b      	str	r3, [r7, #4]
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	3302      	adds	r3, #2
 800e49a:	60bb      	str	r3, [r7, #8]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	60ba      	str	r2, [r7, #8]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	021b      	lsls	r3, r3, #8
 800e4a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	1c5a      	adds	r2, r3, #1
 800e4ac:	60ba      	str	r2, [r7, #8]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ba:	021b      	lsls	r3, r3, #8
 800e4bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	60ba      	str	r2, [r7, #8]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	021b      	lsls	r3, r3, #8
 800e4d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	60ba      	str	r2, [r7, #8]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4e6:	f7f4 ff64 	bl	80033b2 <lwip_htonl>
 800e4ea:	6378      	str	r0, [r7, #52]	; 0x34
 800e4ec:	7f3b      	ldrb	r3, [r7, #28]
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	773b      	strb	r3, [r7, #28]
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d008      	beq.n	800e50c <ipcp_nakci+0x22a>
 800e4fa:	7c3b      	ldrb	r3, [r7, #16]
 800e4fc:	f36f 0300 	bfc	r3, #0, #1
 800e500:	743b      	strb	r3, [r7, #16]
 800e502:	7c3b      	ldrb	r3, [r7, #16]
 800e504:	f36f 0341 	bfc	r3, #1, #1
 800e508:	743b      	strb	r3, [r7, #16]
 800e50a:	e119      	b.n	800e740 <ipcp_nakci+0x45e>
 800e50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 0308 	and.w	r3, r3, #8
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 8112 	beq.w	800e740 <ipcp_nakci+0x45e>
 800e51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f000 810e 	beq.w	800e740 <ipcp_nakci+0x45e>
 800e524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e526:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800e528:	e10a      	b.n	800e740 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	60ba      	str	r2, [r7, #8]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	60ba      	str	r2, [r7, #8]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800e542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e546:	2b01      	cmp	r3, #1
 800e548:	f240 810c 	bls.w	800e764 <ipcp_nakci+0x482>
 800e54c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	607b      	str	r3, [r7, #4]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f2c0 8103 	blt.w	800e764 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800e55e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e562:	3b02      	subs	r3, #2
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	4413      	add	r3, r2
 800e568:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800e56a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d003      	beq.n	800e57a <ipcp_nakci+0x298>
 800e572:	2b03      	cmp	r3, #3
 800e574:	f000 808d 	beq.w	800e692 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800e578:	e0e0      	b.n	800e73c <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800e57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d107      	bne.n	800e598 <ipcp_nakci+0x2b6>
 800e588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	f003 0302 	and.w	r3, r3, #2
 800e590:	b2db      	uxtb	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	f040 80e6 	bne.w	800e764 <ipcp_nakci+0x482>
 800e598:	7f3b      	ldrb	r3, [r7, #28]
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f040 80df 	bne.w	800e764 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800e5a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5aa:	2b0a      	cmp	r3, #10
 800e5ac:	f040 80da 	bne.w	800e764 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800e5b0:	7c3b      	ldrb	r3, [r7, #16]
 800e5b2:	f36f 0300 	bfc	r3, #0, #1
 800e5b6:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	60ba      	str	r2, [r7, #8]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	021b      	lsls	r3, r3, #8
 800e5c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	60ba      	str	r2, [r7, #8]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	021b      	lsls	r3, r3, #8
 800e5d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	60ba      	str	r2, [r7, #8]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	021b      	lsls	r3, r3, #8
 800e5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	60ba      	str	r2, [r7, #8]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800e600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e602:	f7f4 fed6 	bl	80033b2 <lwip_htonl>
 800e606:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800e608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d008      	beq.n	800e620 <ipcp_nakci+0x33e>
 800e60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	f003 0308 	and.w	r3, r3, #8
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800e61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61e:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	60ba      	str	r2, [r7, #8]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	021b      	lsls	r3, r3, #8
 800e62a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	60ba      	str	r2, [r7, #8]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	461a      	mov	r2, r3
 800e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e638:	4313      	orrs	r3, r2
 800e63a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	021b      	lsls	r3, r3, #8
 800e640:	63bb      	str	r3, [r7, #56]	; 0x38
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	60ba      	str	r2, [r7, #8]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	4313      	orrs	r3, r2
 800e650:	63bb      	str	r3, [r7, #56]	; 0x38
 800e652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e654:	021b      	lsls	r3, r3, #8
 800e656:	63bb      	str	r3, [r7, #56]	; 0x38
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	60ba      	str	r2, [r7, #8]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	461a      	mov	r2, r3
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	4313      	orrs	r3, r2
 800e666:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800e668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e66a:	f7f4 fea2 	bl	80033b2 <lwip_htonl>
 800e66e:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e672:	2b00      	cmp	r3, #0
 800e674:	d008      	beq.n	800e688 <ipcp_nakci+0x3a6>
 800e676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	f003 0310 	and.w	r3, r3, #16
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800e688:	7f3b      	ldrb	r3, [r7, #28]
 800e68a:	f043 0302 	orr.w	r3, r3, #2
 800e68e:	773b      	strb	r3, [r7, #28]
	    break;
 800e690:	e054      	b.n	800e73c <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800e692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d161      	bne.n	800e764 <ipcp_nakci+0x482>
 800e6a0:	7f3b      	ldrb	r3, [r7, #28]
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d15b      	bne.n	800e764 <ipcp_nakci+0x482>
 800e6ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e6b0:	2b06      	cmp	r3, #6
 800e6b2:	d157      	bne.n	800e764 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800e6b4:	7c3b      	ldrb	r3, [r7, #16]
 800e6b6:	f36f 0341 	bfc	r3, #1, #1
 800e6ba:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	60ba      	str	r2, [r7, #8]
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	021b      	lsls	r3, r3, #8
 800e6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	60ba      	str	r2, [r7, #8]
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	021b      	lsls	r3, r3, #8
 800e6dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	60ba      	str	r2, [r7, #8]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	021b      	lsls	r3, r3, #8
 800e6f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	60ba      	str	r2, [r7, #8]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	4313      	orrs	r3, r2
 800e702:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800e704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e706:	f7f4 fe54 	bl	80033b2 <lwip_htonl>
 800e70a:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d008      	beq.n	800e724 <ipcp_nakci+0x442>
 800e712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	f003 0308 	and.w	r3, r3, #8
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800e720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e722:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800e72a:	7c3b      	ldrb	r3, [r7, #16]
 800e72c:	f043 0301 	orr.w	r3, r3, #1
 800e730:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800e732:	7f3b      	ldrb	r3, [r7, #28]
 800e734:	f043 0301 	orr.w	r3, r3, #1
 800e738:	773b      	strb	r3, [r7, #28]
	    break;
 800e73a:	bf00      	nop
	}
	p = next;
 800e73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73e:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b01      	cmp	r3, #1
 800e744:	f73f aef1 	bgt.w	800e52a <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	7c1b      	ldrb	r3, [r3, #16]
 800e74c:	2b09      	cmp	r3, #9
 800e74e:	d007      	beq.n	800e760 <ipcp_nakci+0x47e>
	*go = try_;
 800e750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e752:	461c      	mov	r4, r3
 800e754:	f107 0310 	add.w	r3, r7, #16
 800e758:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e75c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800e760:	2301      	movs	r3, #1
 800e762:	e000      	b.n	800e766 <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	374c      	adds	r7, #76	; 0x4c
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd90      	pop	{r4, r7, pc}

0800e76e <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800e76e:	b590      	push	{r4, r7, lr}
 800e770:	b08f      	sub	sp, #60	; 0x3c
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e782:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e786:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800e788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78a:	f107 0314 	add.w	r3, r7, #20
 800e78e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f003 0301 	and.w	r3, r3, #1
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d17e      	bne.n	800e8a0 <ipcp_rejci+0x132>
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	f003 0302 	and.w	r3, r3, #2
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d077      	beq.n	800e8a0 <ipcp_rejci+0x132>
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	785b      	ldrb	r3, [r3, #1]
 800e7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7bc:	2b0a      	cmp	r3, #10
 800e7be:	d16f      	bne.n	800e8a0 <ipcp_rejci+0x132>
 800e7c0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	dc6a      	bgt.n	800e8a0 <ipcp_rejci+0x132>
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d166      	bne.n	800e8a0 <ipcp_rejci+0x132>
 800e7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	607b      	str	r3, [r7, #4]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	3302      	adds	r3, #2
 800e7e0:	60bb      	str	r3, [r7, #8]
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	60ba      	str	r2, [r7, #8]
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	60ba      	str	r2, [r7, #8]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	021b      	lsls	r3, r3, #8
 800e802:	62bb      	str	r3, [r7, #40]	; 0x28
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	60ba      	str	r2, [r7, #8]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	4313      	orrs	r3, r2
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	021b      	lsls	r3, r3, #8
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	60ba      	str	r2, [r7, #8]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	461a      	mov	r2, r3
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	4313      	orrs	r3, r2
 800e828:	62bb      	str	r3, [r7, #40]	; 0x28
 800e82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e82c:	f7f4 fdc1 	bl	80033b2 <lwip_htonl>
 800e830:	6278      	str	r0, [r7, #36]	; 0x24
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	429a      	cmp	r2, r3
 800e83a:	f040 8093 	bne.w	800e964 <ipcp_rejci+0x1f6>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	60ba      	str	r2, [r7, #8]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	021b      	lsls	r3, r3, #8
 800e848:	62bb      	str	r3, [r7, #40]	; 0x28
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	60ba      	str	r2, [r7, #8]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	461a      	mov	r2, r3
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	4313      	orrs	r3, r2
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	021b      	lsls	r3, r3, #8
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	1c5a      	adds	r2, r3, #1
 800e864:	60ba      	str	r2, [r7, #8]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	461a      	mov	r2, r3
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	4313      	orrs	r3, r2
 800e86e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	021b      	lsls	r3, r3, #8
 800e874:	62bb      	str	r3, [r7, #40]	; 0x28
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	60ba      	str	r2, [r7, #8]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	461a      	mov	r2, r3
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	4313      	orrs	r3, r2
 800e884:	62bb      	str	r3, [r7, #40]	; 0x28
 800e886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e888:	f7f4 fd93 	bl	80033b2 <lwip_htonl>
 800e88c:	6278      	str	r0, [r7, #36]	; 0x24
 800e88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e890:	689a      	ldr	r2, [r3, #8]
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	429a      	cmp	r2, r3
 800e896:	d167      	bne.n	800e968 <ipcp_rejci+0x1fa>
 800e898:	7d3b      	ldrb	r3, [r7, #20]
 800e89a:	f36f 0341 	bfc	r3, #1, #1
 800e89e:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d049      	beq.n	800e942 <ipcp_rejci+0x1d4>
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8ba:	2b06      	cmp	r3, #6
 800e8bc:	d141      	bne.n	800e942 <ipcp_rejci+0x1d4>
 800e8be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	dc3c      	bgt.n	800e942 <ipcp_rejci+0x1d4>
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d138      	bne.n	800e942 <ipcp_rejci+0x1d4>
 800e8d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	607b      	str	r3, [r7, #4]
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	3302      	adds	r3, #2
 800e8de:	60bb      	str	r3, [r7, #8]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	60ba      	str	r2, [r7, #8]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	021b      	lsls	r3, r3, #8
 800e8ea:	623b      	str	r3, [r7, #32]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	60ba      	str	r2, [r7, #8]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	623b      	str	r3, [r7, #32]
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	021b      	lsls	r3, r3, #8
 800e900:	623b      	str	r3, [r7, #32]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	60ba      	str	r2, [r7, #8]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	461a      	mov	r2, r3
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	4313      	orrs	r3, r2
 800e910:	623b      	str	r3, [r7, #32]
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	623b      	str	r3, [r7, #32]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	60ba      	str	r2, [r7, #8]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	461a      	mov	r2, r3
 800e922:	6a3b      	ldr	r3, [r7, #32]
 800e924:	4313      	orrs	r3, r2
 800e926:	623b      	str	r3, [r7, #32]
 800e928:	6a38      	ldr	r0, [r7, #32]
 800e92a:	f7f4 fd42 	bl	80033b2 <lwip_htonl>
 800e92e:	6278      	str	r0, [r7, #36]	; 0x24
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	429a      	cmp	r2, r3
 800e938:	d118      	bne.n	800e96c <ipcp_rejci+0x1fe>
 800e93a:	7d3b      	ldrb	r3, [r7, #20]
 800e93c:	f36f 0300 	bfc	r3, #0, #1
 800e940:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d113      	bne.n	800e970 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	7c1b      	ldrb	r3, [r3, #16]
 800e94c:	2b09      	cmp	r3, #9
 800e94e:	d007      	beq.n	800e960 <ipcp_rejci+0x1f2>
	*go = try_;
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	461c      	mov	r4, r3
 800e954:	f107 0314 	add.w	r3, r7, #20
 800e958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e95c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800e960:	2301      	movs	r3, #1
 800e962:	e007      	b.n	800e974 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800e964:	bf00      	nop
 800e966:	e004      	b.n	800e972 <ipcp_rejci+0x204>
 800e968:	bf00      	nop
 800e96a:	e002      	b.n	800e972 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800e96c:	bf00      	nop
 800e96e:	e000      	b.n	800e972 <ipcp_rejci+0x204>
	goto bad;
 800e970:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	373c      	adds	r7, #60	; 0x3c
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd90      	pop	{r4, r7, pc}

0800e97c <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b094      	sub	sp, #80	; 0x50
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e996:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800e9b6:	220c      	movs	r2, #12
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9bc:	f004 fd3b 	bl	8013436 <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800e9c4:	e1f3      	b.n	800edae <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800e9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d0:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800e9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	dd0b      	ble.n	800e9f0 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800e9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9da:	3301      	adds	r3, #1
 800e9dc:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d906      	bls.n	800e9f0 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800e9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	dd07      	ble.n	800ea00 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800e9f0:	2304      	movs	r3, #4
 800e9f2:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800e9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800e9fe:	e1a1      	b.n	800ed44 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800ea00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800ea0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800ea16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ea1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800ea20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ea24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea26:	4413      	add	r3, r2
 800ea28:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800ea2a:	8bfb      	ldrh	r3, [r7, #30]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d003      	beq.n	800ea38 <ipcp_reqci+0xbc>
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	f000 80f6 	beq.w	800ec22 <ipcp_reqci+0x2a6>
 800ea36:	e182      	b.n	800ed3e <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	f003 0302 	and.w	r3, r3, #2
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <ipcp_reqci+0xe0>
 800ea46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <ipcp_reqci+0xe0>
 800ea54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ea58:	2b0a      	cmp	r3, #10
 800ea5a:	d002      	beq.n	800ea62 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800ea5c:	2304      	movs	r3, #4
 800ea5e:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800ea60:	e170      	b.n	800ed44 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800ea62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	021b      	lsls	r3, r3, #8
 800ea6c:	61bb      	str	r3, [r7, #24]
 800ea6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea70:	1c5a      	adds	r2, r3, #1
 800ea72:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	461a      	mov	r2, r3
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	61bb      	str	r3, [r7, #24]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	021b      	lsls	r3, r3, #8
 800ea82:	61bb      	str	r3, [r7, #24]
 800ea84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	4313      	orrs	r3, r2
 800ea92:	61bb      	str	r3, [r7, #24]
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	61bb      	str	r3, [r7, #24]
 800ea9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800eaaa:	69b8      	ldr	r0, [r7, #24]
 800eaac:	f7f4 fc81 	bl	80033b2 <lwip_htonl>
 800eab0:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	689a      	ldr	r2, [r3, #8]
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d033      	beq.n	800eb24 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d006      	beq.n	800ead0 <ipcp_reqci+0x154>
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	f003 0310 	and.w	r3, r3, #16
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d129      	bne.n	800eb24 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800ead0:	2303      	movs	r3, #3
 800ead2:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d133      	bne.n	800eb42 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800eada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eadc:	3b04      	subs	r3, #4
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800eae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7f4 fc64 	bl	80033b2 <lwip_htonl>
 800eaea:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800eaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	0e12      	lsrs	r2, r2, #24
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb00:	69ba      	ldr	r2, [r7, #24]
 800eb02:	0c12      	lsrs	r2, r2, #16
 800eb04:	b2d2      	uxtb	r2, r2
 800eb06:	701a      	strb	r2, [r3, #0]
 800eb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb0e:	69ba      	ldr	r2, [r7, #24]
 800eb10:	0a12      	lsrs	r2, r2, #8
 800eb12:	b2d2      	uxtb	r2, r2
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	b2d2      	uxtb	r2, r2
 800eb20:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800eb22:	e00e      	b.n	800eb42 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <ipcp_reqci+0x1c6>
 800eb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d107      	bne.n	800eb42 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800eb32:	2304      	movs	r3, #4
 800eb34:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800eb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb38:	7813      	ldrb	r3, [r2, #0]
 800eb3a:	f36f 0382 	bfc	r3, #2, #1
 800eb3e:	7013      	strb	r3, [r2, #0]
		break;
 800eb40:	e100      	b.n	800ed44 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800eb42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	61bb      	str	r3, [r7, #24]
 800eb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb50:	1c5a      	adds	r2, r3, #1
 800eb52:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	021b      	lsls	r3, r3, #8
 800eb62:	61bb      	str	r3, [r7, #24]
 800eb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb66:	1c5a      	adds	r2, r3, #1
 800eb68:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	61bb      	str	r3, [r7, #24]
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	021b      	lsls	r3, r3, #8
 800eb78:	61bb      	str	r3, [r7, #24]
 800eb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800eb8a:	69b8      	ldr	r0, [r7, #24]
 800eb8c:	f7f4 fc11 	bl	80033b2 <lwip_htonl>
 800eb90:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d036      	beq.n	800ec0a <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d006      	beq.n	800ebb0 <ipcp_reqci+0x234>
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0308 	and.w	r3, r3, #8
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d129      	bne.n	800ec04 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d127      	bne.n	800ec0a <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800ebba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbc:	3b04      	subs	r3, #4
 800ebbe:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7f4 fbf4 	bl	80033b2 <lwip_htonl>
 800ebca:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800ebcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ebd2:	69ba      	ldr	r2, [r7, #24]
 800ebd4:	0e12      	lsrs	r2, r2, #24
 800ebd6:	b2d2      	uxtb	r2, r2
 800ebd8:	701a      	strb	r2, [r3, #0]
 800ebda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ebe0:	69ba      	ldr	r2, [r7, #24]
 800ebe2:	0c12      	lsrs	r2, r2, #16
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	701a      	strb	r2, [r3, #0]
 800ebe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ebee:	69ba      	ldr	r2, [r7, #24]
 800ebf0:	0a12      	lsrs	r2, r2, #8
 800ebf2:	b2d2      	uxtb	r2, r2
 800ebf4:	701a      	strb	r2, [r3, #0]
 800ebf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ebfc:	69ba      	ldr	r2, [r7, #24]
 800ebfe:	b2d2      	uxtb	r2, r2
 800ec00:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800ec02:	e002      	b.n	800ec0a <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	693a      	ldr	r2, [r7, #16]
 800ec08:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800ec0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec0c:	7813      	ldrb	r3, [r2, #0]
 800ec0e:	f043 0302 	orr.w	r3, r3, #2
 800ec12:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	605a      	str	r2, [r3, #4]
	    break;
 800ec20:	e090      	b.n	800ed44 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00a      	beq.n	800ec46 <ipcp_reqci+0x2ca>
 800ec30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	f003 0302 	and.w	r3, r3, #2
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d103      	bne.n	800ec46 <ipcp_reqci+0x2ca>
 800ec3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ec42:	2b06      	cmp	r3, #6
 800ec44:	d002      	beq.n	800ec4c <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800ec46:	2304      	movs	r3, #4
 800ec48:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800ec4a:	e07b      	b.n	800ed44 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800ec4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	021b      	lsls	r3, r3, #8
 800ec56:	61bb      	str	r3, [r7, #24]
 800ec58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	461a      	mov	r2, r3
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	61bb      	str	r3, [r7, #24]
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	021b      	lsls	r3, r3, #8
 800ec6c:	61bb      	str	r3, [r7, #24]
 800ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	461a      	mov	r2, r3
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	61bb      	str	r3, [r7, #24]
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	61bb      	str	r3, [r7, #24]
 800ec84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800ec94:	69b8      	ldr	r0, [r7, #24]
 800ec96:	f7f4 fb8c 	bl	80033b2 <lwip_htonl>
 800ec9a:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800ec9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9e:	689a      	ldr	r2, [r3, #8]
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d033      	beq.n	800ed0e <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d006      	beq.n	800ecba <ipcp_reqci+0x33e>
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d129      	bne.n	800ed0e <ipcp_reqci+0x392>
		orc = CONFNAK;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d133      	bne.n	800ed2c <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800ecc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc6:	3b04      	subs	r3, #4
 800ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800ecca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7f4 fb6f 	bl	80033b2 <lwip_htonl>
 800ecd4:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800ecd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ecdc:	69ba      	ldr	r2, [r7, #24]
 800ecde:	0e12      	lsrs	r2, r2, #24
 800ece0:	b2d2      	uxtb	r2, r2
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece6:	1c5a      	adds	r2, r3, #1
 800ece8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	0c12      	lsrs	r2, r2, #16
 800ecee:	b2d2      	uxtb	r2, r2
 800ecf0:	701a      	strb	r2, [r3, #0]
 800ecf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ecf8:	69ba      	ldr	r2, [r7, #24]
 800ecfa:	0a12      	lsrs	r2, r2, #8
 800ecfc:	b2d2      	uxtb	r2, r2
 800ecfe:	701a      	strb	r2, [r3, #0]
 800ed00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed02:	1c5a      	adds	r2, r3, #1
 800ed04:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800ed0c:	e00e      	b.n	800ed2c <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10b      	bne.n	800ed2c <ipcp_reqci+0x3b0>
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d107      	bne.n	800ed2c <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800ed1c:	2304      	movs	r3, #4
 800ed1e:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800ed20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed22:	7813      	ldrb	r3, [r2, #0]
 800ed24:	f36f 0382 	bfc	r3, #2, #1
 800ed28:	7013      	strb	r3, [r2, #0]
		break;
 800ed2a:	e00b      	b.n	800ed44 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800ed2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed2e:	7813      	ldrb	r3, [r2, #0]
 800ed30:	f043 0301 	orr.w	r3, r3, #1
 800ed34:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	697a      	ldr	r2, [r7, #20]
 800ed3a:	609a      	str	r2, [r3, #8]
	    break;
 800ed3c:	e002      	b.n	800ed44 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800ed3e:	2304      	movs	r3, #4
 800ed40:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800ed42:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800ed44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d103      	bne.n	800ed52 <ipcp_reqci+0x3d6>
 800ed4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d000      	beq.n	800ed52 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800ed50:	e02d      	b.n	800edae <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800ed52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d110      	bne.n	800ed7a <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d002      	beq.n	800ed64 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800ed5e:	2304      	movs	r3, #4
 800ed60:	643b      	str	r3, [r7, #64]	; 0x40
 800ed62:	e00a      	b.n	800ed7a <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800ed64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed66:	2b04      	cmp	r3, #4
 800ed68:	d100      	bne.n	800ed6c <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800ed6a:	e020      	b.n	800edae <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d103      	bne.n	800ed7a <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800ed72:	2303      	movs	r3, #3
 800ed74:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800ed7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed7c:	2b04      	cmp	r3, #4
 800ed7e:	d106      	bne.n	800ed8e <ipcp_reqci+0x412>
 800ed80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed82:	2b04      	cmp	r3, #4
 800ed84:	d003      	beq.n	800ed8e <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800ed86:	2304      	movs	r3, #4
 800ed88:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800ed8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d006      	beq.n	800eda4 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800ed96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	6a39      	ldr	r1, [r7, #32]
 800ed9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eda0:	f004 fb24 	bl	80133ec <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800eda4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edaa:	4413      	add	r3, r2
 800edac:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800edae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f47f ae08 	bne.w	800e9c6 <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800edb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb8:	2b04      	cmp	r3, #4
 800edba:	d055      	beq.n	800ee68 <ipcp_reqci+0x4ec>
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f003 0301 	and.w	r3, r3, #1
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d14e      	bne.n	800ee68 <ipcp_reqci+0x4ec>
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	f003 0302 	and.w	r3, r3, #2
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d147      	bne.n	800ee68 <ipcp_reqci+0x4ec>
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d040      	beq.n	800ee68 <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d13d      	bne.n	800ee68 <ipcp_reqci+0x4ec>
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0304 	and.w	r3, r3, #4
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d136      	bne.n	800ee68 <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800edfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d108      	bne.n	800ee12 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800ee00:	2303      	movs	r3, #3
 800ee02:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800ee08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee0a:	7813      	ldrb	r3, [r2, #0]
 800ee0c:	f36f 0382 	bfc	r3, #2, #1
 800ee10:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800ee12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee18:	2203      	movs	r2, #3
 800ee1a:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee22:	2206      	movs	r2, #6
 800ee24:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7f4 fac1 	bl	80033b2 <lwip_htonl>
 800ee30:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	0e12      	lsrs	r2, r2, #24
 800ee3c:	b2d2      	uxtb	r2, r2
 800ee3e:	701a      	strb	r2, [r3, #0]
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee46:	69ba      	ldr	r2, [r7, #24]
 800ee48:	0c12      	lsrs	r2, r2, #16
 800ee4a:	b2d2      	uxtb	r2, r2
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee50:	1c5a      	adds	r2, r3, #1
 800ee52:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee54:	69ba      	ldr	r2, [r7, #24]
 800ee56:	0a12      	lsrs	r2, r2, #8
 800ee58:	b2d2      	uxtb	r2, r2
 800ee5a:	701a      	strb	r2, [r3, #0]
 800ee5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	63ba      	str	r2, [r7, #56]	; 0x38
 800ee62:	69ba      	ldr	r2, [r7, #24]
 800ee64:	b2d2      	uxtb	r2, r2
 800ee66:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800ee68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	1ad2      	subs	r2, r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800ee72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3750      	adds	r7, #80	; 0x50
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b088      	sub	sp, #32
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ee90:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ee98:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800eea0:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10a      	bne.n	800eec6 <ipcp_up+0x4a>
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f003 0302 	and.w	r3, r3, #2
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d103      	bne.n	800eec6 <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	689a      	ldr	r2, [r3, #8]
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d11f      	bne.n	800ef14 <ipcp_up+0x98>
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	f003 0302 	and.w	r3, r3, #2
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d118      	bne.n	800ef14 <ipcp_up+0x98>
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	f003 0301 	and.w	r3, r3, #1
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d106      	bne.n	800eefe <ipcp_up+0x82>
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	f003 0302 	and.w	r3, r3, #2
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00a      	beq.n	800ef14 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	493b      	ldr	r1, [pc, #236]	; (800eff8 <ipcp_up+0x17c>)
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fe ff36 	bl	800dd7e <ipcp_close>
	return;
 800ef12:	e06e      	b.n	800eff2 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d106      	bne.n	800ef2a <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4936      	ldr	r1, [pc, #216]	; (800effc <ipcp_up+0x180>)
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe ff2b 	bl	800dd7e <ipcp_close>
	return;
 800ef28:	e063      	b.n	800eff2 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10c      	bne.n	800ef4c <ipcp_up+0xd0>
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	f003 0304 	and.w	r3, r3, #4
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d105      	bne.n	800ef4c <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800ef40:	482f      	ldr	r0, [pc, #188]	; (800f000 <ipcp_up+0x184>)
 800ef42:	f7f4 fa36 	bl	80033b2 <lwip_htonl>
 800ef46:	4602      	mov	r2, r0
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d01a      	beq.n	800ef8a <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7f4 fa2a 	bl	80033b2 <lwip_htonl>
 800ef5e:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	0e1b      	lsrs	r3, r3, #24
 800ef64:	2b7f      	cmp	r3, #127	; 0x7f
 800ef66:	d00b      	beq.n	800ef80 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ef6e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800ef72:	d005      	beq.n	800ef80 <ipcp_up+0x104>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ef7a:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800ef7e:	d104      	bne.n	800ef8a <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800ef80:	4920      	ldr	r1, [pc, #128]	; (800f004 <ipcp_up+0x188>)
 800ef82:	69f8      	ldr	r0, [r7, #28]
 800ef84:	f7fe fefb 	bl	800dd7e <ipcp_close>
		return;
 800ef88:	e033      	b.n	800eff2 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f002 fd36 	bl	8011a00 <get_mask>
 800ef94:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6859      	ldr	r1, [r3, #4]
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	689a      	ldr	r2, [r3, #8]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	69f8      	ldr	r0, [r7, #28]
 800efa2:	f002 fcc3 	bl	801192c <sifaddr>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4915      	ldr	r1, [pc, #84]	; (800f008 <ipcp_up+0x18c>)
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe fee3 	bl	800dd7e <ipcp_close>
	    return;
 800efb8:	e01b      	b.n	800eff2 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800efba:	69f8      	ldr	r0, [r7, #28]
 800efbc:	f002 fce8 	bl	8011990 <sifup>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d106      	bne.n	800efd4 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	490f      	ldr	r1, [pc, #60]	; (800f008 <ipcp_up+0x18c>)
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fe fed6 	bl	800dd7e <ipcp_close>
	    return;
 800efd2:	e00e      	b.n	800eff2 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800efdc:	2121      	movs	r1, #33	; 0x21
 800efde:	69f8      	ldr	r0, [r7, #28]
 800efe0:	f7fd fecc 	bl	800cd7c <np_up>
    pcb->ipcp_is_up = 1;
 800efe4:	69fa      	ldr	r2, [r7, #28]
 800efe6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800efea:	f043 0304 	orr.w	r3, r3, #4
 800efee:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08016e10 	.word	0x08016e10
 800effc:	08016e28 	.word	0x08016e28
 800f000:	0a404040 	.word	0x0a404040
 800f004:	08016e50 	.word	0x08016e50
 800f008:	08016e70 	.word	0x08016e70

0800f00c <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f020:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f028:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f030:	f003 0304 	and.w	r3, r3, #4
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800f040:	f36f 0382 	bfc	r3, #2, #1
 800f044:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800f048:	2121      	movs	r1, #33	; 0x21
 800f04a:	6978      	ldr	r0, [r7, #20]
 800f04c:	f7fd feb0 	bl	800cdb0 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800f050:	6978      	ldr	r0, [r7, #20]
 800f052:	f002 fcc0 	bl	80119d6 <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6859      	ldr	r1, [r3, #4]
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	689a      	ldr	r2, [r3, #8]
 800f05e:	2300      	movs	r3, #0
 800f060:	6978      	ldr	r0, [r7, #20]
 800f062:	f000 f804 	bl	800f06e <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800f066:	bf00      	nop
 800f068:	3718      	adds	r7, #24
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800f06e:	b580      	push	{r7, lr}
 800f070:	b084      	sub	sp, #16
 800f072:	af00      	add	r7, sp, #0
 800f074:	60f8      	str	r0, [r7, #12]
 800f076:	60b9      	str	r1, [r7, #8]
 800f078:	607a      	str	r2, [r7, #4]
 800f07a:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	68b9      	ldr	r1, [r7, #8]
 800f080:	68f8      	ldr	r0, [r7, #12]
 800f082:	f002 fc6f 	bl	8011964 <cifaddr>
}
 800f086:	bf00      	nop
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00a      	beq.n	800f0c2 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800f0b2:	f36f 0341 	bfc	r3, #1, #1
 800f0b6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800f0ba:	2121      	movs	r1, #33	; 0x21
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7fd fe91 	bl	800cde4 <np_finished>
	}
}
 800f0c2:	bf00      	nop
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
	...

0800f0cc <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	3344      	adds	r3, #68	; 0x44
 800f0d8:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3360      	adds	r3, #96	; 0x60
 800f0de:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	33a8      	adds	r3, #168	; 0xa8
 800f0e4:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	f24c 0221 	movw	r2, #49185	; 0xc021
 800f0f2:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	4a2b      	ldr	r2, [pc, #172]	; (800f1a4 <lcp_init+0xd8>)
 800f0f8:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800f0fa:	6978      	ldr	r0, [r7, #20]
 800f0fc:	f7fd fe8e 	bl	800ce1c <fsm_init>

    BZERO(wo, sizeof(*wo));
 800f100:	2224      	movs	r2, #36	; 0x24
 800f102:	2100      	movs	r1, #0
 800f104:	6938      	ldr	r0, [r7, #16]
 800f106:	f004 f996 	bl	8013436 <memset>
    wo->neg_mru = 1;
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	7813      	ldrb	r3, [r2, #0]
 800f10e:	f043 0304 	orr.w	r3, r3, #4
 800f112:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f11a:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	7813      	ldrb	r3, [r2, #0]
 800f120:	f043 0308 	orr.w	r3, r3, #8
 800f124:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	7813      	ldrb	r3, [r2, #0]
 800f12a:	f043 0320 	orr.w	r3, r3, #32
 800f12e:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800f130:	693a      	ldr	r2, [r7, #16]
 800f132:	7813      	ldrb	r3, [r2, #0]
 800f134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f138:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	7813      	ldrb	r3, [r2, #0]
 800f13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f142:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800f144:	2224      	movs	r2, #36	; 0x24
 800f146:	2100      	movs	r1, #0
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f004 f974 	bl	8013436 <memset>
    ao->neg_mru = 1;
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	7813      	ldrb	r3, [r2, #0]
 800f152:	f043 0304 	orr.w	r3, r3, #4
 800f156:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f15e:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	7813      	ldrb	r3, [r2, #0]
 800f164:	f043 0308 	orr.w	r3, r3, #8
 800f168:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	7813      	ldrb	r3, [r2, #0]
 800f16e:	f043 0310 	orr.w	r3, r3, #16
 800f172:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	7813      	ldrb	r3, [r2, #0]
 800f178:	f043 0320 	orr.w	r3, r3, #32
 800f17c:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	7813      	ldrb	r3, [r2, #0]
 800f182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f186:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	7813      	ldrb	r3, [r2, #0]
 800f18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f190:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	7853      	ldrb	r3, [r2, #1]
 800f196:	f043 0304 	orr.w	r3, r3, #4
 800f19a:	7053      	strb	r3, [r2, #1]
}
 800f19c:	bf00      	nop
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	080171f8 	.word	0x080171f8

0800f1a8 <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	3344      	adds	r3, #68	; 0x44
 800f1b4:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	3360      	adds	r3, #96	; 0x60
 800f1ba:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	7c5b      	ldrb	r3, [r3, #17]
 800f1c0:	f023 0305 	bic.w	r3, r3, #5
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	7c5b      	ldrb	r3, [r3, #17]
 800f1dc:	f043 0301 	orr.w	r3, r3, #1
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	f003 0302 	and.w	r3, r3, #2
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d006      	beq.n	800f202 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	7c5b      	ldrb	r3, [r3, #17]
 800f1f8:	f043 0304 	orr.w	r3, r3, #4
 800f1fc:	b2da      	uxtb	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7fd fea0 	bl	800cf48 <fsm_open>
}
 800f208:	bf00      	nop
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	3344      	adds	r3, #68	; 0x44
 800f21e:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f226:	2b00      	cmp	r3, #0
 800f228:	d003      	beq.n	800f232 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800f22a:	210b      	movs	r1, #11
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f002 fb35 	bl	801189c <new_phase>

    if (f->flags & DELAYED_UP) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	7c5b      	ldrb	r3, [r3, #17]
 800f236:	b25b      	sxtb	r3, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	da06      	bge.n	800f24a <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800f23c:	68f9      	ldr	r1, [r7, #12]
 800f23e:	4812      	ldr	r0, [pc, #72]	; (800f288 <lcp_close+0x78>)
 800f240:	f7fd fb90 	bl	800c964 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2203      	movs	r2, #3
 800f248:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	7c1b      	ldrb	r3, [r3, #16]
 800f24e:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f7fd ff40 	bl	800d0d8 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d10f      	bne.n	800f27e <lcp_close+0x6e>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	7c5b      	ldrb	r3, [r3, #17]
 800f262:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800f266:	2b00      	cmp	r3, #0
 800f268:	d009      	beq.n	800f27e <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	7c5b      	ldrb	r3, [r3, #17]
 800f26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f272:	b2da      	uxtb	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f001 ff1a 	bl	80110b2 <lcp_finished>
    }
}
 800f27e:	bf00      	nop
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	0800f38d 	.word	0x0800f38d

0800f28c <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af02      	add	r7, sp, #8
 800f292:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3360      	adds	r3, #96	; 0x60
 800f298:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	3344      	adds	r3, #68	; 0x44
 800f29e:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2aa:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f002 fb04 	bl	80118bc <ppp_send_config>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	db3f      	blt.n	800f33a <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0308 	and.w	r3, r3, #8
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <lcp_lowerup+0x40>
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	e001      	b.n	800f2d0 <lcp_lowerup+0x44>
 800f2cc:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f2d8:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800f2da:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f2e4:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f002 fb00 	bl	80118f4 <ppp_recv_config>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	db1f      	blt.n	800f33a <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f300:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	885b      	ldrh	r3, [r3, #2]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d012      	beq.n	800f332 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	7c5b      	ldrb	r3, [r3, #17]
 800f310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f314:	b2da      	uxtb	r2, r3
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800f31a:	68b9      	ldr	r1, [r7, #8]
 800f31c:	4809      	ldr	r0, [pc, #36]	; (800f344 <lcp_lowerup+0xb8>)
 800f31e:	f7fd fb21 	bl	800c964 <sys_untimeout>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	885b      	ldrh	r3, [r3, #2]
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	4906      	ldr	r1, [pc, #24]	; (800f344 <lcp_lowerup+0xb8>)
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fd faee 	bl	800c90c <sys_timeout>
 800f330:	e004      	b.n	800f33c <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800f332:	68b8      	ldr	r0, [r7, #8]
 800f334:	f7fd fd8f 	bl	800ce56 <fsm_lowerup>
 800f338:	e000      	b.n	800f33c <lcp_lowerup+0xb0>
	    return;
 800f33a:	bf00      	nop
}
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	0800f38d 	.word	0x0800f38d

0800f348 <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	3344      	adds	r3, #68	; 0x44
 800f354:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	7c5b      	ldrb	r3, [r3, #17]
 800f35a:	b25b      	sxtb	r3, r3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	da0b      	bge.n	800f378 <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	7c5b      	ldrb	r3, [r3, #17]
 800f364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800f36e:	68f9      	ldr	r1, [r7, #12]
 800f370:	4805      	ldr	r0, [pc, #20]	; (800f388 <lcp_lowerdown+0x40>)
 800f372:	f7fd faf7 	bl	800c964 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800f376:	e002      	b.n	800f37e <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	f7fd fd91 	bl	800cea0 <fsm_lowerdown>
}
 800f37e:	bf00      	nop
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0800f38d 	.word	0x0800f38d

0800f38c <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	7c5b      	ldrb	r3, [r3, #17]
 800f39c:	b25b      	sxtb	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	da09      	bge.n	800f3b6 <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	7c5b      	ldrb	r3, [r3, #17]
 800f3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800f3b0:	68f8      	ldr	r0, [r7, #12]
 800f3b2:	f7fd fd50 	bl	800ce56 <fsm_lowerup>
    }
}
 800f3b6:	bf00      	nop
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
	...

0800f3c0 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	3344      	adds	r3, #68	; 0x44
 800f3d0:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	7c5b      	ldrb	r3, [r3, #17]
 800f3d6:	b25b      	sxtb	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	da0d      	bge.n	800f3f8 <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	7c5b      	ldrb	r3, [r3, #17]
 800f3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800f3ea:	6979      	ldr	r1, [r7, #20]
 800f3ec:	4807      	ldr	r0, [pc, #28]	; (800f40c <lcp_input+0x4c>)
 800f3ee:	f7fd fab9 	bl	800c964 <sys_untimeout>
	fsm_lowerup(f);
 800f3f2:	6978      	ldr	r0, [r7, #20]
 800f3f4:	f7fd fd2f 	bl	800ce56 <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	68b9      	ldr	r1, [r7, #8]
 800f3fc:	6978      	ldr	r0, [r7, #20]
 800f3fe:	f7fd ff4f 	bl	800d2a0 <fsm_input>
}
 800f402:	bf00      	nop
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	0800f38d 	.word	0x0800f38d

0800f410 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b08a      	sub	sp, #40	; 0x28
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	3384      	adds	r3, #132	; 0x84
 800f428:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	3b08      	subs	r3, #8
 800f42e:	2b05      	cmp	r3, #5
 800f430:	d84a      	bhi.n	800f4c8 <lcp_extcode+0xb8>
 800f432:	a201      	add	r2, pc, #4	; (adr r2, 800f438 <lcp_extcode+0x28>)
 800f434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f438:	0800f451 	.word	0x0800f451
 800f43c:	0800f45d 	.word	0x0800f45d
 800f440:	0800f4bb 	.word	0x0800f4bb
 800f444:	0800f4cd 	.word	0x0800f4cd
 800f448:	0800f4cd 	.word	0x0800f4cd
 800f44c:	0800f4cd 	.word	0x0800f4cd
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800f450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f000 f841 	bl	800f4dc <lcp_rprotrej>
	break;
 800f45a:	e03a      	b.n	800f4d2 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	7c1b      	ldrb	r3, [r3, #16]
 800f460:	2b09      	cmp	r3, #9
 800f462:	d135      	bne.n	800f4d0 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	617a      	str	r2, [r7, #20]
 800f46e:	69ba      	ldr	r2, [r7, #24]
 800f470:	6892      	ldr	r2, [r2, #8]
 800f472:	0e12      	lsrs	r2, r2, #24
 800f474:	b2d2      	uxtb	r2, r2
 800f476:	701a      	strb	r2, [r3, #0]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	617a      	str	r2, [r7, #20]
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	6892      	ldr	r2, [r2, #8]
 800f482:	0c12      	lsrs	r2, r2, #16
 800f484:	b2d2      	uxtb	r2, r2
 800f486:	701a      	strb	r2, [r3, #0]
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	1c5a      	adds	r2, r3, #1
 800f48c:	617a      	str	r2, [r7, #20]
 800f48e:	69ba      	ldr	r2, [r7, #24]
 800f490:	6892      	ldr	r2, [r2, #8]
 800f492:	0a12      	lsrs	r2, r2, #8
 800f494:	b2d2      	uxtb	r2, r2
 800f496:	701a      	strb	r2, [r3, #0]
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	1c5a      	adds	r2, r3, #1
 800f49c:	617a      	str	r2, [r7, #20]
 800f49e:	69ba      	ldr	r2, [r7, #24]
 800f4a0:	6892      	ldr	r2, [r2, #8]
 800f4a2:	b2d2      	uxtb	r2, r2
 800f4a4:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	210a      	movs	r1, #10
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7fe fb8c 	bl	800dbd0 <fsm_sdata>
	break;
 800f4b8:	e00b      	b.n	800f4d2 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f001 fe6a 	bl	801119a <lcp_received_echo_reply>
	break;
 800f4c6:	e004      	b.n	800f4d2 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	e003      	b.n	800f4d4 <lcp_extcode+0xc4>
	break;
 800f4cc:	bf00      	nop
 800f4ce:	e000      	b.n	800f4d2 <lcp_extcode+0xc2>
	    break;
 800f4d0:	bf00      	nop
    }
    return 1;
 800f4d2:	2301      	movs	r3, #1
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3720      	adds	r7, #32
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	dd2d      	ble.n	800f54a <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	60ba      	str	r2, [r7, #8]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	021b      	lsls	r3, r3, #8
 800f4fa:	837b      	strh	r3, [r7, #26]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	60ba      	str	r2, [r7, #8]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	b29a      	uxth	r2, r3
 800f506:	8b7b      	ldrh	r3, [r7, #26]
 800f508:	4313      	orrs	r3, r2
 800f50a:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	7c1b      	ldrb	r3, [r3, #16]
 800f510:	2b09      	cmp	r3, #9
 800f512:	d11c      	bne.n	800f54e <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800f514:	2300      	movs	r3, #0
 800f516:	61fb      	str	r3, [r7, #28]
 800f518:	e00e      	b.n	800f538 <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	8b7a      	ldrh	r2, [r7, #26]
 800f520:	429a      	cmp	r2, r3
 800f522:	d106      	bne.n	800f532 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	6812      	ldr	r2, [r2, #0]
 800f52c:	4610      	mov	r0, r2
 800f52e:	4798      	blx	r3
	    return;
 800f530:	e00e      	b.n	800f550 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	3301      	adds	r3, #1
 800f536:	61fb      	str	r3, [r7, #28]
 800f538:	4a07      	ldr	r2, [pc, #28]	; (800f558 <lcp_rprotrej+0x7c>)
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f540:	617b      	str	r3, [r7, #20]
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1e8      	bne.n	800f51a <lcp_rprotrej+0x3e>
 800f548:	e002      	b.n	800f550 <lcp_rprotrej+0x74>
	return;
 800f54a:	bf00      	nop
 800f54c:	e000      	b.n	800f550 <lcp_rprotrej+0x74>
	return;
 800f54e:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800f550:	3720      	adds	r7, #32
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	08017268 	.word	0x08017268

0800f55c <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	3344      	adds	r3, #68	; 0x44
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe f9f5 	bl	800d958 <fsm_protreject>
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800f576:	b580      	push	{r7, lr}
 800f578:	b088      	sub	sp, #32
 800f57a:	af02      	add	r7, sp, #8
 800f57c:	60f8      	str	r0, [r7, #12]
 800f57e:	60b9      	str	r1, [r7, #8]
 800f580:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3344      	adds	r3, #68	; 0x44
 800f586:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	7c9b      	ldrb	r3, [r3, #18]
 800f58c:	3301      	adds	r3, #1
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	749a      	strb	r2, [r3, #18]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	7c9a      	ldrb	r2, [r3, #18]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2108      	movs	r1, #8
 800f5a0:	6978      	ldr	r0, [r7, #20]
 800f5a2:	f7fe fb15 	bl	800dbd0 <fsm_sdata>
	      p, len);
}
 800f5a6:	bf00      	nop
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 800f5ae:	b5b0      	push	{r4, r5, r7, lr}
 800f5b0:	b086      	sub	sp, #24
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	3360      	adds	r3, #96	; 0x60
 800f5c0:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	3384      	adds	r3, #132	; 0x84
 800f5c6:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	33a8      	adds	r3, #168	; 0xa8
 800f5cc:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d010      	beq.n	800f5f8 <lcp_resetci+0x4a>
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00c      	beq.n	800f5f8 <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00a      	beq.n	800f602 <lcp_resetci+0x54>
        ao->neg_upap = 0;
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	7813      	ldrb	r3, [r2, #0]
 800f5f0:	f36f 1304 	bfc	r3, #4, #1
 800f5f4:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 800f5f6:	e004      	b.n	800f602 <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	7813      	ldrb	r3, [r2, #0]
 800f5fc:	f36f 1304 	bfc	r3, #4, #1
 800f600:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 800f602:	f001 fed5 	bl	80113b0 <magic>
 800f606:	4602      	mov	r2, r0
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	2200      	movs	r2, #0
 800f610:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	4614      	mov	r4, r2
 800f618:	461d      	mov	r5, r3
 800f61a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f61c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f61e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f622:	682b      	ldr	r3, [r5, #0]
 800f624:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	7853      	ldrb	r3, [r2, #1]
 800f62a:	f36f 0341 	bfc	r3, #1, #1
 800f62e:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	7853      	ldrb	r3, [r2, #1]
 800f634:	f36f 0382 	bfc	r3, #2, #1
 800f638:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	f003 0310 	and.w	r3, r3, #16
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	7853      	ldrb	r3, [r2, #1]
 800f64c:	f36f 0382 	bfc	r3, #2, #1
 800f650:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f658:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 800f65c:	bf00      	nop
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bdb0      	pop	{r4, r5, r7, pc}

0800f664 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3384      	adds	r3, #132	; 0x84
 800f676:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	f003 0304 	and.w	r3, r3, #4
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d007      	beq.n	800f696 <lcp_cilen+0x32>
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	885b      	ldrh	r3, [r3, #2]
 800f68a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f68e:	4293      	cmp	r3, r2
 800f690:	d001      	beq.n	800f696 <lcp_cilen+0x32>
 800f692:	2204      	movs	r2, #4
 800f694:	e000      	b.n	800f698 <lcp_cilen+0x34>
 800f696:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f003 0308 	and.w	r3, r3, #8
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d006      	beq.n	800f6b4 <lcp_cilen+0x50>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ae:	d001      	beq.n	800f6b4 <lcp_cilen+0x50>
 800f6b0:	2306      	movs	r3, #6
 800f6b2:	e000      	b.n	800f6b6 <lcp_cilen+0x52>
 800f6b4:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800f6b6:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	f003 0310 	and.w	r3, r3, #16
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <lcp_cilen+0x66>
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	e000      	b.n	800f6cc <lcp_cilen+0x68>
 800f6ca:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800f6cc:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	785b      	ldrb	r3, [r3, #1]
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	b2db      	uxtb	r3, r3
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <lcp_cilen+0x7c>
 800f6dc:	2303      	movs	r3, #3
 800f6de:	e000      	b.n	800f6e2 <lcp_cilen+0x7e>
 800f6e0:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 800f6e2:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	f003 0320 	and.w	r3, r3, #32
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d001      	beq.n	800f6f6 <lcp_cilen+0x92>
 800f6f2:	2306      	movs	r3, #6
 800f6f4:	e000      	b.n	800f6f8 <lcp_cilen+0x94>
 800f6f6:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 800f6f8:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d001      	beq.n	800f70c <lcp_cilen+0xa8>
 800f708:	2302      	movs	r3, #2
 800f70a:	e000      	b.n	800f70e <lcp_cilen+0xaa>
 800f70c:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 800f70e:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <lcp_cilen+0xbe>
 800f71e:	2302      	movs	r3, #2
 800f720:	e000      	b.n	800f724 <lcp_cilen+0xc0>
 800f722:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 800f724:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	785b      	ldrb	r3, [r3, #1]
 800f72a:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 800f72e:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	785b      	ldrb	r3, [r3, #1]
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d003      	beq.n	800f746 <lcp_cilen+0xe2>
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	7b9b      	ldrb	r3, [r3, #14]
 800f742:	3303      	adds	r3, #3
 800f744:	e000      	b.n	800f748 <lcp_cilen+0xe4>
 800f746:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 800f748:	4413      	add	r3, r2
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800f756:	b480      	push	{r7}
 800f758:	b089      	sub	sp, #36	; 0x24
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	60f8      	str	r0, [r7, #12]
 800f75e:	60b9      	str	r1, [r7, #8]
 800f760:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	3384      	adds	r3, #132	; 0x84
 800f76c:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	f003 0304 	and.w	r3, r3, #4
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d01f      	beq.n	800f7c0 <lcp_addci+0x6a>
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	885b      	ldrh	r3, [r3, #2]
 800f784:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f788:	4293      	cmp	r3, r2
 800f78a:	d019      	beq.n	800f7c0 <lcp_addci+0x6a>
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	60ba      	str	r2, [r7, #8]
 800f792:	2201      	movs	r2, #1
 800f794:	701a      	strb	r2, [r3, #0]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	60ba      	str	r2, [r7, #8]
 800f79c:	2204      	movs	r2, #4
 800f79e:	701a      	strb	r2, [r3, #0]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	60ba      	str	r2, [r7, #8]
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	8852      	ldrh	r2, [r2, #2]
 800f7aa:	0a12      	lsrs	r2, r2, #8
 800f7ac:	b292      	uxth	r2, r2
 800f7ae:	b2d2      	uxtb	r2, r2
 800f7b0:	701a      	strb	r2, [r3, #0]
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	60ba      	str	r2, [r7, #8]
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	8852      	ldrh	r2, [r2, #2]
 800f7bc:	b2d2      	uxtb	r2, r2
 800f7be:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f003 0308 	and.w	r3, r3, #8
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d02d      	beq.n	800f82a <lcp_addci+0xd4>
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d6:	d028      	beq.n	800f82a <lcp_addci+0xd4>
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	1c5a      	adds	r2, r3, #1
 800f7dc:	60ba      	str	r2, [r7, #8]
 800f7de:	2202      	movs	r2, #2
 800f7e0:	701a      	strb	r2, [r3, #0]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	60ba      	str	r2, [r7, #8]
 800f7e8:	2206      	movs	r2, #6
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	1c5a      	adds	r2, r3, #1
 800f7f0:	60ba      	str	r2, [r7, #8]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	6852      	ldr	r2, [r2, #4]
 800f7f6:	0e12      	lsrs	r2, r2, #24
 800f7f8:	b2d2      	uxtb	r2, r2
 800f7fa:	701a      	strb	r2, [r3, #0]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	60ba      	str	r2, [r7, #8]
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	6852      	ldr	r2, [r2, #4]
 800f806:	0c12      	lsrs	r2, r2, #16
 800f808:	b2d2      	uxtb	r2, r2
 800f80a:	701a      	strb	r2, [r3, #0]
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	1c5a      	adds	r2, r3, #1
 800f810:	60ba      	str	r2, [r7, #8]
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	6852      	ldr	r2, [r2, #4]
 800f816:	0a12      	lsrs	r2, r2, #8
 800f818:	b2d2      	uxtb	r2, r2
 800f81a:	701a      	strb	r2, [r3, #0]
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	60ba      	str	r2, [r7, #8]
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	6852      	ldr	r2, [r2, #4]
 800f826:	b2d2      	uxtb	r2, r2
 800f828:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f003 0310 	and.w	r3, r3, #16
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b00      	cmp	r3, #0
 800f836:	d013      	beq.n	800f860 <lcp_addci+0x10a>
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	60ba      	str	r2, [r7, #8]
 800f83e:	2203      	movs	r2, #3
 800f840:	701a      	strb	r2, [r3, #0]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	60ba      	str	r2, [r7, #8]
 800f848:	2204      	movs	r2, #4
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	60ba      	str	r2, [r7, #8]
 800f852:	22c0      	movs	r2, #192	; 0xc0
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	60ba      	str	r2, [r7, #8]
 800f85c:	2223      	movs	r2, #35	; 0x23
 800f85e:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	785b      	ldrb	r3, [r3, #1]
 800f864:	f003 0301 	and.w	r3, r3, #1
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d00e      	beq.n	800f88c <lcp_addci+0x136>
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	60ba      	str	r2, [r7, #8]
 800f874:	220d      	movs	r2, #13
 800f876:	701a      	strb	r2, [r3, #0]
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	60ba      	str	r2, [r7, #8]
 800f87e:	2203      	movs	r2, #3
 800f880:	701a      	strb	r2, [r3, #0]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	60ba      	str	r2, [r7, #8]
 800f888:	2206      	movs	r2, #6
 800f88a:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	f003 0320 	and.w	r3, r3, #32
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	d028      	beq.n	800f8ec <lcp_addci+0x196>
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	60ba      	str	r2, [r7, #8]
 800f8a0:	2205      	movs	r2, #5
 800f8a2:	701a      	strb	r2, [r3, #0]
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	60ba      	str	r2, [r7, #8]
 800f8aa:	2206      	movs	r2, #6
 800f8ac:	701a      	strb	r2, [r3, #0]
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	1c5a      	adds	r2, r3, #1
 800f8b2:	60ba      	str	r2, [r7, #8]
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	6892      	ldr	r2, [r2, #8]
 800f8b8:	0e12      	lsrs	r2, r2, #24
 800f8ba:	b2d2      	uxtb	r2, r2
 800f8bc:	701a      	strb	r2, [r3, #0]
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	1c5a      	adds	r2, r3, #1
 800f8c2:	60ba      	str	r2, [r7, #8]
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	6892      	ldr	r2, [r2, #8]
 800f8c8:	0c12      	lsrs	r2, r2, #16
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	1c5a      	adds	r2, r3, #1
 800f8d2:	60ba      	str	r2, [r7, #8]
 800f8d4:	697a      	ldr	r2, [r7, #20]
 800f8d6:	6892      	ldr	r2, [r2, #8]
 800f8d8:	0a12      	lsrs	r2, r2, #8
 800f8da:	b2d2      	uxtb	r2, r2
 800f8dc:	701a      	strb	r2, [r3, #0]
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	60ba      	str	r2, [r7, #8]
 800f8e4:	697a      	ldr	r2, [r7, #20]
 800f8e6:	6892      	ldr	r2, [r2, #8]
 800f8e8:	b2d2      	uxtb	r2, r2
 800f8ea:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d009      	beq.n	800f90e <lcp_addci+0x1b8>
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	60ba      	str	r2, [r7, #8]
 800f900:	2207      	movs	r2, #7
 800f902:	701a      	strb	r2, [r3, #0]
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	60ba      	str	r2, [r7, #8]
 800f90a:	2202      	movs	r2, #2
 800f90c:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d009      	beq.n	800f930 <lcp_addci+0x1da>
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	60ba      	str	r2, [r7, #8]
 800f922:	2208      	movs	r2, #8
 800f924:	701a      	strb	r2, [r3, #0]
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	1c5a      	adds	r2, r3, #1
 800f92a:	60ba      	str	r2, [r7, #8]
 800f92c:	2202      	movs	r2, #2
 800f92e:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	785b      	ldrb	r3, [r3, #1]
 800f934:	f003 0302 	and.w	r3, r3, #2
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d009      	beq.n	800f952 <lcp_addci+0x1fc>
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	1c5a      	adds	r2, r3, #1
 800f942:	60ba      	str	r2, [r7, #8]
 800f944:	2212      	movs	r2, #18
 800f946:	701a      	strb	r2, [r3, #0]
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	1c5a      	adds	r2, r3, #1
 800f94c:	60ba      	str	r2, [r7, #8]
 800f94e:	2202      	movs	r2, #2
 800f950:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	785b      	ldrb	r3, [r3, #1]
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d027      	beq.n	800f9b0 <lcp_addci+0x25a>
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	60ba      	str	r2, [r7, #8]
 800f966:	2213      	movs	r2, #19
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	1c5a      	adds	r2, r3, #1
 800f96e:	60ba      	str	r2, [r7, #8]
 800f970:	697a      	ldr	r2, [r7, #20]
 800f972:	7b92      	ldrb	r2, [r2, #14]
 800f974:	3203      	adds	r2, #3
 800f976:	b2d2      	uxtb	r2, r2
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	1c5a      	adds	r2, r3, #1
 800f97e:	60ba      	str	r2, [r7, #8]
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	7b52      	ldrb	r2, [r2, #13]
 800f984:	701a      	strb	r2, [r3, #0]
 800f986:	2300      	movs	r3, #0
 800f988:	61fb      	str	r3, [r7, #28]
 800f98a:	e00b      	b.n	800f9a4 <lcp_addci+0x24e>
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	60ba      	str	r2, [r7, #8]
 800f992:	6979      	ldr	r1, [r7, #20]
 800f994:	69fa      	ldr	r2, [r7, #28]
 800f996:	440a      	add	r2, r1
 800f998:	320f      	adds	r2, #15
 800f99a:	7812      	ldrb	r2, [r2, #0]
 800f99c:	701a      	strb	r2, [r3, #0]
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	61fb      	str	r3, [r7, #28]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	7b9b      	ldrb	r3, [r3, #14]
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	dced      	bgt.n	800f98c <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 800f9b0:	bf00      	nop
 800f9b2:	3724      	adds	r7, #36	; 0x24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 800f9bc:	b480      	push	{r7}
 800f9be:	b08b      	sub	sp, #44	; 0x2c
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	3384      	adds	r3, #132	; 0x84
 800f9d2:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f003 0304 	and.w	r3, r3, #4
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d033      	beq.n	800fa4a <lcp_ackci+0x8e>
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	885b      	ldrh	r3, [r3, #2]
 800f9e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d02d      	beq.n	800fa4a <lcp_ackci+0x8e>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3b04      	subs	r3, #4
 800f9f2:	607b      	str	r3, [r7, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f2c0 81c6 	blt.w	800fd88 <lcp_ackci+0x3cc>
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	1c5a      	adds	r2, r3, #1
 800fa00:	60ba      	str	r2, [r7, #8]
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	76fb      	strb	r3, [r7, #27]
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	60ba      	str	r2, [r7, #8]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	76bb      	strb	r3, [r7, #26]
 800fa10:	7ebb      	ldrb	r3, [r7, #26]
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	f040 81d9 	bne.w	800fdca <lcp_ackci+0x40e>
 800fa18:	7efb      	ldrb	r3, [r7, #27]
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	f040 81d5 	bne.w	800fdca <lcp_ackci+0x40e>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	1c5a      	adds	r2, r3, #1
 800fa24:	60ba      	str	r2, [r7, #8]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	021b      	lsls	r3, r3, #8
 800fa2c:	833b      	strh	r3, [r7, #24]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	1c5a      	adds	r2, r3, #1
 800fa32:	60ba      	str	r2, [r7, #8]
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	8b3b      	ldrh	r3, [r7, #24]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	833b      	strh	r3, [r7, #24]
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	885b      	ldrh	r3, [r3, #2]
 800fa42:	8b3a      	ldrh	r2, [r7, #24]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f040 81a1 	bne.w	800fd8c <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	f003 0308 	and.w	r3, r3, #8
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d047      	beq.n	800fae8 <lcp_ackci+0x12c>
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa60:	d042      	beq.n	800fae8 <lcp_ackci+0x12c>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3b06      	subs	r3, #6
 800fa66:	607b      	str	r3, [r7, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f2c0 8190 	blt.w	800fd90 <lcp_ackci+0x3d4>
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	1c5a      	adds	r2, r3, #1
 800fa74:	60ba      	str	r2, [r7, #8]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	76fb      	strb	r3, [r7, #27]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	1c5a      	adds	r2, r3, #1
 800fa7e:	60ba      	str	r2, [r7, #8]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	76bb      	strb	r3, [r7, #26]
 800fa84:	7ebb      	ldrb	r3, [r7, #26]
 800fa86:	2b06      	cmp	r3, #6
 800fa88:	f040 819f 	bne.w	800fdca <lcp_ackci+0x40e>
 800fa8c:	7efb      	ldrb	r3, [r7, #27]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	f040 819b 	bne.w	800fdca <lcp_ackci+0x40e>
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	1c5a      	adds	r2, r3, #1
 800fa98:	60ba      	str	r2, [r7, #8]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	021b      	lsls	r3, r3, #8
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	60ba      	str	r2, [r7, #8]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	4313      	orrs	r3, r2
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	1c5a      	adds	r2, r3, #1
 800faba:	60ba      	str	r2, [r7, #8]
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	617b      	str	r3, [r7, #20]
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	021b      	lsls	r3, r3, #8
 800faca:	617b      	str	r3, [r7, #20]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	60ba      	str	r2, [r7, #8]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	461a      	mov	r2, r3
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	4313      	orrs	r3, r2
 800fada:	617b      	str	r3, [r7, #20]
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	685a      	ldr	r2, [r3, #4]
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	f040 8156 	bne.w	800fd94 <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f003 0310 	and.w	r3, r3, #16
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d02d      	beq.n	800fb52 <lcp_ackci+0x196>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	3b04      	subs	r3, #4
 800fafa:	607b      	str	r3, [r7, #4]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f2c0 814a 	blt.w	800fd98 <lcp_ackci+0x3dc>
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	60ba      	str	r2, [r7, #8]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	76fb      	strb	r3, [r7, #27]
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	1c5a      	adds	r2, r3, #1
 800fb12:	60ba      	str	r2, [r7, #8]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	76bb      	strb	r3, [r7, #26]
 800fb18:	7ebb      	ldrb	r3, [r7, #26]
 800fb1a:	2b04      	cmp	r3, #4
 800fb1c:	f040 8155 	bne.w	800fdca <lcp_ackci+0x40e>
 800fb20:	7efb      	ldrb	r3, [r7, #27]
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	f040 8151 	bne.w	800fdca <lcp_ackci+0x40e>
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	1c5a      	adds	r2, r3, #1
 800fb2c:	60ba      	str	r2, [r7, #8]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	021b      	lsls	r3, r3, #8
 800fb34:	833b      	strh	r3, [r7, #24]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	60ba      	str	r2, [r7, #8]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	8b3b      	ldrh	r3, [r7, #24]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	833b      	strh	r3, [r7, #24]
 800fb46:	8b3b      	ldrh	r3, [r7, #24]
 800fb48:	f24c 0223 	movw	r2, #49187	; 0xc023
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	f040 8125 	bne.w	800fd9c <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d021      	beq.n	800fba4 <lcp_ackci+0x1e8>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	3b03      	subs	r3, #3
 800fb64:	607b      	str	r3, [r7, #4]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f2c0 8119 	blt.w	800fda0 <lcp_ackci+0x3e4>
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	1c5a      	adds	r2, r3, #1
 800fb72:	60ba      	str	r2, [r7, #8]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	76fb      	strb	r3, [r7, #27]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	60ba      	str	r2, [r7, #8]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	76bb      	strb	r3, [r7, #26]
 800fb82:	7ebb      	ldrb	r3, [r7, #26]
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	f040 8120 	bne.w	800fdca <lcp_ackci+0x40e>
 800fb8a:	7efb      	ldrb	r3, [r7, #27]
 800fb8c:	2b0d      	cmp	r3, #13
 800fb8e:	f040 811c 	bne.w	800fdca <lcp_ackci+0x40e>
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	1c5a      	adds	r2, r3, #1
 800fb96:	60ba      	str	r2, [r7, #8]
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	74fb      	strb	r3, [r7, #19]
 800fb9c:	7cfb      	ldrb	r3, [r7, #19]
 800fb9e:	2b06      	cmp	r3, #6
 800fba0:	f040 8100 	bne.w	800fda4 <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	f003 0320 	and.w	r3, r3, #32
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d042      	beq.n	800fc38 <lcp_ackci+0x27c>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3b06      	subs	r3, #6
 800fbb6:	607b      	str	r3, [r7, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f2c0 80f4 	blt.w	800fda8 <lcp_ackci+0x3ec>
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	60ba      	str	r2, [r7, #8]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	76fb      	strb	r3, [r7, #27]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	1c5a      	adds	r2, r3, #1
 800fbce:	60ba      	str	r2, [r7, #8]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	76bb      	strb	r3, [r7, #26]
 800fbd4:	7ebb      	ldrb	r3, [r7, #26]
 800fbd6:	2b06      	cmp	r3, #6
 800fbd8:	f040 80f7 	bne.w	800fdca <lcp_ackci+0x40e>
 800fbdc:	7efb      	ldrb	r3, [r7, #27]
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	f040 80f3 	bne.w	800fdca <lcp_ackci+0x40e>
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	60ba      	str	r2, [r7, #8]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	021b      	lsls	r3, r3, #8
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	60ba      	str	r2, [r7, #8]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	617b      	str	r3, [r7, #20]
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	021b      	lsls	r3, r3, #8
 800fc04:	617b      	str	r3, [r7, #20]
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	60ba      	str	r2, [r7, #8]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	021b      	lsls	r3, r3, #8
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	1c5a      	adds	r2, r3, #1
 800fc20:	60ba      	str	r2, [r7, #8]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	461a      	mov	r2, r3
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	617b      	str	r3, [r7, #20]
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	689a      	ldr	r2, [r3, #8]
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	f040 80ba 	bne.w	800fdac <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d018      	beq.n	800fc78 <lcp_ackci+0x2bc>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	3b02      	subs	r3, #2
 800fc4a:	607b      	str	r3, [r7, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f2c0 80ae 	blt.w	800fdb0 <lcp_ackci+0x3f4>
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	60ba      	str	r2, [r7, #8]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	76fb      	strb	r3, [r7, #27]
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	1c5a      	adds	r2, r3, #1
 800fc62:	60ba      	str	r2, [r7, #8]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	76bb      	strb	r3, [r7, #26]
 800fc68:	7ebb      	ldrb	r3, [r7, #26]
 800fc6a:	2b02      	cmp	r3, #2
 800fc6c:	f040 80ad 	bne.w	800fdca <lcp_ackci+0x40e>
 800fc70:	7efb      	ldrb	r3, [r7, #27]
 800fc72:	2b07      	cmp	r3, #7
 800fc74:	f040 80a9 	bne.w	800fdca <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d018      	beq.n	800fcb8 <lcp_ackci+0x2fc>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	3b02      	subs	r3, #2
 800fc8a:	607b      	str	r3, [r7, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f2c0 8090 	blt.w	800fdb4 <lcp_ackci+0x3f8>
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	60ba      	str	r2, [r7, #8]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	76fb      	strb	r3, [r7, #27]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	60ba      	str	r2, [r7, #8]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	76bb      	strb	r3, [r7, #26]
 800fca8:	7ebb      	ldrb	r3, [r7, #26]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	f040 808d 	bne.w	800fdca <lcp_ackci+0x40e>
 800fcb0:	7efb      	ldrb	r3, [r7, #27]
 800fcb2:	2b08      	cmp	r3, #8
 800fcb4:	f040 8089 	bne.w	800fdca <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	785b      	ldrb	r3, [r3, #1]
 800fcbc:	f003 0302 	and.w	r3, r3, #2
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d015      	beq.n	800fcf2 <lcp_ackci+0x336>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3b02      	subs	r3, #2
 800fcca:	607b      	str	r3, [r7, #4]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	db72      	blt.n	800fdb8 <lcp_ackci+0x3fc>
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	1c5a      	adds	r2, r3, #1
 800fcd6:	60ba      	str	r2, [r7, #8]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	76fb      	strb	r3, [r7, #27]
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	60ba      	str	r2, [r7, #8]
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	76bb      	strb	r3, [r7, #26]
 800fce6:	7ebb      	ldrb	r3, [r7, #26]
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d16e      	bne.n	800fdca <lcp_ackci+0x40e>
 800fcec:	7efb      	ldrb	r3, [r7, #27]
 800fcee:	2b12      	cmp	r3, #18
 800fcf0:	d16b      	bne.n	800fdca <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	785b      	ldrb	r3, [r3, #1]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d03e      	beq.n	800fd7e <lcp_ackci+0x3c2>
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	7b9b      	ldrb	r3, [r3, #14]
 800fd04:	3303      	adds	r3, #3
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	607b      	str	r3, [r7, #4]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	db54      	blt.n	800fdbc <lcp_ackci+0x400>
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	60ba      	str	r2, [r7, #8]
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	76fb      	strb	r3, [r7, #27]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	60ba      	str	r2, [r7, #8]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	76bb      	strb	r3, [r7, #26]
 800fd26:	7eba      	ldrb	r2, [r7, #26]
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	7b9b      	ldrb	r3, [r3, #14]
 800fd2c:	3303      	adds	r3, #3
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d14b      	bne.n	800fdca <lcp_ackci+0x40e>
 800fd32:	7efb      	ldrb	r3, [r7, #27]
 800fd34:	2b13      	cmp	r3, #19
 800fd36:	d148      	bne.n	800fdca <lcp_ackci+0x40e>
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	60ba      	str	r2, [r7, #8]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	74fb      	strb	r3, [r7, #19]
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	7b5b      	ldrb	r3, [r3, #13]
 800fd46:	7cfa      	ldrb	r2, [r7, #19]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d139      	bne.n	800fdc0 <lcp_ackci+0x404>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	627b      	str	r3, [r7, #36]	; 0x24
 800fd50:	e00f      	b.n	800fd72 <lcp_ackci+0x3b6>
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	1c5a      	adds	r2, r3, #1
 800fd56:	60ba      	str	r2, [r7, #8]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	74fb      	strb	r3, [r7, #19]
 800fd5c:	69fa      	ldr	r2, [r7, #28]
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	4413      	add	r3, r2
 800fd62:	330f      	adds	r3, #15
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	7cfa      	ldrb	r2, [r7, #19]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d12b      	bne.n	800fdc4 <lcp_ackci+0x408>
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	3301      	adds	r3, #1
 800fd70:	627b      	str	r3, [r7, #36]	; 0x24
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	7b9b      	ldrb	r3, [r3, #14]
 800fd76:	461a      	mov	r2, r3
 800fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	dce9      	bgt.n	800fd52 <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d121      	bne.n	800fdc8 <lcp_ackci+0x40c>
	goto bad;
    return (1);
 800fd84:	2301      	movs	r3, #1
 800fd86:	e021      	b.n	800fdcc <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800fd88:	bf00      	nop
 800fd8a:	e01e      	b.n	800fdca <lcp_ackci+0x40e>
 800fd8c:	bf00      	nop
 800fd8e:	e01c      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800fd90:	bf00      	nop
 800fd92:	e01a      	b.n	800fdca <lcp_ackci+0x40e>
 800fd94:	bf00      	nop
 800fd96:	e018      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800fd98:	bf00      	nop
 800fd9a:	e016      	b.n	800fdca <lcp_ackci+0x40e>
 800fd9c:	bf00      	nop
 800fd9e:	e014      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800fda0:	bf00      	nop
 800fda2:	e012      	b.n	800fdca <lcp_ackci+0x40e>
 800fda4:	bf00      	nop
 800fda6:	e010      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800fda8:	bf00      	nop
 800fdaa:	e00e      	b.n	800fdca <lcp_ackci+0x40e>
 800fdac:	bf00      	nop
 800fdae:	e00c      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800fdb0:	bf00      	nop
 800fdb2:	e00a      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800fdb4:	bf00      	nop
 800fdb6:	e008      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800fdb8:	bf00      	nop
 800fdba:	e006      	b.n	800fdca <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800fdbc:	bf00      	nop
 800fdbe:	e004      	b.n	800fdca <lcp_ackci+0x40e>
 800fdc0:	bf00      	nop
 800fdc2:	e002      	b.n	800fdca <lcp_ackci+0x40e>
 800fdc4:	bf00      	nop
 800fdc6:	e000      	b.n	800fdca <lcp_ackci+0x40e>
	goto bad;
 800fdc8:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	372c      	adds	r7, #44	; 0x2c
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800fdd8:	b5b0      	push	{r4, r5, r7, lr}
 800fdda:	b0a0      	sub	sp, #128	; 0x80
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 800fdec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdee:	3384      	adds	r3, #132	; 0x84
 800fdf0:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fdf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdf4:	3360      	adds	r3, #96	; 0x60
 800fdf6:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 800fdfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe00:	2224      	movs	r2, #36	; 0x24
 800fe02:	2100      	movs	r1, #0
 800fe04:	4618      	mov	r0, r3
 800fe06:	f003 fb16 	bl	8013436 <memset>
    try_ = *go;
 800fe0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe0c:	f107 0414 	add.w	r4, r7, #20
 800fe10:	461d      	mov	r5, r3
 800fe12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 800fe1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	f003 0304 	and.w	r3, r3, #4
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d045      	beq.n	800feb8 <lcp_nakci+0xe0>
 800fe2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe2e:	885b      	ldrh	r3, [r3, #2]
 800fe30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d03f      	beq.n	800feb8 <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 800fe38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	f003 0304 	and.w	r3, r3, #4
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d038      	beq.n	800feb8 <lcp_nakci+0xe0>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b03      	cmp	r3, #3
 800fe4a:	dd35      	ble.n	800feb8 <lcp_nakci+0xe0>
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2b04      	cmp	r3, #4
 800fe54:	d130      	bne.n	800feb8 <lcp_nakci+0xe0>
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d12c      	bne.n	800feb8 <lcp_nakci+0xe0>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	3b04      	subs	r3, #4
 800fe62:	607b      	str	r3, [r7, #4]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	3302      	adds	r3, #2
 800fe68:	60bb      	str	r3, [r7, #8]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	1c5a      	adds	r2, r3, #1
 800fe6e:	60ba      	str	r2, [r7, #8]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	021b      	lsls	r3, r3, #8
 800fe76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	60ba      	str	r2, [r7, #8]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800fe8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe92:	f043 0304 	orr.w	r3, r3, #4
 800fe96:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800fe9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe9c:	885b      	ldrh	r3, [r3, #2]
 800fe9e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d905      	bls.n	800feb2 <lcp_nakci+0xda>
 800fea6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800feaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800feae:	4293      	cmp	r3, r2
 800feb0:	d802      	bhi.n	800feb8 <lcp_nakci+0xe0>
 800feb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800feb6:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 800feb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 0308 	and.w	r3, r3, #8
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d04c      	beq.n	800ff60 <lcp_nakci+0x188>
 800fec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fece:	d047      	beq.n	800ff60 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 800fed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0308 	and.w	r3, r3, #8
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d040      	beq.n	800ff60 <lcp_nakci+0x188>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b05      	cmp	r3, #5
 800fee2:	dd3d      	ble.n	800ff60 <lcp_nakci+0x188>
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	3301      	adds	r3, #1
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	2b06      	cmp	r3, #6
 800feec:	d138      	bne.n	800ff60 <lcp_nakci+0x188>
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d134      	bne.n	800ff60 <lcp_nakci+0x188>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	3b06      	subs	r3, #6
 800fefa:	607b      	str	r3, [r7, #4]
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	3302      	adds	r3, #2
 800ff00:	60bb      	str	r3, [r7, #8]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	1c5a      	adds	r2, r3, #1
 800ff06:	60ba      	str	r2, [r7, #8]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	021b      	lsls	r3, r3, #8
 800ff0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	60ba      	str	r2, [r7, #8]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff20:	021b      	lsls	r3, r3, #8
 800ff22:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	60ba      	str	r2, [r7, #8]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff30:	4313      	orrs	r3, r2
 800ff32:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	1c5a      	adds	r2, r3, #1
 800ff3e:	60ba      	str	r2, [r7, #8]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff46:	4313      	orrs	r3, r2
 800ff48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ff4e:	f043 0308 	orr.w	r3, r3, #8
 800ff52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800ff56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 800ff60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	b2db      	uxtb	r3, r3
    if ((0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d04d      	beq.n	801000a <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b03      	cmp	r3, #3
 800ff72:	dd4a      	ble.n	801000a <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d146      	bne.n	801000a <lcp_nakci+0x232>
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2b03      	cmp	r3, #3
 800ff84:	d941      	bls.n	801000a <lcp_nakci+0x232>
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	dc3a      	bgt.n	801000a <lcp_nakci+0x232>
	cilen = p[1];
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	3301      	adds	r3, #1
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 800ffa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ffb2:	f362 1304 	bfi	r3, r2, #4, #1
 800ffb6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	3302      	adds	r3, #2
 800ffbe:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	1c5a      	adds	r2, r3, #1
 800ffc4:	60ba      	str	r2, [r7, #8]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	021b      	lsls	r3, r3, #8
 800ffcc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	60ba      	str	r2, [r7, #8]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 800ffe4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ffe8:	f24c 0223 	movw	r2, #49187	; 0xc023
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d103      	bne.n	800fff8 <lcp_nakci+0x220>
 800fff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	f000 8265 	beq.w	80104c2 <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 800fff8:	7d3b      	ldrb	r3, [r7, #20]
 800fffa:	f36f 1304 	bfc	r3, #4, #1
 800fffe:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 8010000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010002:	3b04      	subs	r3, #4
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	4413      	add	r3, r2
 8010008:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 801000a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801000c:	785b      	ldrb	r3, [r3, #1]
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d021      	beq.n	801005c <lcp_nakci+0x284>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b02      	cmp	r3, #2
 801001c:	dd1e      	ble.n	801005c <lcp_nakci+0x284>
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	3301      	adds	r3, #1
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	2b03      	cmp	r3, #3
 8010026:	d119      	bne.n	801005c <lcp_nakci+0x284>
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	2b0d      	cmp	r3, #13
 801002e:	d115      	bne.n	801005c <lcp_nakci+0x284>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	3b03      	subs	r3, #3
 8010034:	607b      	str	r3, [r7, #4]
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	3302      	adds	r3, #2
 801003a:	60bb      	str	r3, [r7, #8]
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	60ba      	str	r2, [r7, #8]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8010048:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801004c:	f043 0301 	orr.w	r3, r3, #1
 8010050:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010054:	7d7b      	ldrb	r3, [r7, #21]
 8010056:	f36f 0300 	bfc	r3, #0, #1
 801005a:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 801005c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f003 0320 	and.w	r3, r3, #32
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d041      	beq.n	80100ee <lcp_nakci+0x316>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b05      	cmp	r3, #5
 801006e:	dd3e      	ble.n	80100ee <lcp_nakci+0x316>
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3301      	adds	r3, #1
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	2b06      	cmp	r3, #6
 8010078:	d139      	bne.n	80100ee <lcp_nakci+0x316>
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	2b05      	cmp	r3, #5
 8010080:	d135      	bne.n	80100ee <lcp_nakci+0x316>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	3b06      	subs	r3, #6
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	3302      	adds	r3, #2
 801008c:	60bb      	str	r3, [r7, #8]
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	60ba      	str	r2, [r7, #8]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	021b      	lsls	r3, r3, #8
 8010098:	66bb      	str	r3, [r7, #104]	; 0x68
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	1c5a      	adds	r2, r3, #1
 801009e:	60ba      	str	r2, [r7, #8]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100a6:	4313      	orrs	r3, r2
 80100a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80100aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	1c5a      	adds	r2, r3, #1
 80100b4:	60ba      	str	r2, [r7, #8]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100bc:	4313      	orrs	r3, r2
 80100be:	66bb      	str	r3, [r7, #104]	; 0x68
 80100c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100c2:	021b      	lsls	r3, r3, #8
 80100c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	1c5a      	adds	r2, r3, #1
 80100ca:	60ba      	str	r2, [r7, #8]
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100d2:	4313      	orrs	r3, r2
 80100d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80100d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80100da:	f043 0320 	orr.w	r3, r3, #32
 80100de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80100e2:	f001 f965 	bl	80113b0 <magic>
 80100e6:	4603      	mov	r3, r0
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	2301      	movs	r3, #1
 80100ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 80100ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01b      	beq.n	8010134 <lcp_nakci+0x35c>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	dd18      	ble.n	8010134 <lcp_nakci+0x35c>
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	3301      	adds	r3, #1
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	2b02      	cmp	r3, #2
 801010a:	d113      	bne.n	8010134 <lcp_nakci+0x35c>
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	2b07      	cmp	r3, #7
 8010112:	d10f      	bne.n	8010134 <lcp_nakci+0x35c>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3b02      	subs	r3, #2
 8010118:	607b      	str	r3, [r7, #4]
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	3302      	adds	r3, #2
 801011e:	60bb      	str	r3, [r7, #8]
 8010120:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010128:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 801012c:	7d3b      	ldrb	r3, [r7, #20]
 801012e:	f36f 1386 	bfc	r3, #6, #1
 8010132:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8010134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d01b      	beq.n	801017a <lcp_nakci+0x3a2>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2b01      	cmp	r3, #1
 8010146:	dd18      	ble.n	801017a <lcp_nakci+0x3a2>
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	3301      	adds	r3, #1
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b02      	cmp	r3, #2
 8010150:	d113      	bne.n	801017a <lcp_nakci+0x3a2>
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b08      	cmp	r3, #8
 8010158:	d10f      	bne.n	801017a <lcp_nakci+0x3a2>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3b02      	subs	r3, #2
 801015e:	607b      	str	r3, [r7, #4]
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	3302      	adds	r3, #2
 8010164:	60bb      	str	r3, [r7, #8]
 8010166:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801016a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010172:	7d3b      	ldrb	r3, [r7, #20]
 8010174:	f36f 13c7 	bfc	r3, #7, #1
 8010178:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 801017a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801017c:	785b      	ldrb	r3, [r3, #1]
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01b      	beq.n	80101c0 <lcp_nakci+0x3e8>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b01      	cmp	r3, #1
 801018c:	dd18      	ble.n	80101c0 <lcp_nakci+0x3e8>
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	3301      	adds	r3, #1
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b02      	cmp	r3, #2
 8010196:	d113      	bne.n	80101c0 <lcp_nakci+0x3e8>
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b12      	cmp	r3, #18
 801019e:	d10f      	bne.n	80101c0 <lcp_nakci+0x3e8>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	3b02      	subs	r3, #2
 80101a4:	607b      	str	r3, [r7, #4]
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	3302      	adds	r3, #2
 80101aa:	60bb      	str	r3, [r7, #8]
 80101ac:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80101b0:	f043 0302 	orr.w	r3, r3, #2
 80101b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80101b8:	7d7b      	ldrb	r3, [r7, #21]
 80101ba:	f36f 0341 	bfc	r3, #1, #1
 80101be:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 80101c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101c2:	785b      	ldrb	r3, [r3, #1]
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 8148 	beq.w	8010460 <lcp_nakci+0x688>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	f340 8144 	ble.w	8010460 <lcp_nakci+0x688>
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	2b13      	cmp	r3, #19
 80101de:	f040 813f 	bne.w	8010460 <lcp_nakci+0x688>
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	3301      	adds	r3, #1
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	2b02      	cmp	r3, #2
 80101ea:	f240 8139 	bls.w	8010460 <lcp_nakci+0x688>
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	3301      	adds	r3, #1
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	461a      	mov	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	f300 8131 	bgt.w	8010460 <lcp_nakci+0x688>
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	3301      	adds	r3, #1
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	461a      	mov	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	1a9b      	subs	r3, r3, r2
 801020a:	607b      	str	r3, [r7, #4]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	3301      	adds	r3, #1
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	461a      	mov	r2, r3
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	4413      	add	r3, r2
 8010218:	60bb      	str	r3, [r7, #8]
 801021a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801021e:	f043 0304 	orr.w	r3, r3, #4
 8010222:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010226:	7d7b      	ldrb	r3, [r7, #21]
 8010228:	f36f 0382 	bfc	r3, #2, #1
 801022c:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 801022e:	e117      	b.n	8010460 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	1c5a      	adds	r2, r3, #1
 8010234:	60ba      	str	r2, [r7, #8]
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	60ba      	str	r2, [r7, #8]
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8010246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010248:	2b01      	cmp	r3, #1
 801024a:	f340 813a 	ble.w	80104c2 <lcp_nakci+0x6ea>
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	607b      	str	r3, [r7, #4]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	f2c0 8132 	blt.w	80104c2 <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 801025e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010260:	3b02      	subs	r3, #2
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	4413      	add	r3, r2
 8010266:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 8010268:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 801026c:	3b01      	subs	r3, #1
 801026e:	2b12      	cmp	r3, #18
 8010270:	f200 80f1 	bhi.w	8010456 <lcp_nakci+0x67e>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <lcp_nakci+0x4a4>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	080102c9 	.word	0x080102c9
 8010280:	0801033f 	.word	0x0801033f
 8010284:	08010373 	.word	0x08010373
 8010288:	08010457 	.word	0x08010457
 801028c:	08010395 	.word	0x08010395
 8010290:	08010457 	.word	0x08010457
 8010294:	080103bf 	.word	0x080103bf
 8010298:	080103e3 	.word	0x080103e3
 801029c:	08010457 	.word	0x08010457
 80102a0:	08010457 	.word	0x08010457
 80102a4:	08010457 	.word	0x08010457
 80102a8:	08010457 	.word	0x08010457
 80102ac:	08010457 	.word	0x08010457
 80102b0:	08010457 	.word	0x08010457
 80102b4:	08010457 	.word	0x08010457
 80102b8:	08010457 	.word	0x08010457
 80102bc:	08010457 	.word	0x08010457
 80102c0:	08010407 	.word	0x08010407
 80102c4:	08010433 	.word	0x08010433
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 80102c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f003 0304 	and.w	r3, r3, #4
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d006      	beq.n	80102e4 <lcp_nakci+0x50c>
 80102d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102d8:	885b      	ldrh	r3, [r3, #2]
 80102da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80102de:	4293      	cmp	r3, r2
 80102e0:	f040 80ef 	bne.w	80104c2 <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 80102e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80102e8:	f003 0304 	and.w	r3, r3, #4
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f040 80e7 	bne.w	80104c2 <lcp_nakci+0x6ea>
 80102f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102f6:	2b04      	cmp	r3, #4
 80102f8:	f040 80e3 	bne.w	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	60ba      	str	r2, [r7, #8]
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	b29b      	uxth	r3, r3
 8010306:	021b      	lsls	r3, r3, #8
 8010308:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	60ba      	str	r2, [r7, #8]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	b29a      	uxth	r2, r3
 8010316:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801031a:	4313      	orrs	r3, r2
 801031c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 8010320:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010324:	f240 52db 	movw	r2, #1499	; 0x5db
 8010328:	4293      	cmp	r3, r2
 801032a:	f200 8096 	bhi.w	801045a <lcp_nakci+0x682>
		try_.neg_mru = 1;
 801032e:	7d3b      	ldrb	r3, [r7, #20]
 8010330:	f043 0304 	orr.w	r3, r3, #4
 8010334:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 8010336:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801033a:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 801033c:	e08d      	b.n	801045a <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 801033e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	f003 0308 	and.w	r3, r3, #8
 8010346:	b2db      	uxtb	r3, r3
 8010348:	2b00      	cmp	r3, #0
 801034a:	d005      	beq.n	8010358 <lcp_nakci+0x580>
 801034c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010354:	f040 80b5 	bne.w	80104c2 <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 8010358:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801035c:	f003 0308 	and.w	r3, r3, #8
 8010360:	b2db      	uxtb	r3, r3
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 80ad 	bne.w	80104c2 <lcp_nakci+0x6ea>
 8010368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801036a:	2b06      	cmp	r3, #6
 801036c:	f040 80a9 	bne.w	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010370:	e074      	b.n	801045c <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 8010372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f003 0310 	and.w	r3, r3, #16
 801037a:	b2db      	uxtb	r3, r3
	    if ((0
 801037c:	2b00      	cmp	r3, #0
 801037e:	f040 80a0 	bne.w	80104c2 <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 8010382:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010386:	f003 0310 	and.w	r3, r3, #16
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	f040 8098 	bne.w	80104c2 <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 8010392:	e063      	b.n	801045c <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 8010394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	f003 0320 	and.w	r3, r3, #32
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f040 808f 	bne.w	80104c2 <lcp_nakci+0x6ea>
 80103a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80103a8:	f003 0320 	and.w	r3, r3, #32
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f040 8087 	bne.w	80104c2 <lcp_nakci+0x6ea>
 80103b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103b6:	2b06      	cmp	r3, #6
 80103b8:	f040 8083 	bne.w	80104c2 <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 80103bc:	e04e      	b.n	801045c <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 80103be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d17a      	bne.n	80104c2 <lcp_nakci+0x6ea>
 80103cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80103d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d173      	bne.n	80104c2 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 80103da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d170      	bne.n	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 80103e0:	e03c      	b.n	801045c <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 80103e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d168      	bne.n	80104c2 <lcp_nakci+0x6ea>
 80103f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80103f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d161      	bne.n	80104c2 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 80103fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010400:	2b02      	cmp	r3, #2
 8010402:	d15e      	bne.n	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010404:	e02a      	b.n	801045c <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 8010406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010408:	785b      	ldrb	r3, [r3, #1]
 801040a:	f003 0302 	and.w	r3, r3, #2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d156      	bne.n	80104c2 <lcp_nakci+0x6ea>
 8010414:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010418:	f003 0302 	and.w	r3, r3, #2
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d14f      	bne.n	80104c2 <lcp_nakci+0x6ea>
 8010422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010424:	2b02      	cmp	r3, #2
 8010426:	d14c      	bne.n	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 8010428:	7d7b      	ldrb	r3, [r7, #21]
 801042a:	f043 0302 	orr.w	r3, r3, #2
 801042e:	757b      	strb	r3, [r7, #21]
	    break;
 8010430:	e014      	b.n	801045c <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 8010432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010434:	785b      	ldrb	r3, [r3, #1]
 8010436:	f003 0304 	and.w	r3, r3, #4
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d140      	bne.n	80104c2 <lcp_nakci+0x6ea>
 8010440:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010444:	f003 0304 	and.w	r3, r3, #4
 8010448:	b2db      	uxtb	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d139      	bne.n	80104c2 <lcp_nakci+0x6ea>
 801044e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010450:	2b02      	cmp	r3, #2
 8010452:	dd36      	ble.n	80104c2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010454:	e002      	b.n	801045c <lcp_nakci+0x684>
	default:
	    break;
 8010456:	bf00      	nop
 8010458:	e000      	b.n	801045c <lcp_nakci+0x684>
	    break;
 801045a:	bf00      	nop
	}
	p = next;
 801045c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801045e:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b01      	cmp	r3, #1
 8010464:	f73f aee4 	bgt.w	8010230 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	7c1b      	ldrb	r3, [r3, #16]
 801046c:	2b09      	cmp	r3, #9
 801046e:	d026      	beq.n	80104be <lcp_nakci+0x6e6>
	if (looped_back) {
 8010470:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010472:	2b00      	cmp	r3, #0
 8010474:	d016      	beq.n	80104a4 <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 8010476:	f897 3020 	ldrb.w	r3, [r7, #32]
 801047a:	3301      	adds	r3, #1
 801047c:	b2db      	uxtb	r3, r3
 801047e:	f887 3020 	strb.w	r3, [r7, #32]
 8010482:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010488:	7c9b      	ldrb	r3, [r3, #18]
 801048a:	429a      	cmp	r2, r3
 801048c:	d30d      	bcc.n	80104aa <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 801048e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010490:	220c      	movs	r2, #12
 8010492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	490c      	ldr	r1, [pc, #48]	; (80104cc <lcp_nakci+0x6f4>)
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe feb7 	bl	800f210 <lcp_close>
 80104a2:	e002      	b.n	80104aa <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 80104aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104ac:	461d      	mov	r5, r3
 80104ae:	f107 0414 	add.w	r4, r7, #20
 80104b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	602b      	str	r3, [r5, #0]
    }

    return 1;
 80104be:	2301      	movs	r3, #1
 80104c0:	e000      	b.n	80104c4 <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3780      	adds	r7, #128	; 0x80
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bdb0      	pop	{r4, r5, r7, pc}
 80104cc:	08016e94 	.word	0x08016e94

080104d0 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 80104d0:	b4b0      	push	{r4, r5, r7}
 80104d2:	b095      	sub	sp, #84	; 0x54
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 80104e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104e4:	3384      	adds	r3, #132	; 0x84
 80104e6:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 80104e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ea:	f107 0414 	add.w	r4, r7, #20
 80104ee:	461d      	mov	r5, r3
 80104f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80104fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	f003 0304 	and.w	r3, r3, #4
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d02e      	beq.n	8010568 <lcp_rejci+0x98>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b03      	cmp	r3, #3
 801050e:	dd2b      	ble.n	8010568 <lcp_rejci+0x98>
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	3301      	adds	r3, #1
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b04      	cmp	r3, #4
 8010518:	d126      	bne.n	8010568 <lcp_rejci+0x98>
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d122      	bne.n	8010568 <lcp_rejci+0x98>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	3b04      	subs	r3, #4
 8010526:	607b      	str	r3, [r7, #4]
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	3302      	adds	r3, #2
 801052c:	60bb      	str	r3, [r7, #8]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	60ba      	str	r2, [r7, #8]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	b29b      	uxth	r3, r3
 8010538:	021b      	lsls	r3, r3, #8
 801053a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	60ba      	str	r2, [r7, #8]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	b29a      	uxth	r2, r3
 8010548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801054c:	4313      	orrs	r3, r2
 801054e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010554:	885b      	ldrh	r3, [r3, #2]
 8010556:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801055a:	429a      	cmp	r2, r3
 801055c:	f040 81a8 	bne.w	80108b0 <lcp_rejci+0x3e0>
 8010560:	7d3b      	ldrb	r3, [r7, #20]
 8010562:	f36f 0382 	bfc	r3, #2, #1
 8010566:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8010568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	f003 0308 	and.w	r3, r3, #8
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d03f      	beq.n	80105f6 <lcp_rejci+0x126>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b05      	cmp	r3, #5
 801057a:	dd3c      	ble.n	80105f6 <lcp_rejci+0x126>
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	3301      	adds	r3, #1
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b06      	cmp	r3, #6
 8010584:	d137      	bne.n	80105f6 <lcp_rejci+0x126>
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d133      	bne.n	80105f6 <lcp_rejci+0x126>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	3b06      	subs	r3, #6
 8010592:	607b      	str	r3, [r7, #4]
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	3302      	adds	r3, #2
 8010598:	60bb      	str	r3, [r7, #8]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	1c5a      	adds	r2, r3, #1
 801059e:	60ba      	str	r2, [r7, #8]
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	021b      	lsls	r3, r3, #8
 80105a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	60ba      	str	r2, [r7, #8]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	461a      	mov	r2, r3
 80105b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b2:	4313      	orrs	r3, r2
 80105b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	60ba      	str	r2, [r7, #8]
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	461a      	mov	r2, r3
 80105c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c8:	4313      	orrs	r3, r2
 80105ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ce:	021b      	lsls	r3, r3, #8
 80105d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	1c5a      	adds	r2, r3, #1
 80105d6:	60ba      	str	r2, [r7, #8]
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	461a      	mov	r2, r3
 80105dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105de:	4313      	orrs	r3, r2
 80105e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e8:	429a      	cmp	r2, r3
 80105ea:	f040 8163 	bne.w	80108b4 <lcp_rejci+0x3e4>
 80105ee:	7d3b      	ldrb	r3, [r7, #20]
 80105f0:	f36f 03c3 	bfc	r3, #3, #1
 80105f4:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80105f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	f003 0310 	and.w	r3, r3, #16
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b00      	cmp	r3, #0
 8010602:	d02e      	beq.n	8010662 <lcp_rejci+0x192>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b03      	cmp	r3, #3
 8010608:	dd2b      	ble.n	8010662 <lcp_rejci+0x192>
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	3301      	adds	r3, #1
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	2b04      	cmp	r3, #4
 8010612:	d126      	bne.n	8010662 <lcp_rejci+0x192>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b03      	cmp	r3, #3
 801061a:	d122      	bne.n	8010662 <lcp_rejci+0x192>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	3b04      	subs	r3, #4
 8010620:	607b      	str	r3, [r7, #4]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	3302      	adds	r3, #2
 8010626:	60bb      	str	r3, [r7, #8]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	60ba      	str	r2, [r7, #8]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	b29b      	uxth	r3, r3
 8010632:	021b      	lsls	r3, r3, #8
 8010634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	60ba      	str	r2, [r7, #8]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	b29a      	uxth	r2, r3
 8010642:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010646:	4313      	orrs	r3, r2
 8010648:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801064c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010650:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010654:	4293      	cmp	r3, r2
 8010656:	f040 812f 	bne.w	80108b8 <lcp_rejci+0x3e8>
 801065a:	7d3b      	ldrb	r3, [r7, #20]
 801065c:	f36f 1304 	bfc	r3, #4, #1
 8010660:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 8010662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010664:	785b      	ldrb	r3, [r3, #1]
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	d020      	beq.n	80106b2 <lcp_rejci+0x1e2>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b02      	cmp	r3, #2
 8010674:	dd1d      	ble.n	80106b2 <lcp_rejci+0x1e2>
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	3301      	adds	r3, #1
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	2b03      	cmp	r3, #3
 801067e:	d118      	bne.n	80106b2 <lcp_rejci+0x1e2>
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b0d      	cmp	r3, #13
 8010686:	d114      	bne.n	80106b2 <lcp_rejci+0x1e2>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3b03      	subs	r3, #3
 801068c:	607b      	str	r3, [r7, #4]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	3302      	adds	r3, #2
 8010692:	60bb      	str	r3, [r7, #8]
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	1c5a      	adds	r2, r3, #1
 8010698:	60ba      	str	r2, [r7, #8]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80106a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106a4:	2b06      	cmp	r3, #6
 80106a6:	f040 8109 	bne.w	80108bc <lcp_rejci+0x3ec>
 80106aa:	7d7b      	ldrb	r3, [r7, #21]
 80106ac:	f36f 0300 	bfc	r3, #0, #1
 80106b0:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80106b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	f003 0320 	and.w	r3, r3, #32
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d03f      	beq.n	8010740 <lcp_rejci+0x270>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2b05      	cmp	r3, #5
 80106c4:	dd3c      	ble.n	8010740 <lcp_rejci+0x270>
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	3301      	adds	r3, #1
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b06      	cmp	r3, #6
 80106ce:	d137      	bne.n	8010740 <lcp_rejci+0x270>
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b05      	cmp	r3, #5
 80106d6:	d133      	bne.n	8010740 <lcp_rejci+0x270>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3b06      	subs	r3, #6
 80106dc:	607b      	str	r3, [r7, #4]
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	3302      	adds	r3, #2
 80106e2:	60bb      	str	r3, [r7, #8]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	60ba      	str	r2, [r7, #8]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	021b      	lsls	r3, r3, #8
 80106ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	60ba      	str	r2, [r7, #8]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106fc:	4313      	orrs	r3, r2
 80106fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010702:	021b      	lsls	r3, r3, #8
 8010704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	1c5a      	adds	r2, r3, #1
 801070a:	60ba      	str	r2, [r7, #8]
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010712:	4313      	orrs	r3, r2
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010718:	021b      	lsls	r3, r3, #8
 801071a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	1c5a      	adds	r2, r3, #1
 8010720:	60ba      	str	r2, [r7, #8]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	461a      	mov	r2, r3
 8010726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010728:	4313      	orrs	r3, r2
 801072a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801072c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801072e:	689a      	ldr	r2, [r3, #8]
 8010730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010732:	429a      	cmp	r2, r3
 8010734:	f040 80c4 	bne.w	80108c0 <lcp_rejci+0x3f0>
 8010738:	7d3b      	ldrb	r3, [r7, #20]
 801073a:	f36f 1345 	bfc	r3, #5, #1
 801073e:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8010740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d015      	beq.n	801077a <lcp_rejci+0x2aa>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2b01      	cmp	r3, #1
 8010752:	dd12      	ble.n	801077a <lcp_rejci+0x2aa>
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	3301      	adds	r3, #1
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b02      	cmp	r3, #2
 801075c:	d10d      	bne.n	801077a <lcp_rejci+0x2aa>
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	2b07      	cmp	r3, #7
 8010764:	d109      	bne.n	801077a <lcp_rejci+0x2aa>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	3b02      	subs	r3, #2
 801076a:	607b      	str	r3, [r7, #4]
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	3302      	adds	r3, #2
 8010770:	60bb      	str	r3, [r7, #8]
 8010772:	7d3b      	ldrb	r3, [r7, #20]
 8010774:	f36f 1386 	bfc	r3, #6, #1
 8010778:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 801077a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d015      	beq.n	80107b4 <lcp_rejci+0x2e4>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b01      	cmp	r3, #1
 801078c:	dd12      	ble.n	80107b4 <lcp_rejci+0x2e4>
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	3301      	adds	r3, #1
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b02      	cmp	r3, #2
 8010796:	d10d      	bne.n	80107b4 <lcp_rejci+0x2e4>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	2b08      	cmp	r3, #8
 801079e:	d109      	bne.n	80107b4 <lcp_rejci+0x2e4>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	3b02      	subs	r3, #2
 80107a4:	607b      	str	r3, [r7, #4]
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	3302      	adds	r3, #2
 80107aa:	60bb      	str	r3, [r7, #8]
 80107ac:	7d3b      	ldrb	r3, [r7, #20]
 80107ae:	f36f 13c7 	bfc	r3, #7, #1
 80107b2:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80107b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b6:	785b      	ldrb	r3, [r3, #1]
 80107b8:	f003 0302 	and.w	r3, r3, #2
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d015      	beq.n	80107ee <lcp_rejci+0x31e>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	dd12      	ble.n	80107ee <lcp_rejci+0x31e>
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	3301      	adds	r3, #1
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d10d      	bne.n	80107ee <lcp_rejci+0x31e>
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	2b12      	cmp	r3, #18
 80107d8:	d109      	bne.n	80107ee <lcp_rejci+0x31e>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	3b02      	subs	r3, #2
 80107de:	607b      	str	r3, [r7, #4]
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	3302      	adds	r3, #2
 80107e4:	60bb      	str	r3, [r7, #8]
 80107e6:	7d7b      	ldrb	r3, [r7, #21]
 80107e8:	f36f 0341 	bfc	r3, #1, #1
 80107ec:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80107ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107f0:	785b      	ldrb	r3, [r3, #1]
 80107f2:	f003 0304 	and.w	r3, r3, #4
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d046      	beq.n	801088a <lcp_rejci+0x3ba>
 80107fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107fe:	7b9b      	ldrb	r3, [r3, #14]
 8010800:	1cda      	adds	r2, r3, #3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	429a      	cmp	r2, r3
 8010806:	dc40      	bgt.n	801088a <lcp_rejci+0x3ba>
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	2b13      	cmp	r3, #19
 801080e:	d13c      	bne.n	801088a <lcp_rejci+0x3ba>
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	3301      	adds	r3, #1
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801081a:	7b9b      	ldrb	r3, [r3, #14]
 801081c:	3303      	adds	r3, #3
 801081e:	429a      	cmp	r2, r3
 8010820:	d133      	bne.n	801088a <lcp_rejci+0x3ba>
 8010822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010824:	7b9b      	ldrb	r3, [r3, #14]
 8010826:	3303      	adds	r3, #3
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	607b      	str	r3, [r7, #4]
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	3302      	adds	r3, #2
 8010832:	60bb      	str	r3, [r7, #8]
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	1c5a      	adds	r2, r3, #1
 8010838:	60ba      	str	r2, [r7, #8]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8010840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010842:	7b5b      	ldrb	r3, [r3, #13]
 8010844:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8010848:	429a      	cmp	r2, r3
 801084a:	d13b      	bne.n	80108c4 <lcp_rejci+0x3f4>
 801084c:	2300      	movs	r3, #0
 801084e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010850:	e011      	b.n	8010876 <lcp_rejci+0x3a6>
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	60ba      	str	r2, [r7, #8]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801085e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010862:	4413      	add	r3, r2
 8010864:	330f      	adds	r3, #15
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801086c:	429a      	cmp	r2, r3
 801086e:	d12b      	bne.n	80108c8 <lcp_rejci+0x3f8>
 8010870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010872:	3301      	adds	r3, #1
 8010874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010878:	7b9b      	ldrb	r3, [r3, #14]
 801087a:	461a      	mov	r2, r3
 801087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087e:	429a      	cmp	r2, r3
 8010880:	dce7      	bgt.n	8010852 <lcp_rejci+0x382>
 8010882:	7d7b      	ldrb	r3, [r7, #21]
 8010884:	f36f 0382 	bfc	r3, #2, #1
 8010888:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d11d      	bne.n	80108cc <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	7c1b      	ldrb	r3, [r3, #16]
 8010894:	2b09      	cmp	r3, #9
 8010896:	d009      	beq.n	80108ac <lcp_rejci+0x3dc>
	*go = try_;
 8010898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801089a:	461d      	mov	r5, r3
 801089c:	f107 0414 	add.w	r4, r7, #20
 80108a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108a8:	6823      	ldr	r3, [r4, #0]
 80108aa:	602b      	str	r3, [r5, #0]
    return 1;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e00f      	b.n	80108d0 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80108b0:	bf00      	nop
 80108b2:	e00c      	b.n	80108ce <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80108b4:	bf00      	nop
 80108b6:	e00a      	b.n	80108ce <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80108b8:	bf00      	nop
 80108ba:	e008      	b.n	80108ce <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 80108bc:	bf00      	nop
 80108be:	e006      	b.n	80108ce <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80108c0:	bf00      	nop
 80108c2:	e004      	b.n	80108ce <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80108c4:	bf00      	nop
 80108c6:	e002      	b.n	80108ce <lcp_rejci+0x3fe>
 80108c8:	bf00      	nop
 80108ca:	e000      	b.n	80108ce <lcp_rejci+0x3fe>
	goto bad;
 80108cc:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 80108ce:	2300      	movs	r3, #0
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3754      	adds	r7, #84	; 0x54
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bcb0      	pop	{r4, r5, r7}
 80108d8:	4770      	bx	lr
	...

080108dc <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 80108dc:	b580      	push	{r7, lr}
 80108de:	b096      	sub	sp, #88	; 0x58
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
 80108e8:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 80108f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f2:	3384      	adds	r3, #132	; 0x84
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	33cc      	adds	r3, #204	; 0xcc
 80108fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 80108fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fe:	33a8      	adds	r3, #168	; 0xa8
 8010900:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 8010902:	2302      	movs	r3, #2
 8010904:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 801090c:	2224      	movs	r2, #36	; 0x24
 801090e:	2100      	movs	r1, #0
 8010910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010912:	f002 fd90 	bl	8013436 <memset>

    /*
     * Process all his options.
     */
    next = inp;
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 801091a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010922:	2000      	movs	r0, #0
 8010924:	f7f4 fbd8 	bl	80050d8 <pbuf_alloc>
 8010928:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <lcp_reqci+0x58>
        return 0;
 8010930:	2300      	movs	r3, #0
 8010932:	e2b4      	b.n	8010e9e <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	891a      	ldrh	r2, [r3, #8]
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	895b      	ldrh	r3, [r3, #10]
 801093c:	429a      	cmp	r2, r3
 801093e:	d004      	beq.n	801094a <lcp_reqci+0x6e>
        pbuf_free(nakp);
 8010940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010942:	f7f4 fe33 	bl	80055ac <pbuf_free>
        return 0;
 8010946:	2300      	movs	r3, #0
 8010948:	e2a9      	b.n	8010e9e <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8010954:	e278      	b.n	8010e48 <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 8010956:	2302      	movs	r3, #2
 8010958:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 801095a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801095c:	623b      	str	r3, [r7, #32]
 801095e:	6a3b      	ldr	r3, [r7, #32]
 8010960:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 8010962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010964:	2b01      	cmp	r3, #1
 8010966:	dd0b      	ble.n	8010980 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	3301      	adds	r3, #1
 801096c:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 801096e:	2b01      	cmp	r3, #1
 8010970:	d906      	bls.n	8010980 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	3301      	adds	r3, #1
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	429a      	cmp	r2, r3
 801097e:	dd08      	ble.n	8010992 <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 8010980:	2304      	movs	r3, #4
 8010982:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 8010984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010986:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 8010988:	2300      	movs	r3, #0
 801098a:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 801098c:	2300      	movs	r3, #0
 801098e:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 8010990:	e22e      	b.n	8010df0 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 8010992:	6a3b      	ldr	r3, [r7, #32]
 8010994:	1c5a      	adds	r2, r3, #1
 8010996:	623a      	str	r2, [r7, #32]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	1c5a      	adds	r2, r3, #1
 80109a0:	623a      	str	r2, [r7, #32]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 80109a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 80109ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109b2:	4413      	add	r3, r2
 80109b4:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 80109b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b8:	3b01      	subs	r3, #1
 80109ba:	2b12      	cmp	r3, #18
 80109bc:	f200 8215 	bhi.w	8010dea <lcp_reqci+0x50e>
 80109c0:	a201      	add	r2, pc, #4	; (adr r2, 80109c8 <lcp_reqci+0xec>)
 80109c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c6:	bf00      	nop
 80109c8:	08010a15 	.word	0x08010a15
 80109cc:	08010a93 	.word	0x08010a93
 80109d0:	08010b81 	.word	0x08010b81
 80109d4:	08010deb 	.word	0x08010deb
 80109d8:	08010c27 	.word	0x08010c27
 80109dc:	08010deb 	.word	0x08010deb
 80109e0:	08010d17 	.word	0x08010d17
 80109e4:	08010d3d 	.word	0x08010d3d
 80109e8:	08010deb 	.word	0x08010deb
 80109ec:	08010deb 	.word	0x08010deb
 80109f0:	08010deb 	.word	0x08010deb
 80109f4:	08010deb 	.word	0x08010deb
 80109f8:	08010deb 	.word	0x08010deb
 80109fc:	08010deb 	.word	0x08010deb
 8010a00:	08010deb 	.word	0x08010deb
 8010a04:	08010deb 	.word	0x08010deb
 8010a08:	08010deb 	.word	0x08010deb
 8010a0c:	08010d63 	.word	0x08010d63
 8010a10:	08010d89 	.word	0x08010d89
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f003 0304 	and.w	r3, r3, #4
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d002      	beq.n	8010a28 <lcp_reqci+0x14c>
 8010a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a24:	2b04      	cmp	r3, #4
 8010a26:	d002      	beq.n	8010a2e <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8010a28:	2304      	movs	r3, #4
 8010a2a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010a2c:	e1e0      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 8010a2e:	6a3b      	ldr	r3, [r7, #32]
 8010a30:	1c5a      	adds	r2, r3, #1
 8010a32:	623a      	str	r2, [r7, #32]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	021b      	lsls	r3, r3, #8
 8010a3a:	837b      	strh	r3, [r7, #26]
 8010a3c:	6a3b      	ldr	r3, [r7, #32]
 8010a3e:	1c5a      	adds	r2, r3, #1
 8010a40:	623a      	str	r2, [r7, #32]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	8b7b      	ldrh	r3, [r7, #26]
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 8010a4c:	8b7b      	ldrh	r3, [r7, #26]
 8010a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8010a50:	d816      	bhi.n	8010a80 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 8010a52:	2303      	movs	r3, #3
 8010a54:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 8010a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 8010a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a62:	1c5a      	adds	r2, r3, #1
 8010a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a66:	2204      	movs	r2, #4
 8010a68:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 8010a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a6c:	1c5a      	adds	r2, r3, #1
 8010a6e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a70:	2200      	movs	r2, #0
 8010a72:	701a      	strb	r2, [r3, #0]
 8010a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a76:	1c5a      	adds	r2, r3, #1
 8010a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010a7a:	2280      	movs	r2, #128	; 0x80
 8010a7c:	701a      	strb	r2, [r3, #0]
		break;
 8010a7e:	e1b7      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 8010a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a82:	7813      	ldrb	r3, [r2, #0]
 8010a84:	f043 0304 	orr.w	r3, r3, #4
 8010a88:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	8b7a      	ldrh	r2, [r7, #26]
 8010a8e:	805a      	strh	r2, [r3, #2]
	    break;
 8010a90:	e1ae      	b.n	8010df0 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	f003 0308 	and.w	r3, r3, #8
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d002      	beq.n	8010aa6 <lcp_reqci+0x1ca>
 8010aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aa2:	2b06      	cmp	r3, #6
 8010aa4:	d002      	beq.n	8010aac <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8010aa6:	2304      	movs	r3, #4
 8010aa8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010aaa:	e1a1      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	1c5a      	adds	r2, r3, #1
 8010ab0:	623a      	str	r2, [r7, #32]
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	021b      	lsls	r3, r3, #8
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	623a      	str	r2, [r7, #32]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	617b      	str	r3, [r7, #20]
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	021b      	lsls	r3, r3, #8
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	6a3b      	ldr	r3, [r7, #32]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	623a      	str	r2, [r7, #32]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	617b      	str	r3, [r7, #20]
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	021b      	lsls	r3, r3, #8
 8010ae2:	617b      	str	r3, [r7, #20]
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	1c5a      	adds	r2, r3, #1
 8010ae8:	623a      	str	r2, [r7, #32]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	461a      	mov	r2, r3
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	4313      	orrs	r3, r2
 8010af2:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 8010af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	43db      	mvns	r3, r3
 8010afc:	4013      	ands	r3, r2
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d035      	beq.n	8010b6e <lcp_reqci+0x292>
		orc = CONFNAK;
 8010b02:	2303      	movs	r3, #3
 8010b04:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 8010b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b08:	1c5a      	adds	r2, r3, #1
 8010b0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b0c:	2202      	movs	r2, #2
 8010b0e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8010b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b12:	1c5a      	adds	r2, r3, #1
 8010b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b16:	2206      	movs	r2, #6
 8010b18:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 8010b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b22:	6851      	ldr	r1, [r2, #4]
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	430a      	orrs	r2, r1
 8010b28:	0e12      	lsrs	r2, r2, #24
 8010b2a:	b2d2      	uxtb	r2, r2
 8010b2c:	701a      	strb	r2, [r3, #0]
 8010b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b30:	1c5a      	adds	r2, r3, #1
 8010b32:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b36:	6851      	ldr	r1, [r2, #4]
 8010b38:	697a      	ldr	r2, [r7, #20]
 8010b3a:	430a      	orrs	r2, r1
 8010b3c:	0c12      	lsrs	r2, r2, #16
 8010b3e:	b2d2      	uxtb	r2, r2
 8010b40:	701a      	strb	r2, [r3, #0]
 8010b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b4a:	6851      	ldr	r1, [r2, #4]
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	430a      	orrs	r2, r1
 8010b50:	0a12      	lsrs	r2, r2, #8
 8010b52:	b2d2      	uxtb	r2, r2
 8010b54:	701a      	strb	r2, [r3, #0]
 8010b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b5e:	6852      	ldr	r2, [r2, #4]
 8010b60:	b2d1      	uxtb	r1, r2
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	b2d2      	uxtb	r2, r2
 8010b66:	430a      	orrs	r2, r1
 8010b68:	b2d2      	uxtb	r2, r2
 8010b6a:	701a      	strb	r2, [r3, #0]
		break;
 8010b6c:	e140      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 8010b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b70:	7813      	ldrb	r3, [r2, #0]
 8010b72:	f043 0308 	orr.w	r3, r3, #8
 8010b76:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 8010b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7a:	697a      	ldr	r2, [r7, #20]
 8010b7c:	605a      	str	r2, [r3, #4]
	    break;
 8010b7e:	e137      	b.n	8010df0 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 8010b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	dd06      	ble.n	8010b94 <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 8010b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b88:	781b      	ldrb	r3, [r3, #0]
		!(0
 8010b8a:	f003 0310 	and.w	r3, r3, #16
 8010b8e:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d102      	bne.n	8010b9a <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 8010b94:	2304      	movs	r3, #4
 8010b96:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010b98:	e12a      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	1c5a      	adds	r2, r3, #1
 8010b9e:	623a      	str	r2, [r7, #32]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	021b      	lsls	r3, r3, #8
 8010ba6:	837b      	strh	r3, [r7, #26]
 8010ba8:	6a3b      	ldr	r3, [r7, #32]
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	623a      	str	r2, [r7, #32]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	8b7b      	ldrh	r3, [r7, #26]
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 8010bb8:	8b7b      	ldrh	r3, [r7, #26]
 8010bba:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d11a      	bne.n	8010bf8 <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 8010bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bc4:	2b04      	cmp	r3, #4
 8010bc6:	d002      	beq.n	8010bce <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 8010bc8:	2304      	movs	r3, #4
 8010bca:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 8010bcc:	e110      	b.n	8010df0 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	f003 0310 	and.w	r3, r3, #16
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d107      	bne.n	8010bec <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 8010bdc:	2303      	movs	r3, #3
 8010bde:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8010be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010be6:	2203      	movs	r2, #3
 8010be8:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 8010bea:	e101      	b.n	8010df0 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 8010bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bee:	7813      	ldrb	r3, [r2, #0]
 8010bf0:	f043 0310 	orr.w	r3, r3, #16
 8010bf4:	7013      	strb	r3, [r2, #0]
		break;
 8010bf6:	e0fb      	b.n	8010df0 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8010bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c02:	2203      	movs	r2, #3
 8010c04:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 8010c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c0c:	2204      	movs	r2, #4
 8010c0e:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 8010c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c12:	1c5a      	adds	r2, r3, #1
 8010c14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c16:	22c0      	movs	r2, #192	; 0xc0
 8010c18:	701a      	strb	r2, [r3, #0]
 8010c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c20:	2223      	movs	r2, #35	; 0x23
 8010c22:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 8010c24:	e0e4      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 8010c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 0320 	and.w	r3, r3, #32
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d106      	bne.n	8010c42 <lcp_reqci+0x366>
 8010c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	f003 0320 	and.w	r3, r3, #32
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d002      	beq.n	8010c48 <lcp_reqci+0x36c>
 8010c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c44:	2b06      	cmp	r3, #6
 8010c46:	d002      	beq.n	8010c4e <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8010c48:	2304      	movs	r3, #4
 8010c4a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010c4c:	e0d0      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 8010c4e:	6a3b      	ldr	r3, [r7, #32]
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	623a      	str	r2, [r7, #32]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	021b      	lsls	r3, r3, #8
 8010c58:	617b      	str	r3, [r7, #20]
 8010c5a:	6a3b      	ldr	r3, [r7, #32]
 8010c5c:	1c5a      	adds	r2, r3, #1
 8010c5e:	623a      	str	r2, [r7, #32]
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	461a      	mov	r2, r3
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	4313      	orrs	r3, r2
 8010c68:	617b      	str	r3, [r7, #20]
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	021b      	lsls	r3, r3, #8
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	6a3b      	ldr	r3, [r7, #32]
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	623a      	str	r2, [r7, #32]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	617b      	str	r3, [r7, #20]
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	021b      	lsls	r3, r3, #8
 8010c84:	617b      	str	r3, [r7, #20]
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	623a      	str	r2, [r7, #32]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	4313      	orrs	r3, r2
 8010c94:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 8010c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	f003 0320 	and.w	r3, r3, #32
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d02f      	beq.n	8010d04 <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d12a      	bne.n	8010d04 <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 8010cae:	f000 fb7f 	bl	80113b0 <magic>
 8010cb2:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010cbe:	2205      	movs	r2, #5
 8010cc0:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8010cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010cc8:	2206      	movs	r2, #6
 8010cca:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 8010ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	0e12      	lsrs	r2, r2, #24
 8010cd6:	b2d2      	uxtb	r2, r2
 8010cd8:	701a      	strb	r2, [r3, #0]
 8010cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cdc:	1c5a      	adds	r2, r3, #1
 8010cde:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010ce0:	697a      	ldr	r2, [r7, #20]
 8010ce2:	0c12      	lsrs	r2, r2, #16
 8010ce4:	b2d2      	uxtb	r2, r2
 8010ce6:	701a      	strb	r2, [r3, #0]
 8010ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010cee:	697a      	ldr	r2, [r7, #20]
 8010cf0:	0a12      	lsrs	r2, r2, #8
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	701a      	strb	r2, [r3, #0]
 8010cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf8:	1c5a      	adds	r2, r3, #1
 8010cfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010cfc:	697a      	ldr	r2, [r7, #20]
 8010cfe:	b2d2      	uxtb	r2, r2
 8010d00:	701a      	strb	r2, [r3, #0]
		break;
 8010d02:	e075      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 8010d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d06:	7813      	ldrb	r3, [r2, #0]
 8010d08:	f043 0320 	orr.w	r3, r3, #32
 8010d0c:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 8010d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d10:	697a      	ldr	r2, [r7, #20]
 8010d12:	609a      	str	r2, [r3, #8]
	    break;
 8010d14:	e06c      	b.n	8010df0 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <lcp_reqci+0x44e>
 8010d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	d002      	beq.n	8010d30 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8010d2a:	2304      	movs	r3, #4
 8010d2c:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010d2e:	e05f      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 8010d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d32:	7813      	ldrb	r3, [r2, #0]
 8010d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d38:	7013      	strb	r3, [r2, #0]
	    break;
 8010d3a:	e059      	b.n	8010df0 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 8010d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d002      	beq.n	8010d50 <lcp_reqci+0x474>
 8010d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	d002      	beq.n	8010d56 <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8010d50:	2304      	movs	r3, #4
 8010d52:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010d54:	e04c      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 8010d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d58:	7813      	ldrb	r3, [r2, #0]
 8010d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d5e:	7013      	strb	r3, [r2, #0]
	    break;
 8010d60:	e046      	b.n	8010df0 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 8010d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d64:	785b      	ldrb	r3, [r3, #1]
 8010d66:	f003 0302 	and.w	r3, r3, #2
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 8010d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d002      	beq.n	8010d7c <lcp_reqci+0x4a0>
		orc = CONFREJ;
 8010d76:	2304      	movs	r3, #4
 8010d78:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010d7a:	e039      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 8010d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d7e:	7853      	ldrb	r3, [r2, #1]
 8010d80:	f043 0302 	orr.w	r3, r3, #2
 8010d84:	7053      	strb	r3, [r2, #1]
	    break;
 8010d86:	e033      	b.n	8010df0 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 8010d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8a:	785b      	ldrb	r3, [r3, #1]
 8010d8c:	f003 0304 	and.w	r3, r3, #4
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d005      	beq.n	8010da2 <lcp_reqci+0x4c6>
 8010d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d98:	2b02      	cmp	r3, #2
 8010d9a:	dd02      	ble.n	8010da2 <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 8010d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d9e:	2b17      	cmp	r3, #23
 8010da0:	dd02      	ble.n	8010da8 <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 8010da2:	2304      	movs	r3, #4
 8010da4:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8010da6:	e023      	b.n	8010df0 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	623a      	str	r2, [r7, #32]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 8010db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db4:	3b03      	subs	r3, #3
 8010db6:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 8010db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dba:	7853      	ldrb	r3, [r2, #1]
 8010dbc:	f043 0304 	orr.w	r3, r3, #4
 8010dc0:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	b2da      	uxtb	r2, r3
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 8010dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd0:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 8010dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd4:	330f      	adds	r3, #15
 8010dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dd8:	6a39      	ldr	r1, [r7, #32]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f002 fb06 	bl	80133ec <memcpy>
	    INCPTR(cilen, p);
 8010de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de2:	6a3a      	ldr	r2, [r7, #32]
 8010de4:	4413      	add	r3, r2
 8010de6:	623b      	str	r3, [r7, #32]
	    break;
 8010de8:	e002      	b.n	8010df0 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 8010dea:	2304      	movs	r3, #4
 8010dec:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8010dee:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 8010df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	d103      	bne.n	8010dfe <lcp_reqci+0x522>
 8010df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d000      	beq.n	8010dfe <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 8010dfc:	e024      	b.n	8010e48 <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 8010dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e00:	2b03      	cmp	r3, #3
 8010e02:	d10e      	bne.n	8010e22 <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d005      	beq.n	8010e16 <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 8010e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e0c:	2b05      	cmp	r3, #5
 8010e0e:	d002      	beq.n	8010e16 <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 8010e10:	2304      	movs	r3, #4
 8010e12:	647b      	str	r3, [r7, #68]	; 0x44
 8010e14:	e005      	b.n	8010e22 <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 8010e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	d100      	bne.n	8010e1e <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 8010e1c:	e014      	b.n	8010e48 <lcp_reqci+0x56c>
		rc = CONFNAK;
 8010e1e:	2303      	movs	r3, #3
 8010e20:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 8010e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e24:	2b04      	cmp	r3, #4
 8010e26:	d10f      	bne.n	8010e48 <lcp_reqci+0x56c>
	    rc = CONFREJ;
 8010e28:	2304      	movs	r3, #4
 8010e2a:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 8010e2c:	69fa      	ldr	r2, [r7, #28]
 8010e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d005      	beq.n	8010e40 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 8010e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e36:	461a      	mov	r2, r3
 8010e38:	69f9      	ldr	r1, [r7, #28]
 8010e3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010e3c:	f002 fad6 	bl	80133ec <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 8010e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e44:	4413      	add	r3, r2
 8010e46:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f47f ad83 	bne.w	8010956 <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 8010e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e52:	2b03      	cmp	r3, #3
 8010e54:	d00a      	beq.n	8010e6c <lcp_reqci+0x590>
 8010e56:	2b04      	cmp	r3, #4
 8010e58:	d017      	beq.n	8010e8a <lcp_reqci+0x5ae>
 8010e5a:	2b02      	cmp	r3, #2
 8010e5c:	d000      	beq.n	8010e60 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 8010e5e:	e01a      	b.n	8010e96 <lcp_reqci+0x5ba>
	*lenp = next - inp;
 8010e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	1ad2      	subs	r2, r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	601a      	str	r2, [r3, #0]
	break;
 8010e6a:	e014      	b.n	8010e96 <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 8010e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e70:	6852      	ldr	r2, [r2, #4]
 8010e72:	1a9a      	subs	r2, r3, r2
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 8010e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7a:	6859      	ldr	r1, [r3, #4]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	461a      	mov	r2, r3
 8010e82:	68b8      	ldr	r0, [r7, #8]
 8010e84:	f002 fab2 	bl	80133ec <memcpy>
	break;
 8010e88:	e005      	b.n	8010e96 <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 8010e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	1ad2      	subs	r2, r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	601a      	str	r2, [r3, #0]
	break;
 8010e94:	bf00      	nop
    }

    pbuf_free(nakp);
 8010e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e98:	f7f4 fb88 	bl	80055ac <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 8010e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3758      	adds	r7, #88	; 0x58
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop

08010ea8 <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08c      	sub	sp, #48	; 0x30
 8010eac:	af02      	add	r7, sp, #8
 8010eae:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	3360      	adds	r3, #96	; 0x60
 8010eba:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	33cc      	adds	r3, #204	; 0xcc
 8010ec0:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	3384      	adds	r3, #132	; 0x84
 8010ec6:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	33a8      	adds	r3, #168	; 0xa8
 8010ecc:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	f003 0320 	and.w	r3, r3, #32
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <lcp_up+0x3a>
	go->magicnumber = 0;
 8010edc:	69bb      	ldr	r3, [r7, #24]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d102      	bne.n	8010ef6 <lcp_up+0x4e>
	ho->magicnumber = 0;
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	f003 0304 	and.w	r3, r3, #4
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <lcp_up+0x62>
 8010f04:	69fb      	ldr	r3, [r7, #28]
 8010f06:	885b      	ldrh	r3, [r3, #2]
 8010f08:	e001      	b.n	8010f0e <lcp_up+0x66>
 8010f0a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8010f0e:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	f003 0304 	and.w	r3, r3, #4
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00b      	beq.n	8010f36 <lcp_up+0x8e>
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	885a      	ldrh	r2, [r3, #2]
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	885b      	ldrh	r3, [r3, #2]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d902      	bls.n	8010f30 <lcp_up+0x88>
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	885b      	ldrh	r3, [r3, #2]
 8010f2e:	e004      	b.n	8010f3a <lcp_up+0x92>
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	885b      	ldrh	r3, [r3, #2]
 8010f34:	e001      	b.n	8010f3a <lcp_up+0x92>
 8010f36:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8010f3a:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	885b      	ldrh	r3, [r3, #2]
 8010f40:	4619      	mov	r1, r3
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	4293      	cmp	r3, r2
 8010f48:	bfa8      	it	ge
 8010f4a:	4613      	movge	r3, r2
 8010f4c:	428b      	cmp	r3, r1
 8010f4e:	bfa8      	it	ge
 8010f50:	460b      	movge	r3, r1
 8010f52:	4619      	mov	r1, r3
 8010f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f56:	f000 fd5f 	bl	8011a18 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	f003 0308 	and.w	r3, r3, #8
 8010f62:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <lcp_up+0xc6>
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	685a      	ldr	r2, [r3, #4]
 8010f6c:	e001      	b.n	8010f72 <lcp_up+0xca>
 8010f6e:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010f7a:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8010f7c:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010f86:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8010f88:	9300      	str	r3, [sp, #0]
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	6939      	ldr	r1, [r7, #16]
 8010f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f90:	f000 fc94 	bl	80118bc <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	f003 0308 	and.w	r3, r3, #8
 8010f9c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10c      	bne.n	8010fbc <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 0308 	and.w	r3, r3, #8
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <lcp_up+0x10e>
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	e003      	b.n	8010fbe <lcp_up+0x116>
 8010fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8010fba:	e000      	b.n	8010fbe <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 8010fbc:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010fc6:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8010fc8:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010fd2:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	68f9      	ldr	r1, [r7, #12]
 8010fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fdc:	f000 fc8a 	bl	80118f4 <ppp_recv_config>

    if (ho->neg_mru)
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	f003 0304 	and.w	r3, r3, #4
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d004      	beq.n	8010ff8 <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	885a      	ldrh	r2, [r3, #2]
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff4:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f000 f97a 	bl	80112f6 <lcp_echo_lowerup>

    link_established(pcb);
 8011002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011004:	f7fb fdca 	bl	800cb9c <link_established>
}
 8011008:	bf00      	nop
 801100a:	3728      	adds	r7, #40	; 0x28
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af02      	add	r7, sp, #8
 8011016:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	3384      	adds	r3, #132	; 0x84
 8011022:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4618      	mov	r0, r3
 801102a:	f000 f985 	bl	8011338 <lcp_echo_lowerdown>

    link_down(pcb);
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f7fb fd62 	bl	800caf8 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 8011034:	2300      	movs	r3, #0
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	2300      	movs	r3, #0
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f000 fc3a 	bl	80118bc <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f003 0308 	and.w	r3, r3, #8
 8011050:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011052:	2b00      	cmp	r3, #0
 8011054:	d002      	beq.n	801105c <lcp_down+0x4c>
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	e001      	b.n	8011060 <lcp_down+0x50>
 801105c:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011068:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 801106a:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011074:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	460b      	mov	r3, r1
 801107a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f000 fc38 	bl	80118f4 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801108a:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 801108e:	bf00      	nop
 8011090:	3710      	adds	r7, #16
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 8011096:	b580      	push	{r7, lr}
 8011098:	b084      	sub	sp, #16
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	f7fb fd05 	bl	800cab4 <link_required>
}
 80110aa:	bf00      	nop
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b084      	sub	sp, #16
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f7fb fd01 	bl	800cac8 <link_terminated>
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
	...

080110d0 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7c1b      	ldrb	r3, [r3, #16]
 80110e2:	2b09      	cmp	r3, #9
 80110e4:	d107      	bne.n	80110f6 <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2209      	movs	r2, #9
 80110ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 80110ee:	4904      	ldr	r1, [pc, #16]	; (8011100 <LcpLinkFailure+0x30>)
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f7fe f88d 	bl	800f210 <lcp_close>
    }
}
 80110f6:	bf00      	nop
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	08016ea8 	.word	0x08016ea8

08011104 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f88e 	bl	8011234 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7c1b      	ldrb	r3, [r3, #16]
 801111c:	2b09      	cmp	r3, #9
 801111e:	d117      	bne.n	8011150 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	480d      	ldr	r0, [pc, #52]	; (8011158 <LcpEchoCheck+0x54>)
 8011124:	f7fb fc1e 	bl	800c964 <sys_untimeout>
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	7cdb      	ldrb	r3, [r3, #19]
 801112c:	461a      	mov	r2, r3
 801112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011132:	fb03 f302 	mul.w	r3, r3, r2
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	4907      	ldr	r1, [pc, #28]	; (8011158 <LcpEchoCheck+0x54>)
 801113a:	4618      	mov	r0, r3
 801113c:	f7fb fbe6 	bl	800c90c <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8011140:	68fa      	ldr	r2, [r7, #12]
 8011142:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011146:	f043 0310 	orr.w	r3, r3, #16
 801114a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 801114e:	e000      	b.n	8011152 <LcpEchoCheck+0x4e>
	return;
 8011150:	bf00      	nop
}
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	0801115d 	.word	0x0801115d

0801115c <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011174:	f003 0310 	and.w	r3, r3, #16
 8011178:	b2db      	uxtb	r3, r3
 801117a:	2b00      	cmp	r3, #0
 801117c:	d009      	beq.n	8011192 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 801117e:	68ba      	ldr	r2, [r7, #8]
 8011180:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011184:	f36f 1304 	bfc	r3, #4, #1
 8011188:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff ffb9 	bl	8011104 <LcpEchoCheck>
    }
}
 8011192:	bf00      	nop
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 801119a:	b480      	push	{r7}
 801119c:	b089      	sub	sp, #36	; 0x24
 801119e:	af00      	add	r7, sp, #0
 80111a0:	60f8      	str	r0, [r7, #12]
 80111a2:	60b9      	str	r1, [r7, #8]
 80111a4:	607a      	str	r2, [r7, #4]
 80111a6:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	3384      	adds	r3, #132	; 0x84
 80111b2:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	dd34      	ble.n	8011224 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	1c5a      	adds	r2, r3, #1
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	021b      	lsls	r3, r3, #8
 80111c4:	617b      	str	r3, [r7, #20]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	607a      	str	r2, [r7, #4]
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	617b      	str	r3, [r7, #20]
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	021b      	lsls	r3, r3, #8
 80111da:	617b      	str	r3, [r7, #20]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	607a      	str	r2, [r7, #4]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	461a      	mov	r2, r3
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	617b      	str	r3, [r7, #20]
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	021b      	lsls	r3, r3, #8
 80111f0:	617b      	str	r3, [r7, #20]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	1c5a      	adds	r2, r3, #1
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	4313      	orrs	r3, r2
 8011200:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	f003 0320 	and.w	r3, r3, #32
 801120a:	b2db      	uxtb	r3, r3
 801120c:	2b00      	cmp	r3, #0
 801120e:	d004      	beq.n	801121a <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	689a      	ldr	r2, [r3, #8]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	429a      	cmp	r2, r3
 8011218:	d006      	beq.n	8011228 <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	2200      	movs	r2, #0
 801121e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8011222:	e002      	b.n	801122a <lcp_received_echo_reply+0x90>
	return;
 8011224:	bf00      	nop
 8011226:	e000      	b.n	801122a <lcp_received_echo_reply+0x90>
	return;
 8011228:	bf00      	nop
}
 801122a:	3724      	adds	r7, #36	; 0x24
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr

08011234 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 8011234:	b580      	push	{r7, lr}
 8011236:	b08a      	sub	sp, #40	; 0x28
 8011238:	af02      	add	r7, sp, #8
 801123a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	3384      	adds	r3, #132	; 0x84
 8011246:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	7d1b      	ldrb	r3, [r3, #20]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00d      	beq.n	801126c <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	7d1b      	ldrb	r3, [r3, #20]
 801125a:	429a      	cmp	r2, r3
 801125c:	d306      	bcc.n	801126c <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff ff36 	bl	80110d0 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	7c1b      	ldrb	r3, [r3, #16]
 8011270:	2b09      	cmp	r3, #9
 8011272:	d13c      	bne.n	80112ee <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 801127a:	f107 030c 	add.w	r3, r7, #12
 801127e:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	613a      	str	r2, [r7, #16]
 8011286:	697a      	ldr	r2, [r7, #20]
 8011288:	0e12      	lsrs	r2, r2, #24
 801128a:	b2d2      	uxtb	r2, r2
 801128c:	701a      	strb	r2, [r3, #0]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	613a      	str	r2, [r7, #16]
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	0c12      	lsrs	r2, r2, #16
 8011298:	b2d2      	uxtb	r2, r2
 801129a:	701a      	strb	r2, [r3, #0]
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	613a      	str	r2, [r7, #16]
 80112a2:	697a      	ldr	r2, [r7, #20]
 80112a4:	0a12      	lsrs	r2, r2, #8
 80112a6:	b2d2      	uxtb	r2, r2
 80112a8:	701a      	strb	r2, [r3, #0]
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	1c5a      	adds	r2, r3, #1
 80112ae:	613a      	str	r2, [r7, #16]
 80112b0:	697a      	ldr	r2, [r7, #20]
 80112b2:	b2d2      	uxtb	r2, r2
 80112b4:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 80112bc:	1c53      	adds	r3, r2, #1
 80112be:	b2d9      	uxtb	r1, r3
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 80112c6:	6939      	ldr	r1, [r7, #16]
 80112c8:	f107 030c 	add.w	r3, r7, #12
 80112cc:	1acb      	subs	r3, r1, r3
 80112ce:	f107 010c 	add.w	r1, r7, #12
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	460b      	mov	r3, r1
 80112d6:	2109      	movs	r1, #9
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7fc fc79 	bl	800dbd0 <fsm_sdata>
	++pcb->lcp_echos_pending;
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 80112e4:	3301      	adds	r3, #1
 80112e6:	b2da      	uxtb	r2, r3
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 80112ee:	bf00      	nop
 80112f0:	3720      	adds	r7, #32
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b084      	sub	sp, #16
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	3344      	adds	r3, #68	; 0x44
 8011302:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801131a:	f36f 1304 	bfc	r3, #4, #1
 801131e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	7cdb      	ldrb	r3, [r3, #19]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f7ff feea 	bl	8011104 <LcpEchoCheck>
}
 8011330:	bf00      	nop
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	3344      	adds	r3, #68	; 0x44
 8011344:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801134c:	f003 0310 	and.w	r3, r3, #16
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 8011356:	68f9      	ldr	r1, [r7, #12]
 8011358:	4806      	ldr	r0, [pc, #24]	; (8011374 <lcp_echo_lowerdown+0x3c>)
 801135a:	f7fb fb03 	bl	800c964 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011364:	f36f 1304 	bfc	r3, #4, #1
 8011368:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 801136c:	bf00      	nop
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	0801115d 	.word	0x0801115d

08011378 <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 8011378:	b580      	push	{r7, lr}
 801137a:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 801137c:	f7ef ffa4 	bl	80012c8 <sys_jiffies>
 8011380:	4602      	mov	r2, r0
 8011382:	4b03      	ldr	r3, [pc, #12]	; (8011390 <magic_init+0x18>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4413      	add	r3, r2
 8011388:	4a01      	ldr	r2, [pc, #4]	; (8011390 <magic_init+0x18>)
 801138a:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 801138c:	bf00      	nop
 801138e:	bd80      	pop	{r7, pc}
 8011390:	2000068c 	.word	0x2000068c

08011394 <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 8011394:	b580      	push	{r7, lr}
 8011396:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 8011398:	f7ef ff96 	bl	80012c8 <sys_jiffies>
 801139c:	4602      	mov	r2, r0
 801139e:	4b03      	ldr	r3, [pc, #12]	; (80113ac <magic_randomize+0x18>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	4413      	add	r3, r2
 80113a4:	4a01      	ldr	r2, [pc, #4]	; (80113ac <magic_randomize+0x18>)
 80113a6:	6013      	str	r3, [r2, #0]
}
 80113a8:	bf00      	nop
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	2000068c 	.word	0x2000068c

080113b0 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 80113b0:	b598      	push	{r3, r4, r7, lr}
 80113b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 80113b4:	f7ef ff90 	bl	80012d8 <lwip_port_rand>
 80113b8:	4603      	mov	r3, r0
 80113ba:	041c      	lsls	r4, r3, #16
 80113bc:	f7ef ff8c 	bl	80012d8 <lwip_port_rand>
 80113c0:	4603      	mov	r3, r0
 80113c2:	18e2      	adds	r2, r4, r3
 80113c4:	4b02      	ldr	r3, [pc, #8]	; (80113d0 <magic+0x20>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	bd98      	pop	{r3, r4, r7, pc}
 80113ce:	bf00      	nop
 80113d0:	2000068c 	.word	0x2000068c

080113d4 <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	460b      	mov	r3, r1
 80113de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d002      	beq.n	80113f0 <ppp_connect+0x1c>
    return ERR_ALREADY;
 80113ea:	f06f 0308 	mvn.w	r3, #8
 80113ee:	e018      	b.n	8011422 <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 80113f0:	f7ff ffd0 	bl	8011394 <magic_randomize>

  if (holdoff == 0) {
 80113f4:	887b      	ldrh	r3, [r7, #2]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d104      	bne.n	8011404 <ppp_connect+0x30>
    ppp_do_connect(pcb);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 f818 	bl	8011430 <ppp_do_connect>
    return ERR_OK;
 8011400:	2300      	movs	r3, #0
 8011402:	e00e      	b.n	8011422 <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 8011404:	2102      	movs	r1, #2
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fa48 	bl	801189c <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 801140c:	887b      	ldrh	r3, [r7, #2]
 801140e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011412:	fb02 f303 	mul.w	r3, r2, r3
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	4904      	ldr	r1, [pc, #16]	; (801142c <ppp_connect+0x58>)
 801141a:	4618      	mov	r0, r3
 801141c:	f7fb fa76 	bl	800c90c <sys_timeout>
  return ERR_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3708      	adds	r7, #8
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	08011431 	.word	0x08011431

08011430 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d010      	beq.n	8011468 <ppp_do_connect+0x38>
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801144c:	2b02      	cmp	r3, #2
 801144e:	d00b      	beq.n	8011468 <ppp_do_connect+0x38>
 8011450:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <ppp_do_connect+0x58>)
 8011452:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8011456:	490d      	ldr	r1, [pc, #52]	; (801148c <ppp_do_connect+0x5c>)
 8011458:	480d      	ldr	r0, [pc, #52]	; (8011490 <ppp_do_connect+0x60>)
 801145a:	f001 fdc5 	bl	8012fe8 <iprintf>
 801145e:	2000      	movs	r0, #0
 8011460:	f001 fec4 	bl	80131ec <fflush>
 8011464:	f001 fe09 	bl	801307a <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8011468:	2103      	movs	r1, #3
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 fa16 	bl	801189c <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	69d2      	ldr	r2, [r2, #28]
 801147a:	4611      	mov	r1, r2
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	4798      	blx	r3
}
 8011480:	bf00      	nop
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	08016ec4 	.word	0x08016ec4
 801148c:	08016f40 	.word	0x08016f40
 8011490:	08016f08 	.word	0x08016f08

08011494 <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2270      	movs	r2, #112	; 0x70
 80114a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2270      	movs	r2, #112	; 0x70
 80114a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a04      	ldr	r2, [pc, #16]	; (80114c0 <ppp_netif_init_cb+0x2c>)
 80114b0:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	080114c5 	.word	0x080114c5

080114c4 <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 80114d0:	2221      	movs	r2, #33	; 0x21
 80114d2:	68b9      	ldr	r1, [r7, #8]
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f000 f805 	bl	80114e4 <ppp_netif_output>
 80114da:	4603      	mov	r3, r0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3710      	adds	r7, #16
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b089      	sub	sp, #36	; 0x24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	4613      	mov	r3, r2
 80114f0:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	69db      	ldr	r3, [r3, #28]
 80114f6:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 80114f8:	2300      	movs	r3, #0
 80114fa:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 80114fc:	88fb      	ldrh	r3, [r7, #6]
 80114fe:	2b21      	cmp	r3, #33	; 0x21
 8011500:	d107      	bne.n	8011512 <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011508:	f003 0308 	and.w	r3, r3, #8
 801150c:	b2db      	uxtb	r3, r3
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00b      	beq.n	801152a <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	699b      	ldr	r3, [r3, #24]
 8011516:	691c      	ldr	r4, [r3, #16]
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	69d9      	ldr	r1, [r3, #28]
 801151c:	88fb      	ldrh	r3, [r7, #6]
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	47a0      	blx	r4
 8011524:	4603      	mov	r3, r0
 8011526:	77fb      	strb	r3, [r7, #31]
  goto err;
 8011528:	e00e      	b.n	8011548 <ppp_netif_output+0x64>
    goto err_rte_drop;
 801152a:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 801152c:	23fc      	movs	r3, #252	; 0xfc
 801152e:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <ppp_netif_output+0x7c>)
 8011532:	89db      	ldrh	r3, [r3, #14]
 8011534:	3301      	adds	r3, #1
 8011536:	b29a      	uxth	r2, r3
 8011538:	4b09      	ldr	r3, [pc, #36]	; (8011560 <ppp_netif_output+0x7c>)
 801153a:	81da      	strh	r2, [r3, #14]
  LINK_STATS_INC(link.drop);
 801153c:	4b08      	ldr	r3, [pc, #32]	; (8011560 <ppp_netif_output+0x7c>)
 801153e:	88db      	ldrh	r3, [r3, #6]
 8011540:	3301      	adds	r3, #1
 8011542:	b29a      	uxth	r2, r3
 8011544:	4b06      	ldr	r3, [pc, #24]	; (8011560 <ppp_netif_output+0x7c>)
 8011546:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <ppp_netif_output+0x70>
    pbuf_free(fpb);
 801154e:	6978      	ldr	r0, [r7, #20]
 8011550:	f7f4 f82c 	bl	80055ac <pbuf_free>
  }
  return err;
 8011554:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3724      	adds	r7, #36	; 0x24
 801155c:	46bd      	mov	sp, r7
 801155e:	bd90      	pop	{r4, r7, pc}
 8011560:	20002164 	.word	0x20002164

08011564 <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 8011568:	4805      	ldr	r0, [pc, #20]	; (8011580 <ppp_init+0x1c>)
 801156a:	f7f3 f91d 	bl	80047a8 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 801156e:	4805      	ldr	r0, [pc, #20]	; (8011584 <ppp_init+0x20>)
 8011570:	f7f3 f91a 	bl	80047a8 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 8011574:	f7ff ff00 	bl	8011378 <magic_init>

  return 0;
 8011578:	2300      	movs	r3, #0
}
 801157a:	4618      	mov	r0, r3
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	08017278 	.word	0x08017278
 8011584:	08017254 	.word	0x08017254

08011588 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 8011588:	b580      	push	{r7, lr}
 801158a:	b08c      	sub	sp, #48	; 0x30
 801158c:	af04      	add	r7, sp, #16
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	607a      	str	r2, [r7, #4]
 8011594:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <ppp_new+0x18>
    return NULL;
 801159c:	2300      	movs	r3, #0
 801159e:	e06a      	b.n	8011676 <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 80115a0:	4837      	ldr	r0, [pc, #220]	; (8011680 <ppp_new+0xf8>)
 80115a2:	f7f3 f997 	bl	80048d4 <memp_malloc_pool>
 80115a6:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <ppp_new+0x2a>
    return NULL;
 80115ae:	2300      	movs	r3, #0
 80115b0:	e061      	b.n	8011676 <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 80115b2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80115b6:	2100      	movs	r1, #0
 80115b8:	69b8      	ldr	r0, [r7, #24]
 80115ba:	f001 ff3c 	bl	8013436 <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	2206      	movs	r2, #6
 80115c2:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 80115c4:	69bb      	ldr	r3, [r7, #24]
 80115c6:	220a      	movs	r2, #10
 80115c8:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	220a      	movs	r2, #10
 80115ce:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	2200      	movs	r2, #0
 80115d4:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	2203      	movs	r2, #3
 80115da:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	2206      	movs	r2, #6
 80115e0:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	220a      	movs	r2, #10
 80115e6:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 80115e8:	69bb      	ldr	r3, [r7, #24]
 80115ea:	2202      	movs	r2, #2
 80115ec:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	2205      	movs	r2, #5
 80115f2:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80115fe:	2300      	movs	r3, #0
 8011600:	9302      	str	r3, [sp, #8]
 8011602:	4b20      	ldr	r3, [pc, #128]	; (8011684 <ppp_new+0xfc>)
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	4b1f      	ldr	r3, [pc, #124]	; (8011688 <ppp_new+0x100>)
 801160c:	4a1f      	ldr	r2, [pc, #124]	; (801168c <ppp_new+0x104>)
 801160e:	491e      	ldr	r1, [pc, #120]	; (8011688 <ppp_new+0x100>)
 8011610:	f7f3 fa28 	bl	8004a64 <netif_add>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 801161a:	69b9      	ldr	r1, [r7, #24]
 801161c:	4818      	ldr	r0, [pc, #96]	; (8011680 <ppp_new+0xf8>)
 801161e:	f7f3 f9c5 	bl	80049ac <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 8011622:	2300      	movs	r3, #0
 8011624:	e027      	b.n	8011676 <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162a:	4618      	mov	r0, r3
 801162c:	f7f3 fbea 	bl	8004e04 <netif_set_up>

  pcb->link_cb = callbacks;
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 801163c:	69bb      	ldr	r3, [r7, #24]
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011646:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8011648:	2300      	movs	r3, #0
 801164a:	61fb      	str	r3, [r7, #28]
 801164c:	e006      	b.n	801165c <ppp_new+0xd4>
      (*protp->init)(pcb);
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	69b8      	ldr	r0, [r7, #24]
 8011654:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	3301      	adds	r3, #1
 801165a:	61fb      	str	r3, [r7, #28]
 801165c:	4a0c      	ldr	r2, [pc, #48]	; (8011690 <ppp_new+0x108>)
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011664:	617b      	str	r3, [r7, #20]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1f0      	bne.n	801164e <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 801166c:	2100      	movs	r1, #0
 801166e:	69b8      	ldr	r0, [r7, #24]
 8011670:	f000 f914 	bl	801189c <new_phase>
  return pcb;
 8011674:	69bb      	ldr	r3, [r7, #24]
}
 8011676:	4618      	mov	r0, r3
 8011678:	3720      	adds	r7, #32
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	08017254 	.word	0x08017254
 8011684:	08011495 	.word	0x08011495
 8011688:	080170a4 	.word	0x080170a4
 801168c:	080170a8 	.word	0x080170a8
 8011690:	08017268 	.word	0x08017268

08011694 <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 801169c:	2106      	movs	r1, #6
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f8fc 	bl	801189c <new_phase>
  lcp_open(pcb);
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f7fd fd7f 	bl	800f1a8 <lcp_open>
  lcp_lowerup(pcb);
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7fd fdee 	bl	800f28c <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 80116b0:	bf00      	nop
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 80116c0:	2100      	movs	r1, #0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 f8ea 	bl	801189c <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d103      	bne.n	80116da <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2206      	movs	r2, #6
 80116d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6a1b      	ldr	r3, [r3, #32]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80116e4:	4611      	mov	r1, r2
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	4798      	blx	r3
}
 80116ee:	bf00      	nop
 80116f0:	3708      	adds	r7, #8
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
	...

080116f8 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011708:	2b05      	cmp	r3, #5
 801170a:	d904      	bls.n	8011716 <ppp_input+0x1e>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011712:	2b0b      	cmp	r3, #11
 8011714:	d90b      	bls.n	801172e <ppp_input+0x36>
 8011716:	4b4b      	ldr	r3, [pc, #300]	; (8011844 <ppp_input+0x14c>)
 8011718:	f240 3211 	movw	r2, #785	; 0x311
 801171c:	494a      	ldr	r1, [pc, #296]	; (8011848 <ppp_input+0x150>)
 801171e:	484b      	ldr	r0, [pc, #300]	; (801184c <ppp_input+0x154>)
 8011720:	f001 fc62 	bl	8012fe8 <iprintf>
 8011724:	2000      	movs	r0, #0
 8011726:	f001 fd61 	bl	80131ec <fflush>
 801172a:	f001 fca6 	bl	801307a <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 801172e:	f7ff fe31 	bl	8011394 <magic_randomize>

  if (pb->len < 2) {
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	895b      	ldrh	r3, [r3, #10]
 8011736:	2b01      	cmp	r3, #1
 8011738:	d96e      	bls.n	8011818 <ppp_input+0x120>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	021b      	lsls	r3, r3, #8
 8011742:	b21a      	sxth	r2, r3
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	3301      	adds	r3, #1
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	b21b      	sxth	r3, r3
 801174e:	4313      	orrs	r3, r2
 8011750:	b21b      	sxth	r3, r3
 8011752:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 8011754:	2102      	movs	r1, #2
 8011756:	6838      	ldr	r0, [r7, #0]
 8011758:	f7f3 fed2 	bl	8005500 <pbuf_remove_header>

  LINK_STATS_INC(link.recv);
 801175c:	4b3c      	ldr	r3, [pc, #240]	; (8011850 <ppp_input+0x158>)
 801175e:	885b      	ldrh	r3, [r3, #2]
 8011760:	3301      	adds	r3, #1
 8011762:	b29a      	uxth	r2, r3
 8011764:	4b3a      	ldr	r3, [pc, #232]	; (8011850 <ppp_input+0x158>)
 8011766:	805a      	strh	r2, [r3, #2]
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 8011768:	8a7b      	ldrh	r3, [r7, #18]
 801176a:	f24c 0221 	movw	r2, #49185	; 0xc021
 801176e:	4293      	cmp	r3, r2
 8011770:	d004      	beq.n	801177c <ppp_input+0x84>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8011778:	2b09      	cmp	r3, #9
 801177a:	d14f      	bne.n	801181c <ppp_input+0x124>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011782:	2b07      	cmp	r3, #7
 8011784:	d809      	bhi.n	801179a <ppp_input+0xa2>
   && !(protocol == PPP_LCP
 8011786:	8a7b      	ldrh	r3, [r7, #18]
 8011788:	f24c 0221 	movw	r2, #49185	; 0xc021
 801178c:	4293      	cmp	r3, r2
 801178e:	d004      	beq.n	801179a <ppp_input+0xa2>
 8011790:	8a7b      	ldrh	r3, [r7, #18]
 8011792:	f24c 0223 	movw	r2, #49187	; 0xc023
 8011796:	4293      	cmp	r3, r2
 8011798:	d142      	bne.n	8011820 <ppp_input+0x128>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 801179a:	8a7b      	ldrh	r3, [r7, #18]
 801179c:	2b21      	cmp	r3, #33	; 0x21
 801179e:	d106      	bne.n	80117ae <ppp_input+0xb6>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a4:	4619      	mov	r1, r3
 80117a6:	6838      	ldr	r0, [r7, #0]
 80117a8:	f7f2 f800 	bl	80037ac <ip4_input>
      return;
 80117ac:	e046      	b.n	801183c <ppp_input+0x144>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80117ae:	2300      	movs	r3, #0
 80117b0:	617b      	str	r3, [r7, #20]
 80117b2:	e019      	b.n	80117e8 <ppp_input+0xf0>
        if (protp->protocol == protocol) {
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	881b      	ldrh	r3, [r3, #0]
 80117b8:	8a7a      	ldrh	r2, [r7, #18]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d111      	bne.n	80117e2 <ppp_input+0xea>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 80117be:	2100      	movs	r1, #0
 80117c0:	6838      	ldr	r0, [r7, #0]
 80117c2:	f7f4 fa5c 	bl	8005c7e <pbuf_coalesce>
 80117c6:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d129      	bne.n	8011824 <ppp_input+0x12c>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	6851      	ldr	r1, [r2, #4]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	8952      	ldrh	r2, [r2, #10]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	4798      	blx	r3
          goto out;
 80117e0:	e029      	b.n	8011836 <ppp_input+0x13e>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	3301      	adds	r3, #1
 80117e6:	617b      	str	r3, [r7, #20]
 80117e8:	4a1a      	ldr	r2, [pc, #104]	; (8011854 <ppp_input+0x15c>)
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117f0:	60fb      	str	r3, [r7, #12]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1dd      	bne.n	80117b4 <ppp_input+0xbc>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 80117f8:	2102      	movs	r1, #2
 80117fa:	6838      	ldr	r0, [r7, #0]
 80117fc:	f7f3 fe70 	bl	80054e0 <pbuf_add_header>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d110      	bne.n	8011828 <ppp_input+0x130>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	6859      	ldr	r1, [r3, #4]
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	895b      	ldrh	r3, [r3, #10]
 801180e:	461a      	mov	r2, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7fd feb0 	bl	800f576 <lcp_sprotrej>
    }
    break;
 8011816:	e008      	b.n	801182a <ppp_input+0x132>
    goto drop;
 8011818:	bf00      	nop
 801181a:	e006      	b.n	801182a <ppp_input+0x132>
    goto drop;
 801181c:	bf00      	nop
 801181e:	e004      	b.n	801182a <ppp_input+0x132>
    goto drop;
 8011820:	bf00      	nop
 8011822:	e002      	b.n	801182a <ppp_input+0x132>
            goto drop;
 8011824:	bf00      	nop
 8011826:	e000      	b.n	801182a <ppp_input+0x132>
        goto drop;
 8011828:	bf00      	nop
  }

drop:
  LINK_STATS_INC(link.drop);
 801182a:	4b09      	ldr	r3, [pc, #36]	; (8011850 <ppp_input+0x158>)
 801182c:	88db      	ldrh	r3, [r3, #6]
 801182e:	3301      	adds	r3, #1
 8011830:	b29a      	uxth	r2, r3
 8011832:	4b07      	ldr	r3, [pc, #28]	; (8011850 <ppp_input+0x158>)
 8011834:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f7f3 feb8 	bl	80055ac <pbuf_free>
}
 801183c:	3718      	adds	r7, #24
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	08016ec4 	.word	0x08016ec4
 8011848:	08016f80 	.word	0x08016f80
 801184c:	08016f08 	.word	0x08016f08
 8011850:	20002164 	.word	0x20002164
 8011854:	08017268 	.word	0x08017268

08011858 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	699b      	ldr	r3, [r3, #24]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	69d1      	ldr	r1, [r2, #28]
 801186c:	683a      	ldr	r2, [r7, #0]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	4798      	blx	r3
 8011872:	4603      	mov	r3, r0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	69d2      	ldr	r2, [r2, #28]
 801188e:	4611      	mov	r1, r2
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 80118b0:	bf00      	nop
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 80118bc:	b590      	push	{r4, r7, lr}
 80118be:	b087      	sub	sp, #28
 80118c0:	af02      	add	r7, sp, #8
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
 80118c8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	699b      	ldr	r3, [r3, #24]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00a      	beq.n	80118ea <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	699b      	ldr	r3, [r3, #24]
 80118d8:	695c      	ldr	r4, [r3, #20]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	69d9      	ldr	r1, [r3, #28]
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	9300      	str	r3, [sp, #0]
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	47a0      	blx	r4
  }

  return 0;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3714      	adds	r7, #20
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd90      	pop	{r4, r7, pc}

080118f4 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 80118f4:	b590      	push	{r4, r7, lr}
 80118f6:	b087      	sub	sp, #28
 80118f8:	af02      	add	r7, sp, #8
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	699b      	ldr	r3, [r3, #24]
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	699b      	ldr	r3, [r3, #24]
 8011910:	699c      	ldr	r4, [r3, #24]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	69d9      	ldr	r1, [r3, #28]
 8011916:	6a3b      	ldr	r3, [r7, #32]
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	47a0      	blx	r4
  }

  return 0;
 8011922:	2300      	movs	r3, #0
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	bd90      	pop	{r4, r7, pc}

0801192c <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b088      	sub	sp, #32
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
 8011938:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801194a:	f107 0314 	add.w	r3, r7, #20
 801194e:	f107 0218 	add.w	r2, r7, #24
 8011952:	f107 011c 	add.w	r1, r7, #28
 8011956:	f7f3 f9fb 	bl	8004d50 <netif_set_addr>
  return 1;
 801195a:	2301      	movs	r3, #1
}
 801195c:	4618      	mov	r0, r3
 801195e:	3720      	adds	r7, #32
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011974:	4b04      	ldr	r3, [pc, #16]	; (8011988 <cifaddr+0x24>)
 8011976:	4a05      	ldr	r2, [pc, #20]	; (801198c <cifaddr+0x28>)
 8011978:	4903      	ldr	r1, [pc, #12]	; (8011988 <cifaddr+0x24>)
 801197a:	f7f3 f9e9 	bl	8004d50 <netif_set_addr>
  return 1;
 801197e:	2301      	movs	r3, #1
}
 8011980:	4618      	mov	r0, r3
 8011982:	3710      	adds	r7, #16
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	080170a4 	.word	0x080170a4
 801198c:	080170a8 	.word	0x080170a8

08011990 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801199e:	f043 0308 	orr.w	r3, r3, #8
 80119a2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7f3 fa84 	bl	8004ec0 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a1b      	ldr	r3, [r3, #32]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80119c2:	4611      	mov	r1, r2
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	4798      	blx	r3
  return 1;
 80119cc:	2301      	movs	r3, #1
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b082      	sub	sp, #8
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80119e4:	f36f 03c3 	bfc	r3, #3, #1
 80119e8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7f3 fa91 	bl	8004f18 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 80119f6:	2301      	movs	r3, #1
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 8011a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	b292      	uxth	r2, r2
 8011a2a:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 8011a2c:	bf00      	nop
 8011a2e:	370c      	adds	r7, #12
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr

08011a38 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af02      	add	r7, sp, #8
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
 8011a44:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 8011a46:	4815      	ldr	r0, [pc, #84]	; (8011a9c <pppos_create+0x64>)
 8011a48:	f7f2 ff44 	bl	80048d4 <memp_malloc_pool>
 8011a4c:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <pppos_create+0x20>
    return NULL;
 8011a54:	2300      	movs	r3, #0
 8011a56:	e01d      	b.n	8011a94 <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	9300      	str	r3, [sp, #0]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	490f      	ldr	r1, [pc, #60]	; (8011aa0 <pppos_create+0x68>)
 8011a62:	68f8      	ldr	r0, [r7, #12]
 8011a64:	f7ff fd90 	bl	8011588 <ppp_new>
 8011a68:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d105      	bne.n	8011a7c <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8011a70:	6979      	ldr	r1, [r7, #20]
 8011a72:	480a      	ldr	r0, [pc, #40]	; (8011a9c <pppos_create+0x64>)
 8011a74:	f7f2 ff9a 	bl	80049ac <memp_free_pool>
    return NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	e00b      	b.n	8011a94 <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 8011a7c:	2260      	movs	r2, #96	; 0x60
 8011a7e:	2100      	movs	r1, #0
 8011a80:	6978      	ldr	r0, [r7, #20]
 8011a82:	f001 fcd8 	bl	8013436 <memset>
  pppos->ppp = ppp;
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	693a      	ldr	r2, [r7, #16]
 8011a8a:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	605a      	str	r2, [r3, #4]
  return ppp;
 8011a92:	693b      	ldr	r3, [r7, #16]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3718      	adds	r7, #24
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	08017278 	.word	0x08017278
 8011aa0:	0801728c 	.word	0x0801728c

08011aa4 <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08c      	sub	sp, #48	; 0x30
 8011aa8:	af02      	add	r7, sp, #8
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8011ab4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011abc:	2000      	movs	r0, #0
 8011abe:	f7f3 fb0b 	bl	80050d8 <pbuf_alloc>
 8011ac2:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d111      	bne.n	8011aee <pppos_write+0x4a>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 8011aca:	4b34      	ldr	r3, [pc, #208]	; (8011b9c <pppos_write+0xf8>)
 8011acc:	899b      	ldrh	r3, [r3, #12]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	4b32      	ldr	r3, [pc, #200]	; (8011b9c <pppos_write+0xf8>)
 8011ad4:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 8011ad6:	4b31      	ldr	r3, [pc, #196]	; (8011b9c <pppos_write+0xf8>)
 8011ad8:	88db      	ldrh	r3, [r3, #6]
 8011ada:	3301      	adds	r3, #1
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	4b2f      	ldr	r3, [pc, #188]	; (8011b9c <pppos_write+0xf8>)
 8011ae0:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7f3 fd62 	bl	80055ac <pbuf_free>
    return ERR_MEM;
 8011ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aec:	e051      	b.n	8011b92 <pppos_write+0xee>
  }

  /* Empty the buffer */
  nb->len = 0;
 8011aee:	69bb      	ldr	r3, [r7, #24]
 8011af0:	2200      	movs	r2, #0
 8011af2:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	895a      	ldrh	r2, [r3, #10]
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8011b02:	f7ef fbd3 	bl	80012ac <sys_now>
 8011b06:	4602      	mov	r2, r0
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	2b63      	cmp	r3, #99	; 0x63
 8011b10:	d90d      	bls.n	8011b2e <pppos_write+0x8a>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8011b12:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8011b16:	2300      	movs	r3, #0
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	237e      	movs	r3, #126	; 0x7e
 8011b20:	69ba      	ldr	r2, [r7, #24]
 8011b22:	69f8      	ldr	r0, [r7, #28]
 8011b24:	f000 fbf0 	bl	8012308 <pppos_output_append>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 8011b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b32:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	895b      	ldrh	r3, [r3, #10]
 8011b3e:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 8011b40:	e012      	b.n	8011b68 <pppos_write+0xc4>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	627a      	str	r2, [r7, #36]	; 0x24
 8011b48:	781a      	ldrb	r2, [r3, #0]
 8011b4a:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8011b4e:	f107 0316 	add.w	r3, r7, #22
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	2301      	movs	r3, #1
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	69ba      	ldr	r2, [r7, #24]
 8011b5c:	69f8      	ldr	r0, [r7, #28]
 8011b5e:	f000 fbd3 	bl	8012308 <pppos_output_append>
 8011b62:	4603      	mov	r3, r0
 8011b64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 8011b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b6a:	1e5a      	subs	r2, r3, #1
 8011b6c:	847a      	strh	r2, [r7, #34]	; 0x22
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1e7      	bne.n	8011b42 <pppos_write+0x9e>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8011b72:	f107 0316 	add.w	r3, r7, #22
 8011b76:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8011b7a:	69ba      	ldr	r2, [r7, #24]
 8011b7c:	69f8      	ldr	r0, [r7, #28]
 8011b7e:	f000 fc49 	bl	8012414 <pppos_output_last>
 8011b82:	4603      	mov	r3, r0
 8011b84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7f3 fd0f 	bl	80055ac <pbuf_free>
  return err;
 8011b8e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3728      	adds	r7, #40	; 0x28
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20002164 	.word	0x20002164

08011ba0 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b08c      	sub	sp, #48	; 0x30
 8011ba4:	af02      	add	r7, sp, #8
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 8011bb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011bba:	2000      	movs	r0, #0
 8011bbc:	f7f3 fa8c 	bl	80050d8 <pbuf_alloc>
 8011bc0:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d10e      	bne.n	8011be6 <pppos_netif_output+0x46>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 8011bc8:	4b5f      	ldr	r3, [pc, #380]	; (8011d48 <pppos_netif_output+0x1a8>)
 8011bca:	899b      	ldrh	r3, [r3, #12]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	4b5d      	ldr	r3, [pc, #372]	; (8011d48 <pppos_netif_output+0x1a8>)
 8011bd2:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 8011bd4:	4b5c      	ldr	r3, [pc, #368]	; (8011d48 <pppos_netif_output+0x1a8>)
 8011bd6:	88db      	ldrh	r3, [r3, #6]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	4b5a      	ldr	r3, [pc, #360]	; (8011d48 <pppos_netif_output+0x1a8>)
 8011bde:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 8011be0:	f04f 33ff 	mov.w	r3, #4294967295
 8011be4:	e0ac      	b.n	8011d40 <pppos_netif_output+0x1a0>
  }

  /* Empty the buffer */
  nb->len = 0;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	2200      	movs	r2, #0
 8011bea:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	891a      	ldrh	r2, [r3, #8]
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8011bfa:	f7ef fb57 	bl	80012ac <sys_now>
 8011bfe:	4602      	mov	r2, r0
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	2b63      	cmp	r3, #99	; 0x63
 8011c08:	d90d      	bls.n	8011c26 <pppos_netif_output+0x86>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8011c0a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011c0e:	2300      	movs	r3, #0
 8011c10:	9301      	str	r3, [sp, #4]
 8011c12:	2300      	movs	r3, #0
 8011c14:	9300      	str	r3, [sp, #0]
 8011c16:	237e      	movs	r3, #126	; 0x7e
 8011c18:	697a      	ldr	r2, [r7, #20]
 8011c1a:	69b8      	ldr	r0, [r7, #24]
 8011c1c:	f000 fb74 	bl	8012308 <pppos_output_append>
 8011c20:	4603      	mov	r3, r0
 8011c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 8011c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c2a:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 8011c2c:	69bb      	ldr	r3, [r7, #24]
 8011c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c32:	f003 0304 	and.w	r3, r3, #4
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d11d      	bne.n	8011c78 <pppos_netif_output+0xd8>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 8011c3c:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011c40:	f107 0312 	add.w	r3, r7, #18
 8011c44:	9301      	str	r3, [sp, #4]
 8011c46:	2301      	movs	r3, #1
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	23ff      	movs	r3, #255	; 0xff
 8011c4c:	697a      	ldr	r2, [r7, #20]
 8011c4e:	69b8      	ldr	r0, [r7, #24]
 8011c50:	f000 fb5a 	bl	8012308 <pppos_output_append>
 8011c54:	4603      	mov	r3, r0
 8011c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 8011c5a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011c5e:	f107 0312 	add.w	r3, r7, #18
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	2301      	movs	r3, #1
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	2303      	movs	r3, #3
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	69b8      	ldr	r0, [r7, #24]
 8011c6e:	f000 fb4b 	bl	8012308 <pppos_output_append>
 8011c72:	4603      	mov	r3, r0
 8011c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c7e:	f003 0302 	and.w	r3, r3, #2
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d002      	beq.n	8011c8e <pppos_netif_output+0xee>
 8011c88:	887b      	ldrh	r3, [r7, #2]
 8011c8a:	2bff      	cmp	r3, #255	; 0xff
 8011c8c:	d912      	bls.n	8011cb4 <pppos_netif_output+0x114>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 8011c8e:	887b      	ldrh	r3, [r7, #2]
 8011c90:	0a1b      	lsrs	r3, r3, #8
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011c9a:	f107 0312 	add.w	r3, r7, #18
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	697a      	ldr	r2, [r7, #20]
 8011ca8:	69b8      	ldr	r0, [r7, #24]
 8011caa:	f000 fb2d 	bl	8012308 <pppos_output_append>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 8011cb4:	887b      	ldrh	r3, [r7, #2]
 8011cb6:	b2da      	uxtb	r2, r3
 8011cb8:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011cbc:	f107 0312 	add.w	r3, r7, #18
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	697a      	ldr	r2, [r7, #20]
 8011cca:	69b8      	ldr	r0, [r7, #24]
 8011ccc:	f000 fb1c 	bl	8012308 <pppos_output_append>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8011cda:	e021      	b.n	8011d20 <pppos_netif_output+0x180>
    u16_t n = p->len;
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	895b      	ldrh	r3, [r3, #10]
 8011ce0:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 8011ce8:	e012      	b.n	8011d10 <pppos_netif_output+0x170>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	1c5a      	adds	r2, r3, #1
 8011cee:	61fa      	str	r2, [r7, #28]
 8011cf0:	781a      	ldrb	r2, [r3, #0]
 8011cf2:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011cf6:	f107 0312 	add.w	r3, r7, #18
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	4613      	mov	r3, r2
 8011d02:	697a      	ldr	r2, [r7, #20]
 8011d04:	69b8      	ldr	r0, [r7, #24]
 8011d06:	f000 faff 	bl	8012308 <pppos_output_append>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 8011d10:	8c3b      	ldrh	r3, [r7, #32]
 8011d12:	1e5a      	subs	r2, r3, #1
 8011d14:	843a      	strh	r2, [r7, #32]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d1e7      	bne.n	8011cea <pppos_netif_output+0x14a>
  for(p = pb; p; p = p->next) {
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d1da      	bne.n	8011cdc <pppos_netif_output+0x13c>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 8011d26:	f107 0312 	add.w	r3, r7, #18
 8011d2a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	69b8      	ldr	r0, [r7, #24]
 8011d32:	f000 fb6f 	bl	8012414 <pppos_output_last>
 8011d36:	4603      	mov	r3, r0
 8011d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 8011d3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3728      	adds	r7, #40	; 0x28
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	20002164 	.word	0x20002164

08011d4c <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	3308      	adds	r3, #8
 8011d5e:	2258      	movs	r2, #88	; 0x58
 8011d60:	2100      	movs	r1, #0
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 fb67 	bl	8013436 <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2260      	movs	r2, #96	; 0x60
 8011d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2260      	movs	r2, #96	; 0x60
 8011d74:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8011d7c:	f043 0301 	orr.w	r3, r3, #1
 8011d80:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7ff fc85 	bl	8011694 <ppp_start>
}
 8011d8a:	bf00      	nop
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
 8011d9a:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8011da6:	f36f 0300 	bfc	r3, #0, #1
 8011daa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f000 fa70 	bl	8012294 <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7ff fc7f 	bl	80116b8 <ppp_link_end>
}
 8011dba:	bf00      	nop
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8011dd2:	68f9      	ldr	r1, [r7, #12]
 8011dd4:	4803      	ldr	r0, [pc, #12]	; (8011de4 <pppos_destroy+0x20>)
 8011dd6:	f7f2 fde9 	bl	80049ac <memp_free_pool>
  return ERR_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	08017278 	.word	0x08017278

08011de8 <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08c      	sub	sp, #48	; 0x30
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	69db      	ldr	r3, [r3, #28]
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 8011dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e04:	f003 0301 	and.w	r3, r3, #1
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f000 81d9 	beq.w	80121c2 <pppos_input+0x3da>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 8011e10:	e1d0      	b.n	80121b4 <pppos_input+0x3cc>
    cur_char = *s_u8++;
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	1c5a      	adds	r2, r3, #1
 8011e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8011e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e22:	08db      	lsrs	r3, r3, #3
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	461a      	mov	r2, r3
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e30:	b25a      	sxtb	r2, r3
 8011e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e36:	f003 0307 	and.w	r3, r3, #7
 8011e3a:	2101      	movs	r1, #1
 8011e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8011e40:	b25b      	sxtb	r3, r3
 8011e42:	4013      	ands	r3, r2
 8011e44:	b25b      	sxtb	r3, r3
 8011e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 8011e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f000 80a7 	beq.w	8011fa2 <pppos_input+0x1ba>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 8011e54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e58:	2b7d      	cmp	r3, #125	; 0x7d
 8011e5a:	d104      	bne.n	8011e66 <pppos_input+0x7e>
        pppos->in_escaped = 1;
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5e:	2201      	movs	r2, #1
 8011e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8011e64:	e1a6      	b.n	80121b4 <pppos_input+0x3cc>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 8011e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e6a:	2b7e      	cmp	r3, #126	; 0x7e
 8011e6c:	f040 81a2 	bne.w	80121b4 <pppos_input+0x3cc>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	f240 8085 	bls.w	8011f86 <pppos_input+0x19e>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011e82:	2b04      	cmp	r3, #4
 8011e84:	d809      	bhi.n	8011e9a <pppos_input+0xb2>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
 8011e86:	4ba5      	ldr	r3, [pc, #660]	; (801211c <pppos_input+0x334>)
 8011e88:	895b      	ldrh	r3, [r3, #10]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	4ba3      	ldr	r3, [pc, #652]	; (801211c <pppos_input+0x334>)
 8011e90:	815a      	strh	r2, [r3, #10]
          pppos_input_drop(pppos);
 8011e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e94:	f000 fa24 	bl	80122e0 <pppos_input_drop>
 8011e98:	e075      	b.n	8011f86 <pppos_input+0x19e>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011ea0:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d009      	beq.n	8011ebc <pppos_input+0xd4>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
 8011ea8:	4b9c      	ldr	r3, [pc, #624]	; (801211c <pppos_input+0x334>)
 8011eaa:	891b      	ldrh	r3, [r3, #8]
 8011eac:	3301      	adds	r3, #1
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	4b9a      	ldr	r3, [pc, #616]	; (801211c <pppos_input+0x334>)
 8011eb2:	811a      	strh	r2, [r3, #8]
          pppos_input_drop(pppos);
 8011eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eb6:	f000 fa13 	bl	80122e0 <pppos_input_drop>
 8011eba:	e064      	b.n	8011f86 <pppos_input+0x19e>
        } else if (!pppos->in_tail) {
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d109      	bne.n	8011ed8 <pppos_input+0xf0>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
 8011ec4:	4b95      	ldr	r3, [pc, #596]	; (801211c <pppos_input+0x334>)
 8011ec6:	88db      	ldrh	r3, [r3, #6]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	4b93      	ldr	r3, [pc, #588]	; (801211c <pppos_input+0x334>)
 8011ece:	80da      	strh	r2, [r3, #6]
          pppos_input_drop(pppos);
 8011ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ed2:	f000 fa05 	bl	80122e0 <pppos_input_drop>
 8011ed6:	e056      	b.n	8011f86 <pppos_input+0x19e>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011edc:	895b      	ldrh	r3, [r3, #10]
 8011ede:	2b02      	cmp	r3, #2
 8011ee0:	d91c      	bls.n	8011f1c <pppos_input+0x134>
            pppos->in_tail->len -= 2;
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ee8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011eea:	8952      	ldrh	r2, [r2, #10]
 8011eec:	3a02      	subs	r2, #2
 8011eee:	b292      	uxth	r2, r2
 8011ef0:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011efa:	8952      	ldrh	r2, [r2, #10]
 8011efc:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d027      	beq.n	8011f5a <pppos_input+0x172>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f12:	4619      	mov	r1, r3
 8011f14:	4610      	mov	r0, r2
 8011f16:	f7f3 fc11 	bl	800573c <pbuf_cat>
 8011f1a:	e01e      	b.n	8011f5a <pppos_input+0x172>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f22:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011f24:	8952      	ldrh	r2, [r2, #10]
 8011f26:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d007      	beq.n	8011f44 <pppos_input+0x15c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	4610      	mov	r0, r2
 8011f40:	f7f3 fbfc 	bl	800573c <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 8011f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f4c:	891b      	ldrh	r3, [r3, #8]
 8011f4e:	3b02      	subs	r3, #2
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4619      	mov	r1, r3
 8011f54:	4610      	mov	r0, r2
 8011f56:	f7f3 f9b1 	bl	80052bc <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f5e:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	2200      	movs	r2, #0
 8011f64:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 8011f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f68:	2200      	movs	r2, #0
 8011f6a:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 8011f6c:	6939      	ldr	r1, [r7, #16]
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f7ff fbc2 	bl	80116f8 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 8011f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f7a:	f003 0301 	and.w	r3, r3, #1
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f000 8120 	beq.w	80121c6 <pppos_input+0x3de>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	2201      	movs	r2, #1
 8011f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8011f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8011fa0:	e108      	b.n	80121b4 <pppos_input+0x3cc>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d009      	beq.n	8011fc0 <pppos_input+0x1d8>
        pppos->in_escaped = 0;
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8011fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fb8:	f083 0320 	eor.w	r3, r3, #32
 8011fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011fc6:	2b05      	cmp	r3, #5
 8011fc8:	f200 80de 	bhi.w	8012188 <pppos_input+0x3a0>
 8011fcc:	a201      	add	r2, pc, #4	; (adr r2, 8011fd4 <pppos_input+0x1ec>)
 8011fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd2:	bf00      	nop
 8011fd4:	08012189 	.word	0x08012189
 8011fd8:	08011fed 	.word	0x08011fed
 8011fdc:	08011fff 	.word	0x08011fff
 8011fe0:	08012011 	.word	0x08012011
 8011fe4:	0801204d 	.word	0x0801204d
 8011fe8:	0801206d 	.word	0x0801206d
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 8011fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ff0:	2bff      	cmp	r3, #255	; 0xff
 8011ff2:	d104      	bne.n	8011ffe <pppos_input+0x216>
            pppos->in_state = PDCONTROL;
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff6:	2202      	movs	r2, #2
 8011ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8011ffc:	e0c5      	b.n	801218a <pppos_input+0x3a2>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 8011ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012002:	2b03      	cmp	r3, #3
 8012004:	d104      	bne.n	8012010 <pppos_input+0x228>
            pppos->in_state = PDPROTOCOL1;
 8012006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012008:	2203      	movs	r2, #3
 801200a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 801200e:	e0bc      	b.n	801218a <pppos_input+0x3a2>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 8012010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012014:	f003 0301 	and.w	r3, r3, #1
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00a      	beq.n	8012032 <pppos_input+0x24a>
            pppos->in_protocol = cur_char;
 801201c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012020:	b29a      	uxth	r2, r3
 8012022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 8012028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202a:	2205      	movs	r2, #5
 801202c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8012030:	e0ab      	b.n	801218a <pppos_input+0x3a2>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8012032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012036:	b29b      	uxth	r3, r3
 8012038:	021b      	lsls	r3, r3, #8
 801203a:	b29a      	uxth	r2, r3
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	2204      	movs	r2, #4
 8012046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 801204a:	e09e      	b.n	801218a <pppos_input+0x3a2>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 801204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012056:	b29b      	uxth	r3, r3
 8012058:	4313      	orrs	r3, r2
 801205a:	b29a      	uxth	r2, r3
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	2205      	movs	r2, #5
 8012066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 801206a:	e08e      	b.n	801218a <pppos_input+0x3a2>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012070:	2b00      	cmp	r3, #0
 8012072:	d005      	beq.n	8012080 <pppos_input+0x298>
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012078:	895b      	ldrh	r3, [r3, #10]
 801207a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801207e:	d174      	bne.n	801216a <pppos_input+0x382>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8012080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012084:	2b00      	cmp	r3, #0
 8012086:	d02d      	beq.n	80120e4 <pppos_input+0x2fc>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8012088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801208e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012090:	8952      	ldrh	r2, [r2, #10]
 8012092:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801209c:	429a      	cmp	r2, r3
 801209e:	d00a      	beq.n	80120b6 <pppos_input+0x2ce>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 80120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120a8:	4619      	mov	r1, r3
 80120aa:	4610      	mov	r0, r2
 80120ac:	f7f3 fb46 	bl	800573c <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 80120b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b2:	2200      	movs	r2, #0
 80120b4:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 80120b6:	f240 6374 	movw	r3, #1652	; 0x674
 80120ba:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 80120bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120c0:	891b      	ldrh	r3, [r3, #8]
 80120c2:	8c3a      	ldrh	r2, [r7, #32]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d20d      	bcs.n	80120e4 <pppos_input+0x2fc>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
 80120c8:	4b14      	ldr	r3, [pc, #80]	; (801211c <pppos_input+0x334>)
 80120ca:	895b      	ldrh	r3, [r3, #10]
 80120cc:	3301      	adds	r3, #1
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	4b12      	ldr	r3, [pc, #72]	; (801211c <pppos_input+0x334>)
 80120d2:	815a      	strh	r2, [r3, #10]
                pppos_input_drop(pppos);
 80120d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120d6:	f000 f903 	bl	80122e0 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	2200      	movs	r2, #0
 80120de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 80120e2:	e052      	b.n	801218a <pppos_input+0x3a2>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 80120e4:	2300      	movs	r3, #0
 80120e6:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 80120e8:	8bfb      	ldrh	r3, [r7, #30]
 80120ea:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80120ee:	4619      	mov	r1, r3
 80120f0:	2000      	movs	r0, #0
 80120f2:	f7f2 fff1 	bl	80050d8 <pbuf_alloc>
 80120f6:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d110      	bne.n	8012120 <pppos_input+0x338>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
 80120fe:	4b07      	ldr	r3, [pc, #28]	; (801211c <pppos_input+0x334>)
 8012100:	899b      	ldrh	r3, [r3, #12]
 8012102:	3301      	adds	r3, #1
 8012104:	b29a      	uxth	r2, r3
 8012106:	4b05      	ldr	r3, [pc, #20]	; (801211c <pppos_input+0x334>)
 8012108:	819a      	strh	r2, [r3, #12]
              pppos_input_drop(pppos);
 801210a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801210c:	f000 f8e8 	bl	80122e0 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	2200      	movs	r2, #0
 8012114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8012118:	e037      	b.n	801218a <pppos_input+0x3a2>
 801211a:	bf00      	nop
 801211c:	20002164 	.word	0x20002164
            }
            if (pppos->in_head == NULL) {
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012124:	2b00      	cmp	r3, #0
 8012126:	d11d      	bne.n	8012164 <pppos_input+0x37c>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	8bfb      	ldrh	r3, [r7, #30]
 801212e:	4413      	add	r3, r2
 8012130:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	3302      	adds	r3, #2
 8012138:	b29a      	uxth	r2, r3
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	617a      	str	r2, [r7, #20]
 8012144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012146:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801214a:	0a12      	lsrs	r2, r2, #8
 801214c:	b292      	uxth	r2, r2
 801214e:	b2d2      	uxtb	r2, r2
 8012150:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012158:	b2da      	uxtb	r2, r3
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	69ba      	ldr	r2, [r7, #24]
 8012162:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	69ba      	ldr	r2, [r7, #24]
 8012168:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801216e:	6859      	ldr	r1, [r3, #4]
 8012170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012174:	895a      	ldrh	r2, [r3, #10]
 8012176:	1c50      	adds	r0, r2, #1
 8012178:	b280      	uxth	r0, r0
 801217a:	8158      	strh	r0, [r3, #10]
 801217c:	4613      	mov	r3, r2
 801217e:	440b      	add	r3, r1
 8012180:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012184:	701a      	strb	r2, [r3, #0]
          break;
 8012186:	e000      	b.n	801218a <pppos_input+0x3a2>
        default:
          break;
 8012188:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012190:	0a1b      	lsrs	r3, r3, #8
 8012192:	b29a      	uxth	r2, r3
 8012194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801219a:	4619      	mov	r1, r3
 801219c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80121a0:	404b      	eors	r3, r1
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	490a      	ldr	r1, [pc, #40]	; (80121d0 <pppos_input+0x3e8>)
 80121a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80121aa:	4053      	eors	r3, r2
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	1e5a      	subs	r2, r3, #1
 80121b8:	607a      	str	r2, [r7, #4]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f73f ae29 	bgt.w	8011e12 <pppos_input+0x2a>
 80121c0:	e002      	b.n	80121c8 <pppos_input+0x3e0>
    return;
 80121c2:	bf00      	nop
 80121c4:	e000      	b.n	80121c8 <pppos_input+0x3e0>
            break;
 80121c6:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 80121c8:	3730      	adds	r7, #48	; 0x30
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	080172a8 	.word	0x080172a8

080121d4 <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b087      	sub	sp, #28
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	f003 0301 	and.w	r3, r3, #1
 80121ee:	b2d9      	uxtb	r1, r3
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80121f6:	f361 0341 	bfi	r3, r1, #1, #1
 80121fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	b2db      	uxtb	r3, r3
 8012202:	f003 0301 	and.w	r3, r3, #1
 8012206:	b2d9      	uxtb	r1, r3
 8012208:	693a      	ldr	r2, [r7, #16]
 801220a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 801220e:	f361 0382 	bfi	r3, r1, #2, #1
 8012212:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8012216:	2300      	movs	r3, #0
 8012218:	617b      	str	r3, [r7, #20]
 801221a:	e00e      	b.n	801223a <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	00db      	lsls	r3, r3, #3
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	fa22 f303 	lsr.w	r3, r2, r3
 8012226:	b2d9      	uxtb	r1, r3
 8012228:	693a      	ldr	r2, [r7, #16]
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	4413      	add	r3, r2
 801222e:	330c      	adds	r3, #12
 8012230:	460a      	mov	r2, r1
 8012232:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	3301      	adds	r3, #1
 8012238:	617b      	str	r3, [r7, #20]
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	2b03      	cmp	r3, #3
 801223e:	dded      	ble.n	801221c <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8012240:	bf00      	nop
 8012242:	371c      	adds	r7, #28
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 801224c:	b480      	push	{r7}
 801224e:	b087      	sub	sp, #28
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
 8012258:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 801225e:	2300      	movs	r3, #0
 8012260:	617b      	str	r3, [r7, #20]
 8012262:	e00e      	b.n	8012282 <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	00db      	lsls	r3, r3, #3
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	fa22 f303 	lsr.w	r3, r2, r3
 801226e:	b2d9      	uxtb	r1, r3
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	4413      	add	r3, r2
 8012276:	332d      	adds	r3, #45	; 0x2d
 8012278:	460a      	mov	r2, r1
 801227a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	3301      	adds	r3, #1
 8012280:	617b      	str	r3, [r7, #20]
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	2b03      	cmp	r3, #3
 8012286:	dded      	ble.n	8012264 <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8012288:	bf00      	nop
 801228a:	371c      	adds	r7, #28
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr

08012294 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d016      	beq.n	80122d2 <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00a      	beq.n	80122c2 <pppos_input_free_current_packet+0x2e>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d004      	beq.n	80122c2 <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122bc:	4618      	mov	r0, r3
 80122be:	f7f3 f975 	bl	80055ac <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7f3 f970 	bl	80055ac <pbuf_free>
    pppos->in_head = NULL;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	655a      	str	r2, [r3, #84]	; 0x54
}
 80122d8:	bf00      	nop
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff ffd3 	bl	8012294 <pppos_input_free_current_packet>
#if VJ_SUPPORT
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
 80122ee:	4b05      	ldr	r3, [pc, #20]	; (8012304 <pppos_input_drop+0x24>)
 80122f0:	88db      	ldrh	r3, [r3, #6]
 80122f2:	3301      	adds	r3, #1
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	4b03      	ldr	r3, [pc, #12]	; (8012304 <pppos_input_drop+0x24>)
 80122f8:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 80122fa:	bf00      	nop
 80122fc:	3708      	adds	r7, #8
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	20002164 	.word	0x20002164

08012308 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8012308:	b590      	push	{r4, r7, lr}
 801230a:	b087      	sub	sp, #28
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	461a      	mov	r2, r3
 8012314:	460b      	mov	r3, r1
 8012316:	72fb      	strb	r3, [r7, #11]
 8012318:	4613      	mov	r3, r2
 801231a:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 801231c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <pppos_output_append+0x22>
    return err;
 8012324:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012328:	e06e      	b.n	8012408 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	895b      	ldrh	r3, [r3, #10]
 801232e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012332:	2b01      	cmp	r3, #1
 8012334:	dc19      	bgt.n	801236a <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	685c      	ldr	r4, [r3, #4]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	6818      	ldr	r0, [r3, #0]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6859      	ldr	r1, [r3, #4]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	895b      	ldrh	r3, [r3, #10]
 8012346:	461a      	mov	r2, r3
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234e:	47a0      	blx	r4
 8012350:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	895b      	ldrh	r3, [r3, #10]
 8012356:	461a      	mov	r2, r3
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	429a      	cmp	r2, r3
 801235c:	d002      	beq.n	8012364 <pppos_output_append+0x5c>
      return ERR_IF;
 801235e:	f06f 030b 	mvn.w	r3, #11
 8012362:	e051      	b.n	8012408 <pppos_output_append+0x100>
    }
    nb->len = 0;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2200      	movs	r2, #0
 8012368:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d010      	beq.n	8012392 <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	0a1b      	lsrs	r3, r3, #8
 8012376:	b29a      	uxth	r2, r3
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	4619      	mov	r1, r3
 801237e:	7abb      	ldrb	r3, [r7, #10]
 8012380:	404b      	eors	r3, r1
 8012382:	b2db      	uxtb	r3, r3
 8012384:	4922      	ldr	r1, [pc, #136]	; (8012410 <pppos_output_append+0x108>)
 8012386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801238a:	4053      	eors	r3, r2
 801238c:	b29a      	uxth	r2, r3
 801238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012390:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8012392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012396:	2b00      	cmp	r3, #0
 8012398:	d02a      	beq.n	80123f0 <pppos_output_append+0xe8>
 801239a:	7abb      	ldrb	r3, [r7, #10]
 801239c:	08db      	lsrs	r3, r3, #3
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	461a      	mov	r2, r3
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	4413      	add	r3, r2
 80123a6:	7b1b      	ldrb	r3, [r3, #12]
 80123a8:	461a      	mov	r2, r3
 80123aa:	7abb      	ldrb	r3, [r7, #10]
 80123ac:	f003 0307 	and.w	r3, r3, #7
 80123b0:	fa42 f303 	asr.w	r3, r2, r3
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d019      	beq.n	80123f0 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	895b      	ldrh	r3, [r3, #10]
 80123c4:	1c59      	adds	r1, r3, #1
 80123c6:	b288      	uxth	r0, r1
 80123c8:	6879      	ldr	r1, [r7, #4]
 80123ca:	8148      	strh	r0, [r1, #10]
 80123cc:	4413      	add	r3, r2
 80123ce:	227d      	movs	r2, #125	; 0x7d
 80123d0:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	685a      	ldr	r2, [r3, #4]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	895b      	ldrh	r3, [r3, #10]
 80123da:	1c59      	adds	r1, r3, #1
 80123dc:	b288      	uxth	r0, r1
 80123de:	6879      	ldr	r1, [r7, #4]
 80123e0:	8148      	strh	r0, [r1, #10]
 80123e2:	4413      	add	r3, r2
 80123e4:	7aba      	ldrb	r2, [r7, #10]
 80123e6:	f082 0220 	eor.w	r2, r2, #32
 80123ea:	b2d2      	uxtb	r2, r2
 80123ec:	701a      	strb	r2, [r3, #0]
 80123ee:	e00a      	b.n	8012406 <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	685a      	ldr	r2, [r3, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	895b      	ldrh	r3, [r3, #10]
 80123f8:	1c59      	adds	r1, r3, #1
 80123fa:	b288      	uxth	r0, r1
 80123fc:	6879      	ldr	r1, [r7, #4]
 80123fe:	8148      	strh	r0, [r1, #10]
 8012400:	4413      	add	r3, r2
 8012402:	7aba      	ldrb	r2, [r7, #10]
 8012404:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 8012406:	2300      	movs	r3, #0
}
 8012408:	4618      	mov	r0, r3
 801240a:	371c      	adds	r7, #28
 801240c:	46bd      	mov	sp, r7
 801240e:	bd90      	pop	{r4, r7, pc}
 8012410:	080172a8 	.word	0x080172a8

08012414 <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 8012414:	b590      	push	{r4, r7, lr}
 8012416:	b089      	sub	sp, #36	; 0x24
 8012418:	af02      	add	r7, sp, #8
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	607a      	str	r2, [r7, #4]
 801241e:	603b      	str	r3, [r7, #0]
 8012420:	460b      	mov	r3, r1
 8012422:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	b2db      	uxtb	r3, r3
 8012430:	43db      	mvns	r3, r3
 8012432:	b2da      	uxtb	r2, r3
 8012434:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012438:	2300      	movs	r3, #0
 801243a:	9301      	str	r3, [sp, #4]
 801243c:	2301      	movs	r3, #1
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	4613      	mov	r3, r2
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7ff ff5f 	bl	8012308 <pppos_output_append>
 801244a:	4603      	mov	r3, r0
 801244c:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	43db      	mvns	r3, r3
 8012454:	121b      	asrs	r3, r3, #8
 8012456:	b2da      	uxtb	r2, r3
 8012458:	f997 100b 	ldrsb.w	r1, [r7, #11]
 801245c:	2300      	movs	r3, #0
 801245e:	9301      	str	r3, [sp, #4]
 8012460:	2301      	movs	r3, #1
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	4613      	mov	r3, r2
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f7ff ff4d 	bl	8012308 <pppos_output_append>
 801246e:	4603      	mov	r3, r0
 8012470:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012472:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012476:	2300      	movs	r3, #0
 8012478:	9301      	str	r3, [sp, #4]
 801247a:	2300      	movs	r3, #0
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	237e      	movs	r3, #126	; 0x7e
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7ff ff40 	bl	8012308 <pppos_output_append>
 8012488:	4603      	mov	r3, r0
 801248a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 801248c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d128      	bne.n	80124e6 <pppos_output_last+0xd2>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	895b      	ldrh	r3, [r3, #10]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d014      	beq.n	80124c6 <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	685c      	ldr	r4, [r3, #4]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6859      	ldr	r1, [r3, #4]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	895b      	ldrh	r3, [r3, #10]
 80124a8:	461a      	mov	r2, r3
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ae:	6978      	ldr	r0, [r7, #20]
 80124b0:	47a0      	blx	r4
 80124b2:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	895b      	ldrh	r3, [r3, #10]
 80124b8:	461a      	mov	r2, r3
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d002      	beq.n	80124c6 <pppos_output_last+0xb2>
      err = ERR_IF;
 80124c0:	23f4      	movs	r3, #244	; 0xf4
 80124c2:	72fb      	strb	r3, [r7, #11]
      goto failed;
 80124c4:	e010      	b.n	80124e8 <pppos_output_last+0xd4>
    }
  }

  pppos->last_xmit = sys_now();
 80124c6:	f7ee fef1 	bl	80012ac <sys_now>
 80124ca:	4602      	mov	r2, r0
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
 80124d0:	4b11      	ldr	r3, [pc, #68]	; (8012518 <pppos_output_last+0x104>)
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	3301      	adds	r3, #1
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	4b0f      	ldr	r3, [pc, #60]	; (8012518 <pppos_output_last+0x104>)
 80124da:	801a      	strh	r2, [r3, #0]
  pbuf_free(nb);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7f3 f865 	bl	80055ac <pbuf_free>
  return ERR_OK;
 80124e2:	2300      	movs	r3, #0
 80124e4:	e014      	b.n	8012510 <pppos_output_last+0xfc>
    goto failed;
 80124e6:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2200      	movs	r2, #0
 80124ec:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
 80124ee:	4b0a      	ldr	r3, [pc, #40]	; (8012518 <pppos_output_last+0x104>)
 80124f0:	8a9b      	ldrh	r3, [r3, #20]
 80124f2:	3301      	adds	r3, #1
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	4b08      	ldr	r3, [pc, #32]	; (8012518 <pppos_output_last+0x104>)
 80124f8:	829a      	strh	r2, [r3, #20]
  LINK_STATS_INC(link.drop);
 80124fa:	4b07      	ldr	r3, [pc, #28]	; (8012518 <pppos_output_last+0x104>)
 80124fc:	88db      	ldrh	r3, [r3, #6]
 80124fe:	3301      	adds	r3, #1
 8012500:	b29a      	uxth	r2, r3
 8012502:	4b05      	ldr	r3, [pc, #20]	; (8012518 <pppos_output_last+0x104>)
 8012504:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7f3 f850 	bl	80055ac <pbuf_free>
  return err;
 801250c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012510:	4618      	mov	r0, r3
 8012512:	371c      	adds	r7, #28
 8012514:	46bd      	mov	sp, r7
 8012516:	bd90      	pop	{r4, r7, pc}
 8012518:	20002164 	.word	0x20002164

0801251c <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2200      	movs	r2, #0
 801254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d03f      	beq.n	80125ee <upap_authwithpeer+0x92>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d03c      	beq.n	80125ee <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 801257a:	68b8      	ldr	r0, [r7, #8]
 801257c:	f7ed fe28 	bl	80001d0 <strlen>
 8012580:	4603      	mov	r3, r0
 8012582:	2bfe      	cmp	r3, #254	; 0xfe
 8012584:	d805      	bhi.n	8012592 <upap_authwithpeer+0x36>
 8012586:	68b8      	ldr	r0, [r7, #8]
 8012588:	f7ed fe22 	bl	80001d0 <strlen>
 801258c:	4603      	mov	r3, r0
 801258e:	b2da      	uxtb	r2, r3
 8012590:	e000      	b.n	8012594 <upap_authwithpeer+0x38>
 8012592:	22ff      	movs	r2, #255	; 0xff
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ed fe15 	bl	80001d0 <strlen>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2bfe      	cmp	r3, #254	; 0xfe
 80125aa:	d805      	bhi.n	80125b8 <upap_authwithpeer+0x5c>
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ed fe0f 	bl	80001d0 <strlen>
 80125b2:	4603      	mov	r3, r0
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	e000      	b.n	80125ba <upap_authwithpeer+0x5e>
 80125b8:	22ff      	movs	r2, #255	; 0xff
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2200      	movs	r2, #0
 80125c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d004      	beq.n	80125dc <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80125d8:	2b02      	cmp	r3, #2
 80125da:	d104      	bne.n	80125e6 <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2202      	movs	r2, #2
 80125e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 80125e4:	e004      	b.n	80125f0 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f000 f92c 	bl	8012844 <upap_sauthreq>
 80125ec:	e000      	b.n	80125f0 <upap_authwithpeer+0x94>
        return;
 80125ee:	bf00      	nop
}
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b084      	sub	sp, #16
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012608:	2b03      	cmp	r3, #3
 801260a:	d114      	bne.n	8012636 <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	7b5b      	ldrb	r3, [r3, #13]
 8012616:	429a      	cmp	r2, r3
 8012618:	d309      	bcc.n	801262e <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2205      	movs	r2, #5
 801261e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 8012622:	f24c 0123 	movw	r1, #49187	; 0xc023
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7fa fb5a 	bl	800cce0 <auth_withpeer_fail>
	return;
 801262c:	e004      	b.n	8012638 <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f000 f908 	bl	8012844 <upap_sauthreq>
 8012634:	e000      	b.n	8012638 <upap_timeout+0x42>
	return;
 8012636:	bf00      	nop
}
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 801263e:	b580      	push	{r7, lr}
 8012640:	b082      	sub	sp, #8
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801264c:	2b00      	cmp	r3, #0
 801264e:	d104      	bne.n	801265a <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2201      	movs	r2, #1
 8012654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 8012658:	e007      	b.n	801266a <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012660:	2b02      	cmp	r3, #2
 8012662:	d102      	bne.n	801266a <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 f8ed 	bl	8012844 <upap_sauthreq>
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012682:	2b03      	cmp	r3, #3
 8012684:	d103      	bne.n	801268e <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 8012686:	6879      	ldr	r1, [r7, #4]
 8012688:	4805      	ldr	r0, [pc, #20]	; (80126a0 <upap_lowerdown+0x2c>)
 801268a:	f7fa f96b 	bl	800c964 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 8012696:	bf00      	nop
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	080125f7 	.word	0x080125f7

080126a4 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80126b2:	2b03      	cmp	r3, #3
 80126b4:	d104      	bne.n	80126c0 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 80126b6:	f24c 0123 	movw	r1, #49187	; 0xc023
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7fa fb10 	bl	800cce0 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7ff ffd7 	bl	8012674 <upap_lowerdown>
}
 80126c6:	bf00      	nop
 80126c8:	3708      	adds	r7, #8
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 80126ce:	b580      	push	{r7, lr}
 80126d0:	b088      	sub	sp, #32
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	60f8      	str	r0, [r7, #12]
 80126d6:	60b9      	str	r1, [r7, #8]
 80126d8:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2b03      	cmp	r3, #3
 80126e2:	dd37      	ble.n	8012754 <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	1c5a      	adds	r2, r3, #1
 80126e8:	61fa      	str	r2, [r7, #28]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	61fa      	str	r2, [r7, #28]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	1c5a      	adds	r2, r3, #1
 80126fc:	61fa      	str	r2, [r7, #28]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	021b      	lsls	r3, r3, #8
 8012702:	617b      	str	r3, [r7, #20]
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	61fa      	str	r2, [r7, #28]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	461a      	mov	r2, r3
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	4313      	orrs	r3, r2
 8012712:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	2b03      	cmp	r3, #3
 8012718:	dd1e      	ble.n	8012758 <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 801271a:	697a      	ldr	r2, [r7, #20]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	429a      	cmp	r2, r3
 8012720:	dc1c      	bgt.n	801275c <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	3b04      	subs	r3, #4
 8012726:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 8012728:	7efb      	ldrb	r3, [r7, #27]
 801272a:	2b02      	cmp	r3, #2
 801272c:	d004      	beq.n	8012738 <upap_input+0x6a>
 801272e:	2b03      	cmp	r3, #3
 8012730:	d009      	beq.n	8012746 <upap_input+0x78>
 8012732:	2b01      	cmp	r3, #1
 8012734:	d014      	beq.n	8012760 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 8012736:	e014      	b.n	8012762 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 8012738:	7eba      	ldrb	r2, [r7, #26]
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	69f9      	ldr	r1, [r7, #28]
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f000 f812 	bl	8012768 <upap_rauthack>
	break;
 8012744:	e00d      	b.n	8012762 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 8012746:	7eba      	ldrb	r2, [r7, #26]
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	69f9      	ldr	r1, [r7, #28]
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f000 f843 	bl	80127d8 <upap_rauthnak>
	break;
 8012752:	e006      	b.n	8012762 <upap_input+0x94>
	return;
 8012754:	bf00      	nop
 8012756:	e004      	b.n	8012762 <upap_input+0x94>
	return;
 8012758:	bf00      	nop
 801275a:	e002      	b.n	8012762 <upap_input+0x94>
	return;
 801275c:	bf00      	nop
 801275e:	e000      	b.n	8012762 <upap_input+0x94>
	break;
 8012760:	bf00      	nop
    }
}
 8012762:	3720      	adds	r7, #32
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8012768:	b580      	push	{r7, lr}
 801276a:	b086      	sub	sp, #24
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
 8012774:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801277c:	2b03      	cmp	r3, #3
 801277e:	d122      	bne.n	80127c6 <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	dd10      	ble.n	80127a8 <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	60ba      	str	r2, [r7, #8]
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d008      	beq.n	80127a8 <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	3b01      	subs	r3, #1
 801279a:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 801279c:	7dfa      	ldrb	r2, [r7, #23]
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	dc12      	bgt.n	80127ca <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 80127a8:	68f9      	ldr	r1, [r7, #12]
 80127aa:	480a      	ldr	r0, [pc, #40]	; (80127d4 <upap_rauthack+0x6c>)
 80127ac:	f7fa f8da 	bl	800c964 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2204      	movs	r2, #4
 80127b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 80127b8:	2200      	movs	r2, #0
 80127ba:	f24c 0123 	movw	r1, #49187	; 0xc023
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f7fa faa2 	bl	800cd08 <auth_withpeer_success>
 80127c4:	e002      	b.n	80127cc <upap_rauthack+0x64>
	return;
 80127c6:	bf00      	nop
 80127c8:	e000      	b.n	80127cc <upap_rauthack+0x64>
		return;
 80127ca:	bf00      	nop
}
 80127cc:	3718      	adds	r7, #24
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	080125f7 	.word	0x080125f7

080127d8 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80127ec:	2b03      	cmp	r3, #3
 80127ee:	d121      	bne.n	8012834 <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	dd10      	ble.n	8012818 <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	60ba      	str	r2, [r7, #8]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8012800:	7dfb      	ldrb	r3, [r7, #23]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d008      	beq.n	8012818 <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	3b01      	subs	r3, #1
 801280a:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 801280c:	7dfa      	ldrb	r2, [r7, #23]
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	429a      	cmp	r2, r3
 8012812:	dc11      	bgt.n	8012838 <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8012818:	68f9      	ldr	r1, [r7, #12]
 801281a:	4809      	ldr	r0, [pc, #36]	; (8012840 <upap_rauthnak+0x68>)
 801281c:	f7fa f8a2 	bl	800c964 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2205      	movs	r2, #5
 8012824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 8012828:	f24c 0123 	movw	r1, #49187	; 0xc023
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7fa fa57 	bl	800cce0 <auth_withpeer_fail>
 8012832:	e002      	b.n	801283a <upap_rauthnak+0x62>
	return;
 8012834:	bf00      	nop
 8012836:	e000      	b.n	801283a <upap_rauthnak+0x62>
		return;
 8012838:	bf00      	nop
}
 801283a:	3718      	adds	r7, #24
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	080125f7 	.word	0x080125f7

08012844 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 8012844:	b580      	push	{r7, lr}
 8012846:	b086      	sub	sp, #24
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012852:	461a      	mov	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801285a:	4413      	add	r3, r2
 801285c:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 801285e:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	b29b      	uxth	r3, r3
 8012864:	3304      	adds	r3, #4
 8012866:	b29b      	uxth	r3, r3
 8012868:	f44f 7220 	mov.w	r2, #640	; 0x280
 801286c:	4619      	mov	r1, r3
 801286e:	2000      	movs	r0, #0
 8012870:	f7f2 fc32 	bl	80050d8 <pbuf_alloc>
 8012874:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	f000 808a 	beq.w	8012992 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	891a      	ldrh	r2, [r3, #8]
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	895b      	ldrh	r3, [r3, #10]
 8012886:	429a      	cmp	r2, r3
 8012888:	d003      	beq.n	8012892 <upap_sauthreq+0x4e>
        pbuf_free(p);
 801288a:	6938      	ldr	r0, [r7, #16]
 801288c:	f7f2 fe8e 	bl	80055ac <pbuf_free>
        return;
 8012890:	e080      	b.n	8012994 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	1c5a      	adds	r2, r3, #1
 801289c:	60fa      	str	r2, [r7, #12]
 801289e:	22ff      	movs	r2, #255	; 0xff
 80128a0:	701a      	strb	r2, [r3, #0]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	60fa      	str	r2, [r7, #12]
 80128a8:	2203      	movs	r2, #3
 80128aa:	701a      	strb	r2, [r3, #0]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	60fa      	str	r2, [r7, #12]
 80128b2:	22c0      	movs	r2, #192	; 0xc0
 80128b4:	701a      	strb	r2, [r3, #0]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	60fa      	str	r2, [r7, #12]
 80128bc:	2223      	movs	r2, #35	; 0x23
 80128be:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	60fa      	str	r2, [r7, #12]
 80128c6:	2201      	movs	r2, #1
 80128c8:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	1c5a      	adds	r2, r3, #1
 80128ce:	60fa      	str	r2, [r7, #12]
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80128d6:	3201      	adds	r2, #1
 80128d8:	b2d1      	uxtb	r1, r2
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80128e6:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	1c5a      	adds	r2, r3, #1
 80128ec:	60fa      	str	r2, [r7, #12]
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	1212      	asrs	r2, r2, #8
 80128f2:	b2d2      	uxtb	r2, r2
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	1c5a      	adds	r2, r3, #1
 80128fa:	60fa      	str	r2, [r7, #12]
 80128fc:	697a      	ldr	r2, [r7, #20]
 80128fe:	b2d2      	uxtb	r2, r2
 8012900:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	1c5a      	adds	r2, r3, #1
 8012906:	60fa      	str	r2, [r7, #12]
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801290e:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801291a:	461a      	mov	r2, r3
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f000 fd65 	bl	80133ec <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012928:	461a      	mov	r2, r3
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	4413      	add	r3, r2
 801292e:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	60fa      	str	r2, [r7, #12]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 801293c:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012948:	461a      	mov	r2, r3
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f000 fd4e 	bl	80133ec <memcpy>

    ppp_write(pcb, p);
 8012950:	6939      	ldr	r1, [r7, #16]
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7fe ff80 	bl	8011858 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 8012958:	6879      	ldr	r1, [r7, #4]
 801295a:	4810      	ldr	r0, [pc, #64]	; (801299c <upap_sauthreq+0x158>)
 801295c:	f7fa f802 	bl	800c964 <sys_untimeout>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	7b1b      	ldrb	r3, [r3, #12]
 8012964:	461a      	mov	r2, r3
 8012966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801296a:	fb03 f302 	mul.w	r3, r3, r2
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	490a      	ldr	r1, [pc, #40]	; (801299c <upap_sauthreq+0x158>)
 8012972:	4618      	mov	r0, r3
 8012974:	f7f9 ffca 	bl	800c90c <sys_timeout>
    ++pcb->upap.us_transmits;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801297e:	3301      	adds	r3, #1
 8012980:	b2da      	uxtb	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2203      	movs	r2, #3
 801298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012990:	e000      	b.n	8012994 <upap_sauthreq+0x150>
        return;
 8012992:	bf00      	nop
}
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	080125f7 	.word	0x080125f7

080129a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80129a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80129d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80129a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80129a6:	e003      	b.n	80129b0 <LoopCopyDataInit>

080129a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80129a8:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80129aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80129ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80129ae:	3104      	adds	r1, #4

080129b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80129b0:	480b      	ldr	r0, [pc, #44]	; (80129e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80129b2:	4b0c      	ldr	r3, [pc, #48]	; (80129e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80129b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80129b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80129b8:	d3f6      	bcc.n	80129a8 <CopyDataInit>
  ldr  r2, =_sbss
 80129ba:	4a0b      	ldr	r2, [pc, #44]	; (80129e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80129bc:	e002      	b.n	80129c4 <LoopFillZerobss>

080129be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80129be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80129c0:	f842 3b04 	str.w	r3, [r2], #4

080129c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80129c4:	4b09      	ldr	r3, [pc, #36]	; (80129ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80129c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80129c8:	d3f9      	bcc.n	80129be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80129ca:	f000 f8d5 	bl	8012b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80129ce:	f000 fce9 	bl	80133a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80129d2:	f7ee fb25 	bl	8001020 <main>
  bx  lr    
 80129d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80129d8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80129dc:	08017568 	.word	0x08017568
  ldr  r0, =_sdata
 80129e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80129e4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80129e8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80129ec:	200023cc 	.word	0x200023cc

080129f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80129f0:	e7fe      	b.n	80129f0 <ADC_IRQHandler>

080129f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80129f2:	b480      	push	{r7}
 80129f4:	af00      	add	r7, sp, #0
}
 80129f6:	bf00      	nop
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8012a00:	b480      	push	{r7}
 8012a02:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8012a04:	e7fe      	b.n	8012a04 <HardFault_Handler+0x4>

08012a06 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8012a06:	b480      	push	{r7}
 8012a08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8012a0a:	e7fe      	b.n	8012a0a <MemManage_Handler+0x4>

08012a0c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8012a10:	e7fe      	b.n	8012a10 <BusFault_Handler+0x4>

08012a12 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8012a12:	b480      	push	{r7}
 8012a14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8012a16:	e7fe      	b.n	8012a16 <UsageFault_Handler+0x4>

08012a18 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	af00      	add	r7, sp, #0
}
 8012a1c:	bf00      	nop
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8012a26:	b480      	push	{r7}
 8012a28:	af00      	add	r7, sp, #0
}
 8012a2a:	bf00      	nop
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr

08012a34 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8012a34:	b480      	push	{r7}
 8012a36:	af00      	add	r7, sp, #0
}
 8012a38:	bf00      	nop
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr

08012a42 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8012a42:	b480      	push	{r7}
 8012a44:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8012a46:	bf00      	nop
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012a50:	b480      	push	{r7}
 8012a52:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 8012a54:	4b04      	ldr	r3, [pc, #16]	; (8012a68 <_getpid+0x18>)
 8012a56:	2226      	movs	r2, #38	; 0x26
 8012a58:	601a      	str	r2, [r3, #0]
	return -1;
 8012a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr
 8012a68:	200023c8 	.word	0x200023c8

08012a6c <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8012a76:	4b05      	ldr	r3, [pc, #20]	; (8012a8c <_kill+0x20>)
 8012a78:	2226      	movs	r2, #38	; 0x26
 8012a7a:	601a      	str	r2, [r3, #0]
	return -1;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr
 8012a8c:	200023c8 	.word	0x200023c8

08012a90 <_exit>:

void _exit(int32_t status)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 8012a98:	e7fe      	b.n	8012a98 <_exit+0x8>
	...

08012a9c <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b085      	sub	sp, #20
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 8012aa8:	4b05      	ldr	r3, [pc, #20]	; (8012ac0 <_write+0x24>)
 8012aaa:	2226      	movs	r2, #38	; 0x26
 8012aac:	601a      	str	r2, [r3, #0]
	return -1;
 8012aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3714      	adds	r7, #20
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop
 8012ac0:	200023c8 	.word	0x200023c8

08012ac4 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b085      	sub	sp, #20
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8012acc:	4b0b      	ldr	r3, [pc, #44]	; (8012afc <_sbrk+0x38>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d102      	bne.n	8012ada <_sbrk+0x16>
		heap_end = & end;
 8012ad4:	4b09      	ldr	r3, [pc, #36]	; (8012afc <_sbrk+0x38>)
 8012ad6:	4a0a      	ldr	r2, [pc, #40]	; (8012b00 <_sbrk+0x3c>)
 8012ad8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8012ada:	4b08      	ldr	r3, [pc, #32]	; (8012afc <_sbrk+0x38>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8012ae0:	4b06      	ldr	r3, [pc, #24]	; (8012afc <_sbrk+0x38>)
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4413      	add	r3, r2
 8012ae8:	4a04      	ldr	r2, [pc, #16]	; (8012afc <_sbrk+0x38>)
 8012aea:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8012aec:	68fb      	ldr	r3, [r7, #12]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	200006b8 	.word	0x200006b8
 8012b00:	200023cc 	.word	0x200023cc

08012b04 <_close>:

int _close(int32_t file)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8012b0c:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <_close+0x20>)
 8012b0e:	2226      	movs	r2, #38	; 0x26
 8012b10:	601a      	str	r2, [r3, #0]
	return -1;
 8012b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	200023c8 	.word	0x200023c8

08012b28 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8012b34:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <_lseek+0x24>)
 8012b36:	2226      	movs	r2, #38	; 0x26
 8012b38:	601a      	str	r2, [r3, #0]
	return -1;
 8012b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3714      	adds	r7, #20
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	200023c8 	.word	0x200023c8

08012b50 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b085      	sub	sp, #20
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8012b5c:	4b05      	ldr	r3, [pc, #20]	; (8012b74 <_read+0x24>)
 8012b5e:	2226      	movs	r2, #38	; 0x26
 8012b60:	601a      	str	r2, [r3, #0]
	return -1;
 8012b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3714      	adds	r7, #20
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	200023c8 	.word	0x200023c8

08012b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012b7c:	4a16      	ldr	r2, [pc, #88]	; (8012bd8 <SystemInit+0x60>)
 8012b7e:	4b16      	ldr	r3, [pc, #88]	; (8012bd8 <SystemInit+0x60>)
 8012b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012b8c:	4a13      	ldr	r2, [pc, #76]	; (8012bdc <SystemInit+0x64>)
 8012b8e:	4b13      	ldr	r3, [pc, #76]	; (8012bdc <SystemInit+0x64>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f043 0301 	orr.w	r3, r3, #1
 8012b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012b98:	4b10      	ldr	r3, [pc, #64]	; (8012bdc <SystemInit+0x64>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012b9e:	4a0f      	ldr	r2, [pc, #60]	; (8012bdc <SystemInit+0x64>)
 8012ba0:	4b0e      	ldr	r3, [pc, #56]	; (8012bdc <SystemInit+0x64>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012bac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012bae:	4b0b      	ldr	r3, [pc, #44]	; (8012bdc <SystemInit+0x64>)
 8012bb0:	4a0b      	ldr	r2, [pc, #44]	; (8012be0 <SystemInit+0x68>)
 8012bb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012bb4:	4a09      	ldr	r2, [pc, #36]	; (8012bdc <SystemInit+0x64>)
 8012bb6:	4b09      	ldr	r3, [pc, #36]	; (8012bdc <SystemInit+0x64>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012bbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012bc0:	4b06      	ldr	r3, [pc, #24]	; (8012bdc <SystemInit+0x64>)
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8012bc6:	f000 f80d 	bl	8012be4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012bca:	4b03      	ldr	r3, [pc, #12]	; (8012bd8 <SystemInit+0x60>)
 8012bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012bd0:	609a      	str	r2, [r3, #8]
#endif
}
 8012bd2:	bf00      	nop
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	e000ed00 	.word	0xe000ed00
 8012bdc:	40023800 	.word	0x40023800
 8012be0:	24003010 	.word	0x24003010

08012be4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	607b      	str	r3, [r7, #4]
 8012bee:	2300      	movs	r3, #0
 8012bf0:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8012bf2:	4b33      	ldr	r3, [pc, #204]	; (8012cc0 <SetSysClock+0xdc>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bfa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d103      	bne.n	8012c10 <SetSysClock+0x2c>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8012c0e:	d1f0      	bne.n	8012bf2 <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8012c10:	4b2b      	ldr	r3, [pc, #172]	; (8012cc0 <SetSysClock+0xdc>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	603b      	str	r3, [r7, #0]
 8012c20:	e001      	b.n	8012c26 <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8012c22:	2300      	movs	r3, #0
 8012c24:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d142      	bne.n	8012cb2 <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8012c2c:	4a24      	ldr	r2, [pc, #144]	; (8012cc0 <SetSysClock+0xdc>)
 8012c2e:	4b24      	ldr	r3, [pc, #144]	; (8012cc0 <SetSysClock+0xdc>)
 8012c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c36:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8012c38:	4a22      	ldr	r2, [pc, #136]	; (8012cc4 <SetSysClock+0xe0>)
 8012c3a:	4b22      	ldr	r3, [pc, #136]	; (8012cc4 <SetSysClock+0xe0>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c42:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8012c44:	4a1e      	ldr	r2, [pc, #120]	; (8012cc0 <SetSysClock+0xdc>)
 8012c46:	4b1e      	ldr	r3, [pc, #120]	; (8012cc0 <SetSysClock+0xdc>)
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8012c4c:	4a1c      	ldr	r2, [pc, #112]	; (8012cc0 <SetSysClock+0xdc>)
 8012c4e:	4b1c      	ldr	r3, [pc, #112]	; (8012cc0 <SetSysClock+0xdc>)
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c56:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8012c58:	4a19      	ldr	r2, [pc, #100]	; (8012cc0 <SetSysClock+0xdc>)
 8012c5a:	4b19      	ldr	r3, [pc, #100]	; (8012cc0 <SetSysClock+0xdc>)
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8012c62:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8012c64:	4b16      	ldr	r3, [pc, #88]	; (8012cc0 <SetSysClock+0xdc>)
 8012c66:	4a18      	ldr	r2, [pc, #96]	; (8012cc8 <SetSysClock+0xe4>)
 8012c68:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8012c6a:	4a15      	ldr	r2, [pc, #84]	; (8012cc0 <SetSysClock+0xdc>)
 8012c6c:	4b14      	ldr	r3, [pc, #80]	; (8012cc0 <SetSysClock+0xdc>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012c74:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8012c76:	bf00      	nop
 8012c78:	4b11      	ldr	r3, [pc, #68]	; (8012cc0 <SetSysClock+0xdc>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d0f9      	beq.n	8012c78 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8012c84:	4b11      	ldr	r3, [pc, #68]	; (8012ccc <SetSysClock+0xe8>)
 8012c86:	f240 7205 	movw	r2, #1797	; 0x705
 8012c8a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8012c8c:	4a0c      	ldr	r2, [pc, #48]	; (8012cc0 <SetSysClock+0xdc>)
 8012c8e:	4b0c      	ldr	r3, [pc, #48]	; (8012cc0 <SetSysClock+0xdc>)
 8012c90:	689b      	ldr	r3, [r3, #8]
 8012c92:	f023 0303 	bic.w	r3, r3, #3
 8012c96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8012c98:	4a09      	ldr	r2, [pc, #36]	; (8012cc0 <SetSysClock+0xdc>)
 8012c9a:	4b09      	ldr	r3, [pc, #36]	; (8012cc0 <SetSysClock+0xdc>)
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	f043 0302 	orr.w	r3, r3, #2
 8012ca2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8012ca4:	bf00      	nop
 8012ca6:	4b06      	ldr	r3, [pc, #24]	; (8012cc0 <SetSysClock+0xdc>)
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	f003 030c 	and.w	r3, r3, #12
 8012cae:	2b08      	cmp	r3, #8
 8012cb0:	d1f9      	bne.n	8012ca6 <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8012cb2:	bf00      	nop
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	40023800 	.word	0x40023800
 8012cc4:	40007000 	.word	0x40007000
 8012cc8:	07405419 	.word	0x07405419
 8012ccc:	40023c00 	.word	0x40023c00

08012cd0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b087      	sub	sp, #28
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	607a      	str	r2, [r7, #4]
	int div = 1;
 8012cdc:	2301      	movs	r3, #1
 8012cde:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8012ce0:	e004      	b.n	8012cec <ts_itoa+0x1c>
		div *= base;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	fb02 f303 	mul.w	r3, r2, r3
 8012cea:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d2f3      	bcs.n	8012ce2 <ts_itoa+0x12>

	while (div != 0)
 8012cfa:	e029      	b.n	8012d50 <ts_itoa+0x80>
	{
		int num = d/div;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	68ba      	ldr	r2, [r7, #8]
 8012d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d04:	613b      	str	r3, [r7, #16]
		d = d%div;
 8012d06:	697a      	ldr	r2, [r7, #20]
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d0e:	fb02 f201 	mul.w	r2, r2, r1
 8012d12:	1a9b      	subs	r3, r3, r2
 8012d14:	60bb      	str	r3, [r7, #8]
		div /= base;
 8012d16:	697a      	ldr	r2, [r7, #20]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d1e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	2b09      	cmp	r3, #9
 8012d24:	dd0a      	ble.n	8012d3c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	1c59      	adds	r1, r3, #1
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	6011      	str	r1, [r2, #0]
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	b2d2      	uxtb	r2, r2
 8012d34:	3237      	adds	r2, #55	; 0x37
 8012d36:	b2d2      	uxtb	r2, r2
 8012d38:	701a      	strb	r2, [r3, #0]
 8012d3a:	e009      	b.n	8012d50 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	1c59      	adds	r1, r3, #1
 8012d42:	68fa      	ldr	r2, [r7, #12]
 8012d44:	6011      	str	r1, [r2, #0]
 8012d46:	693a      	ldr	r2, [r7, #16]
 8012d48:	b2d2      	uxtb	r2, r2
 8012d4a:	3230      	adds	r2, #48	; 0x30
 8012d4c:	b2d2      	uxtb	r2, r2
 8012d4e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1d2      	bne.n	8012cfc <ts_itoa+0x2c>
	}
}
 8012d56:	bf00      	nop
 8012d58:	371c      	adds	r7, #28
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr

08012d62 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b088      	sub	sp, #32
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	60f8      	str	r0, [r7, #12]
 8012d6a:	60b9      	str	r1, [r7, #8]
 8012d6c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8012d72:	e07d      	b.n	8012e70 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	2b25      	cmp	r3, #37	; 0x25
 8012d7a:	d171      	bne.n	8012e60 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	60bb      	str	r3, [r7, #8]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	2b64      	cmp	r3, #100	; 0x64
 8012d88:	d01e      	beq.n	8012dc8 <ts_formatstring+0x66>
 8012d8a:	2b64      	cmp	r3, #100	; 0x64
 8012d8c:	dc06      	bgt.n	8012d9c <ts_formatstring+0x3a>
 8012d8e:	2b58      	cmp	r3, #88	; 0x58
 8012d90:	d050      	beq.n	8012e34 <ts_formatstring+0xd2>
 8012d92:	2b63      	cmp	r3, #99	; 0x63
 8012d94:	d00e      	beq.n	8012db4 <ts_formatstring+0x52>
 8012d96:	2b25      	cmp	r3, #37	; 0x25
 8012d98:	d058      	beq.n	8012e4c <ts_formatstring+0xea>
 8012d9a:	e05d      	b.n	8012e58 <ts_formatstring+0xf6>
 8012d9c:	2b73      	cmp	r3, #115	; 0x73
 8012d9e:	d02b      	beq.n	8012df8 <ts_formatstring+0x96>
 8012da0:	2b73      	cmp	r3, #115	; 0x73
 8012da2:	dc02      	bgt.n	8012daa <ts_formatstring+0x48>
 8012da4:	2b69      	cmp	r3, #105	; 0x69
 8012da6:	d00f      	beq.n	8012dc8 <ts_formatstring+0x66>
 8012da8:	e056      	b.n	8012e58 <ts_formatstring+0xf6>
 8012daa:	2b75      	cmp	r3, #117	; 0x75
 8012dac:	d037      	beq.n	8012e1e <ts_formatstring+0xbc>
 8012dae:	2b78      	cmp	r3, #120	; 0x78
 8012db0:	d040      	beq.n	8012e34 <ts_formatstring+0xd2>
 8012db2:	e051      	b.n	8012e58 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	1c5a      	adds	r2, r3, #1
 8012db8:	60fa      	str	r2, [r7, #12]
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	1d11      	adds	r1, r2, #4
 8012dbe:	6079      	str	r1, [r7, #4]
 8012dc0:	6812      	ldr	r2, [r2, #0]
 8012dc2:	b2d2      	uxtb	r2, r2
 8012dc4:	701a      	strb	r2, [r3, #0]
				break;
 8012dc6:	e047      	b.n	8012e58 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	1d1a      	adds	r2, r3, #4
 8012dcc:	607a      	str	r2, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	da07      	bge.n	8012de8 <ts_formatstring+0x86>
					{
						val *= -1;
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	425b      	negs	r3, r3
 8012ddc:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	1c5a      	adds	r2, r3, #1
 8012de2:	60fa      	str	r2, [r7, #12]
 8012de4:	222d      	movs	r2, #45	; 0x2d
 8012de6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8012de8:	69f9      	ldr	r1, [r7, #28]
 8012dea:	f107 030c 	add.w	r3, r7, #12
 8012dee:	220a      	movs	r2, #10
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff ff6d 	bl	8012cd0 <ts_itoa>
				}
				break;
 8012df6:	e02f      	b.n	8012e58 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	1d1a      	adds	r2, r3, #4
 8012dfc:	607a      	str	r2, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8012e02:	e007      	b.n	8012e14 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	1c5a      	adds	r2, r3, #1
 8012e08:	60fa      	str	r2, [r7, #12]
 8012e0a:	69ba      	ldr	r2, [r7, #24]
 8012e0c:	1c51      	adds	r1, r2, #1
 8012e0e:	61b9      	str	r1, [r7, #24]
 8012e10:	7812      	ldrb	r2, [r2, #0]
 8012e12:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d1f3      	bne.n	8012e04 <ts_formatstring+0xa2>
					}
				}
				break;
 8012e1c:	e01c      	b.n	8012e58 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	1d1a      	adds	r2, r3, #4
 8012e22:	607a      	str	r2, [r7, #4]
 8012e24:	6819      	ldr	r1, [r3, #0]
 8012e26:	f107 030c 	add.w	r3, r7, #12
 8012e2a:	220a      	movs	r2, #10
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff ff4f 	bl	8012cd0 <ts_itoa>
				break;
 8012e32:	e011      	b.n	8012e58 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	1d1a      	adds	r2, r3, #4
 8012e38:	607a      	str	r2, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f107 030c 	add.w	r3, r7, #12
 8012e42:	2210      	movs	r2, #16
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff ff43 	bl	8012cd0 <ts_itoa>
				break;
 8012e4a:	e005      	b.n	8012e58 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	1c5a      	adds	r2, r3, #1
 8012e50:	60fa      	str	r2, [r7, #12]
 8012e52:	2225      	movs	r2, #37	; 0x25
 8012e54:	701a      	strb	r2, [r3, #0]
				  break;
 8012e56:	bf00      	nop
			}
			fmt++;
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	60bb      	str	r3, [r7, #8]
 8012e5e:	e007      	b.n	8012e70 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	60fa      	str	r2, [r7, #12]
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	1c51      	adds	r1, r2, #1
 8012e6a:	60b9      	str	r1, [r7, #8]
 8012e6c:	7812      	ldrb	r2, [r2, #0]
 8012e6e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f47f af7d 	bne.w	8012d74 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	461a      	mov	r2, r3
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	1ad3      	subs	r3, r2, r3
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3720      	adds	r7, #32
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b085      	sub	sp, #20
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
	int length = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8012e9e:	e081      	b.n	8012fa4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	2b25      	cmp	r3, #37	; 0x25
 8012ea6:	d177      	bne.n	8012f98 <ts_formatlength+0x108>
		{
			++fmt;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	3301      	adds	r3, #1
 8012eac:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	3b58      	subs	r3, #88	; 0x58
 8012eb4:	2b20      	cmp	r3, #32
 8012eb6:	d86a      	bhi.n	8012f8e <ts_formatlength+0xfe>
 8012eb8:	a201      	add	r2, pc, #4	; (adr r2, 8012ec0 <ts_formatlength+0x30>)
 8012eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ebe:	bf00      	nop
 8012ec0:	08012f81 	.word	0x08012f81
 8012ec4:	08012f8f 	.word	0x08012f8f
 8012ec8:	08012f8f 	.word	0x08012f8f
 8012ecc:	08012f8f 	.word	0x08012f8f
 8012ed0:	08012f8f 	.word	0x08012f8f
 8012ed4:	08012f8f 	.word	0x08012f8f
 8012ed8:	08012f8f 	.word	0x08012f8f
 8012edc:	08012f8f 	.word	0x08012f8f
 8012ee0:	08012f8f 	.word	0x08012f8f
 8012ee4:	08012f8f 	.word	0x08012f8f
 8012ee8:	08012f8f 	.word	0x08012f8f
 8012eec:	08012f45 	.word	0x08012f45
 8012ef0:	08012f53 	.word	0x08012f53
 8012ef4:	08012f8f 	.word	0x08012f8f
 8012ef8:	08012f8f 	.word	0x08012f8f
 8012efc:	08012f8f 	.word	0x08012f8f
 8012f00:	08012f8f 	.word	0x08012f8f
 8012f04:	08012f53 	.word	0x08012f53
 8012f08:	08012f8f 	.word	0x08012f8f
 8012f0c:	08012f8f 	.word	0x08012f8f
 8012f10:	08012f8f 	.word	0x08012f8f
 8012f14:	08012f8f 	.word	0x08012f8f
 8012f18:	08012f8f 	.word	0x08012f8f
 8012f1c:	08012f8f 	.word	0x08012f8f
 8012f20:	08012f8f 	.word	0x08012f8f
 8012f24:	08012f8f 	.word	0x08012f8f
 8012f28:	08012f8f 	.word	0x08012f8f
 8012f2c:	08012f61 	.word	0x08012f61
 8012f30:	08012f8f 	.word	0x08012f8f
 8012f34:	08012f53 	.word	0x08012f53
 8012f38:	08012f8f 	.word	0x08012f8f
 8012f3c:	08012f8f 	.word	0x08012f8f
 8012f40:	08012f81 	.word	0x08012f81
			{
			  case 'c':
		  		  va_arg(va, int);
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	3304      	adds	r3, #4
 8012f48:	603b      	str	r3, [r7, #0]
				  ++length;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	60fb      	str	r3, [r7, #12]
				  break;
 8012f50:	e025      	b.n	8012f9e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	330b      	adds	r3, #11
 8012f56:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	603b      	str	r3, [r7, #0]
				  break;
 8012f5e:	e01e      	b.n	8012f9e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	1d1a      	adds	r2, r3, #4
 8012f64:	603a      	str	r2, [r7, #0]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8012f6a:	e002      	b.n	8012f72 <ts_formatlength+0xe2>
			  			  ++length;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	3301      	adds	r3, #1
 8012f70:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	1c5a      	adds	r2, r3, #1
 8012f76:	60ba      	str	r2, [r7, #8]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1f6      	bne.n	8012f6c <ts_formatlength+0xdc>
			  	  }
				  break;
 8012f7e:	e00e      	b.n	8012f9e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	3308      	adds	r3, #8
 8012f84:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	3304      	adds	r3, #4
 8012f8a:	603b      	str	r3, [r7, #0]
				  break;
 8012f8c:	e007      	b.n	8012f9e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	3301      	adds	r3, #1
 8012f92:	60fb      	str	r3, [r7, #12]
				  break;
 8012f94:	bf00      	nop
 8012f96:	e002      	b.n	8012f9e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	f47f af79 	bne.w	8012ea0 <ts_formatlength+0x10>
	}
	return length;
 8012fae:	68fb      	ldr	r3, [r7, #12]
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3714      	adds	r7, #20
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8012fbc:	b40e      	push	{r1, r2, r3}
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8012fc6:	f107 0320 	add.w	r3, r7, #32
 8012fca:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8012fcc:	68ba      	ldr	r2, [r7, #8]
 8012fce:	69f9      	ldr	r1, [r7, #28]
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f7ff fec6 	bl	8012d62 <ts_formatstring>
 8012fd6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3714      	adds	r7, #20
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fe4:	b003      	add	sp, #12
 8012fe6:	4770      	bx	lr

08012fe8 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8012fe8:	b40f      	push	{r0, r1, r2, r3}
 8012fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
	int length = 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8012ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ffa:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8012ffc:	6839      	ldr	r1, [r7, #0]
 8012ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013000:	f7ff ff46 	bl	8012e90 <ts_formatlength>
 8013004:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8013006:	466b      	mov	r3, sp
 8013008:	461e      	mov	r6, r3
		char buf[length];
 801300a:	68f9      	ldr	r1, [r7, #12]
 801300c:	1e4b      	subs	r3, r1, #1
 801300e:	60bb      	str	r3, [r7, #8]
 8013010:	460b      	mov	r3, r1
 8013012:	461a      	mov	r2, r3
 8013014:	f04f 0300 	mov.w	r3, #0
 8013018:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 801301c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8013020:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8013024:	460b      	mov	r3, r1
 8013026:	461a      	mov	r2, r3
 8013028:	f04f 0300 	mov.w	r3, #0
 801302c:	00dd      	lsls	r5, r3, #3
 801302e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013032:	00d4      	lsls	r4, r2, #3
 8013034:	460b      	mov	r3, r1
 8013036:	3307      	adds	r3, #7
 8013038:	08db      	lsrs	r3, r3, #3
 801303a:	00db      	lsls	r3, r3, #3
 801303c:	ebad 0d03 	sub.w	sp, sp, r3
 8013040:	466b      	mov	r3, sp
 8013042:	3300      	adds	r3, #0
 8013044:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8013046:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801304a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	683a      	ldr	r2, [r7, #0]
 8013050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff fe85 	bl	8012d62 <ts_formatstring>
 8013058:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	68fa      	ldr	r2, [r7, #12]
 801305e:	4619      	mov	r1, r3
 8013060:	2001      	movs	r0, #1
 8013062:	f7ff fd1b 	bl	8012a9c <_write>
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 801306a:	68fb      	ldr	r3, [r7, #12]
}
 801306c:	4618      	mov	r0, r3
 801306e:	3714      	adds	r7, #20
 8013070:	46bd      	mov	sp, r7
 8013072:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013076:	b004      	add	sp, #16
 8013078:	4770      	bx	lr

0801307a <abort>:
 801307a:	b508      	push	{r3, lr}
 801307c:	2006      	movs	r0, #6
 801307e:	f000 fac7 	bl	8013610 <raise>
 8013082:	2001      	movs	r0, #1
 8013084:	f7ff fd04 	bl	8012a90 <_exit>

08013088 <__sflush_r>:
 8013088:	898a      	ldrh	r2, [r1, #12]
 801308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308e:	4605      	mov	r5, r0
 8013090:	0710      	lsls	r0, r2, #28
 8013092:	460c      	mov	r4, r1
 8013094:	d45a      	bmi.n	801314c <__sflush_r+0xc4>
 8013096:	684b      	ldr	r3, [r1, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	dc05      	bgt.n	80130a8 <__sflush_r+0x20>
 801309c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801309e:	2b00      	cmp	r3, #0
 80130a0:	dc02      	bgt.n	80130a8 <__sflush_r+0x20>
 80130a2:	2000      	movs	r0, #0
 80130a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130aa:	2e00      	cmp	r6, #0
 80130ac:	d0f9      	beq.n	80130a2 <__sflush_r+0x1a>
 80130ae:	2300      	movs	r3, #0
 80130b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80130b4:	682f      	ldr	r7, [r5, #0]
 80130b6:	602b      	str	r3, [r5, #0]
 80130b8:	d033      	beq.n	8013122 <__sflush_r+0x9a>
 80130ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	075a      	lsls	r2, r3, #29
 80130c0:	d505      	bpl.n	80130ce <__sflush_r+0x46>
 80130c2:	6863      	ldr	r3, [r4, #4]
 80130c4:	1ac0      	subs	r0, r0, r3
 80130c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130c8:	b10b      	cbz	r3, 80130ce <__sflush_r+0x46>
 80130ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130cc:	1ac0      	subs	r0, r0, r3
 80130ce:	2300      	movs	r3, #0
 80130d0:	4602      	mov	r2, r0
 80130d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130d4:	6a21      	ldr	r1, [r4, #32]
 80130d6:	4628      	mov	r0, r5
 80130d8:	47b0      	blx	r6
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	89a3      	ldrh	r3, [r4, #12]
 80130de:	d106      	bne.n	80130ee <__sflush_r+0x66>
 80130e0:	6829      	ldr	r1, [r5, #0]
 80130e2:	291d      	cmp	r1, #29
 80130e4:	d84b      	bhi.n	801317e <__sflush_r+0xf6>
 80130e6:	4a2b      	ldr	r2, [pc, #172]	; (8013194 <__sflush_r+0x10c>)
 80130e8:	40ca      	lsrs	r2, r1
 80130ea:	07d6      	lsls	r6, r2, #31
 80130ec:	d547      	bpl.n	801317e <__sflush_r+0xf6>
 80130ee:	2200      	movs	r2, #0
 80130f0:	6062      	str	r2, [r4, #4]
 80130f2:	04d9      	lsls	r1, r3, #19
 80130f4:	6922      	ldr	r2, [r4, #16]
 80130f6:	6022      	str	r2, [r4, #0]
 80130f8:	d504      	bpl.n	8013104 <__sflush_r+0x7c>
 80130fa:	1c42      	adds	r2, r0, #1
 80130fc:	d101      	bne.n	8013102 <__sflush_r+0x7a>
 80130fe:	682b      	ldr	r3, [r5, #0]
 8013100:	b903      	cbnz	r3, 8013104 <__sflush_r+0x7c>
 8013102:	6560      	str	r0, [r4, #84]	; 0x54
 8013104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013106:	602f      	str	r7, [r5, #0]
 8013108:	2900      	cmp	r1, #0
 801310a:	d0ca      	beq.n	80130a2 <__sflush_r+0x1a>
 801310c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013110:	4299      	cmp	r1, r3
 8013112:	d002      	beq.n	801311a <__sflush_r+0x92>
 8013114:	4628      	mov	r0, r5
 8013116:	f000 f997 	bl	8013448 <_free_r>
 801311a:	2000      	movs	r0, #0
 801311c:	6360      	str	r0, [r4, #52]	; 0x34
 801311e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013122:	6a21      	ldr	r1, [r4, #32]
 8013124:	2301      	movs	r3, #1
 8013126:	4628      	mov	r0, r5
 8013128:	47b0      	blx	r6
 801312a:	1c41      	adds	r1, r0, #1
 801312c:	d1c6      	bne.n	80130bc <__sflush_r+0x34>
 801312e:	682b      	ldr	r3, [r5, #0]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d0c3      	beq.n	80130bc <__sflush_r+0x34>
 8013134:	2b1d      	cmp	r3, #29
 8013136:	d001      	beq.n	801313c <__sflush_r+0xb4>
 8013138:	2b16      	cmp	r3, #22
 801313a:	d101      	bne.n	8013140 <__sflush_r+0xb8>
 801313c:	602f      	str	r7, [r5, #0]
 801313e:	e7b0      	b.n	80130a2 <__sflush_r+0x1a>
 8013140:	89a3      	ldrh	r3, [r4, #12]
 8013142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013146:	81a3      	strh	r3, [r4, #12]
 8013148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801314c:	690f      	ldr	r7, [r1, #16]
 801314e:	2f00      	cmp	r7, #0
 8013150:	d0a7      	beq.n	80130a2 <__sflush_r+0x1a>
 8013152:	0793      	lsls	r3, r2, #30
 8013154:	680e      	ldr	r6, [r1, #0]
 8013156:	bf08      	it	eq
 8013158:	694b      	ldreq	r3, [r1, #20]
 801315a:	600f      	str	r7, [r1, #0]
 801315c:	bf18      	it	ne
 801315e:	2300      	movne	r3, #0
 8013160:	eba6 0807 	sub.w	r8, r6, r7
 8013164:	608b      	str	r3, [r1, #8]
 8013166:	f1b8 0f00 	cmp.w	r8, #0
 801316a:	dd9a      	ble.n	80130a2 <__sflush_r+0x1a>
 801316c:	4643      	mov	r3, r8
 801316e:	463a      	mov	r2, r7
 8013170:	6a21      	ldr	r1, [r4, #32]
 8013172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013174:	4628      	mov	r0, r5
 8013176:	47b0      	blx	r6
 8013178:	2800      	cmp	r0, #0
 801317a:	dc07      	bgt.n	801318c <__sflush_r+0x104>
 801317c:	89a3      	ldrh	r3, [r4, #12]
 801317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013182:	81a3      	strh	r3, [r4, #12]
 8013184:	f04f 30ff 	mov.w	r0, #4294967295
 8013188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318c:	4407      	add	r7, r0
 801318e:	eba8 0800 	sub.w	r8, r8, r0
 8013192:	e7e8      	b.n	8013166 <__sflush_r+0xde>
 8013194:	20400001 	.word	0x20400001

08013198 <_fflush_r>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	690b      	ldr	r3, [r1, #16]
 801319c:	4605      	mov	r5, r0
 801319e:	460c      	mov	r4, r1
 80131a0:	b1db      	cbz	r3, 80131da <_fflush_r+0x42>
 80131a2:	b118      	cbz	r0, 80131ac <_fflush_r+0x14>
 80131a4:	6983      	ldr	r3, [r0, #24]
 80131a6:	b90b      	cbnz	r3, 80131ac <_fflush_r+0x14>
 80131a8:	f000 f872 	bl	8013290 <__sinit>
 80131ac:	4b0c      	ldr	r3, [pc, #48]	; (80131e0 <_fflush_r+0x48>)
 80131ae:	429c      	cmp	r4, r3
 80131b0:	d109      	bne.n	80131c6 <_fflush_r+0x2e>
 80131b2:	686c      	ldr	r4, [r5, #4]
 80131b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131b8:	b17b      	cbz	r3, 80131da <_fflush_r+0x42>
 80131ba:	4621      	mov	r1, r4
 80131bc:	4628      	mov	r0, r5
 80131be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131c2:	f7ff bf61 	b.w	8013088 <__sflush_r>
 80131c6:	4b07      	ldr	r3, [pc, #28]	; (80131e4 <_fflush_r+0x4c>)
 80131c8:	429c      	cmp	r4, r3
 80131ca:	d101      	bne.n	80131d0 <_fflush_r+0x38>
 80131cc:	68ac      	ldr	r4, [r5, #8]
 80131ce:	e7f1      	b.n	80131b4 <_fflush_r+0x1c>
 80131d0:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <_fflush_r+0x50>)
 80131d2:	429c      	cmp	r4, r3
 80131d4:	bf08      	it	eq
 80131d6:	68ec      	ldreq	r4, [r5, #12]
 80131d8:	e7ec      	b.n	80131b4 <_fflush_r+0x1c>
 80131da:	2000      	movs	r0, #0
 80131dc:	bd38      	pop	{r3, r4, r5, pc}
 80131de:	bf00      	nop
 80131e0:	080174e8 	.word	0x080174e8
 80131e4:	08017508 	.word	0x08017508
 80131e8:	080174c8 	.word	0x080174c8

080131ec <fflush>:
 80131ec:	4601      	mov	r1, r0
 80131ee:	b920      	cbnz	r0, 80131fa <fflush+0xe>
 80131f0:	4b04      	ldr	r3, [pc, #16]	; (8013204 <fflush+0x18>)
 80131f2:	4905      	ldr	r1, [pc, #20]	; (8013208 <fflush+0x1c>)
 80131f4:	6818      	ldr	r0, [r3, #0]
 80131f6:	f000 b8b7 	b.w	8013368 <_fwalk_reent>
 80131fa:	4b04      	ldr	r3, [pc, #16]	; (801320c <fflush+0x20>)
 80131fc:	6818      	ldr	r0, [r3, #0]
 80131fe:	f7ff bfcb 	b.w	8013198 <_fflush_r>
 8013202:	bf00      	nop
 8013204:	08017528 	.word	0x08017528
 8013208:	08013199 	.word	0x08013199
 801320c:	20000010 	.word	0x20000010

08013210 <_cleanup_r>:
 8013210:	4901      	ldr	r1, [pc, #4]	; (8013218 <_cleanup_r+0x8>)
 8013212:	f000 b8a9 	b.w	8013368 <_fwalk_reent>
 8013216:	bf00      	nop
 8013218:	08013199 	.word	0x08013199

0801321c <std.isra.0>:
 801321c:	2300      	movs	r3, #0
 801321e:	b510      	push	{r4, lr}
 8013220:	4604      	mov	r4, r0
 8013222:	6003      	str	r3, [r0, #0]
 8013224:	6043      	str	r3, [r0, #4]
 8013226:	6083      	str	r3, [r0, #8]
 8013228:	8181      	strh	r1, [r0, #12]
 801322a:	6643      	str	r3, [r0, #100]	; 0x64
 801322c:	81c2      	strh	r2, [r0, #14]
 801322e:	6103      	str	r3, [r0, #16]
 8013230:	6143      	str	r3, [r0, #20]
 8013232:	6183      	str	r3, [r0, #24]
 8013234:	4619      	mov	r1, r3
 8013236:	2208      	movs	r2, #8
 8013238:	305c      	adds	r0, #92	; 0x5c
 801323a:	f000 f8fc 	bl	8013436 <memset>
 801323e:	4b05      	ldr	r3, [pc, #20]	; (8013254 <std.isra.0+0x38>)
 8013240:	6263      	str	r3, [r4, #36]	; 0x24
 8013242:	4b05      	ldr	r3, [pc, #20]	; (8013258 <std.isra.0+0x3c>)
 8013244:	62a3      	str	r3, [r4, #40]	; 0x28
 8013246:	4b05      	ldr	r3, [pc, #20]	; (801325c <std.isra.0+0x40>)
 8013248:	62e3      	str	r3, [r4, #44]	; 0x2c
 801324a:	4b05      	ldr	r3, [pc, #20]	; (8013260 <std.isra.0+0x44>)
 801324c:	6224      	str	r4, [r4, #32]
 801324e:	6323      	str	r3, [r4, #48]	; 0x30
 8013250:	bd10      	pop	{r4, pc}
 8013252:	bf00      	nop
 8013254:	080136b1 	.word	0x080136b1
 8013258:	080136d3 	.word	0x080136d3
 801325c:	0801370b 	.word	0x0801370b
 8013260:	0801372f 	.word	0x0801372f

08013264 <__sfmoreglue>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	1e4a      	subs	r2, r1, #1
 8013268:	2568      	movs	r5, #104	; 0x68
 801326a:	4355      	muls	r5, r2
 801326c:	460e      	mov	r6, r1
 801326e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013272:	f000 f937 	bl	80134e4 <_malloc_r>
 8013276:	4604      	mov	r4, r0
 8013278:	b140      	cbz	r0, 801328c <__sfmoreglue+0x28>
 801327a:	2100      	movs	r1, #0
 801327c:	e880 0042 	stmia.w	r0, {r1, r6}
 8013280:	300c      	adds	r0, #12
 8013282:	60a0      	str	r0, [r4, #8]
 8013284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013288:	f000 f8d5 	bl	8013436 <memset>
 801328c:	4620      	mov	r0, r4
 801328e:	bd70      	pop	{r4, r5, r6, pc}

08013290 <__sinit>:
 8013290:	6983      	ldr	r3, [r0, #24]
 8013292:	b510      	push	{r4, lr}
 8013294:	4604      	mov	r4, r0
 8013296:	bb33      	cbnz	r3, 80132e6 <__sinit+0x56>
 8013298:	6483      	str	r3, [r0, #72]	; 0x48
 801329a:	64c3      	str	r3, [r0, #76]	; 0x4c
 801329c:	6503      	str	r3, [r0, #80]	; 0x50
 801329e:	4b12      	ldr	r3, [pc, #72]	; (80132e8 <__sinit+0x58>)
 80132a0:	4a12      	ldr	r2, [pc, #72]	; (80132ec <__sinit+0x5c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	6282      	str	r2, [r0, #40]	; 0x28
 80132a6:	4298      	cmp	r0, r3
 80132a8:	bf04      	itt	eq
 80132aa:	2301      	moveq	r3, #1
 80132ac:	6183      	streq	r3, [r0, #24]
 80132ae:	f000 f81f 	bl	80132f0 <__sfp>
 80132b2:	6060      	str	r0, [r4, #4]
 80132b4:	4620      	mov	r0, r4
 80132b6:	f000 f81b 	bl	80132f0 <__sfp>
 80132ba:	60a0      	str	r0, [r4, #8]
 80132bc:	4620      	mov	r0, r4
 80132be:	f000 f817 	bl	80132f0 <__sfp>
 80132c2:	2200      	movs	r2, #0
 80132c4:	60e0      	str	r0, [r4, #12]
 80132c6:	2104      	movs	r1, #4
 80132c8:	6860      	ldr	r0, [r4, #4]
 80132ca:	f7ff ffa7 	bl	801321c <std.isra.0>
 80132ce:	2201      	movs	r2, #1
 80132d0:	2109      	movs	r1, #9
 80132d2:	68a0      	ldr	r0, [r4, #8]
 80132d4:	f7ff ffa2 	bl	801321c <std.isra.0>
 80132d8:	2202      	movs	r2, #2
 80132da:	2112      	movs	r1, #18
 80132dc:	68e0      	ldr	r0, [r4, #12]
 80132de:	f7ff ff9d 	bl	801321c <std.isra.0>
 80132e2:	2301      	movs	r3, #1
 80132e4:	61a3      	str	r3, [r4, #24]
 80132e6:	bd10      	pop	{r4, pc}
 80132e8:	08017528 	.word	0x08017528
 80132ec:	08013211 	.word	0x08013211

080132f0 <__sfp>:
 80132f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f2:	4b1c      	ldr	r3, [pc, #112]	; (8013364 <__sfp+0x74>)
 80132f4:	681e      	ldr	r6, [r3, #0]
 80132f6:	69b3      	ldr	r3, [r6, #24]
 80132f8:	4607      	mov	r7, r0
 80132fa:	b913      	cbnz	r3, 8013302 <__sfp+0x12>
 80132fc:	4630      	mov	r0, r6
 80132fe:	f7ff ffc7 	bl	8013290 <__sinit>
 8013302:	3648      	adds	r6, #72	; 0x48
 8013304:	68b4      	ldr	r4, [r6, #8]
 8013306:	6873      	ldr	r3, [r6, #4]
 8013308:	3b01      	subs	r3, #1
 801330a:	d503      	bpl.n	8013314 <__sfp+0x24>
 801330c:	6833      	ldr	r3, [r6, #0]
 801330e:	b133      	cbz	r3, 801331e <__sfp+0x2e>
 8013310:	6836      	ldr	r6, [r6, #0]
 8013312:	e7f7      	b.n	8013304 <__sfp+0x14>
 8013314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013318:	b16d      	cbz	r5, 8013336 <__sfp+0x46>
 801331a:	3468      	adds	r4, #104	; 0x68
 801331c:	e7f4      	b.n	8013308 <__sfp+0x18>
 801331e:	2104      	movs	r1, #4
 8013320:	4638      	mov	r0, r7
 8013322:	f7ff ff9f 	bl	8013264 <__sfmoreglue>
 8013326:	6030      	str	r0, [r6, #0]
 8013328:	2800      	cmp	r0, #0
 801332a:	d1f1      	bne.n	8013310 <__sfp+0x20>
 801332c:	230c      	movs	r3, #12
 801332e:	603b      	str	r3, [r7, #0]
 8013330:	4604      	mov	r4, r0
 8013332:	4620      	mov	r0, r4
 8013334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801333a:	81e3      	strh	r3, [r4, #14]
 801333c:	2301      	movs	r3, #1
 801333e:	81a3      	strh	r3, [r4, #12]
 8013340:	6665      	str	r5, [r4, #100]	; 0x64
 8013342:	6025      	str	r5, [r4, #0]
 8013344:	60a5      	str	r5, [r4, #8]
 8013346:	6065      	str	r5, [r4, #4]
 8013348:	6125      	str	r5, [r4, #16]
 801334a:	6165      	str	r5, [r4, #20]
 801334c:	61a5      	str	r5, [r4, #24]
 801334e:	2208      	movs	r2, #8
 8013350:	4629      	mov	r1, r5
 8013352:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013356:	f000 f86e 	bl	8013436 <memset>
 801335a:	6365      	str	r5, [r4, #52]	; 0x34
 801335c:	63a5      	str	r5, [r4, #56]	; 0x38
 801335e:	64a5      	str	r5, [r4, #72]	; 0x48
 8013360:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013362:	e7e6      	b.n	8013332 <__sfp+0x42>
 8013364:	08017528 	.word	0x08017528

08013368 <_fwalk_reent>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	4680      	mov	r8, r0
 801336e:	4689      	mov	r9, r1
 8013370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013374:	2600      	movs	r6, #0
 8013376:	b914      	cbnz	r4, 801337e <_fwalk_reent+0x16>
 8013378:	4630      	mov	r0, r6
 801337a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801337e:	68a5      	ldr	r5, [r4, #8]
 8013380:	6867      	ldr	r7, [r4, #4]
 8013382:	3f01      	subs	r7, #1
 8013384:	d501      	bpl.n	801338a <_fwalk_reent+0x22>
 8013386:	6824      	ldr	r4, [r4, #0]
 8013388:	e7f5      	b.n	8013376 <_fwalk_reent+0xe>
 801338a:	89ab      	ldrh	r3, [r5, #12]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d907      	bls.n	80133a0 <_fwalk_reent+0x38>
 8013390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013394:	3301      	adds	r3, #1
 8013396:	d003      	beq.n	80133a0 <_fwalk_reent+0x38>
 8013398:	4629      	mov	r1, r5
 801339a:	4640      	mov	r0, r8
 801339c:	47c8      	blx	r9
 801339e:	4306      	orrs	r6, r0
 80133a0:	3568      	adds	r5, #104	; 0x68
 80133a2:	e7ee      	b.n	8013382 <_fwalk_reent+0x1a>

080133a4 <__libc_init_array>:
 80133a4:	b570      	push	{r4, r5, r6, lr}
 80133a6:	4e0d      	ldr	r6, [pc, #52]	; (80133dc <__libc_init_array+0x38>)
 80133a8:	4c0d      	ldr	r4, [pc, #52]	; (80133e0 <__libc_init_array+0x3c>)
 80133aa:	1ba4      	subs	r4, r4, r6
 80133ac:	10a4      	asrs	r4, r4, #2
 80133ae:	2500      	movs	r5, #0
 80133b0:	42a5      	cmp	r5, r4
 80133b2:	d109      	bne.n	80133c8 <__libc_init_array+0x24>
 80133b4:	4e0b      	ldr	r6, [pc, #44]	; (80133e4 <__libc_init_array+0x40>)
 80133b6:	4c0c      	ldr	r4, [pc, #48]	; (80133e8 <__libc_init_array+0x44>)
 80133b8:	f000 fd4c 	bl	8013e54 <_init>
 80133bc:	1ba4      	subs	r4, r4, r6
 80133be:	10a4      	asrs	r4, r4, #2
 80133c0:	2500      	movs	r5, #0
 80133c2:	42a5      	cmp	r5, r4
 80133c4:	d105      	bne.n	80133d2 <__libc_init_array+0x2e>
 80133c6:	bd70      	pop	{r4, r5, r6, pc}
 80133c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80133cc:	4798      	blx	r3
 80133ce:	3501      	adds	r5, #1
 80133d0:	e7ee      	b.n	80133b0 <__libc_init_array+0xc>
 80133d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80133d6:	4798      	blx	r3
 80133d8:	3501      	adds	r5, #1
 80133da:	e7f2      	b.n	80133c2 <__libc_init_array+0x1e>
 80133dc:	08017560 	.word	0x08017560
 80133e0:	08017560 	.word	0x08017560
 80133e4:	08017560 	.word	0x08017560
 80133e8:	08017564 	.word	0x08017564

080133ec <memcpy>:
 80133ec:	b510      	push	{r4, lr}
 80133ee:	1e43      	subs	r3, r0, #1
 80133f0:	440a      	add	r2, r1
 80133f2:	4291      	cmp	r1, r2
 80133f4:	d100      	bne.n	80133f8 <memcpy+0xc>
 80133f6:	bd10      	pop	{r4, pc}
 80133f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013400:	e7f7      	b.n	80133f2 <memcpy+0x6>

08013402 <memmove>:
 8013402:	4288      	cmp	r0, r1
 8013404:	b510      	push	{r4, lr}
 8013406:	eb01 0302 	add.w	r3, r1, r2
 801340a:	d803      	bhi.n	8013414 <memmove+0x12>
 801340c:	1e42      	subs	r2, r0, #1
 801340e:	4299      	cmp	r1, r3
 8013410:	d10c      	bne.n	801342c <memmove+0x2a>
 8013412:	bd10      	pop	{r4, pc}
 8013414:	4298      	cmp	r0, r3
 8013416:	d2f9      	bcs.n	801340c <memmove+0xa>
 8013418:	1881      	adds	r1, r0, r2
 801341a:	1ad2      	subs	r2, r2, r3
 801341c:	42d3      	cmn	r3, r2
 801341e:	d100      	bne.n	8013422 <memmove+0x20>
 8013420:	bd10      	pop	{r4, pc}
 8013422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013426:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801342a:	e7f7      	b.n	801341c <memmove+0x1a>
 801342c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013430:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013434:	e7eb      	b.n	801340e <memmove+0xc>

08013436 <memset>:
 8013436:	4402      	add	r2, r0
 8013438:	4603      	mov	r3, r0
 801343a:	4293      	cmp	r3, r2
 801343c:	d100      	bne.n	8013440 <memset+0xa>
 801343e:	4770      	bx	lr
 8013440:	f803 1b01 	strb.w	r1, [r3], #1
 8013444:	e7f9      	b.n	801343a <memset+0x4>
	...

08013448 <_free_r>:
 8013448:	b538      	push	{r3, r4, r5, lr}
 801344a:	4605      	mov	r5, r0
 801344c:	2900      	cmp	r1, #0
 801344e:	d045      	beq.n	80134dc <_free_r+0x94>
 8013450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013454:	1f0c      	subs	r4, r1, #4
 8013456:	2b00      	cmp	r3, #0
 8013458:	bfb8      	it	lt
 801345a:	18e4      	addlt	r4, r4, r3
 801345c:	f000 f9d0 	bl	8013800 <__malloc_lock>
 8013460:	4a1f      	ldr	r2, [pc, #124]	; (80134e0 <_free_r+0x98>)
 8013462:	6813      	ldr	r3, [r2, #0]
 8013464:	4610      	mov	r0, r2
 8013466:	b933      	cbnz	r3, 8013476 <_free_r+0x2e>
 8013468:	6063      	str	r3, [r4, #4]
 801346a:	6014      	str	r4, [r2, #0]
 801346c:	4628      	mov	r0, r5
 801346e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013472:	f000 b9c6 	b.w	8013802 <__malloc_unlock>
 8013476:	42a3      	cmp	r3, r4
 8013478:	d90c      	bls.n	8013494 <_free_r+0x4c>
 801347a:	6821      	ldr	r1, [r4, #0]
 801347c:	1862      	adds	r2, r4, r1
 801347e:	4293      	cmp	r3, r2
 8013480:	bf04      	itt	eq
 8013482:	681a      	ldreq	r2, [r3, #0]
 8013484:	685b      	ldreq	r3, [r3, #4]
 8013486:	6063      	str	r3, [r4, #4]
 8013488:	bf04      	itt	eq
 801348a:	1852      	addeq	r2, r2, r1
 801348c:	6022      	streq	r2, [r4, #0]
 801348e:	6004      	str	r4, [r0, #0]
 8013490:	e7ec      	b.n	801346c <_free_r+0x24>
 8013492:	4613      	mov	r3, r2
 8013494:	685a      	ldr	r2, [r3, #4]
 8013496:	b10a      	cbz	r2, 801349c <_free_r+0x54>
 8013498:	42a2      	cmp	r2, r4
 801349a:	d9fa      	bls.n	8013492 <_free_r+0x4a>
 801349c:	6819      	ldr	r1, [r3, #0]
 801349e:	1858      	adds	r0, r3, r1
 80134a0:	42a0      	cmp	r0, r4
 80134a2:	d10b      	bne.n	80134bc <_free_r+0x74>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	4401      	add	r1, r0
 80134a8:	1858      	adds	r0, r3, r1
 80134aa:	4282      	cmp	r2, r0
 80134ac:	6019      	str	r1, [r3, #0]
 80134ae:	d1dd      	bne.n	801346c <_free_r+0x24>
 80134b0:	6810      	ldr	r0, [r2, #0]
 80134b2:	6852      	ldr	r2, [r2, #4]
 80134b4:	605a      	str	r2, [r3, #4]
 80134b6:	4401      	add	r1, r0
 80134b8:	6019      	str	r1, [r3, #0]
 80134ba:	e7d7      	b.n	801346c <_free_r+0x24>
 80134bc:	d902      	bls.n	80134c4 <_free_r+0x7c>
 80134be:	230c      	movs	r3, #12
 80134c0:	602b      	str	r3, [r5, #0]
 80134c2:	e7d3      	b.n	801346c <_free_r+0x24>
 80134c4:	6820      	ldr	r0, [r4, #0]
 80134c6:	1821      	adds	r1, r4, r0
 80134c8:	428a      	cmp	r2, r1
 80134ca:	bf04      	itt	eq
 80134cc:	6811      	ldreq	r1, [r2, #0]
 80134ce:	6852      	ldreq	r2, [r2, #4]
 80134d0:	6062      	str	r2, [r4, #4]
 80134d2:	bf04      	itt	eq
 80134d4:	1809      	addeq	r1, r1, r0
 80134d6:	6021      	streq	r1, [r4, #0]
 80134d8:	605c      	str	r4, [r3, #4]
 80134da:	e7c7      	b.n	801346c <_free_r+0x24>
 80134dc:	bd38      	pop	{r3, r4, r5, pc}
 80134de:	bf00      	nop
 80134e0:	200006bc 	.word	0x200006bc

080134e4 <_malloc_r>:
 80134e4:	b570      	push	{r4, r5, r6, lr}
 80134e6:	1ccd      	adds	r5, r1, #3
 80134e8:	f025 0503 	bic.w	r5, r5, #3
 80134ec:	3508      	adds	r5, #8
 80134ee:	2d0c      	cmp	r5, #12
 80134f0:	bf38      	it	cc
 80134f2:	250c      	movcc	r5, #12
 80134f4:	2d00      	cmp	r5, #0
 80134f6:	4606      	mov	r6, r0
 80134f8:	db01      	blt.n	80134fe <_malloc_r+0x1a>
 80134fa:	42a9      	cmp	r1, r5
 80134fc:	d903      	bls.n	8013506 <_malloc_r+0x22>
 80134fe:	230c      	movs	r3, #12
 8013500:	6033      	str	r3, [r6, #0]
 8013502:	2000      	movs	r0, #0
 8013504:	bd70      	pop	{r4, r5, r6, pc}
 8013506:	f000 f97b 	bl	8013800 <__malloc_lock>
 801350a:	4a23      	ldr	r2, [pc, #140]	; (8013598 <_malloc_r+0xb4>)
 801350c:	6814      	ldr	r4, [r2, #0]
 801350e:	4621      	mov	r1, r4
 8013510:	b991      	cbnz	r1, 8013538 <_malloc_r+0x54>
 8013512:	4c22      	ldr	r4, [pc, #136]	; (801359c <_malloc_r+0xb8>)
 8013514:	6823      	ldr	r3, [r4, #0]
 8013516:	b91b      	cbnz	r3, 8013520 <_malloc_r+0x3c>
 8013518:	4630      	mov	r0, r6
 801351a:	f000 f841 	bl	80135a0 <_sbrk_r>
 801351e:	6020      	str	r0, [r4, #0]
 8013520:	4629      	mov	r1, r5
 8013522:	4630      	mov	r0, r6
 8013524:	f000 f83c 	bl	80135a0 <_sbrk_r>
 8013528:	1c43      	adds	r3, r0, #1
 801352a:	d126      	bne.n	801357a <_malloc_r+0x96>
 801352c:	230c      	movs	r3, #12
 801352e:	6033      	str	r3, [r6, #0]
 8013530:	4630      	mov	r0, r6
 8013532:	f000 f966 	bl	8013802 <__malloc_unlock>
 8013536:	e7e4      	b.n	8013502 <_malloc_r+0x1e>
 8013538:	680b      	ldr	r3, [r1, #0]
 801353a:	1b5b      	subs	r3, r3, r5
 801353c:	d41a      	bmi.n	8013574 <_malloc_r+0x90>
 801353e:	2b0b      	cmp	r3, #11
 8013540:	d90f      	bls.n	8013562 <_malloc_r+0x7e>
 8013542:	600b      	str	r3, [r1, #0]
 8013544:	50cd      	str	r5, [r1, r3]
 8013546:	18cc      	adds	r4, r1, r3
 8013548:	4630      	mov	r0, r6
 801354a:	f000 f95a 	bl	8013802 <__malloc_unlock>
 801354e:	f104 000b 	add.w	r0, r4, #11
 8013552:	1d23      	adds	r3, r4, #4
 8013554:	f020 0007 	bic.w	r0, r0, #7
 8013558:	1ac3      	subs	r3, r0, r3
 801355a:	d01b      	beq.n	8013594 <_malloc_r+0xb0>
 801355c:	425a      	negs	r2, r3
 801355e:	50e2      	str	r2, [r4, r3]
 8013560:	bd70      	pop	{r4, r5, r6, pc}
 8013562:	428c      	cmp	r4, r1
 8013564:	bf0d      	iteet	eq
 8013566:	6863      	ldreq	r3, [r4, #4]
 8013568:	684b      	ldrne	r3, [r1, #4]
 801356a:	6063      	strne	r3, [r4, #4]
 801356c:	6013      	streq	r3, [r2, #0]
 801356e:	bf18      	it	ne
 8013570:	460c      	movne	r4, r1
 8013572:	e7e9      	b.n	8013548 <_malloc_r+0x64>
 8013574:	460c      	mov	r4, r1
 8013576:	6849      	ldr	r1, [r1, #4]
 8013578:	e7ca      	b.n	8013510 <_malloc_r+0x2c>
 801357a:	1cc4      	adds	r4, r0, #3
 801357c:	f024 0403 	bic.w	r4, r4, #3
 8013580:	42a0      	cmp	r0, r4
 8013582:	d005      	beq.n	8013590 <_malloc_r+0xac>
 8013584:	1a21      	subs	r1, r4, r0
 8013586:	4630      	mov	r0, r6
 8013588:	f000 f80a 	bl	80135a0 <_sbrk_r>
 801358c:	3001      	adds	r0, #1
 801358e:	d0cd      	beq.n	801352c <_malloc_r+0x48>
 8013590:	6025      	str	r5, [r4, #0]
 8013592:	e7d9      	b.n	8013548 <_malloc_r+0x64>
 8013594:	bd70      	pop	{r4, r5, r6, pc}
 8013596:	bf00      	nop
 8013598:	200006bc 	.word	0x200006bc
 801359c:	200006c0 	.word	0x200006c0

080135a0 <_sbrk_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	4c06      	ldr	r4, [pc, #24]	; (80135bc <_sbrk_r+0x1c>)
 80135a4:	2300      	movs	r3, #0
 80135a6:	4605      	mov	r5, r0
 80135a8:	4608      	mov	r0, r1
 80135aa:	6023      	str	r3, [r4, #0]
 80135ac:	f7ff fa8a 	bl	8012ac4 <_sbrk>
 80135b0:	1c43      	adds	r3, r0, #1
 80135b2:	d102      	bne.n	80135ba <_sbrk_r+0x1a>
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	b103      	cbz	r3, 80135ba <_sbrk_r+0x1a>
 80135b8:	602b      	str	r3, [r5, #0]
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	200023c8 	.word	0x200023c8

080135c0 <_raise_r>:
 80135c0:	291f      	cmp	r1, #31
 80135c2:	b538      	push	{r3, r4, r5, lr}
 80135c4:	4604      	mov	r4, r0
 80135c6:	460d      	mov	r5, r1
 80135c8:	d904      	bls.n	80135d4 <_raise_r+0x14>
 80135ca:	2316      	movs	r3, #22
 80135cc:	6003      	str	r3, [r0, #0]
 80135ce:	f04f 30ff 	mov.w	r0, #4294967295
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135d6:	b112      	cbz	r2, 80135de <_raise_r+0x1e>
 80135d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135dc:	b94b      	cbnz	r3, 80135f2 <_raise_r+0x32>
 80135de:	4620      	mov	r0, r4
 80135e0:	f000 f830 	bl	8013644 <_getpid_r>
 80135e4:	462a      	mov	r2, r5
 80135e6:	4601      	mov	r1, r0
 80135e8:	4620      	mov	r0, r4
 80135ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ee:	f000 b817 	b.w	8013620 <_kill_r>
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d00a      	beq.n	801360c <_raise_r+0x4c>
 80135f6:	1c59      	adds	r1, r3, #1
 80135f8:	d103      	bne.n	8013602 <_raise_r+0x42>
 80135fa:	2316      	movs	r3, #22
 80135fc:	6003      	str	r3, [r0, #0]
 80135fe:	2001      	movs	r0, #1
 8013600:	bd38      	pop	{r3, r4, r5, pc}
 8013602:	2400      	movs	r4, #0
 8013604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013608:	4628      	mov	r0, r5
 801360a:	4798      	blx	r3
 801360c:	2000      	movs	r0, #0
 801360e:	bd38      	pop	{r3, r4, r5, pc}

08013610 <raise>:
 8013610:	4b02      	ldr	r3, [pc, #8]	; (801361c <raise+0xc>)
 8013612:	4601      	mov	r1, r0
 8013614:	6818      	ldr	r0, [r3, #0]
 8013616:	f7ff bfd3 	b.w	80135c0 <_raise_r>
 801361a:	bf00      	nop
 801361c:	20000010 	.word	0x20000010

08013620 <_kill_r>:
 8013620:	b538      	push	{r3, r4, r5, lr}
 8013622:	4c07      	ldr	r4, [pc, #28]	; (8013640 <_kill_r+0x20>)
 8013624:	2300      	movs	r3, #0
 8013626:	4605      	mov	r5, r0
 8013628:	4608      	mov	r0, r1
 801362a:	4611      	mov	r1, r2
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	f7ff fa1d 	bl	8012a6c <_kill>
 8013632:	1c43      	adds	r3, r0, #1
 8013634:	d102      	bne.n	801363c <_kill_r+0x1c>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	b103      	cbz	r3, 801363c <_kill_r+0x1c>
 801363a:	602b      	str	r3, [r5, #0]
 801363c:	bd38      	pop	{r3, r4, r5, pc}
 801363e:	bf00      	nop
 8013640:	200023c8 	.word	0x200023c8

08013644 <_getpid_r>:
 8013644:	f7ff ba04 	b.w	8012a50 <_getpid>

08013648 <sniprintf>:
 8013648:	b40c      	push	{r2, r3}
 801364a:	b530      	push	{r4, r5, lr}
 801364c:	4b17      	ldr	r3, [pc, #92]	; (80136ac <sniprintf+0x64>)
 801364e:	1e0c      	subs	r4, r1, #0
 8013650:	b09d      	sub	sp, #116	; 0x74
 8013652:	681d      	ldr	r5, [r3, #0]
 8013654:	da08      	bge.n	8013668 <sniprintf+0x20>
 8013656:	238b      	movs	r3, #139	; 0x8b
 8013658:	602b      	str	r3, [r5, #0]
 801365a:	f04f 30ff 	mov.w	r0, #4294967295
 801365e:	b01d      	add	sp, #116	; 0x74
 8013660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013664:	b002      	add	sp, #8
 8013666:	4770      	bx	lr
 8013668:	f44f 7302 	mov.w	r3, #520	; 0x208
 801366c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013670:	bf14      	ite	ne
 8013672:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013676:	4623      	moveq	r3, r4
 8013678:	9304      	str	r3, [sp, #16]
 801367a:	9307      	str	r3, [sp, #28]
 801367c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013680:	9002      	str	r0, [sp, #8]
 8013682:	9006      	str	r0, [sp, #24]
 8013684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801368a:	ab21      	add	r3, sp, #132	; 0x84
 801368c:	a902      	add	r1, sp, #8
 801368e:	4628      	mov	r0, r5
 8013690:	9301      	str	r3, [sp, #4]
 8013692:	f000 f913 	bl	80138bc <_svfiprintf_r>
 8013696:	1c43      	adds	r3, r0, #1
 8013698:	bfbc      	itt	lt
 801369a:	238b      	movlt	r3, #139	; 0x8b
 801369c:	602b      	strlt	r3, [r5, #0]
 801369e:	2c00      	cmp	r4, #0
 80136a0:	d0dd      	beq.n	801365e <sniprintf+0x16>
 80136a2:	9b02      	ldr	r3, [sp, #8]
 80136a4:	2200      	movs	r2, #0
 80136a6:	701a      	strb	r2, [r3, #0]
 80136a8:	e7d9      	b.n	801365e <sniprintf+0x16>
 80136aa:	bf00      	nop
 80136ac:	20000010 	.word	0x20000010

080136b0 <__sread>:
 80136b0:	b510      	push	{r4, lr}
 80136b2:	460c      	mov	r4, r1
 80136b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136b8:	f000 fb8a 	bl	8013dd0 <_read_r>
 80136bc:	2800      	cmp	r0, #0
 80136be:	bfab      	itete	ge
 80136c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136c2:	89a3      	ldrhlt	r3, [r4, #12]
 80136c4:	181b      	addge	r3, r3, r0
 80136c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136ca:	bfac      	ite	ge
 80136cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80136ce:	81a3      	strhlt	r3, [r4, #12]
 80136d0:	bd10      	pop	{r4, pc}

080136d2 <__swrite>:
 80136d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d6:	461f      	mov	r7, r3
 80136d8:	898b      	ldrh	r3, [r1, #12]
 80136da:	05db      	lsls	r3, r3, #23
 80136dc:	4605      	mov	r5, r0
 80136de:	460c      	mov	r4, r1
 80136e0:	4616      	mov	r6, r2
 80136e2:	d505      	bpl.n	80136f0 <__swrite+0x1e>
 80136e4:	2302      	movs	r3, #2
 80136e6:	2200      	movs	r2, #0
 80136e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ec:	f000 f876 	bl	80137dc <_lseek_r>
 80136f0:	89a3      	ldrh	r3, [r4, #12]
 80136f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136fa:	81a3      	strh	r3, [r4, #12]
 80136fc:	4632      	mov	r2, r6
 80136fe:	463b      	mov	r3, r7
 8013700:	4628      	mov	r0, r5
 8013702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013706:	f000 b847 	b.w	8013798 <_write_r>

0801370a <__sseek>:
 801370a:	b510      	push	{r4, lr}
 801370c:	460c      	mov	r4, r1
 801370e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013712:	f000 f863 	bl	80137dc <_lseek_r>
 8013716:	1c43      	adds	r3, r0, #1
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	bf15      	itete	ne
 801371c:	6560      	strne	r0, [r4, #84]	; 0x54
 801371e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013726:	81a3      	strheq	r3, [r4, #12]
 8013728:	bf18      	it	ne
 801372a:	81a3      	strhne	r3, [r4, #12]
 801372c:	bd10      	pop	{r4, pc}

0801372e <__sclose>:
 801372e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013732:	f000 b843 	b.w	80137bc <_close_r>

08013736 <strncpy>:
 8013736:	b570      	push	{r4, r5, r6, lr}
 8013738:	4604      	mov	r4, r0
 801373a:	b902      	cbnz	r2, 801373e <strncpy+0x8>
 801373c:	bd70      	pop	{r4, r5, r6, pc}
 801373e:	4623      	mov	r3, r4
 8013740:	f811 5b01 	ldrb.w	r5, [r1], #1
 8013744:	f803 5b01 	strb.w	r5, [r3], #1
 8013748:	1e56      	subs	r6, r2, #1
 801374a:	b91d      	cbnz	r5, 8013754 <strncpy+0x1e>
 801374c:	4414      	add	r4, r2
 801374e:	42a3      	cmp	r3, r4
 8013750:	d103      	bne.n	801375a <strncpy+0x24>
 8013752:	bd70      	pop	{r4, r5, r6, pc}
 8013754:	461c      	mov	r4, r3
 8013756:	4632      	mov	r2, r6
 8013758:	e7ef      	b.n	801373a <strncpy+0x4>
 801375a:	f803 5b01 	strb.w	r5, [r3], #1
 801375e:	e7f6      	b.n	801374e <strncpy+0x18>

08013760 <strstr>:
 8013760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013762:	7803      	ldrb	r3, [r0, #0]
 8013764:	b133      	cbz	r3, 8013774 <strstr+0x14>
 8013766:	4603      	mov	r3, r0
 8013768:	4618      	mov	r0, r3
 801376a:	1c5e      	adds	r6, r3, #1
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	b933      	cbnz	r3, 801377e <strstr+0x1e>
 8013770:	4618      	mov	r0, r3
 8013772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013774:	780b      	ldrb	r3, [r1, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	bf18      	it	ne
 801377a:	2000      	movne	r0, #0
 801377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801377e:	1e4d      	subs	r5, r1, #1
 8013780:	1e44      	subs	r4, r0, #1
 8013782:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013786:	2a00      	cmp	r2, #0
 8013788:	d0f3      	beq.n	8013772 <strstr+0x12>
 801378a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801378e:	4297      	cmp	r7, r2
 8013790:	4633      	mov	r3, r6
 8013792:	d0f6      	beq.n	8013782 <strstr+0x22>
 8013794:	e7e8      	b.n	8013768 <strstr+0x8>
	...

08013798 <_write_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4c07      	ldr	r4, [pc, #28]	; (80137b8 <_write_r+0x20>)
 801379c:	4605      	mov	r5, r0
 801379e:	4608      	mov	r0, r1
 80137a0:	4611      	mov	r1, r2
 80137a2:	2200      	movs	r2, #0
 80137a4:	6022      	str	r2, [r4, #0]
 80137a6:	461a      	mov	r2, r3
 80137a8:	f7ff f978 	bl	8012a9c <_write>
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	d102      	bne.n	80137b6 <_write_r+0x1e>
 80137b0:	6823      	ldr	r3, [r4, #0]
 80137b2:	b103      	cbz	r3, 80137b6 <_write_r+0x1e>
 80137b4:	602b      	str	r3, [r5, #0]
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	200023c8 	.word	0x200023c8

080137bc <_close_r>:
 80137bc:	b538      	push	{r3, r4, r5, lr}
 80137be:	4c06      	ldr	r4, [pc, #24]	; (80137d8 <_close_r+0x1c>)
 80137c0:	2300      	movs	r3, #0
 80137c2:	4605      	mov	r5, r0
 80137c4:	4608      	mov	r0, r1
 80137c6:	6023      	str	r3, [r4, #0]
 80137c8:	f7ff f99c 	bl	8012b04 <_close>
 80137cc:	1c43      	adds	r3, r0, #1
 80137ce:	d102      	bne.n	80137d6 <_close_r+0x1a>
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	b103      	cbz	r3, 80137d6 <_close_r+0x1a>
 80137d4:	602b      	str	r3, [r5, #0]
 80137d6:	bd38      	pop	{r3, r4, r5, pc}
 80137d8:	200023c8 	.word	0x200023c8

080137dc <_lseek_r>:
 80137dc:	b538      	push	{r3, r4, r5, lr}
 80137de:	4c07      	ldr	r4, [pc, #28]	; (80137fc <_lseek_r+0x20>)
 80137e0:	4605      	mov	r5, r0
 80137e2:	4608      	mov	r0, r1
 80137e4:	4611      	mov	r1, r2
 80137e6:	2200      	movs	r2, #0
 80137e8:	6022      	str	r2, [r4, #0]
 80137ea:	461a      	mov	r2, r3
 80137ec:	f7ff f99c 	bl	8012b28 <_lseek>
 80137f0:	1c43      	adds	r3, r0, #1
 80137f2:	d102      	bne.n	80137fa <_lseek_r+0x1e>
 80137f4:	6823      	ldr	r3, [r4, #0]
 80137f6:	b103      	cbz	r3, 80137fa <_lseek_r+0x1e>
 80137f8:	602b      	str	r3, [r5, #0]
 80137fa:	bd38      	pop	{r3, r4, r5, pc}
 80137fc:	200023c8 	.word	0x200023c8

08013800 <__malloc_lock>:
 8013800:	4770      	bx	lr

08013802 <__malloc_unlock>:
 8013802:	4770      	bx	lr

08013804 <__ssputs_r>:
 8013804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013808:	688e      	ldr	r6, [r1, #8]
 801380a:	429e      	cmp	r6, r3
 801380c:	4682      	mov	sl, r0
 801380e:	460c      	mov	r4, r1
 8013810:	4691      	mov	r9, r2
 8013812:	4698      	mov	r8, r3
 8013814:	d835      	bhi.n	8013882 <__ssputs_r+0x7e>
 8013816:	898a      	ldrh	r2, [r1, #12]
 8013818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801381c:	d031      	beq.n	8013882 <__ssputs_r+0x7e>
 801381e:	6825      	ldr	r5, [r4, #0]
 8013820:	6909      	ldr	r1, [r1, #16]
 8013822:	1a6f      	subs	r7, r5, r1
 8013824:	6965      	ldr	r5, [r4, #20]
 8013826:	2302      	movs	r3, #2
 8013828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801382c:	fb95 f5f3 	sdiv	r5, r5, r3
 8013830:	f108 0301 	add.w	r3, r8, #1
 8013834:	443b      	add	r3, r7
 8013836:	429d      	cmp	r5, r3
 8013838:	bf38      	it	cc
 801383a:	461d      	movcc	r5, r3
 801383c:	0553      	lsls	r3, r2, #21
 801383e:	d531      	bpl.n	80138a4 <__ssputs_r+0xa0>
 8013840:	4629      	mov	r1, r5
 8013842:	f7ff fe4f 	bl	80134e4 <_malloc_r>
 8013846:	4606      	mov	r6, r0
 8013848:	b950      	cbnz	r0, 8013860 <__ssputs_r+0x5c>
 801384a:	230c      	movs	r3, #12
 801384c:	f8ca 3000 	str.w	r3, [sl]
 8013850:	89a3      	ldrh	r3, [r4, #12]
 8013852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013856:	81a3      	strh	r3, [r4, #12]
 8013858:	f04f 30ff 	mov.w	r0, #4294967295
 801385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013860:	463a      	mov	r2, r7
 8013862:	6921      	ldr	r1, [r4, #16]
 8013864:	f7ff fdc2 	bl	80133ec <memcpy>
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801386e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013872:	81a3      	strh	r3, [r4, #12]
 8013874:	6126      	str	r6, [r4, #16]
 8013876:	6165      	str	r5, [r4, #20]
 8013878:	443e      	add	r6, r7
 801387a:	1bed      	subs	r5, r5, r7
 801387c:	6026      	str	r6, [r4, #0]
 801387e:	60a5      	str	r5, [r4, #8]
 8013880:	4646      	mov	r6, r8
 8013882:	4546      	cmp	r6, r8
 8013884:	bf28      	it	cs
 8013886:	4646      	movcs	r6, r8
 8013888:	4632      	mov	r2, r6
 801388a:	4649      	mov	r1, r9
 801388c:	6820      	ldr	r0, [r4, #0]
 801388e:	f7ff fdb8 	bl	8013402 <memmove>
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	1b9b      	subs	r3, r3, r6
 8013896:	60a3      	str	r3, [r4, #8]
 8013898:	6823      	ldr	r3, [r4, #0]
 801389a:	441e      	add	r6, r3
 801389c:	6026      	str	r6, [r4, #0]
 801389e:	2000      	movs	r0, #0
 80138a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138a4:	462a      	mov	r2, r5
 80138a6:	f000 faa5 	bl	8013df4 <_realloc_r>
 80138aa:	4606      	mov	r6, r0
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d1e1      	bne.n	8013874 <__ssputs_r+0x70>
 80138b0:	6921      	ldr	r1, [r4, #16]
 80138b2:	4650      	mov	r0, sl
 80138b4:	f7ff fdc8 	bl	8013448 <_free_r>
 80138b8:	e7c7      	b.n	801384a <__ssputs_r+0x46>
	...

080138bc <_svfiprintf_r>:
 80138bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c0:	b09d      	sub	sp, #116	; 0x74
 80138c2:	4680      	mov	r8, r0
 80138c4:	9303      	str	r3, [sp, #12]
 80138c6:	898b      	ldrh	r3, [r1, #12]
 80138c8:	061c      	lsls	r4, r3, #24
 80138ca:	460d      	mov	r5, r1
 80138cc:	4616      	mov	r6, r2
 80138ce:	d50f      	bpl.n	80138f0 <_svfiprintf_r+0x34>
 80138d0:	690b      	ldr	r3, [r1, #16]
 80138d2:	b96b      	cbnz	r3, 80138f0 <_svfiprintf_r+0x34>
 80138d4:	2140      	movs	r1, #64	; 0x40
 80138d6:	f7ff fe05 	bl	80134e4 <_malloc_r>
 80138da:	6028      	str	r0, [r5, #0]
 80138dc:	6128      	str	r0, [r5, #16]
 80138de:	b928      	cbnz	r0, 80138ec <_svfiprintf_r+0x30>
 80138e0:	230c      	movs	r3, #12
 80138e2:	f8c8 3000 	str.w	r3, [r8]
 80138e6:	f04f 30ff 	mov.w	r0, #4294967295
 80138ea:	e0c5      	b.n	8013a78 <_svfiprintf_r+0x1bc>
 80138ec:	2340      	movs	r3, #64	; 0x40
 80138ee:	616b      	str	r3, [r5, #20]
 80138f0:	2300      	movs	r3, #0
 80138f2:	9309      	str	r3, [sp, #36]	; 0x24
 80138f4:	2320      	movs	r3, #32
 80138f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138fa:	2330      	movs	r3, #48	; 0x30
 80138fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013900:	f04f 0b01 	mov.w	fp, #1
 8013904:	4637      	mov	r7, r6
 8013906:	463c      	mov	r4, r7
 8013908:	f814 3b01 	ldrb.w	r3, [r4], #1
 801390c:	2b00      	cmp	r3, #0
 801390e:	d13c      	bne.n	801398a <_svfiprintf_r+0xce>
 8013910:	ebb7 0a06 	subs.w	sl, r7, r6
 8013914:	d00b      	beq.n	801392e <_svfiprintf_r+0x72>
 8013916:	4653      	mov	r3, sl
 8013918:	4632      	mov	r2, r6
 801391a:	4629      	mov	r1, r5
 801391c:	4640      	mov	r0, r8
 801391e:	f7ff ff71 	bl	8013804 <__ssputs_r>
 8013922:	3001      	adds	r0, #1
 8013924:	f000 80a3 	beq.w	8013a6e <_svfiprintf_r+0x1b2>
 8013928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801392a:	4453      	add	r3, sl
 801392c:	9309      	str	r3, [sp, #36]	; 0x24
 801392e:	783b      	ldrb	r3, [r7, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 809c 	beq.w	8013a6e <_svfiprintf_r+0x1b2>
 8013936:	2300      	movs	r3, #0
 8013938:	f04f 32ff 	mov.w	r2, #4294967295
 801393c:	9304      	str	r3, [sp, #16]
 801393e:	9307      	str	r3, [sp, #28]
 8013940:	9205      	str	r2, [sp, #20]
 8013942:	9306      	str	r3, [sp, #24]
 8013944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013948:	931a      	str	r3, [sp, #104]	; 0x68
 801394a:	2205      	movs	r2, #5
 801394c:	7821      	ldrb	r1, [r4, #0]
 801394e:	4850      	ldr	r0, [pc, #320]	; (8013a90 <_svfiprintf_r+0x1d4>)
 8013950:	f7ec fc46 	bl	80001e0 <memchr>
 8013954:	1c67      	adds	r7, r4, #1
 8013956:	9b04      	ldr	r3, [sp, #16]
 8013958:	b9d8      	cbnz	r0, 8013992 <_svfiprintf_r+0xd6>
 801395a:	06d9      	lsls	r1, r3, #27
 801395c:	bf44      	itt	mi
 801395e:	2220      	movmi	r2, #32
 8013960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013964:	071a      	lsls	r2, r3, #28
 8013966:	bf44      	itt	mi
 8013968:	222b      	movmi	r2, #43	; 0x2b
 801396a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801396e:	7822      	ldrb	r2, [r4, #0]
 8013970:	2a2a      	cmp	r2, #42	; 0x2a
 8013972:	d016      	beq.n	80139a2 <_svfiprintf_r+0xe6>
 8013974:	9a07      	ldr	r2, [sp, #28]
 8013976:	2100      	movs	r1, #0
 8013978:	200a      	movs	r0, #10
 801397a:	4627      	mov	r7, r4
 801397c:	3401      	adds	r4, #1
 801397e:	783b      	ldrb	r3, [r7, #0]
 8013980:	3b30      	subs	r3, #48	; 0x30
 8013982:	2b09      	cmp	r3, #9
 8013984:	d951      	bls.n	8013a2a <_svfiprintf_r+0x16e>
 8013986:	b1c9      	cbz	r1, 80139bc <_svfiprintf_r+0x100>
 8013988:	e011      	b.n	80139ae <_svfiprintf_r+0xf2>
 801398a:	2b25      	cmp	r3, #37	; 0x25
 801398c:	d0c0      	beq.n	8013910 <_svfiprintf_r+0x54>
 801398e:	4627      	mov	r7, r4
 8013990:	e7b9      	b.n	8013906 <_svfiprintf_r+0x4a>
 8013992:	4a3f      	ldr	r2, [pc, #252]	; (8013a90 <_svfiprintf_r+0x1d4>)
 8013994:	1a80      	subs	r0, r0, r2
 8013996:	fa0b f000 	lsl.w	r0, fp, r0
 801399a:	4318      	orrs	r0, r3
 801399c:	9004      	str	r0, [sp, #16]
 801399e:	463c      	mov	r4, r7
 80139a0:	e7d3      	b.n	801394a <_svfiprintf_r+0x8e>
 80139a2:	9a03      	ldr	r2, [sp, #12]
 80139a4:	1d11      	adds	r1, r2, #4
 80139a6:	6812      	ldr	r2, [r2, #0]
 80139a8:	9103      	str	r1, [sp, #12]
 80139aa:	2a00      	cmp	r2, #0
 80139ac:	db01      	blt.n	80139b2 <_svfiprintf_r+0xf6>
 80139ae:	9207      	str	r2, [sp, #28]
 80139b0:	e004      	b.n	80139bc <_svfiprintf_r+0x100>
 80139b2:	4252      	negs	r2, r2
 80139b4:	f043 0302 	orr.w	r3, r3, #2
 80139b8:	9207      	str	r2, [sp, #28]
 80139ba:	9304      	str	r3, [sp, #16]
 80139bc:	783b      	ldrb	r3, [r7, #0]
 80139be:	2b2e      	cmp	r3, #46	; 0x2e
 80139c0:	d10e      	bne.n	80139e0 <_svfiprintf_r+0x124>
 80139c2:	787b      	ldrb	r3, [r7, #1]
 80139c4:	2b2a      	cmp	r3, #42	; 0x2a
 80139c6:	f107 0101 	add.w	r1, r7, #1
 80139ca:	d132      	bne.n	8013a32 <_svfiprintf_r+0x176>
 80139cc:	9b03      	ldr	r3, [sp, #12]
 80139ce:	1d1a      	adds	r2, r3, #4
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	9203      	str	r2, [sp, #12]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	bfb8      	it	lt
 80139d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80139dc:	3702      	adds	r7, #2
 80139de:	9305      	str	r3, [sp, #20]
 80139e0:	4c2c      	ldr	r4, [pc, #176]	; (8013a94 <_svfiprintf_r+0x1d8>)
 80139e2:	7839      	ldrb	r1, [r7, #0]
 80139e4:	2203      	movs	r2, #3
 80139e6:	4620      	mov	r0, r4
 80139e8:	f7ec fbfa 	bl	80001e0 <memchr>
 80139ec:	b138      	cbz	r0, 80139fe <_svfiprintf_r+0x142>
 80139ee:	2340      	movs	r3, #64	; 0x40
 80139f0:	1b00      	subs	r0, r0, r4
 80139f2:	fa03 f000 	lsl.w	r0, r3, r0
 80139f6:	9b04      	ldr	r3, [sp, #16]
 80139f8:	4303      	orrs	r3, r0
 80139fa:	9304      	str	r3, [sp, #16]
 80139fc:	3701      	adds	r7, #1
 80139fe:	7839      	ldrb	r1, [r7, #0]
 8013a00:	4825      	ldr	r0, [pc, #148]	; (8013a98 <_svfiprintf_r+0x1dc>)
 8013a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a06:	2206      	movs	r2, #6
 8013a08:	1c7e      	adds	r6, r7, #1
 8013a0a:	f7ec fbe9 	bl	80001e0 <memchr>
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d035      	beq.n	8013a7e <_svfiprintf_r+0x1c2>
 8013a12:	4b22      	ldr	r3, [pc, #136]	; (8013a9c <_svfiprintf_r+0x1e0>)
 8013a14:	b9fb      	cbnz	r3, 8013a56 <_svfiprintf_r+0x19a>
 8013a16:	9b03      	ldr	r3, [sp, #12]
 8013a18:	3307      	adds	r3, #7
 8013a1a:	f023 0307 	bic.w	r3, r3, #7
 8013a1e:	3308      	adds	r3, #8
 8013a20:	9303      	str	r3, [sp, #12]
 8013a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a24:	444b      	add	r3, r9
 8013a26:	9309      	str	r3, [sp, #36]	; 0x24
 8013a28:	e76c      	b.n	8013904 <_svfiprintf_r+0x48>
 8013a2a:	fb00 3202 	mla	r2, r0, r2, r3
 8013a2e:	2101      	movs	r1, #1
 8013a30:	e7a3      	b.n	801397a <_svfiprintf_r+0xbe>
 8013a32:	2300      	movs	r3, #0
 8013a34:	9305      	str	r3, [sp, #20]
 8013a36:	4618      	mov	r0, r3
 8013a38:	240a      	movs	r4, #10
 8013a3a:	460f      	mov	r7, r1
 8013a3c:	3101      	adds	r1, #1
 8013a3e:	783a      	ldrb	r2, [r7, #0]
 8013a40:	3a30      	subs	r2, #48	; 0x30
 8013a42:	2a09      	cmp	r2, #9
 8013a44:	d903      	bls.n	8013a4e <_svfiprintf_r+0x192>
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d0ca      	beq.n	80139e0 <_svfiprintf_r+0x124>
 8013a4a:	9005      	str	r0, [sp, #20]
 8013a4c:	e7c8      	b.n	80139e0 <_svfiprintf_r+0x124>
 8013a4e:	fb04 2000 	mla	r0, r4, r0, r2
 8013a52:	2301      	movs	r3, #1
 8013a54:	e7f1      	b.n	8013a3a <_svfiprintf_r+0x17e>
 8013a56:	ab03      	add	r3, sp, #12
 8013a58:	9300      	str	r3, [sp, #0]
 8013a5a:	462a      	mov	r2, r5
 8013a5c:	4b10      	ldr	r3, [pc, #64]	; (8013aa0 <_svfiprintf_r+0x1e4>)
 8013a5e:	a904      	add	r1, sp, #16
 8013a60:	4640      	mov	r0, r8
 8013a62:	f3af 8000 	nop.w
 8013a66:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013a6a:	4681      	mov	r9, r0
 8013a6c:	d1d9      	bne.n	8013a22 <_svfiprintf_r+0x166>
 8013a6e:	89ab      	ldrh	r3, [r5, #12]
 8013a70:	065b      	lsls	r3, r3, #25
 8013a72:	f53f af38 	bmi.w	80138e6 <_svfiprintf_r+0x2a>
 8013a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a78:	b01d      	add	sp, #116	; 0x74
 8013a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a7e:	ab03      	add	r3, sp, #12
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	462a      	mov	r2, r5
 8013a84:	4b06      	ldr	r3, [pc, #24]	; (8013aa0 <_svfiprintf_r+0x1e4>)
 8013a86:	a904      	add	r1, sp, #16
 8013a88:	4640      	mov	r0, r8
 8013a8a:	f000 f881 	bl	8013b90 <_printf_i>
 8013a8e:	e7ea      	b.n	8013a66 <_svfiprintf_r+0x1aa>
 8013a90:	0801752c 	.word	0x0801752c
 8013a94:	08017532 	.word	0x08017532
 8013a98:	08017536 	.word	0x08017536
 8013a9c:	00000000 	.word	0x00000000
 8013aa0:	08013805 	.word	0x08013805

08013aa4 <_printf_common>:
 8013aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa8:	4691      	mov	r9, r2
 8013aaa:	461f      	mov	r7, r3
 8013aac:	688a      	ldr	r2, [r1, #8]
 8013aae:	690b      	ldr	r3, [r1, #16]
 8013ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ab4:	4293      	cmp	r3, r2
 8013ab6:	bfb8      	it	lt
 8013ab8:	4613      	movlt	r3, r2
 8013aba:	f8c9 3000 	str.w	r3, [r9]
 8013abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	b112      	cbz	r2, 8013ace <_printf_common+0x2a>
 8013ac8:	3301      	adds	r3, #1
 8013aca:	f8c9 3000 	str.w	r3, [r9]
 8013ace:	6823      	ldr	r3, [r4, #0]
 8013ad0:	0699      	lsls	r1, r3, #26
 8013ad2:	bf42      	ittt	mi
 8013ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013ad8:	3302      	addmi	r3, #2
 8013ada:	f8c9 3000 	strmi.w	r3, [r9]
 8013ade:	6825      	ldr	r5, [r4, #0]
 8013ae0:	f015 0506 	ands.w	r5, r5, #6
 8013ae4:	d107      	bne.n	8013af6 <_printf_common+0x52>
 8013ae6:	f104 0a19 	add.w	sl, r4, #25
 8013aea:	68e3      	ldr	r3, [r4, #12]
 8013aec:	f8d9 2000 	ldr.w	r2, [r9]
 8013af0:	1a9b      	subs	r3, r3, r2
 8013af2:	429d      	cmp	r5, r3
 8013af4:	db29      	blt.n	8013b4a <_printf_common+0xa6>
 8013af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013afa:	6822      	ldr	r2, [r4, #0]
 8013afc:	3300      	adds	r3, #0
 8013afe:	bf18      	it	ne
 8013b00:	2301      	movne	r3, #1
 8013b02:	0692      	lsls	r2, r2, #26
 8013b04:	d42e      	bmi.n	8013b64 <_printf_common+0xc0>
 8013b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b0a:	4639      	mov	r1, r7
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	47c0      	blx	r8
 8013b10:	3001      	adds	r0, #1
 8013b12:	d021      	beq.n	8013b58 <_printf_common+0xb4>
 8013b14:	6823      	ldr	r3, [r4, #0]
 8013b16:	68e5      	ldr	r5, [r4, #12]
 8013b18:	f8d9 2000 	ldr.w	r2, [r9]
 8013b1c:	f003 0306 	and.w	r3, r3, #6
 8013b20:	2b04      	cmp	r3, #4
 8013b22:	bf08      	it	eq
 8013b24:	1aad      	subeq	r5, r5, r2
 8013b26:	68a3      	ldr	r3, [r4, #8]
 8013b28:	6922      	ldr	r2, [r4, #16]
 8013b2a:	bf0c      	ite	eq
 8013b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b30:	2500      	movne	r5, #0
 8013b32:	4293      	cmp	r3, r2
 8013b34:	bfc4      	itt	gt
 8013b36:	1a9b      	subgt	r3, r3, r2
 8013b38:	18ed      	addgt	r5, r5, r3
 8013b3a:	f04f 0900 	mov.w	r9, #0
 8013b3e:	341a      	adds	r4, #26
 8013b40:	454d      	cmp	r5, r9
 8013b42:	d11b      	bne.n	8013b7c <_printf_common+0xd8>
 8013b44:	2000      	movs	r0, #0
 8013b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	4652      	mov	r2, sl
 8013b4e:	4639      	mov	r1, r7
 8013b50:	4630      	mov	r0, r6
 8013b52:	47c0      	blx	r8
 8013b54:	3001      	adds	r0, #1
 8013b56:	d103      	bne.n	8013b60 <_printf_common+0xbc>
 8013b58:	f04f 30ff 	mov.w	r0, #4294967295
 8013b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b60:	3501      	adds	r5, #1
 8013b62:	e7c2      	b.n	8013aea <_printf_common+0x46>
 8013b64:	18e1      	adds	r1, r4, r3
 8013b66:	1c5a      	adds	r2, r3, #1
 8013b68:	2030      	movs	r0, #48	; 0x30
 8013b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b6e:	4422      	add	r2, r4
 8013b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b78:	3302      	adds	r3, #2
 8013b7a:	e7c4      	b.n	8013b06 <_printf_common+0x62>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	4622      	mov	r2, r4
 8013b80:	4639      	mov	r1, r7
 8013b82:	4630      	mov	r0, r6
 8013b84:	47c0      	blx	r8
 8013b86:	3001      	adds	r0, #1
 8013b88:	d0e6      	beq.n	8013b58 <_printf_common+0xb4>
 8013b8a:	f109 0901 	add.w	r9, r9, #1
 8013b8e:	e7d7      	b.n	8013b40 <_printf_common+0x9c>

08013b90 <_printf_i>:
 8013b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b94:	4617      	mov	r7, r2
 8013b96:	7e0a      	ldrb	r2, [r1, #24]
 8013b98:	b085      	sub	sp, #20
 8013b9a:	2a6e      	cmp	r2, #110	; 0x6e
 8013b9c:	4698      	mov	r8, r3
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	460c      	mov	r4, r1
 8013ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ba4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8013ba8:	f000 80bc 	beq.w	8013d24 <_printf_i+0x194>
 8013bac:	d81a      	bhi.n	8013be4 <_printf_i+0x54>
 8013bae:	2a63      	cmp	r2, #99	; 0x63
 8013bb0:	d02e      	beq.n	8013c10 <_printf_i+0x80>
 8013bb2:	d80a      	bhi.n	8013bca <_printf_i+0x3a>
 8013bb4:	2a00      	cmp	r2, #0
 8013bb6:	f000 80c8 	beq.w	8013d4a <_printf_i+0x1ba>
 8013bba:	2a58      	cmp	r2, #88	; 0x58
 8013bbc:	f000 808a 	beq.w	8013cd4 <_printf_i+0x144>
 8013bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bc4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8013bc8:	e02a      	b.n	8013c20 <_printf_i+0x90>
 8013bca:	2a64      	cmp	r2, #100	; 0x64
 8013bcc:	d001      	beq.n	8013bd2 <_printf_i+0x42>
 8013bce:	2a69      	cmp	r2, #105	; 0x69
 8013bd0:	d1f6      	bne.n	8013bc0 <_printf_i+0x30>
 8013bd2:	6821      	ldr	r1, [r4, #0]
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8013bda:	d023      	beq.n	8013c24 <_printf_i+0x94>
 8013bdc:	1d11      	adds	r1, r2, #4
 8013bde:	6019      	str	r1, [r3, #0]
 8013be0:	6813      	ldr	r3, [r2, #0]
 8013be2:	e027      	b.n	8013c34 <_printf_i+0xa4>
 8013be4:	2a73      	cmp	r2, #115	; 0x73
 8013be6:	f000 80b4 	beq.w	8013d52 <_printf_i+0x1c2>
 8013bea:	d808      	bhi.n	8013bfe <_printf_i+0x6e>
 8013bec:	2a6f      	cmp	r2, #111	; 0x6f
 8013bee:	d02a      	beq.n	8013c46 <_printf_i+0xb6>
 8013bf0:	2a70      	cmp	r2, #112	; 0x70
 8013bf2:	d1e5      	bne.n	8013bc0 <_printf_i+0x30>
 8013bf4:	680a      	ldr	r2, [r1, #0]
 8013bf6:	f042 0220 	orr.w	r2, r2, #32
 8013bfa:	600a      	str	r2, [r1, #0]
 8013bfc:	e003      	b.n	8013c06 <_printf_i+0x76>
 8013bfe:	2a75      	cmp	r2, #117	; 0x75
 8013c00:	d021      	beq.n	8013c46 <_printf_i+0xb6>
 8013c02:	2a78      	cmp	r2, #120	; 0x78
 8013c04:	d1dc      	bne.n	8013bc0 <_printf_i+0x30>
 8013c06:	2278      	movs	r2, #120	; 0x78
 8013c08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8013c0c:	496e      	ldr	r1, [pc, #440]	; (8013dc8 <_printf_i+0x238>)
 8013c0e:	e064      	b.n	8013cda <_printf_i+0x14a>
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8013c16:	1d11      	adds	r1, r2, #4
 8013c18:	6019      	str	r1, [r3, #0]
 8013c1a:	6813      	ldr	r3, [r2, #0]
 8013c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c20:	2301      	movs	r3, #1
 8013c22:	e0a3      	b.n	8013d6c <_printf_i+0x1dc>
 8013c24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8013c28:	f102 0104 	add.w	r1, r2, #4
 8013c2c:	6019      	str	r1, [r3, #0]
 8013c2e:	d0d7      	beq.n	8013be0 <_printf_i+0x50>
 8013c30:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	da03      	bge.n	8013c40 <_printf_i+0xb0>
 8013c38:	222d      	movs	r2, #45	; 0x2d
 8013c3a:	425b      	negs	r3, r3
 8013c3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013c40:	4962      	ldr	r1, [pc, #392]	; (8013dcc <_printf_i+0x23c>)
 8013c42:	220a      	movs	r2, #10
 8013c44:	e017      	b.n	8013c76 <_printf_i+0xe6>
 8013c46:	6820      	ldr	r0, [r4, #0]
 8013c48:	6819      	ldr	r1, [r3, #0]
 8013c4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013c4e:	d003      	beq.n	8013c58 <_printf_i+0xc8>
 8013c50:	1d08      	adds	r0, r1, #4
 8013c52:	6018      	str	r0, [r3, #0]
 8013c54:	680b      	ldr	r3, [r1, #0]
 8013c56:	e006      	b.n	8013c66 <_printf_i+0xd6>
 8013c58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c5c:	f101 0004 	add.w	r0, r1, #4
 8013c60:	6018      	str	r0, [r3, #0]
 8013c62:	d0f7      	beq.n	8013c54 <_printf_i+0xc4>
 8013c64:	880b      	ldrh	r3, [r1, #0]
 8013c66:	4959      	ldr	r1, [pc, #356]	; (8013dcc <_printf_i+0x23c>)
 8013c68:	2a6f      	cmp	r2, #111	; 0x6f
 8013c6a:	bf14      	ite	ne
 8013c6c:	220a      	movne	r2, #10
 8013c6e:	2208      	moveq	r2, #8
 8013c70:	2000      	movs	r0, #0
 8013c72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8013c76:	6865      	ldr	r5, [r4, #4]
 8013c78:	60a5      	str	r5, [r4, #8]
 8013c7a:	2d00      	cmp	r5, #0
 8013c7c:	f2c0 809c 	blt.w	8013db8 <_printf_i+0x228>
 8013c80:	6820      	ldr	r0, [r4, #0]
 8013c82:	f020 0004 	bic.w	r0, r0, #4
 8013c86:	6020      	str	r0, [r4, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d13f      	bne.n	8013d0c <_printf_i+0x17c>
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	f040 8095 	bne.w	8013dbc <_printf_i+0x22c>
 8013c92:	4675      	mov	r5, lr
 8013c94:	2a08      	cmp	r2, #8
 8013c96:	d10b      	bne.n	8013cb0 <_printf_i+0x120>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	07da      	lsls	r2, r3, #31
 8013c9c:	d508      	bpl.n	8013cb0 <_printf_i+0x120>
 8013c9e:	6923      	ldr	r3, [r4, #16]
 8013ca0:	6862      	ldr	r2, [r4, #4]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	bfde      	ittt	le
 8013ca6:	2330      	movle	r3, #48	; 0x30
 8013ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cb0:	ebae 0305 	sub.w	r3, lr, r5
 8013cb4:	6123      	str	r3, [r4, #16]
 8013cb6:	f8cd 8000 	str.w	r8, [sp]
 8013cba:	463b      	mov	r3, r7
 8013cbc:	aa03      	add	r2, sp, #12
 8013cbe:	4621      	mov	r1, r4
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7ff feef 	bl	8013aa4 <_printf_common>
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	d155      	bne.n	8013d76 <_printf_i+0x1e6>
 8013cca:	f04f 30ff 	mov.w	r0, #4294967295
 8013cce:	b005      	add	sp, #20
 8013cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cd4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8013cd8:	493c      	ldr	r1, [pc, #240]	; (8013dcc <_printf_i+0x23c>)
 8013cda:	6822      	ldr	r2, [r4, #0]
 8013cdc:	6818      	ldr	r0, [r3, #0]
 8013cde:	f012 0f80 	tst.w	r2, #128	; 0x80
 8013ce2:	f100 0504 	add.w	r5, r0, #4
 8013ce6:	601d      	str	r5, [r3, #0]
 8013ce8:	d001      	beq.n	8013cee <_printf_i+0x15e>
 8013cea:	6803      	ldr	r3, [r0, #0]
 8013cec:	e002      	b.n	8013cf4 <_printf_i+0x164>
 8013cee:	0655      	lsls	r5, r2, #25
 8013cf0:	d5fb      	bpl.n	8013cea <_printf_i+0x15a>
 8013cf2:	8803      	ldrh	r3, [r0, #0]
 8013cf4:	07d0      	lsls	r0, r2, #31
 8013cf6:	bf44      	itt	mi
 8013cf8:	f042 0220 	orrmi.w	r2, r2, #32
 8013cfc:	6022      	strmi	r2, [r4, #0]
 8013cfe:	b91b      	cbnz	r3, 8013d08 <_printf_i+0x178>
 8013d00:	6822      	ldr	r2, [r4, #0]
 8013d02:	f022 0220 	bic.w	r2, r2, #32
 8013d06:	6022      	str	r2, [r4, #0]
 8013d08:	2210      	movs	r2, #16
 8013d0a:	e7b1      	b.n	8013c70 <_printf_i+0xe0>
 8013d0c:	4675      	mov	r5, lr
 8013d0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d12:	fb02 3310 	mls	r3, r2, r0, r3
 8013d16:	5ccb      	ldrb	r3, [r1, r3]
 8013d18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d1f5      	bne.n	8013d0e <_printf_i+0x17e>
 8013d22:	e7b7      	b.n	8013c94 <_printf_i+0x104>
 8013d24:	6808      	ldr	r0, [r1, #0]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	6949      	ldr	r1, [r1, #20]
 8013d2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013d2e:	d004      	beq.n	8013d3a <_printf_i+0x1aa>
 8013d30:	1d10      	adds	r0, r2, #4
 8013d32:	6018      	str	r0, [r3, #0]
 8013d34:	6813      	ldr	r3, [r2, #0]
 8013d36:	6019      	str	r1, [r3, #0]
 8013d38:	e007      	b.n	8013d4a <_printf_i+0x1ba>
 8013d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d3e:	f102 0004 	add.w	r0, r2, #4
 8013d42:	6018      	str	r0, [r3, #0]
 8013d44:	6813      	ldr	r3, [r2, #0]
 8013d46:	d0f6      	beq.n	8013d36 <_printf_i+0x1a6>
 8013d48:	8019      	strh	r1, [r3, #0]
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	6123      	str	r3, [r4, #16]
 8013d4e:	4675      	mov	r5, lr
 8013d50:	e7b1      	b.n	8013cb6 <_printf_i+0x126>
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	1d11      	adds	r1, r2, #4
 8013d56:	6019      	str	r1, [r3, #0]
 8013d58:	6815      	ldr	r5, [r2, #0]
 8013d5a:	6862      	ldr	r2, [r4, #4]
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f7ec fa3e 	bl	80001e0 <memchr>
 8013d64:	b108      	cbz	r0, 8013d6a <_printf_i+0x1da>
 8013d66:	1b40      	subs	r0, r0, r5
 8013d68:	6060      	str	r0, [r4, #4]
 8013d6a:	6863      	ldr	r3, [r4, #4]
 8013d6c:	6123      	str	r3, [r4, #16]
 8013d6e:	2300      	movs	r3, #0
 8013d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d74:	e79f      	b.n	8013cb6 <_printf_i+0x126>
 8013d76:	6923      	ldr	r3, [r4, #16]
 8013d78:	462a      	mov	r2, r5
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	47c0      	blx	r8
 8013d80:	3001      	adds	r0, #1
 8013d82:	d0a2      	beq.n	8013cca <_printf_i+0x13a>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	079b      	lsls	r3, r3, #30
 8013d88:	d507      	bpl.n	8013d9a <_printf_i+0x20a>
 8013d8a:	2500      	movs	r5, #0
 8013d8c:	f104 0919 	add.w	r9, r4, #25
 8013d90:	68e3      	ldr	r3, [r4, #12]
 8013d92:	9a03      	ldr	r2, [sp, #12]
 8013d94:	1a9b      	subs	r3, r3, r2
 8013d96:	429d      	cmp	r5, r3
 8013d98:	db05      	blt.n	8013da6 <_printf_i+0x216>
 8013d9a:	68e0      	ldr	r0, [r4, #12]
 8013d9c:	9b03      	ldr	r3, [sp, #12]
 8013d9e:	4298      	cmp	r0, r3
 8013da0:	bfb8      	it	lt
 8013da2:	4618      	movlt	r0, r3
 8013da4:	e793      	b.n	8013cce <_printf_i+0x13e>
 8013da6:	2301      	movs	r3, #1
 8013da8:	464a      	mov	r2, r9
 8013daa:	4639      	mov	r1, r7
 8013dac:	4630      	mov	r0, r6
 8013dae:	47c0      	blx	r8
 8013db0:	3001      	adds	r0, #1
 8013db2:	d08a      	beq.n	8013cca <_printf_i+0x13a>
 8013db4:	3501      	adds	r5, #1
 8013db6:	e7eb      	b.n	8013d90 <_printf_i+0x200>
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1a7      	bne.n	8013d0c <_printf_i+0x17c>
 8013dbc:	780b      	ldrb	r3, [r1, #0]
 8013dbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013dc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dc6:	e765      	b.n	8013c94 <_printf_i+0x104>
 8013dc8:	0801754e 	.word	0x0801754e
 8013dcc:	0801753d 	.word	0x0801753d

08013dd0 <_read_r>:
 8013dd0:	b538      	push	{r3, r4, r5, lr}
 8013dd2:	4c07      	ldr	r4, [pc, #28]	; (8013df0 <_read_r+0x20>)
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	4608      	mov	r0, r1
 8013dd8:	4611      	mov	r1, r2
 8013dda:	2200      	movs	r2, #0
 8013ddc:	6022      	str	r2, [r4, #0]
 8013dde:	461a      	mov	r2, r3
 8013de0:	f7fe feb6 	bl	8012b50 <_read>
 8013de4:	1c43      	adds	r3, r0, #1
 8013de6:	d102      	bne.n	8013dee <_read_r+0x1e>
 8013de8:	6823      	ldr	r3, [r4, #0]
 8013dea:	b103      	cbz	r3, 8013dee <_read_r+0x1e>
 8013dec:	602b      	str	r3, [r5, #0]
 8013dee:	bd38      	pop	{r3, r4, r5, pc}
 8013df0:	200023c8 	.word	0x200023c8

08013df4 <_realloc_r>:
 8013df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df6:	4607      	mov	r7, r0
 8013df8:	4614      	mov	r4, r2
 8013dfa:	460e      	mov	r6, r1
 8013dfc:	b921      	cbnz	r1, 8013e08 <_realloc_r+0x14>
 8013dfe:	4611      	mov	r1, r2
 8013e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e04:	f7ff bb6e 	b.w	80134e4 <_malloc_r>
 8013e08:	b922      	cbnz	r2, 8013e14 <_realloc_r+0x20>
 8013e0a:	f7ff fb1d 	bl	8013448 <_free_r>
 8013e0e:	4625      	mov	r5, r4
 8013e10:	4628      	mov	r0, r5
 8013e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e14:	f000 f814 	bl	8013e40 <_malloc_usable_size_r>
 8013e18:	4284      	cmp	r4, r0
 8013e1a:	d90f      	bls.n	8013e3c <_realloc_r+0x48>
 8013e1c:	4621      	mov	r1, r4
 8013e1e:	4638      	mov	r0, r7
 8013e20:	f7ff fb60 	bl	80134e4 <_malloc_r>
 8013e24:	4605      	mov	r5, r0
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d0f2      	beq.n	8013e10 <_realloc_r+0x1c>
 8013e2a:	4631      	mov	r1, r6
 8013e2c:	4622      	mov	r2, r4
 8013e2e:	f7ff fadd 	bl	80133ec <memcpy>
 8013e32:	4631      	mov	r1, r6
 8013e34:	4638      	mov	r0, r7
 8013e36:	f7ff fb07 	bl	8013448 <_free_r>
 8013e3a:	e7e9      	b.n	8013e10 <_realloc_r+0x1c>
 8013e3c:	4635      	mov	r5, r6
 8013e3e:	e7e7      	b.n	8013e10 <_realloc_r+0x1c>

08013e40 <_malloc_usable_size_r>:
 8013e40:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f1a0 0004 	sub.w	r0, r0, #4
 8013e4a:	bfbc      	itt	lt
 8013e4c:	580b      	ldrlt	r3, [r1, r0]
 8013e4e:	18c0      	addlt	r0, r0, r3
 8013e50:	4770      	bx	lr
	...

08013e54 <_init>:
 8013e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e56:	bf00      	nop
 8013e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e5a:	bc08      	pop	{r3}
 8013e5c:	469e      	mov	lr, r3
 8013e5e:	4770      	bx	lr

08013e60 <_fini>:
 8013e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e62:	bf00      	nop
 8013e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e66:	bc08      	pop	{r3}
 8013e68:	469e      	mov	lr, r3
 8013e6a:	4770      	bx	lr
