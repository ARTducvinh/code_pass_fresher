
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a70  0800fa04  0800fa04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012474  08012474  00022474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012478  08012478  00022478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  0801247c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0003006c  2**0
                  CONTENTS
  7 .bss          00001064  2000006c  2000006c  0003006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  200010d0  200010d0  0003006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f8bb  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005d71  00000000  00000000  0005f957  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001368  00000000  00000000  000656c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012e8  00000000  00000000  00066a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000da29  00000000  00000000  00067d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005050  00000000  00000000  00075741  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007a791  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000051a0  00000000  00000000  0007a810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9ec 	.word	0x0800f9ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800f9ec 	.word	0x0800f9ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <send_gsm_command_by_index>:
#include <string.h>
#include <stdbool.h>
#include "uart_line_queue.h"// định nghĩa tạm thời cho biến ppp_mode để xác định trạng thái 

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db1d      	blt.n	80002ca <send_gsm_command_by_index+0x4a>
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <send_gsm_command_by_index+0x54>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	da18      	bge.n	80002ca <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <send_gsm_command_by_index+0x58>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	4413      	add	r3, r2
 80002a0:	3304      	adds	r3, #4
 80002a2:	681c      	ldr	r4, [r3, #0]
 80002a4:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <send_gsm_command_by_index+0x58>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	4413      	add	r3, r2
 80002ac:	3304      	adds	r3, #4
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ff8d 	bl	80001d0 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4619      	mov	r1, r3
 80002ba:	4620      	mov	r0, r4
 80002bc:	f000 fc98 	bl	8000bf0 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 80002c0:	2102      	movs	r1, #2
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <send_gsm_command_by_index+0x5c>)
 80002c4:	f000 fc94 	bl	8000bf0 <uart1_send_raw>
 80002c8:	e000      	b.n	80002cc <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 80002ca:	bf00      	nop
}
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd90      	pop	{r4, r7, pc}
 80002d2:	bf00      	nop
 80002d4:	08011ff8 	.word	0x08011ff8
 80002d8:	08011f48 	.word	0x08011f48
 80002dc:	0800fa04 	.word	0x0800fa04

080002e0 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0d4      	sub	sp, #336	; 0x150
 80002e4:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 80002e6:	4b40      	ldr	r3, [pc, #256]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b40      	ldr	r3, [pc, #256]	; (80003ec <send_all_gsm_commands_with_check+0x10c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	da75      	bge.n	80003de <send_all_gsm_commands_with_check+0xfe>
        return; // Đã gửi hết lệnh
    }

    if (!waiting_for_response) {
 80002f2:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	f083 0301 	eor.w	r3, r3, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00e      	beq.n	800031e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000300:	f000 fb72 	bl	80009e8 <timer2_get_tick>
 8000304:	4602      	mov	r2, r0
 8000306:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 8000308:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800030a:	4b3a      	ldr	r3, [pc, #232]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000312:	3b08      	subs	r3, #8
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 8000316:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a36      	ldr	r2, [pc, #216]	; (80003fc <send_all_gsm_commands_with_check+0x11c>)
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	4413      	add	r3, r2
 8000328:	330c      	adds	r3, #12
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000330:	f000 fb5a 	bl	80009e8 <timer2_get_tick>
 8000334:	4602      	mov	r2, r0
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <send_all_gsm_commands_with_check+0x114>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1ad2      	subs	r2, r2, r3
 800033c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000340:	429a      	cmp	r2, r3
 8000342:	d231      	bcs.n	80003a8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 5000) {
 8000344:	f000 fb50 	bl	80009e8 <timer2_get_tick>
 8000348:	4602      	mov	r2, r0
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	f241 3287 	movw	r2, #4999	; 0x1387
 8000354:	4293      	cmp	r3, r2
 8000356:	d91e      	bls.n	8000396 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000358:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff8f 	bl	8000280 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 8000362:	f000 fb41 	bl	80009e8 <timer2_get_tick>
 8000366:	4602      	mov	r2, r0
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <send_all_gsm_commands_with_check+0x118>)
 800036a:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 800036c:	e013      	b.n	8000396 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000376:	4611      	mov	r1, r2
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f94d 	bl	8000618 <check_gsm_response_by_index>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 8000392:	6013      	str	r3, [r2, #0]
                return; // Chuyển sang lệnh tiếp theo
 8000394:	e024      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
        while (uart_line_queue_pop(response)) {
 8000396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fdfe 	bl	8000f9c <uart_line_queue_pop>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1e3      	bne.n	800036e <send_all_gsm_commands_with_check+0x8e>
 80003a6:	e01b      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
            }
        }
    } else {
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <send_all_gsm_commands_with_check+0x11c>)
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	4413      	add	r3, r2
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1d38      	adds	r0, r7, #4
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	460b      	mov	r3, r1
 80003be:	4a10      	ldr	r2, [pc, #64]	; (8000400 <send_all_gsm_commands_with_check+0x120>)
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	f00e ff0d 	bl	800f1e0 <sniprintf>
        uart_log(log_buf);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fbd9 	bl	8000b80 <uart_log>
        waiting_for_response = false;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <send_all_gsm_commands_with_check+0x110>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count; // Kết thúc gửi lệnh
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <send_all_gsm_commands_with_check+0x10c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <send_all_gsm_commands_with_check+0x108>)
 80003da:	6013      	str	r3, [r2, #0]
 80003dc:	e000      	b.n	80003e0 <send_all_gsm_commands_with_check+0x100>
        return; // Đã gửi hết lệnh
 80003de:	bf00      	nop
    }
 80003e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000088 	.word	0x20000088
 80003ec:	08011ff8 	.word	0x08011ff8
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	20000090 	.word	0x20000090
 80003f8:	20000094 	.word	0x20000094
 80003fc:	08011f48 	.word	0x08011f48
 8000400:	0800fa08 	.word	0x0800fa08

08000404 <parse_response_at>:
#include <stdio.h>
#include "gsm_state.h"


// Hàm phân tích phản hồi cho lệnh "AT"
bool parse_response_at(const char* response) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 fbb7 	bl	8000b80 <uart_log>
    return strstr(response, "OK") != NULL;
 8000412:	4907      	ldr	r1, [pc, #28]	; (8000430 <parse_response_at+0x2c>)
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f00e ff6f 	bl	800f2f8 <strstr>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf14      	ite	ne
 8000420:	2301      	movne	r3, #1
 8000422:	2300      	moveq	r3, #0
 8000424:	b2db      	uxtb	r3, r3
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	0800fb88 	.word	0x0800fb88

08000434 <parse_response_ati>:

// Hàm phân tích phản hồi cho lệnh "ATI"
bool parse_response_ati(const char* response) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fb9f 	bl	8000b80 <uart_log>
    return strstr(response, "Manufacturer: INCORPORATED") != NULL; // Dòng dữ liệu chính
 8000442:	4907      	ldr	r1, [pc, #28]	; (8000460 <parse_response_ati+0x2c>)
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f00e ff57 	bl	800f2f8 <strstr>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf14      	ite	ne
 8000450:	2301      	movne	r3, #1
 8000452:	2300      	moveq	r3, #0
 8000454:	b2db      	uxtb	r3, r3
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	0800fb8c 	.word	0x0800fb8c

08000464 <parse_response_at_cpin>:

// Hàm phân tích phản hồi cho lệnh "AT+CPIN?"
bool parse_response_at_cpin(const char* response) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 fb87 	bl	8000b80 <uart_log>
    return strstr(response, "+CPIN: READY") != NULL; // Dòng dữ liệu chính
 8000472:	4907      	ldr	r1, [pc, #28]	; (8000490 <parse_response_at_cpin+0x2c>)
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f00e ff3f 	bl	800f2f8 <strstr>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf14      	ite	ne
 8000480:	2301      	movne	r3, #1
 8000482:	2300      	moveq	r3, #0
 8000484:	b2db      	uxtb	r3, r3
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	0800fba8 	.word	0x0800fba8

08000494 <parse_response_at_csq>:

// Hàm phân tích phản hồi cho lệnh "AT+CSQ"
bool parse_response_at_csq(const char* response) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 fb6f 	bl	8000b80 <uart_log>
    return strstr(response, "+CSQ:") != NULL; // Dòng dữ liệu chính
 80004a2:	4907      	ldr	r1, [pc, #28]	; (80004c0 <parse_response_at_csq+0x2c>)
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f00e ff27 	bl	800f2f8 <strstr>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	0800fbb8 	.word	0x0800fbb8

080004c4 <parse_response_at_cereg>:

// Hàm phân tích phản hồi cho lệnh "AT+CEREG?"
bool parse_response_at_cereg(const char* response) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 fb57 	bl	8000b80 <uart_log>
    return strstr(response, "+CEREG: 0,1") != NULL; // Dòng dữ liệu chính
 80004d2:	4907      	ldr	r1, [pc, #28]	; (80004f0 <parse_response_at_cereg+0x2c>)
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f00e ff0f 	bl	800f2f8 <strstr>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	bf14      	ite	ne
 80004e0:	2301      	movne	r3, #1
 80004e2:	2300      	moveq	r3, #0
 80004e4:	b2db      	uxtb	r3, r3
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	0800fbc0 	.word	0x0800fbc0

080004f4 <parse_response_at_cops>:

// Hàm phân tích phản hồi cho lệnh "AT+COPS"
bool parse_response_at_cops(const char* response) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 fb3f 	bl	8000b80 <uart_log>
    return strstr(response, "+COPS=0") != NULL; // Dòng dữ liệu chính
 8000502:	4907      	ldr	r1, [pc, #28]	; (8000520 <parse_response_at_cops+0x2c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f00e fef7 	bl	800f2f8 <strstr>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	0800fbcc 	.word	0x0800fbcc

08000524 <parse_response_at_cgdcont>:

// Hàm phân tích phản hồi cho lệnh "AT+CGDCONT"
bool parse_response_at_cgdcont(const char* response) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fb27 	bl	8000b80 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <parse_response_at_cgdcont+0x2c>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f00e fedf 	bl	800f2f8 <strstr>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	0800fb88 	.word	0x0800fb88

08000554 <parse_response_at_cgauth>:

// Hàm phân tích phản hồi cho lệnh "AT+CGAUTH"
bool parse_response_at_cgauth(const char* response) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 fb0f 	bl	8000b80 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <parse_response_at_cgauth+0x2c>)
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f00e fec7 	bl	800f2f8 <strstr>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	0800fb88 	.word	0x0800fb88

08000584 <parse_response_at_cgact>:

// Hàm phân tích phản hồi cho lệnh "AT+CGACT"
bool parse_response_at_cgact(const char* response) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    uart_log(response);
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 faf7 	bl	8000b80 <uart_log>
    return strstr(response, "OK") != NULL; // Dòng xác nhận
 8000592:	4907      	ldr	r1, [pc, #28]	; (80005b0 <parse_response_at_cgact+0x2c>)
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f00e feaf 	bl	800f2f8 <strstr>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800fb88 	.word	0x0800fb88

080005b4 <parse_response_at_cgpaddr>:

// Hàm phân tích phản hồi cho lệnh "AT+CGPADDR"
bool parse_response_at_cgpaddr(const char* response) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 fadf 	bl	8000b80 <uart_log>
    return strstr(response, "+CGPADDR: 1,") != NULL; // Dòng dữ liệu chính
 80005c2:	4907      	ldr	r1, [pc, #28]	; (80005e0 <parse_response_at_cgpaddr+0x2c>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f00e fe97 	bl	800f2f8 <strstr>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800fbd4 	.word	0x0800fbd4

080005e4 <parse_response_atd99>:
    uart_log(response);
    return strstr(response, "CONNECT") != NULL; // Dòng dữ liệu chính
}

// Hàm phân tích phản hồi cho lệnh "ATD*99#"
bool parse_response_atd99(const char* response) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    uart_log(response);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fac7 	bl	8000b80 <uart_log>
    if (strstr(response, "CONNECT") != NULL) {
 80005f2:	4908      	ldr	r1, [pc, #32]	; (8000614 <parse_response_atd99+0x30>)
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f00e fe7f 	bl	800f2f8 <strstr>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <parse_response_atd99+0x24>
        // ppp_mode = true;
        //uart_disable_uart1_irq();
        restart_dma2_stream2(); // Khởi động lại DMA để nhận dữ liệu PPP
 8000600:	f000 fc46 	bl	8000e90 <restart_dma2_stream2>
        return true;
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <parse_response_atd99+0x26>
    }
    return false;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	0800fbe4 	.word	0x0800fbe4

08000618 <check_gsm_response_by_index>:


bool ppp_mode = false;

// Hàm kiểm tra phản hồi dựa trên chỉ số lệnh trong gsm_commands
bool check_gsm_response_by_index(int idx, const char* response) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0a      	cmp	r3, #10
 8000626:	d855      	bhi.n	80006d4 <check_gsm_response_by_index+0xbc>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <check_gsm_response_by_index+0x18>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	0800065d 	.word	0x0800065d
 8000634:	08000667 	.word	0x08000667
 8000638:	08000671 	.word	0x08000671
 800063c:	0800067b 	.word	0x0800067b
 8000640:	08000685 	.word	0x08000685
 8000644:	0800068f 	.word	0x0800068f
 8000648:	080006a3 	.word	0x080006a3
 800064c:	080006ad 	.word	0x080006ad
 8000650:	080006b7 	.word	0x080006b7
 8000654:	080006c1 	.word	0x080006c1
 8000658:	080006cb 	.word	0x080006cb
        case 0: // AT
            return parse_response_at(response);
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f7ff fed1 	bl	8000404 <parse_response_at>
 8000662:	4603      	mov	r3, r0
 8000664:	e037      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 8000666:	6838      	ldr	r0, [r7, #0]
 8000668:	f7ff fee4 	bl	8000434 <parse_response_ati>
 800066c:	4603      	mov	r3, r0
 800066e:	e032      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000670:	6838      	ldr	r0, [r7, #0]
 8000672:	f7ff fef7 	bl	8000464 <parse_response_at_cpin>
 8000676:	4603      	mov	r3, r0
 8000678:	e02d      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 800067a:	6838      	ldr	r0, [r7, #0]
 800067c:	f7ff ff0a 	bl	8000494 <parse_response_at_csq>
 8000680:	4603      	mov	r3, r0
 8000682:	e028      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff1d 	bl	80004c4 <parse_response_at_cereg>
 800068a:	4603      	mov	r3, r0
 800068c:	e023      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f7ff ff30 	bl	80004f4 <parse_response_at_cops>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf14      	ite	ne
 800069a:	2301      	movne	r3, #1
 800069c:	2300      	moveq	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	e019      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 80006a2:	6838      	ldr	r0, [r7, #0]
 80006a4:	f7ff ff3e 	bl	8000524 <parse_response_at_cgdcont>
 80006a8:	4603      	mov	r3, r0
 80006aa:	e014      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 80006ac:	6838      	ldr	r0, [r7, #0]
 80006ae:	f7ff ff51 	bl	8000554 <parse_response_at_cgauth>
 80006b2:	4603      	mov	r3, r0
 80006b4:	e00f      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 80006b6:	6838      	ldr	r0, [r7, #0]
 80006b8:	f7ff ff64 	bl	8000584 <parse_response_at_cgact>
 80006bc:	4603      	mov	r3, r0
 80006be:	e00a      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f7ff ff77 	bl	80005b4 <parse_response_at_cgpaddr>
 80006c6:	4603      	mov	r3, r0
 80006c8:	e005      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 80006ca:	6838      	ldr	r0, [r7, #0]
 80006cc:	f7ff ff8a 	bl	80005e4 <parse_response_atd99>
 80006d0:	4603      	mov	r3, r0
 80006d2:	e000      	b.n	80006d6 <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 80006d4:	2300      	movs	r3, #0
    }
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop

080006e0 <button_init>:
#include "button.h"

void button_init(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
    // Cấu hình input pull-up
    uint8_t pin = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 16; ++i) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	71bb      	strb	r3, [r7, #6]
 80006ee:	e008      	b.n	8000702 <button_init+0x22>
        if (BUTTON_PIN & (1U << i)) { pin = i; break; }
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <button_init+0x1c>
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e005      	b.n	8000708 <button_init+0x28>
    for (uint8_t i = 0; i < 16; ++i) {
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	3301      	adds	r3, #1
 8000700:	71bb      	strb	r3, [r7, #6]
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d9f3      	bls.n	80006f0 <button_init+0x10>
    }
    BUTTON_PORT->MODER &= ~(3U << (pin * 2));
 8000708:	4912      	ldr	r1, [pc, #72]	; (8000754 <button_init+0x74>)
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <button_init+0x74>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2003      	movs	r0, #3
 8000714:	fa00 f303 	lsl.w	r3, r0, r3
 8000718:	43db      	mvns	r3, r3
 800071a:	4013      	ands	r3, r2
 800071c:	600b      	str	r3, [r1, #0]
    BUTTON_PORT->PUPDR &= ~(3U << (pin * 2));
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <button_init+0x74>)
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <button_init+0x74>)
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	2003      	movs	r0, #3
 800072a:	fa00 f303 	lsl.w	r3, r0, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
    BUTTON_PORT->PUPDR |=  (1U << (pin * 2)); // Pull-up
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <button_init+0x74>)
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <button_init+0x74>)
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	2001      	movs	r0, #1
 8000740:	fa00 f303 	lsl.w	r3, r0, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	60cb      	str	r3, [r1, #12]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40020000 	.word	0x40020000

08000758 <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <hardware_init+0x54>)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <hardware_init+0x54>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f043 0303 	orr.w	r3, r3, #3
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <hardware_init+0x54>)
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <hardware_init+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <hardware_init+0x54>)
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <hardware_init+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; 
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <hardware_init+0x54>)
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <hardware_init+0x54>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078e:	6313      	str	r3, [r2, #48]	; 0x30


    timer2_init_1ms();
 8000790:	f000 f8e2 	bl	8000958 <timer2_init_1ms>
    uart_line_queue_init();
 8000794:	f000 fbac 	bl	8000ef0 <uart_line_queue_init>
    uart_init_all();
 8000798:	f000 f960 	bl	8000a5c <uart_init_all>
    led_init();
 800079c:	f000 f854 	bl	8000848 <led_init>
    button_init();
 80007a0:	f7ff ff9e 	bl	80006e0 <button_init>
    gsm_module_power_cycle();
 80007a4:	f000 f804 	bl	80007b0 <gsm_module_power_cycle>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800

080007b0 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
    // Cấu hình chân GSM_POWER_PIN là output push-pull
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007c0:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007cc:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007d8:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80007e4:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007f0:	60d3      	str	r3, [r2, #12]

    // Đưa chân xuống mức thấp (tắt nguồn)
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <gsm_module_power_cycle+0x90>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007fc:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	e002      	b.n	800080a <gsm_module_power_cycle+0x5a>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <gsm_module_power_cycle+0x94>)
 800080e:	4293      	cmp	r3, r2
 8000810:	ddf8      	ble.n	8000804 <gsm_module_power_cycle+0x54>

    // Bật lại nguồn
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN);
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <gsm_module_power_cycle+0x90>)
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <gsm_module_power_cycle+0x90>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081c:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000000; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	e002      	b.n	800082a <gsm_module_power_cycle+0x7a>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	4a05      	ldr	r2, [pc, #20]	; (8000844 <gsm_module_power_cycle+0x94>)
 800082e:	4293      	cmp	r3, r2
 8000830:	ddf8      	ble.n	8000824 <gsm_module_power_cycle+0x74>
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40020000 	.word	0x40020000
 8000844:	000f423f 	.word	0x000f423f

08000848 <led_init>:
#include "stm32f4xx.h"
#include "led.h"

void led_init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
    // Configure PB9 (LED 4G) as output
    GPIOB->MODER &= ~(3U << (9 * 2));
 800084c:	4a34      	ldr	r2, [pc, #208]	; (8000920 <led_init+0xd8>)
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <led_init+0xd8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000856:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (9 * 2));
 8000858:	4a31      	ldr	r2, [pc, #196]	; (8000920 <led_init+0xd8>)
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <led_init+0xd8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 9);
 8000864:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <led_init+0xd8>)
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <led_init+0xd8>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800086e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (9 * 2));
 8000870:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <led_init+0xd8>)
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <led_init+0xd8>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800087a:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (9 * 2));
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <led_init+0xd8>)
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <led_init+0xd8>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000886:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 9);
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <led_init+0xd8>)
 800088a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088e:	835a      	strh	r2, [r3, #26]

    // Configure PB4 (LED GREEN NETWORK) as output
    GPIOB->MODER &= ~(3U << (4 * 2));
 8000890:	4a23      	ldr	r2, [pc, #140]	; (8000920 <led_init+0xd8>)
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <led_init+0xd8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800089a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (4 * 2));
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <led_init+0xd8>)
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <led_init+0xd8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 4);
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <led_init+0xd8>)
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <led_init+0xd8>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f023 0310 	bic.w	r3, r3, #16
 80008b2:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (4 * 2));
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <led_init+0xd8>)
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <led_init+0xd8>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008be:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (4 * 2));
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <led_init+0xd8>)
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <led_init+0xd8>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ca:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 4);
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <led_init+0xd8>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	835a      	strh	r2, [r3, #26]

    // Configure PB5 (LED BLUE STATEMACHINE) as output
    GPIOB->MODER &= ~(3U << (5 * 2));
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <led_init+0xd8>)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <led_init+0xd8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008dc:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (5 * 2));
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <led_init+0xd8>)
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <led_init+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e8:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1U << 5);
 80008ea:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <led_init+0xd8>)
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <led_init+0xd8>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f023 0320 	bic.w	r3, r3, #32
 80008f4:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3U << (5 * 2));
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <led_init+0xd8>)
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <led_init+0xd8>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000900:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3U << (5 * 2));
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <led_init+0xd8>)
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <led_init+0xd8>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800090c:	60d3      	str	r3, [r2, #12]
    GPIOB->BSRRH = (1U << 5);
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <led_init+0xd8>)
 8000910:	2220      	movs	r2, #32
 8000912:	835a      	strh	r2, [r3, #26]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40020400 	.word	0x40020400

08000924 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800092e:	4909      	ldr	r1, [pc, #36]	; (8000954 <NVIC_EnableIRQ+0x30>)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	f002 021f 	and.w	r2, r2, #31
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 800095c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000960:	220f      	movs	r2, #15
 8000962:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 800096e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000972:	2201      	movs	r2, #1
 8000974:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097e:	899b      	ldrh	r3, [r3, #12]
 8000980:	b29b      	uxth	r3, r3
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 800099e:	201c      	movs	r0, #28
 80009a0:	f7ff ffc0 	bl	8000924 <NVIC_EnableIRQ>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 80009ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b0:	8a1b      	ldrh	r3, [r3, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00e      	beq.n	80009da <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c4:	8a1b      	ldrh	r3, [r3, #16]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <TIM2_IRQHandler+0x3c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <TIM2_IRQHandler+0x3c>)
 80009d8:	6013      	str	r3, [r2, #0]
    }
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	2000009c 	.word	0x2000009c

080009e8 <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
    return timer2_tick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <timer2_get_tick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000009c 	.word	0x2000009c

08000a00 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000a08:	f7ff ffee 	bl	80009e8 <timer2_get_tick>
 8000a0c:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffea 	bl	80009e8 <timer2_get_tick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d3f7      	bcc.n	8000a10 <delay_ms+0x10>
    }
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NVIC_EnableIRQ>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000a32:	4909      	ldr	r1, [pc, #36]	; (8000a58 <NVIC_EnableIRQ+0x30>)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	f002 021f 	and.w	r2, r2, #31
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a60:	4a3f      	ldr	r2, [pc, #252]	; (8000b60 <uart_init_all+0x104>)
 8000a62:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <uart_init_all+0x104>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000a6c:	4a3c      	ldr	r2, [pc, #240]	; (8000b60 <uart_init_all+0x104>)
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <uart_init_all+0x104>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000a78:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <uart_init_all+0x108>)
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <uart_init_all+0x108>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000a82:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000a84:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <uart_init_all+0x108>)
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <uart_init_all+0x108>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000a8e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000a90:	4a34      	ldr	r2, [pc, #208]	; (8000b64 <uart_init_all+0x108>)
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <uart_init_all+0x108>)
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a9a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <uart_init_all+0x108>)
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <uart_init_all+0x108>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000aa6:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <uart_init_all+0x10c>)
 8000aaa:	228a      	movs	r2, #138	; 0x8a
 8000aac:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <uart_init_all+0x10c>)
 8000ab0:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ab4:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000ab6:	4a2a      	ldr	r2, [pc, #168]	; (8000b60 <uart_init_all+0x104>)
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <uart_init_all+0x104>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <uart_init_all+0x108>)
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <uart_init_all+0x108>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000acc:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <uart_init_all+0x108>)
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <uart_init_all+0x108>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000ad8:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <uart_init_all+0x108>)
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <uart_init_all+0x108>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ae4:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <uart_init_all+0x108>)
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <uart_init_all+0x108>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000af0:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <uart_init_all+0x110>)
 8000af4:	228a      	movs	r2, #138	; 0x8a
 8000af6:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <uart_init_all+0x110>)
 8000afa:	f242 020c 	movw	r2, #8204	; 0x200c
 8000afe:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <uart_init_all+0x10c>)
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <uart_init_all+0x10c>)
 8000b04:	8a9b      	ldrh	r3, [r3, #20]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <uart_init_all+0x114>)
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <uart_init_all+0x114>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000b1c:	bf00      	nop
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <uart_init_all+0x114>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f9      	bne.n	8000b1e <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <uart_init_all+0x114>)
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <uart_init_all+0x118>)
 8000b2e:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <uart_init_all+0x114>)
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <uart_init_all+0x11c>)
 8000b34:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <uart_init_all+0x114>)
 8000b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3c:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <uart_init_all+0x114>)
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <uart_init_all+0x120>)
 8000b42:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <uart_init_all+0x114>)
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <uart_init_all+0x114>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b50:	203a      	movs	r0, #58	; 0x3a
 8000b52:	f7ff ff69 	bl	8000a28 <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000b56:	f000 f989 	bl	8000e6c <uart_enable_uart1_idle_irq>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40026440 	.word	0x40026440
 8000b74:	40011004 	.word	0x40011004
 8000b78:	200005c4 	.word	0x200005c4
 8000b7c:	08000500 	.word	0x08000500

08000b80 <uart_log>:

void uart_log(const char* msg)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000b8c:	e00e      	b.n	8000bac <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000b8e:	bf00      	nop
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <uart_log+0x6c>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f8      	beq.n	8000b90 <uart_log+0x10>
        USART2->DR = *p++;
 8000b9e:	4913      	ldr	r1, [pc, #76]	; (8000bec <uart_log+0x6c>)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60fa      	str	r2, [r7, #12]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1ec      	bne.n	8000b8e <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000bb4:	bf00      	nop
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <uart_log+0x6c>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f8      	beq.n	8000bb6 <uart_log+0x36>
    USART2->DR = '\r';
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <uart_log+0x6c>)
 8000bc6:	220d      	movs	r2, #13
 8000bc8:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000bca:	bf00      	nop
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <uart_log+0x6c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f8      	beq.n	8000bcc <uart_log+0x4c>
    USART2->DR = '\n';
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <uart_log+0x6c>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	809a      	strh	r2, [r3, #4]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40004400 	.word	0x40004400

08000bf0 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e011      	b.n	8000c24 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8000c00:	bf00      	nop
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <uart1_send_raw+0x58>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f8      	beq.n	8000c02 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8000c10:	490d      	ldr	r1, [pc, #52]	; (8000c48 <uart1_send_raw+0x58>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3e9      	bcc.n	8000c00 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8000c2c:	bf00      	nop
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <uart1_send_raw+0x58>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f8      	beq.n	8000c2e <uart1_send_raw+0x3e>
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40011000 	.word	0x40011000

08000c4c <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e033      	b.n	8000cc4 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2b7e      	cmp	r3, #126	; 0x7e
 8000c62:	d829      	bhi.n	8000cb8 <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	b291      	uxth	r1, r2
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c6e:	8011      	strh	r1, [r2, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000c7c:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d005      	beq.n	8000c96 <gsm_hw_layer_uart_fill_rx+0x4a>
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b0d      	cmp	r3, #13
 8000c94:	d113      	bne.n	8000cbe <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d908      	bls.n	8000cb0 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <gsm_hw_layer_uart_fill_rx+0x8c>)
 8000cac:	f000 f936 	bl	8000f1c <uart_line_queue_push>
                }
                line_idx = 0;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
 8000cb6:	e002      	b.n	8000cbe <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0; // quá dài, reset dòng
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <gsm_hw_layer_uart_fill_rx+0x88>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3c7      	bcc.n	8000c5c <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000a6 	.word	0x200000a6
 8000cd8:	200000a8 	.word	0x200000a8

08000cdc <uart1_poll>:

void uart1_poll(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
    if (!rx_line_ready)
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <uart1_poll+0x104>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f083 0301 	eor.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d171      	bne.n	8000dd6 <uart1_poll+0xfa>
        return;

    rx_line_ready = false;
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <uart1_poll+0x104>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]

    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <uart1_poll+0x108>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d00:	607b      	str	r3, [r7, #4]

    if (pos != m_old_uart1_dma_rx_pos) {
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <uart1_poll+0x10c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d065      	beq.n	8000dd8 <uart1_poll+0xfc>
        if (ppp_mode && ppp != NULL) {
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <uart1_poll+0x110>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d02e      	beq.n	8000d72 <uart1_poll+0x96>
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <uart1_poll+0x114>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d02a      	beq.n	8000d72 <uart1_poll+0x96>
            if (pos > m_old_uart1_dma_rx_pos) {
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <uart1_poll+0x10c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d90d      	bls.n	8000d42 <uart1_poll+0x66>
                pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <uart1_poll+0x114>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <uart1_poll+0x10c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a31      	ldr	r2, [pc, #196]	; (8000df4 <uart1_poll+0x118>)
 8000d30:	1899      	adds	r1, r3, r2
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <uart1_poll+0x10c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f00c ffce 	bl	800dcdc <pppos_input>
            if (pos > m_old_uart1_dma_rx_pos) {
 8000d40:	e03c      	b.n	8000dbc <uart1_poll+0xe0>
            } else {
                pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <uart1_poll+0x114>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <uart1_poll+0x10c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <uart1_poll+0x118>)
 8000d4c:	1899      	adds	r1, r3, r2
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <uart1_poll+0x10c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000d56:	461a      	mov	r2, r3
 8000d58:	f00c ffc0 	bl	800dcdc <pppos_input>
                if (pos > 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d02c      	beq.n	8000dbc <uart1_poll+0xe0>
                    pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <uart1_poll+0x114>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4922      	ldr	r1, [pc, #136]	; (8000df4 <uart1_poll+0x118>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00c ffb6 	bl	800dcdc <pppos_input>
            if (pos > m_old_uart1_dma_rx_pos) {
 8000d70:	e024      	b.n	8000dbc <uart1_poll+0xe0>
            }
        } else {
            if (pos > m_old_uart1_dma_rx_pos) {
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <uart1_poll+0x10c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d90b      	bls.n	8000d94 <uart1_poll+0xb8>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <uart1_poll+0x10c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <uart1_poll+0x118>)
 8000d82:	1898      	adds	r0, r3, r2
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <uart1_poll+0x10c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <gsm_hw_layer_uart_fill_rx>
 8000d92:	e014      	b.n	8000dbe <uart1_poll+0xe2>
            } else {
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <uart1_poll+0x10c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <uart1_poll+0x118>)
 8000d9a:	441a      	add	r2, r3
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <uart1_poll+0x10c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f7ff ff50 	bl	8000c4c <gsm_hw_layer_uart_fill_rx>
                if (pos > 0)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <uart1_poll+0xe2>
                    gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	480f      	ldr	r0, [pc, #60]	; (8000df4 <uart1_poll+0x118>)
 8000db6:	f7ff ff49 	bl	8000c4c <gsm_hw_layer_uart_fill_rx>
 8000dba:	e000      	b.n	8000dbe <uart1_poll+0xe2>
            if (pos > m_old_uart1_dma_rx_pos) {
 8000dbc:	bf00      	nop
            }
        }

        m_old_uart1_dma_rx_pos = pos;
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <uart1_poll+0x10c>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]
        if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <uart1_poll+0x10c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dcc:	d104      	bne.n	8000dd8 <uart1_poll+0xfc>
            m_old_uart1_dma_rx_pos = 0;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <uart1_poll+0x10c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e000      	b.n	8000dd8 <uart1_poll+0xfc>
        return;
 8000dd6:	bf00      	nop
    }
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000a4 	.word	0x200000a4
 8000de4:	40026440 	.word	0x40026440
 8000de8:	200000a0 	.word	0x200000a0
 8000dec:	20000098 	.word	0x20000098
 8000df0:	20000530 	.word	0x20000530
 8000df4:	200005c4 	.word	0x200005c4

08000df8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <DMA2_Stream2_IRQHandler+0x2c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <DMA2_Stream2_IRQHandler+0x2c>)
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <DMA2_Stream2_IRQHandler+0x2c>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e12:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <DMA2_Stream2_IRQHandler+0x30>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
    }
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40026400 	.word	0x40026400
 8000e28:	200000a4 	.word	0x200000a4

08000e2c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <USART1_IRQHandler+0x38>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <USART1_IRQHandler+0x38>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <USART1_IRQHandler+0x38>)
 8000e4a:	889b      	ldrh	r3, [r3, #4]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8000e50:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <USART1_IRQHandler+0x3c>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
    }
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40011000 	.word	0x40011000
 8000e68:	200000a4 	.word	0x200000a4

08000e6c <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <uart_enable_uart1_idle_irq+0x20>)
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <uart_enable_uart1_idle_irq+0x20>)
 8000e74:	899b      	ldrh	r3, [r3, #12]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000e80:	2025      	movs	r0, #37	; 0x25
 8000e82:	f7ff fdd1 	bl	8000a28 <NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40011000 	.word	0x40011000

08000e90 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000ea0:	bf00      	nop
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <restart_dma2_stream2+0x54>)
 8000eb2:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <restart_dma2_stream2+0x58>)
 8000eb8:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec0:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000ec4:	4a09      	ldr	r2, [pc, #36]	; (8000eec <restart_dma2_stream2+0x5c>)
 8000ec6:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <restart_dma2_stream2+0x50>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40026440 	.word	0x40026440
 8000ee4:	40011004 	.word	0x40011004
 8000ee8:	200005c4 	.word	0x200005c4
 8000eec:	08000500 	.word	0x08000500

08000ef0 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <uart_line_queue_init+0x20>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <uart_line_queue_init+0x24>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <uart_line_queue_init+0x28>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000528 	.word	0x20000528
 8000f14:	20000529 	.word	0x20000529
 8000f18:	2000052a 	.word	0x2000052a

08000f1c <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <uart_line_queue_push+0x74>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	d901      	bls.n	8000f32 <uart_line_queue_push+0x16>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e029      	b.n	8000f86 <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <uart_line_queue_push+0x78>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	01db      	lsls	r3, r3, #7
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <uart_line_queue_push+0x7c>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	227f      	movs	r2, #127	; 0x7f
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00e f9c3 	bl	800f2ce <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <uart_line_queue_push+0x78>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <uart_line_queue_push+0x7c>)
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4413      	add	r3, r2
 8000f54:	337f      	adds	r3, #127	; 0x7f
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <uart_line_queue_push+0x78>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	425a      	negs	r2, r3
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	f002 0207 	and.w	r2, r2, #7
 8000f6c:	bf58      	it	pl
 8000f6e:	4253      	negpl	r3, r2
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <uart_line_queue_push+0x78>)
 8000f74:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <uart_line_queue_push+0x74>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <uart_line_queue_push+0x74>)
 8000f82:	701a      	strb	r2, [r3, #0]
    return true;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000052a 	.word	0x2000052a
 8000f94:	20000528 	.word	0x20000528
 8000f98:	20000128 	.word	0x20000128

08000f9c <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <uart_line_queue_pop+0x60>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <uart_line_queue_pop+0x16>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e020      	b.n	8000ff4 <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <uart_line_queue_pop+0x64>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <uart_line_queue_pop+0x68>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f00e f983 	bl	800f2ce <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <uart_line_queue_pop+0x64>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	425a      	negs	r2, r3
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	f002 0207 	and.w	r2, r2, #7
 8000fda:	bf58      	it	pl
 8000fdc:	4253      	negpl	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <uart_line_queue_pop+0x64>)
 8000fe2:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <uart_line_queue_pop+0x60>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <uart_line_queue_pop+0x60>)
 8000ff0:	701a      	strb	r2, [r3, #0]
    return true;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000052a 	.word	0x2000052a
 8001000:	20000529 	.word	0x20000529
 8001004:	20000128 	.word	0x20000128

08001008 <main>:
#include "ppp_net/ppp_net.h"
#include "lwip/tcpip.h"
#include <stdio.h>

int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    hardware_init();
 800100c:	f7ff fba4 	bl	8000758 <hardware_init>
    uart_log("UART2 log test");
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <main+0x20>)
 8001012:	f7ff fdb5 	bl	8000b80 <uart_log>
    delay_ms(15000);
 8001016:	f643 2098 	movw	r0, #15000	; 0x3a98
 800101a:	f7ff fcf1 	bl	8000a00 <delay_ms>
    // tcpip_init(NULL, NULL);
    // ppp_net_init();
    while (1) {
        uart1_poll();
 800101e:	f7ff fe5d 	bl	8000cdc <uart1_poll>
        send_all_gsm_commands_with_check();
 8001022:	f7ff f95d 	bl	80002e0 <send_all_gsm_commands_with_check>
        uart1_poll();
 8001026:	e7fa      	b.n	800101e <main+0x16>
 8001028:	0800fbec 	.word	0x0800fbec

0800102c <sys_mutex_lock>:
#include "arch/sys_arch.h"

void sys_init(void) {}

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <sys_mbox_trypost>:
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <sys_now+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	4903      	ldr	r1, [pc, #12]	; (8001098 <sys_now+0x18>)
 800108c:	600a      	str	r2, [r1, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	2000052c 	.word	0x2000052c

0800109c <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    return sys_now();
 80010a0:	f7ff ffee 	bl	8001080 <sys_now>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <lwip_port_rand+0x28>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <lwip_port_rand+0x2c>)
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80010be:	3339      	adds	r3, #57	; 0x39
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <lwip_port_rand+0x28>)
 80010c2:	6013      	str	r3, [r2, #0]
    return seed;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <lwip_port_rand+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	41c64e6d 	.word	0x41c64e6d

080010dc <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800110a:	2005      	movs	r0, #5
 800110c:	f001 fa78 	bl	8002600 <memp_malloc>
 8001110:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	e017      	b.n	800114e <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8001130:	68f9      	ldr	r1, [r7, #12]
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <tcpip_try_callback+0x58>)
 8001134:	f7ff ff8e 	bl	8001054 <sys_mbox_trypost>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	2005      	movs	r0, #5
 8001142:	f001 fa9d 	bl	8002680 <memp_free>
    return ERR_MEM;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e000      	b.n	800114e <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000534 	.word	0x20000534

0800115c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	061a      	lsls	r2, r3, #24
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0e1b      	lsrs	r3, r3, #24
 80011aa:	4313      	orrs	r3, r2
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00d      	beq.n	80011f8 <lwip_standard_chksum+0x40>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dd0a      	ble.n	80011f8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80011e2:	f107 030e 	add.w	r3, r7, #14
 80011e6:	3301      	adds	r3, #1
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	1c51      	adds	r1, r2, #1
 80011ec:	61f9      	str	r1, [r7, #28]
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]
    len--;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80011fc:	e00a      	b.n	8001214 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1c9a      	adds	r2, r3, #2
 8001202:	61ba      	str	r2, [r7, #24]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3b02      	subs	r3, #2
 8001212:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	dcf1      	bgt.n	80011fe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	dd04      	ble.n	800122a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8001220:	f107 030e 	add.w	r3, r7, #14
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	461a      	mov	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	0c1a      	lsrs	r2, r3, #16
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	0c1a      	lsrs	r2, r3, #16
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	b29b      	uxth	r3, r3
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	72fb      	strb	r3, [r7, #11]
 8001280:	4613      	mov	r3, r2
 8001282:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e02b      	b.n	80012e6 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	895b      	ldrh	r3, [r3, #10]
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7ff ff8d 	bl	80011b8 <lwip_standard_chksum>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0c1a      	lsrs	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00e      	beq.n	80012e0 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1d0      	bne.n	800128e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff28 	bl	800115c <lwip_htons>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8001316:	893b      	ldrh	r3, [r7, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff1f 	bl	800115c <lwip_htons>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0c1a      	lsrs	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	0c1a      	lsrs	r2, r3, #16
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	b29b      	uxth	r3, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	b29b      	uxth	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	72fb      	strb	r3, [r7, #11]
 800135e:	4613      	mov	r3, r2
 8001360:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	b29b      	uxth	r3, r3
 800136c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	0c1b      	lsrs	r3, r3, #16
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	b29b      	uxth	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4413      	add	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	0c1a      	lsrs	r2, r3, #16
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	0c1a      	lsrs	r2, r3, #16
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80013aa:	893a      	ldrh	r2, [r7, #8]
 80013ac:	7af9      	ldrb	r1, [r7, #11]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff5e 	bl	8001272 <inet_cksum_pseudo_base>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	72fb      	strb	r3, [r7, #11]
 80013ce:	4613      	mov	r3, r2
 80013d0:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80013d2:	893a      	ldrh	r2, [r7, #8]
 80013d4:	7af9      	ldrb	r1, [r7, #11]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff ffb7 	bl	8001350 <inet_chksum_pseudo>
 80013e2:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fedb 	bl	80011b8 <lwip_standard_chksum>
 8001402:	4603      	mov	r3, r0
 8001404:	43db      	mvns	r3, r3
 8001406:	b29b      	uxth	r3, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	e02b      	b.n	800147e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	895b      	ldrh	r3, [r3, #10]
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7ff fec1 	bl	80011b8 <lwip_standard_chksum>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	0c1a      	lsrs	r2, r3, #16
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	895b      	ldrh	r3, [r3, #10]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00e      	beq.n	8001478 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf0c      	ite	eq
 8001460:	2301      	moveq	r3, #1
 8001462:	2300      	movne	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b29a      	uxth	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1d0      	bne.n	8001426 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29a      	uxth	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	b29b      	uxth	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b29b      	uxth	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <icmp_input+0x254>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80014cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014ce:	2b13      	cmp	r3, #19
 80014d0:	f240 80fe 	bls.w	80016d0 <icmp_input+0x224>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	895b      	ldrh	r3, [r3, #10]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	f240 80fb 	bls.w	80016d4 <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80014f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80e3 	beq.w	80016c2 <icmp_input+0x216>
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	f040 80e3 	bne.w	80016c8 <icmp_input+0x21c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8001502:	4b80      	ldr	r3, [pc, #512]	; (8001704 <icmp_input+0x258>)
 8001504:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001506:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <icmp_input+0x254>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800150e:	2be0      	cmp	r3, #224	; 0xe0
 8001510:	f000 80e7 	beq.w	80016e2 <icmp_input+0x236>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8001514:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <icmp_input+0x254>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	4b79      	ldr	r3, [pc, #484]	; (8001700 <icmp_input+0x254>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f000 fc7a 	bl	8001e18 <ip4_addr_isbroadcast_u32>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80dd 	bne.w	80016e6 <icmp_input+0x23a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	891b      	ldrh	r3, [r3, #8]
 8001530:	2b07      	cmp	r3, #7
 8001532:	f240 80d1 	bls.w	80016d8 <icmp_input+0x22c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff6a 	bl	8001410 <inet_chksum_pbuf>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f001 fd7e 	bl	8003044 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8001548:	e0d6      	b.n	80016f8 <icmp_input+0x24c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800154a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800154c:	330e      	adds	r3, #14
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 fcdd 	bl	8002f10 <pbuf_add_header>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d04c      	beq.n	80015f6 <icmp_input+0x14a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	891a      	ldrh	r2, [r3, #8]
 8001560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001562:	4413      	add	r3, r2
 8001564:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	891b      	ldrh	r3, [r3, #8]
 800156a:	8b7a      	ldrh	r2, [r7, #26]
 800156c:	429a      	cmp	r2, r3
 800156e:	f0c0 80bc 	bcc.w	80016ea <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8001572:	8b7b      	ldrh	r3, [r7, #26]
 8001574:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001578:	4619      	mov	r1, r3
 800157a:	200e      	movs	r0, #14
 800157c:	f001 fac4 	bl	8002b08 <pbuf_alloc>
 8001580:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80b2 	beq.w	80016ee <icmp_input+0x242>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	895b      	ldrh	r3, [r3, #10]
 800158e:	461a      	mov	r2, r3
 8001590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001592:	3308      	adds	r3, #8
 8001594:	429a      	cmp	r2, r3
 8001596:	d203      	bcs.n	80015a0 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f001 fd53 	bl	8003044 <pbuf_free>
          goto icmperr;
 800159e:	e0a7      	b.n	80016f0 <icmp_input+0x244>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00d fceb 	bl	800ef84 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80015ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015b0:	4619      	mov	r1, r3
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f001 fcbc 	bl	8002f30 <pbuf_remove_header>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <icmp_input+0x128>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 80015be:	4b52      	ldr	r3, [pc, #328]	; (8001708 <icmp_input+0x25c>)
 80015c0:	22b6      	movs	r2, #182	; 0xb6
 80015c2:	4952      	ldr	r1, [pc, #328]	; (800170c <icmp_input+0x260>)
 80015c4:	4852      	ldr	r0, [pc, #328]	; (8001710 <icmp_input+0x264>)
 80015c6:	f00d fadb 	bl	800eb80 <iprintf>
 80015ca:	2000      	movs	r0, #0
 80015cc:	f00d fbda 	bl	800ed84 <fflush>
 80015d0:	f00d fb1f 	bl	800ec12 <abort>
          pbuf_free(r);
          goto icmperr;
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f001 fe6e 	bl	80032b8 <pbuf_copy>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f001 fd2e 	bl	8003044 <pbuf_free>
          goto icmperr;
 80015e8:	e082      	b.n	80016f0 <icmp_input+0x244>
        }
        /* free the original p */
        pbuf_free(p);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 fd2a 	bl	8003044 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	e013      	b.n	800161e <icmp_input+0x172>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80015f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015f8:	330e      	adds	r3, #14
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 fc97 	bl	8002f30 <pbuf_remove_header>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00a      	beq.n	800161e <icmp_input+0x172>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <icmp_input+0x25c>)
 800160a:	22c7      	movs	r2, #199	; 0xc7
 800160c:	4941      	ldr	r1, [pc, #260]	; (8001714 <icmp_input+0x268>)
 800160e:	4840      	ldr	r0, [pc, #256]	; (8001710 <icmp_input+0x264>)
 8001610:	f00d fab6 	bl	800eb80 <iprintf>
 8001614:	2000      	movs	r0, #0
 8001616:	f00d fbb5 	bl	800ed84 <fflush>
 800161a:	f00d fafa 	bl	800ec12 <abort>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8001624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f001 fc71 	bl	8002f10 <pbuf_add_header>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d148      	bne.n	80016c6 <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <icmp_input+0x254>)
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
        p->if_idx = NETIF_NO_INDEX; /* we're reusing this pbuf, so reset its if_idx */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	73da      	strb	r2, [r3, #15]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	885b      	ldrh	r3, [r3, #2]
 800165a:	b29b      	uxth	r3, r3
 800165c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8001660:	4293      	cmp	r3, r2
 8001662:	d907      	bls.n	8001674 <icmp_input+0x1c8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	885b      	ldrh	r3, [r3, #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	3309      	adds	r3, #9
 800166c:	b29a      	uxth	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	805a      	strh	r2, [r3, #2]
 8001672:	e006      	b.n	8001682 <icmp_input+0x1d6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	b29b      	uxth	r3, r3
 800167a:	3308      	adds	r3, #8
 800167c:	b29a      	uxth	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	729a      	strb	r2, [r3, #10]
 800168e:	2200      	movs	r2, #0
 8001690:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8001692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fea8 	bl	80013ec <inet_chksum>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	2301      	movs	r3, #1
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	23ff      	movs	r3, #255	; 0xff
 80016b2:	2200      	movs	r2, #0
 80016b4:	69f9      	ldr	r1, [r7, #28]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa76 	bl	8001ba8 <ip4_output_if>
 80016bc:	4603      	mov	r3, r0
 80016be:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80016c0:	e001      	b.n	80016c6 <icmp_input+0x21a>
      break;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <icmp_input+0x21c>
      break;
 80016c6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fcbb 	bl	8003044 <pbuf_free>
  return;
 80016ce:	e013      	b.n	80016f8 <icmp_input+0x24c>
    goto lenerr;
 80016d0:	bf00      	nop
 80016d2:	e002      	b.n	80016da <icmp_input+0x22e>
    goto lenerr;
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <icmp_input+0x22e>
        goto lenerr;
 80016d8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 fcb2 	bl	8003044 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80016e0:	e00a      	b.n	80016f8 <icmp_input+0x24c>
        goto icmperr;
 80016e2:	bf00      	nop
 80016e4:	e004      	b.n	80016f0 <icmp_input+0x244>
        goto icmperr;
 80016e6:	bf00      	nop
 80016e8:	e002      	b.n	80016f0 <icmp_input+0x244>
          goto icmperr;
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <icmp_input+0x244>
          goto icmperr;
 80016ee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f001 fca7 	bl	8003044 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80016f6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200006c4 	.word	0x200006c4
 8001704:	200006d8 	.word	0x200006d8
 8001708:	0800fbfc 	.word	0x0800fbfc
 800170c:	0800fc20 	.word	0x0800fc20
 8001710:	0800fc54 	.word	0x0800fc54
 8001714:	0800fc7c 	.word	0x0800fc7c

08001718 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	461a      	mov	r2, r3
 8001728:	2103      	movs	r1, #3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f804 	bl	8001738 <icmp_send_response>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af04      	add	r7, sp, #16
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
 8001744:	4613      	mov	r3, r2
 8001746:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8001748:	231c      	movs	r3, #28
 800174a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	891b      	ldrh	r3, [r3, #8]
 8001750:	8bfa      	ldrh	r2, [r7, #30]
 8001752:	429a      	cmp	r2, r3
 8001754:	d902      	bls.n	800175c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	891b      	ldrh	r3, [r3, #8]
 800175a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 800175c:	8bfb      	ldrh	r3, [r7, #30]
 800175e:	3308      	adds	r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001766:	4619      	mov	r1, r3
 8001768:	2022      	movs	r0, #34	; 0x22
 800176a:	f001 f9cd 	bl	8002b08 <pbuf_alloc>
 800176e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d059      	beq.n	800182a <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	895b      	ldrh	r3, [r3, #10]
 800177a:	461a      	mov	r2, r3
 800177c:	8bfb      	ldrh	r3, [r7, #30]
 800177e:	3308      	adds	r3, #8
 8001780:	429a      	cmp	r2, r3
 8001782:	d20b      	bcs.n	800179c <icmp_send_response+0x64>
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <icmp_send_response+0xfc>)
 8001786:	f240 126f 	movw	r2, #367	; 0x16f
 800178a:	492b      	ldr	r1, [pc, #172]	; (8001838 <icmp_send_response+0x100>)
 800178c:	482b      	ldr	r0, [pc, #172]	; (800183c <icmp_send_response+0x104>)
 800178e:	f00d f9f7 	bl	800eb80 <iprintf>
 8001792:	2000      	movs	r0, #0
 8001794:	f00d faf6 	bl	800ed84 <fflush>
 8001798:	f00d fa3b 	bl	800ec12 <abort>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	78ba      	ldrb	r2, [r7, #2]
 80017b2:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2200      	movs	r2, #0
 80017b8:	711a      	strb	r2, [r3, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	715a      	strb	r2, [r3, #5]
 80017be:	2200      	movs	r2, #0
 80017c0:	719a      	strb	r2, [r3, #6]
 80017c2:	2200      	movs	r2, #0
 80017c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 80017c6:	8bfa      	ldrh	r2, [r7, #30]
 80017c8:	2308      	movs	r3, #8
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	69b8      	ldr	r0, [r7, #24]
 80017ce:	f001 fd97 	bl	8003300 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f82f 	bl	8001840 <ip4_route>
 80017e2:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01b      	beq.n	8001822 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2200      	movs	r2, #0
 80017ee:	709a      	strb	r2, [r3, #2]
 80017f0:	2200      	movs	r2, #0
 80017f2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	895b      	ldrh	r3, [r3, #10]
 80017f8:	4619      	mov	r1, r3
 80017fa:	6938      	ldr	r0, [r7, #16]
 80017fc:	f7ff fdf6 	bl	80013ec <inet_chksum>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8001808:	f107 0208 	add.w	r2, r7, #8
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2300      	movs	r3, #0
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	2100      	movs	r1, #0
 800181c:	69b8      	ldr	r0, [r7, #24]
 800181e:	f000 f9c3 	bl	8001ba8 <ip4_output_if>
  }
  pbuf_free(q);
 8001822:	69b8      	ldr	r0, [r7, #24]
 8001824:	f001 fc0e 	bl	8003044 <pbuf_free>
 8001828:	e000      	b.n	800182c <icmp_send_response+0xf4>
    return;
 800182a:	bf00      	nop
}
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	0800fbfc 	.word	0x0800fbfc
 8001838:	0800fcb0 	.word	0x0800fcb0
 800183c:	0800fc54 	.word	0x0800fc54

08001840 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8001848:	4b31      	ldr	r3, [pc, #196]	; (8001910 <ip4_route+0xd0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e033      	b.n	80018b8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d029      	beq.n	80018b2 <ip4_route+0x72>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <ip4_route+0x72>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01d      	beq.n	80018b2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3304      	adds	r3, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	405a      	eors	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3308      	adds	r3, #8
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	e038      	b.n	8001904 <ip4_route+0xc4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <ip4_route+0x72>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	330c      	adds	r3, #12
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d101      	bne.n	80018b2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	e028      	b.n	8001904 <ip4_route+0xc4>
  NETIF_FOREACH(netif) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1c8      	bne.n	8001850 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <ip4_route+0xd4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01a      	beq.n	80018fc <ip4_route+0xbc>
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <ip4_route+0xd4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <ip4_route+0xbc>
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <ip4_route+0xd4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <ip4_route+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b7f      	cmp	r3, #127	; 0x7f
 80018fa:	d101      	bne.n	8001900 <ip4_route+0xc0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e001      	b.n	8001904 <ip4_route+0xc4>
  }

  return netif_default;
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <ip4_route+0xd4>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	200010a4 	.word	0x200010a4
 8001914:	200010a8 	.word	0x200010a8

08001918 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <ip4_input_accept+0x44>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d011      	beq.n	800195c <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <ip4_input_accept+0x50>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d008      	beq.n	8001958 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <ip4_input_accept+0x50>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fa63 	bl	8001e18 <ip4_addr_isbroadcast_u32>
 8001952:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200006c4 	.word	0x200006c4

0800196c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b04      	cmp	r3, #4
 8001986:	d004      	beq.n	8001992 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f001 fb5b 	bl	8003044 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e102      	b.n	8001b98 <ip4_input+0x22c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	b2db      	uxtb	r3, r3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	885b      	ldrh	r3, [r3, #2]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fbd7 	bl	800115c <lwip_htons>
 80019ae:	4603      	mov	r3, r0
 80019b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	891b      	ldrh	r3, [r3, #8]
 80019b6:	89ba      	ldrh	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d204      	bcs.n	80019c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80019bc:	89bb      	ldrh	r3, [r7, #12]
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f001 f993 	bl	8002cec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	895b      	ldrh	r3, [r3, #10]
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d807      	bhi.n	80019e0 <ip4_input+0x74>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	891b      	ldrh	r3, [r3, #8]
 80019d4:	89ba      	ldrh	r2, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d802      	bhi.n	80019e0 <ip4_input+0x74>
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	2b13      	cmp	r3, #19
 80019de:	d804      	bhi.n	80019ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f001 fb2f 	bl	8003044 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e0d6      	b.n	8001b98 <ip4_input+0x22c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	4619      	mov	r1, r3
 80019ee:	6938      	ldr	r0, [r7, #16]
 80019f0:	f7ff fcfc 	bl	80013ec <inet_chksum>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <ip4_input+0x98>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f001 fb22 	bl	8003044 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e0c9      	b.n	8001b98 <ip4_input+0x22c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <ip4_input+0x234>)
 8001a0a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a63      	ldr	r2, [pc, #396]	; (8001ba0 <ip4_input+0x234>)
 8001a12:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001a14:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <ip4_input+0x234>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1c:	2be0      	cmp	r3, #224	; 0xe0
 8001a1e:	d111      	bne.n	8001a44 <ip4_input+0xd8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <ip4_input+0xd2>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3304      	adds	r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <ip4_input+0xd2>
      netif = inp;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e02a      	b.n	8001a94 <ip4_input+0x128>
    } else {
      netif = NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e027      	b.n	8001a94 <ip4_input+0x128>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f7ff ff67 	bl	8001918 <ip4_input_accept>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <ip4_input+0xea>
      netif = inp;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e01e      	b.n	8001a94 <ip4_input+0x128>
    } else {
      netif = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <ip4_input+0x234>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b7f      	cmp	r3, #127	; 0x7f
 8001a62:	d017      	beq.n	8001a94 <ip4_input+0x128>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <ip4_input+0x238>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e00e      	b.n	8001a8a <ip4_input+0x11e>
          if (netif == inp) {
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d006      	beq.n	8001a82 <ip4_input+0x116>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7ff ff4f 	bl	8001918 <ip4_input_accept>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <ip4_input+0x126>
 8001a80:	e000      	b.n	8001a84 <ip4_input+0x118>
            continue;
 8001a82:	bf00      	nop
        NETIF_FOREACH(netif) {
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ed      	bne.n	8001a6c <ip4_input+0x100>
 8001a90:	e000      	b.n	8001a94 <ip4_input+0x128>
            break;
 8001a92:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <ip4_input+0x234>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f9bc 	bl	8001e18 <ip4_addr_isbroadcast_u32>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <ip4_input+0x146>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <ip4_input+0x234>)
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8001aae:	2be0      	cmp	r3, #224	; 0xe0
 8001ab0:	d104      	bne.n	8001abc <ip4_input+0x150>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 fac6 	bl	8003044 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e06d      	b.n	8001b98 <ip4_input+0x22c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <ip4_input+0x160>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 fabe 	bl	8003044 <pbuf_free>
    return ERR_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e065      	b.n	8001b98 <ip4_input+0x22c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <ip4_input+0x17c>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f001 fab0 	bl	8003044 <pbuf_free>
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e057      	b.n	8001b98 <ip4_input+0x22c>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <ip4_input+0x234>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8001aee:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <ip4_input+0x234>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <ip4_input+0x234>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <ip4_input+0x234>)
 8001b0c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f001 fa0c 	bl	8002f30 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	7a5b      	ldrb	r3, [r3, #9]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d006      	beq.n	8001b2e <ip4_input+0x1c2>
 8001b20:	2b06      	cmp	r3, #6
 8001b22:	d109      	bne.n	8001b38 <ip4_input+0x1cc>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f003 f9e6 	bl	8004ef8 <tcp_input>
        break;
 8001b2c:	e021      	b.n	8001b72 <ip4_input+0x206>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fcbb 	bl	80014ac <icmp_input>
        break;
 8001b36:	e01c      	b.n	8001b72 <ip4_input+0x206>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <ip4_input+0x234>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	6979      	ldr	r1, [r7, #20]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f96a 	bl	8001e18 <ip4_addr_isbroadcast_u32>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <ip4_input+0x1fe>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <ip4_input+0x234>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8001b52:	2be0      	cmp	r3, #224	; 0xe0
 8001b54:	d009      	beq.n	8001b6a <ip4_input+0x1fe>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8001b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f001 fa5e 	bl	800301e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8001b62:	2102      	movs	r1, #2
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fdd7 	bl	8001718 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f001 fa6a 	bl	8003044 <pbuf_free>
        break;
 8001b70:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <ip4_input+0x234>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <ip4_input+0x234>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <ip4_input+0x234>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <ip4_input+0x234>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <ip4_input+0x234>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <ip4_input+0x234>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200006c4 	.word	0x200006c4
 8001ba4:	200010a4 	.word	0x200010a4

08001ba8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af04      	add	r7, sp, #16
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <ip4_output_if+0x26>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f805 	bl	8001bfc <ip4_output_if_src>
 8001bf2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	7b9b      	ldrb	r3, [r3, #14]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00b      	beq.n	8001c2e <ip4_output_if_src+0x32>
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <ip4_output_if_src+0x204>)
 8001c18:	f240 326b 	movw	r2, #875	; 0x36b
 8001c1c:	4979      	ldr	r1, [pc, #484]	; (8001e04 <ip4_output_if_src+0x208>)
 8001c1e:	487a      	ldr	r0, [pc, #488]	; (8001e08 <ip4_output_if_src+0x20c>)
 8001c20:	f00c ffae 	bl	800eb80 <iprintf>
 8001c24:	2000      	movs	r0, #0
 8001c26:	f00d f8ad 	bl	800ed84 <fflush>
 8001c2a:	f00c fff2 	bl	800ec12 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80c9 	beq.w	8001dc8 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8001c36:	2314      	movs	r3, #20
 8001c38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8001c3a:	2114      	movs	r1, #20
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f001 f967 	bl	8002f10 <pbuf_add_header>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8001c48:	f06f 0301 	mvn.w	r3, #1
 8001c4c:	e0d3      	b.n	8001df6 <ip4_output_if_src+0x1fa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	895b      	ldrh	r3, [r3, #10]
 8001c58:	2b13      	cmp	r3, #19
 8001c5a:	d80b      	bhi.n	8001c74 <ip4_output_if_src+0x78>
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <ip4_output_if_src+0x204>)
 8001c5e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8001c62:	496a      	ldr	r1, [pc, #424]	; (8001e0c <ip4_output_if_src+0x210>)
 8001c64:	4868      	ldr	r0, [pc, #416]	; (8001e08 <ip4_output_if_src+0x20c>)
 8001c66:	f00c ff8b 	bl	800eb80 <iprintf>
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f00d f88a 	bl	800ed84 <fflush>
 8001c70:	f00c ffcf 	bl	800ec12 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001c80:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8001c82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	121b      	asrs	r3, r3, #8
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8001cd0:	8b7b      	ldrh	r3, [r7, #26]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ce8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8001cea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	430b      	orrs	r3, r1
 8001d06:	121b      	asrs	r3, r3, #8
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	891b      	ldrh	r3, [r3, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fa1b 	bl	800115c <lwip_htons>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	885b      	ldrh	r3, [r3, #2]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	719a      	strb	r2, [r3, #6]
 8001d42:	2200      	movs	r2, #0
 8001d44:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <ip4_output_if_src+0x214>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa06 	bl	800115c <lwip_htons>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <ip4_output_if_src+0x214>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <ip4_output_if_src+0x214>)
 8001d70:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <ip4_output_if_src+0x218>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	e003      	b.n	8001d8a <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	0c1a      	lsrs	r2, r3, #16
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	815a      	strh	r2, [r3, #10]
 8001dc6:	e00f      	b.n	8001de8 <ip4_output_if_src+0x1ec>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	2b13      	cmp	r3, #19
 8001dce:	d802      	bhi.n	8001dd6 <ip4_output_if_src+0x1da>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8001dd0:	f06f 0301 	mvn.w	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <ip4_output_if_src+0x1fa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	607b      	str	r3, [r7, #4]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800fcdc 	.word	0x0800fcdc
 8001e04:	0800fd00 	.word	0x0800fd00
 8001e08:	0800fd0c 	.word	0x0800fd0c
 8001e0c:	0800fd34 	.word	0x0800fd34
 8001e10:	20000536 	.word	0x20000536
 8001e14:	08011ffc 	.word	0x08011ffc

08001e18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d002      	beq.n	8001e34 <ip4_addr_isbroadcast_u32+0x1c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e02a      	b.n	8001e8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e021      	b.n	8001e8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d101      	bne.n	8001e5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e019      	b.n	8001e8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	405a      	eors	r2, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	3308      	adds	r3, #8
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10d      	bne.n	8001e8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3308      	adds	r3, #8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d101      	bne.n	8001e8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8001e8c:	2300      	movs	r3, #0
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <ptr_to_mem+0x20>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4413      	add	r3, r2
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000538 	.word	0x20000538

08001ec0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <mem_to_ptr+0x20>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	b29b      	uxth	r3, r3
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000538 	.word	0x20000538

08001ee4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <plug_holes+0x148>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d20b      	bcs.n	8001f0e <plug_holes+0x2a>
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <plug_holes+0x14c>)
 8001ef8:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8001efc:	494d      	ldr	r1, [pc, #308]	; (8002034 <plug_holes+0x150>)
 8001efe:	484e      	ldr	r0, [pc, #312]	; (8002038 <plug_holes+0x154>)
 8001f00:	f00c fe3e 	bl	800eb80 <iprintf>
 8001f04:	2000      	movs	r0, #0
 8001f06:	f00c ff3d 	bl	800ed84 <fflush>
 8001f0a:	f00c fe82 	bl	800ec12 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <plug_holes+0x158>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d30b      	bcc.n	8001f30 <plug_holes+0x4c>
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <plug_holes+0x14c>)
 8001f1a:	f240 12d3 	movw	r2, #467	; 0x1d3
 8001f1e:	4948      	ldr	r1, [pc, #288]	; (8002040 <plug_holes+0x15c>)
 8001f20:	4845      	ldr	r0, [pc, #276]	; (8002038 <plug_holes+0x154>)
 8001f22:	f00c fe2d 	bl	800eb80 <iprintf>
 8001f26:	2000      	movs	r0, #0
 8001f28:	f00c ff2c 	bl	800ed84 <fflush>
 8001f2c:	f00c fe71 	bl	800ec12 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <plug_holes+0x6c>
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <plug_holes+0x14c>)
 8001f3a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001f3e:	4941      	ldr	r1, [pc, #260]	; (8002044 <plug_holes+0x160>)
 8001f40:	483d      	ldr	r0, [pc, #244]	; (8002038 <plug_holes+0x154>)
 8001f42:	f00c fe1d 	bl	800eb80 <iprintf>
 8001f46:	2000      	movs	r0, #0
 8001f48:	f00c ff1c 	bl	800ed84 <fflush>
 8001f4c:	f00c fe61 	bl	800ec12 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001f58:	d90b      	bls.n	8001f72 <plug_holes+0x8e>
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <plug_holes+0x14c>)
 8001f5c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8001f60:	4939      	ldr	r1, [pc, #228]	; (8002048 <plug_holes+0x164>)
 8001f62:	4835      	ldr	r0, [pc, #212]	; (8002038 <plug_holes+0x154>)
 8001f64:	f00c fe0c 	bl	800eb80 <iprintf>
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f00c ff0b 	bl	800ed84 <fflush>
 8001f6e:	f00c fe50 	bl	800ec12 <abort>

  nmem = ptr_to_mem(mem->next);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff90 	bl	8001e9c <ptr_to_mem>
 8001f7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d024      	beq.n	8001fd0 <plug_holes+0xec>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d120      	bne.n	8001fd0 <plug_holes+0xec>
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <plug_holes+0x158>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d01b      	beq.n	8001fd0 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8001f98:	4b2c      	ldr	r3, [pc, #176]	; (800204c <plug_holes+0x168>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d102      	bne.n	8001fa8 <plug_holes+0xc4>
      lfree = mem;
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <plug_holes+0x168>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	881a      	ldrh	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001fb8:	d00a      	beq.n	8001fd0 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff6c 	bl	8001e9c <ptr_to_mem>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff7a 	bl	8001ec0 <mem_to_ptr>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	885b      	ldrh	r3, [r3, #2]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff61 	bl	8001e9c <ptr_to_mem>
 8001fda:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d01f      	beq.n	8002024 <plug_holes+0x140>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11b      	bne.n	8002024 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <plug_holes+0x168>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d102      	bne.n	8001ffc <plug_holes+0x118>
      lfree = pmem;
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <plug_holes+0x168>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800200c:	d00a      	beq.n	8002024 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff42 	bl	8001e9c <ptr_to_mem>
 8002018:	4604      	mov	r4, r0
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f7ff ff50 	bl	8001ec0 <mem_to_ptr>
 8002020:	4603      	mov	r3, r0
 8002022:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	20000538 	.word	0x20000538
 8002030:	0800fd64 	.word	0x0800fd64
 8002034:	0800fd84 	.word	0x0800fd84
 8002038:	0800fd9c 	.word	0x0800fd9c
 800203c:	2000053c 	.word	0x2000053c
 8002040:	0800fdc4 	.word	0x0800fdc4
 8002044:	0800fde0 	.word	0x0800fde0
 8002048:	0800fdfc 	.word	0x0800fdfc
 800204c:	20000544 	.word	0x20000544

08002050 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff31 	bl	8001ec0 <mem_to_ptr>
 800205e:	4603      	mov	r3, r0
 8002060:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff18 	bl	8001e9c <ptr_to_mem>
 800206c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	885b      	ldrh	r3, [r3, #2]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff12 	bl	8001e9c <ptr_to_mem>
 8002078:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002082:	d818      	bhi.n	80020b6 <mem_link_valid+0x66>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	885b      	ldrh	r3, [r3, #2]
 8002088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800208c:	d813      	bhi.n	80020b6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8002092:	8afa      	ldrh	r2, [r7, #22]
 8002094:	429a      	cmp	r2, r3
 8002096:	d004      	beq.n	80020a2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d109      	bne.n	80020b6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <mem_link_valid+0x74>)
 80020a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d006      	beq.n	80020ba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	885b      	ldrh	r3, [r3, #2]
 80020b0:	8afa      	ldrh	r2, [r7, #22]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <mem_link_valid+0x6a>
    return 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <mem_link_valid+0x6c>
  }
  return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000053c 	.word	0x2000053c

080020c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d051      	beq.n	800217a <mem_free+0xb2>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3b06      	subs	r3, #6
 80020da:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <mem_free+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d306      	bcc.n	80020f4 <mem_free+0x2c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 020c 	add.w	r2, r3, #12
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <mem_free+0xc0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d90b      	bls.n	800210c <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <mem_free+0xc4>)
 80020f6:	f240 2272 	movw	r2, #626	; 0x272
 80020fa:	4925      	ldr	r1, [pc, #148]	; (8002190 <mem_free+0xc8>)
 80020fc:	4825      	ldr	r0, [pc, #148]	; (8002194 <mem_free+0xcc>)
 80020fe:	f00c fd3f 	bl	800eb80 <iprintf>
 8002102:	2000      	movs	r0, #0
 8002104:	f00c fe3e 	bl	800ed84 <fflush>
 8002108:	f00c fd83 	bl	800ec12 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800210c:	4822      	ldr	r0, [pc, #136]	; (8002198 <mem_free+0xd0>)
 800210e:	f7fe ff8d 	bl	800102c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10b      	bne.n	8002132 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <mem_free+0xc4>)
 800211c:	f240 227f 	movw	r2, #639	; 0x27f
 8002120:	491e      	ldr	r1, [pc, #120]	; (800219c <mem_free+0xd4>)
 8002122:	481c      	ldr	r0, [pc, #112]	; (8002194 <mem_free+0xcc>)
 8002124:	f00c fd2c 	bl	800eb80 <iprintf>
 8002128:	2000      	movs	r0, #0
 800212a:	f00c fe2b 	bl	800ed84 <fflush>
 800212e:	f00c fd70 	bl	800ec12 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff ff8c 	bl	8002050 <mem_link_valid>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <mem_free+0xc4>)
 8002140:	f44f 7222 	mov.w	r2, #648	; 0x288
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <mem_free+0xd8>)
 8002146:	4813      	ldr	r0, [pc, #76]	; (8002194 <mem_free+0xcc>)
 8002148:	f00c fd1a 	bl	800eb80 <iprintf>
 800214c:	2000      	movs	r0, #0
 800214e:	f00c fe19 	bl	800ed84 <fflush>
 8002152:	f00c fd5e 	bl	800ec12 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <mem_free+0xdc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d202      	bcs.n	800216c <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <mem_free+0xdc>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff feb9 	bl	8001ee4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8002172:	4809      	ldr	r0, [pc, #36]	; (8002198 <mem_free+0xd0>)
 8002174:	f7fe ff64 	bl	8001040 <sys_mutex_unlock>
 8002178:	e000      	b.n	800217c <mem_free+0xb4>
    return;
 800217a:	bf00      	nop
}
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000538 	.word	0x20000538
 8002188:	2000053c 	.word	0x2000053c
 800218c:	0800fd64 	.word	0x0800fd64
 8002190:	0800fe44 	.word	0x0800fe44
 8002194:	0800fd9c 	.word	0x0800fd9c
 8002198:	20000540 	.word	0x20000540
 800219c:	0800fe60 	.word	0x0800fe60
 80021a0:	0800fe88 	.word	0x0800fe88
 80021a4:	20000544 	.word	0x20000544

080021a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80021b8:	8bfb      	ldrh	r3, [r7, #30]
 80021ba:	2b0b      	cmp	r3, #11
 80021bc:	d801      	bhi.n	80021c2 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80021be:	230c      	movs	r3, #12
 80021c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80021c2:	8bfb      	ldrh	r3, [r7, #30]
 80021c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80021c8:	d803      	bhi.n	80021d2 <mem_trim+0x2a>
 80021ca:	8bfa      	ldrh	r2, [r7, #30]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d201      	bcs.n	80021d6 <mem_trim+0x2e>
    return NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e0ec      	b.n	80023b0 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80021d6:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <mem_trim+0x210>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d304      	bcc.n	80021ea <mem_trim+0x42>
 80021e0:	4b76      	ldr	r3, [pc, #472]	; (80023bc <mem_trim+0x214>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d30b      	bcc.n	8002202 <mem_trim+0x5a>
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <mem_trim+0x218>)
 80021ec:	f240 22c5 	movw	r2, #709	; 0x2c5
 80021f0:	4974      	ldr	r1, [pc, #464]	; (80023c4 <mem_trim+0x21c>)
 80021f2:	4875      	ldr	r0, [pc, #468]	; (80023c8 <mem_trim+0x220>)
 80021f4:	f00c fcc4 	bl	800eb80 <iprintf>
 80021f8:	2000      	movs	r0, #0
 80021fa:	f00c fdc3 	bl	800ed84 <fflush>
 80021fe:	f00c fd08 	bl	800ec12 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8002202:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <mem_trim+0x210>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	d304      	bcc.n	8002216 <mem_trim+0x6e>
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <mem_trim+0x214>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d307      	bcc.n	8002226 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8002216:	f7fe ff61 	bl	80010dc <sys_arch_protect>
 800221a:	60b8      	str	r0, [r7, #8]
 800221c:	68b8      	ldr	r0, [r7, #8]
 800221e:	f7fe ff65 	bl	80010ec <sys_arch_unprotect>
    return rmem;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e0c4      	b.n	80023b0 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3b06      	subs	r3, #6
 800222a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800222c:	69b8      	ldr	r0, [r7, #24]
 800222e:	f7ff fe47 	bl	8001ec0 <mem_to_ptr>
 8002232:	4603      	mov	r3, r0
 8002234:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	881a      	ldrh	r2, [r3, #0]
 800223a:	8afb      	ldrh	r3, [r7, #22]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b06      	subs	r3, #6
 8002242:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8002244:	8bfa      	ldrh	r2, [r7, #30]
 8002246:	8abb      	ldrh	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d90b      	bls.n	8002264 <mem_trim+0xbc>
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <mem_trim+0x218>)
 800224e:	f240 22d7 	movw	r2, #727	; 0x2d7
 8002252:	495e      	ldr	r1, [pc, #376]	; (80023cc <mem_trim+0x224>)
 8002254:	485c      	ldr	r0, [pc, #368]	; (80023c8 <mem_trim+0x220>)
 8002256:	f00c fc93 	bl	800eb80 <iprintf>
 800225a:	2000      	movs	r0, #0
 800225c:	f00c fd92 	bl	800ed84 <fflush>
 8002260:	f00c fcd7 	bl	800ec12 <abort>
  if (newsize > size) {
 8002264:	8bfa      	ldrh	r2, [r7, #30]
 8002266:	8abb      	ldrh	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	d901      	bls.n	8002270 <mem_trim+0xc8>
    /* not supported */
    return NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	e09f      	b.n	80023b0 <mem_trim+0x208>
  }
  if (newsize == size) {
 8002270:	8bfa      	ldrh	r2, [r7, #30]
 8002272:	8abb      	ldrh	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d101      	bne.n	800227c <mem_trim+0xd4>
    /* No change in size, simply return */
    return rmem;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	e099      	b.n	80023b0 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800227c:	4854      	ldr	r0, [pc, #336]	; (80023d0 <mem_trim+0x228>)
 800227e:	f7fe fed5 	bl	800102c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fe08 	bl	8001e9c <ptr_to_mem>
 800228c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d144      	bne.n	8002320 <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800229e:	d10b      	bne.n	80022b8 <mem_trim+0x110>
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <mem_trim+0x218>)
 80022a2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80022a6:	494b      	ldr	r1, [pc, #300]	; (80023d4 <mem_trim+0x22c>)
 80022a8:	4847      	ldr	r0, [pc, #284]	; (80023c8 <mem_trim+0x220>)
 80022aa:	f00c fc69 	bl	800eb80 <iprintf>
 80022ae:	2000      	movs	r0, #0
 80022b0:	f00c fd68 	bl	800ed84 <fflush>
 80022b4:	f00c fcad 	bl	800ec12 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80022be:	8afa      	ldrh	r2, [r7, #22]
 80022c0:	8bfb      	ldrh	r3, [r7, #30]
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3306      	adds	r3, #6
 80022c8:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <mem_trim+0x230>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 80022d4:	89bb      	ldrh	r3, [r7, #12]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fde0 	bl	8001e9c <ptr_to_mem>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <mem_trim+0x230>)
 80022e0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80022e2:	89bb      	ldrh	r3, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fdd9 	bl	8001e9c <ptr_to_mem>
 80022ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2200      	movs	r2, #0
 80022f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	89fa      	ldrh	r2, [r7, #14]
 80022f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	8afa      	ldrh	r2, [r7, #22]
 80022fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	89ba      	ldrh	r2, [r7, #12]
 8002302:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800230c:	d04c      	beq.n	80023a8 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fdc2 	bl	8001e9c <ptr_to_mem>
 8002318:	4602      	mov	r2, r0
 800231a:	89bb      	ldrh	r3, [r7, #12]
 800231c:	8053      	strh	r3, [r2, #2]
 800231e:	e043      	b.n	80023a8 <mem_trim+0x200>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8002320:	8bfb      	ldrh	r3, [r7, #30]
 8002322:	f103 0212 	add.w	r2, r3, #18
 8002326:	8abb      	ldrh	r3, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	d83d      	bhi.n	80023a8 <mem_trim+0x200>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800232c:	8afa      	ldrh	r2, [r7, #22]
 800232e:	8bfb      	ldrh	r3, [r7, #30]
 8002330:	4413      	add	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	3306      	adds	r3, #6
 8002336:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002340:	d10b      	bne.n	800235a <mem_trim+0x1b2>
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <mem_trim+0x218>)
 8002344:	f240 3209 	movw	r2, #777	; 0x309
 8002348:	4922      	ldr	r1, [pc, #136]	; (80023d4 <mem_trim+0x22c>)
 800234a:	481f      	ldr	r0, [pc, #124]	; (80023c8 <mem_trim+0x220>)
 800234c:	f00c fc18 	bl	800eb80 <iprintf>
 8002350:	2000      	movs	r0, #0
 8002352:	f00c fd17 	bl	800ed84 <fflush>
 8002356:	f00c fc5c 	bl	800ec12 <abort>
    mem2 = ptr_to_mem(ptr2);
 800235a:	89bb      	ldrh	r3, [r7, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fd9d 	bl	8001e9c <ptr_to_mem>
 8002362:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <mem_trim+0x230>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	429a      	cmp	r2, r3
 800236c:	d202      	bcs.n	8002374 <mem_trim+0x1cc>
      lfree = mem2;
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <mem_trim+0x230>)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2200      	movs	r2, #0
 8002378:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	8afa      	ldrh	r2, [r7, #22]
 8002386:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	89ba      	ldrh	r2, [r7, #12]
 800238c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002396:	d007      	beq.n	80023a8 <mem_trim+0x200>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fd7d 	bl	8001e9c <ptr_to_mem>
 80023a2:	4602      	mov	r2, r0
 80023a4:	89bb      	ldrh	r3, [r7, #12]
 80023a6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80023a8:	4809      	ldr	r0, [pc, #36]	; (80023d0 <mem_trim+0x228>)
 80023aa:	f7fe fe49 	bl	8001040 <sys_mutex_unlock>
  return rmem;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000538 	.word	0x20000538
 80023bc:	2000053c 	.word	0x2000053c
 80023c0:	0800fd64 	.word	0x0800fd64
 80023c4:	0800febc 	.word	0x0800febc
 80023c8:	0800fd9c 	.word	0x0800fd9c
 80023cc:	0800fed4 	.word	0x0800fed4
 80023d0:	20000540 	.word	0x20000540
 80023d4:	0800fef4 	.word	0x0800fef4
 80023d8:	20000544 	.word	0x20000544

080023dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <mem_malloc+0x14>
    return NULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e0d3      	b.n	8002598 <mem_malloc+0x1bc>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80023f4:	8bbb      	ldrh	r3, [r7, #28]
 80023f6:	2b0b      	cmp	r3, #11
 80023f8:	d801      	bhi.n	80023fe <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80023fa:	230c      	movs	r3, #12
 80023fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80023fe:	8bbb      	ldrh	r3, [r7, #28]
 8002400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002404:	d803      	bhi.n	800240e <mem_malloc+0x32>
 8002406:	8bba      	ldrh	r2, [r7, #28]
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	429a      	cmp	r2, r3
 800240c:	d201      	bcs.n	8002412 <mem_malloc+0x36>
    return NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	e0c2      	b.n	8002598 <mem_malloc+0x1bc>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8002412:	4863      	ldr	r0, [pc, #396]	; (80025a0 <mem_malloc+0x1c4>)
 8002414:	f7fe fe0a 	bl	800102c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <mem_malloc+0x1c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fd4f 	bl	8001ec0 <mem_to_ptr>
 8002422:	4603      	mov	r3, r0
 8002424:	83fb      	strh	r3, [r7, #30]
 8002426:	e0ac      	b.n	8002582 <mem_malloc+0x1a6>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8002428:	8bfb      	ldrh	r3, [r7, #30]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fd36 	bl	8001e9c <ptr_to_mem>
 8002430:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 809c 	bne.w	8002574 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	1f9a      	subs	r2, r3, #6
 8002448:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800244a:	429a      	cmp	r2, r3
 800244c:	f0c0 8092 	bcc.w	8002574 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	8bfb      	ldrh	r3, [r7, #30]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	1f9a      	subs	r2, r3, #6
 800245c:	8bbb      	ldrh	r3, [r7, #28]
 800245e:	3312      	adds	r3, #18
 8002460:	429a      	cmp	r2, r3
 8002462:	d338      	bcc.n	80024d6 <mem_malloc+0xfa>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8002464:	8bfa      	ldrh	r2, [r7, #30]
 8002466:	8bbb      	ldrh	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	3306      	adds	r3, #6
 800246e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8002470:	8a7b      	ldrh	r3, [r7, #18]
 8002472:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002476:	d10b      	bne.n	8002490 <mem_malloc+0xb4>
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <mem_malloc+0x1cc>)
 800247a:	f240 327a 	movw	r2, #890	; 0x37a
 800247e:	494b      	ldr	r1, [pc, #300]	; (80025ac <mem_malloc+0x1d0>)
 8002480:	484b      	ldr	r0, [pc, #300]	; (80025b0 <mem_malloc+0x1d4>)
 8002482:	f00c fb7d 	bl	800eb80 <iprintf>
 8002486:	2000      	movs	r0, #0
 8002488:	f00c fc7c 	bl	800ed84 <fflush>
 800248c:	f00c fbc1 	bl	800ec12 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8002490:	8a7b      	ldrh	r3, [r7, #18]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fd02 	bl	8001e9c <ptr_to_mem>
 8002498:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8bfa      	ldrh	r2, [r7, #30]
 80024ac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	8a7a      	ldrh	r2, [r7, #18]
 80024b2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2201      	movs	r2, #1
 80024b8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80024c2:	d00b      	beq.n	80024dc <mem_malloc+0x100>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fce7 	bl	8001e9c <ptr_to_mem>
 80024ce:	4602      	mov	r2, r0
 80024d0:	8a7b      	ldrh	r3, [r7, #18]
 80024d2:	8053      	strh	r3, [r2, #2]
 80024d4:	e002      	b.n	80024dc <mem_malloc+0x100>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2201      	movs	r2, #1
 80024da:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <mem_malloc+0x1c8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d12c      	bne.n	8002540 <mem_malloc+0x164>
          struct mem *cur = lfree;
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <mem_malloc+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80024ec:	e005      	b.n	80024fa <mem_malloc+0x11e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fcd2 	bl	8001e9c <ptr_to_mem>
 80024f8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	791b      	ldrb	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <mem_malloc+0x130>
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <mem_malloc+0x1d8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	429a      	cmp	r2, r3
 800250a:	d1f0      	bne.n	80024ee <mem_malloc+0x112>
          }
          lfree = cur;
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <mem_malloc+0x1c8>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <mem_malloc+0x1c8>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <mem_malloc+0x1d8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d010      	beq.n	8002540 <mem_malloc+0x164>
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <mem_malloc+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	791b      	ldrb	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <mem_malloc+0x164>
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <mem_malloc+0x1cc>)
 800252a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <mem_malloc+0x1dc>)
 8002530:	481f      	ldr	r0, [pc, #124]	; (80025b0 <mem_malloc+0x1d4>)
 8002532:	f00c fb25 	bl	800eb80 <iprintf>
 8002536:	2000      	movs	r0, #0
 8002538:	f00c fc24 	bl	800ed84 <fflush>
 800253c:	f00c fb69 	bl	800ec12 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8002540:	4817      	ldr	r0, [pc, #92]	; (80025a0 <mem_malloc+0x1c4>)
 8002542:	f7fe fd7d 	bl	8001040 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8002546:	8bba      	ldrh	r2, [r7, #28]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4413      	add	r3, r2
 800254c:	3306      	adds	r3, #6
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <mem_malloc+0x1d8>)
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4293      	cmp	r3, r2
 8002554:	d90b      	bls.n	800256e <mem_malloc+0x192>
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <mem_malloc+0x1cc>)
 8002558:	f240 32ad 	movw	r2, #941	; 0x3ad
 800255c:	4917      	ldr	r1, [pc, #92]	; (80025bc <mem_malloc+0x1e0>)
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <mem_malloc+0x1d4>)
 8002560:	f00c fb0e 	bl	800eb80 <iprintf>
 8002564:	2000      	movs	r0, #0
 8002566:	f00c fc0d 	bl	800ed84 <fflush>
 800256a:	f00c fb52 	bl	800ec12 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3306      	adds	r3, #6
 8002572:	e011      	b.n	8002598 <mem_malloc+0x1bc>
         ptr = ptr_to_mem(ptr)->next) {
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fc90 	bl	8001e9c <ptr_to_mem>
 800257c:	4603      	mov	r3, r0
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8002582:	8bfa      	ldrh	r2, [r7, #30]
 8002584:	8bbb      	ldrh	r3, [r7, #28]
 8002586:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800258a:	429a      	cmp	r2, r3
 800258c:	f4ff af4c 	bcc.w	8002428 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <mem_malloc+0x1c4>)
 8002592:	f7fe fd55 	bl	8001040 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000540 	.word	0x20000540
 80025a4:	20000544 	.word	0x20000544
 80025a8:	0800fd64 	.word	0x0800fd64
 80025ac:	0800fef4 	.word	0x0800fef4
 80025b0:	0800fd9c 	.word	0x0800fd9c
 80025b4:	2000053c 	.word	0x2000053c
 80025b8:	0800ff08 	.word	0x0800ff08
 80025bc:	0800ff24 	.word	0x0800ff24

080025c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80025c8:	f7fe fd88 	bl	80010dc <sys_arch_protect>
 80025cc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <do_memp_malloc_pool+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	601a      	str	r2, [r3, #0]
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7fe fd80 	bl	80010ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	e003      	b.n	80025f8 <do_memp_malloc_pool+0x38>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7fe fd7b 	bl	80010ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d908      	bls.n	8002622 <memp_malloc+0x22>
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <memp_malloc+0x3c>)
 8002612:	f240 1257 	movw	r2, #343	; 0x157
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <memp_malloc+0x40>)
 8002618:	480a      	ldr	r0, [pc, #40]	; (8002644 <memp_malloc+0x44>)
 800261a:	f7fe fd27 	bl	800106c <lwip_win32_platform_diag>
 800261e:	2300      	movs	r3, #0
 8002620:	e008      	b.n	8002634 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4a08      	ldr	r2, [pc, #32]	; (8002648 <memp_malloc+0x48>)
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffc8 	bl	80025c0 <do_memp_malloc_pool>
 8002630:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	0800ffcc 	.word	0x0800ffcc
 8002640:	08010028 	.word	0x08010028
 8002644:	08010000 	.word	0x08010000
 8002648:	080120a4 	.word	0x080120a4

0800264c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800265a:	f7fe fd3f 	bl	80010dc <sys_arch_protect>
 800265e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8002672:	68b8      	ldr	r0, [r7, #8]
 8002674:	f7fe fd3a 	bl	80010ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b09      	cmp	r3, #9
 8002690:	d907      	bls.n	80026a2 <memp_free+0x22>
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <memp_free+0x44>)
 8002694:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002698:	490b      	ldr	r1, [pc, #44]	; (80026c8 <memp_free+0x48>)
 800269a:	480c      	ldr	r0, [pc, #48]	; (80026cc <memp_free+0x4c>)
 800269c:	f7fe fce6 	bl	800106c <lwip_win32_platform_diag>
 80026a0:	e00c      	b.n	80026bc <memp_free+0x3c>

  if (mem == NULL) {
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <memp_free+0x50>)
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ffca 	bl	800264c <do_memp_free_pool>
 80026b8:	e000      	b.n	80026bc <memp_free+0x3c>
    return;
 80026ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	0800ffcc 	.word	0x0800ffcc
 80026c8:	08010048 	.word	0x08010048
 80026cc:	08010000 	.word	0x08010000
 80026d0:	080120a4 	.word	0x080120a4

080026d4 <netif_do_ip_addr_changed>:
  return netif;
}

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f002 fbb7 	bl	8004e54 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <netif_do_set_ipaddr+0x2a>
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <netif_do_set_ipaddr+0x9c>)
 8002704:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002708:	4921      	ldr	r1, [pc, #132]	; (8002790 <netif_do_set_ipaddr+0xa0>)
 800270a:	4822      	ldr	r0, [pc, #136]	; (8002794 <netif_do_set_ipaddr+0xa4>)
 800270c:	f00c fa38 	bl	800eb80 <iprintf>
 8002710:	2000      	movs	r0, #0
 8002712:	f00c fb37 	bl	800ed84 <fflush>
 8002716:	f00c fa7c 	bl	800ec12 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <netif_do_set_ipaddr+0x48>
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <netif_do_set_ipaddr+0x9c>)
 8002722:	f240 12dd 	movw	r2, #477	; 0x1dd
 8002726:	491a      	ldr	r1, [pc, #104]	; (8002790 <netif_do_set_ipaddr+0xa0>)
 8002728:	481a      	ldr	r0, [pc, #104]	; (8002794 <netif_do_set_ipaddr+0xa4>)
 800272a:	f00c fa29 	bl	800eb80 <iprintf>
 800272e:	2000      	movs	r0, #0
 8002730:	f00c fb28 	bl	800ed84 <fflush>
 8002734:	f00c fa6d 	bl	800ec12 <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3304      	adds	r3, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d01c      	beq.n	8002780 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffb9 	bl	80026d4 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <netif_do_set_ipaddr+0x7e>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e000      	b.n	8002770 <netif_do_set_ipaddr+0x80>
 800276e:	2300      	movs	r3, #0
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8002774:	2101      	movs	r1, #1
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f896 	bl	80028a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	08010064 	.word	0x08010064
 8002790:	08010168 	.word	0x08010168
 8002794:	080100a0 	.word	0x080100a0

08002798 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3308      	adds	r3, #8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d00a      	beq.n	80027c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <netif_do_set_netmask+0x26>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e000      	b.n	80027c0 <netif_do_set_netmask+0x28>
 80027be:	2300      	movs	r3, #0
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	330c      	adds	r3, #12
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d00a      	beq.n	8002806 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <netif_do_set_gw+0x26>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e000      	b.n	80027fe <netif_do_set_gw+0x28>
 80027fc:	2300      	movs	r3, #0
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <netif_set_addr+0x90>)
 8002832:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <netif_set_addr+0x90>)
 800283c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <netif_set_addr+0x90>)
 8002846:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <netif_set_addr+0x42>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <netif_set_addr+0x46>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <netif_set_addr+0x48>
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	461a      	mov	r2, r3
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff3f 	bl	80026f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff ff8e 	bl	8002798 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ffa8 	bl	80027d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	461a      	mov	r2, r3
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff ff2b 	bl	80026f0 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800289a:	bf00      	nop
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08011ffc 	.word	0x08011ffc

080028a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <netif_issue_reports+0x2a>
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <netif_issue_reports+0x58>)
 80028bc:	f44f 7262 	mov.w	r2, #904	; 0x388
 80028c0:	4910      	ldr	r1, [pc, #64]	; (8002904 <netif_issue_reports+0x5c>)
 80028c2:	4811      	ldr	r0, [pc, #68]	; (8002908 <netif_issue_reports+0x60>)
 80028c4:	f00c f95c 	bl	800eb80 <iprintf>
 80028c8:	2000      	movs	r0, #0
 80028ca:	f00c fa5b 	bl	800ed84 <fflush>
 80028ce:	f00c f9a0 	bl	800ec12 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028e6:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	e000      	b.n	80028fa <netif_issue_reports+0x52>
    return;
 80028f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	08010064 	.word	0x08010064
 8002904:	080101f4 	.word	0x080101f4
 8002908:	080100a0 	.word	0x080100a0

0800290c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <netif_set_link_up+0x1e>
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <netif_set_link_up+0x4c>)
 800291c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002920:	490e      	ldr	r1, [pc, #56]	; (800295c <netif_set_link_up+0x50>)
 8002922:	480f      	ldr	r0, [pc, #60]	; (8002960 <netif_set_link_up+0x54>)
 8002924:	f7fe fba2 	bl	800106c <lwip_win32_platform_diag>
 8002928:	e013      	b.n	8002952 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10c      	bne.n	8002952 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800294a:	2103      	movs	r1, #3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ffab 	bl	80028a8 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08010064 	.word	0x08010064
 800295c:	08010238 	.word	0x08010238
 8002960:	080100a0 	.word	0x080100a0

08002964 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <netif_set_link_down+0x1e>
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <netif_set_link_down+0x44>)
 8002974:	f240 4223 	movw	r2, #1059	; 0x423
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <netif_set_link_down+0x48>)
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <netif_set_link_down+0x4c>)
 800297c:	f7fe fb76 	bl	800106c <lwip_win32_platform_diag>
 8002980:	e00f      	b.n	80029a2 <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	b2da      	uxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	08010064 	.word	0x08010064
 80029ac:	0801025c 	.word	0x0801025c
 80029b0:	080100a0 	.word	0x080100a0

080029b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <netif_get_by_index+0x48>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e00c      	b.n	80029e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	79fa      	ldrb	r2, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d101      	bne.n	80029e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	e006      	b.n	80029ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ef      	bne.n	80029cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	200010a4 	.word	0x200010a4

08002a00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8002a06:	f7fe fb69 	bl	80010dc <sys_arch_protect>
 8002a0a:	6038      	str	r0, [r7, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <pbuf_free_ooseq+0x44>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f7fe fb6a 	bl	80010ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <pbuf_free_ooseq+0x48>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	e00a      	b.n	8002a36 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f002 fa51 	bl	8004ed0 <tcp_free_ooseq>
      return;
 8002a2e:	e005      	b.n	8002a3c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f1      	bne.n	8002a20 <pbuf_free_ooseq+0x20>
    }
  }
}
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200010ac 	.word	0x200010ac
 8002a48:	200010b4 	.word	0x200010b4

08002a4c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8002a54:	f7ff ffd4 	bl	8002a00 <pbuf_free_ooseq>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8002a66:	f7fe fb39 	bl	80010dc <sys_arch_protect>
 8002a6a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <pbuf_pool_is_empty+0x4c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <pbuf_pool_is_empty+0x4c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe fb37 	bl	80010ec <sys_arch_unprotect>

  if (!queued) {
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8002a84:	2100      	movs	r1, #0
 8002a86:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <pbuf_pool_is_empty+0x50>)
 8002a88:	f7fe fb3a 	bl	8001100 <tcpip_try_callback>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <pbuf_pool_is_empty+0x44>
 8002a92:	f7fe fb23 	bl	80010dc <sys_arch_protect>
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <pbuf_pool_is_empty+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fb24 	bl	80010ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200010ac 	.word	0x200010ac
 8002ab0:	08002a4d 	.word	0x08002a4d

08002ab4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88ba      	ldrh	r2, [r7, #4]
 8002ae0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8002ae2:	8b3b      	ldrh	r3, [r7, #24]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	7f3a      	ldrb	r2, [r7, #28]
 8002aee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	460b      	mov	r3, r1
 8002b14:	80bb      	strh	r3, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	2b41      	cmp	r3, #65	; 0x41
 8002b22:	d00b      	beq.n	8002b3c <pbuf_alloc+0x34>
 8002b24:	2b41      	cmp	r3, #65	; 0x41
 8002b26:	dc02      	bgt.n	8002b2e <pbuf_alloc+0x26>
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d007      	beq.n	8002b3c <pbuf_alloc+0x34>
 8002b2c:	e08b      	b.n	8002c46 <pbuf_alloc+0x13e>
 8002b2e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8002b32:	d00b      	beq.n	8002b4c <pbuf_alloc+0x44>
 8002b34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8002b38:	d05b      	beq.n	8002bf2 <pbuf_alloc+0xea>
 8002b3a:	e084      	b.n	8002c46 <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	88bb      	ldrh	r3, [r7, #4]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2000      	movs	r0, #0
 8002b44:	f000 f898 	bl	8002c78 <pbuf_alloc_reference>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8002b4a:	e088      	b.n	8002c5e <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8002b54:	88bb      	ldrh	r3, [r7, #4]
 8002b56:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8002b58:	2009      	movs	r0, #9
 8002b5a:	f7ff fd51 	bl	8002600 <memp_malloc>
 8002b5e:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8002b66:	f7ff ff7b 	bl	8002a60 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8002b70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b72:	f000 fa67 	bl	8003044 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e072      	b.n	8002c60 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8002b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b7c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	8b7b      	ldrh	r3, [r7, #26]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bf28      	it	cs
 8002b88:	4613      	movcs	r3, r2
 8002b8a:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8002b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b8e:	3310      	adds	r3, #16
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	18d1      	adds	r1, r2, r3
 8002b94:	8a78      	ldrh	r0, [r7, #18]
 8002b96:	8b7a      	ldrh	r2, [r7, #26]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff86 	bl	8002ab4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8002ba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d10b      	bne.n	8002bc8 <pbuf_alloc+0xc0>
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <pbuf_alloc+0x160>)
 8002bb2:	f240 1205 	movw	r2, #261	; 0x105
 8002bb6:	492d      	ldr	r1, [pc, #180]	; (8002c6c <pbuf_alloc+0x164>)
 8002bb8:	482d      	ldr	r0, [pc, #180]	; (8002c70 <pbuf_alloc+0x168>)
 8002bba:	f00b ffe1 	bl	800eb80 <iprintf>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f00c f8e0 	bl	800ed84 <fflush>
 8002bc4:	f00c f825 	bl	800ec12 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e002      	b.n	8002bda <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8002bde:	8b7a      	ldrh	r2, [r7, #26]
 8002be0:	8a7b      	ldrh	r3, [r7, #18]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1b3      	bne.n	8002b58 <pbuf_alloc+0x50>
      break;
 8002bf0:	e035      	b.n	8002c5e <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8002bf2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002bf4:	88bb      	ldrh	r3, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8002bfa:	8a3b      	ldrh	r3, [r7, #16]
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8002c00:	8a3a      	ldrh	r2, [r7, #16]
 8002c02:	88bb      	ldrh	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d303      	bcc.n	8002c10 <pbuf_alloc+0x108>
 8002c08:	89fa      	ldrh	r2, [r7, #14]
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d201      	bcs.n	8002c14 <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e025      	b.n	8002c60 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fbe0 	bl	80023dc <mem_malloc>
 8002c1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <pbuf_alloc+0x120>
        return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e01b      	b.n	8002c60 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8002c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	18d1      	adds	r1, r2, r3
 8002c30:	88b8      	ldrh	r0, [r7, #4]
 8002c32:	88ba      	ldrh	r2, [r7, #4]
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c40:	f7ff ff38 	bl	8002ab4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8002c44:	e00b      	b.n	8002c5e <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <pbuf_alloc+0x160>)
 8002c48:	f240 1229 	movw	r2, #297	; 0x129
 8002c4c:	4909      	ldr	r1, [pc, #36]	; (8002c74 <pbuf_alloc+0x16c>)
 8002c4e:	4808      	ldr	r0, [pc, #32]	; (8002c70 <pbuf_alloc+0x168>)
 8002c50:	f00b ff96 	bl	800eb80 <iprintf>
 8002c54:	2000      	movs	r0, #0
 8002c56:	f00c f895 	bl	800ed84 <fflush>
 8002c5a:	f00b ffda 	bl	800ec12 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08010280 	.word	0x08010280
 8002c6c:	080102a0 	.word	0x080102a0
 8002c70:	080102d4 	.word	0x080102d4
 8002c74:	080102fc 	.word	0x080102fc

08002c78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	2b41      	cmp	r3, #65	; 0x41
 8002c8c:	d00e      	beq.n	8002cac <pbuf_alloc_reference+0x34>
 8002c8e:	883b      	ldrh	r3, [r7, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d00b      	beq.n	8002cac <pbuf_alloc_reference+0x34>
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <pbuf_alloc_reference+0x68>)
 8002c96:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8002c9a:	4912      	ldr	r1, [pc, #72]	; (8002ce4 <pbuf_alloc_reference+0x6c>)
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <pbuf_alloc_reference+0x70>)
 8002c9e:	f00b ff6f 	bl	800eb80 <iprintf>
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f00c f86e 	bl	800ed84 <fflush>
 8002ca8:	f00b ffb3 	bl	800ec12 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8002cac:	2008      	movs	r0, #8
 8002cae:	f7ff fca7 	bl	8002600 <memp_malloc>
 8002cb2:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e00b      	b.n	8002cd6 <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8002cbe:	8879      	ldrh	r1, [r7, #2]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	883b      	ldrh	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fef0 	bl	8002ab4 <pbuf_init_alloced_pbuf>
  return p;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	08010280 	.word	0x08010280
 8002ce4:	08010318 	.word	0x08010318
 8002ce8:	080102d4 	.word	0x080102d4

08002cec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <pbuf_realloc+0x2a>
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <pbuf_realloc+0x130>)
 8002d00:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8002d04:	4946      	ldr	r1, [pc, #280]	; (8002e20 <pbuf_realloc+0x134>)
 8002d06:	4847      	ldr	r0, [pc, #284]	; (8002e24 <pbuf_realloc+0x138>)
 8002d08:	f00b ff3a 	bl	800eb80 <iprintf>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f00c f839 	bl	800ed84 <fflush>
 8002d12:	f00b ff7e 	bl	800ec12 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	891b      	ldrh	r3, [r3, #8]
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d278      	bcs.n	8002e12 <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	891a      	ldrh	r2, [r3, #8]
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	827b      	strh	r3, [r7, #18]
  q = p;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8002d32:	e01d      	b.n	8002d70 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	895b      	ldrh	r3, [r3, #10]
 8002d38:	8a7a      	ldrh	r2, [r7, #18]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	891a      	ldrh	r2, [r3, #8]
 8002d42:	8a3b      	ldrh	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <pbuf_realloc+0x84>
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <pbuf_realloc+0x130>)
 8002d5a:	f240 12b1 	movw	r2, #433	; 0x1b1
 8002d5e:	4932      	ldr	r1, [pc, #200]	; (8002e28 <pbuf_realloc+0x13c>)
 8002d60:	4830      	ldr	r0, [pc, #192]	; (8002e24 <pbuf_realloc+0x138>)
 8002d62:	f00b ff0d 	bl	800eb80 <iprintf>
 8002d66:	2000      	movs	r0, #0
 8002d68:	f00c f80c 	bl	800ed84 <fflush>
 8002d6c:	f00b ff51 	bl	800ec12 <abort>
  while (rem_len > q->len) {
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	895b      	ldrh	r3, [r3, #10]
 8002d74:	8a7a      	ldrh	r2, [r7, #18]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d8dc      	bhi.n	8002d34 <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	7b1b      	ldrb	r3, [r3, #12]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d131      	bne.n	8002dea <pbuf_realloc+0xfe>
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	895b      	ldrh	r3, [r3, #10]
 8002d8a:	8a7a      	ldrh	r2, [r7, #18]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d02c      	beq.n	8002dea <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	461a      	mov	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	6978      	ldr	r0, [r7, #20]
 8002da6:	f7ff f9ff 	bl	80021a8 <mem_trim>
 8002daa:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <pbuf_realloc+0xde>
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <pbuf_realloc+0x130>)
 8002db4:	f240 12bf 	movw	r2, #447	; 0x1bf
 8002db8:	491c      	ldr	r1, [pc, #112]	; (8002e2c <pbuf_realloc+0x140>)
 8002dba:	481a      	ldr	r0, [pc, #104]	; (8002e24 <pbuf_realloc+0x138>)
 8002dbc:	f00b fee0 	bl	800eb80 <iprintf>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f00b ffdf 	bl	800ed84 <fflush>
 8002dc6:	f00b ff24 	bl	800ec12 <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d00b      	beq.n	8002dea <pbuf_realloc+0xfe>
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <pbuf_realloc+0x130>)
 8002dd4:	f240 12c1 	movw	r2, #449	; 0x1c1
 8002dd8:	4915      	ldr	r1, [pc, #84]	; (8002e30 <pbuf_realloc+0x144>)
 8002dda:	4812      	ldr	r0, [pc, #72]	; (8002e24 <pbuf_realloc+0x138>)
 8002ddc:	f00b fed0 	bl	800eb80 <iprintf>
 8002de0:	2000      	movs	r0, #0
 8002de2:	f00b ffcf 	bl	800ed84 <fflush>
 8002de6:	f00b ff14 	bl	800ec12 <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	8a7a      	ldrh	r2, [r7, #18]
 8002dee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	895a      	ldrh	r2, [r3, #10]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f91d 	bl	8003044 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e000      	b.n	8002e14 <pbuf_realloc+0x128>
    return;
 8002e12:	bf00      	nop

}
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	08010280 	.word	0x08010280
 8002e20:	0801032c 	.word	0x0801032c
 8002e24:	080102d4 	.word	0x080102d4
 8002e28:	08010344 	.word	0x08010344
 8002e2c:	0801035c 	.word	0x0801035c
 8002e30:	08010378 	.word	0x08010378

08002e34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <pbuf_add_header_impl+0x2c>
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <pbuf_add_header_impl+0xd0>)
 8002e4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8002e4e:	492e      	ldr	r1, [pc, #184]	; (8002f08 <pbuf_add_header_impl+0xd4>)
 8002e50:	482e      	ldr	r0, [pc, #184]	; (8002f0c <pbuf_add_header_impl+0xd8>)
 8002e52:	f00b fe95 	bl	800eb80 <iprintf>
 8002e56:	2000      	movs	r0, #0
 8002e58:	f00b ff94 	bl	800ed84 <fflush>
 8002e5c:	f00b fed9 	bl	800ec12 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <pbuf_add_header_impl+0x3a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d301      	bcc.n	8002e72 <pbuf_add_header_impl+0x3e>
    return 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e044      	b.n	8002efc <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <pbuf_add_header_impl+0x48>
    return 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e03f      	b.n	8002efc <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	891a      	ldrh	r2, [r3, #8]
 8002e84:	8a7b      	ldrh	r3, [r7, #18]
 8002e86:	4413      	add	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	8a7a      	ldrh	r2, [r7, #18]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d901      	bls.n	8002e94 <pbuf_add_header_impl+0x60>
    return 1;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e033      	b.n	8002efc <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	7b1b      	ldrb	r3, [r3, #12]
 8002e98:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8002e9a:	8a3b      	ldrh	r3, [r7, #16]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	425b      	negs	r3, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f103 0210 	add.w	r2, r3, #16
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d90d      	bls.n	8002ed8 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e01d      	b.n	8002efc <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	425b      	negs	r3, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e001      	b.n	8002ed8 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e011      	b.n	8002efc <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	895a      	ldrh	r2, [r3, #10]
 8002ee2:	8a7b      	ldrh	r3, [r7, #18]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	891a      	ldrh	r2, [r3, #8]
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	811a      	strh	r2, [r3, #8]


  return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08010280 	.word	0x08010280
 8002f08:	08010394 	.word	0x08010394
 8002f0c:	080102d4 	.word	0x080102d4

08002f10 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff88 	bl	8002e34 <pbuf_add_header_impl>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <pbuf_remove_header+0x28>
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <pbuf_remove_header+0x9c>)
 8002f42:	f44f 7214 	mov.w	r2, #592	; 0x250
 8002f46:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <pbuf_remove_header+0xa0>)
 8002f48:	4822      	ldr	r0, [pc, #136]	; (8002fd4 <pbuf_remove_header+0xa4>)
 8002f4a:	f00b fe19 	bl	800eb80 <iprintf>
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f00b ff18 	bl	800ed84 <fflush>
 8002f54:	f00b fe5d 	bl	800ec12 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <pbuf_remove_header+0x36>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d301      	bcc.n	8002f6a <pbuf_remove_header+0x3a>
    return 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02c      	b.n	8002fc4 <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <pbuf_remove_header+0x44>
    return 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e027      	b.n	8002fc4 <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	895b      	ldrh	r3, [r3, #10]
 8002f7c:	89fa      	ldrh	r2, [r7, #14]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d908      	bls.n	8002f94 <pbuf_remove_header+0x64>
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <pbuf_remove_header+0x9c>)
 8002f84:	f240 225a 	movw	r2, #602	; 0x25a
 8002f88:	4913      	ldr	r1, [pc, #76]	; (8002fd8 <pbuf_remove_header+0xa8>)
 8002f8a:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <pbuf_remove_header+0xa4>)
 8002f8c:	f7fe f86e 	bl	800106c <lwip_win32_platform_diag>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e017      	b.n	8002fc4 <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	895a      	ldrh	r2, [r3, #10]
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	891a      	ldrh	r2, [r3, #8]
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	08010280 	.word	0x08010280
 8002fd0:	08010394 	.word	0x08010394
 8002fd4:	080102d4 	.word	0x080102d4
 8002fd8:	080103a0 	.word	0x080103a0

08002fdc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8002fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da08      	bge.n	8003006 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8002ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff97 	bl	8002f30 <pbuf_remove_header>
 8003002:	4603      	mov	r3, r0
 8003004:	e007      	b.n	8003016 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8003006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800300a:	787a      	ldrb	r2, [r7, #1]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff10 	bl	8002e34 <pbuf_add_header_impl>
 8003014:	4603      	mov	r3, r0
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800302a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800302e:	2201      	movs	r2, #1
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffd2 	bl	8002fdc <pbuf_header_impl>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d110      	bne.n	8003074 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <pbuf_free+0x2c>
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <pbuf_free+0xf0>)
 800305a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <pbuf_free+0xf4>)
 8003060:	4836      	ldr	r0, [pc, #216]	; (800313c <pbuf_free+0xf8>)
 8003062:	f00b fd8d 	bl	800eb80 <iprintf>
 8003066:	2000      	movs	r0, #0
 8003068:	f00b fe8c 	bl	800ed84 <fflush>
 800306c:	f00b fdd1 	bl	800ec12 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003070:	2300      	movs	r3, #0
 8003072:	e05b      	b.n	800312c <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8003078:	e054      	b.n	8003124 <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800307a:	f7fe f82f 	bl	80010dc <sys_arch_protect>
 800307e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7b9b      	ldrb	r3, [r3, #14]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <pbuf_free+0x5c>
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <pbuf_free+0xf0>)
 800308a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800308e:	492c      	ldr	r1, [pc, #176]	; (8003140 <pbuf_free+0xfc>)
 8003090:	482a      	ldr	r0, [pc, #168]	; (800313c <pbuf_free+0xf8>)
 8003092:	f00b fd75 	bl	800eb80 <iprintf>
 8003096:	2000      	movs	r0, #0
 8003098:	f00b fe74 	bl	800ed84 <fflush>
 800309c:	f00b fdb9 	bl	800ec12 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7b9b      	ldrb	r3, [r3, #14]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	739a      	strb	r2, [r3, #14]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7b9b      	ldrb	r3, [r3, #14]
 80030b0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80030b2:	69b8      	ldr	r0, [r7, #24]
 80030b4:	f7fe f81a 	bl	80010ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d130      	bne.n	8003120 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7b1b      	ldrb	r3, [r3, #12]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d104      	bne.n	80030de <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	2009      	movs	r0, #9
 80030d8:	f7ff fad2 	bl	8002680 <memp_free>
 80030dc:	e01a      	b.n	8003114 <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d104      	bne.n	80030ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	2008      	movs	r0, #8
 80030e8:	f7ff faca 	bl	8002680 <memp_free>
 80030ec:	e012      	b.n	8003114 <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <pbuf_free+0xb8>
          mem_free(p);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fe ffe7 	bl	80020c8 <mem_free>
 80030fa:	e00b      	b.n	8003114 <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <pbuf_free+0xf0>)
 80030fe:	f240 3213 	movw	r2, #787	; 0x313
 8003102:	4910      	ldr	r1, [pc, #64]	; (8003144 <pbuf_free+0x100>)
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <pbuf_free+0xf8>)
 8003106:	f00b fd3b 	bl	800eb80 <iprintf>
 800310a:	2000      	movs	r0, #0
 800310c:	f00b fe3a 	bl	800ed84 <fflush>
 8003110:	f00b fd7f 	bl	800ec12 <abort>
        }
      }
      count++;
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	3301      	adds	r3, #1
 8003118:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	e001      	b.n	8003124 <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1a7      	bne.n	800307a <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800312a:	7ffb      	ldrb	r3, [r7, #31]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	08010280 	.word	0x08010280
 8003138:	08010394 	.word	0x08010394
 800313c:	080102d4 	.word	0x080102d4
 8003140:	080103c0 	.word	0x080103c0
 8003144:	080103d8 	.word	0x080103d8

08003148 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8003154:	e005      	b.n	8003162 <pbuf_clen+0x1a>
    ++len;
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	3301      	adds	r3, #1
 800315a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f6      	bne.n	8003156 <pbuf_clen+0xe>
  }
  return len;
 8003168:	89fb      	ldrh	r3, [r7, #14]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01b      	beq.n	80031be <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8003186:	f7fd ffa9 	bl	80010dc <sys_arch_protect>
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b9b      	ldrb	r3, [r3, #14]
 8003190:	3301      	adds	r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	739a      	strb	r2, [r3, #14]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7fd ffa7 	bl	80010ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7b9b      	ldrb	r3, [r3, #14]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <pbuf_ref+0x46>
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <pbuf_ref+0x50>)
 80031a8:	f240 3246 	movw	r2, #838	; 0x346
 80031ac:	4907      	ldr	r1, [pc, #28]	; (80031cc <pbuf_ref+0x54>)
 80031ae:	4808      	ldr	r0, [pc, #32]	; (80031d0 <pbuf_ref+0x58>)
 80031b0:	f00b fce6 	bl	800eb80 <iprintf>
 80031b4:	2000      	movs	r0, #0
 80031b6:	f00b fde5 	bl	800ed84 <fflush>
 80031ba:	f00b fd2a 	bl	800ec12 <abort>
  }
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	08010280 	.word	0x08010280
 80031cc:	080103ec 	.word	0x080103ec
 80031d0:	080102d4 	.word	0x080102d4

080031d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <pbuf_cat+0x16>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <pbuf_cat+0x26>
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <pbuf_cat+0xcc>)
 80031ec:	f240 325e 	movw	r2, #862	; 0x35e
 80031f0:	492c      	ldr	r1, [pc, #176]	; (80032a4 <pbuf_cat+0xd0>)
 80031f2:	482d      	ldr	r0, [pc, #180]	; (80032a8 <pbuf_cat+0xd4>)
 80031f4:	f7fd ff3a 	bl	800106c <lwip_win32_platform_diag>
 80031f8:	e04e      	b.n	8003298 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10b      	bne.n	800321a <pbuf_cat+0x46>
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <pbuf_cat+0xcc>)
 8003204:	f240 325f 	movw	r2, #863	; 0x35f
 8003208:	4928      	ldr	r1, [pc, #160]	; (80032ac <pbuf_cat+0xd8>)
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <pbuf_cat+0xd4>)
 800320c:	f00b fcb8 	bl	800eb80 <iprintf>
 8003210:	2000      	movs	r0, #0
 8003212:	f00b fdb7 	bl	800ed84 <fflush>
 8003216:	f00b fcfc 	bl	800ec12 <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e00a      	b.n	8003236 <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	891a      	ldrh	r2, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	891b      	ldrh	r3, [r3, #8]
 8003228:	4413      	add	r3, r2
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	891a      	ldrh	r2, [r3, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	895b      	ldrh	r3, [r3, #10]
 8003246:	429a      	cmp	r2, r3
 8003248:	d00b      	beq.n	8003262 <pbuf_cat+0x8e>
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <pbuf_cat+0xcc>)
 800324c:	f240 3267 	movw	r2, #871	; 0x367
 8003250:	4917      	ldr	r1, [pc, #92]	; (80032b0 <pbuf_cat+0xdc>)
 8003252:	4815      	ldr	r0, [pc, #84]	; (80032a8 <pbuf_cat+0xd4>)
 8003254:	f00b fc94 	bl	800eb80 <iprintf>
 8003258:	2000      	movs	r0, #0
 800325a:	f00b fd93 	bl	800ed84 <fflush>
 800325e:	f00b fcd8 	bl	800ec12 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <pbuf_cat+0xae>
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <pbuf_cat+0xcc>)
 800326c:	f44f 725a 	mov.w	r2, #872	; 0x368
 8003270:	4910      	ldr	r1, [pc, #64]	; (80032b4 <pbuf_cat+0xe0>)
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <pbuf_cat+0xd4>)
 8003274:	f00b fc84 	bl	800eb80 <iprintf>
 8003278:	2000      	movs	r0, #0
 800327a:	f00b fd83 	bl	800ed84 <fflush>
 800327e:	f00b fcc8 	bl	800ec12 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	891a      	ldrh	r2, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	891b      	ldrh	r3, [r3, #8]
 800328a:	4413      	add	r3, r2
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	08010280 	.word	0x08010280
 80032a4:	08010400 	.word	0x08010400
 80032a8:	080102d4 	.word	0x080102d4
 80032ac:	08010438 	.word	0x08010438
 80032b0:	08010454 	.word	0x08010454
 80032b4:	08010484 	.word	0x08010484

080032b8 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <pbuf_copy+0x24>
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <pbuf_copy+0x3c>)
 80032ca:	f240 32c7 	movw	r2, #967	; 0x3c7
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <pbuf_copy+0x40>)
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <pbuf_copy+0x44>)
 80032d2:	f7fd fecb 	bl	800106c <lwip_win32_platform_diag>
 80032d6:	f06f 030f 	mvn.w	r3, #15
 80032da:	e007      	b.n	80032ec <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	891a      	ldrh	r2, [r3, #8]
 80032e0:	2300      	movs	r3, #0
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f80b 	bl	8003300 <pbuf_copy_partial_pbuf>
 80032ea:	4603      	mov	r3, r0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08010280 	.word	0x08010280
 80032f8:	080104d0 	.word	0x080104d0
 80032fc:	080102d4 	.word	0x080102d4

08003300 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	460b      	mov	r3, r1
 8003310:	80fb      	strh	r3, [r7, #6]
 8003312:	4613      	mov	r3, r2
 8003314:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 8003316:	88bb      	ldrh	r3, [r7, #4]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <pbuf_copy_partial_pbuf+0x2e>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	891b      	ldrh	r3, [r3, #8]
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	429a      	cmp	r2, r3
 800332c:	d909      	bls.n	8003342 <pbuf_copy_partial_pbuf+0x42>
 800332e:	4b74      	ldr	r3, [pc, #464]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 8003330:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003334:	4973      	ldr	r1, [pc, #460]	; (8003504 <pbuf_copy_partial_pbuf+0x204>)
 8003336:	4874      	ldr	r0, [pc, #464]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 8003338:	f7fd fe98 	bl	800106c <lwip_win32_platform_diag>
 800333c:	f06f 030f 	mvn.w	r3, #15
 8003340:	e0d9      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <pbuf_copy_partial_pbuf+0x58>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	891b      	ldrh	r3, [r3, #8]
 800334c:	4619      	mov	r1, r3
 800334e:	88ba      	ldrh	r2, [r7, #4]
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4413      	add	r3, r2
 8003354:	4299      	cmp	r1, r3
 8003356:	da09      	bge.n	800336c <pbuf_copy_partial_pbuf+0x6c>
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 800335a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800335e:	496b      	ldr	r1, [pc, #428]	; (800350c <pbuf_copy_partial_pbuf+0x20c>)
 8003360:	4869      	ldr	r0, [pc, #420]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 8003362:	f7fd fe83 	bl	800106c <lwip_win32_platform_diag>
 8003366:	f06f 030f 	mvn.w	r3, #15
 800336a:	e0c4      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	895b      	ldrh	r3, [r3, #10]
 8003370:	461a      	mov	r2, r3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	895b      	ldrh	r3, [r3, #10]
 800337a:	4619      	mov	r1, r3
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1acb      	subs	r3, r1, r3
 8003380:	429a      	cmp	r2, r3
 8003382:	d306      	bcc.n	8003392 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	895b      	ldrh	r3, [r3, #10]
 8003388:	461a      	mov	r2, r3
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e005      	b.n	800339e <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	895b      	ldrh	r3, [r3, #10]
 8003396:	461a      	mov	r2, r3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4293      	cmp	r3, r2
 80033a4:	bf28      	it	cs
 80033a6:	4613      	movcs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	18d0      	adds	r0, r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4413      	add	r3, r2
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4619      	mov	r1, r3
 80033be:	f00b fde1 	bl	800ef84 <memcpy>
    offset_to += len;
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4413      	add	r3, r2
 80033c8:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4413      	add	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	895b      	ldrh	r3, [r3, #10]
 80033e0:	461a      	mov	r2, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d20b      	bcs.n	8003400 <pbuf_copy_partial_pbuf+0x100>
 80033e8:	4b45      	ldr	r3, [pc, #276]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 80033ea:	f240 32fa 	movw	r2, #1018	; 0x3fa
 80033ee:	4948      	ldr	r1, [pc, #288]	; (8003510 <pbuf_copy_partial_pbuf+0x210>)
 80033f0:	4845      	ldr	r0, [pc, #276]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 80033f2:	f00b fbc5 	bl	800eb80 <iprintf>
 80033f6:	2000      	movs	r0, #0
 80033f8:	f00b fcc4 	bl	800ed84 <fflush>
 80033fc:	f00b fc09 	bl	800ec12 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	895b      	ldrh	r3, [r3, #10]
 8003404:	461a      	mov	r2, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	429a      	cmp	r2, r3
 800340a:	d20b      	bcs.n	8003424 <pbuf_copy_partial_pbuf+0x124>
 800340c:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 800340e:	f240 32fb 	movw	r2, #1019	; 0x3fb
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <pbuf_copy_partial_pbuf+0x214>)
 8003414:	483c      	ldr	r0, [pc, #240]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 8003416:	f00b fbb3 	bl	800eb80 <iprintf>
 800341a:	2000      	movs	r0, #0
 800341c:	f00b fcb2 	bl	800ed84 <fflush>
 8003420:	f00b fbf7 	bl	800ec12 <abort>
    if (offset_from >= p_from->len) {
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	895b      	ldrh	r3, [r3, #10]
 8003428:	461a      	mov	r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	429a      	cmp	r2, r3
 800342e:	d814      	bhi.n	800345a <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10c      	bne.n	800345a <pbuf_copy_partial_pbuf+0x15a>
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <pbuf_copy_partial_pbuf+0x15a>
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 8003448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344c:	4932      	ldr	r1, [pc, #200]	; (8003518 <pbuf_copy_partial_pbuf+0x218>)
 800344e:	482e      	ldr	r0, [pc, #184]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 8003450:	f7fd fe0c 	bl	800106c <lwip_win32_platform_diag>
 8003454:	f06f 030f 	mvn.w	r3, #15
 8003458:	e04d      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	895b      	ldrh	r3, [r3, #10]
 800345e:	461a      	mov	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	429a      	cmp	r2, r3
 8003464:	d114      	bne.n	8003490 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10c      	bne.n	8003490 <pbuf_copy_partial_pbuf+0x190>
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <pbuf_copy_partial_pbuf+0x190>
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 800347e:	f240 4206 	movw	r2, #1030	; 0x406
 8003482:	4926      	ldr	r1, [pc, #152]	; (800351c <pbuf_copy_partial_pbuf+0x21c>)
 8003484:	4820      	ldr	r0, [pc, #128]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 8003486:	f7fd fdf1 	bl	800106c <lwip_win32_platform_diag>
 800348a:	f06f 030f 	mvn.w	r3, #15
 800348e:	e032      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <pbuf_copy_partial_pbuf+0x1be>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	895a      	ldrh	r2, [r3, #10]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	891b      	ldrh	r3, [r3, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10d      	bne.n	80034be <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <pbuf_copy_partial_pbuf+0x1be>
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 80034ac:	f240 420c 	movw	r2, #1036	; 0x40c
 80034b0:	491b      	ldr	r1, [pc, #108]	; (8003520 <pbuf_copy_partial_pbuf+0x220>)
 80034b2:	4815      	ldr	r0, [pc, #84]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 80034b4:	f7fd fdda 	bl	800106c <lwip_win32_platform_diag>
 80034b8:	f06f 0305 	mvn.w	r3, #5
 80034bc:	e01b      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <pbuf_copy_partial_pbuf+0x1ec>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	895a      	ldrh	r2, [r3, #10]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	891b      	ldrh	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d10d      	bne.n	80034ec <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <pbuf_copy_partial_pbuf+0x1ec>
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <pbuf_copy_partial_pbuf+0x200>)
 80034da:	f240 4211 	movw	r2, #1041	; 0x411
 80034de:	4910      	ldr	r1, [pc, #64]	; (8003520 <pbuf_copy_partial_pbuf+0x220>)
 80034e0:	4809      	ldr	r0, [pc, #36]	; (8003508 <pbuf_copy_partial_pbuf+0x208>)
 80034e2:	f7fd fdc3 	bl	800106c <lwip_win32_platform_diag>
 80034e6:	f06f 0305 	mvn.w	r3, #5
 80034ea:	e004      	b.n	80034f6 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f af3c 	bne.w	800336c <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	08010280 	.word	0x08010280
 8003504:	080104ec 	.word	0x080104ec
 8003508:	080102d4 	.word	0x080102d4
 800350c:	08010520 	.word	0x08010520
 8003510:	08010550 	.word	0x08010550
 8003514:	08010568 	.word	0x08010568
 8003518:	08010584 	.word	0x08010584
 800351c:	08010594 	.word	0x08010594
 8003520:	080105a4 	.word	0x080105a4

08003524 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	460b      	mov	r3, r1
 8003534:	80fb      	strh	r3, [r7, #6]
 8003536:	4613      	mov	r3, r2
 8003538:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <pbuf_copy_partial+0x36>
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <pbuf_copy_partial+0xd4>)
 800354a:	f240 422c 	movw	r2, #1068	; 0x42c
 800354e:	492b      	ldr	r1, [pc, #172]	; (80035fc <pbuf_copy_partial+0xd8>)
 8003550:	482b      	ldr	r0, [pc, #172]	; (8003600 <pbuf_copy_partial+0xdc>)
 8003552:	f7fd fd8b 	bl	800106c <lwip_win32_platform_diag>
 8003556:	2300      	movs	r3, #0
 8003558:	e04a      	b.n	80035f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <pbuf_copy_partial+0x4e>
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <pbuf_copy_partial+0xd4>)
 8003562:	f240 422d 	movw	r2, #1069	; 0x42d
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <pbuf_copy_partial+0xe0>)
 8003568:	4825      	ldr	r0, [pc, #148]	; (8003600 <pbuf_copy_partial+0xdc>)
 800356a:	f7fd fd7f 	bl	800106c <lwip_win32_platform_diag>
 800356e:	2300      	movs	r3, #0
 8003570:	e03e      	b.n	80035f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	e034      	b.n	80035e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8003578:	88bb      	ldrh	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <pbuf_copy_partial+0x70>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	895b      	ldrh	r3, [r3, #10]
 8003582:	88ba      	ldrh	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d305      	bcc.n	8003594 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	895b      	ldrh	r3, [r3, #10]
 800358c:	88ba      	ldrh	r2, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	80bb      	strh	r3, [r7, #4]
 8003592:	e023      	b.n	80035dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	895a      	ldrh	r2, [r3, #10]
 8003598:	88bb      	ldrh	r3, [r7, #4]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800359e:	8b3a      	ldrh	r2, [r7, #24]
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d901      	bls.n	80035aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80035aa:	8b7b      	ldrh	r3, [r7, #26]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	18d0      	adds	r0, r2, r3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	8b3a      	ldrh	r2, [r7, #24]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f00b fce2 	bl	800ef84 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80035c0:	8afa      	ldrh	r2, [r7, #22]
 80035c2:	8b3b      	ldrh	r3, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80035c8:	8b7a      	ldrh	r2, [r7, #26]
 80035ca:	8b3b      	ldrh	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	8b3b      	ldrh	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <pbuf_copy_partial+0xca>
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1c4      	bne.n	8003578 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80035ee:	8afb      	ldrh	r3, [r7, #22]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	08010280 	.word	0x08010280
 80035fc:	080105dc 	.word	0x080105dc
 8003600:	080102d4 	.word	0x080102d4
 8003604:	080105fc 	.word	0x080105fc

08003608 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <pbuf_coalesce+0x18>
    return p;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	e010      	b.n	8003642 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f80f 	bl	800364c <pbuf_clone>
 800362e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	e003      	b.n	8003642 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fd02 	bl	8003044 <pbuf_free>
  return q;
 8003640:	68fb      	ldr	r3, [r7, #12]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	603a      	str	r2, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
 8003658:	460b      	mov	r3, r1
 800365a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	8919      	ldrh	r1, [r3, #8]
 8003660:	88ba      	ldrh	r2, [r7, #4]
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fa4f 	bl	8002b08 <pbuf_alloc>
 800366a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <pbuf_clone+0x2a>
    return NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	e016      	b.n	80036a4 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff fe1d 	bl	80032b8 <pbuf_copy>
 800367e:	4603      	mov	r3, r0
 8003680:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8003682:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <pbuf_clone+0x56>
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <pbuf_clone+0x60>)
 800368c:	f240 524c 	movw	r2, #1356	; 0x54c
 8003690:	4907      	ldr	r1, [pc, #28]	; (80036b0 <pbuf_clone+0x64>)
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <pbuf_clone+0x68>)
 8003694:	f00b fa74 	bl	800eb80 <iprintf>
 8003698:	2000      	movs	r0, #0
 800369a:	f00b fb73 	bl	800ed84 <fflush>
 800369e:	f00b fab8 	bl	800ec12 <abort>
  return q;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08010280 	.word	0x08010280
 80036b0:	08010708 	.word	0x08010708
 80036b4:	080102d4 	.word	0x080102d4

080036b8 <tcp_free>:
}

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7d1b      	ldrb	r3, [r3, #20]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10a      	bne.n	80036de <tcp_free+0x26>
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <tcp_free+0x38>)
 80036ca:	22d4      	movs	r2, #212	; 0xd4
 80036cc:	4909      	ldr	r1, [pc, #36]	; (80036f4 <tcp_free+0x3c>)
 80036ce:	480a      	ldr	r0, [pc, #40]	; (80036f8 <tcp_free+0x40>)
 80036d0:	f00b fa56 	bl	800eb80 <iprintf>
 80036d4:	2000      	movs	r0, #0
 80036d6:	f00b fb55 	bl	800ed84 <fflush>
 80036da:	f00b fa9a 	bl	800ec12 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	2000      	movs	r0, #0
 80036e2:	f7fe ffcd 	bl	8002680 <memp_free>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	08010794 	.word	0x08010794
 80036f4:	080107b4 	.word	0x080107b4
 80036f8:	080107c8 	.word	0x080107c8

080036fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7d1b      	ldrb	r3, [r3, #20]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10a      	bne.n	8003722 <tcp_free_listen+0x26>
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <tcp_free_listen+0x38>)
 800370e:	22df      	movs	r2, #223	; 0xdf
 8003710:	4909      	ldr	r1, [pc, #36]	; (8003738 <tcp_free_listen+0x3c>)
 8003712:	480a      	ldr	r0, [pc, #40]	; (800373c <tcp_free_listen+0x40>)
 8003714:	f00b fa34 	bl	800eb80 <iprintf>
 8003718:	2000      	movs	r0, #0
 800371a:	f00b fb33 	bl	800ed84 <fflush>
 800371e:	f00b fa78 	bl	800ec12 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	2001      	movs	r0, #1
 8003726:	f7fe ffab 	bl	8002680 <memp_free>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	08010794 	.word	0x08010794
 8003738:	080107f0 	.word	0x080107f0
 800373c:	080107c8 	.word	0x080107c8

08003740 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8003744:	f000 fefe 	bl	8004544 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <tcp_tmr+0x28>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <tcp_tmr+0x28>)
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <tcp_tmr+0x28>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8003760:	f000 fb7e 	bl	8003e60 <tcp_slowtmr>
  }
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000570 	.word	0x20000570

0800376c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <tcp_remove_listener+0x26>
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <tcp_remove_listener+0x50>)
 800377e:	22ff      	movs	r2, #255	; 0xff
 8003780:	490f      	ldr	r1, [pc, #60]	; (80037c0 <tcp_remove_listener+0x54>)
 8003782:	4810      	ldr	r0, [pc, #64]	; (80037c4 <tcp_remove_listener+0x58>)
 8003784:	f00b f9fc 	bl	800eb80 <iprintf>
 8003788:	2000      	movs	r0, #0
 800378a:	f00b fafb 	bl	800ed84 <fflush>
 800378e:	f00b fa40 	bl	800ec12 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e00a      	b.n	80037ae <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d102      	bne.n	80037a8 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f1      	bne.n	8003798 <tcp_remove_listener+0x2c>
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08010794 	.word	0x08010794
 80037c0:	0801080c 	.word	0x0801080c
 80037c4:	080107c8 	.word	0x080107c8

080037c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <tcp_listen_closed+0x26>
 80037d6:	4b19      	ldr	r3, [pc, #100]	; (800383c <tcp_listen_closed+0x74>)
 80037d8:	f240 1211 	movw	r2, #273	; 0x111
 80037dc:	4918      	ldr	r1, [pc, #96]	; (8003840 <tcp_listen_closed+0x78>)
 80037de:	4819      	ldr	r0, [pc, #100]	; (8003844 <tcp_listen_closed+0x7c>)
 80037e0:	f00b f9ce 	bl	800eb80 <iprintf>
 80037e4:	2000      	movs	r0, #0
 80037e6:	f00b facd 	bl	800ed84 <fflush>
 80037ea:	f00b fa12 	bl	800ec12 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7d1b      	ldrb	r3, [r3, #20]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d00b      	beq.n	800380e <tcp_listen_closed+0x46>
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <tcp_listen_closed+0x74>)
 80037f8:	f44f 7289 	mov.w	r2, #274	; 0x112
 80037fc:	4912      	ldr	r1, [pc, #72]	; (8003848 <tcp_listen_closed+0x80>)
 80037fe:	4811      	ldr	r0, [pc, #68]	; (8003844 <tcp_listen_closed+0x7c>)
 8003800:	f00b f9be 	bl	800eb80 <iprintf>
 8003804:	2000      	movs	r0, #0
 8003806:	f00b fabd 	bl	800ed84 <fflush>
 800380a:	f00b fa02 	bl	800ec12 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800380e:	2301      	movs	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e00b      	b.n	800382c <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <tcp_listen_closed+0x84>)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ffa3 	bl	800376c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d9f0      	bls.n	8003814 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	08010794 	.word	0x08010794
 8003840:	08010834 	.word	0x08010834
 8003844:	080107c8 	.word	0x080107c8
 8003848:	08010840 	.word	0x08010840
 800384c:	080120e4 	.word	0x080120e4

08003850 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af04      	add	r7, sp, #16
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <tcp_close_shutdown+0x2a>
 8003862:	4b66      	ldr	r3, [pc, #408]	; (80039fc <tcp_close_shutdown+0x1ac>)
 8003864:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003868:	4965      	ldr	r1, [pc, #404]	; (8003a00 <tcp_close_shutdown+0x1b0>)
 800386a:	4866      	ldr	r0, [pc, #408]	; (8003a04 <tcp_close_shutdown+0x1b4>)
 800386c:	f00b f988 	bl	800eb80 <iprintf>
 8003870:	2000      	movs	r0, #0
 8003872:	f00b fa87 	bl	800ed84 <fflush>
 8003876:	f00b f9cc 	bl	800ec12 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d06b      	beq.n	8003958 <tcp_close_shutdown+0x108>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7d1b      	ldrb	r3, [r3, #20]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d003      	beq.n	8003890 <tcp_close_shutdown+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7d1b      	ldrb	r3, [r3, #20]
 800388c:	2b07      	cmp	r3, #7
 800388e:	d163      	bne.n	8003958 <tcp_close_shutdown+0x108>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <tcp_close_shutdown+0x52>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80038a0:	d05a      	beq.n	8003958 <tcp_close_shutdown+0x108>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8b5b      	ldrh	r3, [r3, #26]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <tcp_close_shutdown+0x76>
 80038ae:	4b53      	ldr	r3, [pc, #332]	; (80039fc <tcp_close_shutdown+0x1ac>)
 80038b0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80038b4:	4954      	ldr	r1, [pc, #336]	; (8003a08 <tcp_close_shutdown+0x1b8>)
 80038b6:	4853      	ldr	r0, [pc, #332]	; (8003a04 <tcp_close_shutdown+0x1b4>)
 80038b8:	f00b f962 	bl	800eb80 <iprintf>
 80038bc:	2000      	movs	r0, #0
 80038be:	f00b fa61 	bl	800ed84 <fflush>
 80038c2:	f00b f9a6 	bl	800ec12 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80038ce:	687d      	ldr	r5, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	8ad2      	ldrh	r2, [r2, #22]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	8b09      	ldrh	r1, [r1, #24]
 80038dc:	9102      	str	r1, [sp, #8]
 80038de:	9201      	str	r2, [sp, #4]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	462b      	mov	r3, r5
 80038e4:	4622      	mov	r2, r4
 80038e6:	4601      	mov	r1, r0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f005 f929 	bl	8008b40 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f001 f914 	bl	8004b1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80038f4:	4b45      	ldr	r3, [pc, #276]	; (8003a0c <tcp_close_shutdown+0x1bc>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d105      	bne.n	800390a <tcp_close_shutdown+0xba>
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <tcp_close_shutdown+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a41      	ldr	r2, [pc, #260]	; (8003a0c <tcp_close_shutdown+0x1bc>)
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e013      	b.n	8003932 <tcp_close_shutdown+0xe2>
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <tcp_close_shutdown+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	e00c      	b.n	800392c <tcp_close_shutdown+0xdc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d104      	bne.n	8003926 <tcp_close_shutdown+0xd6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	60da      	str	r2, [r3, #12]
 8003924:	e005      	b.n	8003932 <tcp_close_shutdown+0xe2>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ef      	bne.n	8003912 <tcp_close_shutdown+0xc2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <tcp_close_shutdown+0x1c0>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800393e:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <tcp_close_shutdown+0x1c4>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d102      	bne.n	800394e <tcp_close_shutdown+0xfe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8003948:	f003 fe96 	bl	8007678 <tcp_trigger_input_pcb_close>
 800394c:	e002      	b.n	8003954 <tcp_close_shutdown+0x104>
      } else {
        tcp_free(pcb);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff feb2 	bl	80036b8 <tcp_free>
      }
      return ERR_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e04d      	b.n	80039f4 <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7d1b      	ldrb	r3, [r3, #20]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d02d      	beq.n	80039bc <tcp_close_shutdown+0x16c>
 8003960:	2b02      	cmp	r3, #2
 8003962:	d036      	beq.n	80039d2 <tcp_close_shutdown+0x182>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13f      	bne.n	80039e8 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8adb      	ldrh	r3, [r3, #22]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d021      	beq.n	80039b4 <tcp_close_shutdown+0x164>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8003970:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <tcp_close_shutdown+0x1c8>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d105      	bne.n	8003986 <tcp_close_shutdown+0x136>
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <tcp_close_shutdown+0x1c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <tcp_close_shutdown+0x1c8>)
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e013      	b.n	80039ae <tcp_close_shutdown+0x15e>
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <tcp_close_shutdown+0x1c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	e00c      	b.n	80039a8 <tcp_close_shutdown+0x158>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d104      	bne.n	80039a2 <tcp_close_shutdown+0x152>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	e005      	b.n	80039ae <tcp_close_shutdown+0x15e>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <tcp_close_shutdown+0x13e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fe7f 	bl	80036b8 <tcp_free>
      break;
 80039ba:	e01a      	b.n	80039f2 <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff03 	bl	80037c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4815      	ldr	r0, [pc, #84]	; (8003a1c <tcp_close_shutdown+0x1cc>)
 80039c6:	f001 f8f9 	bl	8004bbc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe96 	bl	80036fc <tcp_free_listen>
      break;
 80039d0:	e00f      	b.n	80039f2 <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <tcp_close_shutdown+0x1bc>)
 80039d6:	f001 f8f1 	bl	8004bbc <tcp_pcb_remove>
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <tcp_close_shutdown+0x1c0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fe69 	bl	80036b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80039e6:	e004      	b.n	80039f2 <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f819 	bl	8003a20 <tcp_close_shutdown_fin>
 80039ee:	4603      	mov	r3, r0
 80039f0:	e000      	b.n	80039f4 <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdb0      	pop	{r4, r5, r7, pc}
 80039fc:	08010794 	.word	0x08010794
 8003a00:	08010858 	.word	0x08010858
 8003a04:	080107c8 	.word	0x080107c8
 8003a08:	08010878 	.word	0x08010878
 8003a0c:	200010b4 	.word	0x200010b4
 8003a10:	200010b0 	.word	0x200010b0
 8003a14:	200010c8 	.word	0x200010c8
 8003a18:	200010c0 	.word	0x200010c0
 8003a1c:	200010bc 	.word	0x200010bc

08003a20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <tcp_close_shutdown_fin+0x26>
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <tcp_close_shutdown_fin+0xcc>)
 8003a30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8003a34:	492e      	ldr	r1, [pc, #184]	; (8003af0 <tcp_close_shutdown_fin+0xd0>)
 8003a36:	482f      	ldr	r0, [pc, #188]	; (8003af4 <tcp_close_shutdown_fin+0xd4>)
 8003a38:	f00b f8a2 	bl	800eb80 <iprintf>
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f00b f9a1 	bl	800ed84 <fflush>
 8003a42:	f00b f8e6 	bl	800ec12 <abort>

  switch (pcb->state) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7d1b      	ldrb	r3, [r3, #20]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d010      	beq.n	8003a70 <tcp_close_shutdown_fin+0x50>
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	d01b      	beq.n	8003a8a <tcp_close_shutdown_fin+0x6a>
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d126      	bne.n	8003aa4 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 f850 	bl	8007afc <tcp_send_fin>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8003a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11f      	bne.n	8003aa8 <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8003a6e:	e01b      	b.n	8003aa8 <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f004 f843 	bl	8007afc <tcp_send_fin>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d114      	bne.n	8003aac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2205      	movs	r2, #5
 8003a86:	751a      	strb	r2, [r3, #20]
      }
      break;
 8003a88:	e010      	b.n	8003aac <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f004 f836 	bl	8007afc <tcp_send_fin>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2209      	movs	r2, #9
 8003aa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8003aa2:	e005      	b.n	8003ab0 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e01c      	b.n	8003ae2 <tcp_close_shutdown_fin+0xc2>
      break;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <tcp_close_shutdown_fin+0x92>
      break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <tcp_close_shutdown_fin+0x92>
      break;
 8003ab0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f004 f96c 	bl	8007d98 <tcp_output>
 8003ac0:	e00d      	b.n	8003ade <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d108      	bne.n	8003ade <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8b5b      	ldrh	r3, [r3, #26]
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e001      	b.n	8003ae2 <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	08010794 	.word	0x08010794
 8003af0:	08010834 	.word	0x08010834
 8003af4:	080107c8 	.word	0x080107c8

08003af8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <tcp_close+0x22>
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <tcp_close+0x4c>)
 8003b08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <tcp_close+0x50>)
 8003b0e:	480f      	ldr	r0, [pc, #60]	; (8003b4c <tcp_close+0x54>)
 8003b10:	f7fd faac 	bl	800106c <lwip_win32_platform_diag>
 8003b14:	f06f 030f 	mvn.w	r3, #15
 8003b18:	e00f      	b.n	8003b3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7d1b      	ldrb	r3, [r3, #20]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d006      	beq.n	8003b30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8b5b      	ldrh	r3, [r3, #26]
 8003b26:	f043 0310 	orr.w	r3, r3, #16
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8003b30:	2101      	movs	r1, #1
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fe8c 	bl	8003850 <tcp_close_shutdown>
 8003b38:	4603      	mov	r3, r0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	08010794 	.word	0x08010794
 8003b48:	08010894 	.word	0x08010894
 8003b4c:	080107c8 	.word	0x080107c8

08003b50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	; 0x38
 8003b54:	af04      	add	r7, sp, #16
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d107      	bne.n	8003b70 <tcp_abandon+0x20>
 8003b60:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <tcp_abandon+0x164>)
 8003b62:	f240 223d 	movw	r2, #573	; 0x23d
 8003b66:	4954      	ldr	r1, [pc, #336]	; (8003cb8 <tcp_abandon+0x168>)
 8003b68:	4854      	ldr	r0, [pc, #336]	; (8003cbc <tcp_abandon+0x16c>)
 8003b6a:	f7fd fa7f 	bl	800106c <lwip_win32_platform_diag>
 8003b6e:	e09e      	b.n	8003cae <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7d1b      	ldrb	r3, [r3, #20]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10b      	bne.n	8003b90 <tcp_abandon+0x40>
 8003b78:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <tcp_abandon+0x164>)
 8003b7a:	f240 2241 	movw	r2, #577	; 0x241
 8003b7e:	4950      	ldr	r1, [pc, #320]	; (8003cc0 <tcp_abandon+0x170>)
 8003b80:	484e      	ldr	r0, [pc, #312]	; (8003cbc <tcp_abandon+0x16c>)
 8003b82:	f00a fffd 	bl	800eb80 <iprintf>
 8003b86:	2000      	movs	r0, #0
 8003b88:	f00b f8fc 	bl	800ed84 <fflush>
 8003b8c:	f00b f841 	bl	800ec12 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7d1b      	ldrb	r3, [r3, #20]
 8003b94:	2b0a      	cmp	r3, #10
 8003b96:	d107      	bne.n	8003ba8 <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	484a      	ldr	r0, [pc, #296]	; (8003cc4 <tcp_abandon+0x174>)
 8003b9c:	f001 f80e 	bl	8004bbc <tcp_pcb_remove>
    tcp_free(pcb);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fd89 	bl	80036b8 <tcp_free>
 8003ba6:	e082      	b.n	8003cae <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7d1b      	ldrb	r3, [r3, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d126      	bne.n	8003c20 <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8adb      	ldrh	r3, [r3, #22]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02e      	beq.n	8003c38 <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <tcp_abandon+0x178>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d105      	bne.n	8003bf0 <tcp_abandon+0xa0>
 8003be4:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <tcp_abandon+0x178>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4a37      	ldr	r2, [pc, #220]	; (8003cc8 <tcp_abandon+0x178>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e013      	b.n	8003c18 <tcp_abandon+0xc8>
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <tcp_abandon+0x178>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e00c      	b.n	8003c12 <tcp_abandon+0xc2>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d104      	bne.n	8003c0c <tcp_abandon+0xbc>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	e005      	b.n	8003c18 <tcp_abandon+0xc8>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <tcp_abandon+0xa8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	e00b      	b.n	8003c38 <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8adb      	ldrh	r3, [r3, #22]
 8003c28:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4827      	ldr	r0, [pc, #156]	; (8003ccc <tcp_abandon+0x17c>)
 8003c2e:	f000 ffc5 	bl	8004bbc <tcp_pcb_remove>
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <tcp_abandon+0x180>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd5d 	bl	8004704 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fd54 	bl	8004704 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fd4b 	bl	8004704 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	8b12      	ldrh	r2, [r2, #24]
 8003c7e:	9202      	str	r2, [sp, #8]
 8003c80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c82:	9201      	str	r2, [sp, #4]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	460b      	mov	r3, r1
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f004 ff57 	bl	8008b40 <tcp_rst>
    }
    last_state = pcb->state;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7d1b      	ldrb	r3, [r3, #20]
 8003c96:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fd0d 	bl	80036b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <tcp_abandon+0x15e>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f06f 010c 	mvn.w	r1, #12
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	4798      	blx	r3
  }
}
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	08010794 	.word	0x08010794
 8003cb8:	080108c8 	.word	0x080108c8
 8003cbc:	080107c8 	.word	0x080107c8
 8003cc0:	080108e4 	.word	0x080108e4
 8003cc4:	200010c4 	.word	0x200010c4
 8003cc8:	200010c0 	.word	0x200010c0
 8003ccc:	200010b4 	.word	0x200010b4
 8003cd0:	200010b0 	.word	0x200010b0

08003cd4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8003cdc:	2101      	movs	r1, #1
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff ff36 	bl	8003b50 <tcp_abandon>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <tcp_update_rcv_ann_wnd+0x26>
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <tcp_update_rcv_ann_wnd+0xbc>)
 8003cfc:	f240 32aa 	movw	r2, #938	; 0x3aa
 8003d00:	492a      	ldr	r1, [pc, #168]	; (8003dac <tcp_update_rcv_ann_wnd+0xc0>)
 8003d02:	482b      	ldr	r0, [pc, #172]	; (8003db0 <tcp_update_rcv_ann_wnd+0xc4>)
 8003d04:	f00a ff3c 	bl	800eb80 <iprintf>
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f00b f83b 	bl	800ed84 <fflush>
 8003d0e:	f00a ff80 	bl	800ec12 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003d1a:	4413      	add	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8003d26:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8003d2a:	d802      	bhi.n	8003d32 <tcp_update_rcv_ann_wnd+0x46>
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8003d30:	e001      	b.n	8003d36 <tcp_update_rcv_ann_wnd+0x4a>
 8003d32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003d36:	4413      	add	r3, r2
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db08      	blt.n	8003d52 <tcp_update_rcv_ann_wnd+0x66>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	e025      	b.n	8003d9e <tcp_update_rcv_ann_wnd+0xb2>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da03      	bge.n	8003d68 <tcp_update_rcv_ann_wnd+0x7c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d66:	e019      	b.n	8003d9c <tcp_update_rcv_ann_wnd+0xb0>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d30b      	bcc.n	8003d94 <tcp_update_rcv_ann_wnd+0xa8>
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <tcp_update_rcv_ann_wnd+0xbc>)
 8003d7e:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003d82:	490c      	ldr	r1, [pc, #48]	; (8003db4 <tcp_update_rcv_ann_wnd+0xc8>)
 8003d84:	480a      	ldr	r0, [pc, #40]	; (8003db0 <tcp_update_rcv_ann_wnd+0xc4>)
 8003d86:	f00a fefb 	bl	800eb80 <iprintf>
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f00a fffa 	bl	800ed84 <fflush>
 8003d90:	f00a ff3f 	bl	800ec12 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8003d9c:	2300      	movs	r3, #0
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	08010794 	.word	0x08010794
 8003dac:	080109e0 	.word	0x080109e0
 8003db0:	080107c8 	.word	0x080107c8
 8003db4:	08010a04 	.word	0x08010a04

08003db8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <tcp_recved+0x22>
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <tcp_recved+0x98>)
 8003dcc:	f240 32d3 	movw	r2, #979	; 0x3d3
 8003dd0:	4920      	ldr	r1, [pc, #128]	; (8003e54 <tcp_recved+0x9c>)
 8003dd2:	4821      	ldr	r0, [pc, #132]	; (8003e58 <tcp_recved+0xa0>)
 8003dd4:	f7fd f94a 	bl	800106c <lwip_win32_platform_diag>
 8003dd8:	e036      	b.n	8003e48 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	7d1b      	ldrb	r3, [r3, #20]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10b      	bne.n	8003dfa <tcp_recved+0x42>
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <tcp_recved+0x98>)
 8003de4:	f240 32d7 	movw	r2, #983	; 0x3d7
 8003de8:	491c      	ldr	r1, [pc, #112]	; (8003e5c <tcp_recved+0xa4>)
 8003dea:	481b      	ldr	r0, [pc, #108]	; (8003e58 <tcp_recved+0xa0>)
 8003dec:	f00a fec8 	bl	800eb80 <iprintf>
 8003df0:	2000      	movs	r0, #0
 8003df2:	f00a ffc7 	bl	800ed84 <fflush>
 8003df6:	f00a ff0c 	bl	800ec12 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	4413      	add	r3, r2
 8003e02:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e0a:	d804      	bhi.n	8003e16 <tcp_recved+0x5e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	89fa      	ldrh	r2, [r7, #14]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d204      	bcs.n	8003e20 <tcp_recved+0x68>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e1e:	e002      	b.n	8003e26 <tcp_recved+0x6e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	89fa      	ldrh	r2, [r7, #14]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff60 	bl	8003cec <tcp_update_rcv_ann_wnd>
 8003e2c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2bc7      	cmp	r3, #199	; 0xc7
 8003e32:	d909      	bls.n	8003e48 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8b5b      	ldrh	r3, [r3, #26]
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f003 ffa8 	bl	8007d98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	08010794 	.word	0x08010794
 8003e54:	08010a20 	.word	0x08010a20
 8003e58:	080107c8 	.word	0x080107c8
 8003e5c:	08010a38 	.word	0x08010a38

08003e60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b090      	sub	sp, #64	; 0x40
 8003e64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8003e6c:	4ba1      	ldr	r3, [pc, #644]	; (80040f4 <tcp_slowtmr+0x294>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4aa0      	ldr	r2, [pc, #640]	; (80040f4 <tcp_slowtmr+0x294>)
 8003e74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8003e76:	4ba0      	ldr	r3, [pc, #640]	; (80040f8 <tcp_slowtmr+0x298>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b9e      	ldr	r3, [pc, #632]	; (80040f8 <tcp_slowtmr+0x298>)
 8003e80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8003e86:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <tcp_slowtmr+0x29c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8003e8c:	e2c3      	b.n	8004416 <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	7d1b      	ldrb	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <tcp_slowtmr+0x4e>
 8003e96:	4b9a      	ldr	r3, [pc, #616]	; (8004100 <tcp_slowtmr+0x2a0>)
 8003e98:	f240 42c2 	movw	r2, #1218	; 0x4c2
 8003e9c:	4999      	ldr	r1, [pc, #612]	; (8004104 <tcp_slowtmr+0x2a4>)
 8003e9e:	489a      	ldr	r0, [pc, #616]	; (8004108 <tcp_slowtmr+0x2a8>)
 8003ea0:	f00a fe6e 	bl	800eb80 <iprintf>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f00a ff6d 	bl	800ed84 <fflush>
 8003eaa:	f00a feb2 	bl	800ec12 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	7d1b      	ldrb	r3, [r3, #20]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10b      	bne.n	8003ece <tcp_slowtmr+0x6e>
 8003eb6:	4b92      	ldr	r3, [pc, #584]	; (8004100 <tcp_slowtmr+0x2a0>)
 8003eb8:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8003ebc:	4993      	ldr	r1, [pc, #588]	; (800410c <tcp_slowtmr+0x2ac>)
 8003ebe:	4892      	ldr	r0, [pc, #584]	; (8004108 <tcp_slowtmr+0x2a8>)
 8003ec0:	f00a fe5e 	bl	800eb80 <iprintf>
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f00a ff5d 	bl	800ed84 <fflush>
 8003eca:	f00a fea2 	bl	800ec12 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	7d1b      	ldrb	r3, [r3, #20]
 8003ed2:	2b0a      	cmp	r3, #10
 8003ed4:	d10b      	bne.n	8003eee <tcp_slowtmr+0x8e>
 8003ed6:	4b8a      	ldr	r3, [pc, #552]	; (8004100 <tcp_slowtmr+0x2a0>)
 8003ed8:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003edc:	498c      	ldr	r1, [pc, #560]	; (8004110 <tcp_slowtmr+0x2b0>)
 8003ede:	488a      	ldr	r0, [pc, #552]	; (8004108 <tcp_slowtmr+0x2a8>)
 8003ee0:	f00a fe4e 	bl	800eb80 <iprintf>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f00a ff4d 	bl	800ed84 <fflush>
 8003eea:	f00a fe92 	bl	800ec12 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	7f9a      	ldrb	r2, [r3, #30]
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <tcp_slowtmr+0x298>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d105      	bne.n	8003f06 <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8003f04:	e287      	b.n	8004416 <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 8003f06:	4b7c      	ldr	r3, [pc, #496]	; (80040f8 <tcp_slowtmr+0x298>)
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	7d1b      	ldrb	r3, [r3, #20]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d10a      	bne.n	8003f38 <tcp_slowtmr+0xd8>
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d905      	bls.n	8003f38 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	3301      	adds	r3, #1
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8003f36:	e129      	b.n	800418c <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f3e:	2b0b      	cmp	r3, #11
 8003f40:	d905      	bls.n	8003f4e <tcp_slowtmr+0xee>
      ++pcb_remove;
 8003f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f46:	3301      	adds	r3, #1
 8003f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f4c:	e11e      	b.n	800418c <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d07f      	beq.n	8004058 <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <tcp_slowtmr+0x118>
 8003f60:	4b67      	ldr	r3, [pc, #412]	; (8004100 <tcp_slowtmr+0x2a0>)
 8003f62:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8003f66:	496b      	ldr	r1, [pc, #428]	; (8004114 <tcp_slowtmr+0x2b4>)
 8003f68:	4867      	ldr	r0, [pc, #412]	; (8004108 <tcp_slowtmr+0x2a8>)
 8003f6a:	f00a fe09 	bl	800eb80 <iprintf>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f00a ff08 	bl	800ed84 <fflush>
 8003f74:	f00a fe4d 	bl	800ec12 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <tcp_slowtmr+0x138>
 8003f80:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <tcp_slowtmr+0x2a0>)
 8003f82:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003f86:	4964      	ldr	r1, [pc, #400]	; (8004118 <tcp_slowtmr+0x2b8>)
 8003f88:	485f      	ldr	r0, [pc, #380]	; (8004108 <tcp_slowtmr+0x2a8>)
 8003f8a:	f00a fdf9 	bl	800eb80 <iprintf>
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f00a fef8 	bl	800ed84 <fflush>
 8003f94:	f00a fe3d 	bl	800ec12 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003f9e:	2b0b      	cmp	r3, #11
 8003fa0:	d905      	bls.n	8003fae <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 8003fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fac:	e0ee      	b.n	800418c <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	4a59      	ldr	r2, [pc, #356]	; (800411c <tcp_slowtmr+0x2bc>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003fc2:	7ffa      	ldrb	r2, [r7, #31]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d907      	bls.n	8003fd8 <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003fde:	7ffa      	ldrb	r2, [r7, #31]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	f200 80d3 	bhi.w	800418c <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8003ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ff6:	f004 fe9b 	bl	8008d30 <tcp_zero_window_probe>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d014      	beq.n	800402a <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	e011      	b.n	800402a <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800400c:	4619      	mov	r1, r3
 800400e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004010:	f003 fc10 	bl	8007834 <tcp_split_unsent_seg>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 800401a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800401c:	f003 febc 	bl	8007d98 <tcp_output>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80ad 	beq.w	800418c <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8004040:	2b06      	cmp	r3, #6
 8004042:	f200 80a3 	bhi.w	800418c <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800404c:	3301      	adds	r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004056:	e099      	b.n	800418c <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800405e:	2b00      	cmp	r3, #0
 8004060:	db0f      	blt.n	8004082 <tcp_slowtmr+0x222>
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004068:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800406c:	4293      	cmp	r3, r2
 800406e:	d008      	beq.n	8004082 <tcp_slowtmr+0x222>
          ++pcb->rtime;
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004076:	b29b      	uxth	r3, r3
 8004078:	3301      	adds	r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	b21a      	sxth	r2, r3
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800408e:	429a      	cmp	r2, r3
 8004090:	db7c      	blt.n	800418c <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8004092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004094:	f004 f9b6 	bl	8008404 <tcp_rexmit_rto_prepare>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <tcp_slowtmr+0x24e>
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d172      	bne.n	800418c <tcp_slowtmr+0x32c>
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d06e      	beq.n	800418c <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	7d1b      	ldrb	r3, [r3, #20]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d03b      	beq.n	800412e <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	bf28      	it	cs
 80040c0:	230c      	movcs	r3, #12
 80040c2:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80040ca:	10db      	asrs	r3, r3, #3
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80040d6:	4413      	add	r3, r2
 80040d8:	7fba      	ldrb	r2, [r7, #30]
 80040da:	4911      	ldr	r1, [pc, #68]	; (8004120 <tcp_slowtmr+0x2c0>)
 80040dc:	5c8a      	ldrb	r2, [r1, r2]
 80040de:	4093      	lsls	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dc1b      	bgt.n	8004124 <tcp_slowtmr+0x2c4>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	b21a      	sxth	r2, r3
 80040f0:	e01a      	b.n	8004128 <tcp_slowtmr+0x2c8>
 80040f2:	bf00      	nop
 80040f4:	200010b8 	.word	0x200010b8
 80040f8:	20000571 	.word	0x20000571
 80040fc:	200010b4 	.word	0x200010b4
 8004100:	08010794 	.word	0x08010794
 8004104:	08010ac8 	.word	0x08010ac8
 8004108:	080107c8 	.word	0x080107c8
 800410c:	08010af4 	.word	0x08010af4
 8004110:	08010b20 	.word	0x08010b20
 8004114:	08010b4c 	.word	0x08010b4c
 8004118:	08010b80 	.word	0x08010b80
 800411c:	080120dc 	.word	0x080120dc
 8004120:	080120cc 	.word	0x080120cc
 8004124:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	2200      	movs	r2, #0
 8004132:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004140:	4293      	cmp	r3, r2
 8004142:	bf28      	it	cs
 8004144:	4613      	movcs	r3, r2
 8004146:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 8004148:	8afb      	ldrh	r3, [r7, #22]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	b29b      	uxth	r3, r3
 8004162:	429a      	cmp	r2, r3
 8004164:	d206      	bcs.n	8004174 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	2200      	movs	r2, #0
 8004182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8004186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004188:	f004 f9ba 	bl	8008500 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	7d1b      	ldrb	r3, [r3, #20]
 8004190:	2b06      	cmp	r3, #6
 8004192:	d111      	bne.n	80041b8 <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	8b5b      	ldrh	r3, [r3, #26]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80041a0:	4ba2      	ldr	r3, [pc, #648]	; (800442c <tcp_slowtmr+0x5cc>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b28      	cmp	r3, #40	; 0x28
 80041ac:	d904      	bls.n	80041b8 <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80041ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041b2:	3301      	adds	r3, #1
 80041b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	7a5b      	ldrb	r3, [r3, #9]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d04c      	beq.n	800425e <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d003      	beq.n	80041d4 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80041d0:	2b07      	cmp	r3, #7
 80041d2:	d144      	bne.n	800425e <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80041d4:	4b95      	ldr	r3, [pc, #596]	; (800442c <tcp_slowtmr+0x5cc>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80041e8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80041ec:	4990      	ldr	r1, [pc, #576]	; (8004430 <tcp_slowtmr+0x5d0>)
 80041ee:	fba1 1303 	umull	r1, r3, r1, r3
 80041f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d90a      	bls.n	800420e <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80041f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041fc:	3301      	adds	r3, #1
 80041fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8004202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004206:	3301      	adds	r3, #1
 8004208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800420c:	e027      	b.n	800425e <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800420e:	4b87      	ldr	r3, [pc, #540]	; (800442c <tcp_slowtmr+0x5cc>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004224:	4618      	mov	r0, r3
 8004226:	4b83      	ldr	r3, [pc, #524]	; (8004434 <tcp_slowtmr+0x5d4>)
 8004228:	fb03 f300 	mul.w	r3, r3, r0
 800422c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800422e:	4980      	ldr	r1, [pc, #512]	; (8004430 <tcp_slowtmr+0x5d0>)
 8004230:	fba1 1303 	umull	r1, r3, r1, r3
 8004234:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004236:	429a      	cmp	r2, r3
 8004238:	d911      	bls.n	800425e <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 800423a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800423c:	f004 fd32 	bl	8008ca4 <tcp_keepalive>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8004246:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800424a:	2b00      	cmp	r3, #0
 800424c:	d107      	bne.n	800425e <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8004254:	3301      	adds	r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8004266:	4b71      	ldr	r3, [pc, #452]	; (800442c <tcp_slowtmr+0x5cc>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004276:	4619      	mov	r1, r3
 8004278:	460b      	mov	r3, r1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	440b      	add	r3, r1
 800427e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8004284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004286:	f000 fe23 	bl	8004ed0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	7d1b      	ldrb	r3, [r3, #20]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d10b      	bne.n	80042aa <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004292:	4b66      	ldr	r3, [pc, #408]	; (800442c <tcp_slowtmr+0x5cc>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b28      	cmp	r3, #40	; 0x28
 800429e:	d904      	bls.n	80042aa <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80042a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a4:	3301      	adds	r3, #1
 80042a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	7d1b      	ldrb	r3, [r3, #20]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d10b      	bne.n	80042ca <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80042b2:	4b5e      	ldr	r3, [pc, #376]	; (800442c <tcp_slowtmr+0x5cc>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2bf0      	cmp	r3, #240	; 0xf0
 80042be:	d904      	bls.n	80042ca <tcp_slowtmr+0x46a>
        ++pcb_remove;
 80042c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c4:	3301      	adds	r3, #1
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80042ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d06a      	beq.n	80043a8 <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80042da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042dc:	f000 fc1e 	bl	8004b1c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80042e6:	4b54      	ldr	r3, [pc, #336]	; (8004438 <tcp_slowtmr+0x5d8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10b      	bne.n	8004308 <tcp_slowtmr+0x4a8>
 80042f0:	4b52      	ldr	r3, [pc, #328]	; (800443c <tcp_slowtmr+0x5dc>)
 80042f2:	f240 5271 	movw	r2, #1393	; 0x571
 80042f6:	4952      	ldr	r1, [pc, #328]	; (8004440 <tcp_slowtmr+0x5e0>)
 80042f8:	4852      	ldr	r0, [pc, #328]	; (8004444 <tcp_slowtmr+0x5e4>)
 80042fa:	f00a fc41 	bl	800eb80 <iprintf>
 80042fe:	2000      	movs	r0, #0
 8004300:	f00a fd40 	bl	800ed84 <fflush>
 8004304:	f00a fc85 	bl	800ec12 <abort>
        prev->next = pcb->next;
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e014      	b.n	800433c <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8004312:	4b49      	ldr	r3, [pc, #292]	; (8004438 <tcp_slowtmr+0x5d8>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d00b      	beq.n	8004334 <tcp_slowtmr+0x4d4>
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <tcp_slowtmr+0x5dc>)
 800431e:	f240 5275 	movw	r2, #1397	; 0x575
 8004322:	4949      	ldr	r1, [pc, #292]	; (8004448 <tcp_slowtmr+0x5e8>)
 8004324:	4847      	ldr	r0, [pc, #284]	; (8004444 <tcp_slowtmr+0x5e4>)
 8004326:	f00a fc2b 	bl	800eb80 <iprintf>
 800432a:	2000      	movs	r0, #0
 800432c:	f00a fd2a 	bl	800ed84 <fflush>
 8004330:	f00a fc6f 	bl	800ec12 <abort>
        tcp_active_pcbs = pcb->next;
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <tcp_slowtmr+0x5d8>)
 800433a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800433c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800434c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	3304      	adds	r3, #4
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	8ad2      	ldrh	r2, [r2, #22]
 8004356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004358:	8b09      	ldrh	r1, [r1, #24]
 800435a:	9102      	str	r1, [sp, #8]
 800435c:	9201      	str	r2, [sp, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462b      	mov	r3, r5
 8004362:	4622      	mov	r2, r4
 8004364:	4601      	mov	r1, r0
 8004366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004368:	f004 fbea 	bl	8008b40 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	7d1b      	ldrb	r3, [r3, #20]
 8004376:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff f998 	bl	80036b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8004388:	4b30      	ldr	r3, [pc, #192]	; (800444c <tcp_slowtmr+0x5ec>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <tcp_slowtmr+0x53e>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f06f 010c 	mvn.w	r1, #12
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <tcp_slowtmr+0x5ec>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d037      	beq.n	8004416 <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 80043a6:	e56c      	b.n	8003e82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	7f1b      	ldrb	r3, [r3, #28]
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	7f1a      	ldrb	r2, [r3, #28]
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	7f5b      	ldrb	r3, [r3, #29]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d325      	bcc.n	8004416 <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <tcp_slowtmr+0x5ec>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <tcp_slowtmr+0x598>
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e8:	6912      	ldr	r2, [r2, #16]
 80043ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043f6:	e002      	b.n	80043fe <tcp_slowtmr+0x59e>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <tcp_slowtmr+0x5ec>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d000      	beq.n	8004408 <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8004406:	e53c      	b.n	8003e82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8004408:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8004410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004412:	f003 fcc1 	bl	8007d98 <tcp_output>
  while (pcb != NULL) {
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f ad38 	bne.w	8003e8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <tcp_slowtmr+0x5f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004428:	e076      	b.n	8004518 <tcp_slowtmr+0x6b8>
 800442a:	bf00      	nop
 800442c:	200010b8 	.word	0x200010b8
 8004430:	10624dd3 	.word	0x10624dd3
 8004434:	000124f8 	.word	0x000124f8
 8004438:	200010b4 	.word	0x200010b4
 800443c:	08010794 	.word	0x08010794
 8004440:	08010bb8 	.word	0x08010bb8
 8004444:	080107c8 	.word	0x080107c8
 8004448:	08010be4 	.word	0x08010be4
 800444c:	200010b0 	.word	0x200010b0
 8004450:	200010c4 	.word	0x200010c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	7d1b      	ldrb	r3, [r3, #20]
 8004458:	2b0a      	cmp	r3, #10
 800445a:	d00b      	beq.n	8004474 <tcp_slowtmr+0x614>
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <tcp_slowtmr+0x6c8>)
 800445e:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8004462:	4932      	ldr	r1, [pc, #200]	; (800452c <tcp_slowtmr+0x6cc>)
 8004464:	4832      	ldr	r0, [pc, #200]	; (8004530 <tcp_slowtmr+0x6d0>)
 8004466:	f00a fb8b 	bl	800eb80 <iprintf>
 800446a:	2000      	movs	r0, #0
 800446c:	f00a fc8a 	bl	800ed84 <fflush>
 8004470:	f00a fbcf 	bl	800ec12 <abort>
    pcb_remove = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <tcp_slowtmr+0x6d4>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2bf0      	cmp	r3, #240	; 0xf0
 8004486:	d904      	bls.n	8004492 <tcp_slowtmr+0x632>
      ++pcb_remove;
 8004488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800448c:	3301      	adds	r3, #1
 800448e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004496:	2b00      	cmp	r3, #0
 8004498:	d039      	beq.n	800450e <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800449a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800449c:	f000 fb3e 	bl	8004b1c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d015      	beq.n	80044d2 <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <tcp_slowtmr+0x6d8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10b      	bne.n	80044c8 <tcp_slowtmr+0x668>
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <tcp_slowtmr+0x6c8>)
 80044b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80044b6:	4921      	ldr	r1, [pc, #132]	; (800453c <tcp_slowtmr+0x6dc>)
 80044b8:	481d      	ldr	r0, [pc, #116]	; (8004530 <tcp_slowtmr+0x6d0>)
 80044ba:	f00a fb61 	bl	800eb80 <iprintf>
 80044be:	2000      	movs	r0, #0
 80044c0:	f00a fc60 	bl	800ed84 <fflush>
 80044c4:	f00a fba5 	bl	800ec12 <abort>
        prev->next = pcb->next;
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	e014      	b.n	80044fc <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <tcp_slowtmr+0x6d8>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d00b      	beq.n	80044f4 <tcp_slowtmr+0x694>
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <tcp_slowtmr+0x6c8>)
 80044de:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80044e2:	4917      	ldr	r1, [pc, #92]	; (8004540 <tcp_slowtmr+0x6e0>)
 80044e4:	4812      	ldr	r0, [pc, #72]	; (8004530 <tcp_slowtmr+0x6d0>)
 80044e6:	f00a fb4b 	bl	800eb80 <iprintf>
 80044ea:	2000      	movs	r0, #0
 80044ec:	f00a fc4a 	bl	800ed84 <fflush>
 80044f0:	f00a fb8f 	bl	800ec12 <abort>
        tcp_tw_pcbs = pcb->next;
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <tcp_slowtmr+0x6d8>)
 80044fa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8004506:	6838      	ldr	r0, [r7, #0]
 8004508:	f7ff f8d6 	bl	80036b8 <tcp_free>
 800450c:	e004      	b.n	8004518 <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d19a      	bne.n	8004454 <tcp_slowtmr+0x5f4>
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3730      	adds	r7, #48	; 0x30
 8004522:	46bd      	mov	sp, r7
 8004524:	bdb0      	pop	{r4, r5, r7, pc}
 8004526:	bf00      	nop
 8004528:	08010794 	.word	0x08010794
 800452c:	08010c10 	.word	0x08010c10
 8004530:	080107c8 	.word	0x080107c8
 8004534:	200010b8 	.word	0x200010b8
 8004538:	200010c4 	.word	0x200010c4
 800453c:	08010c40 	.word	0x08010c40
 8004540:	08010c68 	.word	0x08010c68

08004544 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <tcp_fasttmr+0xbc>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <tcp_fasttmr+0xbc>)
 8004554:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <tcp_fasttmr+0xc0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800455c:	e048      	b.n	80045f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7f9a      	ldrb	r2, [r3, #30]
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <tcp_fasttmr+0xbc>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d03f      	beq.n	80045ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800456a:	4b25      	ldr	r3, [pc, #148]	; (8004600 <tcp_fasttmr+0xbc>)
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8b5b      	ldrh	r3, [r3, #26]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d010      	beq.n	80045a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8b5b      	ldrh	r3, [r3, #26]
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f003 fc03 	bl	8007d98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8b5b      	ldrh	r3, [r3, #26]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8b5b      	ldrh	r3, [r3, #26]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8b5b      	ldrh	r3, [r3, #26]
 80045b0:	f023 0308 	bic.w	r3, r3, #8
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fa30 	bl	8003a20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <tcp_fasttmr+0xc4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f819 	bl	800460c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <tcp_fasttmr+0xc4>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d000      	beq.n	80045e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80045e2:	e7b8      	b.n	8004556 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e002      	b.n	80045f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1b3      	bne.n	800455e <tcp_fasttmr+0x1a>
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000571 	.word	0x20000571
 8004604:	200010b4 	.word	0x200010b4
 8004608:	200010b0 	.word	0x200010b0

0800460c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <tcp_process_refused_data+0x22>
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <tcp_process_refused_data+0xec>)
 800461c:	f240 620d 	movw	r2, #1549	; 0x60d
 8004620:	4936      	ldr	r1, [pc, #216]	; (80046fc <tcp_process_refused_data+0xf0>)
 8004622:	4837      	ldr	r0, [pc, #220]	; (8004700 <tcp_process_refused_data+0xf4>)
 8004624:	f7fc fd22 	bl	800106c <lwip_win32_platform_diag>
 8004628:	f06f 030f 	mvn.w	r3, #15
 800462c:	e060      	b.n	80046f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004632:	7b5b      	ldrb	r3, [r3, #13]
 8004634:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <tcp_process_refused_data+0x58>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6918      	ldr	r0, [r3, #16]
 8004656:	2300      	movs	r3, #0
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	47a0      	blx	r4
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e007      	b.n	8004674 <tcp_process_refused_data+0x68>
 8004664:	2300      	movs	r3, #0
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	2000      	movs	r0, #0
 800466c:	f000 f8a8 	bl	80047c0 <tcp_recv_null>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d12a      	bne.n	80046d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800467c:	7bbb      	ldrb	r3, [r7, #14]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d033      	beq.n	80046ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800468e:	d005      	beq.n	800469c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3301      	adds	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <tcp_process_refused_data+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6918      	ldr	r0, [r3, #16]
 80046b0:	2300      	movs	r3, #0
 80046b2:	2200      	movs	r2, #0
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	47a0      	blx	r4
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e001      	b.n	80046c2 <tcp_process_refused_data+0xb6>
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	f113 0f0d 	cmn.w	r3, #13
 80046ca:	d110      	bne.n	80046ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80046cc:	f06f 030c 	mvn.w	r3, #12
 80046d0:	e00e      	b.n	80046f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80046d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d6:	f113 0f0d 	cmn.w	r3, #13
 80046da:	d102      	bne.n	80046e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80046dc:	f06f 030c 	mvn.w	r3, #12
 80046e0:	e006      	b.n	80046f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80046e8:	f06f 0304 	mvn.w	r3, #4
 80046ec:	e000      	b.n	80046f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}
 80046f8:	08010794 	.word	0x08010794
 80046fc:	08010c90 	.word	0x08010c90
 8004700:	080107c8 	.word	0x080107c8

08004704 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800470c:	e007      	b.n	800471e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f809 	bl	800472c <tcp_seg_free>
    seg = next;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f4      	bne.n	800470e <tcp_segs_free+0xa>
  }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe fc7c 	bl	8003044 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	2002      	movs	r0, #2
 8004750:	f7fd ff96 	bl	8002680 <memp_free>
  }
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <tcp_seg_copy+0x26>
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <tcp_seg_copy+0x58>)
 800476c:	f240 6286 	movw	r2, #1670	; 0x686
 8004770:	4911      	ldr	r1, [pc, #68]	; (80047b8 <tcp_seg_copy+0x5c>)
 8004772:	4812      	ldr	r0, [pc, #72]	; (80047bc <tcp_seg_copy+0x60>)
 8004774:	f00a fa04 	bl	800eb80 <iprintf>
 8004778:	2000      	movs	r0, #0
 800477a:	f00a fb03 	bl	800ed84 <fflush>
 800477e:	f00a fa48 	bl	800ec12 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004782:	2002      	movs	r0, #2
 8004784:	f7fd ff3c 	bl	8002600 <memp_malloc>
 8004788:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <tcp_seg_copy+0x38>
    return NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	e00a      	b.n	80047aa <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004794:	2214      	movs	r2, #20
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f00a fbf3 	bl	800ef84 <memcpy>
  pbuf_ref(cseg->p);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fce8 	bl	8003178 <pbuf_ref>
  return cseg;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	08010794 	.word	0x08010794
 80047b8:	08010cd4 	.word	0x08010cd4
 80047bc:	080107c8 	.word	0x080107c8

080047c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <tcp_recv_null+0x28>
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <tcp_recv_null+0x60>)
 80047d6:	f240 629c 	movw	r2, #1692	; 0x69c
 80047da:	4912      	ldr	r1, [pc, #72]	; (8004824 <tcp_recv_null+0x64>)
 80047dc:	4812      	ldr	r0, [pc, #72]	; (8004828 <tcp_recv_null+0x68>)
 80047de:	f7fc fc45 	bl	800106c <lwip_win32_platform_diag>
 80047e2:	f06f 030f 	mvn.w	r3, #15
 80047e6:	e016      	b.n	8004816 <tcp_recv_null+0x56>

  if (p != NULL) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	891b      	ldrh	r3, [r3, #8]
 80047f2:	4619      	mov	r1, r3
 80047f4:	68b8      	ldr	r0, [r7, #8]
 80047f6:	f7ff fadf 	bl	8003db8 <tcp_recved>
    pbuf_free(p);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fe fc22 	bl	8003044 <pbuf_free>
 8004800:	e008      	b.n	8004814 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8004802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	f7ff f974 	bl	8003af8 <tcp_close>
 8004810:	4603      	mov	r3, r0
 8004812:	e000      	b.n	8004816 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08010794 	.word	0x08010794
 8004824:	08010cf0 	.word	0x08010cf0
 8004828:	080107c8 	.word	0x080107c8

0800482c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db01      	blt.n	8004842 <tcp_kill_prio+0x16>
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	e000      	b.n	8004844 <tcp_kill_prio+0x18>
 8004842:	237f      	movs	r3, #127	; 0x7f
 8004844:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d034      	beq.n	80048b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	3b01      	subs	r3, #1
 8004850:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <tcp_kill_prio+0x94>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e01f      	b.n	80048a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	7d5b      	ldrb	r3, [r3, #21]
 8004866:	7afa      	ldrb	r2, [r7, #11]
 8004868:	429a      	cmp	r2, r3
 800486a:	d80c      	bhi.n	8004886 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8004870:	7afa      	ldrb	r2, [r7, #11]
 8004872:	429a      	cmp	r2, r3
 8004874:	d112      	bne.n	800489c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <tcp_kill_prio+0x98>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	429a      	cmp	r2, r3
 8004884:	d30a      	bcc.n	800489c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <tcp_kill_prio+0x98>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	7d5b      	ldrb	r3, [r3, #21]
 800489a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1dc      	bne.n	8004862 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80048ae:	6938      	ldr	r0, [r7, #16]
 80048b0:	f7ff fa10 	bl	8003cd4 <tcp_abort>
 80048b4:	e000      	b.n	80048b8 <tcp_kill_prio+0x8c>
    return;
 80048b6:	bf00      	nop
  }
}
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	200010b4 	.word	0x200010b4
 80048c4:	200010b8 	.word	0x200010b8

080048c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d00e      	beq.n	80048f6 <tcp_kill_state+0x2e>
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b09      	cmp	r3, #9
 80048dc:	d00b      	beq.n	80048f6 <tcp_kill_state+0x2e>
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <tcp_kill_state+0x8c>)
 80048e0:	f240 62e1 	movw	r2, #1761	; 0x6e1
 80048e4:	491c      	ldr	r1, [pc, #112]	; (8004958 <tcp_kill_state+0x90>)
 80048e6:	481d      	ldr	r0, [pc, #116]	; (800495c <tcp_kill_state+0x94>)
 80048e8:	f00a f94a 	bl	800eb80 <iprintf>
 80048ec:	2000      	movs	r0, #0
 80048ee:	f00a fa49 	bl	800ed84 <fflush>
 80048f2:	f00a f98e 	bl	800ec12 <abort>

  inactivity = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80048fe:	4b18      	ldr	r3, [pc, #96]	; (8004960 <tcp_kill_state+0x98>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e017      	b.n	8004936 <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	7d1b      	ldrb	r3, [r3, #20]
 800490a:	79fa      	ldrb	r2, [r7, #7]
 800490c:	429a      	cmp	r2, r3
 800490e:	d10f      	bne.n	8004930 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <tcp_kill_state+0x9c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	1ad2      	subs	r2, r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d307      	bcc.n	8004930 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <tcp_kill_state+0x9c>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e4      	bne.n	8004906 <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8004942:	2100      	movs	r1, #0
 8004944:	6938      	ldr	r0, [r7, #16]
 8004946:	f7ff f903 	bl	8003b50 <tcp_abandon>
  }
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	08010794 	.word	0x08010794
 8004958:	08010d0c 	.word	0x08010d0c
 800495c:	080107c8 	.word	0x080107c8
 8004960:	200010b4 	.word	0x200010b4
 8004964:	200010b8 	.word	0x200010b8

08004968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <tcp_kill_timewait+0x58>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e012      	b.n	80049a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <tcp_kill_timewait+0x5c>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d307      	bcc.n	800499e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <tcp_kill_timewait+0x5c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e9      	bne.n	800497e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80049b0:	68b8      	ldr	r0, [r7, #8]
 80049b2:	f7ff f98f 	bl	8003cd4 <tcp_abort>
  }
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200010c4 	.word	0x200010c4
 80049c4:	200010b8 	.word	0x200010b8

080049c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <tcp_handle_closepend+0x48>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80049d4:	e014      	b.n	8004a00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8b5b      	ldrh	r3, [r3, #26]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8b5b      	ldrh	r3, [r3, #26]
 80049ec:	f023 0308 	bic.w	r3, r3, #8
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff f812 	bl	8003a20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e7      	bne.n	80049d6 <tcp_handle_closepend+0xe>
  }
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200010b4 	.word	0x200010b4

08004a14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fd fdee 	bl	8002600 <memp_malloc>
 8004a24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d126      	bne.n	8004a7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8004a2c:	f7ff ffcc 	bl	80049c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8004a30:	f7ff ff9a 	bl	8004968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004a34:	2000      	movs	r0, #0
 8004a36:	f7fd fde3 	bl	8002600 <memp_malloc>
 8004a3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11b      	bne.n	8004a7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8004a42:	2009      	movs	r0, #9
 8004a44:	f7ff ff40 	bl	80048c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fd fdd9 	bl	8002600 <memp_malloc>
 8004a4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d111      	bne.n	8004a7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8004a56:	2008      	movs	r0, #8
 8004a58:	f7ff ff36 	bl	80048c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fd fdcf 	bl	8002600 <memp_malloc>
 8004a62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d107      	bne.n	8004a7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fedd 	bl	800482c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004a72:	2000      	movs	r0, #0
 8004a74:	f7fd fdc4 	bl	8002600 <memp_malloc>
 8004a78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03f      	beq.n	8004b00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8004a80:	229c      	movs	r2, #156	; 0x9c
 8004a82:	2100      	movs	r1, #0
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f00a faa2 	bl	800efce <memset>
    pcb->prio = prio;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	79fa      	ldrb	r2, [r7, #7]
 8004a8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8004a96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	22ff      	movs	r2, #255	; 0xff
 8004aae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8004ab6:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2206      	movs	r2, #6
 8004abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2206      	movs	r2, #6
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004acc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <tcp_alloc+0xf8>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <tcp_alloc+0xfc>)
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8004aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <tcp_alloc+0x100>)
 8004af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <tcp_alloc+0x104>)
 8004afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 8004b00:	68fb      	ldr	r3, [r7, #12]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200010b8 	.word	0x200010b8
 8004b10:	20000571 	.word	0x20000571
 8004b14:	080047c1 	.word	0x080047c1
 8004b18:	006ddd00 	.word	0x006ddd00

08004b1c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <tcp_pcb_purge+0x1e>
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <tcp_pcb_purge+0x94>)
 8004b2c:	f640 025b 	movw	r2, #2139	; 0x85b
 8004b30:	4920      	ldr	r1, [pc, #128]	; (8004bb4 <tcp_pcb_purge+0x98>)
 8004b32:	4821      	ldr	r0, [pc, #132]	; (8004bb8 <tcp_pcb_purge+0x9c>)
 8004b34:	f7fc fa9a 	bl	800106c <lwip_win32_platform_diag>
 8004b38:	e037      	b.n	8004baa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7d1b      	ldrb	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d033      	beq.n	8004baa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8004b46:	2b0a      	cmp	r3, #10
 8004b48:	d02f      	beq.n	8004baa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d02b      	beq.n	8004baa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fa70 	bl	8003044 <pbuf_free>
      pcb->refused_data = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9ac 	bl	8004ed0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b7e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fdbd 	bl	8004704 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fdb8 	bl	8004704 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	66da      	str	r2, [r3, #108]	; 0x6c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	08010794 	.word	0x08010794
 8004bb4:	08010dcc 	.word	0x08010dcc
 8004bb8:	080107c8 	.word	0x080107c8

08004bbc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <tcp_pcb_remove+0x28>
 8004bcc:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <tcp_pcb_remove+0x13c>)
 8004bce:	f640 028d 	movw	r2, #2189	; 0x88d
 8004bd2:	494a      	ldr	r1, [pc, #296]	; (8004cfc <tcp_pcb_remove+0x140>)
 8004bd4:	484a      	ldr	r0, [pc, #296]	; (8004d00 <tcp_pcb_remove+0x144>)
 8004bd6:	f009 ffd3 	bl	800eb80 <iprintf>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f00a f8d2 	bl	800ed84 <fflush>
 8004be0:	f00a f817 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <tcp_pcb_remove+0x46>
 8004bea:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <tcp_pcb_remove+0x13c>)
 8004bec:	f640 028e 	movw	r2, #2190	; 0x88e
 8004bf0:	4944      	ldr	r1, [pc, #272]	; (8004d04 <tcp_pcb_remove+0x148>)
 8004bf2:	4843      	ldr	r0, [pc, #268]	; (8004d00 <tcp_pcb_remove+0x144>)
 8004bf4:	f009 ffc4 	bl	800eb80 <iprintf>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f00a f8c3 	bl	800ed84 <fflush>
 8004bfe:	f00a f808 	bl	800ec12 <abort>

  TCP_RMV(pcblist, pcb);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d105      	bne.n	8004c18 <tcp_pcb_remove+0x5c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e013      	b.n	8004c40 <tcp_pcb_remove+0x84>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e00c      	b.n	8004c3a <tcp_pcb_remove+0x7e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d104      	bne.n	8004c34 <tcp_pcb_remove+0x78>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e005      	b.n	8004c40 <tcp_pcb_remove+0x84>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ef      	bne.n	8004c20 <tcp_pcb_remove+0x64>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8004c46:	6838      	ldr	r0, [r7, #0]
 8004c48:	f7ff ff68 	bl	8004b1c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	7d1b      	ldrb	r3, [r3, #20]
 8004c50:	2b0a      	cmp	r3, #10
 8004c52:	d013      	beq.n	8004c7c <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d00f      	beq.n	8004c7c <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	8b5b      	ldrh	r3, [r3, #26]
 8004c60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	8b5b      	ldrh	r3, [r3, #26]
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f003 f88e 	bl	8007d98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7d1b      	ldrb	r3, [r3, #20]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d02f      	beq.n	8004ce4 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <tcp_pcb_remove+0xe8>
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <tcp_pcb_remove+0x13c>)
 8004c8e:	f640 029d 	movw	r2, #2205	; 0x89d
 8004c92:	491d      	ldr	r1, [pc, #116]	; (8004d08 <tcp_pcb_remove+0x14c>)
 8004c94:	481a      	ldr	r0, [pc, #104]	; (8004d00 <tcp_pcb_remove+0x144>)
 8004c96:	f009 ff73 	bl	800eb80 <iprintf>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00a f872 	bl	800ed84 <fflush>
 8004ca0:	f009 ffb7 	bl	800ec12 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <tcp_pcb_remove+0x108>
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <tcp_pcb_remove+0x13c>)
 8004cae:	f640 029e 	movw	r2, #2206	; 0x89e
 8004cb2:	4916      	ldr	r1, [pc, #88]	; (8004d0c <tcp_pcb_remove+0x150>)
 8004cb4:	4812      	ldr	r0, [pc, #72]	; (8004d00 <tcp_pcb_remove+0x144>)
 8004cb6:	f009 ff63 	bl	800eb80 <iprintf>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	f00a f862 	bl	800ed84 <fflush>
 8004cc0:	f009 ffa7 	bl	800ec12 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <tcp_pcb_remove+0x128>
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <tcp_pcb_remove+0x13c>)
 8004cce:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 8004cd2:	490f      	ldr	r1, [pc, #60]	; (8004d10 <tcp_pcb_remove+0x154>)
 8004cd4:	480a      	ldr	r0, [pc, #40]	; (8004d00 <tcp_pcb_remove+0x144>)
 8004cd6:	f009 ff53 	bl	800eb80 <iprintf>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f00a f852 	bl	800ed84 <fflush>
 8004ce0:	f009 ff97 	bl	800ec12 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08010794 	.word	0x08010794
 8004cfc:	08010de8 	.word	0x08010de8
 8004d00:	080107c8 	.word	0x080107c8
 8004d04:	08010e04 	.word	0x08010e04
 8004d08:	08010e24 	.word	0x08010e24
 8004d0c:	08010e3c 	.word	0x08010e3c
 8004d10:	08010e58 	.word	0x08010e58

08004d14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <tcp_next_iss+0x26>
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <tcp_next_iss+0x40>)
 8004d24:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8004d28:	490b      	ldr	r1, [pc, #44]	; (8004d58 <tcp_next_iss+0x44>)
 8004d2a:	480c      	ldr	r0, [pc, #48]	; (8004d5c <tcp_next_iss+0x48>)
 8004d2c:	f009 ff28 	bl	800eb80 <iprintf>
 8004d30:	2000      	movs	r0, #0
 8004d32:	f00a f827 	bl	800ed84 <fflush>
 8004d36:	f009 ff6c 	bl	800ec12 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <tcp_next_iss+0x4c>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <tcp_next_iss+0x50>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4413      	add	r3, r2
 8004d44:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <tcp_next_iss+0x4c>)
 8004d46:	6013      	str	r3, [r2, #0]
  return iss;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <tcp_next_iss+0x4c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08010794 	.word	0x08010794
 8004d58:	08010e70 	.word	0x08010e70
 8004d5c:	080107c8 	.word	0x080107c8
 8004d60:	20000004 	.word	0x20000004
 8004d64:	200010b8 	.word	0x200010b8

08004d68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <tcp_eff_send_mss_netif+0x2c>
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <tcp_eff_send_mss_netif+0x74>)
 8004d7e:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8004d82:	4917      	ldr	r1, [pc, #92]	; (8004de0 <tcp_eff_send_mss_netif+0x78>)
 8004d84:	4817      	ldr	r0, [pc, #92]	; (8004de4 <tcp_eff_send_mss_netif+0x7c>)
 8004d86:	f009 fefb 	bl	800eb80 <iprintf>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f009 fffa 	bl	800ed84 <fflush>
 8004d90:	f009 ff3f 	bl	800ec12 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 8004d9a:	89fb      	ldrh	r3, [r7, #14]
 8004d9c:	e019      	b.n	8004dd2 <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	8c1b      	ldrh	r3, [r3, #32]
 8004da2:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8004da4:	8afb      	ldrh	r3, [r7, #22]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8004daa:	2328      	movs	r3, #40	; 0x28
 8004dac:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8004dae:	8afa      	ldrh	r2, [r7, #22]
 8004db0:	8abb      	ldrh	r3, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d904      	bls.n	8004dc0 <tcp_eff_send_mss_netif+0x58>
 8004db6:	8afa      	ldrh	r2, [r7, #22]
 8004db8:	8abb      	ldrh	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	e000      	b.n	8004dc2 <tcp_eff_send_mss_netif+0x5a>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8004dc4:	8a7a      	ldrh	r2, [r7, #18]
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	bf28      	it	cs
 8004dcc:	4613      	movcs	r3, r2
 8004dce:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	08010794 	.word	0x08010794
 8004de0:	08010e8c 	.word	0x08010e8c
 8004de4:	080107c8 	.word	0x080107c8

08004de8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11d      	bne.n	8004e38 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8004dfe:	f640 120a 	movw	r2, #2314	; 0x90a
 8004e02:	4912      	ldr	r1, [pc, #72]	; (8004e4c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8004e04:	4812      	ldr	r0, [pc, #72]	; (8004e50 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8004e06:	f009 febb 	bl	800eb80 <iprintf>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f009 ffba 	bl	800ed84 <fflush>
 8004e10:	f009 feff 	bl	800ec12 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d108      	bne.n	8004e32 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fe ff54 	bl	8003cd4 <tcp_abort>
      pcb = next;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ea      	bne.n	8004e14 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	08010794 	.word	0x08010794
 8004e4c:	08010eb4 	.word	0x08010eb4
 8004e50:	080107c8 	.word	0x080107c8

08004e54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d02a      	beq.n	8004eba <tcp_netif_ip_addr_changed+0x66>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d026      	beq.n	8004eba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8004e6c:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <tcp_netif_ip_addr_changed+0x70>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff ffb8 	bl	8004de8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <tcp_netif_ip_addr_changed+0x74>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ffb2 	bl	8004de8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <tcp_netif_ip_addr_changed+0x66>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d013      	beq.n	8004eba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <tcp_netif_ip_addr_changed+0x78>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e00c      	b.n	8004eb4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d103      	bne.n	8004eae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ef      	bne.n	8004e9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200010b4 	.word	0x200010b4
 8004ec8:	200010c0 	.word	0x200010c0
 8004ecc:	200010bc 	.word	0x200010bc

08004ed0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fc0d 	bl	8004704 <tcp_segs_free>
    pcb->ooseq = NULL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b08d      	sub	sp, #52	; 0x34
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <tcp_input+0x26>
 8004f08:	4ba4      	ldr	r3, [pc, #656]	; (800519c <tcp_input+0x2a4>)
 8004f0a:	2283      	movs	r2, #131	; 0x83
 8004f0c:	49a4      	ldr	r1, [pc, #656]	; (80051a0 <tcp_input+0x2a8>)
 8004f0e:	48a5      	ldr	r0, [pc, #660]	; (80051a4 <tcp_input+0x2ac>)
 8004f10:	f009 fe36 	bl	800eb80 <iprintf>
 8004f14:	2000      	movs	r0, #0
 8004f16:	f009 ff35 	bl	800ed84 <fflush>
 8004f1a:	f009 fe7a 	bl	800ec12 <abort>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4aa1      	ldr	r2, [pc, #644]	; (80051a8 <tcp_input+0x2b0>)
 8004f24:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	895b      	ldrh	r3, [r3, #10]
 8004f2a:	2b13      	cmp	r3, #19
 8004f2c:	f240 8413 	bls.w	8005756 <tcp_input+0x85e>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004f30:	4b9e      	ldr	r3, [pc, #632]	; (80051ac <tcp_input+0x2b4>)
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	4b9d      	ldr	r3, [pc, #628]	; (80051ac <tcp_input+0x2b4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fc ff6c 	bl	8001e18 <ip4_addr_isbroadcast_u32>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 8410 	bne.w	8005768 <tcp_input+0x870>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8004f48:	4b98      	ldr	r3, [pc, #608]	; (80051ac <tcp_input+0x2b4>)
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8004f50:	2be0      	cmp	r3, #224	; 0xe0
 8004f52:	f000 8409 	beq.w	8005768 <tcp_input+0x870>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	891a      	ldrh	r2, [r3, #8]
 8004f5a:	4b95      	ldr	r3, [pc, #596]	; (80051b0 <tcp_input+0x2b8>)
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4b95      	ldr	r3, [pc, #596]	; (80051b4 <tcp_input+0x2bc>)
 8004f60:	2106      	movs	r1, #6
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc fa2c 	bl	80013c0 <ip_chksum_pseudo>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8004f6c:	8a3b      	ldrh	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 83f3 	bne.w	800575a <tcp_input+0x862>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8004f74:	4b8c      	ldr	r3, [pc, #560]	; (80051a8 <tcp_input+0x2b0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	899b      	ldrh	r3, [r3, #12]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fc f8ed 	bl	800115c <lwip_htons>
 8004f82:	4603      	mov	r3, r0
 8004f84:	0b1b      	lsrs	r3, r3, #12
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b13      	cmp	r3, #19
 8004f92:	f240 83e4 	bls.w	800575e <tcp_input+0x866>
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	891b      	ldrh	r3, [r3, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	f200 83dd 	bhi.w	800575e <tcp_input+0x866>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b14      	subs	r3, #20
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	4b82      	ldr	r3, [pc, #520]	; (80051b8 <tcp_input+0x2c0>)
 8004fae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8004fb0:	4b82      	ldr	r3, [pc, #520]	; (80051bc <tcp_input+0x2c4>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	895a      	ldrh	r2, [r3, #10]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d309      	bcc.n	8004fd6 <tcp_input+0xde>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8004fc2:	4b7d      	ldr	r3, [pc, #500]	; (80051b8 <tcp_input+0x2c0>)
 8004fc4:	881a      	ldrh	r2, [r3, #0]
 8004fc6:	4b7e      	ldr	r3, [pc, #504]	; (80051c0 <tcp_input+0x2c8>)
 8004fc8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fd ffae 	bl	8002f30 <pbuf_remove_header>
 8004fd4:	e05d      	b.n	8005092 <tcp_input+0x19a>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <tcp_input+0xfc>
 8004fde:	4b6f      	ldr	r3, [pc, #444]	; (800519c <tcp_input+0x2a4>)
 8004fe0:	22c2      	movs	r2, #194	; 0xc2
 8004fe2:	4978      	ldr	r1, [pc, #480]	; (80051c4 <tcp_input+0x2cc>)
 8004fe4:	486f      	ldr	r0, [pc, #444]	; (80051a4 <tcp_input+0x2ac>)
 8004fe6:	f009 fdcb 	bl	800eb80 <iprintf>
 8004fea:	2000      	movs	r0, #0
 8004fec:	f009 feca 	bl	800ed84 <fflush>
 8004ff0:	f009 fe0f 	bl	800ec12 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8004ff4:	2114      	movs	r1, #20
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd ff9a 	bl	8002f30 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	895a      	ldrh	r2, [r3, #10]
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <tcp_input+0x2c8>)
 8005002:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8005004:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <tcp_input+0x2c0>)
 8005006:	881a      	ldrh	r2, [r3, #0]
 8005008:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <tcp_input+0x2c8>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8005010:	4b6b      	ldr	r3, [pc, #428]	; (80051c0 <tcp_input+0x2c8>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd ff8a 	bl	8002f30 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	895b      	ldrh	r3, [r3, #10]
 8005022:	89ba      	ldrh	r2, [r7, #12]
 8005024:	429a      	cmp	r2, r3
 8005026:	f200 839c 	bhi.w	8005762 <tcp_input+0x86a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a62      	ldr	r2, [pc, #392]	; (80051bc <tcp_input+0x2c4>)
 8005032:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	89ba      	ldrh	r2, [r7, #12]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd ff77 	bl	8002f30 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	891a      	ldrh	r2, [r3, #8]
 8005046:	89bb      	ldrh	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	895b      	ldrh	r3, [r3, #10]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <tcp_input+0x176>
 8005058:	4b50      	ldr	r3, [pc, #320]	; (800519c <tcp_input+0x2a4>)
 800505a:	22df      	movs	r2, #223	; 0xdf
 800505c:	495a      	ldr	r1, [pc, #360]	; (80051c8 <tcp_input+0x2d0>)
 800505e:	4851      	ldr	r0, [pc, #324]	; (80051a4 <tcp_input+0x2ac>)
 8005060:	f009 fd8e 	bl	800eb80 <iprintf>
 8005064:	2000      	movs	r0, #0
 8005066:	f009 fe8d 	bl	800ed84 <fflush>
 800506a:	f009 fdd2 	bl	800ec12 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	891a      	ldrh	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	891b      	ldrh	r3, [r3, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	d00a      	beq.n	8005092 <tcp_input+0x19a>
 800507c:	4b47      	ldr	r3, [pc, #284]	; (800519c <tcp_input+0x2a4>)
 800507e:	22e0      	movs	r2, #224	; 0xe0
 8005080:	4952      	ldr	r1, [pc, #328]	; (80051cc <tcp_input+0x2d4>)
 8005082:	4848      	ldr	r0, [pc, #288]	; (80051a4 <tcp_input+0x2ac>)
 8005084:	f009 fd7c 	bl	800eb80 <iprintf>
 8005088:	2000      	movs	r0, #0
 800508a:	f009 fe7b 	bl	800ed84 <fflush>
 800508e:	f009 fdc0 	bl	800ec12 <abort>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005092:	4b45      	ldr	r3, [pc, #276]	; (80051a8 <tcp_input+0x2b0>)
 8005094:	681c      	ldr	r4, [r3, #0]
 8005096:	4b44      	ldr	r3, [pc, #272]	; (80051a8 <tcp_input+0x2b0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fc f85c 	bl	800115c <lwip_htons>
 80050a4:	4603      	mov	r3, r0
 80050a6:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <tcp_input+0x2b0>)
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <tcp_input+0x2b0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	885b      	ldrh	r3, [r3, #2]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fc f851 	bl	800115c <lwip_htons>
 80050ba:	4603      	mov	r3, r0
 80050bc:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80050be:	4b3a      	ldr	r3, [pc, #232]	; (80051a8 <tcp_input+0x2b0>)
 80050c0:	681c      	ldr	r4, [r3, #0]
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <tcp_input+0x2b0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fc f85c 	bl	8001186 <lwip_htonl>
 80050ce:	4603      	mov	r3, r0
 80050d0:	6063      	str	r3, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <tcp_input+0x2d8>)
 80050d6:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80050d8:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <tcp_input+0x2b0>)
 80050da:	681c      	ldr	r4, [r3, #0]
 80050dc:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <tcp_input+0x2b0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fc f84f 	bl	8001186 <lwip_htonl>
 80050e8:	4603      	mov	r3, r0
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	68a3      	ldr	r3, [r4, #8]
 80050ee:	4a39      	ldr	r2, [pc, #228]	; (80051d4 <tcp_input+0x2dc>)
 80050f0:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80050f2:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <tcp_input+0x2b0>)
 80050f4:	681c      	ldr	r4, [r3, #0]
 80050f6:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <tcp_input+0x2b0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	89db      	ldrh	r3, [r3, #14]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fc f82c 	bl	800115c <lwip_htons>
 8005104:	4603      	mov	r3, r0
 8005106:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <tcp_input+0x2b0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	899b      	ldrh	r3, [r3, #12]
 800510e:	b29b      	uxth	r3, r3
 8005110:	4618      	mov	r0, r3
 8005112:	f7fc f823 	bl	800115c <lwip_htons>
 8005116:	4603      	mov	r3, r0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800511e:	b2da      	uxtb	r2, r3
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <tcp_input+0x2e0>)
 8005122:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	891a      	ldrh	r2, [r3, #8]
 8005128:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <tcp_input+0x2e4>)
 800512a:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800512c:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <tcp_input+0x2e0>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <tcp_input+0x25a>
    tcplen++;
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <tcp_input+0x2e4>)
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	4b26      	ldr	r3, [pc, #152]	; (80051dc <tcp_input+0x2e4>)
 8005142:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	891a      	ldrh	r2, [r3, #8]
 8005148:	4b24      	ldr	r3, [pc, #144]	; (80051dc <tcp_input+0x2e4>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	f200 830a 	bhi.w	8005766 <tcp_input+0x86e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <tcp_input+0x2e8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e0b7      	b.n	80052ce <tcp_input+0x3d6>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	7d1b      	ldrb	r3, [r3, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <tcp_input+0x284>
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <tcp_input+0x2a4>)
 8005168:	22fb      	movs	r2, #251	; 0xfb
 800516a:	491e      	ldr	r1, [pc, #120]	; (80051e4 <tcp_input+0x2ec>)
 800516c:	480d      	ldr	r0, [pc, #52]	; (80051a4 <tcp_input+0x2ac>)
 800516e:	f009 fd07 	bl	800eb80 <iprintf>
 8005172:	2000      	movs	r0, #0
 8005174:	f009 fe06 	bl	800ed84 <fflush>
 8005178:	f009 fd4b 	bl	800ec12 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	7d1b      	ldrb	r3, [r3, #20]
 8005180:	2b0a      	cmp	r3, #10
 8005182:	d133      	bne.n	80051ec <tcp_input+0x2f4>
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <tcp_input+0x2a4>)
 8005186:	22fc      	movs	r2, #252	; 0xfc
 8005188:	4917      	ldr	r1, [pc, #92]	; (80051e8 <tcp_input+0x2f0>)
 800518a:	4806      	ldr	r0, [pc, #24]	; (80051a4 <tcp_input+0x2ac>)
 800518c:	f009 fcf8 	bl	800eb80 <iprintf>
 8005190:	2000      	movs	r0, #0
 8005192:	f009 fdf7 	bl	800ed84 <fflush>
 8005196:	f009 fd3c 	bl	800ec12 <abort>
 800519a:	bf00      	nop
 800519c:	08010ee8 	.word	0x08010ee8
 80051a0:	08010f0c 	.word	0x08010f0c
 80051a4:	08010f24 	.word	0x08010f24
 80051a8:	20000588 	.word	0x20000588
 80051ac:	200006c4 	.word	0x200006c4
 80051b0:	200006d8 	.word	0x200006d8
 80051b4:	200006d4 	.word	0x200006d4
 80051b8:	2000058c 	.word	0x2000058c
 80051bc:	20000590 	.word	0x20000590
 80051c0:	2000058e 	.word	0x2000058e
 80051c4:	08010f4c 	.word	0x08010f4c
 80051c8:	08010f5c 	.word	0x08010f5c
 80051cc:	08010f68 	.word	0x08010f68
 80051d0:	20000598 	.word	0x20000598
 80051d4:	2000059c 	.word	0x2000059c
 80051d8:	200005a4 	.word	0x200005a4
 80051dc:	200005a2 	.word	0x200005a2
 80051e0:	200010b4 	.word	0x200010b4
 80051e4:	08010f88 	.word	0x08010f88
 80051e8:	08010fb0 	.word	0x08010fb0
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	7d1b      	ldrb	r3, [r3, #20]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d10a      	bne.n	800520a <tcp_input+0x312>
 80051f4:	4b88      	ldr	r3, [pc, #544]	; (8005418 <tcp_input+0x520>)
 80051f6:	22fd      	movs	r2, #253	; 0xfd
 80051f8:	4988      	ldr	r1, [pc, #544]	; (800541c <tcp_input+0x524>)
 80051fa:	4889      	ldr	r0, [pc, #548]	; (8005420 <tcp_input+0x528>)
 80051fc:	f009 fcc0 	bl	800eb80 <iprintf>
 8005200:	2000      	movs	r0, #0
 8005202:	f009 fdbf 	bl	800ed84 <fflush>
 8005206:	f009 fd04 	bl	800ec12 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	7a1b      	ldrb	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <tcp_input+0x334>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	7a1a      	ldrb	r2, [r3, #8]
 8005216:	4b83      	ldr	r3, [pc, #524]	; (8005424 <tcp_input+0x52c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800521e:	3301      	adds	r3, #1
 8005220:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005222:	429a      	cmp	r2, r3
 8005224:	d002      	beq.n	800522c <tcp_input+0x334>
      prev = pcb;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	61bb      	str	r3, [r7, #24]
      continue;
 800522a:	e04d      	b.n	80052c8 <tcp_input+0x3d0>
    }

    if (pcb->remote_port == tcphdr->src &&
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	8b1a      	ldrh	r2, [r3, #24]
 8005230:	4b7d      	ldr	r3, [pc, #500]	; (8005428 <tcp_input+0x530>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	429a      	cmp	r2, r3
 800523a:	d143      	bne.n	80052c4 <tcp_input+0x3cc>
        pcb->local_port == tcphdr->dest &&
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	8ada      	ldrh	r2, [r3, #22]
 8005240:	4b79      	ldr	r3, [pc, #484]	; (8005428 <tcp_input+0x530>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	885b      	ldrh	r3, [r3, #2]
 8005246:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8005248:	429a      	cmp	r2, r3
 800524a:	d13b      	bne.n	80052c4 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4b74      	ldr	r3, [pc, #464]	; (8005424 <tcp_input+0x52c>)
 8005252:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8005254:	429a      	cmp	r2, r3
 8005256:	d135      	bne.n	80052c4 <tcp_input+0x3cc>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b71      	ldr	r3, [pc, #452]	; (8005424 <tcp_input+0x52c>)
 800525e:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005260:	429a      	cmp	r2, r3
 8005262:	d12f      	bne.n	80052c4 <tcp_input+0x3cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	429a      	cmp	r2, r3
 800526c:	d10b      	bne.n	8005286 <tcp_input+0x38e>
 800526e:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <tcp_input+0x520>)
 8005270:	f240 120d 	movw	r2, #269	; 0x10d
 8005274:	496d      	ldr	r1, [pc, #436]	; (800542c <tcp_input+0x534>)
 8005276:	486a      	ldr	r0, [pc, #424]	; (8005420 <tcp_input+0x528>)
 8005278:	f009 fc82 	bl	800eb80 <iprintf>
 800527c:	2000      	movs	r0, #0
 800527e:	f009 fd81 	bl	800ed84 <fflush>
 8005282:	f009 fcc6 	bl	800ec12 <abort>
      if (prev != NULL) {
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <tcp_input+0x3aa>
        prev->next = pcb->next;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8005294:	4b66      	ldr	r3, [pc, #408]	; (8005430 <tcp_input+0x538>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800529c:	4a64      	ldr	r2, [pc, #400]	; (8005430 <tcp_input+0x538>)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d115      	bne.n	80052d8 <tcp_input+0x3e0>
 80052ac:	4b5a      	ldr	r3, [pc, #360]	; (8005418 <tcp_input+0x520>)
 80052ae:	f240 1215 	movw	r2, #277	; 0x115
 80052b2:	4960      	ldr	r1, [pc, #384]	; (8005434 <tcp_input+0x53c>)
 80052b4:	485a      	ldr	r0, [pc, #360]	; (8005420 <tcp_input+0x528>)
 80052b6:	f009 fc63 	bl	800eb80 <iprintf>
 80052ba:	2000      	movs	r0, #0
 80052bc:	f009 fd62 	bl	800ed84 <fflush>
 80052c0:	f009 fca7 	bl	800ec12 <abort>
      break;
    }
    prev = pcb;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f47f af44 	bne.w	800515e <tcp_input+0x266>
 80052d6:	e000      	b.n	80052da <tcp_input+0x3e2>
      break;
 80052d8:	bf00      	nop
  }

  if (pcb == NULL) {
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 80b1 	bne.w	8005444 <tcp_input+0x54c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80052e2:	4b55      	ldr	r3, [pc, #340]	; (8005438 <tcp_input+0x540>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e044      	b.n	8005374 <tcp_input+0x47c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	7d1b      	ldrb	r3, [r3, #20]
 80052ee:	2b0a      	cmp	r3, #10
 80052f0:	d00b      	beq.n	800530a <tcp_input+0x412>
 80052f2:	4b49      	ldr	r3, [pc, #292]	; (8005418 <tcp_input+0x520>)
 80052f4:	f240 121f 	movw	r2, #287	; 0x11f
 80052f8:	4950      	ldr	r1, [pc, #320]	; (800543c <tcp_input+0x544>)
 80052fa:	4849      	ldr	r0, [pc, #292]	; (8005420 <tcp_input+0x528>)
 80052fc:	f009 fc40 	bl	800eb80 <iprintf>
 8005300:	2000      	movs	r0, #0
 8005302:	f009 fd3f 	bl	800ed84 <fflush>
 8005306:	f009 fc84 	bl	800ec12 <abort>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	7a1b      	ldrb	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <tcp_input+0x42e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	7a1a      	ldrb	r2, [r3, #8]
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <tcp_input+0x52c>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531e:	3301      	adds	r3, #1
 8005320:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8005322:	429a      	cmp	r2, r3
 8005324:	d122      	bne.n	800536c <tcp_input+0x474>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	8b1a      	ldrh	r2, [r3, #24]
 800532a:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <tcp_input+0x530>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	429a      	cmp	r2, r3
 8005334:	d11b      	bne.n	800536e <tcp_input+0x476>
          pcb->local_port == tcphdr->dest &&
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	8ada      	ldrh	r2, [r3, #22]
 800533a:	4b3b      	ldr	r3, [pc, #236]	; (8005428 <tcp_input+0x530>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	885b      	ldrh	r3, [r3, #2]
 8005340:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8005342:	429a      	cmp	r2, r3
 8005344:	d113      	bne.n	800536e <tcp_input+0x476>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	4b36      	ldr	r3, [pc, #216]	; (8005424 <tcp_input+0x52c>)
 800534c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800534e:	429a      	cmp	r2, r3
 8005350:	d10d      	bne.n	800536e <tcp_input+0x476>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b33      	ldr	r3, [pc, #204]	; (8005424 <tcp_input+0x52c>)
 8005358:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800535a:	429a      	cmp	r2, r3
 800535c:	d107      	bne.n	800536e <tcp_input+0x476>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800535e:	69f8      	ldr	r0, [r7, #28]
 8005360:	f000 fb62 	bl	8005a28 <tcp_timewait_input>
        }
        pbuf_free(p);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fd fe6d 	bl	8003044 <pbuf_free>
        return;
 800536a:	e202      	b.n	8005772 <tcp_input+0x87a>
        continue;
 800536c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1b7      	bne.n	80052ea <tcp_input+0x3f2>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <tcp_input+0x548>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e02a      	b.n	80053dc <tcp_input+0x4e4>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	7a1b      	ldrb	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <tcp_input+0x4b0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	7a1a      	ldrb	r2, [r3, #8]
 8005392:	4b24      	ldr	r3, [pc, #144]	; (8005424 <tcp_input+0x52c>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800539a:	3301      	adds	r3, #1
 800539c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800539e:	429a      	cmp	r2, r3
 80053a0:	d002      	beq.n	80053a8 <tcp_input+0x4b0>
        prev = (struct tcp_pcb *)lpcb;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	61bb      	str	r3, [r7, #24]
        continue;
 80053a6:	e016      	b.n	80053d6 <tcp_input+0x4de>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	8ada      	ldrh	r2, [r3, #22]
 80053ac:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <tcp_input+0x530>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	885b      	ldrh	r3, [r3, #2]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d10c      	bne.n	80053d2 <tcp_input+0x4da>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <tcp_input+0x52c>)
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d00f      	beq.n	80053e4 <tcp_input+0x4ec>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <tcp_input+0x4ee>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <tcp_input+0x4ee>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1d1      	bne.n	8005386 <tcp_input+0x48e>
 80053e2:	e000      	b.n	80053e6 <tcp_input+0x4ee>
            break;
 80053e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02b      	beq.n	8005444 <tcp_input+0x54c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <tcp_input+0x510>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <tcp_input+0x548>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005402:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <tcp_input+0x548>)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f000 fa09 	bl	8005820 <tcp_listen_input>
      }
      pbuf_free(p);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd fe18 	bl	8003044 <pbuf_free>
      return;
 8005414:	e1ad      	b.n	8005772 <tcp_input+0x87a>
 8005416:	bf00      	nop
 8005418:	08010ee8 	.word	0x08010ee8
 800541c:	08010fdc 	.word	0x08010fdc
 8005420:	08010f24 	.word	0x08010f24
 8005424:	200006c4 	.word	0x200006c4
 8005428:	20000588 	.word	0x20000588
 800542c:	08011004 	.word	0x08011004
 8005430:	200010b4 	.word	0x200010b4
 8005434:	08011030 	.word	0x08011030
 8005438:	200010c4 	.word	0x200010c4
 800543c:	0801105c 	.word	0x0801105c
 8005440:	200010bc 	.word	0x200010bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 815a 	beq.w	8005700 <tcp_input+0x808>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800544c:	4ba0      	ldr	r3, [pc, #640]	; (80056d0 <tcp_input+0x7d8>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	891a      	ldrh	r2, [r3, #8]
 8005456:	4b9e      	ldr	r3, [pc, #632]	; (80056d0 <tcp_input+0x7d8>)
 8005458:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800545a:	4a9d      	ldr	r2, [pc, #628]	; (80056d0 <tcp_input+0x7d8>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8005460:	4b9c      	ldr	r3, [pc, #624]	; (80056d4 <tcp_input+0x7dc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9a      	ldr	r2, [pc, #616]	; (80056d0 <tcp_input+0x7d8>)
 8005466:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8005468:	4b9b      	ldr	r3, [pc, #620]	; (80056d8 <tcp_input+0x7e0>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800546e:	4b9b      	ldr	r3, [pc, #620]	; (80056dc <tcp_input+0x7e4>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8005474:	4b9a      	ldr	r3, [pc, #616]	; (80056e0 <tcp_input+0x7e8>)
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800547a:	4b9a      	ldr	r3, [pc, #616]	; (80056e4 <tcp_input+0x7ec>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <tcp_input+0x59c>
      p->flags |= PBUF_FLAG_PUSH;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	7b5b      	ldrb	r3, [r3, #13]
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005498:	2b00      	cmp	r3, #0
 800549a:	d017      	beq.n	80054cc <tcp_input+0x5d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800549c:	69f8      	ldr	r0, [r7, #28]
 800549e:	f7ff f8b5 	bl	800460c <tcp_process_refused_data>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f113 0f0d 	cmn.w	r3, #13
 80054a8:	d007      	beq.n	80054ba <tcp_input+0x5c2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <tcp_input+0x5d4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80054b2:	4b8d      	ldr	r3, [pc, #564]	; (80056e8 <tcp_input+0x7f0>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <tcp_input+0x5d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 80e8 	bne.w	8005694 <tcp_input+0x79c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80054c4:	69f8      	ldr	r0, [r7, #28]
 80054c6:	f003 fb83 	bl	8008bd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80054ca:	e0e3      	b.n	8005694 <tcp_input+0x79c>
      }
    }
    tcp_input_pcb = pcb;
 80054cc:	4a87      	ldr	r2, [pc, #540]	; (80056ec <tcp_input+0x7f4>)
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80054d2:	69f8      	ldr	r0, [r7, #28]
 80054d4:	f000 fb28 	bl	8005b28 <tcp_process>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80054dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80054e0:	f113 0f0d 	cmn.w	r3, #13
 80054e4:	f000 80e1 	beq.w	80056aa <tcp_input+0x7b2>
      if (recv_flags & TF_RESET) {
 80054e8:	4b7c      	ldr	r3, [pc, #496]	; (80056dc <tcp_input+0x7e4>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <tcp_input+0x628>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <tcp_input+0x618>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	6912      	ldr	r2, [r2, #16]
 8005508:	f06f 010d 	mvn.w	r1, #13
 800550c:	4610      	mov	r0, r2
 800550e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	4877      	ldr	r0, [pc, #476]	; (80056f0 <tcp_input+0x7f8>)
 8005514:	f7ff fb52 	bl	8004bbc <tcp_pcb_remove>
        tcp_free(pcb);
 8005518:	69f8      	ldr	r0, [r7, #28]
 800551a:	f7fe f8cd 	bl	80036b8 <tcp_free>
 800551e:	e0c4      	b.n	80056aa <tcp_input+0x7b2>
      } else {
        err = ERR_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8005524:	4b6e      	ldr	r3, [pc, #440]	; (80056e0 <tcp_input+0x7e8>)
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01d      	beq.n	8005568 <tcp_input+0x670>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800552c:	4b6c      	ldr	r3, [pc, #432]	; (80056e0 <tcp_input+0x7e8>)
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <tcp_input+0x65a>
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	6910      	ldr	r0, [r2, #16]
 8005546:	897a      	ldrh	r2, [r7, #10]
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	4798      	blx	r3
 800554c:	4603      	mov	r3, r0
 800554e:	74fb      	strb	r3, [r7, #19]
 8005550:	e001      	b.n	8005556 <tcp_input+0x65e>
 8005552:	2300      	movs	r3, #0
 8005554:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005556:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800555a:	f113 0f0d 	cmn.w	r3, #13
 800555e:	f000 809b 	beq.w	8005698 <tcp_input+0x7a0>
              goto aborted;
            }
          }
          recv_acked = 0;
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <tcp_input+0x7e8>)
 8005564:	2200      	movs	r2, #0
 8005566:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8005568:	69f8      	ldr	r0, [r7, #28]
 800556a:	f000 f913 	bl	8005794 <tcp_input_delayed_close>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 8093 	bne.w	800569c <tcp_input+0x7a4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8005576:	4b58      	ldr	r3, [pc, #352]	; (80056d8 <tcp_input+0x7e0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d046      	beq.n	800560c <tcp_input+0x714>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <tcp_input+0x6a6>
 8005586:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <tcp_input+0x7fc>)
 8005588:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800558c:	495a      	ldr	r1, [pc, #360]	; (80056f8 <tcp_input+0x800>)
 800558e:	485b      	ldr	r0, [pc, #364]	; (80056fc <tcp_input+0x804>)
 8005590:	f009 faf6 	bl	800eb80 <iprintf>
 8005594:	2000      	movs	r0, #0
 8005596:	f009 fbf5 	bl	800ed84 <fflush>
 800559a:	f009 fb3a 	bl	800ec12 <abort>
          if (pcb->flags & TF_RXCLOSED) {
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	8b5b      	ldrh	r3, [r3, #26]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <tcp_input+0x6c4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80055aa:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <tcp_input+0x7e0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fd fd48 	bl	8003044 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80055b4:	69f8      	ldr	r0, [r7, #28]
 80055b6:	f7fe fb8d 	bl	8003cd4 <tcp_abort>
            goto aborted;
 80055ba:	e076      	b.n	80056aa <tcp_input+0x7b2>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <tcp_input+0x6e8>
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	6918      	ldr	r0, [r3, #16]
 80055d0:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <tcp_input+0x7e0>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	2300      	movs	r3, #0
 80055d6:	69f9      	ldr	r1, [r7, #28]
 80055d8:	47a0      	blx	r4
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]
 80055de:	e008      	b.n	80055f2 <tcp_input+0x6fa>
 80055e0:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <tcp_input+0x7e0>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	69f9      	ldr	r1, [r7, #28]
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7ff f8e9 	bl	80047c0 <tcp_recv_null>
 80055ee:	4603      	mov	r3, r0
 80055f0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80055f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80055f6:	f113 0f0d 	cmn.w	r3, #13
 80055fa:	d051      	beq.n	80056a0 <tcp_input+0x7a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80055fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <tcp_input+0x714>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8005604:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <tcp_input+0x7e0>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800560c:	4b33      	ldr	r3, [pc, #204]	; (80056dc <tcp_input+0x7e4>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d030      	beq.n	800567a <tcp_input+0x782>
          if (pcb->refused_data != NULL) {
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <tcp_input+0x73c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005628:	7b52      	ldrb	r2, [r2, #13]
 800562a:	f042 0220 	orr.w	r2, r2, #32
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	735a      	strb	r2, [r3, #13]
 8005632:	e022      	b.n	800567a <tcp_input+0x782>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800563c:	d005      	beq.n	800564a <tcp_input+0x752>
              pcb->rcv_wnd++;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	3301      	adds	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <tcp_input+0x774>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	6918      	ldr	r0, [r3, #16]
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	69f9      	ldr	r1, [r7, #28]
 8005664:	47a0      	blx	r4
 8005666:	4603      	mov	r3, r0
 8005668:	74fb      	strb	r3, [r7, #19]
 800566a:	e001      	b.n	8005670 <tcp_input+0x778>
 800566c:	2300      	movs	r3, #0
 800566e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8005670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005674:	f113 0f0d 	cmn.w	r3, #13
 8005678:	d014      	beq.n	80056a4 <tcp_input+0x7ac>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800567a:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <tcp_input+0x7f4>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8005680:	69f8      	ldr	r0, [r7, #28]
 8005682:	f000 f887 	bl	8005794 <tcp_input_delayed_close>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10d      	bne.n	80056a8 <tcp_input+0x7b0>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800568c:	69f8      	ldr	r0, [r7, #28]
 800568e:	f002 fb83 	bl	8007d98 <tcp_output>
 8005692:	e00a      	b.n	80056aa <tcp_input+0x7b2>
        goto aborted;
 8005694:	bf00      	nop
 8005696:	e008      	b.n	80056aa <tcp_input+0x7b2>
              goto aborted;
 8005698:	bf00      	nop
 800569a:	e006      	b.n	80056aa <tcp_input+0x7b2>
          goto aborted;
 800569c:	bf00      	nop
 800569e:	e004      	b.n	80056aa <tcp_input+0x7b2>
            goto aborted;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <tcp_input+0x7b2>
              goto aborted;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <tcp_input+0x7b2>
          goto aborted;
 80056a8:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <tcp_input+0x7f4>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <tcp_input+0x7e0>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <tcp_input+0x7d8>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d058      	beq.n	8005770 <tcp_input+0x878>
      pbuf_free(inseg.p);
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <tcp_input+0x7d8>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fcbe 	bl	8003044 <pbuf_free>
      inseg.p = NULL;
 80056c8:	4b01      	ldr	r3, [pc, #4]	; (80056d0 <tcp_input+0x7d8>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80056ce:	e04f      	b.n	8005770 <tcp_input+0x878>
 80056d0:	20000574 	.word	0x20000574
 80056d4:	20000588 	.word	0x20000588
 80056d8:	200005a8 	.word	0x200005a8
 80056dc:	200005a5 	.word	0x200005a5
 80056e0:	200005a0 	.word	0x200005a0
 80056e4:	200005a4 	.word	0x200005a4
 80056e8:	200005a2 	.word	0x200005a2
 80056ec:	200010c8 	.word	0x200010c8
 80056f0:	200010b4 	.word	0x200010b4
 80056f4:	08010ee8 	.word	0x08010ee8
 80056f8:	0801108c 	.word	0x0801108c
 80056fc:	08010f24 	.word	0x08010f24
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8005700:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <tcp_input+0x880>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	899b      	ldrh	r3, [r3, #12]
 8005706:	b29b      	uxth	r3, r3
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fd27 	bl	800115c <lwip_htons>
 800570e:	4603      	mov	r3, r0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <tcp_input+0x856>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <tcp_input+0x884>)
 800571c:	6858      	ldr	r0, [r3, #4]
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <tcp_input+0x888>)
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	4b18      	ldr	r3, [pc, #96]	; (8005784 <tcp_input+0x88c>)
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <tcp_input+0x890>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <tcp_input+0x880>)
 8005730:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005732:	885b      	ldrh	r3, [r3, #2]
 8005734:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005736:	4a10      	ldr	r2, [pc, #64]	; (8005778 <tcp_input+0x880>)
 8005738:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	b292      	uxth	r2, r2
 800573e:	9202      	str	r2, [sp, #8]
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <tcp_input+0x894>)
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <tcp_input+0x898>)
 8005748:	4622      	mov	r2, r4
 800574a:	f003 fa1a 	bl	8008b82 <tcp_rst_netif>
    pbuf_free(p);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fd fc78 	bl	8003044 <pbuf_free>
  return;
 8005754:	e00c      	b.n	8005770 <tcp_input+0x878>
    goto dropped;
 8005756:	bf00      	nop
 8005758:	e006      	b.n	8005768 <tcp_input+0x870>
      goto dropped;
 800575a:	bf00      	nop
 800575c:	e004      	b.n	8005768 <tcp_input+0x870>
    goto dropped;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <tcp_input+0x870>
      goto dropped;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <tcp_input+0x870>
      goto dropped;
 8005766:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fd fc6b 	bl	8003044 <pbuf_free>
 800576e:	e000      	b.n	8005772 <tcp_input+0x87a>
  return;
 8005770:	bf00      	nop
}
 8005772:	3724      	adds	r7, #36	; 0x24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	20000588 	.word	0x20000588
 800577c:	200006c4 	.word	0x200006c4
 8005780:	2000059c 	.word	0x2000059c
 8005784:	200005a2 	.word	0x200005a2
 8005788:	20000598 	.word	0x20000598
 800578c:	200006d4 	.word	0x200006d4
 8005790:	200006d8 	.word	0x200006d8

08005794 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <tcp_input_delayed_close+0x26>
 80057a2:	4b1a      	ldr	r3, [pc, #104]	; (800580c <tcp_input_delayed_close+0x78>)
 80057a4:	f240 225a 	movw	r2, #602	; 0x25a
 80057a8:	4919      	ldr	r1, [pc, #100]	; (8005810 <tcp_input_delayed_close+0x7c>)
 80057aa:	481a      	ldr	r0, [pc, #104]	; (8005814 <tcp_input_delayed_close+0x80>)
 80057ac:	f009 f9e8 	bl	800eb80 <iprintf>
 80057b0:	2000      	movs	r0, #0
 80057b2:	f009 fae7 	bl	800ed84 <fflush>
 80057b6:	f009 fa2c 	bl	800ec12 <abort>

  if (recv_flags & TF_CLOSED) {
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <tcp_input_delayed_close+0x84>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01c      	beq.n	8005800 <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8b5b      	ldrh	r3, [r3, #26]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <tcp_input_delayed_close+0x5a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6912      	ldr	r2, [r2, #16]
 80057e6:	f06f 010e 	mvn.w	r1, #14
 80057ea:	4610      	mov	r0, r2
 80057ec:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	480a      	ldr	r0, [pc, #40]	; (800581c <tcp_input_delayed_close+0x88>)
 80057f2:	f7ff f9e3 	bl	8004bbc <tcp_pcb_remove>
    tcp_free(pcb);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fd ff5e 	bl	80036b8 <tcp_free>
    return 1;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <tcp_input_delayed_close+0x6e>
  }
  return 0;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	08010ee8 	.word	0x08010ee8
 8005810:	080110a8 	.word	0x080110a8
 8005814:	08010f24 	.word	0x08010f24
 8005818:	200005a5 	.word	0x200005a5
 800581c:	200010b4 	.word	0x200010b4

08005820 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b08b      	sub	sp, #44	; 0x2c
 8005824:	af04      	add	r7, sp, #16
 8005826:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8005828:	4b72      	ldr	r3, [pc, #456]	; (80059f4 <tcp_listen_input+0x1d4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 80d9 	bne.w	80059e8 <tcp_listen_input+0x1c8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <tcp_listen_input+0x34>
 800583c:	4b6e      	ldr	r3, [pc, #440]	; (80059f8 <tcp_listen_input+0x1d8>)
 800583e:	f240 2281 	movw	r2, #641	; 0x281
 8005842:	496e      	ldr	r1, [pc, #440]	; (80059fc <tcp_listen_input+0x1dc>)
 8005844:	486e      	ldr	r0, [pc, #440]	; (8005a00 <tcp_listen_input+0x1e0>)
 8005846:	f009 f99b 	bl	800eb80 <iprintf>
 800584a:	2000      	movs	r0, #0
 800584c:	f009 fa9a 	bl	800ed84 <fflush>
 8005850:	f009 f9df 	bl	800ec12 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8005854:	4b67      	ldr	r3, [pc, #412]	; (80059f4 <tcp_listen_input+0x1d4>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01a      	beq.n	8005896 <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005860:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <tcp_listen_input+0x1e4>)
 8005862:	6858      	ldr	r0, [r3, #4]
 8005864:	4b68      	ldr	r3, [pc, #416]	; (8005a08 <tcp_listen_input+0x1e8>)
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	4b68      	ldr	r3, [pc, #416]	; (8005a0c <tcp_listen_input+0x1ec>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	4b68      	ldr	r3, [pc, #416]	; (8005a10 <tcp_listen_input+0x1f0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005874:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <tcp_listen_input+0x1f4>)
 8005876:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005878:	885b      	ldrh	r3, [r3, #2]
 800587a:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800587c:	4a65      	ldr	r2, [pc, #404]	; (8005a14 <tcp_listen_input+0x1f4>)
 800587e:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005880:	8812      	ldrh	r2, [r2, #0]
 8005882:	b292      	uxth	r2, r2
 8005884:	9202      	str	r2, [sp, #8]
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <tcp_listen_input+0x1f8>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <tcp_listen_input+0x1fc>)
 800588e:	4622      	mov	r2, r4
 8005890:	f003 f977 	bl	8008b82 <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8005894:	e0aa      	b.n	80059ec <tcp_listen_input+0x1cc>
  } else if (flags & TCP_SYN) {
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <tcp_listen_input+0x1d4>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a4 	beq.w	80059ec <tcp_listen_input+0x1cc>
    npcb = tcp_alloc(pcb->prio);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7d5b      	ldrb	r3, [r3, #21]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff f8b3 	bl	8004a14 <tcp_alloc>
 80058ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d111      	bne.n	80058da <tcp_listen_input+0xba>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <tcp_listen_input+0xb4>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6910      	ldr	r0, [r2, #16]
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	2100      	movs	r1, #0
 80058cc:	4798      	blx	r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	74fb      	strb	r3, [r7, #19]
      return;
 80058d2:	e08c      	b.n	80059ee <tcp_listen_input+0x1ce>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80058d4:	23f0      	movs	r3, #240	; 0xf0
 80058d6:	74fb      	strb	r3, [r7, #19]
      return;
 80058d8:	e089      	b.n	80059ee <tcp_listen_input+0x1ce>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80058da:	4b4a      	ldr	r3, [pc, #296]	; (8005a04 <tcp_listen_input+0x1e4>)
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80058e2:	4b48      	ldr	r3, [pc, #288]	; (8005a04 <tcp_listen_input+0x1e4>)
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8ada      	ldrh	r2, [r3, #22]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80058f2:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <tcp_listen_input+0x1f4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2203      	movs	r2, #3
 8005902:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8005904:	4b42      	ldr	r3, [pc, #264]	; (8005a10 <tcp_listen_input+0x1f0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff f9fc 	bl	8004d14 <tcp_next_iss>
 800591c:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005936:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <tcp_listen_input+0x1f0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7a5b      	ldrb	r3, [r3, #9]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	b2da      	uxtb	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7a1a      	ldrb	r2, [r3, #8]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8005964:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <tcp_listen_input+0x200>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <tcp_listen_input+0x200>)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	f003 faaf 	bl	8008ed4 <tcp_timer_needed>
 8005976:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <tcp_listen_input+0x204>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800597c:	6978      	ldr	r0, [r7, #20]
 800597e:	f001 fe03 	bl	8007588 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <tcp_listen_input+0x1f4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	89db      	ldrh	r3, [r3, #14]
 8005988:	b29a      	uxth	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb ff4b 	bl	8001840 <ip4_route>
 80059aa:	4601      	mov	r1, r0
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3304      	adds	r3, #4
 80059b0:	461a      	mov	r2, r3
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7ff f9d8 	bl	8004d68 <tcp_eff_send_mss_netif>
 80059b8:	4603      	mov	r3, r0
 80059ba:	461a      	mov	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80059c0:	2112      	movs	r1, #18
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f002 f8ee 	bl	8007ba4 <tcp_enqueue_flags>
 80059c8:	4603      	mov	r3, r0
 80059ca:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80059cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <tcp_listen_input+0x1be>
      tcp_abandon(npcb, 0);
 80059d4:	2100      	movs	r1, #0
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f7fe f8ba 	bl	8003b50 <tcp_abandon>
      return;
 80059dc:	e007      	b.n	80059ee <tcp_listen_input+0x1ce>
    tcp_output(npcb);
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f002 f9da 	bl	8007d98 <tcp_output>
  return;
 80059e4:	bf00      	nop
 80059e6:	e001      	b.n	80059ec <tcp_listen_input+0x1cc>
    return;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <tcp_listen_input+0x1ce>
  return;
 80059ec:	bf00      	nop
}
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd90      	pop	{r4, r7, pc}
 80059f4:	200005a4 	.word	0x200005a4
 80059f8:	08010ee8 	.word	0x08010ee8
 80059fc:	080110d0 	.word	0x080110d0
 8005a00:	08010f24 	.word	0x08010f24
 8005a04:	200006c4 	.word	0x200006c4
 8005a08:	2000059c 	.word	0x2000059c
 8005a0c:	200005a2 	.word	0x200005a2
 8005a10:	20000598 	.word	0x20000598
 8005a14:	20000588 	.word	0x20000588
 8005a18:	200006d4 	.word	0x200006d4
 8005a1c:	200006d8 	.word	0x200006d8
 8005a20:	200010b4 	.word	0x200010b4
 8005a24:	200010b0 	.word	0x200010b0

08005a28 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af04      	add	r7, sp, #16
 8005a2e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <tcp_timewait_input+0xd4>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d159      	bne.n	8005af0 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <tcp_timewait_input+0x32>
 8005a42:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <tcp_timewait_input+0xd8>)
 8005a44:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005a48:	492e      	ldr	r1, [pc, #184]	; (8005b04 <tcp_timewait_input+0xdc>)
 8005a4a:	482f      	ldr	r0, [pc, #188]	; (8005b08 <tcp_timewait_input+0xe0>)
 8005a4c:	f009 f898 	bl	800eb80 <iprintf>
 8005a50:	2000      	movs	r0, #0
 8005a52:	f009 f997 	bl	800ed84 <fflush>
 8005a56:	f009 f8dc 	bl	800ec12 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <tcp_timewait_input+0xd4>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02a      	beq.n	8005abc <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8005a66:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <tcp_timewait_input+0xe4>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db2d      	blt.n	8005ad0 <tcp_timewait_input+0xa8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005a7c:	441a      	add	r2, r3
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <tcp_timewait_input+0xe4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	db23      	blt.n	8005ad0 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <tcp_timewait_input+0xe8>)
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <tcp_timewait_input+0xec>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <tcp_timewait_input+0xe4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <tcp_timewait_input+0xf0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <tcp_timewait_input+0xf0>)
 8005aa2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005aa4:	8812      	ldrh	r2, [r2, #0]
 8005aa6:	b292      	uxth	r2, r2
 8005aa8:	9202      	str	r2, [sp, #8]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <tcp_timewait_input+0xf4>)
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <tcp_timewait_input+0xf8>)
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f003 f843 	bl	8008b40 <tcp_rst>
      return;
 8005aba:	e01c      	b.n	8005af6 <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <tcp_timewait_input+0xd4>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8005ac8:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <tcp_timewait_input+0xfc>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8005ad0:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <tcp_timewait_input+0xec>)
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8b5b      	ldrh	r3, [r3, #26]
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 f956 	bl	8007d98 <tcp_output>
  }
  return;
 8005aec:	bf00      	nop
 8005aee:	e001      	b.n	8005af4 <tcp_timewait_input+0xcc>
    return;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <tcp_timewait_input+0xce>
  return;
 8005af4:	bf00      	nop
}
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200005a4 	.word	0x200005a4
 8005b00:	08010ee8 	.word	0x08010ee8
 8005b04:	080110f0 	.word	0x080110f0
 8005b08:	08010f24 	.word	0x08010f24
 8005b0c:	20000598 	.word	0x20000598
 8005b10:	2000059c 	.word	0x2000059c
 8005b14:	200005a2 	.word	0x200005a2
 8005b18:	20000588 	.word	0x20000588
 8005b1c:	200006d4 	.word	0x200006d4
 8005b20:	200006d8 	.word	0x200006d8
 8005b24:	200010b8 	.word	0x200010b8

08005b28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b08d      	sub	sp, #52	; 0x34
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <tcp_process+0x2e>
 8005b3e:	4b9c      	ldr	r3, [pc, #624]	; (8005db0 <tcp_process+0x288>)
 8005b40:	f240 321f 	movw	r2, #799	; 0x31f
 8005b44:	499b      	ldr	r1, [pc, #620]	; (8005db4 <tcp_process+0x28c>)
 8005b46:	489c      	ldr	r0, [pc, #624]	; (8005db8 <tcp_process+0x290>)
 8005b48:	f009 f81a 	bl	800eb80 <iprintf>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f009 f919 	bl	800ed84 <fflush>
 8005b52:	f009 f85e 	bl	800ec12 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8005b56:	4b99      	ldr	r3, [pc, #612]	; (8005dbc <tcp_process+0x294>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d053      	beq.n	8005c0a <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	7d1b      	ldrb	r3, [r3, #20]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d108      	bne.n	8005b7c <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b6e:	4b94      	ldr	r3, [pc, #592]	; (8005dc0 <tcp_process+0x298>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d123      	bne.n	8005bbe <tcp_process+0x96>
        acceptable = 1;
 8005b76:	2301      	movs	r3, #1
 8005b78:	76fb      	strb	r3, [r7, #27]
 8005b7a:	e020      	b.n	8005bbe <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b80:	4b90      	ldr	r3, [pc, #576]	; (8005dc4 <tcp_process+0x29c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d102      	bne.n	8005b8e <tcp_process+0x66>
        acceptable = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e017      	b.n	8005bbe <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005b8e:	4b8d      	ldr	r3, [pc, #564]	; (8005dc4 <tcp_process+0x29c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db10      	blt.n	8005bbe <tcp_process+0x96>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005ba4:	441a      	add	r2, r3
 8005ba6:	4b87      	ldr	r3, [pc, #540]	; (8005dc4 <tcp_process+0x29c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	db06      	blt.n	8005bbe <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8b5b      	ldrh	r3, [r3, #26]
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8005bbe:	7efb      	ldrb	r3, [r7, #27]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7d1b      	ldrb	r3, [r3, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10b      	bne.n	8005be4 <tcp_process+0xbc>
 8005bcc:	4b78      	ldr	r3, [pc, #480]	; (8005db0 <tcp_process+0x288>)
 8005bce:	f240 323b 	movw	r2, #827	; 0x33b
 8005bd2:	497d      	ldr	r1, [pc, #500]	; (8005dc8 <tcp_process+0x2a0>)
 8005bd4:	4878      	ldr	r0, [pc, #480]	; (8005db8 <tcp_process+0x290>)
 8005bd6:	f008 ffd3 	bl	800eb80 <iprintf>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f009 f8d2 	bl	800ed84 <fflush>
 8005be0:	f009 f817 	bl	800ec12 <abort>
      recv_flags |= TF_RESET;
 8005be4:	4b79      	ldr	r3, [pc, #484]	; (8005dcc <tcp_process+0x2a4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f043 0308 	orr.w	r3, r3, #8
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b77      	ldr	r3, [pc, #476]	; (8005dcc <tcp_process+0x2a4>)
 8005bf0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8b5b      	ldrh	r3, [r3, #26]
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8005c00:	f06f 030d 	mvn.w	r3, #13
 8005c04:	e3a1      	b.n	800634a <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e39f      	b.n	800634a <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8005c0a:	4b6c      	ldr	r3, [pc, #432]	; (8005dbc <tcp_process+0x294>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <tcp_process+0x110>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7d1b      	ldrb	r3, [r3, #20]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d00c      	beq.n	8005c38 <tcp_process+0x110>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7d1b      	ldrb	r3, [r3, #20]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d008      	beq.n	8005c38 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8b5b      	ldrh	r3, [r3, #26]
 8005c2a:	f043 0302 	orr.w	r3, r3, #2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e388      	b.n	800634a <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8b5b      	ldrh	r3, [r3, #26]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8005c44:	4b62      	ldr	r3, [pc, #392]	; (8005dd0 <tcp_process+0x2a8>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fc93 	bl	8007588 <tcp_parseopt>

  if (flags & TCP_SYN) {
 8005c62:	4b56      	ldr	r3, [pc, #344]	; (8005dbc <tcp_process+0x294>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7d1b      	ldrb	r3, [r3, #20]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d005      	beq.n	8005c82 <tcp_process+0x15a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	7d1b      	ldrb	r3, [r3, #20]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d001      	beq.n	8005c82 <tcp_process+0x15a>
      return ERR_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e363      	b.n	800634a <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	7d1b      	ldrb	r3, [r3, #20]
 8005c86:	3b02      	subs	r3, #2
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	f200 834e 	bhi.w	800632a <tcp_process+0x802>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <tcp_process+0x16c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005ef3 	.word	0x08005ef3
 8005c9c:	080060a9 	.word	0x080060a9
 8005ca0:	080060d3 	.word	0x080060d3
 8005ca4:	080061c1 	.word	0x080061c1
 8005ca8:	080060a9 	.word	0x080060a9
 8005cac:	0800624d 	.word	0x0800624d
 8005cb0:	080062f5 	.word	0x080062f5
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8005cb4:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <tcp_process+0x294>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80eb 	beq.w	8005e98 <tcp_process+0x370>
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <tcp_process+0x294>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80e4 	beq.w	8005e98 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <tcp_process+0x298>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f040 80dc 	bne.w	8005e98 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8005ce0:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <tcp_process+0x29c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8005cf2:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <tcp_process+0x298>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8005cfa:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <tcp_process+0x2ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	89db      	ldrh	r3, [r3, #14]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <tcp_process+0x29c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2204      	movs	r2, #4
 8005d22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fb fd87 	bl	8001840 <ip4_route>
 8005d32:	4601      	mov	r1, r0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff f814 	bl	8004d68 <tcp_eff_send_mss_netif>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d4c:	009a      	lsls	r2, r3, #2
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	f241 111c 	movw	r1, #4380	; 0x111c
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	bf38      	it	cc
 8005d5c:	460b      	movcc	r3, r1
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d204      	bcs.n	8005d6c <tcp_process+0x244>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	e00d      	b.n	8005d88 <tcp_process+0x260>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	f241 121c 	movw	r2, #4380	; 0x111c
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d904      	bls.n	8005d84 <tcp_process+0x25c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	e001      	b.n	8005d88 <tcp_process+0x260>
 8005d84:	f241 131c 	movw	r3, #4380	; 0x111c
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d121      	bne.n	8005ddc <tcp_process+0x2b4>
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <tcp_process+0x288>)
 8005d9a:	f240 3277 	movw	r2, #887	; 0x377
 8005d9e:	490e      	ldr	r1, [pc, #56]	; (8005dd8 <tcp_process+0x2b0>)
 8005da0:	4805      	ldr	r0, [pc, #20]	; (8005db8 <tcp_process+0x290>)
 8005da2:	f008 feed 	bl	800eb80 <iprintf>
 8005da6:	2000      	movs	r0, #0
 8005da8:	f008 ffec 	bl	800ed84 <fflush>
 8005dac:	f008 ff31 	bl	800ec12 <abort>
 8005db0:	08010ee8 	.word	0x08010ee8
 8005db4:	08011110 	.word	0x08011110
 8005db8:	08010f24 	.word	0x08010f24
 8005dbc:	200005a4 	.word	0x200005a4
 8005dc0:	2000059c 	.word	0x2000059c
 8005dc4:	20000598 	.word	0x20000598
 8005dc8:	0801112c 	.word	0x0801112c
 8005dcc:	200005a5 	.word	0x200005a5
 8005dd0:	200010b8 	.word	0x200010b8
 8005dd4:	20000588 	.word	0x20000588
 8005dd8:	0801114c 	.word	0x0801114c
        --pcb->snd_queuelen;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d116      	bne.n	8005e26 <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfc:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <tcp_process+0x2f4>
 8005e04:	4b9b      	ldr	r3, [pc, #620]	; (8006074 <tcp_process+0x54c>)
 8005e06:	f240 327f 	movw	r2, #895	; 0x37f
 8005e0a:	499b      	ldr	r1, [pc, #620]	; (8006078 <tcp_process+0x550>)
 8005e0c:	489b      	ldr	r0, [pc, #620]	; (800607c <tcp_process+0x554>)
 8005e0e:	f008 feb7 	bl	800eb80 <iprintf>
 8005e12:	2000      	movs	r0, #0
 8005e14:	f008 ffb6 	bl	800ed84 <fflush>
 8005e18:	f008 fefb 	bl	800ec12 <abort>
          pcb->unsent = rseg->next;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e24:	e003      	b.n	8005e2e <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8005e2e:	69f8      	ldr	r0, [r7, #28]
 8005e30:	f7fe fc7c 	bl	800472c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <tcp_process+0x31e>
          pcb->rtime = -1;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e42:	861a      	strh	r2, [r3, #48]	; 0x30
 8005e44:	e006      	b.n	8005e54 <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <tcp_process+0x34c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6910      	ldr	r0, [r2, #16]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	76bb      	strb	r3, [r7, #26]
 8005e72:	e001      	b.n	8005e78 <tcp_process+0x350>
 8005e74:	2300      	movs	r3, #0
 8005e76:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8005e78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005e7c:	f113 0f0d 	cmn.w	r3, #13
 8005e80:	d102      	bne.n	8005e88 <tcp_process+0x360>
          return ERR_ABRT;
 8005e82:	f06f 030c 	mvn.w	r3, #12
 8005e86:	e260      	b.n	800634a <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8b5b      	ldrh	r3, [r3, #26]
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8005e96:	e24a      	b.n	800632e <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 8005e98:	4b79      	ldr	r3, [pc, #484]	; (8006080 <tcp_process+0x558>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8244 	beq.w	800632e <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005ea6:	4b77      	ldr	r3, [pc, #476]	; (8006084 <tcp_process+0x55c>)
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	4b77      	ldr	r3, [pc, #476]	; (8006088 <tcp_process+0x560>)
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4b76      	ldr	r3, [pc, #472]	; (800608c <tcp_process+0x564>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005eb6:	4b76      	ldr	r3, [pc, #472]	; (8006090 <tcp_process+0x568>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005eba:	885b      	ldrh	r3, [r3, #2]
 8005ebc:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005ebe:	4a74      	ldr	r2, [pc, #464]	; (8006090 <tcp_process+0x568>)
 8005ec0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	4b72      	ldr	r3, [pc, #456]	; (8006094 <tcp_process+0x56c>)
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4b72      	ldr	r3, [pc, #456]	; (8006098 <tcp_process+0x570>)
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fe34 	bl	8008b40 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	f200 8225 	bhi.w	800632e <tcp_process+0x806>
          pcb->rtime = 0;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f002 fb36 	bl	800855c <tcp_rexmit_rto>
      break;
 8005ef0:	e21d      	b.n	800632e <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 8005ef2:	4b63      	ldr	r3, [pc, #396]	; (8006080 <tcp_process+0x558>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	4b61      	ldr	r3, [pc, #388]	; (800608c <tcp_process+0x564>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	f040 8212 	bne.w	8006332 <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f002 fb4a 	bl	80085a8 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 8005f14:	e20d      	b.n	8006332 <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 8005f16:	4b5a      	ldr	r3, [pc, #360]	; (8006080 <tcp_process+0x558>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8207 	beq.w	8006332 <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8005f24:	4b57      	ldr	r3, [pc, #348]	; (8006084 <tcp_process+0x55c>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f2c0 8084 	blt.w	800603e <tcp_process+0x516>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f3a:	4b52      	ldr	r3, [pc, #328]	; (8006084 <tcp_process+0x55c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db7c      	blt.n	800603e <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2204      	movs	r2, #4
 8005f48:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <tcp_process+0x430>
            err = ERR_VAL;
 8005f52:	23fa      	movs	r3, #250	; 0xfa
 8005f54:	76bb      	strb	r3, [r7, #26]
 8005f56:	e022      	b.n	8005f9e <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <tcp_process+0x452>
 8005f62:	4b44      	ldr	r3, [pc, #272]	; (8006074 <tcp_process+0x54c>)
 8005f64:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8005f68:	494c      	ldr	r1, [pc, #304]	; (800609c <tcp_process+0x574>)
 8005f6a:	4844      	ldr	r0, [pc, #272]	; (800607c <tcp_process+0x554>)
 8005f6c:	f008 fe08 	bl	800eb80 <iprintf>
 8005f70:	2000      	movs	r0, #0
 8005f72:	f008 ff07 	bl	800ed84 <fflush>
 8005f76:	f008 fe4c 	bl	800ec12 <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <tcp_process+0x472>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6910      	ldr	r0, [r2, #16]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	76bb      	strb	r3, [r7, #26]
 8005f98:	e001      	b.n	8005f9e <tcp_process+0x476>
 8005f9a:	23f0      	movs	r3, #240	; 0xf0
 8005f9c:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 8005f9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <tcp_process+0x494>
            if (err != ERR_ABRT) {
 8005fa6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005faa:	f113 0f0d 	cmn.w	r3, #13
 8005fae:	d002      	beq.n	8005fb6 <tcp_process+0x48e>
              tcp_abort(pcb);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7fd fe8f 	bl	8003cd4 <tcp_abort>
            return ERR_ABRT;
 8005fb6:	f06f 030c 	mvn.w	r3, #12
 8005fba:	e1c6      	b.n	800634a <tcp_process+0x822>
          tcp_receive(pcb);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fae1 	bl	8006584 <tcp_receive>
          if (recv_acked != 0) {
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <tcp_process+0x578>)
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <tcp_process+0x4ae>
            recv_acked--;
 8005fca:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <tcp_process+0x578>)
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <tcp_process+0x578>)
 8005fd4:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fda:	009a      	lsls	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	f241 111c 	movw	r1, #4380	; 0x111c
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	bf38      	it	cc
 8005fea:	460b      	movcc	r3, r1
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d204      	bcs.n	8005ffa <tcp_process+0x4d2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	e00d      	b.n	8006016 <tcp_process+0x4ee>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	f241 121c 	movw	r2, #4380	; 0x111c
 8006004:	4293      	cmp	r3, r2
 8006006:	d904      	bls.n	8006012 <tcp_process+0x4ea>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b29b      	uxth	r3, r3
 8006010:	e001      	b.n	8006016 <tcp_process+0x4ee>
 8006012:	f241 131c 	movw	r3, #4380	; 0x111c
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800601c:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <tcp_process+0x57c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d024      	beq.n	8006072 <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8b5b      	ldrh	r3, [r3, #26]
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2207      	movs	r2, #7
 800603a:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800603c:	e019      	b.n	8006072 <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <tcp_process+0x55c>)
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <tcp_process+0x560>)
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	4b10      	ldr	r3, [pc, #64]	; (800608c <tcp_process+0x564>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <tcp_process+0x568>)
 8006050:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <tcp_process+0x568>)
 8006058:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800605a:	8812      	ldrh	r2, [r2, #0]
 800605c:	b292      	uxth	r2, r2
 800605e:	9202      	str	r2, [sp, #8]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <tcp_process+0x56c>)
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <tcp_process+0x570>)
 8006068:	4602      	mov	r2, r0
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f002 fd68 	bl	8008b40 <tcp_rst>
      break;
 8006070:	e15f      	b.n	8006332 <tcp_process+0x80a>
 8006072:	e15e      	b.n	8006332 <tcp_process+0x80a>
 8006074:	08010ee8 	.word	0x08010ee8
 8006078:	08011164 	.word	0x08011164
 800607c:	08010f24 	.word	0x08010f24
 8006080:	200005a4 	.word	0x200005a4
 8006084:	2000059c 	.word	0x2000059c
 8006088:	200005a2 	.word	0x200005a2
 800608c:	20000598 	.word	0x20000598
 8006090:	20000588 	.word	0x20000588
 8006094:	200006d4 	.word	0x200006d4
 8006098:	200006d8 	.word	0x200006d8
 800609c:	08011178 	.word	0x08011178
 80060a0:	200005a0 	.word	0x200005a0
 80060a4:	200005a5 	.word	0x200005a5
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa6b 	bl	8006584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80060ae:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <tcp_process+0x7b4>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 813d 	beq.w	8006336 <tcp_process+0x80e>
        tcp_ack_now(pcb);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8b5b      	ldrh	r3, [r3, #26]
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2207      	movs	r2, #7
 80060ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80060d0:	e131      	b.n	8006336 <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa56 	bl	8006584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <tcp_process+0x7b4>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d056      	beq.n	8006192 <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80060e4:	4b7e      	ldr	r3, [pc, #504]	; (80062e0 <tcp_process+0x7b8>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d045      	beq.n	800617c <tcp_process+0x654>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060f4:	4b7b      	ldr	r3, [pc, #492]	; (80062e4 <tcp_process+0x7bc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d13f      	bne.n	800617c <tcp_process+0x654>
            pcb->unsent == NULL) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006100:	2b00      	cmp	r3, #0
 8006102:	d13b      	bne.n	800617c <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8b5b      	ldrh	r3, [r3, #26]
 8006108:	f043 0302 	orr.w	r3, r3, #2
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe fd02 	bl	8004b1c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006118:	4b73      	ldr	r3, [pc, #460]	; (80062e8 <tcp_process+0x7c0>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	429a      	cmp	r2, r3
 8006120:	d105      	bne.n	800612e <tcp_process+0x606>
 8006122:	4b71      	ldr	r3, [pc, #452]	; (80062e8 <tcp_process+0x7c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a6f      	ldr	r2, [pc, #444]	; (80062e8 <tcp_process+0x7c0>)
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e013      	b.n	8006156 <tcp_process+0x62e>
 800612e:	4b6e      	ldr	r3, [pc, #440]	; (80062e8 <tcp_process+0x7c0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e00c      	b.n	8006150 <tcp_process+0x628>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d104      	bne.n	800614a <tcp_process+0x622>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	60da      	str	r2, [r3, #12]
 8006148:	e005      	b.n	8006156 <tcp_process+0x62e>
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ef      	bne.n	8006136 <tcp_process+0x60e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	4b63      	ldr	r3, [pc, #396]	; (80062ec <tcp_process+0x7c4>)
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	220a      	movs	r2, #10
 8006166:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8006168:	4b61      	ldr	r3, [pc, #388]	; (80062f0 <tcp_process+0x7c8>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	4a5f      	ldr	r2, [pc, #380]	; (80062f0 <tcp_process+0x7c8>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	f002 fead 	bl	8008ed4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800617a:	e0de      	b.n	800633a <tcp_process+0x812>
          tcp_ack_now(pcb);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8b5b      	ldrh	r3, [r3, #26]
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2208      	movs	r2, #8
 800618e:	751a      	strb	r2, [r3, #20]
      break;
 8006190:	e0d3      	b.n	800633a <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006192:	4b53      	ldr	r3, [pc, #332]	; (80062e0 <tcp_process+0x7b8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80cd 	beq.w	800633a <tcp_process+0x812>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061a4:	4b4f      	ldr	r3, [pc, #316]	; (80062e4 <tcp_process+0x7bc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	f040 80c6 	bne.w	800633a <tcp_process+0x812>
                 pcb->unsent == NULL) {
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 80c1 	bne.w	800633a <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2206      	movs	r2, #6
 80061bc:	751a      	strb	r2, [r3, #20]
      break;
 80061be:	e0bc      	b.n	800633a <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f9df 	bl	8006584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80061c6:	4b45      	ldr	r3, [pc, #276]	; (80062dc <tcp_process+0x7b4>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80b5 	beq.w	800633e <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8b5b      	ldrh	r3, [r3, #26]
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe fc9a 	bl	8004b1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80061e8:	4b3f      	ldr	r3, [pc, #252]	; (80062e8 <tcp_process+0x7c0>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d105      	bne.n	80061fe <tcp_process+0x6d6>
 80061f2:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <tcp_process+0x7c0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <tcp_process+0x7c0>)
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e013      	b.n	8006226 <tcp_process+0x6fe>
 80061fe:	4b3a      	ldr	r3, [pc, #232]	; (80062e8 <tcp_process+0x7c0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e00c      	b.n	8006220 <tcp_process+0x6f8>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d104      	bne.n	800621a <tcp_process+0x6f2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	e005      	b.n	8006226 <tcp_process+0x6fe>
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1ef      	bne.n	8006206 <tcp_process+0x6de>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <tcp_process+0x7c4>)
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	220a      	movs	r2, #10
 8006236:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006238:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <tcp_process+0x7c8>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60da      	str	r2, [r3, #12]
 8006240:	4a2b      	ldr	r2, [pc, #172]	; (80062f0 <tcp_process+0x7c8>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f002 fe45 	bl	8008ed4 <tcp_timer_needed>
      }
      break;
 800624a:	e078      	b.n	800633e <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f999 	bl	8006584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006252:	4b23      	ldr	r3, [pc, #140]	; (80062e0 <tcp_process+0x7b8>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b00      	cmp	r3, #0
 800625c:	d071      	beq.n	8006342 <tcp_process+0x81a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <tcp_process+0x7bc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d16b      	bne.n	8006342 <tcp_process+0x81a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d167      	bne.n	8006342 <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fe fc52 	bl	8004b1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <tcp_process+0x7c0>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d105      	bne.n	800628e <tcp_process+0x766>
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <tcp_process+0x7c0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <tcp_process+0x7c0>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	e013      	b.n	80062b6 <tcp_process+0x78e>
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <tcp_process+0x7c0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	e00c      	b.n	80062b0 <tcp_process+0x788>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d104      	bne.n	80062aa <tcp_process+0x782>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	e005      	b.n	80062b6 <tcp_process+0x78e>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ef      	bne.n	8006296 <tcp_process+0x76e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <tcp_process+0x7c4>)
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	220a      	movs	r2, #10
 80062c6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <tcp_process+0x7c8>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
 80062d0:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <tcp_process+0x7c8>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	f002 fdfd 	bl	8008ed4 <tcp_timer_needed>
      }
      break;
 80062da:	e032      	b.n	8006342 <tcp_process+0x81a>
 80062dc:	200005a5 	.word	0x200005a5
 80062e0:	200005a4 	.word	0x200005a4
 80062e4:	2000059c 	.word	0x2000059c
 80062e8:	200010b4 	.word	0x200010b4
 80062ec:	200010b0 	.word	0x200010b0
 80062f0:	200010c4 	.word	0x200010c4
    case LAST_ACK:
      tcp_receive(pcb);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f945 	bl	8006584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80062fa:	4b16      	ldr	r3, [pc, #88]	; (8006354 <tcp_process+0x82c>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01f      	beq.n	8006346 <tcp_process+0x81e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <tcp_process+0x830>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d119      	bne.n	8006346 <tcp_process+0x81e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d115      	bne.n	8006346 <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <tcp_process+0x834>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f043 0310 	orr.w	r3, r3, #16
 8006322:	b2da      	uxtb	r2, r3
 8006324:	4b0d      	ldr	r3, [pc, #52]	; (800635c <tcp_process+0x834>)
 8006326:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006328:	e00d      	b.n	8006346 <tcp_process+0x81e>
    default:
      break;
 800632a:	bf00      	nop
 800632c:	e00c      	b.n	8006348 <tcp_process+0x820>
      break;
 800632e:	bf00      	nop
 8006330:	e00a      	b.n	8006348 <tcp_process+0x820>
      break;
 8006332:	bf00      	nop
 8006334:	e008      	b.n	8006348 <tcp_process+0x820>
      break;
 8006336:	bf00      	nop
 8006338:	e006      	b.n	8006348 <tcp_process+0x820>
      break;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <tcp_process+0x820>
      break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <tcp_process+0x820>
      break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <tcp_process+0x820>
      break;
 8006346:	bf00      	nop
  }
  return ERR_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3724      	adds	r7, #36	; 0x24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	bf00      	nop
 8006354:	200005a4 	.word	0x200005a4
 8006358:	2000059c 	.word	0x2000059c
 800635c:	200005a5 	.word	0x200005a5

08006360 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006360:	b5b0      	push	{r4, r5, r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <tcp_oos_insert_segment+0x28>
 8006370:	4b3d      	ldr	r3, [pc, #244]	; (8006468 <tcp_oos_insert_segment+0x108>)
 8006372:	f240 422c 	movw	r2, #1068	; 0x42c
 8006376:	493d      	ldr	r1, [pc, #244]	; (800646c <tcp_oos_insert_segment+0x10c>)
 8006378:	483d      	ldr	r0, [pc, #244]	; (8006470 <tcp_oos_insert_segment+0x110>)
 800637a:	f008 fc01 	bl	800eb80 <iprintf>
 800637e:	2000      	movs	r0, #0
 8006380:	f008 fd00 	bl	800ed84 <fflush>
 8006384:	f008 fc45 	bl	800ec12 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	899b      	ldrh	r3, [r3, #12]
 800638e:	b29b      	uxth	r3, r3
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa fee3 	bl	800115c <lwip_htons>
 8006396:	4603      	mov	r3, r0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d027      	beq.n	80063f2 <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f7fe f9ae 	bl	8004704 <tcp_segs_free>
    next = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	e055      	b.n	800645a <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	899b      	ldrh	r3, [r3, #12]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fa fed0 	bl	800115c <lwip_htons>
 80063bc:	4603      	mov	r3, r0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00c      	beq.n	80063e2 <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691c      	ldr	r4, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	899b      	ldrh	r3, [r3, #12]
 80063d2:	b29d      	uxth	r5, r3
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7fa fec1 	bl	800115c <lwip_htons>
 80063da:	4603      	mov	r3, r0
 80063dc:	432b      	orrs	r3, r5
 80063de:	b29b      	uxth	r3, r3
 80063e0:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7fe f99d 	bl	800472c <tcp_seg_free>
    while (next &&
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	891b      	ldrh	r3, [r3, #8]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <tcp_oos_insert_segment+0x114>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	441a      	add	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	8909      	ldrh	r1, [r1, #8]
 800640e:	440b      	add	r3, r1
 8006410:	1ad3      	subs	r3, r2, r3
    while (next &&
 8006412:	2b00      	cmp	r3, #0
 8006414:	dacb      	bge.n	80063ae <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01e      	beq.n	800645a <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	891b      	ldrh	r3, [r3, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <tcp_oos_insert_segment+0x114>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	440b      	add	r3, r1
 800642e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8006430:	2b00      	cmp	r3, #0
 8006432:	da12      	bge.n	800645a <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b29a      	uxth	r2, r3
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <tcp_oos_insert_segment+0x114>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	891b      	ldrh	r3, [r3, #8]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fc fc49 	bl	8002cec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bdb0      	pop	{r4, r5, r7, pc}
 8006468:	08010ee8 	.word	0x08010ee8
 800646c:	08011198 	.word	0x08011198
 8006470:	08010f24 	.word	0x08010f24
 8006474:	20000598 	.word	0x20000598

08006478 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8006486:	e048      	b.n	800651a <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fc fe56 	bl	8003148 <pbuf_clen>
 800649c:	4603      	mov	r3, r0
 800649e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80064a6:	8a7a      	ldrh	r2, [r7, #18]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d90b      	bls.n	80064c4 <tcp_free_acked_segments+0x4c>
 80064ac:	4b2f      	ldr	r3, [pc, #188]	; (800656c <tcp_free_acked_segments+0xf4>)
 80064ae:	f240 4264 	movw	r2, #1124	; 0x464
 80064b2:	492f      	ldr	r1, [pc, #188]	; (8006570 <tcp_free_acked_segments+0xf8>)
 80064b4:	482f      	ldr	r0, [pc, #188]	; (8006574 <tcp_free_acked_segments+0xfc>)
 80064b6:	f008 fb63 	bl	800eb80 <iprintf>
 80064ba:	2000      	movs	r0, #0
 80064bc:	f008 fc62 	bl	800ed84 <fflush>
 80064c0:	f008 fba7 	bl	800ec12 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80064ca:	8a7b      	ldrh	r3, [r7, #18]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	891a      	ldrh	r2, [r3, #8]
 80064da:	4b27      	ldr	r3, [pc, #156]	; (8006578 <tcp_free_acked_segments+0x100>)
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	4413      	add	r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	4b25      	ldr	r3, [pc, #148]	; (8006578 <tcp_free_acked_segments+0x100>)
 80064e4:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f7fe f920 	bl	800472c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10e      	bne.n	800651a <tcp_free_acked_segments+0xa2>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <tcp_free_acked_segments+0xa2>
 8006502:	4b1a      	ldr	r3, [pc, #104]	; (800656c <tcp_free_acked_segments+0xf4>)
 8006504:	f240 426f 	movw	r2, #1135	; 0x46f
 8006508:	491c      	ldr	r1, [pc, #112]	; (800657c <tcp_free_acked_segments+0x104>)
 800650a:	481a      	ldr	r0, [pc, #104]	; (8006574 <tcp_free_acked_segments+0xfc>)
 800650c:	f008 fb38 	bl	800eb80 <iprintf>
 8006510:	2000      	movs	r0, #0
 8006512:	f008 fc37 	bl	800ed84 <fflush>
 8006516:	f008 fb7c 	bl	800ec12 <abort>
  while (seg_list != NULL &&
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <tcp_free_acked_segments+0x108>)
 8006522:	681c      	ldr	r4, [r3, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa fe2b 	bl	8001186 <lwip_htonl>
 8006530:	4605      	mov	r5, r0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	891b      	ldrh	r3, [r3, #8]
 8006536:	461e      	mov	r6, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	899b      	ldrh	r3, [r3, #12]
 800653e:	b29b      	uxth	r3, r3
 8006540:	4618      	mov	r0, r3
 8006542:	f7fa fe0b 	bl	800115c <lwip_htons>
 8006546:	4603      	mov	r3, r0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <tcp_free_acked_segments+0xde>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <tcp_free_acked_segments+0xe0>
 8006556:	2300      	movs	r3, #0
 8006558:	4433      	add	r3, r6
 800655a:	442b      	add	r3, r5
 800655c:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 800655e:	2b00      	cmp	r3, #0
 8006560:	da92      	bge.n	8006488 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8006562:	68bb      	ldr	r3, [r7, #8]
}
 8006564:	4618      	mov	r0, r3
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656c:	08010ee8 	.word	0x08010ee8
 8006570:	080111c0 	.word	0x080111c0
 8006574:	08010f24 	.word	0x08010f24
 8006578:	200005a0 	.word	0x200005a0
 800657c:	080111e8 	.word	0x080111e8
 8006580:	2000059c 	.word	0x2000059c

08006584 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006584:	b5b0      	push	{r4, r5, r7, lr}
 8006586:	b094      	sub	sp, #80	; 0x50
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <tcp_receive+0x26>
 8006592:	4bab      	ldr	r3, [pc, #684]	; (8006840 <tcp_receive+0x2bc>)
 8006594:	f240 4287 	movw	r2, #1159	; 0x487
 8006598:	49aa      	ldr	r1, [pc, #680]	; (8006844 <tcp_receive+0x2c0>)
 800659a:	48ab      	ldr	r0, [pc, #684]	; (8006848 <tcp_receive+0x2c4>)
 800659c:	f008 faf0 	bl	800eb80 <iprintf>
 80065a0:	2000      	movs	r0, #0
 80065a2:	f008 fbef 	bl	800ed84 <fflush>
 80065a6:	f008 fb34 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7d1b      	ldrb	r3, [r3, #20]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d80b      	bhi.n	80065ca <tcp_receive+0x46>
 80065b2:	4ba3      	ldr	r3, [pc, #652]	; (8006840 <tcp_receive+0x2bc>)
 80065b4:	f44f 6291 	mov.w	r2, #1160	; 0x488
 80065b8:	49a4      	ldr	r1, [pc, #656]	; (800684c <tcp_receive+0x2c8>)
 80065ba:	48a3      	ldr	r0, [pc, #652]	; (8006848 <tcp_receive+0x2c4>)
 80065bc:	f008 fae0 	bl	800eb80 <iprintf>
 80065c0:	2000      	movs	r0, #0
 80065c2:	f008 fbdf 	bl	800ed84 <fflush>
 80065c6:	f008 fb24 	bl	800ec12 <abort>

  if (flags & TCP_ACK) {
 80065ca:	4ba1      	ldr	r3, [pc, #644]	; (8006850 <tcp_receive+0x2cc>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8263 	beq.w	8006a9e <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	4413      	add	r3, r2
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ec:	4b99      	ldr	r3, [pc, #612]	; (8006854 <tcp_receive+0x2d0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db1b      	blt.n	800662e <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fa:	4b96      	ldr	r3, [pc, #600]	; (8006854 <tcp_receive+0x2d0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d106      	bne.n	8006610 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006606:	4b94      	ldr	r3, [pc, #592]	; (8006858 <tcp_receive+0x2d4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	db0e      	blt.n	800662e <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006614:	4b90      	ldr	r3, [pc, #576]	; (8006858 <tcp_receive+0x2d4>)
 8006616:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d125      	bne.n	8006668 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800661c:	4b8f      	ldr	r3, [pc, #572]	; (800685c <tcp_receive+0x2d8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	89db      	ldrh	r3, [r3, #14]
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800662a:	429a      	cmp	r2, r3
 800662c:	d91c      	bls.n	8006668 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800662e:	4b8b      	ldr	r3, [pc, #556]	; (800685c <tcp_receive+0x2d8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	89db      	ldrh	r3, [r3, #14]
 8006634:	b29a      	uxth	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006648:	429a      	cmp	r2, r3
 800664a:	d205      	bcs.n	8006658 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8006658:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <tcp_receive+0x2d0>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8006660:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <tcp_receive+0x2d4>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666c:	4b7a      	ldr	r3, [pc, #488]	; (8006858 <tcp_receive+0x2d4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	db58      	blt.n	8006728 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8006676:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <tcp_receive+0x2dc>)
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 81af 	bne.w	80069de <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800668a:	441a      	add	r2, r3
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	429a      	cmp	r2, r3
 8006690:	f040 81a5 	bne.w	80069de <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800669a:	2b00      	cmp	r3, #0
 800669c:	f2c0 819f 	blt.w	80069de <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a4:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <tcp_receive+0x2d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	f040 8198 	bne.w	80069de <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066b4:	3301      	adds	r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066be:	429a      	cmp	r2, r3
 80066c0:	d907      	bls.n	80066d2 <tcp_receive+0x14e>
                ++pcb->dupacks;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d91b      	bls.n	8006714 <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066e6:	4413      	add	r3, r2
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d30a      	bcc.n	800670a <tcp_receive+0x186>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066fe:	4413      	add	r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8006708:	e004      	b.n	8006714 <tcp_receive+0x190>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006710:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800671a:	2b02      	cmp	r3, #2
 800671c:	f240 815f 	bls.w	80069de <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 ffb3 	bl	800868c <tcp_rexmit_fast>
 8006726:	e15a      	b.n	80069de <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006728:	4b4b      	ldr	r3, [pc, #300]	; (8006858 <tcp_receive+0x2d4>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	f2c0 814d 	blt.w	80069d4 <tcp_receive+0x450>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800673e:	4b46      	ldr	r3, [pc, #280]	; (8006858 <tcp_receive+0x2d4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	f2c0 8145 	blt.w	80069d4 <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8b5b      	ldrh	r3, [r3, #26]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8b5b      	ldrh	r3, [r3, #26]
 800675a:	f023 0304 	bic.w	r3, r3, #4
 800675e:	b29a      	uxth	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006786:	10db      	asrs	r3, r3, #3
 8006788:	b21b      	sxth	r3, r3
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	4413      	add	r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	b21a      	sxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80067a0:	4b2d      	ldr	r3, [pc, #180]	; (8006858 <tcp_receive+0x2d4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <tcp_receive+0x2d4>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7d1b      	ldrb	r3, [r3, #20]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	f240 8096 	bls.w	80068f6 <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d244      	bcs.n	8006864 <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8b5b      	ldrh	r3, [r3, #26]
 80067de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <tcp_receive+0x266>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <tcp_receive+0x268>
 80067ea:	2302      	movs	r3, #2
 80067ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80067f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067fa:	fb12 f303 	smulbb	r3, r2, r3
 80067fe:	b29a      	uxth	r2, r3
 8006800:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006802:	4293      	cmp	r3, r2
 8006804:	bf28      	it	cs
 8006806:	4613      	movcs	r3, r2
 8006808:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006810:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006812:	4413      	add	r3, r2
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800681c:	429a      	cmp	r2, r3
 800681e:	d309      	bcc.n	8006834 <tcp_receive+0x2b0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006826:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006828:	4413      	add	r3, r2
 800682a:	b29a      	uxth	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8006832:	e060      	b.n	80068f6 <tcp_receive+0x372>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800683a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800683e:	e05a      	b.n	80068f6 <tcp_receive+0x372>
 8006840:	08010ee8 	.word	0x08010ee8
 8006844:	08011208 	.word	0x08011208
 8006848:	08010f24 	.word	0x08010f24
 800684c:	08011224 	.word	0x08011224
 8006850:	200005a4 	.word	0x200005a4
 8006854:	20000598 	.word	0x20000598
 8006858:	2000059c 	.word	0x2000059c
 800685c:	20000588 	.word	0x20000588
 8006860:	200005a2 	.word	0x200005a2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800686a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800686c:	4413      	add	r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006876:	429a      	cmp	r2, r3
 8006878:	d309      	bcc.n	800688e <tcp_receive+0x30a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8006880:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006882:	4413      	add	r3, r2
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800688c:	e004      	b.n	8006898 <tcp_receive+0x314>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d326      	bcc.n	80068f6 <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068c8:	4413      	add	r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d30a      	bcc.n	80068ec <tcp_receive+0x368>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068e0:	4413      	add	r3, r2
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80068ea:	e004      	b.n	80068f6 <tcp_receive+0x372>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fe:	4aa0      	ldr	r2, [pc, #640]	; (8006b80 <tcp_receive+0x5fc>)
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fdb9 	bl	8006478 <tcp_free_acked_segments>
 8006906:	4602      	mov	r2, r0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	4a9b      	ldr	r2, [pc, #620]	; (8006b84 <tcp_receive+0x600>)
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fdae 	bl	8006478 <tcp_free_acked_segments>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006930:	861a      	strh	r2, [r3, #48]	; 0x30
 8006932:	e002      	b.n	800693a <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006956:	4b8c      	ldr	r3, [pc, #560]	; (8006b88 <tcp_receive+0x604>)
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	4413      	add	r3, r2
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8b5b      	ldrh	r3, [r3, #26]
 8006968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696c:	2b00      	cmp	r3, #0
 800696e:	d035      	beq.n	80069dc <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	2b00      	cmp	r3, #0
 8006976:	d118      	bne.n	80069aa <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00c      	beq.n	800699a <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fa fbfc 	bl	8001186 <lwip_htonl>
 800698e:	4602      	mov	r2, r0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006994:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 8006996:	2b00      	cmp	r3, #0
 8006998:	db20      	blt.n	80069dc <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8b5b      	ldrh	r3, [r3, #26]
 800699e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80069a8:	e018      	b.n	80069dc <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fa fbe7 	bl	8001186 <lwip_htonl>
 80069b8:	4602      	mov	r2, r0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db0b      	blt.n	80069dc <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8b5b      	ldrh	r3, [r3, #26]
 80069c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80069d2:	e003      	b.n	80069dc <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 f8fb 	bl	8008bd0 <tcp_send_empty_ack>
 80069da:	e000      	b.n	80069de <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80069dc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d05b      	beq.n	8006a9e <tcp_receive+0x51a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	4b68      	ldr	r3, [pc, #416]	; (8006b8c <tcp_receive+0x608>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da54      	bge.n	8006a9e <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80069f4:	4b66      	ldr	r3, [pc, #408]	; (8006b90 <tcp_receive+0x60c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8006a08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006a12:	10db      	asrs	r3, r3, #3
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	b21a      	sxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8006a36:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	da05      	bge.n	8006a4a <tcp_receive+0x4c6>
        m = (s16_t) - m;
 8006a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a42:	425b      	negs	r3, r3
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8006a4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006a54:	109b      	asrs	r3, r3, #2
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a6e:	4413      	add	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	b21a      	sxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006a7e:	10db      	asrs	r3, r3, #3
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	b21a      	sxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <tcp_receive+0x610>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 850f 	beq.w	80074c6 <tcp_receive+0xf42>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	7d1b      	ldrb	r3, [r3, #20]
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	f200 850a 	bhi.w	80074c6 <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab6:	4b38      	ldr	r3, [pc, #224]	; (8006b98 <tcp_receive+0x614>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f2c0 809e 	blt.w	8006c00 <tcp_receive+0x67c>
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <tcp_receive+0x610>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4b33      	ldr	r3, [pc, #204]	; (8006b98 <tcp_receive+0x614>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	441a      	add	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f2c0 8090 	blt.w	8006c00 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8006ae0:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <tcp_receive+0x618>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aea:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <tcp_receive+0x614>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <tcp_receive+0x618>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <tcp_receive+0x58e>
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <tcp_receive+0x61c>)
 8006afc:	f240 529a 	movw	r2, #1434	; 0x59a
 8006b00:	4928      	ldr	r1, [pc, #160]	; (8006ba4 <tcp_receive+0x620>)
 8006b02:	4829      	ldr	r0, [pc, #164]	; (8006ba8 <tcp_receive+0x624>)
 8006b04:	f008 f83c 	bl	800eb80 <iprintf>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f008 f93b 	bl	800ed84 <fflush>
 8006b0e:	f008 f880 	bl	800ec12 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d90b      	bls.n	8006b34 <tcp_receive+0x5b0>
 8006b1c:	4b20      	ldr	r3, [pc, #128]	; (8006ba0 <tcp_receive+0x61c>)
 8006b1e:	f240 529b 	movw	r2, #1435	; 0x59b
 8006b22:	4922      	ldr	r1, [pc, #136]	; (8006bac <tcp_receive+0x628>)
 8006b24:	4820      	ldr	r0, [pc, #128]	; (8006ba8 <tcp_receive+0x624>)
 8006b26:	f008 f82b 	bl	800eb80 <iprintf>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f008 f92a 	bl	800ed84 <fflush>
 8006b30:	f008 f86f 	bl	800ec12 <abort>
      off = (u16_t)off32;
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <tcp_receive+0x618>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	891b      	ldrh	r3, [r3, #8]
 8006b40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d90b      	bls.n	8006b60 <tcp_receive+0x5dc>
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <tcp_receive+0x61c>)
 8006b4a:	f240 529d 	movw	r2, #1437	; 0x59d
 8006b4e:	4918      	ldr	r1, [pc, #96]	; (8006bb0 <tcp_receive+0x62c>)
 8006b50:	4815      	ldr	r0, [pc, #84]	; (8006ba8 <tcp_receive+0x624>)
 8006b52:	f008 f815 	bl	800eb80 <iprintf>
 8006b56:	2000      	movs	r0, #0
 8006b58:	f008 f914 	bl	800ed84 <fflush>
 8006b5c:	f008 f859 	bl	800ec12 <abort>
      inseg.len -= off;
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <tcp_receive+0x618>)
 8006b62:	891a      	ldrh	r2, [r3, #8]
 8006b64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <tcp_receive+0x618>)
 8006b6e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <tcp_receive+0x618>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	891a      	ldrh	r2, [r3, #8]
 8006b76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 8006b7e:	e029      	b.n	8006bd4 <tcp_receive+0x650>
 8006b80:	08011240 	.word	0x08011240
 8006b84:	08011248 	.word	0x08011248
 8006b88:	200005a0 	.word	0x200005a0
 8006b8c:	2000059c 	.word	0x2000059c
 8006b90:	200010b8 	.word	0x200010b8
 8006b94:	200005a2 	.word	0x200005a2
 8006b98:	20000598 	.word	0x20000598
 8006b9c:	20000574 	.word	0x20000574
 8006ba0:	08010ee8 	.word	0x08010ee8
 8006ba4:	08011250 	.word	0x08011250
 8006ba8:	08010f24 	.word	0x08010f24
 8006bac:	08011260 	.word	0x08011260
 8006bb0:	08011270 	.word	0x08011270
        off -= p->len;
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb6:	895b      	ldrh	r3, [r3, #10]
 8006bb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8006bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006bc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bca:	2200      	movs	r2, #0
 8006bcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8006bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	895b      	ldrh	r3, [r3, #10]
 8006bd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d8e9      	bhi.n	8006bb4 <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8006be0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006be4:	4619      	mov	r1, r3
 8006be6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006be8:	f7fc f9a2 	bl	8002f30 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006bec:	4b94      	ldr	r3, [pc, #592]	; (8006e40 <tcp_receive+0x8bc>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bf4:	4993      	ldr	r1, [pc, #588]	; (8006e44 <tcp_receive+0x8c0>)
 8006bf6:	600a      	str	r2, [r1, #0]
 8006bf8:	4a92      	ldr	r2, [pc, #584]	; (8006e44 <tcp_receive+0x8c0>)
 8006bfa:	6812      	ldr	r2, [r2, #0]
 8006bfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006bfe:	e00d      	b.n	8006c1c <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006c00:	4b90      	ldr	r3, [pc, #576]	; (8006e44 <tcp_receive+0x8c0>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da06      	bge.n	8006c1c <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8b5b      	ldrh	r3, [r3, #26]
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006c1c:	4b89      	ldr	r3, [pc, #548]	; (8006e44 <tcp_receive+0x8c0>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f2c0 8448 	blt.w	80074bc <tcp_receive+0xf38>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006c34:	441a      	add	r2, r3
 8006c36:	4b83      	ldr	r3, [pc, #524]	; (8006e44 <tcp_receive+0x8c0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f2c0 843b 	blt.w	80074bc <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c4a:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <tcp_receive+0x8c0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f040 82ab 	bne.w	80071aa <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006c54:	4b7a      	ldr	r3, [pc, #488]	; (8006e40 <tcp_receive+0x8bc>)
 8006c56:	891c      	ldrh	r4, [r3, #8]
 8006c58:	4b79      	ldr	r3, [pc, #484]	; (8006e40 <tcp_receive+0x8bc>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	899b      	ldrh	r3, [r3, #12]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fa fa7b 	bl	800115c <lwip_htons>
 8006c66:	4603      	mov	r3, r0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <tcp_receive+0x6f2>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <tcp_receive+0x6f4>
 8006c76:	2300      	movs	r3, #0
 8006c78:	4423      	add	r3, r4
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	4b72      	ldr	r3, [pc, #456]	; (8006e48 <tcp_receive+0x8c4>)
 8006c7e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c84:	4b70      	ldr	r3, [pc, #448]	; (8006e48 <tcp_receive+0x8c4>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d27a      	bcs.n	8006d82 <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006c8c:	4b6c      	ldr	r3, [pc, #432]	; (8006e40 <tcp_receive+0x8bc>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	899b      	ldrh	r3, [r3, #12]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fa fa61 	bl	800115c <lwip_htons>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01f      	beq.n	8006ce6 <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006ca6:	4b66      	ldr	r3, [pc, #408]	; (8006e40 <tcp_receive+0x8bc>)
 8006ca8:	691c      	ldr	r4, [r3, #16]
 8006caa:	4b65      	ldr	r3, [pc, #404]	; (8006e40 <tcp_receive+0x8bc>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	899b      	ldrh	r3, [r3, #12]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cb8:	b21d      	sxth	r5, r3
 8006cba:	4b61      	ldr	r3, [pc, #388]	; (8006e40 <tcp_receive+0x8bc>)
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	899b      	ldrh	r3, [r3, #12]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fa fa4a 	bl	800115c <lwip_htons>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fa fa41 	bl	800115c <lwip_htons>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	432b      	orrs	r3, r5
 8006ce0:	b21b      	sxth	r3, r3
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006cea:	4b55      	ldr	r3, [pc, #340]	; (8006e40 <tcp_receive+0x8bc>)
 8006cec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006cee:	4b54      	ldr	r3, [pc, #336]	; (8006e40 <tcp_receive+0x8bc>)
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	899b      	ldrh	r3, [r3, #12]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa fa30 	bl	800115c <lwip_htons>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <tcp_receive+0x790>
            inseg.len -= 1;
 8006d08:	4b4d      	ldr	r3, [pc, #308]	; (8006e40 <tcp_receive+0x8bc>)
 8006d0a:	891b      	ldrh	r3, [r3, #8]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	4b4b      	ldr	r3, [pc, #300]	; (8006e40 <tcp_receive+0x8bc>)
 8006d12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8006d14:	4b4a      	ldr	r3, [pc, #296]	; (8006e40 <tcp_receive+0x8bc>)
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	4b49      	ldr	r3, [pc, #292]	; (8006e40 <tcp_receive+0x8bc>)
 8006d1a:	891b      	ldrh	r3, [r3, #8]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fb ffe4 	bl	8002cec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006d24:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <tcp_receive+0x8bc>)
 8006d26:	891c      	ldrh	r4, [r3, #8]
 8006d28:	4b45      	ldr	r3, [pc, #276]	; (8006e40 <tcp_receive+0x8bc>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	899b      	ldrh	r3, [r3, #12]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa fa13 	bl	800115c <lwip_htons>
 8006d36:	4603      	mov	r3, r0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <tcp_receive+0x7c2>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <tcp_receive+0x7c4>
 8006d46:	2300      	movs	r3, #0
 8006d48:	4423      	add	r3, r4
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	4b3e      	ldr	r3, [pc, #248]	; (8006e48 <tcp_receive+0x8c4>)
 8006d4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8006d50:	4b3d      	ldr	r3, [pc, #244]	; (8006e48 <tcp_receive+0x8c4>)
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <tcp_receive+0x8c0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006d64:	440b      	add	r3, r1
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d00b      	beq.n	8006d82 <tcp_receive+0x7fe>
 8006d6a:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <tcp_receive+0x8c8>)
 8006d6c:	f240 52d2 	movw	r2, #1490	; 0x5d2
 8006d70:	4937      	ldr	r1, [pc, #220]	; (8006e50 <tcp_receive+0x8cc>)
 8006d72:	4838      	ldr	r0, [pc, #224]	; (8006e54 <tcp_receive+0x8d0>)
 8006d74:	f007 ff04 	bl	800eb80 <iprintf>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f008 f803 	bl	800ed84 <fflush>
 8006d7e:	f007 ff48 	bl	800ec12 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80ea 	beq.w	8006f60 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006d8c:	4b2c      	ldr	r3, [pc, #176]	; (8006e40 <tcp_receive+0x8bc>)
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	899b      	ldrh	r3, [r3, #12]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fa f9e1 	bl	800115c <lwip_htons>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d010      	beq.n	8006dc8 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8006da6:	e00a      	b.n	8006dbe <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dac:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8006db8:	6a38      	ldr	r0, [r7, #32]
 8006dba:	f7fd fcb7 	bl	800472c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <tcp_receive+0x824>
 8006dc6:	e0cb      	b.n	8006f60 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8006dce:	e050      	b.n	8006e72 <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	899b      	ldrh	r3, [r3, #12]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fa f9bf 	bl	800115c <lwip_htons>
 8006dde:	4603      	mov	r3, r0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03b      	beq.n	8006e62 <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <tcp_receive+0x8bc>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	899b      	ldrh	r3, [r3, #12]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fa f9b2 	bl	800115c <lwip_htons>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d12e      	bne.n	8006e62 <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8006e04:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <tcp_receive+0x8bc>)
 8006e06:	691c      	ldr	r4, [r3, #16]
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <tcp_receive+0x8bc>)
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	899b      	ldrh	r3, [r3, #12]
 8006e0e:	b29d      	uxth	r5, r3
 8006e10:	2001      	movs	r0, #1
 8006e12:	f7fa f9a3 	bl	800115c <lwip_htons>
 8006e16:	4603      	mov	r3, r0
 8006e18:	432b      	orrs	r3, r5
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006e1e:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <tcp_receive+0x8bc>)
 8006e20:	891c      	ldrh	r4, [r3, #8]
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <tcp_receive+0x8bc>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	899b      	ldrh	r3, [r3, #12]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa f996 	bl	800115c <lwip_htons>
 8006e30:	4603      	mov	r3, r0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <tcp_receive+0x8d4>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e00c      	b.n	8006e5a <tcp_receive+0x8d6>
 8006e40:	20000574 	.word	0x20000574
 8006e44:	20000598 	.word	0x20000598
 8006e48:	200005a2 	.word	0x200005a2
 8006e4c:	08010ee8 	.word	0x08010ee8
 8006e50:	08011280 	.word	0x08011280
 8006e54:	08010f24 	.word	0x08010f24
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4423      	add	r3, r4
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <tcp_receive+0xb58>)
 8006e60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8006e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e64:	61fb      	str	r3, [r7, #28]
              next = next->next;
 8006e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 8006e6c:	69f8      	ldr	r0, [r7, #28]
 8006e6e:	f7fd fc5d 	bl	800472c <tcp_seg_free>
            while (next &&
 8006e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8006e78:	4b98      	ldr	r3, [pc, #608]	; (80070dc <tcp_receive+0xb58>)
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4b98      	ldr	r3, [pc, #608]	; (80070e0 <tcp_receive+0xb5c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	441a      	add	r2, r3
 8006e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e8c:	8909      	ldrh	r1, [r1, #8]
 8006e8e:	440b      	add	r3, r1
 8006e90:	1ad3      	subs	r3, r2, r3
            while (next &&
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da9c      	bge.n	8006dd0 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8006e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05e      	beq.n	8006f5a <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	4b8e      	ldr	r3, [pc, #568]	; (80070dc <tcp_receive+0xb58>)
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4b8d      	ldr	r3, [pc, #564]	; (80070e0 <tcp_receive+0xb5c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	440b      	add	r3, r1
 8006eae:	1ad3      	subs	r3, r2, r3
            if (next &&
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da52      	bge.n	8006f5a <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	4b88      	ldr	r3, [pc, #544]	; (80070e0 <tcp_receive+0xb5c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	4b87      	ldr	r3, [pc, #540]	; (80070e4 <tcp_receive+0xb60>)
 8006ec8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006eca:	4b86      	ldr	r3, [pc, #536]	; (80070e4 <tcp_receive+0xb60>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	899b      	ldrh	r3, [r3, #12]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa f942 	bl	800115c <lwip_htons>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <tcp_receive+0x96c>
                inseg.len -= 1;
 8006ee4:	4b7f      	ldr	r3, [pc, #508]	; (80070e4 <tcp_receive+0xb60>)
 8006ee6:	891b      	ldrh	r3, [r3, #8]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	4b7d      	ldr	r3, [pc, #500]	; (80070e4 <tcp_receive+0xb60>)
 8006eee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8006ef0:	4b7c      	ldr	r3, [pc, #496]	; (80070e4 <tcp_receive+0xb60>)
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	4b7b      	ldr	r3, [pc, #492]	; (80070e4 <tcp_receive+0xb60>)
 8006ef6:	891b      	ldrh	r3, [r3, #8]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fb fef6 	bl	8002cec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006f00:	4b78      	ldr	r3, [pc, #480]	; (80070e4 <tcp_receive+0xb60>)
 8006f02:	891c      	ldrh	r4, [r3, #8]
 8006f04:	4b77      	ldr	r3, [pc, #476]	; (80070e4 <tcp_receive+0xb60>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	899b      	ldrh	r3, [r3, #12]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fa f925 	bl	800115c <lwip_htons>
 8006f12:	4603      	mov	r3, r0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <tcp_receive+0x99e>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <tcp_receive+0x9a0>
 8006f22:	2300      	movs	r3, #0
 8006f24:	4423      	add	r3, r4
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	4b6c      	ldr	r3, [pc, #432]	; (80070dc <tcp_receive+0xb58>)
 8006f2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8006f2c:	4b6b      	ldr	r3, [pc, #428]	; (80070dc <tcp_receive+0xb58>)
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b6b      	ldr	r3, [pc, #428]	; (80070e0 <tcp_receive+0xb5c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	441a      	add	r2, r3
 8006f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d00b      	beq.n	8006f5a <tcp_receive+0x9d6>
 8006f42:	4b69      	ldr	r3, [pc, #420]	; (80070e8 <tcp_receive+0xb64>)
 8006f44:	f240 6203 	movw	r2, #1539	; 0x603
 8006f48:	4968      	ldr	r1, [pc, #416]	; (80070ec <tcp_receive+0xb68>)
 8006f4a:	4869      	ldr	r0, [pc, #420]	; (80070f0 <tcp_receive+0xb6c>)
 8006f4c:	f007 fe18 	bl	800eb80 <iprintf>
 8006f50:	2000      	movs	r0, #0
 8006f52:	f007 ff17 	bl	800ed84 <fflush>
 8006f56:	f007 fe5c 	bl	800ec12 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f5e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8006f60:	4b5e      	ldr	r3, [pc, #376]	; (80070dc <tcp_receive+0xb58>)
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b5e      	ldr	r3, [pc, #376]	; (80070e0 <tcp_receive+0xb5c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	441a      	add	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f74:	4b59      	ldr	r3, [pc, #356]	; (80070dc <tcp_receive+0xb58>)
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d20b      	bcs.n	8006f94 <tcp_receive+0xa10>
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	; (80070e8 <tcp_receive+0xb64>)
 8006f7e:	f240 620d 	movw	r2, #1549	; 0x60d
 8006f82:	495c      	ldr	r1, [pc, #368]	; (80070f4 <tcp_receive+0xb70>)
 8006f84:	485a      	ldr	r0, [pc, #360]	; (80070f0 <tcp_receive+0xb6c>)
 8006f86:	f007 fdfb 	bl	800eb80 <iprintf>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f007 fefa 	bl	800ed84 <fflush>
 8006f90:	f007 fe3f 	bl	800ec12 <abort>
        pcb->rcv_wnd -= tcplen;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f98:	4b50      	ldr	r3, [pc, #320]	; (80070dc <tcp_receive+0xb58>)
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7fc fea1 	bl	8003cec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8006faa:	4b4e      	ldr	r3, [pc, #312]	; (80070e4 <tcp_receive+0xb60>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	891b      	ldrh	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <tcp_receive+0xa3e>
          recv_data = inseg.p;
 8006fb4:	4b4b      	ldr	r3, [pc, #300]	; (80070e4 <tcp_receive+0xb60>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4a4f      	ldr	r2, [pc, #316]	; (80070f8 <tcp_receive+0xb74>)
 8006fba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 8006fbc:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <tcp_receive+0xb60>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006fc2:	4b48      	ldr	r3, [pc, #288]	; (80070e4 <tcp_receive+0xb60>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	899b      	ldrh	r3, [r3, #12]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fa f8c6 	bl	800115c <lwip_htons>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80bc 	beq.w	8007156 <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8006fde:	4b47      	ldr	r3, [pc, #284]	; (80070fc <tcp_receive+0xb78>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	f043 0320 	orr.w	r3, r3, #32
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	4b44      	ldr	r3, [pc, #272]	; (80070fc <tcp_receive+0xb78>)
 8006fea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8006fec:	e0b3      	b.n	8007156 <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff2:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4a38      	ldr	r2, [pc, #224]	; (80070e0 <tcp_receive+0xb5c>)
 8006ffe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	891b      	ldrh	r3, [r3, #8]
 8007004:	461c      	mov	r4, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	899b      	ldrh	r3, [r3, #12]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa f8a4 	bl	800115c <lwip_htons>
 8007014:	4603      	mov	r3, r0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <tcp_receive+0xaa0>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <tcp_receive+0xaa2>
 8007024:	2300      	movs	r3, #0
 8007026:	4423      	add	r3, r4
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800702c:	441a      	add	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007036:	461c      	mov	r4, r3
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	891b      	ldrh	r3, [r3, #8]
 800703c:	461d      	mov	r5, r3
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	899b      	ldrh	r3, [r3, #12]
 8007044:	b29b      	uxth	r3, r3
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa f888 	bl	800115c <lwip_htons>
 800704c:	4603      	mov	r3, r0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <tcp_receive+0xad8>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <tcp_receive+0xada>
 800705c:	2300      	movs	r3, #0
 800705e:	442b      	add	r3, r5
 8007060:	429c      	cmp	r4, r3
 8007062:	d20b      	bcs.n	800707c <tcp_receive+0xaf8>
 8007064:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <tcp_receive+0xb64>)
 8007066:	f240 6232 	movw	r2, #1586	; 0x632
 800706a:	4925      	ldr	r1, [pc, #148]	; (8007100 <tcp_receive+0xb7c>)
 800706c:	4820      	ldr	r0, [pc, #128]	; (80070f0 <tcp_receive+0xb6c>)
 800706e:	f007 fd87 	bl	800eb80 <iprintf>
 8007072:	2000      	movs	r0, #0
 8007074:	f007 fe86 	bl	800ed84 <fflush>
 8007078:	f007 fdcb 	bl	800ec12 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	891b      	ldrh	r3, [r3, #8]
 8007080:	461c      	mov	r4, r3
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	899b      	ldrh	r3, [r3, #12]
 8007088:	b29b      	uxth	r3, r3
 800708a:	4618      	mov	r0, r3
 800708c:	f7fa f866 	bl	800115c <lwip_htons>
 8007090:	4603      	mov	r3, r0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <tcp_receive+0xb1c>
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <tcp_receive+0xb1e>
 80070a0:	2300      	movs	r3, #0
 80070a2:	18e1      	adds	r1, r4, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070a8:	b28b      	uxth	r3, r1
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fc fe1a 	bl	8003cec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	891b      	ldrh	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d027      	beq.n	8007112 <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <tcp_receive+0xb74>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01c      	beq.n	8007104 <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <tcp_receive+0xb74>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f7fc f87d 	bl	80031d4 <pbuf_cat>
 80070da:	e017      	b.n	800710c <tcp_receive+0xb88>
 80070dc:	200005a2 	.word	0x200005a2
 80070e0:	20000598 	.word	0x20000598
 80070e4:	20000574 	.word	0x20000574
 80070e8:	08010ee8 	.word	0x08010ee8
 80070ec:	080112b8 	.word	0x080112b8
 80070f0:	08010f24 	.word	0x08010f24
 80070f4:	080112f4 	.word	0x080112f4
 80070f8:	200005a8 	.word	0x200005a8
 80070fc:	200005a5 	.word	0x200005a5
 8007100:	08011314 	.word	0x08011314
            } else {
              recv_data = cseg->p;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4a73      	ldr	r2, [pc, #460]	; (80072d8 <tcp_receive+0xd54>)
 800710a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2200      	movs	r2, #0
 8007110:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	899b      	ldrh	r3, [r3, #12]
 8007118:	b29b      	uxth	r3, r3
 800711a:	4618      	mov	r0, r3
 800711c:	f7fa f81e 	bl	800115c <lwip_htons>
 8007120:	4603      	mov	r3, r0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800712c:	4b6b      	ldr	r3, [pc, #428]	; (80072dc <tcp_receive+0xd58>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f043 0320 	orr.w	r3, r3, #32
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4b69      	ldr	r3, [pc, #420]	; (80072dc <tcp_receive+0xd58>)
 8007138:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7d1b      	ldrb	r3, [r3, #20]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d102      	bne.n	8007148 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2207      	movs	r2, #7
 8007146:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8007150:	69b8      	ldr	r0, [r7, #24]
 8007152:	f7fd faeb 	bl	800472c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800716a:	429a      	cmp	r2, r3
 800716c:	f43f af3f 	beq.w	8006fee <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8b5b      	ldrh	r3, [r3, #26]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <tcp_receive+0xc16>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8b5b      	ldrh	r3, [r3, #26]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	835a      	strh	r2, [r3, #26]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8b5b      	ldrh	r3, [r3, #26]
 800718e:	f043 0302 	orr.w	r3, r3, #2
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007198:	e194      	b.n	80074c4 <tcp_receive+0xf40>
        tcp_ack(pcb);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8b5b      	ldrh	r3, [r3, #26]
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80071a8:	e18c      	b.n	80074c4 <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80071b2:	484b      	ldr	r0, [pc, #300]	; (80072e0 <tcp_receive+0xd5c>)
 80071b4:	f7fd fad2 	bl	800475c <tcp_seg_copy>
 80071b8:	4602      	mov	r2, r0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	675a      	str	r2, [r3, #116]	; 0x74
 80071be:	e179      	b.n	80074b4 <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ca:	e161      	b.n	8007490 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <tcp_receive+0xd60>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d122      	bne.n	8007220 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80071da:	4b41      	ldr	r3, [pc, #260]	; (80072e0 <tcp_receive+0xd5c>)
 80071dc:	891a      	ldrh	r2, [r3, #8]
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	891b      	ldrh	r3, [r3, #8]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	f240 8159 	bls.w	800749a <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 80071e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8156 	beq.w	800749e <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80071f2:	483b      	ldr	r0, [pc, #236]	; (80072e0 <tcp_receive+0xd5c>)
 80071f4:	f7fd fab2 	bl	800475c <tcp_seg_copy>
 80071f8:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8150 	beq.w	80074a2 <tcp_receive+0xf1e>
                  if (prev != NULL) {
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <tcp_receive+0xc8c>
                    prev->next = cseg;
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff f8a1 	bl	8006360 <tcp_oos_insert_segment>
                }
                break;
 800721e:	e140      	b.n	80074a2 <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d117      	bne.n	8007256 <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007226:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <tcp_receive+0xd60>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	da58      	bge.n	80072e8 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007236:	482a      	ldr	r0, [pc, #168]	; (80072e0 <tcp_receive+0xd5c>)
 8007238:	f7fd fa90 	bl	800475c <tcp_seg_copy>
 800723c:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8130 	beq.w	80074a6 <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800724c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff f886 	bl	8006360 <tcp_oos_insert_segment>
                  }
                  break;
 8007254:	e127      	b.n	80074a6 <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8007256:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <tcp_receive+0xd60>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	db3f      	blt.n	80072e8 <tcp_receive+0xd64>
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <tcp_receive+0xd60>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	db36      	blt.n	80072e8 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800727a:	4819      	ldr	r0, [pc, #100]	; (80072e0 <tcp_receive+0xd5c>)
 800727c:	f7fd fa6e 	bl	800475c <tcp_seg_copy>
 8007280:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8110 	beq.w	80074aa <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <tcp_receive+0xd60>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007296:	8909      	ldrh	r1, [r1, #8]
 8007298:	440b      	add	r3, r1
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	da12      	bge.n	80072c6 <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <tcp_receive+0xd60>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	891b      	ldrh	r3, [r3, #8]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fb fd13 	bl	8002cec <pbuf_realloc>
                    }
                    prev->next = cseg;
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80072cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072ce:	6938      	ldr	r0, [r7, #16]
 80072d0:	f7ff f846 	bl	8006360 <tcp_oos_insert_segment>
                  }
                  break;
 80072d4:	e0e9      	b.n	80074aa <tcp_receive+0xf26>
 80072d6:	bf00      	nop
 80072d8:	200005a8 	.word	0x200005a8
 80072dc:	200005a5 	.word	0x200005a5
 80072e0:	20000574 	.word	0x20000574
 80072e4:	20000598 	.word	0x20000598
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 80ca 	bne.w	800748a <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	4b81      	ldr	r3, [pc, #516]	; (8007504 <tcp_receive+0xf80>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007302:	2b00      	cmp	r3, #0
 8007304:	f280 80c1 	bge.w	800748a <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	899b      	ldrh	r3, [r3, #12]
 800730e:	b29b      	uxth	r3, r3
 8007310:	4618      	mov	r0, r3
 8007312:	f7f9 ff23 	bl	800115c <lwip_htons>
 8007316:	4603      	mov	r3, r0
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 80c5 	bne.w	80074ae <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007324:	4878      	ldr	r0, [pc, #480]	; (8007508 <tcp_receive+0xf84>)
 8007326:	f7fd fa19 	bl	800475c <tcp_seg_copy>
 800732a:	4602      	mov	r2, r0
 800732c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80bc 	beq.w	80074b2 <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800733a:	4b72      	ldr	r3, [pc, #456]	; (8007504 <tcp_receive+0xf80>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007346:	8909      	ldrh	r1, [r1, #8]
 8007348:	440b      	add	r3, r1
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	da12      	bge.n	8007376 <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007350:	4b6c      	ldr	r3, [pc, #432]	; (8007504 <tcp_receive+0xf80>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b29a      	uxth	r2, r3
 8007356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	b29b      	uxth	r3, r3
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	b29a      	uxth	r2, r3
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	891b      	ldrh	r3, [r3, #8]
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fb fcbb 	bl	8002cec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800737e:	441a      	add	r2, r3
 8007380:	4b62      	ldr	r3, [pc, #392]	; (800750c <tcp_receive+0xf88>)
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	4b5f      	ldr	r3, [pc, #380]	; (8007504 <tcp_receive+0xf80>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	440b      	add	r3, r1
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	f280 808f 	bge.w	80074b2 <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	899b      	ldrh	r3, [r3, #12]
 800739c:	b29b      	uxth	r3, r3
 800739e:	4618      	mov	r0, r3
 80073a0:	f7f9 fedc 	bl	800115c <lwip_htons>
 80073a4:	4603      	mov	r3, r0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d022      	beq.n	80073f6 <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691c      	ldr	r4, [r3, #16]
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	899b      	ldrh	r3, [r3, #12]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073c6:	b21d      	sxth	r5, r3
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	899b      	ldrh	r3, [r3, #12]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7f9 fec2 	bl	800115c <lwip_htons>
 80073d8:	4603      	mov	r3, r0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 feb9 	bl	800115c <lwip_htons>
 80073ea:	4603      	mov	r3, r0
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	432b      	orrs	r3, r5
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80073f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073fe:	b291      	uxth	r1, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007404:	440a      	add	r2, r1
 8007406:	b291      	uxth	r1, r2
 8007408:	4a3e      	ldr	r2, [pc, #248]	; (8007504 <tcp_receive+0xf80>)
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	b292      	uxth	r2, r2
 800740e:	1a8a      	subs	r2, r1, r2
 8007410:	b292      	uxth	r2, r2
 8007412:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	891b      	ldrh	r3, [r3, #8]
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fb fc62 	bl	8002cec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	891c      	ldrh	r4, [r3, #8]
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	b29b      	uxth	r3, r3
 8007438:	4618      	mov	r0, r3
 800743a:	f7f9 fe8f 	bl	800115c <lwip_htons>
 800743e:	4603      	mov	r3, r0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <tcp_receive+0xeca>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <tcp_receive+0xecc>
 800744e:	2300      	movs	r3, #0
 8007450:	4423      	add	r3, r4
 8007452:	b29a      	uxth	r2, r3
 8007454:	4b2d      	ldr	r3, [pc, #180]	; (800750c <tcp_receive+0xf88>)
 8007456:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8007458:	4b2c      	ldr	r3, [pc, #176]	; (800750c <tcp_receive+0xf88>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	4b29      	ldr	r3, [pc, #164]	; (8007504 <tcp_receive+0xf80>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	441a      	add	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800746c:	440b      	add	r3, r1
 800746e:	429a      	cmp	r2, r3
 8007470:	d01f      	beq.n	80074b2 <tcp_receive+0xf2e>
 8007472:	4b27      	ldr	r3, [pc, #156]	; (8007510 <tcp_receive+0xf8c>)
 8007474:	f240 7209 	movw	r2, #1801	; 0x709
 8007478:	4926      	ldr	r1, [pc, #152]	; (8007514 <tcp_receive+0xf90>)
 800747a:	4827      	ldr	r0, [pc, #156]	; (8007518 <tcp_receive+0xf94>)
 800747c:	f007 fb80 	bl	800eb80 <iprintf>
 8007480:	2000      	movs	r0, #0
 8007482:	f007 fc7f 	bl	800ed84 <fflush>
 8007486:	f007 fbc4 	bl	800ec12 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	f47f ae9a 	bne.w	80071cc <tcp_receive+0xc48>
 8007498:	e00c      	b.n	80074b4 <tcp_receive+0xf30>
                break;
 800749a:	bf00      	nop
 800749c:	e00a      	b.n	80074b4 <tcp_receive+0xf30>
                  break;
 800749e:	bf00      	nop
 80074a0:	e008      	b.n	80074b4 <tcp_receive+0xf30>
                break;
 80074a2:	bf00      	nop
 80074a4:	e006      	b.n	80074b4 <tcp_receive+0xf30>
                  break;
 80074a6:	bf00      	nop
 80074a8:	e004      	b.n	80074b4 <tcp_receive+0xf30>
                  break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <tcp_receive+0xf30>
                  break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80074b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fb8b 	bl	8008bd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80074ba:	e003      	b.n	80074c4 <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fb87 	bl	8008bd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80074c2:	e01b      	b.n	80074fc <tcp_receive+0xf78>
 80074c4:	e01a      	b.n	80074fc <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <tcp_receive+0xf80>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	db0b      	blt.n	80074ec <tcp_receive+0xf68>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80074dc:	441a      	add	r2, r3
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <tcp_receive+0xf80>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	425b      	negs	r3, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	3b01      	subs	r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da07      	bge.n	80074fc <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8b5b      	ldrh	r3, [r3, #26]
 80074f0:	f043 0302 	orr.w	r3, r3, #2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80074fa:	e7ff      	b.n	80074fc <tcp_receive+0xf78>
 80074fc:	bf00      	nop
 80074fe:	3750      	adds	r7, #80	; 0x50
 8007500:	46bd      	mov	sp, r7
 8007502:	bdb0      	pop	{r4, r5, r7, pc}
 8007504:	20000598 	.word	0x20000598
 8007508:	20000574 	.word	0x20000574
 800750c:	200005a2 	.word	0x200005a2
 8007510:	08010ee8 	.word	0x08010ee8
 8007514:	08011280 	.word	0x08011280
 8007518:	08010f24 	.word	0x08010f24

0800751c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <tcp_get_next_optbyte+0x5c>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	b291      	uxth	r1, r2
 800752a:	4a13      	ldr	r2, [pc, #76]	; (8007578 <tcp_get_next_optbyte+0x5c>)
 800752c:	8011      	strh	r1, [r2, #0]
 800752e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8007530:	4b12      	ldr	r3, [pc, #72]	; (800757c <tcp_get_next_optbyte+0x60>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <tcp_get_next_optbyte+0x26>
 8007538:	4b11      	ldr	r3, [pc, #68]	; (8007580 <tcp_get_next_optbyte+0x64>)
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	88fa      	ldrh	r2, [r7, #6]
 800753e:	429a      	cmp	r2, r3
 8007540:	d208      	bcs.n	8007554 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <tcp_get_next_optbyte+0x68>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	e00b      	b.n	800756c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <tcp_get_next_optbyte+0x64>)
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <tcp_get_next_optbyte+0x60>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	797b      	ldrb	r3, [r7, #5]
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000594 	.word	0x20000594
 800757c:	20000590 	.word	0x20000590
 8007580:	2000058e 	.word	0x2000058e
 8007584:	20000588 	.word	0x20000588

08007588 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <tcp_parseopt+0x26>
 8007596:	4b33      	ldr	r3, [pc, #204]	; (8007664 <tcp_parseopt+0xdc>)
 8007598:	f240 728d 	movw	r2, #1933	; 0x78d
 800759c:	4932      	ldr	r1, [pc, #200]	; (8007668 <tcp_parseopt+0xe0>)
 800759e:	4833      	ldr	r0, [pc, #204]	; (800766c <tcp_parseopt+0xe4>)
 80075a0:	f007 faee 	bl	800eb80 <iprintf>
 80075a4:	2000      	movs	r0, #0
 80075a6:	f007 fbed 	bl	800ed84 <fflush>
 80075aa:	f007 fb32 	bl	800ec12 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <tcp_parseopt+0xe8>)
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d053      	beq.n	800765e <tcp_parseopt+0xd6>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80075b6:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <tcp_parseopt+0xec>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e043      	b.n	8007646 <tcp_parseopt+0xbe>
      u8_t opt = tcp_get_next_optbyte();
 80075be:	f7ff ffad 	bl	800751c <tcp_get_next_optbyte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d03c      	beq.n	8007646 <tcp_parseopt+0xbe>
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d002      	beq.n	80075d6 <tcp_parseopt+0x4e>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d03f      	beq.n	8007654 <tcp_parseopt+0xcc>
 80075d4:	e026      	b.n	8007624 <tcp_parseopt+0x9c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80075d6:	f7ff ffa1 	bl	800751c <tcp_get_next_optbyte>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d13b      	bne.n	8007658 <tcp_parseopt+0xd0>
 80075e0:	4b24      	ldr	r3, [pc, #144]	; (8007674 <tcp_parseopt+0xec>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	3302      	adds	r3, #2
 80075e6:	4a22      	ldr	r2, [pc, #136]	; (8007670 <tcp_parseopt+0xe8>)
 80075e8:	8812      	ldrh	r2, [r2, #0]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	dc34      	bgt.n	8007658 <tcp_parseopt+0xd0>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80075ee:	f7ff ff95 	bl	800751c <tcp_get_next_optbyte>
 80075f2:	4603      	mov	r3, r0
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80075fa:	f7ff ff8f 	bl	800751c <tcp_get_next_optbyte>
 80075fe:	4603      	mov	r3, r0
 8007600:	b29a      	uxth	r2, r3
 8007602:	89bb      	ldrh	r3, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007608:	89bb      	ldrh	r3, [r7, #12]
 800760a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800760e:	d804      	bhi.n	800761a <tcp_parseopt+0x92>
 8007610:	89bb      	ldrh	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <tcp_parseopt+0x92>
 8007616:	89ba      	ldrh	r2, [r7, #12]
 8007618:	e001      	b.n	800761e <tcp_parseopt+0x96>
 800761a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8007622:	e010      	b.n	8007646 <tcp_parseopt+0xbe>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8007624:	f7ff ff7a 	bl	800751c <tcp_get_next_optbyte>
 8007628:	4603      	mov	r3, r0
 800762a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d914      	bls.n	800765c <tcp_parseopt+0xd4>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	b29a      	uxth	r2, r3
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <tcp_parseopt+0xec>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	4413      	add	r3, r2
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b02      	subs	r3, #2
 8007640:	b29a      	uxth	r2, r3
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <tcp_parseopt+0xec>)
 8007644:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <tcp_parseopt+0xec>)
 8007648:	881a      	ldrh	r2, [r3, #0]
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <tcp_parseopt+0xe8>)
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d3b5      	bcc.n	80075be <tcp_parseopt+0x36>
 8007652:	e004      	b.n	800765e <tcp_parseopt+0xd6>
          return;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <tcp_parseopt+0xd6>
            return;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <tcp_parseopt+0xd6>
            return;
 800765c:	bf00      	nop
      }
    }
  }
}
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	08010ee8 	.word	0x08010ee8
 8007668:	08011338 	.word	0x08011338
 800766c:	08010f24 	.word	0x08010f24
 8007670:	2000058c 	.word	0x2000058c
 8007674:	20000594 	.word	0x20000594

08007678 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <tcp_trigger_input_pcb_close+0x1c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f043 0310 	orr.w	r3, r3, #16
 8007684:	b2da      	uxtb	r2, r3
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <tcp_trigger_input_pcb_close+0x1c>)
 8007688:	701a      	strb	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	200005a5 	.word	0x200005a5

08007698 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <tcp_route+0x28>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7a1b      	ldrb	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d006      	beq.n	80076c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	7a1b      	ldrb	r3, [r3, #8]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fb f97c 	bl	80029b4 <netif_get_by_index>
 80076bc:	4603      	mov	r3, r0
 80076be:	e003      	b.n	80076c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fa f8bd 	bl	8001840 <ip4_route>
 80076c6:	4603      	mov	r3, r0
  }
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <tcp_create_segment+0x2c>
 80076e6:	4b4e      	ldr	r3, [pc, #312]	; (8007820 <tcp_create_segment+0x150>)
 80076e8:	22a6      	movs	r2, #166	; 0xa6
 80076ea:	494e      	ldr	r1, [pc, #312]	; (8007824 <tcp_create_segment+0x154>)
 80076ec:	484e      	ldr	r0, [pc, #312]	; (8007828 <tcp_create_segment+0x158>)
 80076ee:	f007 fa47 	bl	800eb80 <iprintf>
 80076f2:	2000      	movs	r0, #0
 80076f4:	f007 fb46 	bl	800ed84 <fflush>
 80076f8:	f007 fa8b 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <tcp_create_segment+0x48>
 8007702:	4b47      	ldr	r3, [pc, #284]	; (8007820 <tcp_create_segment+0x150>)
 8007704:	22a7      	movs	r2, #167	; 0xa7
 8007706:	4949      	ldr	r1, [pc, #292]	; (800782c <tcp_create_segment+0x15c>)
 8007708:	4847      	ldr	r0, [pc, #284]	; (8007828 <tcp_create_segment+0x158>)
 800770a:	f007 fa39 	bl	800eb80 <iprintf>
 800770e:	2000      	movs	r0, #0
 8007710:	f007 fb38 	bl	800ed84 <fflush>
 8007714:	f007 fa7d 	bl	800ec12 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8007718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <tcp_create_segment+0x58>
 8007724:	2304      	movs	r3, #4
 8007726:	e000      	b.n	800772a <tcp_create_segment+0x5a>
 8007728:	2300      	movs	r3, #0
 800772a:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800772c:	2002      	movs	r0, #2
 800772e:	f7fa ff67 	bl	8002600 <memp_malloc>
 8007732:	6138      	str	r0, [r7, #16]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800773a:	68b8      	ldr	r0, [r7, #8]
 800773c:	f7fb fc82 	bl	8003044 <pbuf_free>
    return NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	e069      	b.n	8007818 <tcp_create_segment+0x148>
  }
  seg->flags = optflags;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800774a:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	891a      	ldrh	r2, [r3, #8]
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	b29b      	uxth	r3, r3
 8007760:	429a      	cmp	r2, r3
 8007762:	d20a      	bcs.n	800777a <tcp_create_segment+0xaa>
 8007764:	4b2e      	ldr	r3, [pc, #184]	; (8007820 <tcp_create_segment+0x150>)
 8007766:	22b3      	movs	r2, #179	; 0xb3
 8007768:	4931      	ldr	r1, [pc, #196]	; (8007830 <tcp_create_segment+0x160>)
 800776a:	482f      	ldr	r0, [pc, #188]	; (8007828 <tcp_create_segment+0x158>)
 800776c:	f007 fa08 	bl	800eb80 <iprintf>
 8007770:	2000      	movs	r0, #0
 8007772:	f007 fb07 	bl	800ed84 <fflush>
 8007776:	f007 fa4c 	bl	800ec12 <abort>
  seg->len = p->tot_len - optlen;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	891a      	ldrh	r2, [r3, #8]
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	b29b      	uxth	r3, r3
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	b29a      	uxth	r2, r3
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2200      	movs	r2, #0
 800778e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8007790:	2114      	movs	r1, #20
 8007792:	68b8      	ldr	r0, [r7, #8]
 8007794:	f7fb fbbc 	bl	8002f10 <pbuf_add_header>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <tcp_create_segment+0xd8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800779e:	6938      	ldr	r0, [r7, #16]
 80077a0:	f7fc ffc4 	bl	800472c <tcp_seg_free>
    return NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e037      	b.n	8007818 <tcp_create_segment+0x148>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	691c      	ldr	r4, [r3, #16]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8adb      	ldrh	r3, [r3, #22]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7f9 fcce 	bl	800115c <lwip_htons>
 80077c0:	4603      	mov	r3, r0
 80077c2:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	691c      	ldr	r4, [r3, #16]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8b1b      	ldrh	r3, [r3, #24]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7f9 fcc5 	bl	800115c <lwip_htons>
 80077d2:	4603      	mov	r3, r0
 80077d4:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	691c      	ldr	r4, [r3, #16]
 80077da:	6838      	ldr	r0, [r7, #0]
 80077dc:	f7f9 fcd3 	bl	8001186 <lwip_htonl>
 80077e0:	4603      	mov	r3, r0
 80077e2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	691c      	ldr	r4, [r3, #16]
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3305      	adds	r3, #5
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	031b      	lsls	r3, r3, #12
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4618      	mov	r0, r3
 8007802:	f7f9 fcab 	bl	800115c <lwip_htons>
 8007806:	4603      	mov	r3, r0
 8007808:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2200      	movs	r2, #0
 8007810:	749a      	strb	r2, [r3, #18]
 8007812:	2200      	movs	r2, #0
 8007814:	74da      	strb	r2, [r3, #19]
  return seg;
 8007816:	693b      	ldr	r3, [r7, #16]
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd90      	pop	{r4, r7, pc}
 8007820:	08011354 	.word	0x08011354
 8007824:	08011378 	.word	0x08011378
 8007828:	08011398 	.word	0x08011398
 800782c:	080113c0 	.word	0x080113c0
 8007830:	080113e4 	.word	0x080113e4

08007834 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8007834:	b5b0      	push	{r4, r5, r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af02      	add	r7, sp, #8
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <tcp_split_unsent_seg+0x36>
 8007852:	4ba3      	ldr	r3, [pc, #652]	; (8007ae0 <tcp_split_unsent_seg+0x2ac>)
 8007854:	f240 324e 	movw	r2, #846	; 0x34e
 8007858:	49a2      	ldr	r1, [pc, #648]	; (8007ae4 <tcp_split_unsent_seg+0x2b0>)
 800785a:	48a3      	ldr	r0, [pc, #652]	; (8007ae8 <tcp_split_unsent_seg+0x2b4>)
 800785c:	f007 f990 	bl	800eb80 <iprintf>
 8007860:	2000      	movs	r0, #0
 8007862:	f007 fa8f 	bl	800ed84 <fflush>
 8007866:	f007 f9d4 	bl	800ec12 <abort>

  useg = pcb->unsent;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786e:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	e12d      	b.n	8007ad8 <tcp_split_unsent_seg+0x2a4>
  }

  if (split == 0) {
 800787c:	887b      	ldrh	r3, [r7, #2]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8007882:	4b97      	ldr	r3, [pc, #604]	; (8007ae0 <tcp_split_unsent_seg+0x2ac>)
 8007884:	f240 3256 	movw	r2, #854	; 0x356
 8007888:	4998      	ldr	r1, [pc, #608]	; (8007aec <tcp_split_unsent_seg+0x2b8>)
 800788a:	4897      	ldr	r0, [pc, #604]	; (8007ae8 <tcp_split_unsent_seg+0x2b4>)
 800788c:	f007 f978 	bl	800eb80 <iprintf>
 8007890:	2000      	movs	r0, #0
 8007892:	f007 fa77 	bl	800ed84 <fflush>
 8007896:	f007 f9bc 	bl	800ec12 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	891b      	ldrh	r3, [r3, #8]
 800789e:	887a      	ldrh	r2, [r7, #2]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d301      	bcc.n	80078a8 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e117      	b.n	8007ad8 <tcp_split_unsent_seg+0x2a4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078ac:	887a      	ldrh	r2, [r7, #2]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d90b      	bls.n	80078ca <tcp_split_unsent_seg+0x96>
 80078b2:	4b8b      	ldr	r3, [pc, #556]	; (8007ae0 <tcp_split_unsent_seg+0x2ac>)
 80078b4:	f240 325e 	movw	r2, #862	; 0x35e
 80078b8:	498d      	ldr	r1, [pc, #564]	; (8007af0 <tcp_split_unsent_seg+0x2bc>)
 80078ba:	488b      	ldr	r0, [pc, #556]	; (8007ae8 <tcp_split_unsent_seg+0x2b4>)
 80078bc:	f007 f960 	bl	800eb80 <iprintf>
 80078c0:	2000      	movs	r0, #0
 80078c2:	f007 fa5f 	bl	800ed84 <fflush>
 80078c6:	f007 f9a4 	bl	800ec12 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	891b      	ldrh	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <tcp_split_unsent_seg+0xb6>
 80078d2:	4b83      	ldr	r3, [pc, #524]	; (8007ae0 <tcp_split_unsent_seg+0x2ac>)
 80078d4:	f240 325f 	movw	r2, #863	; 0x35f
 80078d8:	4986      	ldr	r1, [pc, #536]	; (8007af4 <tcp_split_unsent_seg+0x2c0>)
 80078da:	4883      	ldr	r0, [pc, #524]	; (8007ae8 <tcp_split_unsent_seg+0x2b4>)
 80078dc:	f007 f950 	bl	800eb80 <iprintf>
 80078e0:	2000      	movs	r0, #0
 80078e2:	f007 fa4f 	bl	800ed84 <fflush>
 80078e6:	f007 f994 	bl	800ec12 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	7b1b      	ldrb	r3, [r3, #12]
 80078ee:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <tcp_split_unsent_seg+0xca>
 80078fa:	2304      	movs	r3, #4
 80078fc:	e000      	b.n	8007900 <tcp_split_unsent_seg+0xcc>
 80078fe:	2300      	movs	r3, #0
 8007900:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	891a      	ldrh	r2, [r3, #8]
 8007906:	887b      	ldrh	r3, [r7, #2]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	b29a      	uxth	r2, r3
 8007910:	89bb      	ldrh	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	f44f 7220 	mov.w	r2, #640	; 0x280
 800791a:	4619      	mov	r1, r3
 800791c:	2036      	movs	r0, #54	; 0x36
 800791e:	f7fb f8f3 	bl	8002b08 <pbuf_alloc>
 8007922:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80bc 	beq.w	8007aa4 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	891a      	ldrh	r2, [r3, #8]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	891b      	ldrh	r3, [r3, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	b29a      	uxth	r2, r3
 800793a:	887b      	ldrh	r3, [r7, #2]
 800793c:	4413      	add	r3, r2
 800793e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6858      	ldr	r0, [r3, #4]
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	18d1      	adds	r1, r2, r3
 800794c:	897b      	ldrh	r3, [r7, #10]
 800794e:	89ba      	ldrh	r2, [r7, #12]
 8007950:	f7fb fde8 	bl	8003524 <pbuf_copy_partial>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	89bb      	ldrh	r3, [r7, #12]
 800795a:	4293      	cmp	r3, r2
 800795c:	f040 80a4 	bne.w	8007aa8 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	899b      	ldrh	r3, [r3, #12]
 8007966:	b29b      	uxth	r3, r3
 8007968:	4618      	mov	r0, r3
 800796a:	f7f9 fbf7 	bl	800115c <lwip_htons>
 800796e:	4603      	mov	r3, r0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007976:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8007978:	2300      	movs	r3, #0
 800797a:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d007      	beq.n	8007996 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	f023 0308 	bic.w	r3, r3, #8
 800798c:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800798e:	7dbb      	ldrb	r3, [r7, #22]
 8007990:	f043 0308 	orr.w	r3, r3, #8
 8007994:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 80079a8:	7dbb      	ldrb	r3, [r7, #22]
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7f9 fbe5 	bl	8001186 <lwip_htonl>
 80079bc:	4602      	mov	r2, r0
 80079be:	887b      	ldrh	r3, [r7, #2]
 80079c0:	18d1      	adds	r1, r2, r3
 80079c2:	7dba      	ldrb	r2, [r7, #22]
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	460b      	mov	r3, r1
 80079ca:	69b9      	ldr	r1, [r7, #24]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fe7f 	bl	80076d0 <tcp_create_segment>
 80079d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 80079de:	e064      	b.n	8007aaa <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fb fbaf 	bl	8003148 <pbuf_clen>
 80079ea:	4603      	mov	r3, r0
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6858      	ldr	r0, [r3, #4]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	891a      	ldrh	r2, [r3, #8]
 8007a08:	89bb      	ldrh	r3, [r7, #12]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f7fb f96c 	bl	8002cec <pbuf_realloc>
  useg->len -= remainder;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	891a      	ldrh	r2, [r3, #8]
 8007a18:	89bb      	ldrh	r3, [r7, #12]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	691c      	ldr	r4, [r3, #16]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	899b      	ldrh	r3, [r3, #12]
 8007a2c:	b29d      	uxth	r5, r3
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f9 fb92 	bl	800115c <lwip_htons>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	432b      	orrs	r3, r5
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2200      	movs	r2, #0
 8007a44:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fb fb7c 	bl	8003148 <pbuf_clen>
 8007a50:	4603      	mov	r3, r0
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007a5a:	4413      	add	r3, r2
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fb fb6d 	bl	8003148 <pbuf_clen>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007a78:	4413      	add	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e019      	b.n	8007ad8 <tcp_split_unsent_seg+0x2a4>
    goto memerr;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <tcp_split_unsent_seg+0x276>
    goto memerr;
 8007aa8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <tcp_split_unsent_seg+0x294>
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <tcp_split_unsent_seg+0x2ac>)
 8007ab2:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8007ab6:	4910      	ldr	r1, [pc, #64]	; (8007af8 <tcp_split_unsent_seg+0x2c4>)
 8007ab8:	480b      	ldr	r0, [pc, #44]	; (8007ae8 <tcp_split_unsent_seg+0x2b4>)
 8007aba:	f007 f861 	bl	800eb80 <iprintf>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f007 f960 	bl	800ed84 <fflush>
 8007ac4:	f007 f8a5 	bl	800ec12 <abort>
  if (p != NULL) {
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <tcp_split_unsent_seg+0x2a0>
    pbuf_free(p);
 8007ace:	69b8      	ldr	r0, [r7, #24]
 8007ad0:	f7fb fab8 	bl	8003044 <pbuf_free>
  }

  return ERR_MEM;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bdb0      	pop	{r4, r5, r7, pc}
 8007ae0:	08011354 	.word	0x08011354
 8007ae4:	08011734 	.word	0x08011734
 8007ae8:	08011398 	.word	0x08011398
 8007aec:	08011758 	.word	0x08011758
 8007af0:	0801177c 	.word	0x0801177c
 8007af4:	0801178c 	.word	0x0801178c
 8007af8:	0801179c 	.word	0x0801179c

08007afc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8007afc:	b5b0      	push	{r4, r5, r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10b      	bne.n	8007b22 <tcp_send_fin+0x26>
 8007b0a:	4b23      	ldr	r3, [pc, #140]	; (8007b98 <tcp_send_fin+0x9c>)
 8007b0c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007b10:	4922      	ldr	r1, [pc, #136]	; (8007b9c <tcp_send_fin+0xa0>)
 8007b12:	4823      	ldr	r0, [pc, #140]	; (8007ba0 <tcp_send_fin+0xa4>)
 8007b14:	f007 f834 	bl	800eb80 <iprintf>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f007 f933 	bl	800ed84 <fflush>
 8007b1e:	f007 f878 	bl	800ec12 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d02d      	beq.n	8007b86 <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e002      	b.n	8007b38 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f8      	bne.n	8007b32 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	899b      	ldrh	r3, [r3, #12]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7f9 fb07 	bl	800115c <lwip_htons>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d115      	bne.n	8007b86 <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	691c      	ldr	r4, [r3, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	899b      	ldrh	r3, [r3, #12]
 8007b64:	b29d      	uxth	r5, r3
 8007b66:	2001      	movs	r0, #1
 8007b68:	f7f9 faf8 	bl	800115c <lwip_htons>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	432b      	orrs	r3, r5
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8b5b      	ldrh	r3, [r3, #26]
 8007b78:	f043 0320 	orr.w	r3, r3, #32
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e004      	b.n	8007b90 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007b86:	2101      	movs	r1, #1
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f80b 	bl	8007ba4 <tcp_enqueue_flags>
 8007b8e:	4603      	mov	r3, r0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bdb0      	pop	{r4, r5, r7, pc}
 8007b98:	08011354 	.word	0x08011354
 8007b9c:	080117a8 	.word	0x080117a8
 8007ba0:	08011398 	.word	0x08011398

08007ba4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <tcp_enqueue_flags+0x36>
 8007bc2:	4b6e      	ldr	r3, [pc, #440]	; (8007d7c <tcp_enqueue_flags+0x1d8>)
 8007bc4:	f240 4214 	movw	r2, #1044	; 0x414
 8007bc8:	496d      	ldr	r1, [pc, #436]	; (8007d80 <tcp_enqueue_flags+0x1dc>)
 8007bca:	486e      	ldr	r0, [pc, #440]	; (8007d84 <tcp_enqueue_flags+0x1e0>)
 8007bcc:	f006 ffd8 	bl	800eb80 <iprintf>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f007 f8d7 	bl	800ed84 <fflush>
 8007bd6:	f007 f81c 	bl	800ec12 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <tcp_enqueue_flags+0x54>
 8007be0:	4b66      	ldr	r3, [pc, #408]	; (8007d7c <tcp_enqueue_flags+0x1d8>)
 8007be2:	f240 4215 	movw	r2, #1045	; 0x415
 8007be6:	4968      	ldr	r1, [pc, #416]	; (8007d88 <tcp_enqueue_flags+0x1e4>)
 8007be8:	4866      	ldr	r0, [pc, #408]	; (8007d84 <tcp_enqueue_flags+0x1e0>)
 8007bea:	f006 ffc9 	bl	800eb80 <iprintf>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f007 f8c8 	bl	800ed84 <fflush>
 8007bf4:	f007 f80d 	bl	800ec12 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 8007c02:	2301      	movs	r3, #1
 8007c04:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <tcp_enqueue_flags+0x70>
 8007c10:	2304      	movs	r3, #4
 8007c12:	e000      	b.n	8007c16 <tcp_enqueue_flags+0x72>
 8007c14:	2300      	movs	r3, #0
 8007c16:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007c20:	4619      	mov	r1, r3
 8007c22:	2036      	movs	r0, #54	; 0x36
 8007c24:	f7fa ff70 	bl	8002b08 <pbuf_alloc>
 8007c28:	6138      	str	r0, [r7, #16]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <tcp_enqueue_flags+0xa0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8b5b      	ldrh	r3, [r3, #26]
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	e097      	b.n	8007d74 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	895a      	ldrh	r2, [r3, #10]
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d20b      	bcs.n	8007c68 <tcp_enqueue_flags+0xc4>
 8007c50:	4b4a      	ldr	r3, [pc, #296]	; (8007d7c <tcp_enqueue_flags+0x1d8>)
 8007c52:	f240 423e 	movw	r2, #1086	; 0x43e
 8007c56:	494d      	ldr	r1, [pc, #308]	; (8007d8c <tcp_enqueue_flags+0x1e8>)
 8007c58:	484a      	ldr	r0, [pc, #296]	; (8007d84 <tcp_enqueue_flags+0x1e0>)
 8007c5a:	f006 ff91 	bl	800eb80 <iprintf>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	f007 f890 	bl	800ed84 <fflush>
 8007c64:	f006 ffd5 	bl	800ec12 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	7ffb      	ldrb	r3, [r7, #31]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	460b      	mov	r3, r1
 8007c74:	6939      	ldr	r1, [r7, #16]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fd2a 	bl	80076d0 <tcp_create_segment>
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <tcp_enqueue_flags+0xf4>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8b5b      	ldrh	r3, [r3, #26]
 8007c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295
 8007c96:	e06d      	b.n	8007d74 <tcp_enqueue_flags+0x1d0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	891b      	ldrh	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <tcp_enqueue_flags+0x114>
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <tcp_enqueue_flags+0x1d8>)
 8007ca2:	f240 4247 	movw	r2, #1095	; 0x447
 8007ca6:	493a      	ldr	r1, [pc, #232]	; (8007d90 <tcp_enqueue_flags+0x1ec>)
 8007ca8:	4836      	ldr	r0, [pc, #216]	; (8007d84 <tcp_enqueue_flags+0x1e0>)
 8007caa:	f006 ff69 	bl	800eb80 <iprintf>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f007 f868 	bl	800ed84 <fflush>
 8007cb4:	f006 ffad 	bl	800ec12 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <tcp_enqueue_flags+0x124>
    pcb->unsent = seg;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	66da      	str	r2, [r3, #108]	; 0x6c
 8007cc6:	e00d      	b.n	8007ce4 <tcp_enqueue_flags+0x140>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e002      	b.n	8007cd6 <tcp_enqueue_flags+0x132>
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f8      	bne.n	8007cd0 <tcp_enqueue_flags+0x12c>
    useg->next = seg;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <tcp_enqueue_flags+0x15c>
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <tcp_enqueue_flags+0x166>
    pcb->snd_lbb++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <tcp_enqueue_flags+0x17e>
    tcp_set_flags(pcb, TF_FIN);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8b5b      	ldrh	r3, [r3, #26]
 8007d18:	f043 0320 	orr.w	r3, r3, #32
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fb fa0e 	bl	8003148 <pbuf_clen>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007d36:	4413      	add	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d013      	beq.n	8007d72 <tcp_enqueue_flags+0x1ce>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10f      	bne.n	8007d72 <tcp_enqueue_flags+0x1ce>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <tcp_enqueue_flags+0x1ce>
 8007d5a:	4b08      	ldr	r3, [pc, #32]	; (8007d7c <tcp_enqueue_flags+0x1d8>)
 8007d5c:	f240 426a 	movw	r2, #1130	; 0x46a
 8007d60:	490c      	ldr	r1, [pc, #48]	; (8007d94 <tcp_enqueue_flags+0x1f0>)
 8007d62:	4808      	ldr	r0, [pc, #32]	; (8007d84 <tcp_enqueue_flags+0x1e0>)
 8007d64:	f006 ff0c 	bl	800eb80 <iprintf>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f007 f80b 	bl	800ed84 <fflush>
 8007d6e:	f006 ff50 	bl	800ec12 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08011354 	.word	0x08011354
 8007d80:	080117c4 	.word	0x080117c4
 8007d84:	08011398 	.word	0x08011398
 8007d88:	0801181c 	.word	0x0801181c
 8007d8c:	0801183c 	.word	0x0801183c
 8007d90:	08011878 	.word	0x08011878
 8007d94:	080118a4 	.word	0x080118a4

08007d98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8007d98:	b5b0      	push	{r4, r5, r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <tcp_output+0x26>
 8007da6:	4ba9      	ldr	r3, [pc, #676]	; (800804c <tcp_output+0x2b4>)
 8007da8:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8007dac:	49a8      	ldr	r1, [pc, #672]	; (8008050 <tcp_output+0x2b8>)
 8007dae:	48a9      	ldr	r0, [pc, #676]	; (8008054 <tcp_output+0x2bc>)
 8007db0:	f006 fee6 	bl	800eb80 <iprintf>
 8007db4:	2000      	movs	r0, #0
 8007db6:	f006 ffe5 	bl	800ed84 <fflush>
 8007dba:	f006 ff2a 	bl	800ec12 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7d1b      	ldrb	r3, [r3, #20]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10b      	bne.n	8007dde <tcp_output+0x46>
 8007dc6:	4ba1      	ldr	r3, [pc, #644]	; (800804c <tcp_output+0x2b4>)
 8007dc8:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 8007dcc:	49a2      	ldr	r1, [pc, #648]	; (8008058 <tcp_output+0x2c0>)
 8007dce:	48a1      	ldr	r0, [pc, #644]	; (8008054 <tcp_output+0x2bc>)
 8007dd0:	f006 fed6 	bl	800eb80 <iprintf>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f006 ffd5 	bl	800ed84 <fflush>
 8007dda:	f006 ff1a 	bl	800ec12 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8007dde:	4b9f      	ldr	r3, [pc, #636]	; (800805c <tcp_output+0x2c4>)
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d101      	bne.n	8007dec <tcp_output+0x54>
    return ERR_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e1d8      	b.n	800819e <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d203      	bcs.n	8007e04 <tcp_output+0x6c>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e02:	e002      	b.n	8007e0a <tcp_output+0x72>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e0a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8b5b      	ldrh	r3, [r3, #26]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 81b1 	beq.w	8008188 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fed2 	bl	8008bd0 <tcp_send_empty_ack>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	e1b6      	b.n	800819e <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	461a      	mov	r2, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fc2d 	bl	8007698 <tcp_route>
 8007e3e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <tcp_output+0xb4>
    return ERR_RTE;
 8007e46:	f06f 0303 	mvn.w	r3, #3
 8007e4a:	e1a8      	b.n	800819e <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <tcp_output+0xc2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d111      	bne.n	8007e7e <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <tcp_output+0xce>
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	3304      	adds	r3, #4
 8007e64:	e000      	b.n	8007e68 <tcp_output+0xd0>
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <tcp_output+0xde>
      return ERR_RTE;
 8007e70:	f06f 0303 	mvn.w	r3, #3
 8007e74:	e193      	b.n	800819e <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7f9 f97e 	bl	8001186 <lwip_htonl>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e94:	8912      	ldrh	r2, [r2, #8]
 8007e96:	441a      	add	r2, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d927      	bls.n	8007eee <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d114      	bne.n	8007ed6 <tcp_output+0x13e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d110      	bne.n	8007ed6 <tcp_output+0x13e>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8b5b      	ldrh	r3, [r3, #26]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8154 	beq.w	800818c <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fe73 	bl	8008bd0 <tcp_send_empty_ack>
 8007eea:	4603      	mov	r3, r0
 8007eec:	e157      	b.n	800819e <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efa:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8123 	beq.w	800814a <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 8007f04:	e002      	b.n	8007f0c <tcp_output+0x174>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	623b      	str	r3, [r7, #32]
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1f8      	bne.n	8007f06 <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8007f14:	e119      	b.n	800814a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	899b      	ldrh	r3, [r3, #12]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f9 f91c 	bl	800115c <lwip_htons>
 8007f24:	4603      	mov	r3, r0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <tcp_output+0x1b0>
 8007f30:	4b46      	ldr	r3, [pc, #280]	; (800804c <tcp_output+0x2b4>)
 8007f32:	f240 523b 	movw	r2, #1339	; 0x53b
 8007f36:	494a      	ldr	r1, [pc, #296]	; (8008060 <tcp_output+0x2c8>)
 8007f38:	4846      	ldr	r0, [pc, #280]	; (8008054 <tcp_output+0x2bc>)
 8007f3a:	f006 fe21 	bl	800eb80 <iprintf>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f006 ff20 	bl	800ed84 <fflush>
 8007f44:	f006 fe65 	bl	800ec12 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01f      	beq.n	8007f90 <tcp_output+0x1f8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8b5b      	ldrh	r3, [r3, #26]
 8007f54:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d119      	bne.n	8007f90 <tcp_output+0x1f8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <tcp_output+0x1e4>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <tcp_output+0x1f8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f72:	891a      	ldrh	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d209      	bcs.n	8007f90 <tcp_output+0x1f8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <tcp_output+0x1f8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d901      	bls.n	8007f94 <tcp_output+0x1fc>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <tcp_output+0x1fe>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	8b5b      	ldrh	r3, [r3, #26]
 8007f9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80e6 	beq.w	8008174 <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7d1b      	ldrb	r3, [r3, #20]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d00c      	beq.n	8007fca <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	691c      	ldr	r4, [r3, #16]
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	899b      	ldrh	r3, [r3, #12]
 8007fba:	b29d      	uxth	r5, r3
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f7f9 f8cd 	bl	800115c <lwip_htons>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	432b      	orrs	r3, r5
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fd0:	f000 f910 	bl	80081f4 <tcp_output_segment>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8007fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8b5b      	ldrh	r3, [r3, #26]
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	835a      	strh	r2, [r3, #26]
      return err;
 8007fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff2:	e0d4      	b.n	800819e <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7d1b      	ldrb	r3, [r3, #20]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d006      	beq.n	8008018 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8b5b      	ldrh	r3, [r3, #26]
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	4618      	mov	r0, r3
 8008020:	f7f9 f8b1 	bl	8001186 <lwip_htonl>
 8008024:	4604      	mov	r4, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	891b      	ldrh	r3, [r3, #8]
 800802a:	461d      	mov	r5, r3
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	899b      	ldrh	r3, [r3, #12]
 8008032:	b29b      	uxth	r3, r3
 8008034:	4618      	mov	r0, r3
 8008036:	f7f9 f891 	bl	800115c <lwip_htons>
 800803a:	4603      	mov	r3, r0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <tcp_output+0x2cc>
 8008046:	2301      	movs	r3, #1
 8008048:	e00d      	b.n	8008066 <tcp_output+0x2ce>
 800804a:	bf00      	nop
 800804c:	08011354 	.word	0x08011354
 8008050:	080118cc 	.word	0x080118cc
 8008054:	08011398 	.word	0x08011398
 8008058:	080118e4 	.word	0x080118e4
 800805c:	200010c8 	.word	0x200010c8
 8008060:	0801190c 	.word	0x0801190c
 8008064:	2300      	movs	r3, #0
 8008066:	442b      	add	r3, r5
 8008068:	4423      	add	r3, r4
 800806a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	da02      	bge.n	800807e <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	891b      	ldrh	r3, [r3, #8]
 8008082:	461c      	mov	r4, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	899b      	ldrh	r3, [r3, #12]
 800808a:	b29b      	uxth	r3, r3
 800808c:	4618      	mov	r0, r3
 800808e:	f7f9 f865 	bl	800115c <lwip_htons>
 8008092:	4603      	mov	r3, r0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <tcp_output+0x30a>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <tcp_output+0x30c>
 80080a2:	2300      	movs	r3, #0
 80080a4:	4423      	add	r3, r4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d049      	beq.n	800813e <tcp_output+0x3a6>
      seg->next = NULL;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <tcp_output+0x32c>
        pcb->unacked = seg;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	623b      	str	r3, [r7, #32]
 80080c2:	e03f      	b.n	8008144 <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f9 f85b 	bl	8001186 <lwip_htonl>
 80080d0:	4604      	mov	r4, r0
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f9 f854 	bl	8001186 <lwip_htonl>
 80080de:	4603      	mov	r3, r0
 80080e0:	1ae3      	subs	r3, r4, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da24      	bge.n	8008130 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3370      	adds	r3, #112	; 0x70
 80080ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80080ec:	e002      	b.n	80080f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d011      	beq.n	8008120 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	f7f9 f83e 	bl	8001186 <lwip_htonl>
 800810a:	4604      	mov	r4, r0
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4618      	mov	r0, r3
 8008114:	f7f9 f837 	bl	8001186 <lwip_htonl>
 8008118:	4603      	mov	r3, r0
 800811a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800811c:	2b00      	cmp	r3, #0
 800811e:	dbe6      	blt.n	80080ee <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e009      	b.n	8008144 <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008134:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	e002      	b.n	8008144 <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800813e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008140:	f7fc faf4 	bl	800472c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d012      	beq.n	8008176 <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4618      	mov	r0, r3
 8008158:	f7f9 f815 	bl	8001186 <lwip_htonl>
 800815c:	4602      	mov	r2, r0
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008166:	8912      	ldrh	r2, [r2, #8]
 8008168:	441a      	add	r2, r3
  while (seg != NULL &&
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	429a      	cmp	r2, r3
 800816e:	f67f aed2 	bls.w	8007f16 <tcp_output+0x17e>
 8008172:	e000      	b.n	8008176 <tcp_output+0x3de>
      break;
 8008174:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8008186:	e002      	b.n	800818e <tcp_output+0x3f6>
    goto output_done;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <tcp_output+0x3f6>
    goto output_done;
 800818c:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8b5b      	ldrh	r3, [r3, #26]
 8008192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3728      	adds	r7, #40	; 0x28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bdb0      	pop	{r4, r5, r7, pc}
 80081a6:	bf00      	nop

080081a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <tcp_output_segment_busy+0x26>
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <tcp_output_segment_busy+0x40>)
 80081b8:	f240 529e 	movw	r2, #1438	; 0x59e
 80081bc:	490b      	ldr	r1, [pc, #44]	; (80081ec <tcp_output_segment_busy+0x44>)
 80081be:	480c      	ldr	r0, [pc, #48]	; (80081f0 <tcp_output_segment_busy+0x48>)
 80081c0:	f006 fcde 	bl	800eb80 <iprintf>
 80081c4:	2000      	movs	r0, #0
 80081c6:	f006 fddd 	bl	800ed84 <fflush>
 80081ca:	f006 fd22 	bl	800ec12 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	7b9b      	ldrb	r3, [r3, #14]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d001      	beq.n	80081dc <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	08011354 	.word	0x08011354
 80081ec:	08011924 	.word	0x08011924
 80081f0:	08011398 	.word	0x08011398

080081f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80081f4:	b5b0      	push	{r4, r5, r7, lr}
 80081f6:	b08c      	sub	sp, #48	; 0x30
 80081f8:	af04      	add	r7, sp, #16
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <tcp_output_segment+0x2a>
 8008206:	4b78      	ldr	r3, [pc, #480]	; (80083e8 <tcp_output_segment+0x1f4>)
 8008208:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800820c:	4977      	ldr	r1, [pc, #476]	; (80083ec <tcp_output_segment+0x1f8>)
 800820e:	4878      	ldr	r0, [pc, #480]	; (80083f0 <tcp_output_segment+0x1fc>)
 8008210:	f006 fcb6 	bl	800eb80 <iprintf>
 8008214:	2000      	movs	r0, #0
 8008216:	f006 fdb5 	bl	800ed84 <fflush>
 800821a:	f006 fcfa 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <tcp_output_segment+0x48>
 8008224:	4b70      	ldr	r3, [pc, #448]	; (80083e8 <tcp_output_segment+0x1f4>)
 8008226:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800822a:	4972      	ldr	r1, [pc, #456]	; (80083f4 <tcp_output_segment+0x200>)
 800822c:	4870      	ldr	r0, [pc, #448]	; (80083f0 <tcp_output_segment+0x1fc>)
 800822e:	f006 fca7 	bl	800eb80 <iprintf>
 8008232:	2000      	movs	r0, #0
 8008234:	f006 fda6 	bl	800ed84 <fflush>
 8008238:	f006 fceb 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <tcp_output_segment+0x66>
 8008242:	4b69      	ldr	r3, [pc, #420]	; (80083e8 <tcp_output_segment+0x1f4>)
 8008244:	f240 52be 	movw	r2, #1470	; 0x5be
 8008248:	496b      	ldr	r1, [pc, #428]	; (80083f8 <tcp_output_segment+0x204>)
 800824a:	4869      	ldr	r0, [pc, #420]	; (80083f0 <tcp_output_segment+0x1fc>)
 800824c:	f006 fc98 	bl	800eb80 <iprintf>
 8008250:	2000      	movs	r0, #0
 8008252:	f006 fd97 	bl	800ed84 <fflush>
 8008256:	f006 fcdc 	bl	800ec12 <abort>

  if (tcp_output_segment_busy(seg)) {
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff ffa4 	bl	80081a8 <tcp_output_segment_busy>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	e0ba      	b.n	80083e0 <tcp_output_segment+0x1ec>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	691c      	ldr	r4, [r3, #16]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	4618      	mov	r0, r3
 8008274:	f7f8 ff87 	bl	8001186 <lwip_htonl>
 8008278:	4603      	mov	r3, r0
 800827a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	691c      	ldr	r4, [r3, #16]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 ff69 	bl	800115c <lwip_htons>
 800828a:	4603      	mov	r3, r0
 800828c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008296:	441a      	add	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	3314      	adds	r3, #20
 80082a2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	7b1b      	ldrb	r3, [r3, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d015      	beq.n	80082dc <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3304      	adds	r3, #4
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	f44f 7006 	mov.w	r0, #536	; 0x218
 80082bc:	f7fc fd54 	bl	8004d68 <tcp_eff_send_mss_netif>
 80082c0:	4603      	mov	r3, r0
 80082c2:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80082c4:	8b7b      	ldrh	r3, [r7, #26]
 80082c6:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f8 ff5b 	bl	8001186 <lwip_htonl>
 80082d0:	4602      	mov	r2, r0
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	601a      	str	r2, [r3, #0]
    opts += 1;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	3304      	adds	r3, #4
 80082da:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da02      	bge.n	80082ec <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10c      	bne.n	800830e <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 80082f4:	4b41      	ldr	r3, [pc, #260]	; (80083fc <tcp_output_segment+0x208>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f7f8 ff3f 	bl	8001186 <lwip_htonl>
 8008308:	4602      	mov	r2, r0
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	461a      	mov	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	8951      	ldrh	r1, [r2, #10]
 8008328:	8b3a      	ldrh	r2, [r7, #24]
 800832a:	1a8a      	subs	r2, r1, r2
 800832c:	b292      	uxth	r2, r2
 800832e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	6852      	ldr	r2, [r2, #4]
 8008338:	8911      	ldrh	r1, [r2, #8]
 800833a:	8b3a      	ldrh	r2, [r7, #24]
 800833c:	1a8a      	subs	r2, r1, r2
 800833e:	b292      	uxth	r2, r2
 8008340:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	6912      	ldr	r2, [r2, #16]
 800834a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2200      	movs	r2, #0
 8008352:	741a      	strb	r2, [r3, #16]
 8008354:	2200      	movs	r2, #0
 8008356:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f103 0214 	add.w	r2, r3, #20
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	7b1b      	ldrb	r3, [r3, #12]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <tcp_output_segment+0x17c>
 800836c:	2304      	movs	r3, #4
 800836e:	e000      	b.n	8008372 <tcp_output_segment+0x17e>
 8008370:	2300      	movs	r3, #0
 8008372:	441a      	add	r2, r3
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	429a      	cmp	r2, r3
 8008378:	d00b      	beq.n	8008392 <tcp_output_segment+0x19e>
 800837a:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <tcp_output_segment+0x1f4>)
 800837c:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8008380:	491f      	ldr	r1, [pc, #124]	; (8008400 <tcp_output_segment+0x20c>)
 8008382:	481b      	ldr	r0, [pc, #108]	; (80083f0 <tcp_output_segment+0x1fc>)
 8008384:	f006 fbfc 	bl	800eb80 <iprintf>
 8008388:	2000      	movs	r0, #0
 800838a:	f006 fcfb 	bl	800ed84 <fflush>
 800838e:	f006 fc40 	bl	800ec12 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	691c      	ldr	r4, [r3, #16]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800839e:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	460b      	mov	r3, r1
 80083aa:	2106      	movs	r1, #6
 80083ac:	f7f9 f808 	bl	80013c0 <ip_chksum_pseudo>
 80083b0:	4603      	mov	r3, r0
 80083b2:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6858      	ldr	r0, [r3, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	1d1c      	adds	r4, r3, #4
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	7add      	ldrb	r5, [r3, #11]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	7a9b      	ldrb	r3, [r3, #10]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	2206      	movs	r2, #6
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	462b      	mov	r3, r5
 80083d2:	4622      	mov	r2, r4
 80083d4:	f7f9 fbe8 	bl	8001ba8 <ip4_output_if>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80083dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bdb0      	pop	{r4, r5, r7, pc}
 80083e8:	08011354 	.word	0x08011354
 80083ec:	0801194c 	.word	0x0801194c
 80083f0:	08011398 	.word	0x08011398
 80083f4:	0801196c 	.word	0x0801196c
 80083f8:	0801198c 	.word	0x0801198c
 80083fc:	200010b8 	.word	0x200010b8
 8008400:	080119b0 	.word	0x080119b0

08008404 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8008404:	b5b0      	push	{r4, r5, r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <tcp_rexmit_rto_prepare+0x26>
 8008412:	4b38      	ldr	r3, [pc, #224]	; (80084f4 <tcp_rexmit_rto_prepare+0xf0>)
 8008414:	f240 6267 	movw	r2, #1639	; 0x667
 8008418:	4937      	ldr	r1, [pc, #220]	; (80084f8 <tcp_rexmit_rto_prepare+0xf4>)
 800841a:	4838      	ldr	r0, [pc, #224]	; (80084fc <tcp_rexmit_rto_prepare+0xf8>)
 800841c:	f006 fbb0 	bl	800eb80 <iprintf>
 8008420:	2000      	movs	r0, #0
 8008422:	f006 fcaf 	bl	800ed84 <fflush>
 8008426:	f006 fbf4 	bl	800ec12 <abort>

  if (pcb->unacked == NULL) {
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 8008432:	f06f 0305 	mvn.w	r3, #5
 8008436:	e059      	b.n	80084ec <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	e00b      	b.n	8008458 <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff feb1 	bl	80081a8 <tcp_output_segment_busy>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800844c:	f06f 0305 	mvn.w	r3, #5
 8008450:	e04c      	b.n	80084ec <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1ef      	bne.n	8008440 <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f7ff fea1 	bl	80081a8 <tcp_output_segment_busy>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800846c:	f06f 0305 	mvn.w	r3, #5
 8008470:	e03c      	b.n	80084ec <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	895a      	ldrh	r2, [r3, #10]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	8b5b      	ldrh	r3, [r3, #26]
 800849e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7f8 fe69 	bl	8001186 <lwip_htonl>
 80084b4:	4604      	mov	r4, r0
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	891b      	ldrh	r3, [r3, #8]
 80084ba:	461d      	mov	r5, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	899b      	ldrh	r3, [r3, #12]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7f8 fe49 	bl	800115c <lwip_htons>
 80084ca:	4603      	mov	r3, r0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <tcp_rexmit_rto_prepare+0xd6>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <tcp_rexmit_rto_prepare+0xd8>
 80084da:	2300      	movs	r3, #0
 80084dc:	442b      	add	r3, r5
 80084de:	18e2      	adds	r2, r4, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bdb0      	pop	{r4, r5, r7, pc}
 80084f4:	08011354 	.word	0x08011354
 80084f8:	080119c4 	.word	0x080119c4
 80084fc:	08011398 	.word	0x08011398

08008500 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <tcp_rexmit_rto_commit+0x26>
 800850e:	4b10      	ldr	r3, [pc, #64]	; (8008550 <tcp_rexmit_rto_commit+0x50>)
 8008510:	f240 629c 	movw	r2, #1692	; 0x69c
 8008514:	490f      	ldr	r1, [pc, #60]	; (8008554 <tcp_rexmit_rto_commit+0x54>)
 8008516:	4810      	ldr	r0, [pc, #64]	; (8008558 <tcp_rexmit_rto_commit+0x58>)
 8008518:	f006 fb32 	bl	800eb80 <iprintf>
 800851c:	2000      	movs	r0, #0
 800851e:	f006 fc31 	bl	800ed84 <fflush>
 8008522:	f006 fb76 	bl	800ec12 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800852c:	2bff      	cmp	r3, #255	; 0xff
 800852e:	d007      	beq.n	8008540 <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008536:	3301      	adds	r3, #1
 8008538:	b2da      	uxtb	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fc29 	bl	8007d98 <tcp_output>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08011354 	.word	0x08011354
 8008554:	080119e8 	.word	0x080119e8
 8008558:	08011398 	.word	0x08011398

0800855c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <tcp_rexmit_rto+0x26>
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <tcp_rexmit_rto+0x40>)
 800856c:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8008570:	490b      	ldr	r1, [pc, #44]	; (80085a0 <tcp_rexmit_rto+0x44>)
 8008572:	480c      	ldr	r0, [pc, #48]	; (80085a4 <tcp_rexmit_rto+0x48>)
 8008574:	f006 fb04 	bl	800eb80 <iprintf>
 8008578:	2000      	movs	r0, #0
 800857a:	f006 fc03 	bl	800ed84 <fflush>
 800857e:	f006 fb48 	bl	800ec12 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff ff3e 	bl	8008404 <tcp_rexmit_rto_prepare>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ffb6 	bl	8008500 <tcp_rexmit_rto_commit>
  }
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	08011354 	.word	0x08011354
 80085a0:	08011a0c 	.word	0x08011a0c
 80085a4:	08011398 	.word	0x08011398

080085a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <tcp_rexmit+0x26>
 80085b6:	4b32      	ldr	r3, [pc, #200]	; (8008680 <tcp_rexmit+0xd8>)
 80085b8:	f240 62c5 	movw	r2, #1733	; 0x6c5
 80085bc:	4931      	ldr	r1, [pc, #196]	; (8008684 <tcp_rexmit+0xdc>)
 80085be:	4832      	ldr	r0, [pc, #200]	; (8008688 <tcp_rexmit+0xe0>)
 80085c0:	f006 fade 	bl	800eb80 <iprintf>
 80085c4:	2000      	movs	r0, #0
 80085c6:	f006 fbdd 	bl	800ed84 <fflush>
 80085ca:	f006 fb22 	bl	800ec12 <abort>

  if (pcb->unacked == NULL) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <tcp_rexmit+0x34>
    return ERR_VAL;
 80085d6:	f06f 0305 	mvn.w	r3, #5
 80085da:	e04c      	b.n	8008676 <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80085e2:	68b8      	ldr	r0, [r7, #8]
 80085e4:	f7ff fde0 	bl	80081a8 <tcp_output_segment_busy>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80085ee:	f06f 0305 	mvn.w	r3, #5
 80085f2:	e040      	b.n	8008676 <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	336c      	adds	r3, #108	; 0x6c
 8008600:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008602:	e002      	b.n	800860a <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d011      	beq.n	8008636 <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	4618      	mov	r0, r3
 800861c:	f7f8 fdb3 	bl	8001186 <lwip_htonl>
 8008620:	4604      	mov	r4, r0
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	f7f8 fdac 	bl	8001186 <lwip_htonl>
 800862e:	4603      	mov	r3, r0
 8008630:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008632:	2b00      	cmp	r3, #0
 8008634:	dbe6      	blt.n	8008604 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800865a:	2bff      	cmp	r3, #255	; 0xff
 800865c:	d007      	beq.n	800866e <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008664:	3301      	adds	r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bd90      	pop	{r4, r7, pc}
 800867e:	bf00      	nop
 8008680:	08011354 	.word	0x08011354
 8008684:	08011a28 	.word	0x08011a28
 8008688:	08011398 	.word	0x08011398

0800868c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <tcp_rexmit_fast+0x26>
 800869a:	4b31      	ldr	r3, [pc, #196]	; (8008760 <tcp_rexmit_fast+0xd4>)
 800869c:	f240 62fd 	movw	r2, #1789	; 0x6fd
 80086a0:	4930      	ldr	r1, [pc, #192]	; (8008764 <tcp_rexmit_fast+0xd8>)
 80086a2:	4831      	ldr	r0, [pc, #196]	; (8008768 <tcp_rexmit_fast+0xdc>)
 80086a4:	f006 fa6c 	bl	800eb80 <iprintf>
 80086a8:	2000      	movs	r0, #0
 80086aa:	f006 fb6b 	bl	800ed84 <fflush>
 80086ae:	f006 fab0 	bl	800ec12 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d04d      	beq.n	8008756 <tcp_rexmit_fast+0xca>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8b5b      	ldrh	r3, [r3, #26]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d147      	bne.n	8008756 <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff6e 	bl	80085a8 <tcp_rexmit>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d141      	bne.n	8008756 <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086de:	429a      	cmp	r2, r3
 80086e0:	d207      	bcs.n	80086f2 <tcp_rexmit_fast+0x66>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80086e8:	0fda      	lsrs	r2, r3, #31
 80086ea:	4413      	add	r3, r2
 80086ec:	105b      	asrs	r3, r3, #1
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	e006      	b.n	8008700 <tcp_rexmit_fast+0x74>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086f8:	0fda      	lsrs	r2, r3, #31
 80086fa:	4413      	add	r3, r2
 80086fc:	105b      	asrs	r3, r3, #1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	429a      	cmp	r2, r3
 8008716:	d206      	bcs.n	8008726 <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008730:	4619      	mov	r1, r3
 8008732:	0049      	lsls	r1, r1, #1
 8008734:	440b      	add	r3, r1
 8008736:	b29b      	uxth	r3, r3
 8008738:	4413      	add	r3, r2
 800873a:	b29a      	uxth	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8b5b      	ldrh	r3, [r3, #26]
 8008746:	f043 0304 	orr.w	r3, r3, #4
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08011354 	.word	0x08011354
 8008764:	08011a40 	.word	0x08011a40
 8008768:	08011398 	.word	0x08011398

0800876c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	817b      	strh	r3, [r7, #10]
 800877a:	4613      	mov	r3, r2
 800877c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800877e:	897a      	ldrh	r2, [r7, #10]
 8008780:	893b      	ldrh	r3, [r7, #8]
 8008782:	4413      	add	r3, r2
 8008784:	b29b      	uxth	r3, r3
 8008786:	3314      	adds	r3, #20
 8008788:	b29b      	uxth	r3, r3
 800878a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800878e:	4619      	mov	r1, r3
 8008790:	2022      	movs	r0, #34	; 0x22
 8008792:	f7fa f9b9 	bl	8002b08 <pbuf_alloc>
 8008796:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d053      	beq.n	8008846 <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	895b      	ldrh	r3, [r3, #10]
 80087a2:	461a      	mov	r2, r3
 80087a4:	897b      	ldrh	r3, [r7, #10]
 80087a6:	3314      	adds	r3, #20
 80087a8:	429a      	cmp	r2, r3
 80087aa:	da0b      	bge.n	80087c4 <tcp_output_alloc_header_common+0x58>
 80087ac:	4b28      	ldr	r3, [pc, #160]	; (8008850 <tcp_output_alloc_header_common+0xe4>)
 80087ae:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80087b2:	4928      	ldr	r1, [pc, #160]	; (8008854 <tcp_output_alloc_header_common+0xe8>)
 80087b4:	4828      	ldr	r0, [pc, #160]	; (8008858 <tcp_output_alloc_header_common+0xec>)
 80087b6:	f006 f9e3 	bl	800eb80 <iprintf>
 80087ba:	2000      	movs	r0, #0
 80087bc:	f006 fae2 	bl	800ed84 <fflush>
 80087c0:	f006 fa27 	bl	800ec12 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80087ca:	8c3b      	ldrh	r3, [r7, #32]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f8 fcc5 	bl	800115c <lwip_htons>
 80087d2:	4603      	mov	r3, r0
 80087d4:	461a      	mov	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80087da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087dc:	4618      	mov	r0, r3
 80087de:	f7f8 fcbd 	bl	800115c <lwip_htons>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7f8 fcc8 	bl	8001186 <lwip_htonl>
 80087f6:	4602      	mov	r2, r0
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80087fc:	897b      	ldrh	r3, [r7, #10]
 80087fe:	089b      	lsrs	r3, r3, #2
 8008800:	b29b      	uxth	r3, r3
 8008802:	3305      	adds	r3, #5
 8008804:	b29b      	uxth	r3, r3
 8008806:	031b      	lsls	r3, r3, #12
 8008808:	b29a      	uxth	r2, r3
 800880a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800880e:	b29b      	uxth	r3, r3
 8008810:	4313      	orrs	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	4618      	mov	r0, r3
 8008816:	f7f8 fca1 	bl	800115c <lwip_htons>
 800881a:	4603      	mov	r3, r0
 800881c:	461a      	mov	r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8008822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008824:	4618      	mov	r0, r3
 8008826:	f7f8 fc99 	bl	800115c <lwip_htons>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2200      	movs	r2, #0
 8008836:	741a      	strb	r2, [r3, #16]
 8008838:	2200      	movs	r2, #0
 800883a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	2200      	movs	r2, #0
 8008840:	749a      	strb	r2, [r3, #18]
 8008842:	2200      	movs	r2, #0
 8008844:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8008846:	697b      	ldr	r3, [r7, #20]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	08011354 	.word	0x08011354
 8008854:	08011a60 	.word	0x08011a60
 8008858:	08011398 	.word	0x08011398

0800885c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800885c:	b5b0      	push	{r4, r5, r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af04      	add	r7, sp, #16
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	607b      	str	r3, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	817b      	strh	r3, [r7, #10]
 800886a:	4613      	mov	r3, r2
 800886c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <tcp_output_alloc_header+0x30>
 8008874:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <tcp_output_alloc_header+0x78>)
 8008876:	f240 7246 	movw	r2, #1862	; 0x746
 800887a:	4917      	ldr	r1, [pc, #92]	; (80088d8 <tcp_output_alloc_header+0x7c>)
 800887c:	4817      	ldr	r0, [pc, #92]	; (80088dc <tcp_output_alloc_header+0x80>)
 800887e:	f006 f97f 	bl	800eb80 <iprintf>
 8008882:	2000      	movs	r0, #0
 8008884:	f006 fa7e 	bl	800ed84 <fflush>
 8008888:	f006 f9c3 	bl	800ec12 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8adb      	ldrh	r3, [r3, #22]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	8b12      	ldrh	r2, [r2, #24]
 8008898:	68f9      	ldr	r1, [r7, #12]
 800889a:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800889c:	893d      	ldrh	r5, [r7, #8]
 800889e:	897c      	ldrh	r4, [r7, #10]
 80088a0:	9103      	str	r1, [sp, #12]
 80088a2:	2110      	movs	r1, #16
 80088a4:	9102      	str	r1, [sp, #8]
 80088a6:	9201      	str	r2, [sp, #4]
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	462a      	mov	r2, r5
 80088ae:	4621      	mov	r1, r4
 80088b0:	f7ff ff5c 	bl	800876c <tcp_output_alloc_header_common>
 80088b4:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80088c4:	441a      	add	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bdb0      	pop	{r4, r5, r7, pc}
 80088d4:	08011354 	.word	0x08011354
 80088d8:	08011a90 	.word	0x08011a90
 80088dc:	08011398 	.word	0x08011398

080088e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4611      	mov	r1, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	460b      	mov	r3, r1
 80088f0:	71fb      	strb	r3, [r7, #7]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <tcp_output_fill_options+0x38>
 8008900:	4b1a      	ldr	r3, [pc, #104]	; (800896c <tcp_output_fill_options+0x8c>)
 8008902:	f240 725a 	movw	r2, #1882	; 0x75a
 8008906:	491a      	ldr	r1, [pc, #104]	; (8008970 <tcp_output_fill_options+0x90>)
 8008908:	481a      	ldr	r0, [pc, #104]	; (8008974 <tcp_output_fill_options+0x94>)
 800890a:	f006 f939 	bl	800eb80 <iprintf>
 800890e:	2000      	movs	r0, #0
 8008910:	f006 fa38 	bl	800ed84 <fflush>
 8008914:	f006 f97d 	bl	800ec12 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	3314      	adds	r3, #20
 8008922:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f103 0214 	add.w	r2, r3, #20
 800892a:	8bfb      	ldrh	r3, [r7, #30]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4619      	mov	r1, r3
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <tcp_output_fill_options+0x5e>
 800893a:	2304      	movs	r3, #4
 800893c:	e000      	b.n	8008940 <tcp_output_fill_options+0x60>
 800893e:	2300      	movs	r3, #0
 8008940:	440b      	add	r3, r1
 8008942:	441a      	add	r2, r3
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	429a      	cmp	r2, r3
 8008948:	d00b      	beq.n	8008962 <tcp_output_fill_options+0x82>
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <tcp_output_fill_options+0x8c>)
 800894c:	f240 7279 	movw	r2, #1913	; 0x779
 8008950:	4909      	ldr	r1, [pc, #36]	; (8008978 <tcp_output_fill_options+0x98>)
 8008952:	4808      	ldr	r0, [pc, #32]	; (8008974 <tcp_output_fill_options+0x94>)
 8008954:	f006 f914 	bl	800eb80 <iprintf>
 8008958:	2000      	movs	r0, #0
 800895a:	f006 fa13 	bl	800ed84 <fflush>
 800895e:	f006 f958 	bl	800ec12 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8008962:	bf00      	nop
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08011354 	.word	0x08011354
 8008970:	08011ab8 	.word	0x08011ab8
 8008974:	08011398 	.word	0x08011398
 8008978:	080119b0 	.word	0x080119b0

0800897c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <tcp_output_control_segment+0x2c>
 8008990:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <tcp_output_control_segment+0x64>)
 8008992:	f240 728a 	movw	r2, #1930	; 0x78a
 8008996:	4913      	ldr	r1, [pc, #76]	; (80089e4 <tcp_output_control_segment+0x68>)
 8008998:	4813      	ldr	r0, [pc, #76]	; (80089e8 <tcp_output_control_segment+0x6c>)
 800899a:	f006 f8f1 	bl	800eb80 <iprintf>
 800899e:	2000      	movs	r0, #0
 80089a0:	f006 f9f0 	bl	800ed84 <fflush>
 80089a4:	f006 f935 	bl	800ec12 <abort>

  netif = tcp_route(pcb, src, dst);
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7fe fe73 	bl	8007698 <tcp_route>
 80089b2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d105      	bne.n	80089c6 <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 80089ba:	68b8      	ldr	r0, [r7, #8]
 80089bc:	f7fa fb42 	bl	8003044 <pbuf_free>
    return ERR_RTE;
 80089c0:	f06f 0303 	mvn.w	r3, #3
 80089c4:	e008      	b.n	80089d8 <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f80b 	bl	80089ec <tcp_output_control_segment_netif>
 80089d6:	4603      	mov	r3, r0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	08011354 	.word	0x08011354
 80089e4:	08011ae0 	.word	0x08011ae0
 80089e8:	08011398 	.word	0x08011398

080089ec <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08c      	sub	sp, #48	; 0x30
 80089f0:	af04      	add	r7, sp, #16
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10b      	bne.n	8008a18 <tcp_output_control_segment_netif+0x2c>
 8008a00:	4b20      	ldr	r3, [pc, #128]	; (8008a84 <tcp_output_control_segment_netif+0x98>)
 8008a02:	f240 72a1 	movw	r2, #1953	; 0x7a1
 8008a06:	4920      	ldr	r1, [pc, #128]	; (8008a88 <tcp_output_control_segment_netif+0x9c>)
 8008a08:	4820      	ldr	r0, [pc, #128]	; (8008a8c <tcp_output_control_segment_netif+0xa0>)
 8008a0a:	f006 f8b9 	bl	800eb80 <iprintf>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f006 f9b8 	bl	800ed84 <fflush>
 8008a14:	f006 f8fd 	bl	800ec12 <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	891a      	ldrh	r2, [r3, #8]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2106      	movs	r1, #6
 8008a2a:	68b8      	ldr	r0, [r7, #8]
 8008a2c:	f7f8 fcc8 	bl	80013c0 <ip_chksum_pseudo>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d006      	beq.n	8008a4c <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	7adb      	ldrb	r3, [r3, #11]
 8008a42:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	7a9b      	ldrb	r3, [r3, #10]
 8008a48:	77bb      	strb	r3, [r7, #30]
 8008a4a:	e003      	b.n	8008a54 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 8008a4c:	23ff      	movs	r3, #255	; 0xff
 8008a4e:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8008a54:	7ffa      	ldrb	r2, [r7, #31]
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	9302      	str	r3, [sp, #8]
 8008a5a:	2306      	movs	r3, #6
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	7fbb      	ldrb	r3, [r7, #30]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	68b8      	ldr	r0, [r7, #8]
 8008a6a:	f7f9 f89d 	bl	8001ba8 <ip4_output_if>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f7fa fae6 	bl	8003044 <pbuf_free>
  return err;
 8008a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	08011354 	.word	0x08011354
 8008a88:	08011b0c 	.word	0x08011b0c
 8008a8c:	08011398 	.word	0x08011398

08008a90 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b08b      	sub	sp, #44	; 0x2c
 8008a94:	af04      	add	r7, sp, #16
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10b      	bne.n	8008abc <tcp_rst_common+0x2c>
 8008aa4:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <tcp_rst_common+0xa0>)
 8008aa6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8008aaa:	4922      	ldr	r1, [pc, #136]	; (8008b34 <tcp_rst_common+0xa4>)
 8008aac:	4822      	ldr	r0, [pc, #136]	; (8008b38 <tcp_rst_common+0xa8>)
 8008aae:	f006 f867 	bl	800eb80 <iprintf>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	f006 f966 	bl	800ed84 <fflush>
 8008ab8:	f006 f8ab 	bl	800ec12 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <tcp_rst_common+0x4a>
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <tcp_rst_common+0xa0>)
 8008ac4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8008ac8:	491c      	ldr	r1, [pc, #112]	; (8008b3c <tcp_rst_common+0xac>)
 8008aca:	481b      	ldr	r0, [pc, #108]	; (8008b38 <tcp_rst_common+0xa8>)
 8008acc:	f006 f858 	bl	800eb80 <iprintf>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f006 f957 	bl	800ed84 <fflush>
 8008ad6:	f006 f89c 	bl	800ec12 <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8008ade:	f242 0303 	movw	r3, #8195	; 0x2003
 8008ae2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	b29c      	uxth	r4, r3
 8008ae8:	68b8      	ldr	r0, [r7, #8]
 8008aea:	f7f8 fb4c 	bl	8001186 <lwip_htonl>
 8008aee:	4602      	mov	r2, r0
 8008af0:	8abb      	ldrh	r3, [r7, #20]
 8008af2:	9303      	str	r3, [sp, #12]
 8008af4:	2314      	movs	r3, #20
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	4613      	mov	r3, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	4621      	mov	r1, r4
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fe30 	bl	800876c <tcp_output_alloc_header_common>
 8008b0c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e006      	b.n	8008b26 <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8008b18:	2300      	movs	r3, #0
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	6939      	ldr	r1, [r7, #16]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff fede 	bl	80088e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8008b24:	693b      	ldr	r3, [r7, #16]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd90      	pop	{r4, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	08011354 	.word	0x08011354
 8008b34:	08011b40 	.word	0x08011b40
 8008b38:	08011398 	.word	0x08011398
 8008b3c:	08011b5c 	.word	0x08011b5c

08008b40 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08a      	sub	sp, #40	; 0x28
 8008b44:	af04      	add	r7, sp, #16
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8008b4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ff95 	bl	8008a90 <tcp_rst_common>
 8008b66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff ff01 	bl	800897c <tcp_output_control_segment>
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b08a      	sub	sp, #40	; 0x28
 8008b86:	af04      	add	r7, sp, #16
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	603b      	str	r3, [r7, #0]
  if (netif) {
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d017      	beq.n	8008bc6 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 8008b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f7ff ff71 	bl	8008a90 <tcp_rst_common>
 8008bae:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f7ff ff13 	bl	80089ec <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 8008bc6:	bf00      	nop
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <tcp_send_empty_ack+0x2e>
 8008be6:	4b2c      	ldr	r3, [pc, #176]	; (8008c98 <tcp_send_empty_ack+0xc8>)
 8008be8:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8008bec:	492b      	ldr	r1, [pc, #172]	; (8008c9c <tcp_send_empty_ack+0xcc>)
 8008bee:	482c      	ldr	r0, [pc, #176]	; (8008ca0 <tcp_send_empty_ack+0xd0>)
 8008bf0:	f005 ffc6 	bl	800eb80 <iprintf>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f006 f8c5 	bl	800ed84 <fflush>
 8008bfa:	f006 f80a 	bl	800ec12 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <tcp_send_empty_ack+0x3c>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	e000      	b.n	8008c0e <tcp_send_empty_ack+0x3e>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008c10:	7d7b      	ldrb	r3, [r7, #21]
 8008c12:	b29c      	uxth	r4, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f8 fab4 	bl	8001186 <lwip_htonl>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2200      	movs	r2, #0
 8008c22:	4621      	mov	r1, r4
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fe19 	bl	800885c <tcp_output_alloc_header>
 8008c2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8b5b      	ldrh	r3, [r3, #26]
 8008c36:	f043 0303 	orr.w	r3, r3, #3
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008c40:	f06f 0301 	mvn.w	r3, #1
 8008c44:	e023      	b.n	8008c8e <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8008c46:	7dbb      	ldrb	r3, [r7, #22]
 8008c48:	7dfa      	ldrb	r2, [r7, #23]
 8008c4a:	6939      	ldr	r1, [r7, #16]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fe47 	bl	80088e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3304      	adds	r3, #4
 8008c58:	6939      	ldr	r1, [r7, #16]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff fe8e 	bl	800897c <tcp_output_control_segment>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	8b5b      	ldrh	r3, [r3, #26]
 8008c70:	f043 0303 	orr.w	r3, r3, #3
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	835a      	strh	r2, [r3, #26]
 8008c7a:	e006      	b.n	8008c8a <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8b5b      	ldrh	r3, [r3, #26]
 8008c80:	f023 0303 	bic.w	r3, r3, #3
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8008c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd90      	pop	{r4, r7, pc}
 8008c96:	bf00      	nop
 8008c98:	08011354 	.word	0x08011354
 8008c9c:	08011b78 	.word	0x08011b78
 8008ca0:	08011398 	.word	0x08011398

08008ca4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008ca4:	b590      	push	{r4, r7, lr}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8008cac:	2300      	movs	r3, #0
 8008cae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10b      	bne.n	8008cce <tcp_keepalive+0x2a>
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <tcp_keepalive+0x80>)
 8008cb8:	f640 026a 	movw	r2, #2154	; 0x86a
 8008cbc:	491a      	ldr	r1, [pc, #104]	; (8008d28 <tcp_keepalive+0x84>)
 8008cbe:	481b      	ldr	r0, [pc, #108]	; (8008d2c <tcp_keepalive+0x88>)
 8008cc0:	f005 ff5e 	bl	800eb80 <iprintf>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f006 f85d 	bl	800ed84 <fflush>
 8008cca:	f005 ffa2 	bl	800ec12 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	b29c      	uxth	r4, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f8 fa54 	bl	8001186 <lwip_htonl>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff fdb9 	bl	800885c <tcp_output_alloc_header>
 8008cea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	e010      	b.n	8008d1a <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	6939      	ldr	r1, [r7, #16]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fdee 	bl	80088e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	6939      	ldr	r1, [r7, #16]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fe35 	bl	800897c <tcp_output_control_segment>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	08011354 	.word	0x08011354
 8008d28:	08011b98 	.word	0x08011b98
 8008d2c:	08011398 	.word	0x08011398

08008d30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b08b      	sub	sp, #44	; 0x2c
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <tcp_zero_window_probe+0x2c>
 8008d44:	4b4e      	ldr	r3, [pc, #312]	; (8008e80 <tcp_zero_window_probe+0x150>)
 8008d46:	f640 0295 	movw	r2, #2197	; 0x895
 8008d4a:	494e      	ldr	r1, [pc, #312]	; (8008e84 <tcp_zero_window_probe+0x154>)
 8008d4c:	484e      	ldr	r0, [pc, #312]	; (8008e88 <tcp_zero_window_probe+0x158>)
 8008d4e:	f005 ff17 	bl	800eb80 <iprintf>
 8008d52:	2000      	movs	r0, #0
 8008d54:	f006 f816 	bl	800ed84 <fflush>
 8008d58:	f005 ff5b 	bl	800ec12 <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d60:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e085      	b.n	8008e78 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d007      	beq.n	8008d86 <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	899b      	ldrh	r3, [r3, #12]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f8 f9e4 	bl	800115c <lwip_htons>
 8008d94:	4603      	mov	r3, r0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <tcp_zero_window_probe+0x7c>
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	891b      	ldrh	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <tcp_zero_window_probe+0x7c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <tcp_zero_window_probe+0x7e>
 8008dac:	2300      	movs	r3, #0
 8008dae:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8008db0:	7ffb      	ldrb	r3, [r7, #31]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bf0c      	ite	eq
 8008db6:	2301      	moveq	r3, #1
 8008db8:	2300      	movne	r3, #0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8008dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc2:	b299      	uxth	r1, r3
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	8bba      	ldrh	r2, [r7, #28]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fd45 	bl	800885c <tcp_output_alloc_header>
 8008dd2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8008dda:	f04f 33ff 	mov.w	r3, #4294967295
 8008dde:	e04b      	b.n	8008e78 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d011      	beq.n	8008e10 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	899b      	ldrh	r3, [r3, #12]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	b21b      	sxth	r3, r3
 8008df4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008df8:	b21c      	sxth	r4, r3
 8008dfa:	2011      	movs	r0, #17
 8008dfc:	f7f8 f9ae 	bl	800115c <lwip_htons>
 8008e00:	4603      	mov	r3, r0
 8008e02:	b21b      	sxth	r3, r3
 8008e04:	4323      	orrs	r3, r4
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	819a      	strh	r2, [r3, #12]
 8008e0e:	e010      	b.n	8008e32 <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	3314      	adds	r3, #20
 8008e16:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	6858      	ldr	r0, [r3, #4]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	891a      	ldrh	r2, [r3, #8]
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	6939      	ldr	r1, [r7, #16]
 8008e2e:	f7fa fb79 	bl	8003524 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7f8 f9a4 	bl	8001186 <lwip_htonl>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	3301      	adds	r3, #1
 8008e42:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da02      	bge.n	8008e56 <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	69b9      	ldr	r1, [r7, #24]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fd3f 	bl	80088e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	69b9      	ldr	r1, [r7, #24]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fd86 	bl	800897c <tcp_output_control_segment>
 8008e70:	4603      	mov	r3, r0
 8008e72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008e74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	372c      	adds	r7, #44	; 0x2c
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd90      	pop	{r4, r7, pc}
 8008e80:	08011354 	.word	0x08011354
 8008e84:	08011bb4 	.word	0x08011bb4
 8008e88:	08011398 	.word	0x08011398

08008e8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8008e94:	f7fa fc54 	bl	8003740 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <tcpip_tcp_timer+0x38>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <tcpip_tcp_timer+0x1c>
 8008ea0:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <tcpip_tcp_timer+0x3c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4908      	ldr	r1, [pc, #32]	; (8008ecc <tcpip_tcp_timer+0x40>)
 8008eac:	20fa      	movs	r0, #250	; 0xfa
 8008eae:	f000 f89b 	bl	8008fe8 <sys_timeout>
 8008eb2:	e002      	b.n	8008eba <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <tcpip_tcp_timer+0x44>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
  }
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200010b4 	.word	0x200010b4
 8008ec8:	200010c4 	.word	0x200010c4
 8008ecc:	08008e8d 	.word	0x08008e8d
 8008ed0:	200005b0 	.word	0x200005b0

08008ed4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <tcp_timer_needed+0x30>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10f      	bne.n	8008f00 <tcp_timer_needed+0x2c>
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <tcp_timer_needed+0x34>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <tcp_timer_needed+0x1c>
 8008ee8:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <tcp_timer_needed+0x38>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8008ef0:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <tcp_timer_needed+0x30>)
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4905      	ldr	r1, [pc, #20]	; (8008f10 <tcp_timer_needed+0x3c>)
 8008efa:	20fa      	movs	r0, #250	; 0xfa
 8008efc:	f000 f874 	bl	8008fe8 <sys_timeout>
  }
}
 8008f00:	bf00      	nop
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200005b0 	.word	0x200005b0
 8008f08:	200010b4 	.word	0x200010b4
 8008f0c:	200010c4 	.word	0x200010c4
 8008f10:	08008e8d 	.word	0x08008e8d

08008f14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008f20:	2007      	movs	r0, #7
 8008f22:	f7f9 fb6d 	bl	8002600 <memp_malloc>
 8008f26:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10d      	bne.n	8008f4a <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d14d      	bne.n	8008fd0 <sys_timeout_abs+0xbc>
 8008f34:	4b28      	ldr	r3, [pc, #160]	; (8008fd8 <sys_timeout_abs+0xc4>)
 8008f36:	22be      	movs	r2, #190	; 0xbe
 8008f38:	4928      	ldr	r1, [pc, #160]	; (8008fdc <sys_timeout_abs+0xc8>)
 8008f3a:	4829      	ldr	r0, [pc, #164]	; (8008fe0 <sys_timeout_abs+0xcc>)
 8008f3c:	f005 fe20 	bl	800eb80 <iprintf>
 8008f40:	2000      	movs	r0, #0
 8008f42:	f005 ff1f 	bl	800ed84 <fflush>
 8008f46:	f005 fe64 	bl	800ec12 <abort>
    return;
  }

  timeout->next = NULL;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8008f62:	4b20      	ldr	r3, [pc, #128]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6013      	str	r3, [r2, #0]
    return;
 8008f70:	e02f      	b.n	8008fd2 <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b1b      	ldr	r3, [pc, #108]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da07      	bge.n	8008f92 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8008f82:	4b18      	ldr	r3, [pc, #96]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8008f8a:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	e01f      	b.n	8008fd2 <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8008f92:	4b14      	ldr	r3, [pc, #80]	; (8008fe4 <sys_timeout_abs+0xd0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e016      	b.n	8008fc8 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <sys_timeout_abs+0x9e>
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da07      	bge.n	8008fc2 <sys_timeout_abs+0xae>
        timeout->next = t->next;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	601a      	str	r2, [r3, #0]
        break;
 8008fc0:	e007      	b.n	8008fd2 <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <sys_timeout_abs+0x86>
 8008fce:	e000      	b.n	8008fd2 <sys_timeout_abs+0xbe>
    return;
 8008fd0:	bf00      	nop
      }
    }
  }
}
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08011bd8 	.word	0x08011bd8
 8008fdc:	08011bfc 	.word	0x08011bfc
 8008fe0:	08011c3c 	.word	0x08011c3c
 8008fe4:	200005ac 	.word	0x200005ac

08008fe8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffa:	d30b      	bcc.n	8009014 <sys_timeout+0x2c>
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <sys_timeout+0x4c>)
 8008ffe:	f240 1229 	movw	r2, #297	; 0x129
 8009002:	490d      	ldr	r1, [pc, #52]	; (8009038 <sys_timeout+0x50>)
 8009004:	480d      	ldr	r0, [pc, #52]	; (800903c <sys_timeout+0x54>)
 8009006:	f005 fdbb 	bl	800eb80 <iprintf>
 800900a:	2000      	movs	r0, #0
 800900c:	f005 feba 	bl	800ed84 <fflush>
 8009010:	f005 fdff 	bl	800ec12 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 8009014:	f7f8 f834 	bl	8001080 <sys_now>
 8009018:	4602      	mov	r2, r0
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	6978      	ldr	r0, [r7, #20]
 8009026:	f7ff ff75 	bl	8008f14 <sys_timeout_abs>
#endif
}
 800902a:	bf00      	nop
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	08011bd8 	.word	0x08011bd8
 8009038:	08011c64 	.word	0x08011c64
 800903c:	08011c3c 	.word	0x08011c3c

08009040 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800904a:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <sys_untimeout+0x70>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02a      	beq.n	80090a8 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <sys_untimeout+0x70>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e01f      	b.n	800909e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d115      	bne.n	8009094 <sys_untimeout+0x54>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d110      	bne.n	8009094 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <sys_untimeout+0x42>
        next_timeout = t->next;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a0c      	ldr	r2, [pc, #48]	; (80090b0 <sys_untimeout+0x70>)
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	e003      	b.n	800908a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	2007      	movs	r0, #7
 800908e:	f7f9 faf7 	bl	8002680 <memp_free>
      return;
 8009092:	e00a      	b.n	80090aa <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1dc      	bne.n	800905e <sys_untimeout+0x1e>
    }
  }
  return;
 80090a4:	bf00      	nop
 80090a6:	e000      	b.n	80090aa <sys_untimeout+0x6a>
    return;
 80090a8:	bf00      	nop
}
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200005ac 	.word	0x200005ac

080090b4 <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 80090da:	210c      	movs	r1, #12
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f004 fd2f 	bl	800db40 <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f002 fc30 	bl	800b948 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f004 fd19 	bl	800db20 <ppp_link_terminated>
 80090ee:	e000      	b.n	80090f2 <link_terminated+0x2a>
	return;
 80090f0:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f80d 	bl	8009120 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 8009110:	2106      	movs	r1, #6
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f004 fd14 	bl	800db40 <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e01e      	b.n	800916c <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009136:	4293      	cmp	r3, r2
 8009138:	d007      	beq.n	800914a <upper_layers_down+0x2a>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009152:	d208      	bcs.n	8009166 <upper_layers_down+0x46>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	490c      	ldr	r1, [pc, #48]	; (8009194 <upper_layers_down+0x74>)
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	4a0a      	ldr	r2, [pc, #40]	; (8009198 <upper_layers_down+0x78>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009174:	60bb      	str	r3, [r7, #8]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1d8      	bne.n	800912e <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	08011cb0 	.word	0x08011cb0
 8009198:	080121ac 	.word	0x080121ac

0800919c <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	33cc      	adds	r3, #204	; 0xcc
 80091a8:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	e010      	b.n	80091d2 <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	f24c 0221 	movw	r2, #49185	; 0xc021
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <link_established+0x30>
		&& protp->lowerup != NULL)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <link_established+0x30>
		(*protp->lowerup)(pcb);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3301      	adds	r3, #1
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	4a19      	ldr	r2, [pc, #100]	; (8009238 <link_established+0x9c>)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091da:	60bb      	str	r3, [r7, #8]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e6      	bne.n	80091b0 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 80091e2:	2107      	movs	r1, #7
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f004 fcab 	bl	800db40 <new_phase>
    auth = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6859      	ldr	r1, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	461a      	mov	r2, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f004 ff8b 	bl	800e122 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f043 0301 	orr.w	r3, r3, #1
 8009212:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	b29a      	uxth	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f807 	bl	800923c <network_phase>
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	080121ac 	.word	0x080121ac

0800923c <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f804 	bl	8009252 <start_networks>
}
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <start_networks>:

void start_networks(ppp_pcb *pcb) {
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800925a:	2109      	movs	r1, #9
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f004 fc6f 	bl	800db40 <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f804 	bl	8009270 <continue_networks>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	e017      	b.n	80092ae <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009286:	d20f      	bcs.n	80092a8 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <continue_networks+0x38>
	    (*protp->open)(pcb);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
	    ++pcb->num_np_open;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800929e:	3301      	adds	r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	4a0a      	ldr	r2, [pc, #40]	; (80092d8 <continue_networks+0x68>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1df      	bne.n	800927e <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 80092c8:	4904      	ldr	r1, [pc, #16]	; (80092dc <continue_networks+0x6c>)
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f002 faa0 	bl	800b810 <lcp_close>
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	080121ac 	.word	0x080121ac
 80092dc:	08011cbc 	.word	0x08011cbc

080092e0 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2207      	movs	r2, #7
 80092ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 80092f2:	4904      	ldr	r1, [pc, #16]	; (8009304 <auth_withpeer_fail+0x24>)
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f002 fa8b 	bl	800b810 <lcp_close>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	08011cdc 	.word	0x08011cdc

08009308 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <auth_withpeer_success+0x6c>)
 8009316:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800931e:	4293      	cmp	r3, r2
 8009320:	d104      	bne.n	800932c <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <auth_withpeer_success+0x70>)
 8009328:	613b      	str	r3, [r7, #16]
	break;
 800932a:	e001      	b.n	8009330 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009334:	b21a      	sxth	r2, r3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	b21b      	sxth	r3, r3
 800933a:	4313      	orrs	r3, r2
 800933c:	b21b      	sxth	r3, r3
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009348:	b21a      	sxth	r2, r3
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	b21b      	sxth	r3, r3
 800934e:	43db      	mvns	r3, r3
 8009350:	b21b      	sxth	r3, r3
 8009352:	4013      	ands	r3, r2
 8009354:	b21b      	sxth	r3, r3
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	861a      	strh	r2, [r3, #48]	; 0x30
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <auth_withpeer_success+0x62>
	network_phase(pcb);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff ff69 	bl	800923c <network_phase>
}
 800936a:	bf00      	nop
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	08011d08 	.word	0x08011d08
 8009378:	08011d0c 	.word	0x08011d0c

0800937c <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 8009390:	210a      	movs	r1, #10
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f004 fbd4 	bl	800db40 <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800939e:	3301      	adds	r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d103      	bne.n	80093dc <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 80093d4:	2109      	movs	r1, #9
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f004 fbb2 	bl	800db40 <new_phase>
    }
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8009404:	2b00      	cmp	r3, #0
 8009406:	d103      	bne.n	8009410 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 8009408:	4903      	ldr	r1, [pc, #12]	; (8009418 <np_finished+0x34>)
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f002 fa00 	bl	800b810 <lcp_close>
    }
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	08011cbc 	.word	0x08011cbc

0800941c <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	7c5a      	ldrb	r2, [r3, #17]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	761a      	strb	r2, [r3, #24]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7c1b      	ldrb	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <fsm_lowerup+0x16>
 8009466:	2b01      	cmp	r3, #1
 8009468:	d004      	beq.n	8009474 <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800946a:	e015      	b.n	8009498 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	741a      	strb	r2, [r3, #16]
	break;
 8009472:	e011      	b.n	8009498 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7c5b      	ldrb	r3, [r3, #17]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2203      	movs	r2, #3
 8009484:	741a      	strb	r2, [r3, #16]
	break;
 8009486:	e006      	b.n	8009496 <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 8009488:	2100      	movs	r1, #0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fdb2 	bl	8009ff4 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2206      	movs	r2, #6
 8009494:	741a      	strb	r2, [r3, #16]
	break;
 8009496:	bf00      	nop
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7c1b      	ldrb	r3, [r3, #16]
 80094ac:	3b02      	subs	r3, #2
 80094ae:	2b07      	cmp	r3, #7
 80094b0:	d843      	bhi.n	800953a <fsm_lowerdown+0x9a>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <fsm_lowerdown+0x18>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094fd 	.word	0x080094fd
 80094c4:	0800950d 	.word	0x0800950d
 80094c8:	0800950d 	.word	0x0800950d
 80094cc:	0800950d 	.word	0x0800950d
 80094d0:	0800950d 	.word	0x0800950d
 80094d4:	0800951d 	.word	0x0800951d
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	741a      	strb	r2, [r3, #16]
	break;
 80094de:	e02c      	b.n	800953a <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d023      	beq.n	8009538 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
	break;
 80094fa:	e01d      	b.n	8009538 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	480f      	ldr	r0, [pc, #60]	; (8009544 <fsm_lowerdown+0xa4>)
 8009506:	f7ff fd9b 	bl	8009040 <sys_untimeout>
	break;
 800950a:	e016      	b.n	800953a <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	480b      	ldr	r0, [pc, #44]	; (8009544 <fsm_lowerdown+0xa4>)
 8009516:	f7ff fd93 	bl	8009040 <sys_untimeout>
	break;
 800951a:	e00e      	b.n	800953a <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	741a      	strb	r2, [r3, #16]
	break;
 8009536:	e000      	b.n	800953a <fsm_lowerdown+0x9a>
	break;
 8009538:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	08009771 	.word	0x08009771

08009548 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7c1b      	ldrb	r3, [r3, #16]
 8009554:	2b09      	cmp	r3, #9
 8009556:	d847      	bhi.n	80095e8 <fsm_open+0xa0>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <fsm_open+0x18>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009589 	.word	0x08009589
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095a5 	.word	0x080095a5
 800956c:	080095cf 	.word	0x080095cf
 8009570:	080095c9 	.word	0x080095c9
 8009574:	080095e9 	.word	0x080095e9
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095e9 	.word	0x080095e9
 8009584:	080095cf 	.word	0x080095cf
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d029      	beq.n	80095ec <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
	break;
 80095a2:	e023      	b.n	80095ec <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7c5b      	ldrb	r3, [r3, #17]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2203      	movs	r2, #3
 80095b4:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 80095b6:	e01c      	b.n	80095f2 <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 80095b8:	2100      	movs	r1, #0
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fd1a 	bl	8009ff4 <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2206      	movs	r2, #6
 80095c4:	741a      	strb	r2, [r3, #16]
	break;
 80095c6:	e014      	b.n	80095f2 <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2205      	movs	r2, #5
 80095cc:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7c5b      	ldrb	r3, [r3, #17]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ff60 	bl	80094a0 <fsm_lowerdown>
	    fsm_lowerup(f);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ff38 	bl	8009456 <fsm_lowerup>
	}
	break;
 80095e6:	e003      	b.n	80095f0 <fsm_open+0xa8>
    default:
	break;
 80095e8:	bf00      	nop
 80095ea:	e002      	b.n	80095f2 <fsm_open+0xaa>
	break;
 80095ec:	bf00      	nop
 80095ee:	e000      	b.n	80095f2 <fsm_open+0xaa>
	break;
 80095f0:	bf00      	nop
    }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af02      	add	r7, sp, #8
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7c1b      	ldrb	r3, [r3, #16]
 8009610:	2b09      	cmp	r3, #9
 8009612:	d004      	beq.n	800961e <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	482f      	ldr	r0, [pc, #188]	; (80096d4 <terminate_layer+0xd8>)
 8009618:	f7ff fd12 	bl	8009040 <sys_untimeout>
 800961c:	e009      	b.n	8009632 <terminate_layer+0x36>
    else if( f->callbacks->down )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	7c1a      	ldrb	r2, [r3, #16]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7c9b      	ldrb	r3, [r3, #18]
 800963e:	3301      	adds	r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	749a      	strb	r2, [r3, #18]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7c9a      	ldrb	r2, [r3, #18]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	74da      	strb	r2, [r3, #19]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6899      	ldr	r1, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	460b      	mov	r3, r1
 800965e:	2105      	movs	r1, #5
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fdb5 	bl	800a1d0 <fsm_sdata>

    if (f->retransmits == 0) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	7d1b      	ldrb	r3, [r3, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d112      	bne.n	8009694 <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b04      	cmp	r3, #4
 8009672:	d101      	bne.n	8009678 <terminate_layer+0x7c>
 8009674:	2202      	movs	r2, #2
 8009676:	e000      	b.n	800967a <terminate_layer+0x7e>
 8009678:	2203      	movs	r2, #3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	2b00      	cmp	r3, #0
 8009686:	d020      	beq.n	80096ca <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
	return;
 8009692:	e01a      	b.n	80096ca <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	480f      	ldr	r0, [pc, #60]	; (80096d4 <terminate_layer+0xd8>)
 8009698:	f7ff fcd2 	bl	8009040 <sys_untimeout>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	7b9b      	ldrb	r3, [r3, #14]
 80096a0:	461a      	mov	r2, r3
 80096a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096a6:	fb03 f302 	mul.w	r3, r3, r2
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4909      	ldr	r1, [pc, #36]	; (80096d4 <terminate_layer+0xd8>)
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fc9a 	bl	8008fe8 <sys_timeout>
    --f->retransmits;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	7d1b      	ldrb	r3, [r3, #20]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	741a      	strb	r2, [r3, #16]
 80096c8:	e000      	b.n	80096cc <terminate_layer+0xd0>
	return;
 80096ca:	bf00      	nop
}
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	08009771 	.word	0x08009771

080096d8 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <fsm_close+0x32>
 80096ee:	6838      	ldr	r0, [r7, #0]
 80096f0:	f7f6 fd6e 	bl	80001d0 <strlen>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2bfe      	cmp	r3, #254	; 0xfe
 80096f8:	d805      	bhi.n	8009706 <fsm_close+0x2e>
 80096fa:	6838      	ldr	r0, [r7, #0]
 80096fc:	f7f6 fd68 	bl	80001d0 <strlen>
 8009700:	4603      	mov	r3, r0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	e002      	b.n	800970c <fsm_close+0x34>
 8009706:	23ff      	movs	r3, #255	; 0xff
 8009708:	e000      	b.n	800970c <fsm_close+0x34>
 800970a:	2300      	movs	r3, #0
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7c1b      	ldrb	r3, [r3, #16]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b08      	cmp	r3, #8
 8009718:	d825      	bhi.n	8009766 <fsm_close+0x8e>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <fsm_close+0x48>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009745 	.word	0x08009745
 8009724:	08009767 	.word	0x08009767
 8009728:	0800974d 	.word	0x0800974d
 800972c:	08009767 	.word	0x08009767
 8009730:	08009755 	.word	0x08009755
 8009734:	0800975d 	.word	0x0800975d
 8009738:	0800975d 	.word	0x0800975d
 800973c:	0800975d 	.word	0x0800975d
 8009740:	0800975d 	.word	0x0800975d
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	741a      	strb	r2, [r3, #16]
	break;
 800974a:	e00d      	b.n	8009768 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	741a      	strb	r2, [r3, #16]
	break;
 8009752:	e009      	b.n	8009768 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2204      	movs	r2, #4
 8009758:	741a      	strb	r2, [r3, #16]
	break;
 800975a:	e005      	b.n	8009768 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800975c:	2104      	movs	r1, #4
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff ff4c 	bl	80095fc <terminate_layer>
	break;
 8009764:	e000      	b.n	8009768 <fsm_close+0x90>
    default:
	break;
 8009766:	bf00      	nop
    }
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af02      	add	r7, sp, #8
 8009776:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7c1b      	ldrb	r3, [r3, #16]
 8009786:	3b04      	subs	r3, #4
 8009788:	2b04      	cmp	r3, #4
 800978a:	f200 8083 	bhi.w	8009894 <fsm_timeout+0x124>
 800978e:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <fsm_timeout+0x24>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	080097a9 	.word	0x080097a9
 8009798:	080097a9 	.word	0x080097a9
 800979c:	08009833 	.word	0x08009833
 80097a0:	08009833 	.word	0x08009833
 80097a4:	08009833 	.word	0x08009833
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	7d1b      	ldrb	r3, [r3, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d113      	bne.n	80097d8 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	7c1b      	ldrb	r3, [r3, #16]
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d101      	bne.n	80097bc <fsm_timeout+0x4c>
 80097b8:	2202      	movs	r2, #2
 80097ba:	e000      	b.n	80097be <fsm_timeout+0x4e>
 80097bc:	2203      	movs	r2, #3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d060      	beq.n	800988e <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 80097d6:	e05a      	b.n	800988e <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	7c9b      	ldrb	r3, [r3, #18]
 80097dc:	3301      	adds	r3, #1
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	749a      	strb	r2, [r3, #18]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	7c9a      	ldrb	r2, [r3, #18]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	74da      	strb	r2, [r3, #19]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6899      	ldr	r1, [r3, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	460b      	mov	r3, r1
 80097fc:	2105      	movs	r1, #5
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 fce6 	bl	800a1d0 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 8009804:	68f9      	ldr	r1, [r7, #12]
 8009806:	4825      	ldr	r0, [pc, #148]	; (800989c <fsm_timeout+0x12c>)
 8009808:	f7ff fc1a 	bl	8009040 <sys_untimeout>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	7b9b      	ldrb	r3, [r3, #14]
 8009810:	461a      	mov	r2, r3
 8009812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009816:	fb03 f302 	mul.w	r3, r3, r2
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	491f      	ldr	r1, [pc, #124]	; (800989c <fsm_timeout+0x12c>)
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fbe2 	bl	8008fe8 <sys_timeout>
	    --f->retransmits;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	7d1b      	ldrb	r3, [r3, #20]
 8009828:	3b01      	subs	r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	751a      	strb	r2, [r3, #20]
	break;
 8009830:	e02d      	b.n	800988e <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	7d1b      	ldrb	r3, [r3, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d113      	bne.n	8009862 <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2203      	movs	r2, #3
 800983e:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	7c5b      	ldrb	r3, [r3, #17]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d122      	bne.n	8009892 <fsm_timeout+0x122>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01d      	beq.n	8009892 <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 8009860:	e017      	b.n	8009892 <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 8009876:	2101      	movs	r1, #1
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fbbb 	bl	8009ff4 <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	7c1b      	ldrb	r3, [r3, #16]
 8009882:	2b07      	cmp	r3, #7
 8009884:	d105      	bne.n	8009892 <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2206      	movs	r2, #6
 800988a:	741a      	strb	r2, [r3, #16]
	break;
 800988c:	e001      	b.n	8009892 <fsm_timeout+0x122>
	break;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <fsm_timeout+0x124>
	break;
 8009892:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 8009894:	bf00      	nop
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	08009771 	.word	0x08009771

080098a0 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b08b      	sub	sp, #44	; 0x2c
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	f340 808c 	ble.w	80099d0 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	61fa      	str	r2, [r7, #28]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	61fa      	str	r2, [r7, #28]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	61fa      	str	r2, [r7, #28]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	61fa      	str	r2, [r7, #28]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	dd72      	ble.n	80099d4 <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	dc70      	bgt.n	80099d8 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	7c1b      	ldrb	r3, [r3, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d06b      	beq.n	80099dc <fsm_input+0x13c>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	7c1b      	ldrb	r3, [r3, #16]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d067      	beq.n	80099dc <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800990c:	7efb      	ldrb	r3, [r7, #27]
 800990e:	3b01      	subs	r3, #1
 8009910:	2b06      	cmp	r3, #6
 8009912:	d839      	bhi.n	8009988 <fsm_input+0xe8>
 8009914:	a201      	add	r2, pc, #4	; (adr r2, 800991c <fsm_input+0x7c>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	08009939 	.word	0x08009939
 8009920:	08009947 	.word	0x08009947
 8009924:	08009955 	.word	0x08009955
 8009928:	08009955 	.word	0x08009955
 800992c:	08009967 	.word	0x08009967
 8009930:	08009975 	.word	0x08009975
 8009934:	0800997d 	.word	0x0800997d
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 8009938:	7eb9      	ldrb	r1, [r7, #26]
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f852 	bl	80099e8 <fsm_rconfreq>
	break;
 8009944:	e04d      	b.n	80099e2 <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 8009946:	7eb9      	ldrb	r1, [r7, #26]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f8f1 	bl	8009b34 <fsm_rconfack>
	break;
 8009952:	e046      	b.n	80099e2 <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 8009954:	7ef9      	ldrb	r1, [r7, #27]
 8009956:	7eba      	ldrb	r2, [r7, #26]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 f988 	bl	8009c74 <fsm_rconfnakrej>
	break;
 8009964:	e03d      	b.n	80099e2 <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 8009966:	7eb9      	ldrb	r1, [r7, #26]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa2b 	bl	8009dc8 <fsm_rtermreq>
	break;
 8009972:	e036      	b.n	80099e2 <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fa6f 	bl	8009e58 <fsm_rtermack>
	break;
 800997a:	e032      	b.n	80099e2 <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	69f9      	ldr	r1, [r7, #28]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fac7 	bl	8009f14 <fsm_rcoderej>
	break;
 8009986:	e02c      	b.n	80099e2 <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00c      	beq.n	80099ac <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009998:	7ef9      	ldrb	r1, [r7, #27]
 800999a:	7eba      	ldrb	r2, [r7, #26]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	47a0      	blx	r4
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d119      	bne.n	80099e0 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	7c9b      	ldrb	r3, [r3, #18]
 80099b0:	3301      	adds	r3, #1
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	749a      	strb	r2, [r3, #18]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	7c9a      	ldrb	r2, [r3, #18]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	3304      	adds	r3, #4
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2107      	movs	r1, #7
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fc02 	bl	800a1d0 <fsm_sdata>
	break;
 80099cc:	bf00      	nop
 80099ce:	e007      	b.n	80099e0 <fsm_input+0x140>
	return;
 80099d0:	bf00      	nop
 80099d2:	e006      	b.n	80099e2 <fsm_input+0x142>
	return;
 80099d4:	bf00      	nop
 80099d6:	e004      	b.n	80099e2 <fsm_input+0x142>
	return;
 80099d8:	bf00      	nop
 80099da:	e002      	b.n	80099e2 <fsm_input+0x142>
	return;
 80099dc:	bf00      	nop
 80099de:	e000      	b.n	80099e2 <fsm_input+0x142>
	break;
 80099e0:	bf00      	nop
    }
}
 80099e2:	3724      	adds	r7, #36	; 0x24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd90      	pop	{r4, r7, pc}

080099e8 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	460b      	mov	r3, r1
 80099f6:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	7c1b      	ldrb	r3, [r3, #16]
 80099fc:	3b02      	subs	r3, #2
 80099fe:	2b07      	cmp	r3, #7
 8009a00:	d835      	bhi.n	8009a6e <fsm_rconfreq+0x86>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <fsm_rconfreq+0x20>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a29 	.word	0x08009a29
 8009a0c:	08009a5f 	.word	0x08009a5f
 8009a10:	08009b27 	.word	0x08009b27
 8009a14:	08009b27 	.word	0x08009b27
 8009a18:	08009a6f 	.word	0x08009a6f
 8009a1c:	08009a6f 	.word	0x08009a6f
 8009a20:	08009a6f 	.word	0x08009a6f
 8009a24:	08009a3b 	.word	0x08009a3b
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 8009a28:	7afa      	ldrb	r2, [r7, #11]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2106      	movs	r1, #6
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fbcc 	bl	800a1d0 <fsm_sdata>
	return;
 8009a38:	e076      	b.n	8009b28 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d004      	beq.n	8009a4e <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 8009a4e:	2100      	movs	r1, #0
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 facf 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2206      	movs	r2, #6
 8009a5a:	741a      	strb	r2, [r3, #16]
	break;
 8009a5c:	e008      	b.n	8009a70 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fac7 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2206      	movs	r2, #6
 8009a6a:	741a      	strb	r2, [r3, #16]
	break;
 8009a6c:	e000      	b.n	8009a70 <fsm_rconfreq+0x88>
    default:
	break;
 8009a6e:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d013      	beq.n	8009aa2 <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7d5a      	ldrb	r2, [r3, #21]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	7ddb      	ldrb	r3, [r3, #23]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	bf2c      	ite	cs
 8009a86:	2301      	movcs	r3, #1
 8009a88:	2300      	movcc	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	699c      	ldr	r4, [r3, #24]
 8009a94:	463a      	mov	r2, r7
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	47a0      	blx	r4
 8009a9e:	6178      	str	r0, [r7, #20]
 8009aa0:	e007      	b.n	8009ab2 <fsm_rconfreq+0xca>
    } else if (len)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e001      	b.n	8009ab2 <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	b2d9      	uxtb	r1, r3
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	7afa      	ldrb	r2, [r7, #11]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fb86 	bl	800a1d0 <fsm_sdata>

    if (code == CONFACK) {
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d11c      	bne.n	8009b04 <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	7c1b      	ldrb	r3, [r3, #16]
 8009ace:	2b07      	cmp	r3, #7
 8009ad0:	d111      	bne.n	8009af6 <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009ad2:	68f9      	ldr	r1, [r7, #12]
 8009ad4:	4816      	ldr	r0, [pc, #88]	; (8009b30 <fsm_rconfreq+0x148>)
 8009ad6:	f7ff fab3 	bl	8009040 <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2209      	movs	r2, #9
 8009ade:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	4798      	blx	r3
 8009af4:	e002      	b.n	8009afc <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2208      	movs	r2, #8
 8009afa:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	755a      	strb	r2, [r3, #21]
 8009b02:	e011      	b.n	8009b28 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	7c1b      	ldrb	r3, [r3, #16]
 8009b08:	2b07      	cmp	r3, #7
 8009b0a:	d002      	beq.n	8009b12 <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2206      	movs	r2, #6
 8009b10:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d107      	bne.n	8009b28 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	7d5b      	ldrb	r3, [r3, #21]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	755a      	strb	r2, [r3, #21]
 8009b24:	e000      	b.n	8009b28 <fsm_rconfreq+0x140>
	return;
 8009b26:	bf00      	nop
    }
}
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd90      	pop	{r4, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	08009771 	.word	0x08009771

08009b34 <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	7cdb      	ldrb	r3, [r3, #19]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	f040 8083 	bne.w	8009c5c <fsm_rconfack+0x128>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	7b1b      	ldrb	r3, [r3, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d17e      	bne.n	8009c5c <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00d      	beq.n	8009b84 <fsm_rconfack+0x50>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bf0c      	ite	eq
 8009b7c:	2301      	moveq	r3, #1
 8009b7e:	2300      	movne	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e005      	b.n	8009b90 <fsm_rconfack+0x5c>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bf14      	ite	ne
 8009b8a:	2301      	movne	r3, #1
 8009b8c:	2300      	moveq	r3, #0
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d165      	bne.n	8009c60 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	7c1b      	ldrb	r3, [r3, #16]
 8009ba4:	3b02      	subs	r3, #2
 8009ba6:	2b07      	cmp	r3, #7
 8009ba8:	d85c      	bhi.n	8009c64 <fsm_rconfack+0x130>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <fsm_rconfack+0x7c>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bd1 	.word	0x08009bd1
 8009bb4:	08009bd1 	.word	0x08009bd1
 8009bb8:	08009c65 	.word	0x08009c65
 8009bbc:	08009c65 	.word	0x08009c65
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bf5 	.word	0x08009bf5
 8009bc8:	08009c0d 	.word	0x08009c0d
 8009bcc:	08009c39 	.word	0x08009c39
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2106      	movs	r1, #6
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 faf7 	bl	800a1d0 <fsm_sdata>
	break;
 8009be2:	e042      	b.n	8009c6a <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2207      	movs	r2, #7
 8009be8:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	7bda      	ldrb	r2, [r3, #15]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	751a      	strb	r2, [r3, #20]
	break;
 8009bf2:	e03a      	b.n	8009c6a <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009bf4:	68f9      	ldr	r1, [r7, #12]
 8009bf6:	481e      	ldr	r0, [pc, #120]	; (8009c70 <fsm_rconfack+0x13c>)
 8009bf8:	f7ff fa22 	bl	8009040 <sys_untimeout>
	fsm_sconfreq(f, 0);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f9f8 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2206      	movs	r2, #6
 8009c08:	741a      	strb	r2, [r3, #16]
	break;
 8009c0a:	e02e      	b.n	8009c6a <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009c0c:	68f9      	ldr	r1, [r7, #12]
 8009c0e:	4818      	ldr	r0, [pc, #96]	; (8009c70 <fsm_rconfack+0x13c>)
 8009c10:	f7ff fa16 	bl	8009040 <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2209      	movs	r2, #9
 8009c18:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	7bda      	ldrb	r2, [r3, #15]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01d      	beq.n	8009c68 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	4798      	blx	r3
	break;
 8009c36:	e017      	b.n	8009c68 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f9d0 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2206      	movs	r2, #6
 8009c58:	741a      	strb	r2, [r3, #16]
	break;
 8009c5a:	e006      	b.n	8009c6a <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 8009c5c:	bf00      	nop
 8009c5e:	e004      	b.n	8009c6a <fsm_rconfack+0x136>
	return;
 8009c60:	bf00      	nop
 8009c62:	e002      	b.n	8009c6a <fsm_rconfack+0x136>
    default:
	break;
 8009c64:	bf00      	nop
 8009c66:	e000      	b.n	8009c6a <fsm_rconfack+0x136>
	break;
 8009c68:	bf00      	nop
    }
}
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	08009771 	.word	0x08009771

08009c74 <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b089      	sub	sp, #36	; 0x24
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	7cdb      	ldrb	r3, [r3, #19]
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	f040 8090 	bne.w	8009db0 <fsm_rconfnakrej+0x13c>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	7b1b      	ldrb	r3, [r3, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 808b 	bne.w	8009db0 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d121      	bne.n	8009ce4 <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	7d9b      	ldrb	r3, [r3, #22]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	7d9a      	ldrb	r2, [r3, #22]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7ddb      	ldrb	r3, [r3, #23]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	bf2c      	ite	cs
 8009cb8:	2301      	movcs	r3, #1
 8009cba:	2300      	movcc	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d074      	beq.n	8009db4 <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	691c      	ldr	r4, [r3, #16]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	47a0      	blx	r4
 8009cda:	6178      	str	r0, [r7, #20]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d113      	bne.n	8009d0a <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 8009ce2:	e067      	b.n	8009db4 <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d061      	beq.n	8009db8 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	4798      	blx	r3
 8009d02:	6178      	str	r0, [r7, #20]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d056      	beq.n	8009db8 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7c1b      	ldrb	r3, [r3, #16]
 8009d14:	3b02      	subs	r3, #2
 8009d16:	2b07      	cmp	r3, #7
 8009d18:	d850      	bhi.n	8009dbc <fsm_rconfnakrej+0x148>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <fsm_rconfnakrej+0xac>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d41 	.word	0x08009d41
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009dbd 	.word	0x08009dbd
 8009d2c:	08009dbd 	.word	0x08009dbd
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d55 	.word	0x08009d55
 8009d3c:	08009d8d 	.word	0x08009d8d
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	2300      	movs	r3, #0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2106      	movs	r1, #6
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fa3f 	bl	800a1d0 <fsm_sdata>
	break;
 8009d52:	e034      	b.n	8009dbe <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	481b      	ldr	r0, [pc, #108]	; (8009dc4 <fsm_rconfnakrej+0x150>)
 8009d58:	f7ff f972 	bl	8009040 <sys_untimeout>
	if (ret < 0)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da03      	bge.n	8009d6a <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2203      	movs	r2, #3
 8009d66:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 8009d68:	e029      	b.n	8009dbe <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f941 	bl	8009ff4 <fsm_sconfreq>
	break;
 8009d72:	e024      	b.n	8009dbe <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	4813      	ldr	r0, [pc, #76]	; (8009dc4 <fsm_rconfnakrej+0x150>)
 8009d78:	f7ff f962 	bl	8009040 <sys_untimeout>
	fsm_sconfreq(f, 0);
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f938 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2206      	movs	r2, #6
 8009d88:	741a      	strb	r2, [r3, #16]
	break;
 8009d8a:	e018      	b.n	8009dbe <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 8009da0:	2100      	movs	r1, #0
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f926 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2206      	movs	r2, #6
 8009dac:	741a      	strb	r2, [r3, #16]
	break;
 8009dae:	e006      	b.n	8009dbe <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 8009db0:	bf00      	nop
 8009db2:	e004      	b.n	8009dbe <fsm_rconfnakrej+0x14a>
	    return;
 8009db4:	bf00      	nop
 8009db6:	e002      	b.n	8009dbe <fsm_rconfnakrej+0x14a>
	    return;
 8009db8:	bf00      	nop
 8009dba:	e000      	b.n	8009dbe <fsm_rconfnakrej+0x14a>
    default:
	break;
 8009dbc:	bf00      	nop
    }
}
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd90      	pop	{r4, r7, pc}
 8009dc4:	08009771 	.word	0x08009771

08009dc8 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	7c1b      	ldrb	r3, [r3, #16]
 8009de0:	2b07      	cmp	r3, #7
 8009de2:	db29      	blt.n	8009e38 <fsm_rtermreq+0x70>
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	dd02      	ble.n	8009dee <fsm_rtermreq+0x26>
 8009de8:	2b09      	cmp	r3, #9
 8009dea:	d004      	beq.n	8009df6 <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 8009dec:	e024      	b.n	8009e38 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2206      	movs	r2, #6
 8009df2:	741a      	strb	r2, [r3, #16]
	break;
 8009df4:	e021      	b.n	8009e3a <fsm_rtermreq+0x72>
	f->retransmits = 0;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2205      	movs	r2, #5
 8009e00:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	480e      	ldr	r0, [pc, #56]	; (8009e54 <fsm_rtermreq+0x8c>)
 8009e1a:	f7ff f911 	bl	8009040 <sys_untimeout>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	7b9b      	ldrb	r3, [r3, #14]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e28:	fb03 f302 	mul.w	r3, r3, r2
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4909      	ldr	r1, [pc, #36]	; (8009e54 <fsm_rtermreq+0x8c>)
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff f8d9 	bl	8008fe8 <sys_timeout>
	break;
 8009e36:	e000      	b.n	8009e3a <fsm_rtermreq+0x72>
	break;
 8009e38:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	2300      	movs	r3, #0
 8009e44:	2106      	movs	r1, #6
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 f9c2 	bl	800a1d0 <fsm_sdata>
}
 8009e4c:	bf00      	nop
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	08009771 	.word	0x08009771

08009e58 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7c1b      	ldrb	r3, [r3, #16]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d848      	bhi.n	8009efc <fsm_rtermack+0xa4>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <fsm_rtermack+0x18>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009ead 	.word	0x08009ead
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009ed1 	.word	0x08009ed1
 8009e80:	08009efd 	.word	0x08009efd
 8009e84:	08009ed9 	.word	0x08009ed9
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4821      	ldr	r0, [pc, #132]	; (8009f10 <fsm_rtermack+0xb8>)
 8009e8c:	f7ff f8d8 	bl	8009040 <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02f      	beq.n	8009f00 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
	break;
 8009eaa:	e029      	b.n	8009f00 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4818      	ldr	r0, [pc, #96]	; (8009f10 <fsm_rtermack+0xb8>)
 8009eb0:	f7ff f8c6 	bl	8009040 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01f      	beq.n	8009f04 <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
	break;
 8009ece:	e019      	b.n	8009f04 <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	741a      	strb	r2, [r3, #16]
	break;
 8009ed6:	e016      	b.n	8009f06 <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d004      	beq.n	8009eec <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f880 	bl	8009ff4 <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2206      	movs	r2, #6
 8009ef8:	741a      	strb	r2, [r3, #16]
	break;
 8009efa:	e004      	b.n	8009f06 <fsm_rtermack+0xae>
    default:
	break;
 8009efc:	bf00      	nop
 8009efe:	e002      	b.n	8009f06 <fsm_rtermack+0xae>
	break;
 8009f00:	bf00      	nop
 8009f02:	e000      	b.n	8009f06 <fsm_rtermack+0xae>
	break;
 8009f04:	bf00      	nop
    }
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08009771 	.word	0x08009771

08009f14 <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	dd11      	ble.n	8009f4a <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	60ba      	str	r2, [r7, #8]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	60ba      	str	r2, [r7, #8]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	7c1b      	ldrb	r3, [r3, #16]
 8009f3e:	2b07      	cmp	r3, #7
 8009f40:	d104      	bne.n	8009f4c <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2206      	movs	r2, #6
 8009f46:	741a      	strb	r2, [r3, #16]
 8009f48:	e000      	b.n	8009f4c <fsm_rcoderej+0x38>
	return;
 8009f4a:	bf00      	nop
}
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
	...

08009f58 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7c1b      	ldrb	r3, [r3, #16]
 8009f64:	3b02      	subs	r3, #2
 8009f66:	2b07      	cmp	r3, #7
 8009f68:	d83e      	bhi.n	8009fe8 <fsm_protreject+0x90>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <fsm_protreject+0x18>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009fb5 	.word	0x08009fb5
 8009f80:	08009fb5 	.word	0x08009fb5
 8009f84:	08009fb5 	.word	0x08009fb5
 8009f88:	08009fb5 	.word	0x08009fb5
 8009f8c:	08009fd9 	.word	0x08009fd9
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	4817      	ldr	r0, [pc, #92]	; (8009ff0 <fsm_protreject+0x98>)
 8009f94:	f7ff f854 	bl	8009040 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01c      	beq.n	8009fe2 <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	4798      	blx	r3
	break;
 8009fb2:	e016      	b.n	8009fe2 <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	480e      	ldr	r0, [pc, #56]	; (8009ff0 <fsm_protreject+0x98>)
 8009fb8:	f7ff f842 	bl	8009040 <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00c      	beq.n	8009fe6 <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
	break;
 8009fd6:	e006      	b.n	8009fe6 <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 8009fd8:	2105      	movs	r1, #5
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff fb0e 	bl	80095fc <terminate_layer>
	break;
 8009fe0:	e002      	b.n	8009fe8 <fsm_protreject+0x90>
	break;
 8009fe2:	bf00      	nop
 8009fe4:	e000      	b.n	8009fe8 <fsm_protreject+0x90>
	break;
 8009fe6:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08009771 	.word	0x08009771

08009ff4 <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7c1b      	ldrb	r3, [r3, #16]
 800a008:	2b06      	cmp	r3, #6
 800a00a:	d017      	beq.n	800a03c <fsm_sconfreq+0x48>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7c1b      	ldrb	r3, [r3, #16]
 800a010:	2b07      	cmp	r3, #7
 800a012:	d013      	beq.n	800a03c <fsm_sconfreq+0x48>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7c1b      	ldrb	r3, [r3, #16]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d00f      	beq.n	800a03c <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d004      	beq.n	800a030 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	4798      	blx	r3
	f->nakloops = 0;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10d      	bne.n	800a05e <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	7bda      	ldrb	r2, [r3, #15]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7c9b      	ldrb	r3, [r3, #18]
 800a04e:	3301      	adds	r3, #1
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	749a      	strb	r2, [r3, #18]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7c9a      	ldrb	r2, [r3, #18]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d018      	beq.n	800a0a0 <fsm_sconfreq+0xac>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d013      	beq.n	800a0a0 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800a08c:	1f1a      	subs	r2, r3, #4
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	429a      	cmp	r2, r3
 800a092:	da07      	bge.n	800a0a4 <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800a09a:	3b04      	subs	r3, #4
 800a09c:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800a09e:	e001      	b.n	800a0a4 <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f7f8 fd28 	bl	8002b08 <pbuf_alloc>
 800a0b8:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d07a      	beq.n	800a1b6 <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	891a      	ldrh	r2, [r3, #8]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	895b      	ldrh	r3, [r3, #10]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d003      	beq.n	800a0d4 <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800a0cc:	6938      	ldr	r0, [r7, #16]
 800a0ce:	f7f8 ffb9 	bl	8003044 <pbuf_free>
        return;
 800a0d2:	e071      	b.n	800a1b8 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	60fa      	str	r2, [r7, #12]
 800a0e0:	22ff      	movs	r2, #255	; 0xff
 800a0e2:	701a      	strb	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	60fa      	str	r2, [r7, #12]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	60fa      	str	r2, [r7, #12]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	89d2      	ldrh	r2, [r2, #14]
 800a0f8:	0a12      	lsrs	r2, r2, #8
 800a0fa:	b292      	uxth	r2, r2
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	60fa      	str	r2, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	89d2      	ldrh	r2, [r2, #14]
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	60fa      	str	r2, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	60fa      	str	r2, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	7cd2      	ldrb	r2, [r2, #19]
 800a122:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	60fa      	str	r2, [r7, #12]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	3204      	adds	r2, #4
 800a12e:	1212      	asrs	r2, r2, #8
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	60fa      	str	r2, [r7, #12]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	3204      	adds	r2, #4
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01a      	beq.n	800a180 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f107 0208 	add.w	r2, r7, #8
 800a154:	68f9      	ldr	r1, [r7, #12]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	895b      	ldrh	r3, [r3, #10]
 800a15e:	f1a3 0208 	sub.w	r2, r3, #8
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	429a      	cmp	r2, r3
 800a166:	d00b      	beq.n	800a180 <fsm_sconfreq+0x18c>
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <fsm_sconfreq+0x1cc>)
 800a16a:	f240 22f2 	movw	r2, #754	; 0x2f2
 800a16e:	4915      	ldr	r1, [pc, #84]	; (800a1c4 <fsm_sconfreq+0x1d0>)
 800a170:	4815      	ldr	r0, [pc, #84]	; (800a1c8 <fsm_sconfreq+0x1d4>)
 800a172:	f004 fd05 	bl	800eb80 <iprintf>
 800a176:	2000      	movs	r0, #0
 800a178:	f004 fe04 	bl	800ed84 <fflush>
 800a17c:	f004 fd49 	bl	800ec12 <abort>
    }

    ppp_write(pcb, p);
 800a180:	6939      	ldr	r1, [r7, #16]
 800a182:	6978      	ldr	r0, [r7, #20]
 800a184:	f003 fcba 	bl	800dafc <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	7d1b      	ldrb	r3, [r3, #20]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	480d      	ldr	r0, [pc, #52]	; (800a1cc <fsm_sconfreq+0x1d8>)
 800a198:	f7fe ff52 	bl	8009040 <sys_untimeout>
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	7b9b      	ldrb	r3, [r3, #14]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1a6:	fb03 f302 	mul.w	r3, r3, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4907      	ldr	r1, [pc, #28]	; (800a1cc <fsm_sconfreq+0x1d8>)
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe ff1a 	bl	8008fe8 <sys_timeout>
 800a1b4:	e000      	b.n	800a1b8 <fsm_sconfreq+0x1c4>
        return;
 800a1b6:	bf00      	nop
}
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	08011d10 	.word	0x08011d10
 800a1c4:	08011d34 	.word	0x08011d34
 800a1c8:	08011d60 	.word	0x08011d60
 800a1cc:	08009771 	.word	0x08009771

0800a1d0 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	72fb      	strb	r3, [r7, #11]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800a1ee:	1f1a      	subs	r2, r3, #4
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	da04      	bge.n	800a200 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	3304      	adds	r3, #4
 800a204:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3304      	adds	r3, #4
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a212:	4619      	mov	r1, r3
 800a214:	2000      	movs	r0, #0
 800a216:	f7f8 fc77 	bl	8002b08 <pbuf_alloc>
 800a21a:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d04f      	beq.n	800a2c2 <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	891a      	ldrh	r2, [r3, #8]
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	895b      	ldrh	r3, [r3, #10]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d003      	beq.n	800a236 <fsm_sdata+0x66>
        pbuf_free(p);
 800a22e:	6978      	ldr	r0, [r7, #20]
 800a230:	f7f8 ff08 	bl	8003044 <pbuf_free>
        return;
 800a234:	e046      	b.n	800a2c4 <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d009      	beq.n	800a256 <fsm_sdata+0x86>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	3308      	adds	r3, #8
 800a24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f004 fe97 	bl	800ef84 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	613a      	str	r2, [r7, #16]
 800a25c:	22ff      	movs	r2, #255	; 0xff
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	613a      	str	r2, [r7, #16]
 800a266:	2203      	movs	r2, #3
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	613a      	str	r2, [r7, #16]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	89d2      	ldrh	r2, [r2, #14]
 800a274:	0a12      	lsrs	r2, r2, #8
 800a276:	b292      	uxth	r2, r2
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	701a      	strb	r2, [r3, #0]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	613a      	str	r2, [r7, #16]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	89d2      	ldrh	r2, [r2, #14]
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	613a      	str	r2, [r7, #16]
 800a290:	7afa      	ldrb	r2, [r7, #11]
 800a292:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	613a      	str	r2, [r7, #16]
 800a29a:	7aba      	ldrb	r2, [r7, #10]
 800a29c:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	613a      	str	r2, [r7, #16]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	1212      	asrs	r2, r2, #8
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	613a      	str	r2, [r7, #16]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800a2b8:	6979      	ldr	r1, [r7, #20]
 800a2ba:	69f8      	ldr	r0, [r7, #28]
 800a2bc:	f003 fc1e 	bl	800dafc <ppp_write>
 800a2c0:	e000      	b.n	800a2c4 <fsm_sdata+0xf4>
        return;
 800a2c2:	bf00      	nop
}
 800a2c4:	3720      	adds	r7, #32
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	33f8      	adds	r3, #248	; 0xf8
 800a2d8:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a2e0:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a2e8:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f248 0221 	movw	r2, #32801	; 0x8021
 800a2f6:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	4a15      	ldr	r2, [pc, #84]	; (800a350 <ipcp_init+0x84>)
 800a2fc:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800a2fe:	6978      	ldr	r0, [r7, #20]
 800a300:	f7ff f88c 	bl	800941c <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2264      	movs	r2, #100	; 0x64
 800a308:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	7813      	ldrb	r3, [r2, #0]
 800a30e:	f043 0302 	orr.w	r3, r3, #2
 800a312:	7013      	strb	r3, [r2, #0]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a31c:	b2d9      	uxtb	r1, r3
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	7813      	ldrb	r3, [r2, #0]
 800a322:	f361 0300 	bfi	r3, r1, #0, #1
 800a326:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	7813      	ldrb	r3, [r2, #0]
 800a32c:	f043 0302 	orr.w	r3, r3, #2
 800a330:	7013      	strb	r3, [r2, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a33a:	b2d9      	uxtb	r1, r3
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	7813      	ldrb	r3, [r2, #0]
 800a340:	f361 0300 	bfi	r3, r1, #0, #1
 800a344:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800a346:	bf00      	nop
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	080120f4 	.word	0x080120f4

0800a354 <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	33f8      	adds	r3, #248	; 0xf8
 800a360:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff f8f0 	bl	8009548 <fsm_open>
    pcb->ipcp_is_open = 1;
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800a36e:	f043 0302 	orr.w	r3, r3, #2
 800a372:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800a376:	bf00      	nop
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	33f8      	adds	r3, #248	; 0xf8
 800a38c:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7ff f9a1 	bl	80096d8 <fsm_close>
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	33f8      	adds	r3, #248	; 0xf8
 800a3aa:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7ff f852 	bl	8009456 <fsm_lowerup>
}
 800a3b2:	bf00      	nop
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	33f8      	adds	r3, #248	; 0xf8
 800a3c6:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff f869 	bl	80094a0 <fsm_lowerdown>
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	33f8      	adds	r3, #248	; 0xf8
 800a3e6:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	6978      	ldr	r0, [r7, #20]
 800a3ee:	f7ff fa57 	bl	80098a0 <fsm_input>
}
 800a3f2:	bf00      	nop
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	33f8      	adds	r3, #248	; 0xf8
 800a406:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f7ff f849 	bl	80094a0 <fsm_lowerdown>
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800a416:	b580      	push	{r7, lr}
 800a418:	b086      	sub	sp, #24
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a42a:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a432:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a43a:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <ipcp_resetci+0x42>
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00f      	beq.n	800a478 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800a474:	2301      	movs	r3, #1
 800a476:	e000      	b.n	800a47a <ipcp_resetci+0x64>
 800a478:	2300      	movs	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	b2d9      	uxtb	r1, r3
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	7813      	ldrb	r3, [r2, #0]
 800a486:	f361 0382 	bfi	r3, r1, #2, #1
 800a48a:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d104      	bne.n	800a49e <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	7813      	ldrb	r3, [r2, #0]
 800a498:	f043 0308 	orr.w	r3, r3, #8
 800a49c:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d104      	bne.n	800a4b0 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	7813      	ldrb	r3, [r2, #0]
 800a4aa:	f043 0310 	orr.w	r3, r3, #16
 800a4ae:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d102      	bne.n	800a4d0 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a4d6:	220c      	movs	r2, #12
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f004 fd77 	bl	800efce <memset>
}
 800a4e0:	bf00      	nop
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a4fc:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a504:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d019      	beq.n	800a548 <ipcp_cilen+0x60>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d012      	beq.n	800a548 <ipcp_cilen+0x60>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10b      	bne.n	800a548 <ipcp_cilen+0x60>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d004      	beq.n	800a548 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	7813      	ldrb	r3, [r2, #0]
 800a542:	f36f 0300 	bfc	r3, #0, #1
 800a546:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d108      	bne.n	800a568 <ipcp_cilen+0x80>
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <ipcp_cilen+0x80>
 800a564:	220a      	movs	r2, #10
 800a566:	e000      	b.n	800a56a <ipcp_cilen+0x82>
 800a568:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <ipcp_cilen+0x94>
 800a578:	2306      	movs	r3, #6
 800a57a:	e000      	b.n	800a57e <ipcp_cilen+0x96>
 800a57c:	2300      	movs	r3, #0
 800a57e:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800a580:	4618      	mov	r0, r3
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	; 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a5a4:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d15e      	bne.n	800a678 <ipcp_addci+0xec>
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d057      	beq.n	800a678 <ipcp_addci+0xec>
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2b09      	cmp	r3, #9
 800a5cc:	dd4f      	ble.n	800a66e <ipcp_addci+0xe2>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	60ba      	str	r2, [r7, #8]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	60ba      	str	r2, [r7, #8]
 800a5de:	220a      	movs	r2, #10
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f6 fdcd 	bl	8001186 <lwip_htonl>
 800a5ec:	61b8      	str	r0, [r7, #24]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	60ba      	str	r2, [r7, #8]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	0e12      	lsrs	r2, r2, #24
 800a5f8:	b2d2      	uxtb	r2, r2
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	60ba      	str	r2, [r7, #8]
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	0c12      	lsrs	r2, r2, #16
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	60ba      	str	r2, [r7, #8]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	0a12      	lsrs	r2, r2, #8
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	60ba      	str	r2, [r7, #8]
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	b2d2      	uxtb	r2, r2
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f6 fdac 	bl	8001186 <lwip_htonl>
 800a62e:	61b8      	str	r0, [r7, #24]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	60ba      	str	r2, [r7, #8]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	0e12      	lsrs	r2, r2, #24
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	60ba      	str	r2, [r7, #8]
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	0c12      	lsrs	r2, r2, #16
 800a648:	b2d2      	uxtb	r2, r2
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	60ba      	str	r2, [r7, #8]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0a12      	lsrs	r2, r2, #8
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	701a      	strb	r2, [r3, #0]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	60ba      	str	r2, [r7, #8]
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	3b0a      	subs	r3, #10
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
 800a66c:	e004      	b.n	800a678 <ipcp_addci+0xec>
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	7813      	ldrb	r3, [r2, #0]
 800a672:	f36f 0341 	bfc	r3, #1, #1
 800a676:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d036      	beq.n	800a6f4 <ipcp_addci+0x168>
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	2b05      	cmp	r3, #5
 800a68a:	dd2e      	ble.n	800a6ea <ipcp_addci+0x15e>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	60ba      	str	r2, [r7, #8]
 800a692:	2203      	movs	r2, #3
 800a694:	701a      	strb	r2, [r3, #0]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	60ba      	str	r2, [r7, #8]
 800a69c:	2206      	movs	r2, #6
 800a69e:	701a      	strb	r2, [r3, #0]
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7f6 fd6e 	bl	8001186 <lwip_htonl>
 800a6aa:	6178      	str	r0, [r7, #20]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	60ba      	str	r2, [r7, #8]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	0e12      	lsrs	r2, r2, #24
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	60ba      	str	r2, [r7, #8]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	0c12      	lsrs	r2, r2, #16
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	701a      	strb	r2, [r3, #0]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	60ba      	str	r2, [r7, #8]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	0a12      	lsrs	r2, r2, #8
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	60ba      	str	r2, [r7, #8]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	701a      	strb	r2, [r3, #0]
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	3b06      	subs	r3, #6
 800a6e6:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e8:	e004      	b.n	800a6f4 <ipcp_addci+0x168>
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	7813      	ldrb	r3, [r2, #0]
 800a6ee:	f36f 0300 	bfc	r3, #0, #1
 800a6f2:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	601a      	str	r2, [r3, #0]
}
 800a700:	bf00      	nop
 800a702:	3728      	adds	r7, #40	; 0x28
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a720:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d179      	bne.n	800a824 <ipcp_ackci+0x11c>
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d072      	beq.n	800a824 <ipcp_ackci+0x11c>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3b0a      	subs	r3, #10
 800a742:	607b      	str	r3, [r7, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f2c0 80bb 	blt.w	800a8c2 <ipcp_ackci+0x1ba>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	60ba      	str	r2, [r7, #8]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	83fb      	strh	r3, [r7, #30]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	60ba      	str	r2, [r7, #8]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	83bb      	strh	r3, [r7, #28]
 800a760:	8bbb      	ldrh	r3, [r7, #28]
 800a762:	2b0a      	cmp	r3, #10
 800a764:	f040 80b8 	bne.w	800a8d8 <ipcp_ackci+0x1d0>
 800a768:	8bfb      	ldrh	r3, [r7, #30]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	f040 80b4 	bne.w	800a8d8 <ipcp_ackci+0x1d0>
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	60ba      	str	r2, [r7, #8]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	61bb      	str	r3, [r7, #24]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	60ba      	str	r2, [r7, #8]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	4313      	orrs	r3, r2
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	021b      	lsls	r3, r3, #8
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	60ba      	str	r2, [r7, #8]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	021b      	lsls	r3, r3, #8
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	60ba      	str	r2, [r7, #8]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
 800a7b8:	69b8      	ldr	r0, [r7, #24]
 800a7ba:	f7f6 fce4 	bl	8001186 <lwip_htonl>
 800a7be:	6178      	str	r0, [r7, #20]
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d17d      	bne.n	800a8c6 <ipcp_ackci+0x1be>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	60ba      	str	r2, [r7, #8]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	60ba      	str	r2, [r7, #8]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	61bb      	str	r3, [r7, #24]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	60ba      	str	r2, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	61bb      	str	r3, [r7, #24]
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	60ba      	str	r2, [r7, #8]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	4313      	orrs	r3, r2
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	69b8      	ldr	r0, [r7, #24]
 800a814:	f7f6 fcb7 	bl	8001186 <lwip_htonl>
 800a818:	6178      	str	r0, [r7, #20]
 800a81a:	6a3b      	ldr	r3, [r7, #32]
 800a81c:	689a      	ldr	r2, [r3, #8]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d152      	bne.n	800a8ca <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d042      	beq.n	800a8b8 <ipcp_ackci+0x1b0>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3b06      	subs	r3, #6
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	db47      	blt.n	800a8ce <ipcp_ackci+0x1c6>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	60ba      	str	r2, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	83fb      	strh	r3, [r7, #30]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	60ba      	str	r2, [r7, #8]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	83bb      	strh	r3, [r7, #28]
 800a852:	8bbb      	ldrh	r3, [r7, #28]
 800a854:	2b06      	cmp	r3, #6
 800a856:	d13f      	bne.n	800a8d8 <ipcp_ackci+0x1d0>
 800a858:	8bfb      	ldrh	r3, [r7, #30]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d13c      	bne.n	800a8d8 <ipcp_ackci+0x1d0>
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	60ba      	str	r2, [r7, #8]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	613b      	str	r3, [r7, #16]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	60ba      	str	r2, [r7, #8]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	4313      	orrs	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	613b      	str	r3, [r7, #16]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	60ba      	str	r2, [r7, #8]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	461a      	mov	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	60ba      	str	r2, [r7, #8]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f7f6 fc6d 	bl	8001186 <lwip_htonl>
 800a8ac:	6178      	str	r0, [r7, #20]
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d10c      	bne.n	800a8d2 <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10b      	bne.n	800a8d6 <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e00b      	b.n	800a8da <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800a8c2:	bf00      	nop
 800a8c4:	e008      	b.n	800a8d8 <ipcp_ackci+0x1d0>
 800a8c6:	bf00      	nop
 800a8c8:	e006      	b.n	800a8d8 <ipcp_ackci+0x1d0>
 800a8ca:	bf00      	nop
 800a8cc:	e004      	b.n	800a8d8 <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800a8ce:	bf00      	nop
 800a8d0:	e002      	b.n	800a8d8 <ipcp_ackci+0x1d0>
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <ipcp_ackci+0x1d0>
	goto bad;
 800a8d6:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800a8e2:	b590      	push	{r4, r7, lr}
 800a8e4:	b093      	sub	sp, #76	; 0x4c
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800a8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a8fc:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800a8fe:	f107 031c 	add.w	r3, r7, #28
 800a902:	220c      	movs	r2, #12
 800a904:	2100      	movs	r1, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f004 fb61 	bl	800efce <memset>
    try_ = *go;
 800a90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a90e:	f107 0310 	add.w	r3, r7, #16
 800a912:	ca07      	ldmia	r2, {r0, r1, r2}
 800a914:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800a918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	f040 8096 	bne.w	800aa54 <ipcp_nakci+0x172>
 800a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 808e 	beq.w	800aa54 <ipcp_nakci+0x172>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a944:	2b0a      	cmp	r3, #10
 800a946:	f040 8085 	bne.w	800aa54 <ipcp_nakci+0x172>
 800a94a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	429a      	cmp	r2, r3
 800a952:	dc7f      	bgt.n	800aa54 <ipcp_nakci+0x172>
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d17b      	bne.n	800aa54 <ipcp_nakci+0x172>
 800a95c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	607b      	str	r3, [r7, #4]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	3302      	adds	r3, #2
 800a96a:	60bb      	str	r3, [r7, #8]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	60ba      	str	r2, [r7, #8]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	63bb      	str	r3, [r7, #56]	; 0x38
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	60ba      	str	r2, [r7, #8]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	4313      	orrs	r3, r2
 800a986:	63bb      	str	r3, [r7, #56]	; 0x38
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	021b      	lsls	r3, r3, #8
 800a98c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	60ba      	str	r2, [r7, #8]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	4313      	orrs	r3, r2
 800a99c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	021b      	lsls	r3, r3, #8
 800a9a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	60ba      	str	r2, [r7, #8]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9b6:	f7f6 fbe6 	bl	8001186 <lwip_htonl>
 800a9ba:	6378      	str	r0, [r7, #52]	; 0x34
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	60ba      	str	r2, [r7, #8]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	60ba      	str	r2, [r7, #8]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	60ba      	str	r2, [r7, #8]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	60ba      	str	r2, [r7, #8]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	4313      	orrs	r3, r2
 800aa02:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa06:	f7f6 fbbe 	bl	8001186 <lwip_htonl>
 800aa0a:	6338      	str	r0, [r7, #48]	; 0x30
 800aa0c:	7f3b      	ldrb	r3, [r7, #28]
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	773b      	strb	r3, [r7, #28]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d004      	beq.n	800aa24 <ipcp_nakci+0x142>
 800aa1a:	7c3b      	ldrb	r3, [r7, #16]
 800aa1c:	f36f 0341 	bfc	r3, #1, #1
 800aa20:	743b      	strb	r3, [r7, #16]
 800aa22:	e017      	b.n	800aa54 <ipcp_nakci+0x172>
 800aa24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 0308 	and.w	r3, r3, #8
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <ipcp_nakci+0x15a>
 800aa32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <ipcp_nakci+0x15a>
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 0310 	and.w	r3, r3, #16
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d004      	beq.n	800aa54 <ipcp_nakci+0x172>
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <ipcp_nakci+0x172>
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800aa54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 816e 	beq.w	800ad40 <ipcp_nakci+0x45e>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	785b      	ldrb	r3, [r3, #1]
 800aa68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aa6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa70:	2b06      	cmp	r3, #6
 800aa72:	f040 8165 	bne.w	800ad40 <ipcp_nakci+0x45e>
 800aa76:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	f300 815f 	bgt.w	800ad40 <ipcp_nakci+0x45e>
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	f040 815a 	bne.w	800ad40 <ipcp_nakci+0x45e>
 800aa8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	3302      	adds	r3, #2
 800aa9a:	60bb      	str	r3, [r7, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	60ba      	str	r2, [r7, #8]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	60ba      	str	r2, [r7, #8]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	4313      	orrs	r3, r2
 800aab6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	021b      	lsls	r3, r3, #8
 800aabc:	63bb      	str	r3, [r7, #56]	; 0x38
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	60ba      	str	r2, [r7, #8]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	4313      	orrs	r3, r2
 800aacc:	63bb      	str	r3, [r7, #56]	; 0x38
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	021b      	lsls	r3, r3, #8
 800aad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	60ba      	str	r2, [r7, #8]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	4313      	orrs	r3, r2
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aae6:	f7f6 fb4e 	bl	8001186 <lwip_htonl>
 800aaea:	6378      	str	r0, [r7, #52]	; 0x34
 800aaec:	7f3b      	ldrb	r3, [r7, #28]
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	773b      	strb	r3, [r7, #28]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <ipcp_nakci+0x22a>
 800aafa:	7c3b      	ldrb	r3, [r7, #16]
 800aafc:	f36f 0300 	bfc	r3, #0, #1
 800ab00:	743b      	strb	r3, [r7, #16]
 800ab02:	7c3b      	ldrb	r3, [r7, #16]
 800ab04:	f36f 0341 	bfc	r3, #1, #1
 800ab08:	743b      	strb	r3, [r7, #16]
 800ab0a:	e119      	b.n	800ad40 <ipcp_nakci+0x45e>
 800ab0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 0308 	and.w	r3, r3, #8
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 8112 	beq.w	800ad40 <ipcp_nakci+0x45e>
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 810e 	beq.w	800ad40 <ipcp_nakci+0x45e>
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800ab28:	e10a      	b.n	800ad40 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	60ba      	str	r2, [r7, #8]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	60ba      	str	r2, [r7, #8]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800ab42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	f240 810c 	bls.w	800ad64 <ipcp_nakci+0x482>
 800ab4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	607b      	str	r3, [r7, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f2c0 8103 	blt.w	800ad64 <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800ab5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab62:	3b02      	subs	r3, #2
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4413      	add	r3, r2
 800ab68:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800ab6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d003      	beq.n	800ab7a <ipcp_nakci+0x298>
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	f000 808d 	beq.w	800ac92 <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800ab78:	e0e0      	b.n	800ad3c <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d107      	bne.n	800ab98 <ipcp_nakci+0x2b6>
 800ab88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 80e6 	bne.w	800ad64 <ipcp_nakci+0x482>
 800ab98:	7f3b      	ldrb	r3, [r7, #28]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f040 80df 	bne.w	800ad64 <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800aba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abaa:	2b0a      	cmp	r3, #10
 800abac:	f040 80da 	bne.w	800ad64 <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800abb0:	7c3b      	ldrb	r3, [r7, #16]
 800abb2:	f36f 0300 	bfc	r3, #0, #1
 800abb6:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	1c5a      	adds	r2, r3, #1
 800abbc:	60ba      	str	r2, [r7, #8]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	60ba      	str	r2, [r7, #8]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	4313      	orrs	r3, r2
 800abd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	60ba      	str	r2, [r7, #8]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	4313      	orrs	r3, r2
 800abe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	63bb      	str	r3, [r7, #56]	; 0x38
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	60ba      	str	r2, [r7, #8]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	461a      	mov	r2, r3
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	4313      	orrs	r3, r2
 800abfe:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800ac00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac02:	f7f6 fac0 	bl	8001186 <lwip_htonl>
 800ac06:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d008      	beq.n	800ac20 <ipcp_nakci+0x33e>
 800ac0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	f003 0308 	and.w	r3, r3, #8
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	60ba      	str	r2, [r7, #8]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	021b      	lsls	r3, r3, #8
 800ac2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	60ba      	str	r2, [r7, #8]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	60ba      	str	r2, [r7, #8]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	60ba      	str	r2, [r7, #8]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	4313      	orrs	r3, r2
 800ac66:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800ac68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac6a:	f7f6 fa8c 	bl	8001186 <lwip_htonl>
 800ac6e:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d008      	beq.n	800ac88 <ipcp_nakci+0x3a6>
 800ac76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 0310 	and.w	r3, r3, #16
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac86:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800ac88:	7f3b      	ldrb	r3, [r7, #28]
 800ac8a:	f043 0302 	orr.w	r3, r3, #2
 800ac8e:	773b      	strb	r3, [r7, #28]
	    break;
 800ac90:	e054      	b.n	800ad3c <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800ac92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d161      	bne.n	800ad64 <ipcp_nakci+0x482>
 800aca0:	7f3b      	ldrb	r3, [r7, #28]
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d15b      	bne.n	800ad64 <ipcp_nakci+0x482>
 800acac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acb0:	2b06      	cmp	r3, #6
 800acb2:	d157      	bne.n	800ad64 <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800acb4:	7c3b      	ldrb	r3, [r7, #16]
 800acb6:	f36f 0341 	bfc	r3, #1, #1
 800acba:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	60ba      	str	r2, [r7, #8]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	60ba      	str	r2, [r7, #8]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	4313      	orrs	r3, r2
 800acd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	60ba      	str	r2, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	4313      	orrs	r3, r2
 800acec:	63bb      	str	r3, [r7, #56]	; 0x38
 800acee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	60ba      	str	r2, [r7, #8]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	4313      	orrs	r3, r2
 800ad02:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800ad04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad06:	f7f6 fa3e 	bl	8001186 <lwip_htonl>
 800ad0a:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d008      	beq.n	800ad24 <ipcp_nakci+0x442>
 800ad12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	f003 0308 	and.w	r3, r3, #8
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800ad2a:	7c3b      	ldrb	r3, [r7, #16]
 800ad2c:	f043 0301 	orr.w	r3, r3, #1
 800ad30:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800ad32:	7f3b      	ldrb	r3, [r7, #28]
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	773b      	strb	r3, [r7, #28]
	    break;
 800ad3a:	bf00      	nop
	}
	p = next;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	f73f aef1 	bgt.w	800ab2a <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	7c1b      	ldrb	r3, [r3, #16]
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d007      	beq.n	800ad60 <ipcp_nakci+0x47e>
	*go = try_;
 800ad50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad52:	461c      	mov	r4, r3
 800ad54:	f107 0310 	add.w	r3, r7, #16
 800ad58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e000      	b.n	800ad66 <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	374c      	adds	r7, #76	; 0x4c
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd90      	pop	{r4, r7, pc}

0800ad6e <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800ad6e:	b590      	push	{r4, r7, lr}
 800ad70:	b08f      	sub	sp, #60	; 0x3c
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ad86:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800ad88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad8a:	f107 0314 	add.w	r3, r7, #20
 800ad8e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d17e      	bne.n	800aea0 <ipcp_rejci+0x132>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	d077      	beq.n	800aea0 <ipcp_rejci+0x132>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adbc:	2b0a      	cmp	r3, #10
 800adbe:	d16f      	bne.n	800aea0 <ipcp_rejci+0x132>
 800adc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	dc6a      	bgt.n	800aea0 <ipcp_rejci+0x132>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d166      	bne.n	800aea0 <ipcp_rejci+0x132>
 800add2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	607b      	str	r3, [r7, #4]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3302      	adds	r3, #2
 800ade0:	60bb      	str	r3, [r7, #8]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	60ba      	str	r2, [r7, #8]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	021b      	lsls	r3, r3, #8
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	1c5a      	adds	r2, r3, #1
 800adf2:	60ba      	str	r2, [r7, #8]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	4313      	orrs	r3, r2
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	60ba      	str	r2, [r7, #8]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	4313      	orrs	r3, r2
 800ae12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	60ba      	str	r2, [r7, #8]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	4313      	orrs	r3, r2
 800ae28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae2c:	f7f6 f9ab 	bl	8001186 <lwip_htonl>
 800ae30:	6278      	str	r0, [r7, #36]	; 0x24
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	f040 8093 	bne.w	800af64 <ipcp_rejci+0x1f6>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	60ba      	str	r2, [r7, #8]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	60ba      	str	r2, [r7, #8]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	4313      	orrs	r3, r2
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	60ba      	str	r2, [r7, #8]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	021b      	lsls	r3, r3, #8
 800ae74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	60ba      	str	r2, [r7, #8]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	4313      	orrs	r3, r2
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae88:	f7f6 f97d 	bl	8001186 <lwip_htonl>
 800ae8c:	6278      	str	r0, [r7, #36]	; 0x24
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d167      	bne.n	800af68 <ipcp_rejci+0x1fa>
 800ae98:	7d3b      	ldrb	r3, [r7, #20]
 800ae9a:	f36f 0341 	bfc	r3, #1, #1
 800ae9e:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d049      	beq.n	800af42 <ipcp_rejci+0x1d4>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aeb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeba:	2b06      	cmp	r3, #6
 800aebc:	d141      	bne.n	800af42 <ipcp_rejci+0x1d4>
 800aebe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	dc3c      	bgt.n	800af42 <ipcp_rejci+0x1d4>
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b03      	cmp	r3, #3
 800aece:	d138      	bne.n	800af42 <ipcp_rejci+0x1d4>
 800aed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	607b      	str	r3, [r7, #4]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	3302      	adds	r3, #2
 800aede:	60bb      	str	r3, [r7, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	60ba      	str	r2, [r7, #8]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	623b      	str	r3, [r7, #32]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	60ba      	str	r2, [r7, #8]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	623b      	str	r3, [r7, #32]
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	60ba      	str	r2, [r7, #8]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	4313      	orrs	r3, r2
 800af10:	623b      	str	r3, [r7, #32]
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	623b      	str	r3, [r7, #32]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	60ba      	str	r2, [r7, #8]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	4313      	orrs	r3, r2
 800af26:	623b      	str	r3, [r7, #32]
 800af28:	6a38      	ldr	r0, [r7, #32]
 800af2a:	f7f6 f92c 	bl	8001186 <lwip_htonl>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	429a      	cmp	r2, r3
 800af38:	d118      	bne.n	800af6c <ipcp_rejci+0x1fe>
 800af3a:	7d3b      	ldrb	r3, [r7, #20]
 800af3c:	f36f 0300 	bfc	r3, #0, #1
 800af40:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d113      	bne.n	800af70 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	7c1b      	ldrb	r3, [r3, #16]
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d007      	beq.n	800af60 <ipcp_rejci+0x1f2>
	*go = try_;
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	461c      	mov	r4, r3
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800af60:	2301      	movs	r3, #1
 800af62:	e007      	b.n	800af74 <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800af64:	bf00      	nop
 800af66:	e004      	b.n	800af72 <ipcp_rejci+0x204>
 800af68:	bf00      	nop
 800af6a:	e002      	b.n	800af72 <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800af6c:	bf00      	nop
 800af6e:	e000      	b.n	800af72 <ipcp_rejci+0x204>
	goto bad;
 800af70:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	373c      	adds	r7, #60	; 0x3c
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd90      	pop	{r4, r7, pc}

0800af7c <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b094      	sub	sp, #80	; 0x50
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800afa8:	2302      	movs	r3, #2
 800afaa:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800afb6:	220c      	movs	r2, #12
 800afb8:	2100      	movs	r1, #0
 800afba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afbc:	f004 f807 	bl	800efce <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800afc4:	e1f3      	b.n	800b3ae <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800afc6:	2302      	movs	r3, #2
 800afc8:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800afca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd0:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	dd0b      	ble.n	800aff0 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afda:	3301      	adds	r3, #1
 800afdc:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d906      	bls.n	800aff0 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800afe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe4:	3301      	adds	r3, #1
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800afea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afec:	429a      	cmp	r2, r3
 800afee:	dd07      	ble.n	800b000 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800aff0:	2304      	movs	r3, #4
 800aff2:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800affa:	2300      	movs	r3, #0
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800affe:	e1a1      	b.n	800b344 <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800b00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800b016:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800b020:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b026:	4413      	add	r3, r2
 800b028:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800b02a:	8bfb      	ldrh	r3, [r7, #30]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d003      	beq.n	800b038 <ipcp_reqci+0xbc>
 800b030:	2b03      	cmp	r3, #3
 800b032:	f000 80f6 	beq.w	800b222 <ipcp_reqci+0x2a6>
 800b036:	e182      	b.n	800b33e <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f003 0302 	and.w	r3, r3, #2
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <ipcp_reqci+0xe0>
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b00      	cmp	r3, #0
 800b052:	d103      	bne.n	800b05c <ipcp_reqci+0xe0>
 800b054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b058:	2b0a      	cmp	r3, #10
 800b05a:	d002      	beq.n	800b062 <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800b05c:	2304      	movs	r3, #4
 800b05e:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800b060:	e170      	b.n	800b344 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800b062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	61bb      	str	r3, [r7, #24]
 800b06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	61bb      	str	r3, [r7, #24]
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	4313      	orrs	r3, r2
 800b092:	61bb      	str	r3, [r7, #24]
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	021b      	lsls	r3, r3, #8
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800b0aa:	69b8      	ldr	r0, [r7, #24]
 800b0ac:	f7f6 f86b 	bl	8001186 <lwip_htonl>
 800b0b0:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	689a      	ldr	r2, [r3, #8]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d033      	beq.n	800b124 <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d006      	beq.n	800b0d0 <ipcp_reqci+0x154>
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 0310 	and.w	r3, r3, #16
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d129      	bne.n	800b124 <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d133      	bne.n	800b142 <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800b0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0dc:	3b04      	subs	r3, #4
 800b0de:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f6 f84e 	bl	8001186 <lwip_htonl>
 800b0ea:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	0e12      	lsrs	r2, r2, #24
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]
 800b0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	0c12      	lsrs	r2, r2, #16
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	0a12      	lsrs	r2, r2, #8
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800b122:	e00e      	b.n	800b142 <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10b      	bne.n	800b142 <ipcp_reqci+0x1c6>
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d107      	bne.n	800b142 <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800b132:	2304      	movs	r3, #4
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800b136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b138:	7813      	ldrb	r3, [r2, #0]
 800b13a:	f36f 0382 	bfc	r3, #2, #1
 800b13e:	7013      	strb	r3, [r2, #0]
		break;
 800b140:	e100      	b.n	800b344 <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	461a      	mov	r2, r3
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	4313      	orrs	r3, r2
 800b172:	61bb      	str	r3, [r7, #24]
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	4313      	orrs	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800b18a:	69b8      	ldr	r0, [r7, #24]
 800b18c:	f7f5 fffb 	bl	8001186 <lwip_htonl>
 800b190:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d036      	beq.n	800b20a <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <ipcp_reqci+0x234>
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d129      	bne.n	800b204 <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d127      	bne.n	800b20a <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1bc:	3b04      	subs	r3, #4
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800b1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7f5 ffde 	bl	8001186 <lwip_htonl>
 800b1ca:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	0e12      	lsrs	r2, r2, #24
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	0c12      	lsrs	r2, r2, #16
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	0a12      	lsrs	r2, r2, #8
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	b2d2      	uxtb	r2, r2
 800b200:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800b202:	e002      	b.n	800b20a <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800b204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800b20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b20c:	7813      	ldrb	r3, [r2, #0]
 800b20e:	f043 0302 	orr.w	r3, r3, #2
 800b212:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	605a      	str	r2, [r3, #4]
	    break;
 800b220:	e090      	b.n	800b344 <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <ipcp_reqci+0x2ca>
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <ipcp_reqci+0x2ca>
 800b23e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b242:	2b06      	cmp	r3, #6
 800b244:	d002      	beq.n	800b24c <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800b246:	2304      	movs	r3, #4
 800b248:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800b24a:	e07b      	b.n	800b344 <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800b24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	4313      	orrs	r3, r2
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	021b      	lsls	r3, r3, #8
 800b282:	61bb      	str	r3, [r7, #24]
 800b284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	4313      	orrs	r3, r2
 800b292:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800b294:	69b8      	ldr	r0, [r7, #24]
 800b296:	f7f5 ff76 	bl	8001186 <lwip_htonl>
 800b29a:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	689a      	ldr	r2, [r3, #8]
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d033      	beq.n	800b30e <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <ipcp_reqci+0x33e>
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	f003 0310 	and.w	r3, r3, #16
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d129      	bne.n	800b30e <ipcp_reqci+0x392>
		orc = CONFNAK;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d133      	bne.n	800b32c <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c6:	3b04      	subs	r3, #4
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f5 ff59 	bl	8001186 <lwip_htonl>
 800b2d4:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	0e12      	lsrs	r2, r2, #24
 800b2e0:	b2d2      	uxtb	r2, r2
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	0c12      	lsrs	r2, r2, #16
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	0a12      	lsrs	r2, r2, #8
 800b2fc:	b2d2      	uxtb	r2, r2
 800b2fe:	701a      	strb	r2, [r3, #0]
 800b300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800b30c:	e00e      	b.n	800b32c <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10b      	bne.n	800b32c <ipcp_reqci+0x3b0>
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d107      	bne.n	800b32c <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800b31c:	2304      	movs	r3, #4
 800b31e:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800b320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b322:	7813      	ldrb	r3, [r2, #0]
 800b324:	f36f 0382 	bfc	r3, #2, #1
 800b328:	7013      	strb	r3, [r2, #0]
		break;
 800b32a:	e00b      	b.n	800b344 <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800b32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b32e:	7813      	ldrb	r3, [r2, #0]
 800b330:	f043 0301 	orr.w	r3, r3, #1
 800b334:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800b336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	609a      	str	r2, [r3, #8]
	    break;
 800b33c:	e002      	b.n	800b344 <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800b33e:	2304      	movs	r3, #4
 800b340:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800b342:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	2b02      	cmp	r3, #2
 800b348:	d103      	bne.n	800b352 <ipcp_reqci+0x3d6>
 800b34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d000      	beq.n	800b352 <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800b350:	e02d      	b.n	800b3ae <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	2b03      	cmp	r3, #3
 800b356:	d110      	bne.n	800b37a <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800b35e:	2304      	movs	r3, #4
 800b360:	643b      	str	r3, [r7, #64]	; 0x40
 800b362:	e00a      	b.n	800b37a <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800b364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b366:	2b04      	cmp	r3, #4
 800b368:	d100      	bne.n	800b36c <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800b36a:	e020      	b.n	800b3ae <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800b36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d103      	bne.n	800b37a <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800b372:	2303      	movs	r3, #3
 800b374:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800b37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37c:	2b04      	cmp	r3, #4
 800b37e:	d106      	bne.n	800b38e <ipcp_reqci+0x412>
 800b380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b382:	2b04      	cmp	r3, #4
 800b384:	d003      	beq.n	800b38e <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800b386:	2304      	movs	r3, #4
 800b388:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800b38e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	429a      	cmp	r2, r3
 800b394:	d006      	beq.n	800b3a4 <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800b396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b39a:	461a      	mov	r2, r3
 800b39c:	6a39      	ldr	r1, [r7, #32]
 800b39e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3a0:	f003 fdf0 	bl	800ef84 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800b3a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b3a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3aa:	4413      	add	r3, r2
 800b3ac:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f47f ae08 	bne.w	800afc6 <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800b3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d055      	beq.n	800b468 <ipcp_reqci+0x4ec>
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d14e      	bne.n	800b468 <ipcp_reqci+0x4ec>
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d147      	bne.n	800b468 <ipcp_reqci+0x4ec>
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f003 0304 	and.w	r3, r3, #4
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d040      	beq.n	800b468 <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d13d      	bne.n	800b468 <ipcp_reqci+0x4ec>
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d136      	bne.n	800b468 <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800b3fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d108      	bne.n	800b412 <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800b400:	2303      	movs	r3, #3
 800b402:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800b408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b40a:	7813      	ldrb	r3, [r2, #0]
 800b40c:	f36f 0382 	bfc	r3, #2, #1
 800b410:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	63ba      	str	r2, [r7, #56]	; 0x38
 800b418:	2203      	movs	r2, #3
 800b41a:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	63ba      	str	r2, [r7, #56]	; 0x38
 800b422:	2206      	movs	r2, #6
 800b424:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f5 feab 	bl	8001186 <lwip_htonl>
 800b430:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	63ba      	str	r2, [r7, #56]	; 0x38
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	0e12      	lsrs	r2, r2, #24
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	63ba      	str	r2, [r7, #56]	; 0x38
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	0c12      	lsrs	r2, r2, #16
 800b44a:	b2d2      	uxtb	r2, r2
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	63ba      	str	r2, [r7, #56]	; 0x38
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	0a12      	lsrs	r2, r2, #8
 800b458:	b2d2      	uxtb	r2, r2
 800b45a:	701a      	strb	r2, [r3, #0]
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	63ba      	str	r2, [r7, #56]	; 0x38
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800b468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	1ad2      	subs	r2, r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800b472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b474:	4618      	mov	r0, r3
 800b476:	3750      	adds	r7, #80	; 0x50
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b490:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b498:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800b4a0:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <ipcp_up+0x4a>
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f003 0302 	and.w	r3, r3, #2
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	689a      	ldr	r2, [r3, #8]
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d11f      	bne.n	800b514 <ipcp_up+0x98>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d118      	bne.n	800b514 <ipcp_up+0x98>
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <ipcp_up+0x82>
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	493b      	ldr	r1, [pc, #236]	; (800b5f8 <ipcp_up+0x17c>)
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe ff36 	bl	800a37e <ipcp_close>
	return;
 800b512:	e06e      	b.n	800b5f2 <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4936      	ldr	r1, [pc, #216]	; (800b5fc <ipcp_up+0x180>)
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe ff2b 	bl	800a37e <ipcp_close>
	return;
 800b528:	e063      	b.n	800b5f2 <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10c      	bne.n	800b54c <ipcp_up+0xd0>
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0304 	and.w	r3, r3, #4
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d105      	bne.n	800b54c <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800b540:	482f      	ldr	r0, [pc, #188]	; (800b600 <ipcp_up+0x184>)
 800b542:	f7f5 fe20 	bl	8001186 <lwip_htonl>
 800b546:	4602      	mov	r2, r0
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01a      	beq.n	800b58a <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7f5 fe14 	bl	8001186 <lwip_htonl>
 800b55e:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	0e1b      	lsrs	r3, r3, #24
 800b564:	2b7f      	cmp	r3, #127	; 0x7f
 800b566:	d00b      	beq.n	800b580 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b56e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800b572:	d005      	beq.n	800b580 <ipcp_up+0x104>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b57a:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800b57e:	d104      	bne.n	800b58a <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800b580:	4920      	ldr	r1, [pc, #128]	; (800b604 <ipcp_up+0x188>)
 800b582:	69f8      	ldr	r0, [r7, #28]
 800b584:	f7fe fefb 	bl	800a37e <ipcp_close>
		return;
 800b588:	e033      	b.n	800b5f2 <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4618      	mov	r0, r3
 800b590:	f002 fb88 	bl	800dca4 <get_mask>
 800b594:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	6859      	ldr	r1, [r3, #4]
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	69f8      	ldr	r0, [r7, #28]
 800b5a2:	f002 fb15 	bl	800dbd0 <sifaddr>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d106      	bne.n	800b5ba <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4915      	ldr	r1, [pc, #84]	; (800b608 <ipcp_up+0x18c>)
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fee3 	bl	800a37e <ipcp_close>
	    return;
 800b5b8:	e01b      	b.n	800b5f2 <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800b5ba:	69f8      	ldr	r0, [r7, #28]
 800b5bc:	f002 fb3a 	bl	800dc34 <sifup>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	490f      	ldr	r1, [pc, #60]	; (800b608 <ipcp_up+0x18c>)
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fed6 	bl	800a37e <ipcp_close>
	    return;
 800b5d2:	e00e      	b.n	800b5f2 <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800b5dc:	2121      	movs	r1, #33	; 0x21
 800b5de:	69f8      	ldr	r0, [r7, #28]
 800b5e0:	f7fd fecc 	bl	800937c <np_up>
    pcb->ipcp_is_up = 1;
 800b5e4:	69fa      	ldr	r2, [r7, #28]
 800b5e6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800b5ea:	f043 0304 	orr.w	r3, r3, #4
 800b5ee:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	08011d90 	.word	0x08011d90
 800b5fc:	08011da8 	.word	0x08011da8
 800b600:	0a404040 	.word	0x0a404040
 800b604:	08011dd0 	.word	0x08011dd0
 800b608:	08011df0 	.word	0x08011df0

0800b60c <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b620:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b628:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b630:	f003 0304 	and.w	r3, r3, #4
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800b640:	f36f 0382 	bfc	r3, #2, #1
 800b644:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800b648:	2121      	movs	r1, #33	; 0x21
 800b64a:	6978      	ldr	r0, [r7, #20]
 800b64c:	f7fd feb0 	bl	80093b0 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800b650:	6978      	ldr	r0, [r7, #20]
 800b652:	f002 fb12 	bl	800dc7a <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6859      	ldr	r1, [r3, #4]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	689a      	ldr	r2, [r3, #8]
 800b65e:	2300      	movs	r3, #0
 800b660:	6978      	ldr	r0, [r7, #20]
 800b662:	f000 f804 	bl	800b66e <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800b666:	bf00      	nop
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
 800b67a:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f002 fac1 	bl	800dc08 <cifaddr>
}
 800b686:	bf00      	nop
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800b6b2:	f36f 0341 	bfc	r3, #1, #1
 800b6b6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800b6ba:	2121      	movs	r1, #33	; 0x21
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7fd fe91 	bl	80093e4 <np_finished>
	}
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3344      	adds	r3, #68	; 0x44
 800b6d8:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3360      	adds	r3, #96	; 0x60
 800b6de:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	33a8      	adds	r3, #168	; 0xa8
 800b6e4:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b6f2:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	4a2b      	ldr	r2, [pc, #172]	; (800b7a4 <lcp_init+0xd8>)
 800b6f8:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800b6fa:	6978      	ldr	r0, [r7, #20]
 800b6fc:	f7fd fe8e 	bl	800941c <fsm_init>

    BZERO(wo, sizeof(*wo));
 800b700:	2224      	movs	r2, #36	; 0x24
 800b702:	2100      	movs	r1, #0
 800b704:	6938      	ldr	r0, [r7, #16]
 800b706:	f003 fc62 	bl	800efce <memset>
    wo->neg_mru = 1;
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	7813      	ldrb	r3, [r2, #0]
 800b70e:	f043 0304 	orr.w	r3, r3, #4
 800b712:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b71a:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	7813      	ldrb	r3, [r2, #0]
 800b720:	f043 0308 	orr.w	r3, r3, #8
 800b724:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	7813      	ldrb	r3, [r2, #0]
 800b72a:	f043 0320 	orr.w	r3, r3, #32
 800b72e:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	7813      	ldrb	r3, [r2, #0]
 800b734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b738:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	7813      	ldrb	r3, [r2, #0]
 800b73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b742:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800b744:	2224      	movs	r2, #36	; 0x24
 800b746:	2100      	movs	r1, #0
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f003 fc40 	bl	800efce <memset>
    ao->neg_mru = 1;
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	7813      	ldrb	r3, [r2, #0]
 800b752:	f043 0304 	orr.w	r3, r3, #4
 800b756:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b75e:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	7813      	ldrb	r3, [r2, #0]
 800b764:	f043 0308 	orr.w	r3, r3, #8
 800b768:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	7813      	ldrb	r3, [r2, #0]
 800b76e:	f043 0310 	orr.w	r3, r3, #16
 800b772:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	7813      	ldrb	r3, [r2, #0]
 800b778:	f043 0320 	orr.w	r3, r3, #32
 800b77c:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	7813      	ldrb	r3, [r2, #0]
 800b782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b786:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	7813      	ldrb	r3, [r2, #0]
 800b78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b790:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	7853      	ldrb	r3, [r2, #1]
 800b796:	f043 0304 	orr.w	r3, r3, #4
 800b79a:	7053      	strb	r3, [r2, #1]
}
 800b79c:	bf00      	nop
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	08012150 	.word	0x08012150

0800b7a8 <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3344      	adds	r3, #68	; 0x44
 800b7b4:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3360      	adds	r3, #96	; 0x60
 800b7ba:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	7c5b      	ldrb	r3, [r3, #17]
 800b7c0:	f023 0305 	bic.w	r3, r3, #5
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7c5b      	ldrb	r3, [r3, #17]
 800b7dc:	f043 0301 	orr.w	r3, r3, #1
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	7c5b      	ldrb	r3, [r3, #17]
 800b7f8:	f043 0304 	orr.w	r3, r3, #4
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7fd fea0 	bl	8009548 <fsm_open>
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3344      	adds	r3, #68	; 0x44
 800b81e:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800b82a:	210b      	movs	r1, #11
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 f987 	bl	800db40 <new_phase>

    if (f->flags & DELAYED_UP) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	7c5b      	ldrb	r3, [r3, #17]
 800b836:	b25b      	sxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	da06      	bge.n	800b84a <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800b83c:	68f9      	ldr	r1, [r7, #12]
 800b83e:	4812      	ldr	r0, [pc, #72]	; (800b888 <lcp_close+0x78>)
 800b840:	f7fd fbfe 	bl	8009040 <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2203      	movs	r2, #3
 800b848:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	7c1b      	ldrb	r3, [r3, #16]
 800b84e:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7fd ff40 	bl	80096d8 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d10f      	bne.n	800b87e <lcp_close+0x6e>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	7c5b      	ldrb	r3, [r3, #17]
 800b862:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800b866:	2b00      	cmp	r3, #0
 800b868:	d009      	beq.n	800b87e <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	7c5b      	ldrb	r3, [r3, #17]
 800b86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b872:	b2da      	uxtb	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f001 ff1a 	bl	800d6b2 <lcp_finished>
    }
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	0800b98d 	.word	0x0800b98d

0800b88c <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af02      	add	r7, sp, #8
 800b892:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3360      	adds	r3, #96	; 0x60
 800b898:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3344      	adds	r3, #68	; 0x44
 800b89e:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8aa:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f002 f956 	bl	800db60 <ppp_send_config>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	db3f      	blt.n	800b93a <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	f003 0308 	and.w	r3, r3, #8
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <lcp_lowerup+0x40>
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	e001      	b.n	800b8d0 <lcp_lowerup+0x44>
 800b8cc:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b8d8:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800b8da:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b8e4:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f002 f952 	bl	800db98 <ppp_recv_config>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	db1f      	blt.n	800b93a <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b900:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	885b      	ldrh	r3, [r3, #2]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d012      	beq.n	800b932 <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	7c5b      	ldrb	r3, [r3, #17]
 800b910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b914:	b2da      	uxtb	r2, r3
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	4809      	ldr	r0, [pc, #36]	; (800b944 <lcp_lowerup+0xb8>)
 800b91e:	f7fd fb8f 	bl	8009040 <sys_untimeout>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	885b      	ldrh	r3, [r3, #2]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	4906      	ldr	r1, [pc, #24]	; (800b944 <lcp_lowerup+0xb8>)
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fd fb5c 	bl	8008fe8 <sys_timeout>
 800b930:	e004      	b.n	800b93c <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800b932:	68b8      	ldr	r0, [r7, #8]
 800b934:	f7fd fd8f 	bl	8009456 <fsm_lowerup>
 800b938:	e000      	b.n	800b93c <lcp_lowerup+0xb0>
	    return;
 800b93a:	bf00      	nop
}
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	0800b98d 	.word	0x0800b98d

0800b948 <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	3344      	adds	r3, #68	; 0x44
 800b954:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	7c5b      	ldrb	r3, [r3, #17]
 800b95a:	b25b      	sxtb	r3, r3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	da0b      	bge.n	800b978 <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	7c5b      	ldrb	r3, [r3, #17]
 800b964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800b96e:	68f9      	ldr	r1, [r7, #12]
 800b970:	4805      	ldr	r0, [pc, #20]	; (800b988 <lcp_lowerdown+0x40>)
 800b972:	f7fd fb65 	bl	8009040 <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800b976:	e002      	b.n	800b97e <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7fd fd91 	bl	80094a0 <fsm_lowerdown>
}
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	0800b98d 	.word	0x0800b98d

0800b98c <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	7c5b      	ldrb	r3, [r3, #17]
 800b99c:	b25b      	sxtb	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	da09      	bge.n	800b9b6 <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	7c5b      	ldrb	r3, [r3, #17]
 800b9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f7fd fd50 	bl	8009456 <fsm_lowerup>
    }
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3344      	adds	r3, #68	; 0x44
 800b9d0:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	7c5b      	ldrb	r3, [r3, #17]
 800b9d6:	b25b      	sxtb	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da0d      	bge.n	800b9f8 <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	7c5b      	ldrb	r3, [r3, #17]
 800b9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800b9ea:	6979      	ldr	r1, [r7, #20]
 800b9ec:	4807      	ldr	r0, [pc, #28]	; (800ba0c <lcp_input+0x4c>)
 800b9ee:	f7fd fb27 	bl	8009040 <sys_untimeout>
	fsm_lowerup(f);
 800b9f2:	6978      	ldr	r0, [r7, #20]
 800b9f4:	f7fd fd2f 	bl	8009456 <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	6978      	ldr	r0, [r7, #20]
 800b9fe:	f7fd ff4f 	bl	80098a0 <fsm_input>
}
 800ba02:	bf00      	nop
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	0800b98d 	.word	0x0800b98d

0800ba10 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08a      	sub	sp, #40	; 0x28
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	3384      	adds	r3, #132	; 0x84
 800ba28:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	3b08      	subs	r3, #8
 800ba2e:	2b05      	cmp	r3, #5
 800ba30:	d84a      	bhi.n	800bac8 <lcp_extcode+0xb8>
 800ba32:	a201      	add	r2, pc, #4	; (adr r2, 800ba38 <lcp_extcode+0x28>)
 800ba34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba38:	0800ba51 	.word	0x0800ba51
 800ba3c:	0800ba5d 	.word	0x0800ba5d
 800ba40:	0800babb 	.word	0x0800babb
 800ba44:	0800bacd 	.word	0x0800bacd
 800ba48:	0800bacd 	.word	0x0800bacd
 800ba4c:	0800bacd 	.word	0x0800bacd
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800ba50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f841 	bl	800badc <lcp_rprotrej>
	break;
 800ba5a:	e03a      	b.n	800bad2 <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	7c1b      	ldrb	r3, [r3, #16]
 800ba60:	2b09      	cmp	r3, #9
 800ba62:	d135      	bne.n	800bad0 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	617a      	str	r2, [r7, #20]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	6892      	ldr	r2, [r2, #8]
 800ba72:	0e12      	lsrs	r2, r2, #24
 800ba74:	b2d2      	uxtb	r2, r2
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	617a      	str	r2, [r7, #20]
 800ba7e:	69ba      	ldr	r2, [r7, #24]
 800ba80:	6892      	ldr	r2, [r2, #8]
 800ba82:	0c12      	lsrs	r2, r2, #16
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	617a      	str	r2, [r7, #20]
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	6892      	ldr	r2, [r2, #8]
 800ba92:	0a12      	lsrs	r2, r2, #8
 800ba94:	b2d2      	uxtb	r2, r2
 800ba96:	701a      	strb	r2, [r3, #0]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	617a      	str	r2, [r7, #20]
 800ba9e:	69ba      	ldr	r2, [r7, #24]
 800baa0:	6892      	ldr	r2, [r2, #8]
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	210a      	movs	r1, #10
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7fe fb8c 	bl	800a1d0 <fsm_sdata>
	break;
 800bab8:	e00b      	b.n	800bad2 <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f001 fe6a 	bl	800d79a <lcp_received_echo_reply>
	break;
 800bac6:	e004      	b.n	800bad2 <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	e003      	b.n	800bad4 <lcp_extcode+0xc4>
	break;
 800bacc:	bf00      	nop
 800bace:	e000      	b.n	800bad2 <lcp_extcode+0xc2>
	    break;
 800bad0:	bf00      	nop
    }
    return 1;
 800bad2:	2301      	movs	r3, #1
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b01      	cmp	r3, #1
 800baec:	dd2d      	ble.n	800bb4a <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	60ba      	str	r2, [r7, #8]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	021b      	lsls	r3, r3, #8
 800bafa:	837b      	strh	r3, [r7, #26]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	60ba      	str	r2, [r7, #8]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	8b7b      	ldrh	r3, [r7, #26]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	7c1b      	ldrb	r3, [r3, #16]
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d11c      	bne.n	800bb4e <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e00e      	b.n	800bb38 <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	8b7a      	ldrh	r2, [r7, #26]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d106      	bne.n	800bb32 <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	6812      	ldr	r2, [r2, #0]
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
	    return;
 800bb30:	e00e      	b.n	800bb50 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	3301      	adds	r3, #1
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	4a07      	ldr	r2, [pc, #28]	; (800bb58 <lcp_rprotrej+0x7c>)
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1e8      	bne.n	800bb1a <lcp_rprotrej+0x3e>
 800bb48:	e002      	b.n	800bb50 <lcp_rprotrej+0x74>
	return;
 800bb4a:	bf00      	nop
 800bb4c:	e000      	b.n	800bb50 <lcp_rprotrej+0x74>
	return;
 800bb4e:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	080121ac 	.word	0x080121ac

0800bb5c <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3344      	adds	r3, #68	; 0x44
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe f9f5 	bl	8009f58 <fsm_protreject>
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b088      	sub	sp, #32
 800bb7a:	af02      	add	r7, sp, #8
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3344      	adds	r3, #68	; 0x44
 800bb86:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	7c9b      	ldrb	r3, [r3, #18]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	749a      	strb	r2, [r3, #18]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	7c9a      	ldrb	r2, [r3, #18]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2108      	movs	r1, #8
 800bba0:	6978      	ldr	r0, [r7, #20]
 800bba2:	f7fe fb15 	bl	800a1d0 <fsm_sdata>
	      p, len);
}
 800bba6:	bf00      	nop
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 800bbae:	b5b0      	push	{r4, r5, r7, lr}
 800bbb0:	b086      	sub	sp, #24
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	3360      	adds	r3, #96	; 0x60
 800bbc0:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	3384      	adds	r3, #132	; 0x84
 800bbc6:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	33a8      	adds	r3, #168	; 0xa8
 800bbcc:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d010      	beq.n	800bbf8 <lcp_resetci+0x4a>
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00c      	beq.n	800bbf8 <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00a      	beq.n	800bc02 <lcp_resetci+0x54>
        ao->neg_upap = 0;
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	7813      	ldrb	r3, [r2, #0]
 800bbf0:	f36f 1304 	bfc	r3, #4, #1
 800bbf4:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 800bbf6:	e004      	b.n	800bc02 <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	7813      	ldrb	r3, [r2, #0]
 800bbfc:	f36f 1304 	bfc	r3, #4, #1
 800bc00:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 800bc02:	f001 fec7 	bl	800d994 <magic>
 800bc06:	4602      	mov	r2, r0
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	4614      	mov	r4, r2
 800bc18:	461d      	mov	r5, r3
 800bc1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	7853      	ldrb	r3, [r2, #1]
 800bc2a:	f36f 0341 	bfc	r3, #1, #1
 800bc2e:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	7853      	ldrb	r3, [r2, #1]
 800bc34:	f36f 0382 	bfc	r3, #2, #1
 800bc38:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f003 0310 	and.w	r3, r3, #16
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	7853      	ldrb	r3, [r2, #1]
 800bc4c:	f36f 0382 	bfc	r3, #2, #1
 800bc50:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bc58:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 800bc5c:	bf00      	nop
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bdb0      	pop	{r4, r5, r7, pc}

0800bc64 <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3384      	adds	r3, #132	; 0x84
 800bc76:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <lcp_cilen+0x32>
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	885b      	ldrh	r3, [r3, #2]
 800bc8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d001      	beq.n	800bc96 <lcp_cilen+0x32>
 800bc92:	2204      	movs	r2, #4
 800bc94:	e000      	b.n	800bc98 <lcp_cilen+0x34>
 800bc96:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <lcp_cilen+0x50>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcae:	d001      	beq.n	800bcb4 <lcp_cilen+0x50>
 800bcb0:	2306      	movs	r3, #6
 800bcb2:	e000      	b.n	800bcb6 <lcp_cilen+0x52>
 800bcb4:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 800bcb6:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	f003 0310 	and.w	r3, r3, #16
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <lcp_cilen+0x66>
 800bcc6:	2304      	movs	r3, #4
 800bcc8:	e000      	b.n	800bccc <lcp_cilen+0x68>
 800bcca:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 800bccc:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	785b      	ldrb	r3, [r3, #1]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <lcp_cilen+0x7c>
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e000      	b.n	800bce2 <lcp_cilen+0x7e>
 800bce0:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 800bce2:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <lcp_cilen+0x92>
 800bcf2:	2306      	movs	r3, #6
 800bcf4:	e000      	b.n	800bcf8 <lcp_cilen+0x94>
 800bcf6:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 800bcf8:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <lcp_cilen+0xa8>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	e000      	b.n	800bd0e <lcp_cilen+0xaa>
 800bd0c:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 800bd0e:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <lcp_cilen+0xbe>
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e000      	b.n	800bd24 <lcp_cilen+0xc0>
 800bd22:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 800bd24:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 800bd2e:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	785b      	ldrb	r3, [r3, #1]
 800bd34:	f003 0304 	and.w	r3, r3, #4
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <lcp_cilen+0xe2>
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	7b9b      	ldrb	r3, [r3, #14]
 800bd42:	3303      	adds	r3, #3
 800bd44:	e000      	b.n	800bd48 <lcp_cilen+0xe4>
 800bd46:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 800bd48:	4413      	add	r3, r2
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800bd56:	b480      	push	{r7}
 800bd58:	b089      	sub	sp, #36	; 0x24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	3384      	adds	r3, #132	; 0x84
 800bd6c:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01f      	beq.n	800bdc0 <lcp_addci+0x6a>
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	885b      	ldrh	r3, [r3, #2]
 800bd84:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d019      	beq.n	800bdc0 <lcp_addci+0x6a>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	60ba      	str	r2, [r7, #8]
 800bd92:	2201      	movs	r2, #1
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	60ba      	str	r2, [r7, #8]
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	60ba      	str	r2, [r7, #8]
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	8852      	ldrh	r2, [r2, #2]
 800bdaa:	0a12      	lsrs	r2, r2, #8
 800bdac:	b292      	uxth	r2, r2
 800bdae:	b2d2      	uxtb	r2, r2
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	60ba      	str	r2, [r7, #8]
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	8852      	ldrh	r2, [r2, #2]
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	f003 0308 	and.w	r3, r3, #8
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d02d      	beq.n	800be2a <lcp_addci+0xd4>
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd6:	d028      	beq.n	800be2a <lcp_addci+0xd4>
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	60ba      	str	r2, [r7, #8]
 800bdde:	2202      	movs	r2, #2
 800bde0:	701a      	strb	r2, [r3, #0]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	60ba      	str	r2, [r7, #8]
 800bde8:	2206      	movs	r2, #6
 800bdea:	701a      	strb	r2, [r3, #0]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	60ba      	str	r2, [r7, #8]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	6852      	ldr	r2, [r2, #4]
 800bdf6:	0e12      	lsrs	r2, r2, #24
 800bdf8:	b2d2      	uxtb	r2, r2
 800bdfa:	701a      	strb	r2, [r3, #0]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	60ba      	str	r2, [r7, #8]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	6852      	ldr	r2, [r2, #4]
 800be06:	0c12      	lsrs	r2, r2, #16
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	60ba      	str	r2, [r7, #8]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	6852      	ldr	r2, [r2, #4]
 800be16:	0a12      	lsrs	r2, r2, #8
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	60ba      	str	r2, [r7, #8]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	6852      	ldr	r2, [r2, #4]
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b00      	cmp	r3, #0
 800be36:	d013      	beq.n	800be60 <lcp_addci+0x10a>
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	60ba      	str	r2, [r7, #8]
 800be3e:	2203      	movs	r2, #3
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	60ba      	str	r2, [r7, #8]
 800be48:	2204      	movs	r2, #4
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	60ba      	str	r2, [r7, #8]
 800be52:	22c0      	movs	r2, #192	; 0xc0
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	60ba      	str	r2, [r7, #8]
 800be5c:	2223      	movs	r2, #35	; 0x23
 800be5e:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00e      	beq.n	800be8c <lcp_addci+0x136>
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	60ba      	str	r2, [r7, #8]
 800be74:	220d      	movs	r2, #13
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	60ba      	str	r2, [r7, #8]
 800be7e:	2203      	movs	r2, #3
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	60ba      	str	r2, [r7, #8]
 800be88:	2206      	movs	r2, #6
 800be8a:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d028      	beq.n	800beec <lcp_addci+0x196>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	60ba      	str	r2, [r7, #8]
 800bea0:	2205      	movs	r2, #5
 800bea2:	701a      	strb	r2, [r3, #0]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	60ba      	str	r2, [r7, #8]
 800beaa:	2206      	movs	r2, #6
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	60ba      	str	r2, [r7, #8]
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	6892      	ldr	r2, [r2, #8]
 800beb8:	0e12      	lsrs	r2, r2, #24
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	60ba      	str	r2, [r7, #8]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	6892      	ldr	r2, [r2, #8]
 800bec8:	0c12      	lsrs	r2, r2, #16
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	701a      	strb	r2, [r3, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	60ba      	str	r2, [r7, #8]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	6892      	ldr	r2, [r2, #8]
 800bed8:	0a12      	lsrs	r2, r2, #8
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	60ba      	str	r2, [r7, #8]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	6892      	ldr	r2, [r2, #8]
 800bee8:	b2d2      	uxtb	r2, r2
 800beea:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d009      	beq.n	800bf0e <lcp_addci+0x1b8>
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	60ba      	str	r2, [r7, #8]
 800bf00:	2207      	movs	r2, #7
 800bf02:	701a      	strb	r2, [r3, #0]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	60ba      	str	r2, [r7, #8]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d009      	beq.n	800bf30 <lcp_addci+0x1da>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	60ba      	str	r2, [r7, #8]
 800bf22:	2208      	movs	r2, #8
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	60ba      	str	r2, [r7, #8]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d009      	beq.n	800bf52 <lcp_addci+0x1fc>
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	60ba      	str	r2, [r7, #8]
 800bf44:	2212      	movs	r2, #18
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	60ba      	str	r2, [r7, #8]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d027      	beq.n	800bfb0 <lcp_addci+0x25a>
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	60ba      	str	r2, [r7, #8]
 800bf66:	2213      	movs	r2, #19
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	1c5a      	adds	r2, r3, #1
 800bf6e:	60ba      	str	r2, [r7, #8]
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	7b92      	ldrb	r2, [r2, #14]
 800bf74:	3203      	adds	r2, #3
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	60ba      	str	r2, [r7, #8]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	7b52      	ldrb	r2, [r2, #13]
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	2300      	movs	r3, #0
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	e00b      	b.n	800bfa4 <lcp_addci+0x24e>
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	60ba      	str	r2, [r7, #8]
 800bf92:	6979      	ldr	r1, [r7, #20]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	440a      	add	r2, r1
 800bf98:	320f      	adds	r2, #15
 800bf9a:	7812      	ldrb	r2, [r2, #0]
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	7b9b      	ldrb	r3, [r3, #14]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dced      	bgt.n	800bf8c <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 800bfb0:	bf00      	nop
 800bfb2:	3724      	adds	r7, #36	; 0x24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 800bfbc:	b480      	push	{r7}
 800bfbe:	b08b      	sub	sp, #44	; 0x2c
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	3384      	adds	r3, #132	; 0x84
 800bfd2:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d033      	beq.n	800c04a <lcp_ackci+0x8e>
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d02d      	beq.n	800c04a <lcp_ackci+0x8e>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3b04      	subs	r3, #4
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f2c0 81c6 	blt.w	800c388 <lcp_ackci+0x3cc>
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	60ba      	str	r2, [r7, #8]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	76fb      	strb	r3, [r7, #27]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	60ba      	str	r2, [r7, #8]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	76bb      	strb	r3, [r7, #26]
 800c010:	7ebb      	ldrb	r3, [r7, #26]
 800c012:	2b04      	cmp	r3, #4
 800c014:	f040 81d9 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c018:	7efb      	ldrb	r3, [r7, #27]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	f040 81d5 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	60ba      	str	r2, [r7, #8]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	021b      	lsls	r3, r3, #8
 800c02c:	833b      	strh	r3, [r7, #24]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	60ba      	str	r2, [r7, #8]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b29a      	uxth	r2, r3
 800c038:	8b3b      	ldrh	r3, [r7, #24]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	833b      	strh	r3, [r7, #24]
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	885b      	ldrh	r3, [r3, #2]
 800c042:	8b3a      	ldrh	r2, [r7, #24]
 800c044:	429a      	cmp	r2, r3
 800c046:	f040 81a1 	bne.w	800c38c <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	f003 0308 	and.w	r3, r3, #8
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d047      	beq.n	800c0e8 <lcp_ackci+0x12c>
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c060:	d042      	beq.n	800c0e8 <lcp_ackci+0x12c>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3b06      	subs	r3, #6
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f2c0 8190 	blt.w	800c390 <lcp_ackci+0x3d4>
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	60ba      	str	r2, [r7, #8]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	76fb      	strb	r3, [r7, #27]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	60ba      	str	r2, [r7, #8]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	76bb      	strb	r3, [r7, #26]
 800c084:	7ebb      	ldrb	r3, [r7, #26]
 800c086:	2b06      	cmp	r3, #6
 800c088:	f040 819f 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c08c:	7efb      	ldrb	r3, [r7, #27]
 800c08e:	2b02      	cmp	r3, #2
 800c090:	f040 819b 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	60ba      	str	r2, [r7, #8]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	021b      	lsls	r3, r3, #8
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	60ba      	str	r2, [r7, #8]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	617b      	str	r3, [r7, #20]
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	1c5a      	adds	r2, r3, #1
 800c0ba:	60ba      	str	r2, [r7, #8]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	60ba      	str	r2, [r7, #8]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f040 8156 	bne.w	800c394 <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d02d      	beq.n	800c152 <lcp_ackci+0x196>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	607b      	str	r3, [r7, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	f2c0 814a 	blt.w	800c398 <lcp_ackci+0x3dc>
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	60ba      	str	r2, [r7, #8]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	76fb      	strb	r3, [r7, #27]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	1c5a      	adds	r2, r3, #1
 800c112:	60ba      	str	r2, [r7, #8]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	76bb      	strb	r3, [r7, #26]
 800c118:	7ebb      	ldrb	r3, [r7, #26]
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	f040 8155 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c120:	7efb      	ldrb	r3, [r7, #27]
 800c122:	2b03      	cmp	r3, #3
 800c124:	f040 8151 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	60ba      	str	r2, [r7, #8]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	b29b      	uxth	r3, r3
 800c132:	021b      	lsls	r3, r3, #8
 800c134:	833b      	strh	r3, [r7, #24]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	60ba      	str	r2, [r7, #8]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b29a      	uxth	r2, r3
 800c140:	8b3b      	ldrh	r3, [r7, #24]
 800c142:	4313      	orrs	r3, r2
 800c144:	833b      	strh	r3, [r7, #24]
 800c146:	8b3b      	ldrh	r3, [r7, #24]
 800c148:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c14c:	4293      	cmp	r3, r2
 800c14e:	f040 8125 	bne.w	800c39c <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d021      	beq.n	800c1a4 <lcp_ackci+0x1e8>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3b03      	subs	r3, #3
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f2c0 8119 	blt.w	800c3a0 <lcp_ackci+0x3e4>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	60ba      	str	r2, [r7, #8]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	76fb      	strb	r3, [r7, #27]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	60ba      	str	r2, [r7, #8]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	76bb      	strb	r3, [r7, #26]
 800c182:	7ebb      	ldrb	r3, [r7, #26]
 800c184:	2b03      	cmp	r3, #3
 800c186:	f040 8120 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c18a:	7efb      	ldrb	r3, [r7, #27]
 800c18c:	2b0d      	cmp	r3, #13
 800c18e:	f040 811c 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	60ba      	str	r2, [r7, #8]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	74fb      	strb	r3, [r7, #19]
 800c19c:	7cfb      	ldrb	r3, [r7, #19]
 800c19e:	2b06      	cmp	r3, #6
 800c1a0:	f040 8100 	bne.w	800c3a4 <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	f003 0320 	and.w	r3, r3, #32
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d042      	beq.n	800c238 <lcp_ackci+0x27c>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3b06      	subs	r3, #6
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f2c0 80f4 	blt.w	800c3a8 <lcp_ackci+0x3ec>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	60ba      	str	r2, [r7, #8]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	76fb      	strb	r3, [r7, #27]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	60ba      	str	r2, [r7, #8]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	76bb      	strb	r3, [r7, #26]
 800c1d4:	7ebb      	ldrb	r3, [r7, #26]
 800c1d6:	2b06      	cmp	r3, #6
 800c1d8:	f040 80f7 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c1dc:	7efb      	ldrb	r3, [r7, #27]
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	f040 80f3 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	60ba      	str	r2, [r7, #8]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	021b      	lsls	r3, r3, #8
 800c1ee:	617b      	str	r3, [r7, #20]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	60ba      	str	r2, [r7, #8]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	021b      	lsls	r3, r3, #8
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	60ba      	str	r2, [r7, #8]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	4313      	orrs	r3, r2
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	60ba      	str	r2, [r7, #8]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	461a      	mov	r2, r3
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	4313      	orrs	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	689a      	ldr	r2, [r3, #8]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	429a      	cmp	r2, r3
 800c234:	f040 80ba 	bne.w	800c3ac <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	d018      	beq.n	800c278 <lcp_ackci+0x2bc>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3b02      	subs	r3, #2
 800c24a:	607b      	str	r3, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f2c0 80ae 	blt.w	800c3b0 <lcp_ackci+0x3f4>
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	60ba      	str	r2, [r7, #8]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	76fb      	strb	r3, [r7, #27]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	60ba      	str	r2, [r7, #8]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	76bb      	strb	r3, [r7, #26]
 800c268:	7ebb      	ldrb	r3, [r7, #26]
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	f040 80ad 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c270:	7efb      	ldrb	r3, [r7, #27]
 800c272:	2b07      	cmp	r3, #7
 800c274:	f040 80a9 	bne.w	800c3ca <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d018      	beq.n	800c2b8 <lcp_ackci+0x2fc>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3b02      	subs	r3, #2
 800c28a:	607b      	str	r3, [r7, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f2c0 8090 	blt.w	800c3b4 <lcp_ackci+0x3f8>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	60ba      	str	r2, [r7, #8]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	76fb      	strb	r3, [r7, #27]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	60ba      	str	r2, [r7, #8]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	76bb      	strb	r3, [r7, #26]
 800c2a8:	7ebb      	ldrb	r3, [r7, #26]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	f040 808d 	bne.w	800c3ca <lcp_ackci+0x40e>
 800c2b0:	7efb      	ldrb	r3, [r7, #27]
 800c2b2:	2b08      	cmp	r3, #8
 800c2b4:	f040 8089 	bne.w	800c3ca <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	785b      	ldrb	r3, [r3, #1]
 800c2bc:	f003 0302 	and.w	r3, r3, #2
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d015      	beq.n	800c2f2 <lcp_ackci+0x336>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3b02      	subs	r3, #2
 800c2ca:	607b      	str	r3, [r7, #4]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	db72      	blt.n	800c3b8 <lcp_ackci+0x3fc>
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	60ba      	str	r2, [r7, #8]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	76fb      	strb	r3, [r7, #27]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	60ba      	str	r2, [r7, #8]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	76bb      	strb	r3, [r7, #26]
 800c2e6:	7ebb      	ldrb	r3, [r7, #26]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d16e      	bne.n	800c3ca <lcp_ackci+0x40e>
 800c2ec:	7efb      	ldrb	r3, [r7, #27]
 800c2ee:	2b12      	cmp	r3, #18
 800c2f0:	d16b      	bne.n	800c3ca <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	785b      	ldrb	r3, [r3, #1]
 800c2f6:	f003 0304 	and.w	r3, r3, #4
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d03e      	beq.n	800c37e <lcp_ackci+0x3c2>
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	7b9b      	ldrb	r3, [r3, #14]
 800c304:	3303      	adds	r3, #3
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	db54      	blt.n	800c3bc <lcp_ackci+0x400>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	60ba      	str	r2, [r7, #8]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	76fb      	strb	r3, [r7, #27]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	60ba      	str	r2, [r7, #8]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	76bb      	strb	r3, [r7, #26]
 800c326:	7eba      	ldrb	r2, [r7, #26]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	7b9b      	ldrb	r3, [r3, #14]
 800c32c:	3303      	adds	r3, #3
 800c32e:	429a      	cmp	r2, r3
 800c330:	d14b      	bne.n	800c3ca <lcp_ackci+0x40e>
 800c332:	7efb      	ldrb	r3, [r7, #27]
 800c334:	2b13      	cmp	r3, #19
 800c336:	d148      	bne.n	800c3ca <lcp_ackci+0x40e>
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	60ba      	str	r2, [r7, #8]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	74fb      	strb	r3, [r7, #19]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	7b5b      	ldrb	r3, [r3, #13]
 800c346:	7cfa      	ldrb	r2, [r7, #19]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d139      	bne.n	800c3c0 <lcp_ackci+0x404>
 800c34c:	2300      	movs	r3, #0
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
 800c350:	e00f      	b.n	800c372 <lcp_ackci+0x3b6>
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	60ba      	str	r2, [r7, #8]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	74fb      	strb	r3, [r7, #19]
 800c35c:	69fa      	ldr	r2, [r7, #28]
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	4413      	add	r3, r2
 800c362:	330f      	adds	r3, #15
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	7cfa      	ldrb	r2, [r7, #19]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d12b      	bne.n	800c3c4 <lcp_ackci+0x408>
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	3301      	adds	r3, #1
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	7b9b      	ldrb	r3, [r3, #14]
 800c376:	461a      	mov	r2, r3
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	429a      	cmp	r2, r3
 800c37c:	dce9      	bgt.n	800c352 <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d121      	bne.n	800c3c8 <lcp_ackci+0x40c>
	goto bad;
    return (1);
 800c384:	2301      	movs	r3, #1
 800c386:	e021      	b.n	800c3cc <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 800c388:	bf00      	nop
 800c38a:	e01e      	b.n	800c3ca <lcp_ackci+0x40e>
 800c38c:	bf00      	nop
 800c38e:	e01c      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 800c390:	bf00      	nop
 800c392:	e01a      	b.n	800c3ca <lcp_ackci+0x40e>
 800c394:	bf00      	nop
 800c396:	e018      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 800c398:	bf00      	nop
 800c39a:	e016      	b.n	800c3ca <lcp_ackci+0x40e>
 800c39c:	bf00      	nop
 800c39e:	e014      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 800c3a0:	bf00      	nop
 800c3a2:	e012      	b.n	800c3ca <lcp_ackci+0x40e>
 800c3a4:	bf00      	nop
 800c3a6:	e010      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 800c3a8:	bf00      	nop
 800c3aa:	e00e      	b.n	800c3ca <lcp_ackci+0x40e>
 800c3ac:	bf00      	nop
 800c3ae:	e00c      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 800c3b0:	bf00      	nop
 800c3b2:	e00a      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 800c3b4:	bf00      	nop
 800c3b6:	e008      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 800c3b8:	bf00      	nop
 800c3ba:	e006      	b.n	800c3ca <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 800c3bc:	bf00      	nop
 800c3be:	e004      	b.n	800c3ca <lcp_ackci+0x40e>
 800c3c0:	bf00      	nop
 800c3c2:	e002      	b.n	800c3ca <lcp_ackci+0x40e>
 800c3c4:	bf00      	nop
 800c3c6:	e000      	b.n	800c3ca <lcp_ackci+0x40e>
	goto bad;
 800c3c8:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	372c      	adds	r7, #44	; 0x2c
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800c3d8:	b5b0      	push	{r4, r5, r7, lr}
 800c3da:	b0a0      	sub	sp, #128	; 0x80
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 800c3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ee:	3384      	adds	r3, #132	; 0x84
 800c3f0:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 800c3f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3f4:	3360      	adds	r3, #96	; 0x60
 800c3f6:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 800c3fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c400:	2224      	movs	r2, #36	; 0x24
 800c402:	2100      	movs	r1, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f002 fde2 	bl	800efce <memset>
    try_ = *go;
 800c40a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c40c:	f107 0414 	add.w	r4, r7, #20
 800c410:	461d      	mov	r5, r3
 800c412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c41a:	682b      	ldr	r3, [r5, #0]
 800c41c:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 800c41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d045      	beq.n	800c4b8 <lcp_nakci+0xe0>
 800c42c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c42e:	885b      	ldrh	r3, [r3, #2]
 800c430:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c434:	4293      	cmp	r3, r2
 800c436:	d03f      	beq.n	800c4b8 <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 800c438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d038      	beq.n	800c4b8 <lcp_nakci+0xe0>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b03      	cmp	r3, #3
 800c44a:	dd35      	ble.n	800c4b8 <lcp_nakci+0xe0>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3301      	adds	r3, #1
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b04      	cmp	r3, #4
 800c454:	d130      	bne.n	800c4b8 <lcp_nakci+0xe0>
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d12c      	bne.n	800c4b8 <lcp_nakci+0xe0>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3b04      	subs	r3, #4
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	3302      	adds	r3, #2
 800c468:	60bb      	str	r3, [r7, #8]
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	60ba      	str	r2, [r7, #8]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b29b      	uxth	r3, r3
 800c474:	021b      	lsls	r3, r3, #8
 800c476:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	60ba      	str	r2, [r7, #8]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b29a      	uxth	r2, r3
 800c484:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c488:	4313      	orrs	r3, r2
 800c48a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c48e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c492:	f043 0304 	orr.w	r3, r3, #4
 800c496:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800c49a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c49c:	885b      	ldrh	r3, [r3, #2]
 800c49e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d905      	bls.n	800c4b2 <lcp_nakci+0xda>
 800c4a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c4aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d802      	bhi.n	800c4b8 <lcp_nakci+0xe0>
 800c4b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c4b6:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 800c4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d04c      	beq.n	800c560 <lcp_nakci+0x188>
 800c4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d047      	beq.n	800c560 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 800c4d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	f003 0308 	and.w	r3, r3, #8
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d040      	beq.n	800c560 <lcp_nakci+0x188>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	dd3d      	ble.n	800c560 <lcp_nakci+0x188>
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b06      	cmp	r3, #6
 800c4ec:	d138      	bne.n	800c560 <lcp_nakci+0x188>
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d134      	bne.n	800c560 <lcp_nakci+0x188>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3b06      	subs	r3, #6
 800c4fa:	607b      	str	r3, [r7, #4]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	3302      	adds	r3, #2
 800c500:	60bb      	str	r3, [r7, #8]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	60ba      	str	r2, [r7, #8]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	021b      	lsls	r3, r3, #8
 800c50c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	60ba      	str	r2, [r7, #8]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c51a:	4313      	orrs	r3, r2
 800c51c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c520:	021b      	lsls	r3, r3, #8
 800c522:	66bb      	str	r3, [r7, #104]	; 0x68
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	60ba      	str	r2, [r7, #8]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c530:	4313      	orrs	r3, r2
 800c532:	66bb      	str	r3, [r7, #104]	; 0x68
 800c534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c536:	021b      	lsls	r3, r3, #8
 800c538:	66bb      	str	r3, [r7, #104]	; 0x68
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	60ba      	str	r2, [r7, #8]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c546:	4313      	orrs	r3, r2
 800c548:	66bb      	str	r3, [r7, #104]	; 0x68
 800c54a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c54e:	f043 0308 	orr.w	r3, r3, #8
 800c552:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800c556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c55c:	4313      	orrs	r3, r2
 800c55e:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 800c560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	f003 0310 	and.w	r3, r3, #16
 800c568:	b2db      	uxtb	r3, r3
    if ((0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d04d      	beq.n	800c60a <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b03      	cmp	r3, #3
 800c572:	dd4a      	ble.n	800c60a <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d146      	bne.n	800c60a <lcp_nakci+0x232>
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	3301      	adds	r3, #1
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b03      	cmp	r3, #3
 800c584:	d941      	bls.n	800c60a <lcp_nakci+0x232>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	3301      	adds	r3, #1
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	dc3a      	bgt.n	800c60a <lcp_nakci+0x232>
	cilen = p[1];
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	3301      	adds	r3, #1
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 800c5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c5b2:	f362 1304 	bfi	r3, r2, #4, #1
 800c5b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	3302      	adds	r3, #2
 800c5be:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	60ba      	str	r2, [r7, #8]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	021b      	lsls	r3, r3, #8
 800c5cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	60ba      	str	r2, [r7, #8]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 800c5e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c5e8:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d103      	bne.n	800c5f8 <lcp_nakci+0x220>
 800c5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5f2:	2b04      	cmp	r3, #4
 800c5f4:	f000 8265 	beq.w	800cac2 <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 800c5f8:	7d3b      	ldrb	r3, [r7, #20]
 800c5fa:	f36f 1304 	bfc	r3, #4, #1
 800c5fe:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 800c600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c602:	3b04      	subs	r3, #4
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	4413      	add	r3, r2
 800c608:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 800c60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	f003 0301 	and.w	r3, r3, #1
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d021      	beq.n	800c65c <lcp_nakci+0x284>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	dd1e      	ble.n	800c65c <lcp_nakci+0x284>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	3301      	adds	r3, #1
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d119      	bne.n	800c65c <lcp_nakci+0x284>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b0d      	cmp	r3, #13
 800c62e:	d115      	bne.n	800c65c <lcp_nakci+0x284>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3b03      	subs	r3, #3
 800c634:	607b      	str	r3, [r7, #4]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	3302      	adds	r3, #2
 800c63a:	60bb      	str	r3, [r7, #8]
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	60ba      	str	r2, [r7, #8]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800c648:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c64c:	f043 0301 	orr.w	r3, r3, #1
 800c650:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c654:	7d7b      	ldrb	r3, [r7, #21]
 800c656:	f36f 0300 	bfc	r3, #0, #1
 800c65a:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 800c65c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 0320 	and.w	r3, r3, #32
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d041      	beq.n	800c6ee <lcp_nakci+0x316>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b05      	cmp	r3, #5
 800c66e:	dd3e      	ble.n	800c6ee <lcp_nakci+0x316>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	3301      	adds	r3, #1
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b06      	cmp	r3, #6
 800c678:	d139      	bne.n	800c6ee <lcp_nakci+0x316>
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b05      	cmp	r3, #5
 800c680:	d135      	bne.n	800c6ee <lcp_nakci+0x316>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3b06      	subs	r3, #6
 800c686:	607b      	str	r3, [r7, #4]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	3302      	adds	r3, #2
 800c68c:	60bb      	str	r3, [r7, #8]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	60ba      	str	r2, [r7, #8]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	021b      	lsls	r3, r3, #8
 800c698:	66bb      	str	r3, [r7, #104]	; 0x68
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	60ba      	str	r2, [r7, #8]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	60ba      	str	r2, [r7, #8]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	60ba      	str	r2, [r7, #8]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c6da:	f043 0320 	orr.w	r3, r3, #32
 800c6de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800c6e2:	f001 f957 	bl	800d994 <magic>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800c6ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01b      	beq.n	800c734 <lcp_nakci+0x35c>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	dd18      	ble.n	800c734 <lcp_nakci+0x35c>
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	3301      	adds	r3, #1
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d113      	bne.n	800c734 <lcp_nakci+0x35c>
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b07      	cmp	r3, #7
 800c712:	d10f      	bne.n	800c734 <lcp_nakci+0x35c>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3b02      	subs	r3, #2
 800c718:	607b      	str	r3, [r7, #4]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	3302      	adds	r3, #2
 800c71e:	60bb      	str	r3, [r7, #8]
 800c720:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c728:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800c72c:	7d3b      	ldrb	r3, [r7, #20]
 800c72e:	f36f 1386 	bfc	r3, #6, #1
 800c732:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800c734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d01b      	beq.n	800c77a <lcp_nakci+0x3a2>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b01      	cmp	r3, #1
 800c746:	dd18      	ble.n	800c77a <lcp_nakci+0x3a2>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	3301      	adds	r3, #1
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d113      	bne.n	800c77a <lcp_nakci+0x3a2>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b08      	cmp	r3, #8
 800c758:	d10f      	bne.n	800c77a <lcp_nakci+0x3a2>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3b02      	subs	r3, #2
 800c75e:	607b      	str	r3, [r7, #4]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	3302      	adds	r3, #2
 800c764:	60bb      	str	r3, [r7, #8]
 800c766:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c76e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800c772:	7d3b      	ldrb	r3, [r7, #20]
 800c774:	f36f 13c7 	bfc	r3, #7, #1
 800c778:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 800c77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c77c:	785b      	ldrb	r3, [r3, #1]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01b      	beq.n	800c7c0 <lcp_nakci+0x3e8>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	dd18      	ble.n	800c7c0 <lcp_nakci+0x3e8>
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	3301      	adds	r3, #1
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d113      	bne.n	800c7c0 <lcp_nakci+0x3e8>
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b12      	cmp	r3, #18
 800c79e:	d10f      	bne.n	800c7c0 <lcp_nakci+0x3e8>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3b02      	subs	r3, #2
 800c7a4:	607b      	str	r3, [r7, #4]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	3302      	adds	r3, #2
 800c7aa:	60bb      	str	r3, [r7, #8]
 800c7ac:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c7b0:	f043 0302 	orr.w	r3, r3, #2
 800c7b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c7b8:	7d7b      	ldrb	r3, [r7, #21]
 800c7ba:	f36f 0341 	bfc	r3, #1, #1
 800c7be:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 800c7c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	f003 0304 	and.w	r3, r3, #4
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 8148 	beq.w	800ca60 <lcp_nakci+0x688>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	f340 8144 	ble.w	800ca60 <lcp_nakci+0x688>
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b13      	cmp	r3, #19
 800c7de:	f040 813f 	bne.w	800ca60 <lcp_nakci+0x688>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	f240 8139 	bls.w	800ca60 <lcp_nakci+0x688>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	f300 8131 	bgt.w	800ca60 <lcp_nakci+0x688>
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	3301      	adds	r3, #1
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	607b      	str	r3, [r7, #4]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3301      	adds	r3, #1
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	4413      	add	r3, r2
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c81e:	f043 0304 	orr.w	r3, r3, #4
 800c822:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c826:	7d7b      	ldrb	r3, [r7, #21]
 800c828:	f36f 0382 	bfc	r3, #2, #1
 800c82c:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 800c82e:	e117      	b.n	800ca60 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	60ba      	str	r2, [r7, #8]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	60ba      	str	r2, [r7, #8]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 800c846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c848:	2b01      	cmp	r3, #1
 800c84a:	f340 813a 	ble.w	800cac2 <lcp_nakci+0x6ea>
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	607b      	str	r3, [r7, #4]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f2c0 8132 	blt.w	800cac2 <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 800c85e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c860:	3b02      	subs	r3, #2
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	4413      	add	r3, r2
 800c866:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 800c868:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800c86c:	3b01      	subs	r3, #1
 800c86e:	2b12      	cmp	r3, #18
 800c870:	f200 80f1 	bhi.w	800ca56 <lcp_nakci+0x67e>
 800c874:	a201      	add	r2, pc, #4	; (adr r2, 800c87c <lcp_nakci+0x4a4>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c8c9 	.word	0x0800c8c9
 800c880:	0800c93f 	.word	0x0800c93f
 800c884:	0800c973 	.word	0x0800c973
 800c888:	0800ca57 	.word	0x0800ca57
 800c88c:	0800c995 	.word	0x0800c995
 800c890:	0800ca57 	.word	0x0800ca57
 800c894:	0800c9bf 	.word	0x0800c9bf
 800c898:	0800c9e3 	.word	0x0800c9e3
 800c89c:	0800ca57 	.word	0x0800ca57
 800c8a0:	0800ca57 	.word	0x0800ca57
 800c8a4:	0800ca57 	.word	0x0800ca57
 800c8a8:	0800ca57 	.word	0x0800ca57
 800c8ac:	0800ca57 	.word	0x0800ca57
 800c8b0:	0800ca57 	.word	0x0800ca57
 800c8b4:	0800ca57 	.word	0x0800ca57
 800c8b8:	0800ca57 	.word	0x0800ca57
 800c8bc:	0800ca57 	.word	0x0800ca57
 800c8c0:	0800ca07 	.word	0x0800ca07
 800c8c4:	0800ca33 	.word	0x0800ca33
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 800c8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	f003 0304 	and.w	r3, r3, #4
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <lcp_nakci+0x50c>
 800c8d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8d8:	885b      	ldrh	r3, [r3, #2]
 800c8da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	f040 80ef 	bne.w	800cac2 <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 800c8e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c8e8:	f003 0304 	and.w	r3, r3, #4
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f040 80e7 	bne.w	800cac2 <lcp_nakci+0x6ea>
 800c8f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	f040 80e3 	bne.w	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	60ba      	str	r2, [r7, #8]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	b29b      	uxth	r3, r3
 800c906:	021b      	lsls	r3, r3, #8
 800c908:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	60ba      	str	r2, [r7, #8]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	b29a      	uxth	r2, r3
 800c916:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c91a:	4313      	orrs	r3, r2
 800c91c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 800c920:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c924:	f240 52db 	movw	r2, #1499	; 0x5db
 800c928:	4293      	cmp	r3, r2
 800c92a:	f200 8096 	bhi.w	800ca5a <lcp_nakci+0x682>
		try_.neg_mru = 1;
 800c92e:	7d3b      	ldrb	r3, [r7, #20]
 800c930:	f043 0304 	orr.w	r3, r3, #4
 800c934:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 800c936:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c93a:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 800c93c:	e08d      	b.n	800ca5a <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 800c93e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	f003 0308 	and.w	r3, r3, #8
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d005      	beq.n	800c958 <lcp_nakci+0x580>
 800c94c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c954:	f040 80b5 	bne.w	800cac2 <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 800c958:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c95c:	f003 0308 	and.w	r3, r3, #8
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	f040 80ad 	bne.w	800cac2 <lcp_nakci+0x6ea>
 800c968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c96a:	2b06      	cmp	r3, #6
 800c96c:	f040 80a9 	bne.w	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800c970:	e074      	b.n	800ca5c <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 800c972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	f003 0310 	and.w	r3, r3, #16
 800c97a:	b2db      	uxtb	r3, r3
	    if ((0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f040 80a0 	bne.w	800cac2 <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 800c982:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c986:	f003 0310 	and.w	r3, r3, #16
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f040 8098 	bne.w	800cac2 <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 800c992:	e063      	b.n	800ca5c <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 800c994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f040 808f 	bne.w	800cac2 <lcp_nakci+0x6ea>
 800c9a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f040 8087 	bne.w	800cac2 <lcp_nakci+0x6ea>
 800c9b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9b6:	2b06      	cmp	r3, #6
 800c9b8:	f040 8083 	bne.w	800cac2 <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 800c9bc:	e04e      	b.n	800ca5c <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 800c9be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d17a      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800c9cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d173      	bne.n	800cac2 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800c9da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d170      	bne.n	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800c9e0:	e03c      	b.n	800ca5c <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 800c9e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d168      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800c9f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c9f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d161      	bne.n	800cac2 <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 800c9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d15e      	bne.n	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800ca04:	e02a      	b.n	800ca5c <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 800ca06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca08:	785b      	ldrb	r3, [r3, #1]
 800ca0a:	f003 0302 	and.w	r3, r3, #2
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d156      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800ca14:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ca18:	f003 0302 	and.w	r3, r3, #2
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d14f      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800ca22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d14c      	bne.n	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 800ca28:	7d7b      	ldrb	r3, [r7, #21]
 800ca2a:	f043 0302 	orr.w	r3, r3, #2
 800ca2e:	757b      	strb	r3, [r7, #21]
	    break;
 800ca30:	e014      	b.n	800ca5c <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 800ca32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca34:	785b      	ldrb	r3, [r3, #1]
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d140      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800ca40:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ca44:	f003 0304 	and.w	r3, r3, #4
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d139      	bne.n	800cac2 <lcp_nakci+0x6ea>
 800ca4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	dd36      	ble.n	800cac2 <lcp_nakci+0x6ea>
		goto bad;
	    break;
 800ca54:	e002      	b.n	800ca5c <lcp_nakci+0x684>
	default:
	    break;
 800ca56:	bf00      	nop
 800ca58:	e000      	b.n	800ca5c <lcp_nakci+0x684>
	    break;
 800ca5a:	bf00      	nop
	}
	p = next;
 800ca5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca5e:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	f73f aee4 	bgt.w	800c830 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	7c1b      	ldrb	r3, [r3, #16]
 800ca6c:	2b09      	cmp	r3, #9
 800ca6e:	d026      	beq.n	800cabe <lcp_nakci+0x6e6>
	if (looped_back) {
 800ca70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d016      	beq.n	800caa4 <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 800ca76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	f887 3020 	strb.w	r3, [r7, #32]
 800ca82:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ca86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca88:	7c9b      	ldrb	r3, [r3, #18]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d30d      	bcc.n	800caaa <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 800ca8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca90:	220c      	movs	r2, #12
 800ca92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	490c      	ldr	r1, [pc, #48]	; (800cacc <lcp_nakci+0x6f4>)
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe feb7 	bl	800b810 <lcp_close>
 800caa2:	e002      	b.n	800caaa <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 800caaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800caac:	461d      	mov	r5, r3
 800caae:	f107 0414 	add.w	r4, r7, #20
 800cab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	602b      	str	r3, [r5, #0]
    }

    return 1;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3780      	adds	r7, #128	; 0x80
 800cac8:	46bd      	mov	sp, r7
 800caca:	bdb0      	pop	{r4, r5, r7, pc}
 800cacc:	08011e14 	.word	0x08011e14

0800cad0 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 800cad0:	b4b0      	push	{r4, r5, r7}
 800cad2:	b095      	sub	sp, #84	; 0x54
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 800cae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cae4:	3384      	adds	r3, #132	; 0x84
 800cae6:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 800cae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caea:	f107 0414 	add.w	r4, r7, #20
 800caee:	461d      	mov	r5, r3
 800caf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800cafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 0304 	and.w	r3, r3, #4
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d02e      	beq.n	800cb68 <lcp_rejci+0x98>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	dd2b      	ble.n	800cb68 <lcp_rejci+0x98>
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3301      	adds	r3, #1
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	d126      	bne.n	800cb68 <lcp_rejci+0x98>
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d122      	bne.n	800cb68 <lcp_rejci+0x98>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3b04      	subs	r3, #4
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	60bb      	str	r3, [r7, #8]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	60ba      	str	r2, [r7, #8]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	021b      	lsls	r3, r3, #8
 800cb3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	60ba      	str	r2, [r7, #8]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cb52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb54:	885b      	ldrh	r3, [r3, #2]
 800cb56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	f040 81a8 	bne.w	800ceb0 <lcp_rejci+0x3e0>
 800cb60:	7d3b      	ldrb	r3, [r7, #20]
 800cb62:	f36f 0382 	bfc	r3, #2, #1
 800cb66:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800cb68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	f003 0308 	and.w	r3, r3, #8
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d03f      	beq.n	800cbf6 <lcp_rejci+0x126>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b05      	cmp	r3, #5
 800cb7a:	dd3c      	ble.n	800cbf6 <lcp_rejci+0x126>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b06      	cmp	r3, #6
 800cb84:	d137      	bne.n	800cbf6 <lcp_rejci+0x126>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d133      	bne.n	800cbf6 <lcp_rejci+0x126>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3b06      	subs	r3, #6
 800cb92:	607b      	str	r3, [r7, #4]
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3302      	adds	r3, #2
 800cb98:	60bb      	str	r3, [r7, #8]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	60ba      	str	r2, [r7, #8]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	1c5a      	adds	r2, r3, #1
 800cbaa:	60ba      	str	r2, [r7, #8]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb8:	021b      	lsls	r3, r3, #8
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	60ba      	str	r2, [r7, #8]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbce:	021b      	lsls	r3, r3, #8
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	60ba      	str	r2, [r7, #8]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	f040 8163 	bne.w	800ceb4 <lcp_rejci+0x3e4>
 800cbee:	7d3b      	ldrb	r3, [r7, #20]
 800cbf0:	f36f 03c3 	bfc	r3, #3, #1
 800cbf4:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800cbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	f003 0310 	and.w	r3, r3, #16
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d02e      	beq.n	800cc62 <lcp_rejci+0x192>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	dd2b      	ble.n	800cc62 <lcp_rejci+0x192>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	d126      	bne.n	800cc62 <lcp_rejci+0x192>
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d122      	bne.n	800cc62 <lcp_rejci+0x192>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3b04      	subs	r3, #4
 800cc20:	607b      	str	r3, [r7, #4]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	3302      	adds	r3, #2
 800cc26:	60bb      	str	r3, [r7, #8]
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	60ba      	str	r2, [r7, #8]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	60ba      	str	r2, [r7, #8]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc46:	4313      	orrs	r3, r2
 800cc48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cc4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc50:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cc54:	4293      	cmp	r3, r2
 800cc56:	f040 812f 	bne.w	800ceb8 <lcp_rejci+0x3e8>
 800cc5a:	7d3b      	ldrb	r3, [r7, #20]
 800cc5c:	f36f 1304 	bfc	r3, #4, #1
 800cc60:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800cc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc64:	785b      	ldrb	r3, [r3, #1]
 800cc66:	f003 0301 	and.w	r3, r3, #1
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d020      	beq.n	800ccb2 <lcp_rejci+0x1e2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	dd1d      	ble.n	800ccb2 <lcp_rejci+0x1e2>
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	d118      	bne.n	800ccb2 <lcp_rejci+0x1e2>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b0d      	cmp	r3, #13
 800cc86:	d114      	bne.n	800ccb2 <lcp_rejci+0x1e2>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3b03      	subs	r3, #3
 800cc8c:	607b      	str	r3, [r7, #4]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	3302      	adds	r3, #2
 800cc92:	60bb      	str	r3, [r7, #8]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	60ba      	str	r2, [r7, #8]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800cca0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cca4:	2b06      	cmp	r3, #6
 800cca6:	f040 8109 	bne.w	800cebc <lcp_rejci+0x3ec>
 800ccaa:	7d7b      	ldrb	r3, [r7, #21]
 800ccac:	f36f 0300 	bfc	r3, #0, #1
 800ccb0:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800ccb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	f003 0320 	and.w	r3, r3, #32
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d03f      	beq.n	800cd40 <lcp_rejci+0x270>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b05      	cmp	r3, #5
 800ccc4:	dd3c      	ble.n	800cd40 <lcp_rejci+0x270>
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b06      	cmp	r3, #6
 800ccce:	d137      	bne.n	800cd40 <lcp_rejci+0x270>
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b05      	cmp	r3, #5
 800ccd6:	d133      	bne.n	800cd40 <lcp_rejci+0x270>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3b06      	subs	r3, #6
 800ccdc:	607b      	str	r3, [r7, #4]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	3302      	adds	r3, #2
 800cce2:	60bb      	str	r3, [r7, #8]
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	60ba      	str	r2, [r7, #8]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	60ba      	str	r2, [r7, #8]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	60ba      	str	r2, [r7, #8]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd12:	4313      	orrs	r3, r2
 800cd14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd18:	021b      	lsls	r3, r3, #8
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	60ba      	str	r2, [r7, #8]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	461a      	mov	r2, r3
 800cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd2e:	689a      	ldr	r2, [r3, #8]
 800cd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd32:	429a      	cmp	r2, r3
 800cd34:	f040 80c4 	bne.w	800cec0 <lcp_rejci+0x3f0>
 800cd38:	7d3b      	ldrb	r3, [r7, #20]
 800cd3a:	f36f 1345 	bfc	r3, #5, #1
 800cd3e:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 800cd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d015      	beq.n	800cd7a <lcp_rejci+0x2aa>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	dd12      	ble.n	800cd7a <lcp_rejci+0x2aa>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	3301      	adds	r3, #1
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d10d      	bne.n	800cd7a <lcp_rejci+0x2aa>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b07      	cmp	r3, #7
 800cd64:	d109      	bne.n	800cd7a <lcp_rejci+0x2aa>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	3b02      	subs	r3, #2
 800cd6a:	607b      	str	r3, [r7, #4]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	3302      	adds	r3, #2
 800cd70:	60bb      	str	r3, [r7, #8]
 800cd72:	7d3b      	ldrb	r3, [r7, #20]
 800cd74:	f36f 1386 	bfc	r3, #6, #1
 800cd78:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 800cd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d015      	beq.n	800cdb4 <lcp_rejci+0x2e4>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	dd12      	ble.n	800cdb4 <lcp_rejci+0x2e4>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	3301      	adds	r3, #1
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b02      	cmp	r3, #2
 800cd96:	d10d      	bne.n	800cdb4 <lcp_rejci+0x2e4>
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d109      	bne.n	800cdb4 <lcp_rejci+0x2e4>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3b02      	subs	r3, #2
 800cda4:	607b      	str	r3, [r7, #4]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	3302      	adds	r3, #2
 800cdaa:	60bb      	str	r3, [r7, #8]
 800cdac:	7d3b      	ldrb	r3, [r7, #20]
 800cdae:	f36f 13c7 	bfc	r3, #7, #1
 800cdb2:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 800cdb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdb6:	785b      	ldrb	r3, [r3, #1]
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d015      	beq.n	800cdee <lcp_rejci+0x31e>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	dd12      	ble.n	800cdee <lcp_rejci+0x31e>
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d10d      	bne.n	800cdee <lcp_rejci+0x31e>
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b12      	cmp	r3, #18
 800cdd8:	d109      	bne.n	800cdee <lcp_rejci+0x31e>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	3b02      	subs	r3, #2
 800cdde:	607b      	str	r3, [r7, #4]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	3302      	adds	r3, #2
 800cde4:	60bb      	str	r3, [r7, #8]
 800cde6:	7d7b      	ldrb	r3, [r7, #21]
 800cde8:	f36f 0341 	bfc	r3, #1, #1
 800cdec:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800cdee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf0:	785b      	ldrb	r3, [r3, #1]
 800cdf2:	f003 0304 	and.w	r3, r3, #4
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d046      	beq.n	800ce8a <lcp_rejci+0x3ba>
 800cdfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdfe:	7b9b      	ldrb	r3, [r3, #14]
 800ce00:	1cda      	adds	r2, r3, #3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	dc40      	bgt.n	800ce8a <lcp_rejci+0x3ba>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b13      	cmp	r3, #19
 800ce0e:	d13c      	bne.n	800ce8a <lcp_rejci+0x3ba>
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	3301      	adds	r3, #1
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	461a      	mov	r2, r3
 800ce18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce1a:	7b9b      	ldrb	r3, [r3, #14]
 800ce1c:	3303      	adds	r3, #3
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d133      	bne.n	800ce8a <lcp_rejci+0x3ba>
 800ce22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce24:	7b9b      	ldrb	r3, [r3, #14]
 800ce26:	3303      	adds	r3, #3
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	3302      	adds	r3, #2
 800ce32:	60bb      	str	r3, [r7, #8]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	60ba      	str	r2, [r7, #8]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce42:	7b5b      	ldrb	r3, [r3, #13]
 800ce44:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d13b      	bne.n	800cec4 <lcp_rejci+0x3f4>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce50:	e011      	b.n	800ce76 <lcp_rejci+0x3a6>
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	60ba      	str	r2, [r7, #8]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ce5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce62:	4413      	add	r3, r2
 800ce64:	330f      	adds	r3, #15
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d12b      	bne.n	800cec8 <lcp_rejci+0x3f8>
 800ce70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce72:	3301      	adds	r3, #1
 800ce74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce78:	7b9b      	ldrb	r3, [r3, #14]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	dce7      	bgt.n	800ce52 <lcp_rejci+0x382>
 800ce82:	7d7b      	ldrb	r3, [r7, #21]
 800ce84:	f36f 0382 	bfc	r3, #2, #1
 800ce88:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d11d      	bne.n	800cecc <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	7c1b      	ldrb	r3, [r3, #16]
 800ce94:	2b09      	cmp	r3, #9
 800ce96:	d009      	beq.n	800ceac <lcp_rejci+0x3dc>
	*go = try_;
 800ce98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9a:	461d      	mov	r5, r3
 800ce9c:	f107 0414 	add.w	r4, r7, #20
 800cea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	602b      	str	r3, [r5, #0]
    return 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e00f      	b.n	800ced0 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 800ceb0:	bf00      	nop
 800ceb2:	e00c      	b.n	800cece <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 800ceb4:	bf00      	nop
 800ceb6:	e00a      	b.n	800cece <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 800ceb8:	bf00      	nop
 800ceba:	e008      	b.n	800cece <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 800cebc:	bf00      	nop
 800cebe:	e006      	b.n	800cece <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 800cec0:	bf00      	nop
 800cec2:	e004      	b.n	800cece <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 800cec4:	bf00      	nop
 800cec6:	e002      	b.n	800cece <lcp_rejci+0x3fe>
 800cec8:	bf00      	nop
 800ceca:	e000      	b.n	800cece <lcp_rejci+0x3fe>
	goto bad;
 800cecc:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3754      	adds	r7, #84	; 0x54
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bcb0      	pop	{r4, r5, r7}
 800ced8:	4770      	bx	lr
	...

0800cedc <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b096      	sub	sp, #88	; 0x58
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 800cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef2:	3384      	adds	r3, #132	; 0x84
 800cef4:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	33cc      	adds	r3, #204	; 0xcc
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 800cefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefe:	33a8      	adds	r3, #168	; 0xa8
 800cf00:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 800cf02:	2302      	movs	r3, #2
 800cf04:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800cf0c:	2224      	movs	r2, #36	; 0x24
 800cf0e:	2100      	movs	r1, #0
 800cf10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf12:	f002 f85c 	bl	800efce <memset>

    /*
     * Process all his options.
     */
    next = inp;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 800cf1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf22:	2000      	movs	r0, #0
 800cf24:	f7f5 fdf0 	bl	8002b08 <pbuf_alloc>
 800cf28:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <lcp_reqci+0x58>
        return 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	e2b4      	b.n	800d49e <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	891a      	ldrh	r2, [r3, #8]
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	895b      	ldrh	r3, [r3, #10]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d004      	beq.n	800cf4a <lcp_reqci+0x6e>
        pbuf_free(nakp);
 800cf40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf42:	f7f6 f87f 	bl	8003044 <pbuf_free>
        return 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	e2a9      	b.n	800d49e <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800cf54:	e278      	b.n	800d448 <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 800cf56:	2302      	movs	r3, #2
 800cf58:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 800cf5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf5c:	623b      	str	r3, [r7, #32]
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 800cf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	dd0b      	ble.n	800cf80 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d906      	bls.n	800cf80 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	3301      	adds	r3, #1
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800cf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	dd08      	ble.n	800cf92 <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800cf80:	2304      	movs	r3, #4
 800cf82:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 800cf88:	2300      	movs	r3, #0
 800cf8a:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 800cf90:	e22e      	b.n	800d3f0 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	623a      	str	r2, [r7, #32]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 800cf9c:	6a3b      	ldr	r3, [r7, #32]
 800cf9e:	1c5a      	adds	r2, r3, #1
 800cfa0:	623a      	str	r2, [r7, #32]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 800cfa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 800cfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfb2:	4413      	add	r3, r2
 800cfb4:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 800cfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	2b12      	cmp	r3, #18
 800cfbc:	f200 8215 	bhi.w	800d3ea <lcp_reqci+0x50e>
 800cfc0:	a201      	add	r2, pc, #4	; (adr r2, 800cfc8 <lcp_reqci+0xec>)
 800cfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc6:	bf00      	nop
 800cfc8:	0800d015 	.word	0x0800d015
 800cfcc:	0800d093 	.word	0x0800d093
 800cfd0:	0800d181 	.word	0x0800d181
 800cfd4:	0800d3eb 	.word	0x0800d3eb
 800cfd8:	0800d227 	.word	0x0800d227
 800cfdc:	0800d3eb 	.word	0x0800d3eb
 800cfe0:	0800d317 	.word	0x0800d317
 800cfe4:	0800d33d 	.word	0x0800d33d
 800cfe8:	0800d3eb 	.word	0x0800d3eb
 800cfec:	0800d3eb 	.word	0x0800d3eb
 800cff0:	0800d3eb 	.word	0x0800d3eb
 800cff4:	0800d3eb 	.word	0x0800d3eb
 800cff8:	0800d3eb 	.word	0x0800d3eb
 800cffc:	0800d3eb 	.word	0x0800d3eb
 800d000:	0800d3eb 	.word	0x0800d3eb
 800d004:	0800d3eb 	.word	0x0800d3eb
 800d008:	0800d3eb 	.word	0x0800d3eb
 800d00c:	0800d363 	.word	0x0800d363
 800d010:	0800d389 	.word	0x0800d389
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <lcp_reqci+0x14c>
 800d022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d024:	2b04      	cmp	r3, #4
 800d026:	d002      	beq.n	800d02e <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800d028:	2304      	movs	r3, #4
 800d02a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d02c:	e1e0      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	623a      	str	r2, [r7, #32]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	b29b      	uxth	r3, r3
 800d038:	021b      	lsls	r3, r3, #8
 800d03a:	837b      	strh	r3, [r7, #26]
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	623a      	str	r2, [r7, #32]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	b29a      	uxth	r2, r3
 800d046:	8b7b      	ldrh	r3, [r7, #26]
 800d048:	4313      	orrs	r3, r2
 800d04a:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 800d04c:	8b7b      	ldrh	r3, [r7, #26]
 800d04e:	2b7f      	cmp	r3, #127	; 0x7f
 800d050:	d816      	bhi.n	800d080 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 800d052:	2303      	movs	r3, #3
 800d054:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 800d056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d05c:	2201      	movs	r2, #1
 800d05e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 800d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d062:	1c5a      	adds	r2, r3, #1
 800d064:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d066:	2204      	movs	r2, #4
 800d068:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 800d06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d07a:	2280      	movs	r2, #128	; 0x80
 800d07c:	701a      	strb	r2, [r3, #0]
		break;
 800d07e:	e1b7      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 800d080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d082:	7813      	ldrb	r3, [r2, #0]
 800d084:	f043 0304 	orr.w	r3, r3, #4
 800d088:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	8b7a      	ldrh	r2, [r7, #26]
 800d08e:	805a      	strh	r2, [r3, #2]
	    break;
 800d090:	e1ae      	b.n	800d3f0 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	f003 0308 	and.w	r3, r3, #8
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <lcp_reqci+0x1ca>
 800d0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a2:	2b06      	cmp	r3, #6
 800d0a4:	d002      	beq.n	800d0ac <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800d0a6:	2304      	movs	r3, #4
 800d0a8:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d0aa:	e1a1      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	1c5a      	adds	r2, r3, #1
 800d0b0:	623a      	str	r2, [r7, #32]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	021b      	lsls	r3, r3, #8
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	623a      	str	r2, [r7, #32]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	617b      	str	r3, [r7, #20]
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	623a      	str	r2, [r7, #32]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	617b      	str	r3, [r7, #20]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	021b      	lsls	r3, r3, #8
 800d0e2:	617b      	str	r3, [r7, #20]
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	1c5a      	adds	r2, r3, #1
 800d0e8:	623a      	str	r2, [r7, #32]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	43db      	mvns	r3, r3
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d035      	beq.n	800d16e <lcp_reqci+0x292>
		orc = CONFNAK;
 800d102:	2303      	movs	r3, #3
 800d104:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	1c5a      	adds	r2, r3, #1
 800d10a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d10c:	2202      	movs	r2, #2
 800d10e:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800d110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d116:	2206      	movs	r2, #6
 800d118:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 800d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11c:	1c5a      	adds	r2, r3, #1
 800d11e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d122:	6851      	ldr	r1, [r2, #4]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	430a      	orrs	r2, r1
 800d128:	0e12      	lsrs	r2, r2, #24
 800d12a:	b2d2      	uxtb	r2, r2
 800d12c:	701a      	strb	r2, [r3, #0]
 800d12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d136:	6851      	ldr	r1, [r2, #4]
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	430a      	orrs	r2, r1
 800d13c:	0c12      	lsrs	r2, r2, #16
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d14a:	6851      	ldr	r1, [r2, #4]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	430a      	orrs	r2, r1
 800d150:	0a12      	lsrs	r2, r2, #8
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d15e:	6852      	ldr	r2, [r2, #4]
 800d160:	b2d1      	uxtb	r1, r2
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	430a      	orrs	r2, r1
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	701a      	strb	r2, [r3, #0]
		break;
 800d16c:	e140      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 800d16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d170:	7813      	ldrb	r3, [r2, #0]
 800d172:	f043 0308 	orr.w	r3, r3, #8
 800d176:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	605a      	str	r2, [r3, #4]
	    break;
 800d17e:	e137      	b.n	800d3f0 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 800d180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d182:	2b03      	cmp	r3, #3
 800d184:	dd06      	ble.n	800d194 <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	781b      	ldrb	r3, [r3, #0]
		!(0
 800d18a:	f003 0310 	and.w	r3, r3, #16
 800d18e:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 800d190:	2b00      	cmp	r3, #0
 800d192:	d102      	bne.n	800d19a <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 800d194:	2304      	movs	r3, #4
 800d196:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d198:	e12a      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	623a      	str	r2, [r7, #32]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	021b      	lsls	r3, r3, #8
 800d1a6:	837b      	strh	r3, [r7, #26]
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	623a      	str	r2, [r7, #32]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	8b7b      	ldrh	r3, [r7, #26]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 800d1b8:	8b7b      	ldrh	r3, [r7, #26]
 800d1ba:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d11a      	bne.n	800d1f8 <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 800d1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	d002      	beq.n	800d1ce <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 800d1cc:	e110      	b.n	800d3f0 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f003 0310 	and.w	r3, r3, #16
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d107      	bne.n	800d1ec <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 800d1dc:	2303      	movs	r3, #3
 800d1de:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 800d1ea:	e101      	b.n	800d3f0 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 800d1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ee:	7813      	ldrb	r3, [r2, #0]
 800d1f0:	f043 0310 	orr.w	r3, r3, #16
 800d1f4:	7013      	strb	r3, [r2, #0]
		break;
 800d1f6:	e0fb      	b.n	800d3f0 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 800d1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d202:	2203      	movs	r2, #3
 800d204:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 800d206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d20c:	2204      	movs	r2, #4
 800d20e:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 800d210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d216:	22c0      	movs	r2, #192	; 0xc0
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d220:	2223      	movs	r2, #35	; 0x23
 800d222:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 800d224:	e0e4      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	f003 0320 	and.w	r3, r3, #32
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d106      	bne.n	800d242 <lcp_reqci+0x366>
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	f003 0320 	and.w	r3, r3, #32
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <lcp_reqci+0x36c>
 800d242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d244:	2b06      	cmp	r3, #6
 800d246:	d002      	beq.n	800d24e <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 800d248:	2304      	movs	r3, #4
 800d24a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d24c:	e0d0      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	623a      	str	r2, [r7, #32]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	021b      	lsls	r3, r3, #8
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	623a      	str	r2, [r7, #32]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	4313      	orrs	r3, r2
 800d268:	617b      	str	r3, [r7, #20]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	617b      	str	r3, [r7, #20]
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	623a      	str	r2, [r7, #32]
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	461a      	mov	r2, r3
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	617b      	str	r3, [r7, #20]
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	1c5a      	adds	r2, r3, #1
 800d28a:	623a      	str	r2, [r7, #32]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	461a      	mov	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	4313      	orrs	r3, r2
 800d294:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d02f      	beq.n	800d304 <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d12a      	bne.n	800d304 <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 800d2ae:	f000 fb71 	bl	800d994 <magic>
 800d2b2:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 800d2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2be:	2205      	movs	r2, #5
 800d2c0:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 800d2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2c8:	2206      	movs	r2, #6
 800d2ca:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 800d2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	0e12      	lsrs	r2, r2, #24
 800d2d6:	b2d2      	uxtb	r2, r2
 800d2d8:	701a      	strb	r2, [r3, #0]
 800d2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	0c12      	lsrs	r2, r2, #16
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ea:	1c5a      	adds	r2, r3, #1
 800d2ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	0a12      	lsrs	r2, r2, #8
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	b2d2      	uxtb	r2, r2
 800d300:	701a      	strb	r2, [r3, #0]
		break;
 800d302:	e075      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 800d304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d306:	7813      	ldrb	r3, [r2, #0]
 800d308:	f043 0320 	orr.w	r3, r3, #32
 800d30c:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	609a      	str	r2, [r3, #8]
	    break;
 800d314:	e06c      	b.n	800d3f0 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 800d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <lcp_reqci+0x44e>
 800d324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d326:	2b02      	cmp	r3, #2
 800d328:	d002      	beq.n	800d330 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800d32a:	2304      	movs	r3, #4
 800d32c:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d32e:	e05f      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 800d330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d332:	7813      	ldrb	r3, [r2, #0]
 800d334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d338:	7013      	strb	r3, [r2, #0]
	    break;
 800d33a:	e059      	b.n	800d3f0 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <lcp_reqci+0x474>
 800d34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d002      	beq.n	800d356 <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 800d350:	2304      	movs	r3, #4
 800d352:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d354:	e04c      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 800d356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d358:	7813      	ldrb	r3, [r2, #0]
 800d35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d35e:	7013      	strb	r3, [r2, #0]
	    break;
 800d360:	e046      	b.n	800d3f0 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	785b      	ldrb	r3, [r3, #1]
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 800d370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d372:	2b02      	cmp	r3, #2
 800d374:	d002      	beq.n	800d37c <lcp_reqci+0x4a0>
		orc = CONFREJ;
 800d376:	2304      	movs	r3, #4
 800d378:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d37a:	e039      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 800d37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d37e:	7853      	ldrb	r3, [r2, #1]
 800d380:	f043 0302 	orr.w	r3, r3, #2
 800d384:	7053      	strb	r3, [r2, #1]
	    break;
 800d386:	e033      	b.n	800d3f0 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	785b      	ldrb	r3, [r3, #1]
 800d38c:	f003 0304 	and.w	r3, r3, #4
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <lcp_reqci+0x4c6>
 800d396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d398:	2b02      	cmp	r3, #2
 800d39a:	dd02      	ble.n	800d3a2 <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 800d39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39e:	2b17      	cmp	r3, #23
 800d3a0:	dd02      	ble.n	800d3a8 <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 800d3a2:	2304      	movs	r3, #4
 800d3a4:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 800d3a6:	e023      	b.n	800d3f0 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	623a      	str	r2, [r7, #32]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 800d3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b4:	3b03      	subs	r3, #3
 800d3b6:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 800d3b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ba:	7853      	ldrb	r3, [r2, #1]
 800d3bc:	f043 0304 	orr.w	r3, r3, #4
 800d3c0:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 800d3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	330f      	adds	r3, #15
 800d3d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3d8:	6a39      	ldr	r1, [r7, #32]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f001 fdd2 	bl	800ef84 <memcpy>
	    INCPTR(cilen, p);
 800d3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3e2:	6a3a      	ldr	r2, [r7, #32]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	623b      	str	r3, [r7, #32]
	    break;
 800d3e8:	e002      	b.n	800d3f0 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 800d3ea:	2304      	movs	r3, #4
 800d3ec:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 800d3ee:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800d3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d103      	bne.n	800d3fe <lcp_reqci+0x522>
 800d3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d000      	beq.n	800d3fe <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800d3fc:	e024      	b.n	800d448 <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800d3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d400:	2b03      	cmp	r3, #3
 800d402:	d10e      	bne.n	800d422 <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 800d40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40c:	2b05      	cmp	r3, #5
 800d40e:	d002      	beq.n	800d416 <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 800d410:	2304      	movs	r3, #4
 800d412:	647b      	str	r3, [r7, #68]	; 0x44
 800d414:	e005      	b.n	800d422 <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800d416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d418:	2b04      	cmp	r3, #4
 800d41a:	d100      	bne.n	800d41e <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 800d41c:	e014      	b.n	800d448 <lcp_reqci+0x56c>
		rc = CONFNAK;
 800d41e:	2303      	movs	r3, #3
 800d420:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 800d422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d424:	2b04      	cmp	r3, #4
 800d426:	d10f      	bne.n	800d448 <lcp_reqci+0x56c>
	    rc = CONFREJ;
 800d428:	2304      	movs	r3, #4
 800d42a:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 800d42c:	69fa      	ldr	r2, [r7, #28]
 800d42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d430:	429a      	cmp	r2, r3
 800d432:	d005      	beq.n	800d440 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 800d434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d436:	461a      	mov	r2, r3
 800d438:	69f9      	ldr	r1, [r7, #28]
 800d43a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d43c:	f001 fda2 	bl	800ef84 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 800d440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d444:	4413      	add	r3, r2
 800d446:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f47f ad83 	bne.w	800cf56 <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 800d450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d452:	2b03      	cmp	r3, #3
 800d454:	d00a      	beq.n	800d46c <lcp_reqci+0x590>
 800d456:	2b04      	cmp	r3, #4
 800d458:	d017      	beq.n	800d48a <lcp_reqci+0x5ae>
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d000      	beq.n	800d460 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 800d45e:	e01a      	b.n	800d496 <lcp_reqci+0x5ba>
	*lenp = next - inp;
 800d460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	1ad2      	subs	r2, r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	601a      	str	r2, [r3, #0]
	break;
 800d46a:	e014      	b.n	800d496 <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 800d46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d470:	6852      	ldr	r2, [r2, #4]
 800d472:	1a9a      	subs	r2, r3, r2
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	6859      	ldr	r1, [r3, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	68b8      	ldr	r0, [r7, #8]
 800d484:	f001 fd7e 	bl	800ef84 <memcpy>
	break;
 800d488:	e005      	b.n	800d496 <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 800d48a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	601a      	str	r2, [r3, #0]
	break;
 800d494:	bf00      	nop
    }

    pbuf_free(nakp);
 800d496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d498:	f7f5 fdd4 	bl	8003044 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 800d49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3758      	adds	r7, #88	; 0x58
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop

0800d4a8 <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08c      	sub	sp, #48	; 0x30
 800d4ac:	af02      	add	r7, sp, #8
 800d4ae:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	3360      	adds	r3, #96	; 0x60
 800d4ba:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	33cc      	adds	r3, #204	; 0xcc
 800d4c0:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	3384      	adds	r3, #132	; 0x84
 800d4c6:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	33a8      	adds	r3, #168	; 0xa8
 800d4cc:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d102      	bne.n	800d4e2 <lcp_up+0x3a>
	go->magicnumber = 0;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f003 0320 	and.w	r3, r3, #32
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <lcp_up+0x4e>
	ho->magicnumber = 0;
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <lcp_up+0x62>
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	885b      	ldrh	r3, [r3, #2]
 800d508:	e001      	b.n	800d50e <lcp_up+0x66>
 800d50a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d50e:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	f003 0304 	and.w	r3, r3, #4
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <lcp_up+0x8e>
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	885a      	ldrh	r2, [r3, #2]
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	885b      	ldrh	r3, [r3, #2]
 800d526:	429a      	cmp	r2, r3
 800d528:	d902      	bls.n	800d530 <lcp_up+0x88>
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	885b      	ldrh	r3, [r3, #2]
 800d52e:	e004      	b.n	800d53a <lcp_up+0x92>
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	885b      	ldrh	r3, [r3, #2]
 800d534:	e001      	b.n	800d53a <lcp_up+0x92>
 800d536:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d53a:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	885b      	ldrh	r3, [r3, #2]
 800d540:	4619      	mov	r1, r3
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	4293      	cmp	r3, r2
 800d548:	bfa8      	it	ge
 800d54a:	4613      	movge	r3, r2
 800d54c:	428b      	cmp	r3, r1
 800d54e:	bfa8      	it	ge
 800d550:	460b      	movge	r3, r1
 800d552:	4619      	mov	r1, r3
 800d554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d556:	f000 fbb1 	bl	800dcbc <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	f003 0308 	and.w	r3, r3, #8
 800d562:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <lcp_up+0xc6>
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	e001      	b.n	800d572 <lcp_up+0xca>
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d57a:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800d57c:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d586:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	460b      	mov	r3, r1
 800d58c:	6939      	ldr	r1, [r7, #16]
 800d58e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d590:	f000 fae6 	bl	800db60 <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d10c      	bne.n	800d5bc <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	f003 0308 	and.w	r3, r3, #8
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <lcp_up+0x10e>
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	e003      	b.n	800d5be <lcp_up+0x116>
 800d5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ba:	e000      	b.n	800d5be <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 800d5bc:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d5c6:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800d5c8:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d5d2:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	68f9      	ldr	r1, [r7, #12]
 800d5da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5dc:	f000 fadc 	bl	800db98 <ppp_recv_config>

    if (ho->neg_mru)
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	885a      	ldrh	r2, [r3, #2]
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 f97a 	bl	800d8f6 <lcp_echo_lowerup>

    link_established(pcb);
 800d602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d604:	f7fb fdca 	bl	800919c <link_established>
}
 800d608:	bf00      	nop
 800d60a:	3728      	adds	r7, #40	; 0x28
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af02      	add	r7, sp, #8
 800d616:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3384      	adds	r3, #132	; 0x84
 800d622:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 f985 	bl	800d938 <lcp_echo_lowerdown>

    link_down(pcb);
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7fb fd62 	bl	80090f8 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 800d634:	2300      	movs	r3, #0
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	2300      	movs	r3, #0
 800d63a:	f04f 32ff 	mov.w	r2, #4294967295
 800d63e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 fa8c 	bl	800db60 <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 0308 	and.w	r3, r3, #8
 800d650:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <lcp_down+0x4c>
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	e001      	b.n	800d660 <lcp_down+0x50>
 800d65c:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d668:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800d66a:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d674:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	460b      	mov	r3, r1
 800d67a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 fa8a 	bl	800db98 <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d68a:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 800d68e:	bf00      	nop
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7fb fd05 	bl	80090b4 <link_required>
}
 800d6aa:	bf00      	nop
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b084      	sub	sp, #16
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7fb fd01 	bl	80090c8 <link_terminated>
}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	7c1b      	ldrb	r3, [r3, #16]
 800d6e2:	2b09      	cmp	r3, #9
 800d6e4:	d107      	bne.n	800d6f6 <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2209      	movs	r2, #9
 800d6ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 800d6ee:	4904      	ldr	r1, [pc, #16]	; (800d700 <LcpLinkFailure+0x30>)
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7fe f88d 	bl	800b810 <lcp_close>
    }
}
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	08011e28 	.word	0x08011e28

0800d704 <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f88e 	bl	800d834 <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	7c1b      	ldrb	r3, [r3, #16]
 800d71c:	2b09      	cmp	r3, #9
 800d71e:	d117      	bne.n	800d750 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 800d720:	6879      	ldr	r1, [r7, #4]
 800d722:	480d      	ldr	r0, [pc, #52]	; (800d758 <LcpEchoCheck+0x54>)
 800d724:	f7fb fc8c 	bl	8009040 <sys_untimeout>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	7cdb      	ldrb	r3, [r3, #19]
 800d72c:	461a      	mov	r2, r3
 800d72e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d732:	fb03 f302 	mul.w	r3, r3, r2
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	4907      	ldr	r1, [pc, #28]	; (800d758 <LcpEchoCheck+0x54>)
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fb fc54 	bl	8008fe8 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800d746:	f043 0310 	orr.w	r3, r3, #16
 800d74a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800d74e:	e000      	b.n	800d752 <LcpEchoCheck+0x4e>
	return;
 800d750:	bf00      	nop
}
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	0800d75d 	.word	0x0800d75d

0800d75c <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d774:	f003 0310 	and.w	r3, r3, #16
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d009      	beq.n	800d792 <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800d784:	f36f 1304 	bfc	r3, #4, #1
 800d788:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff ffb9 	bl	800d704 <LcpEchoCheck>
    }
}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 800d79a:	b480      	push	{r7}
 800d79c:	b089      	sub	sp, #36	; 0x24
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	607a      	str	r2, [r7, #4]
 800d7a6:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	3384      	adds	r3, #132	; 0x84
 800d7b2:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	dd34      	ble.n	800d824 <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	617b      	str	r3, [r7, #20]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	617b      	str	r3, [r7, #20]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	021b      	lsls	r3, r3, #8
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	607a      	str	r2, [r7, #4]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	021b      	lsls	r3, r3, #8
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	f003 0320 	and.w	r3, r3, #32
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	429a      	cmp	r2, r3
 800d818:	d006      	beq.n	800d828 <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 800d822:	e002      	b.n	800d82a <lcp_received_echo_reply+0x90>
	return;
 800d824:	bf00      	nop
 800d826:	e000      	b.n	800d82a <lcp_received_echo_reply+0x90>
	return;
 800d828:	bf00      	nop
}
 800d82a:	3724      	adds	r7, #36	; 0x24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b08a      	sub	sp, #40	; 0x28
 800d838:	af02      	add	r7, sp, #8
 800d83a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	3384      	adds	r3, #132	; 0x84
 800d846:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	7d1b      	ldrb	r3, [r3, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00d      	beq.n	800d86c <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	7d1b      	ldrb	r3, [r3, #20]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d306      	bcc.n	800d86c <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff ff36 	bl	800d6d0 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	7c1b      	ldrb	r3, [r3, #16]
 800d870:	2b09      	cmp	r3, #9
 800d872:	d13c      	bne.n	800d8ee <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 800d87a:	f107 030c 	add.w	r3, r7, #12
 800d87e:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	613a      	str	r2, [r7, #16]
 800d886:	697a      	ldr	r2, [r7, #20]
 800d888:	0e12      	lsrs	r2, r2, #24
 800d88a:	b2d2      	uxtb	r2, r2
 800d88c:	701a      	strb	r2, [r3, #0]
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	613a      	str	r2, [r7, #16]
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	0c12      	lsrs	r2, r2, #16
 800d898:	b2d2      	uxtb	r2, r2
 800d89a:	701a      	strb	r2, [r3, #0]
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	613a      	str	r2, [r7, #16]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	0a12      	lsrs	r2, r2, #8
 800d8a6:	b2d2      	uxtb	r2, r2
 800d8a8:	701a      	strb	r2, [r3, #0]
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	1c5a      	adds	r2, r3, #1
 800d8ae:	613a      	str	r2, [r7, #16]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	b2d2      	uxtb	r2, r2
 800d8b4:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 800d8bc:	1c53      	adds	r3, r2, #1
 800d8be:	b2d9      	uxtb	r1, r3
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 800d8c6:	6939      	ldr	r1, [r7, #16]
 800d8c8:	f107 030c 	add.w	r3, r7, #12
 800d8cc:	1acb      	subs	r3, r1, r3
 800d8ce:	f107 010c 	add.w	r1, r7, #12
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	2109      	movs	r1, #9
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7fc fc79 	bl	800a1d0 <fsm_sdata>
	++pcb->lcp_echos_pending;
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 800d8ee:	bf00      	nop
 800d8f0:	3720      	adds	r7, #32
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	3344      	adds	r3, #68	; 0x44
 800d902:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800d91a:	f36f 1304 	bfc	r3, #4, #1
 800d91e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7cdb      	ldrb	r3, [r3, #19]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff feea 	bl	800d704 <LcpEchoCheck>
}
 800d930:	bf00      	nop
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3344      	adds	r3, #68	; 0x44
 800d944:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d94c:	f003 0310 	and.w	r3, r3, #16
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	4806      	ldr	r0, [pc, #24]	; (800d974 <lcp_echo_lowerdown+0x3c>)
 800d95a:	f7fb fb71 	bl	8009040 <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800d964:	f36f 1304 	bfc	r3, #4, #1
 800d968:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 800d96c:	bf00      	nop
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	0800d75d 	.word	0x0800d75d

0800d978 <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 800d97c:	f7f3 fb8e 	bl	800109c <sys_jiffies>
 800d980:	4602      	mov	r2, r0
 800d982:	4b03      	ldr	r3, [pc, #12]	; (800d990 <magic_randomize+0x18>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4413      	add	r3, r2
 800d988:	4a01      	ldr	r2, [pc, #4]	; (800d990 <magic_randomize+0x18>)
 800d98a:	6013      	str	r3, [r2, #0]
}
 800d98c:	bf00      	nop
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	200005b4 	.word	0x200005b4

0800d994 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 800d994:	b598      	push	{r3, r4, r7, lr}
 800d996:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 800d998:	f7f3 fb88 	bl	80010ac <lwip_port_rand>
 800d99c:	4603      	mov	r3, r0
 800d99e:	041c      	lsls	r4, r3, #16
 800d9a0:	f7f3 fb84 	bl	80010ac <lwip_port_rand>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	18e2      	adds	r2, r4, r3
 800d9a8:	4b02      	ldr	r3, [pc, #8]	; (800d9b4 <magic+0x20>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	bd98      	pop	{r3, r4, r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	200005b4 	.word	0x200005b4

0800d9b8 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9c8:	2b05      	cmp	r3, #5
 800d9ca:	d904      	bls.n	800d9d6 <ppp_input+0x1e>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9d2:	2b0b      	cmp	r3, #11
 800d9d4:	d90b      	bls.n	800d9ee <ppp_input+0x36>
 800d9d6:	4b45      	ldr	r3, [pc, #276]	; (800daec <ppp_input+0x134>)
 800d9d8:	f240 3211 	movw	r2, #785	; 0x311
 800d9dc:	4944      	ldr	r1, [pc, #272]	; (800daf0 <ppp_input+0x138>)
 800d9de:	4845      	ldr	r0, [pc, #276]	; (800daf4 <ppp_input+0x13c>)
 800d9e0:	f001 f8ce 	bl	800eb80 <iprintf>
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f001 f9cd 	bl	800ed84 <fflush>
 800d9ea:	f001 f912 	bl	800ec12 <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 800d9ee:	f7ff ffc3 	bl	800d978 <magic_randomize>

  if (pb->len < 2) {
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	895b      	ldrh	r3, [r3, #10]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d969      	bls.n	800dace <ppp_input+0x116>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	021b      	lsls	r3, r3, #8
 800da02:	b21a      	sxth	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	3301      	adds	r3, #1
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b21b      	sxth	r3, r3
 800da0e:	4313      	orrs	r3, r2
 800da10:	b21b      	sxth	r3, r3
 800da12:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 800da14:	2102      	movs	r1, #2
 800da16:	6838      	ldr	r0, [r7, #0]
 800da18:	f7f5 fa8a 	bl	8002f30 <pbuf_remove_header>
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 800da1c:	8a7b      	ldrh	r3, [r7, #18]
 800da1e:	f24c 0221 	movw	r2, #49185	; 0xc021
 800da22:	4293      	cmp	r3, r2
 800da24:	d004      	beq.n	800da30 <ppp_input+0x78>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800da2c:	2b09      	cmp	r3, #9
 800da2e:	d150      	bne.n	800dad2 <ppp_input+0x11a>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da36:	2b07      	cmp	r3, #7
 800da38:	d809      	bhi.n	800da4e <ppp_input+0x96>
   && !(protocol == PPP_LCP
 800da3a:	8a7b      	ldrh	r3, [r7, #18]
 800da3c:	f24c 0221 	movw	r2, #49185	; 0xc021
 800da40:	4293      	cmp	r3, r2
 800da42:	d004      	beq.n	800da4e <ppp_input+0x96>
 800da44:	8a7b      	ldrh	r3, [r7, #18]
 800da46:	f24c 0223 	movw	r2, #49187	; 0xc023
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d143      	bne.n	800dad6 <ppp_input+0x11e>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 800da4e:	8a7b      	ldrh	r3, [r7, #18]
 800da50:	2b21      	cmp	r3, #33	; 0x21
 800da52:	d106      	bne.n	800da62 <ppp_input+0xaa>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da58:	4619      	mov	r1, r3
 800da5a:	6838      	ldr	r0, [r7, #0]
 800da5c:	f7f3 ff86 	bl	800196c <ip4_input>
      return;
 800da60:	e041      	b.n	800dae6 <ppp_input+0x12e>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800da62:	2300      	movs	r3, #0
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	e019      	b.n	800da9c <ppp_input+0xe4>
        if (protp->protocol == protocol) {
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	881b      	ldrh	r3, [r3, #0]
 800da6c:	8a7a      	ldrh	r2, [r7, #18]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d111      	bne.n	800da96 <ppp_input+0xde>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 800da72:	2100      	movs	r1, #0
 800da74:	6838      	ldr	r0, [r7, #0]
 800da76:	f7f5 fdc7 	bl	8003608 <pbuf_coalesce>
 800da7a:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d12a      	bne.n	800dada <ppp_input+0x122>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	6851      	ldr	r1, [r2, #4]
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	8952      	ldrh	r2, [r2, #10]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	4798      	blx	r3
          goto out;
 800da94:	e024      	b.n	800dae0 <ppp_input+0x128>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	3301      	adds	r3, #1
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	4a16      	ldr	r2, [pc, #88]	; (800daf8 <ppp_input+0x140>)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1dd      	bne.n	800da68 <ppp_input+0xb0>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 800daac:	2102      	movs	r1, #2
 800daae:	6838      	ldr	r0, [r7, #0]
 800dab0:	f7f5 fa2e 	bl	8002f10 <pbuf_add_header>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d111      	bne.n	800dade <ppp_input+0x126>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6859      	ldr	r1, [r3, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	895b      	ldrh	r3, [r3, #10]
 800dac2:	461a      	mov	r2, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7fe f856 	bl	800bb76 <lcp_sprotrej>
    }
    break;
 800daca:	bf00      	nop
 800dacc:	e008      	b.n	800dae0 <ppp_input+0x128>
    goto drop;
 800dace:	bf00      	nop
 800dad0:	e006      	b.n	800dae0 <ppp_input+0x128>
    goto drop;
 800dad2:	bf00      	nop
 800dad4:	e004      	b.n	800dae0 <ppp_input+0x128>
    goto drop;
 800dad6:	bf00      	nop
 800dad8:	e002      	b.n	800dae0 <ppp_input+0x128>
            goto drop;
 800dada:	bf00      	nop
 800dadc:	e000      	b.n	800dae0 <ppp_input+0x128>
        goto drop;
 800dade:	bf00      	nop
drop:
  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 800dae0:	6838      	ldr	r0, [r7, #0]
 800dae2:	f7f5 faaf 	bl	8003044 <pbuf_free>
}
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	08011e44 	.word	0x08011e44
 800daf0:	08011f00 	.word	0x08011f00
 800daf4:	08011e88 	.word	0x08011e88
 800daf8:	080121ac 	.word	0x080121ac

0800dafc <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	69d1      	ldr	r1, [r2, #28]
 800db10:	683a      	ldr	r2, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	4798      	blx	r3
 800db16:	4603      	mov	r3, r0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	69d2      	ldr	r2, [r2, #28]
 800db32:	4611      	mov	r1, r2
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 800db38:	bf00      	nop
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 800db60:	b590      	push	{r4, r7, lr}
 800db62:	b087      	sub	sp, #28
 800db64:	af02      	add	r7, sp, #8
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	699b      	ldr	r3, [r3, #24]
 800db7c:	695c      	ldr	r4, [r3, #20]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	69d9      	ldr	r1, [r3, #28]
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	47a0      	blx	r4
  }

  return 0;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}

0800db98 <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af02      	add	r7, sp, #8
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
 800dba4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00a      	beq.n	800dbc6 <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	699c      	ldr	r4, [r3, #24]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	69d9      	ldr	r1, [r3, #28]
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	47a0      	blx	r4
  }

  return 0;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}

0800dbd0 <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dbee:	f107 0314 	add.w	r3, r7, #20
 800dbf2:	f107 0218 	add.w	r2, r7, #24
 800dbf6:	f107 011c 	add.w	r1, r7, #28
 800dbfa:	f7f4 fe0b 	bl	8002814 <netif_set_addr>
  return 1;
 800dbfe:	2301      	movs	r3, #1
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3720      	adds	r7, #32
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dc18:	4b04      	ldr	r3, [pc, #16]	; (800dc2c <cifaddr+0x24>)
 800dc1a:	4a05      	ldr	r2, [pc, #20]	; (800dc30 <cifaddr+0x28>)
 800dc1c:	4903      	ldr	r1, [pc, #12]	; (800dc2c <cifaddr+0x24>)
 800dc1e:	f7f4 fdf9 	bl	8002814 <netif_set_addr>
  return 1;
 800dc22:	2301      	movs	r3, #1
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	08011ffc 	.word	0x08011ffc
 800dc30:	08012000 	.word	0x08012000

0800dc34 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800dc42:	f043 0308 	orr.w	r3, r3, #8
 800dc46:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7f4 fe58 	bl	800290c <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800dc66:	4611      	mov	r1, r2
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	4798      	blx	r3
  return 1;
 800dc70:	2301      	movs	r3, #1
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800dc88:	f36f 03c3 	bfc	r3, #3, #1
 800dc8c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7f4 fe65 	bl	8002964 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 800dc9a:	2301      	movs	r3, #1
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 800dcac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	b292      	uxth	r2, r2
 800dcce:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08c      	sub	sp, #48	; 0x30
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	69db      	ldr	r3, [r3, #28]
 800dcec:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 81b6 	beq.w	800e070 <pppos_input+0x394>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 800dd04:	e1ad      	b.n	800e062 <pppos_input+0x386>
    cur_char = *s_u8++;
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	1c5a      	adds	r2, r3, #1
 800dd0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 800dd12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd16:	08db      	lsrs	r3, r3, #3
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	4413      	add	r3, r2
 800dd20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd24:	b25a      	sxtb	r2, r3
 800dd26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd2a:	f003 0307 	and.w	r3, r3, #7
 800dd2e:	2101      	movs	r1, #1
 800dd30:	fa01 f303 	lsl.w	r3, r1, r3
 800dd34:	b25b      	sxtb	r3, r3
 800dd36:	4013      	ands	r3, r2
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 800dd3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 8094 	beq.w	800de70 <pppos_input+0x194>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 800dd48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd4c:	2b7d      	cmp	r3, #125	; 0x7d
 800dd4e:	d104      	bne.n	800dd5a <pppos_input+0x7e>
        pppos->in_escaped = 1;
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800dd58:	e183      	b.n	800e062 <pppos_input+0x386>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 800dd5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd5e:	2b7e      	cmp	r3, #126	; 0x7e
 800dd60:	f040 817f 	bne.w	800e062 <pppos_input+0x386>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d972      	bls.n	800de54 <pppos_input+0x178>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dd74:	2b04      	cmp	r3, #4
 800dd76:	d803      	bhi.n	800dd80 <pppos_input+0xa4>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
          pppos_input_drop(pppos);
 800dd78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd7a:	f000 f9a7 	bl	800e0cc <pppos_input_drop>
 800dd7e:	e069      	b.n	800de54 <pppos_input+0x178>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd86:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d003      	beq.n	800dd96 <pppos_input+0xba>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
          pppos_input_drop(pppos);
 800dd8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd90:	f000 f99c 	bl	800e0cc <pppos_input_drop>
 800dd94:	e05e      	b.n	800de54 <pppos_input+0x178>
        } else if (!pppos->in_tail) {
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d103      	bne.n	800dda6 <pppos_input+0xca>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
          pppos_input_drop(pppos);
 800dd9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dda0:	f000 f994 	bl	800e0cc <pppos_input_drop>
 800dda4:	e056      	b.n	800de54 <pppos_input+0x178>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddaa:	895b      	ldrh	r3, [r3, #10]
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d91c      	bls.n	800ddea <pppos_input+0x10e>
            pppos->in_tail->len -= 2;
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ddb8:	8952      	ldrh	r2, [r2, #10]
 800ddba:	3a02      	subs	r2, #2
 800ddbc:	b292      	uxth	r2, r2
 800ddbe:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ddc8:	8952      	ldrh	r2, [r2, #10]
 800ddca:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d027      	beq.n	800de28 <pppos_input+0x14c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f7f5 f9f6 	bl	80031d4 <pbuf_cat>
 800dde8:	e01e      	b.n	800de28 <pppos_input+0x14c>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 800ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ddf2:	8952      	ldrh	r2, [r2, #10]
 800ddf4:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d007      	beq.n	800de12 <pppos_input+0x136>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0a:	4619      	mov	r1, r3
 800de0c:	4610      	mov	r0, r2
 800de0e:	f7f5 f9e1 	bl	80031d4 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de1a:	891b      	ldrh	r3, [r3, #8]
 800de1c:	3b02      	subs	r3, #2
 800de1e:	b29b      	uxth	r3, r3
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7f4 ff62 	bl	8002cec <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de2c:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 800de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de30:	2200      	movs	r2, #0
 800de32:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	2200      	movs	r2, #0
 800de38:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 800de3a:	6939      	ldr	r1, [r7, #16]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f7ff fdbb 	bl	800d9b8 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 8110 	beq.w	800e074 <pppos_input+0x398>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2201      	movs	r2, #1
 800de62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800de6e:	e0f8      	b.n	800e062 <pppos_input+0x386>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de76:	2b00      	cmp	r3, #0
 800de78:	d009      	beq.n	800de8e <pppos_input+0x1b2>
        pppos->in_escaped = 0;
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 800de82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de86:	f083 0320 	eor.w	r3, r3, #32
 800de8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de94:	2b05      	cmp	r3, #5
 800de96:	f200 80ce 	bhi.w	800e036 <pppos_input+0x35a>
 800de9a:	a201      	add	r2, pc, #4	; (adr r2, 800dea0 <pppos_input+0x1c4>)
 800de9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea0:	0800e037 	.word	0x0800e037
 800dea4:	0800deb9 	.word	0x0800deb9
 800dea8:	0800decb 	.word	0x0800decb
 800deac:	0800dedd 	.word	0x0800dedd
 800deb0:	0800df19 	.word	0x0800df19
 800deb4:	0800df39 	.word	0x0800df39
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 800deb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800debc:	2bff      	cmp	r3, #255	; 0xff
 800debe:	d104      	bne.n	800deca <pppos_input+0x1ee>
            pppos->in_state = PDCONTROL;
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800dec8:	e0b6      	b.n	800e038 <pppos_input+0x35c>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 800deca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dece:	2b03      	cmp	r3, #3
 800ded0:	d104      	bne.n	800dedc <pppos_input+0x200>
            pppos->in_state = PDPROTOCOL1;
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	2203      	movs	r2, #3
 800ded6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 800deda:	e0ad      	b.n	800e038 <pppos_input+0x35c>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 800dedc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00a      	beq.n	800defe <pppos_input+0x222>
            pppos->in_protocol = cur_char;
 800dee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800deec:	b29a      	uxth	r2, r3
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	2205      	movs	r2, #5
 800def8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 800defc:	e09c      	b.n	800e038 <pppos_input+0x35c>
            pppos->in_protocol = (u16_t)cur_char << 8;
 800defe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df02:	b29b      	uxth	r3, r3
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	b29a      	uxth	r2, r3
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	2204      	movs	r2, #4
 800df12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800df16:	e08f      	b.n	800e038 <pppos_input+0x35c>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800df1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df22:	b29b      	uxth	r3, r3
 800df24:	4313      	orrs	r3, r2
 800df26:	b29a      	uxth	r2, r3
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	2205      	movs	r2, #5
 800df32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 800df36:	e07f      	b.n	800e038 <pppos_input+0x35c>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <pppos_input+0x270>
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df44:	895b      	ldrh	r3, [r3, #10]
 800df46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df4a:	d165      	bne.n	800e018 <pppos_input+0x33c>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df50:	2b00      	cmp	r3, #0
 800df52:	d027      	beq.n	800dfa4 <pppos_input+0x2c8>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800df5c:	8952      	ldrh	r2, [r2, #10]
 800df5e:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df68:	429a      	cmp	r2, r3
 800df6a:	d00a      	beq.n	800df82 <pppos_input+0x2a6>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df74:	4619      	mov	r1, r3
 800df76:	4610      	mov	r0, r2
 800df78:	f7f5 f92c 	bl	80031d4 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	2200      	movs	r2, #0
 800df80:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 800df82:	f240 6374 	movw	r3, #1652	; 0x674
 800df86:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8c:	891b      	ldrh	r3, [r3, #8]
 800df8e:	8c3a      	ldrh	r2, [r7, #32]
 800df90:	429a      	cmp	r2, r3
 800df92:	d207      	bcs.n	800dfa4 <pppos_input+0x2c8>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
                pppos_input_drop(pppos);
 800df94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df96:	f000 f899 	bl	800e0cc <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 800dfa2:	e049      	b.n	800e038 <pppos_input+0x35c>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 800dfa8:	8bfb      	ldrh	r3, [r7, #30]
 800dfaa:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800dfae:	4619      	mov	r1, r3
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	f7f4 fda9 	bl	8002b08 <pbuf_alloc>
 800dfb6:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d107      	bne.n	800dfce <pppos_input+0x2f2>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
              pppos_input_drop(pppos);
 800dfbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc0:	f000 f884 	bl	800e0cc <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 800dfcc:	e034      	b.n	800e038 <pppos_input+0x35c>
            }
            if (pppos->in_head == NULL) {
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d11d      	bne.n	800e012 <pppos_input+0x336>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	8bfb      	ldrh	r3, [r7, #30]
 800dfdc:	4413      	add	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	895b      	ldrh	r3, [r3, #10]
 800dfe4:	3302      	adds	r3, #2
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	617a      	str	r2, [r7, #20]
 800dff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dff4:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800dff8:	0a12      	lsrs	r2, r2, #8
 800dffa:	b292      	uxth	r2, r2
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e006:	b2da      	uxtb	r2, r3
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	69ba      	ldr	r2, [r7, #24]
 800e010:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	69ba      	ldr	r2, [r7, #24]
 800e016:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e01c:	6859      	ldr	r1, [r3, #4]
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e022:	895a      	ldrh	r2, [r3, #10]
 800e024:	1c50      	adds	r0, r2, #1
 800e026:	b280      	uxth	r0, r0
 800e028:	8158      	strh	r0, [r3, #10]
 800e02a:	4613      	mov	r3, r2
 800e02c:	440b      	add	r3, r1
 800e02e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e032:	701a      	strb	r2, [r3, #0]
          break;
 800e034:	e000      	b.n	800e038 <pppos_input+0x35c>
        default:
          break;
 800e036:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e03e:	0a1b      	lsrs	r3, r3, #8
 800e040:	b29a      	uxth	r2, r3
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e048:	4619      	mov	r1, r3
 800e04a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e04e:	404b      	eors	r3, r1
 800e050:	b2db      	uxtb	r3, r3
 800e052:	490a      	ldr	r1, [pc, #40]	; (800e07c <pppos_input+0x3a0>)
 800e054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e058:	4053      	eors	r3, r2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	1e5a      	subs	r2, r3, #1
 800e066:	607a      	str	r2, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f73f ae4c 	bgt.w	800dd06 <pppos_input+0x2a>
 800e06e:	e002      	b.n	800e076 <pppos_input+0x39a>
    return;
 800e070:	bf00      	nop
 800e072:	e000      	b.n	800e076 <pppos_input+0x39a>
            break;
 800e074:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 800e076:	3730      	adds	r7, #48	; 0x30
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	080121bc 	.word	0x080121bc

0800e080 <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d016      	beq.n	800e0be <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00a      	beq.n	800e0ae <pppos_input_free_current_packet+0x2e>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d004      	beq.n	800e0ae <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f4 ffcb 	bl	8003044 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7f4 ffc6 	bl	8003044 <pbuf_free>
    pppos->in_head = NULL;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	655a      	str	r2, [r3, #84]	; 0x54
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff ffd3 	bl	800e080 <pppos_input_free_current_packet>
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 800e0da:	bf00      	nop
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800e116:	bf00      	nop
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d03f      	beq.n	800e1b4 <upap_authwithpeer+0x92>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d03c      	beq.n	800e1b4 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 800e140:	68b8      	ldr	r0, [r7, #8]
 800e142:	f7f2 f845 	bl	80001d0 <strlen>
 800e146:	4603      	mov	r3, r0
 800e148:	2bfe      	cmp	r3, #254	; 0xfe
 800e14a:	d805      	bhi.n	800e158 <upap_authwithpeer+0x36>
 800e14c:	68b8      	ldr	r0, [r7, #8]
 800e14e:	f7f2 f83f 	bl	80001d0 <strlen>
 800e152:	4603      	mov	r3, r0
 800e154:	b2da      	uxtb	r2, r3
 800e156:	e000      	b.n	800e15a <upap_authwithpeer+0x38>
 800e158:	22ff      	movs	r2, #255	; 0xff
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7f2 f832 	bl	80001d0 <strlen>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2bfe      	cmp	r3, #254	; 0xfe
 800e170:	d805      	bhi.n	800e17e <upap_authwithpeer+0x5c>
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7f2 f82c 	bl	80001d0 <strlen>
 800e178:	4603      	mov	r3, r0
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	e000      	b.n	800e180 <upap_authwithpeer+0x5e>
 800e17e:	22ff      	movs	r2, #255	; 0xff
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e194:	2b00      	cmp	r3, #0
 800e196:	d004      	beq.n	800e1a2 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d104      	bne.n	800e1ac <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 800e1aa:	e004      	b.n	800e1b6 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f92b 	bl	800e408 <upap_sauthreq>
 800e1b2:	e000      	b.n	800e1b6 <upap_authwithpeer+0x94>
        return;
 800e1b4:	bf00      	nop
}
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d114      	bne.n	800e1fc <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	7b5b      	ldrb	r3, [r3, #13]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d309      	bcc.n	800e1f4 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2205      	movs	r2, #5
 800e1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 800e1e8:	f24c 0123 	movw	r1, #49187	; 0xc023
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f7fb f877 	bl	80092e0 <auth_withpeer_fail>
	return;
 800e1f2:	e004      	b.n	800e1fe <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 f907 	bl	800e408 <upap_sauthreq>
 800e1fa:	e000      	b.n	800e1fe <upap_timeout+0x42>
	return;
 800e1fc:	bf00      	nop
}
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e212:	2b00      	cmp	r3, #0
 800e214:	d104      	bne.n	800e220 <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 800e21e:	e007      	b.n	800e230 <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e226:	2b02      	cmp	r3, #2
 800e228:	d102      	bne.n	800e230 <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f8ec 	bl	800e408 <upap_sauthreq>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e246:	2b03      	cmp	r3, #3
 800e248:	d103      	bne.n	800e252 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	4805      	ldr	r0, [pc, #20]	; (800e264 <upap_lowerdown+0x2c>)
 800e24e:	f7fa fef7 	bl	8009040 <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2200      	movs	r2, #0
 800e256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	0800e1bd 	.word	0x0800e1bd

0800e268 <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e276:	2b03      	cmp	r3, #3
 800e278:	d104      	bne.n	800e284 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 800e27a:	f24c 0123 	movw	r1, #49187	; 0xc023
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7fb f82e 	bl	80092e0 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff ffd7 	bl	800e238 <upap_lowerdown>
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 800e292:	b580      	push	{r7, lr}
 800e294:	b088      	sub	sp, #32
 800e296:	af00      	add	r7, sp, #0
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	60b9      	str	r1, [r7, #8]
 800e29c:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	dd37      	ble.n	800e318 <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	61fa      	str	r2, [r7, #28]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	1c5a      	adds	r2, r3, #1
 800e2b6:	61fa      	str	r2, [r7, #28]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	61fa      	str	r2, [r7, #28]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	021b      	lsls	r3, r3, #8
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	61fa      	str	r2, [r7, #28]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	dd1e      	ble.n	800e31c <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	dc1c      	bgt.n	800e320 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	3b04      	subs	r3, #4
 800e2ea:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 800e2ec:	7efb      	ldrb	r3, [r7, #27]
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d004      	beq.n	800e2fc <upap_input+0x6a>
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d009      	beq.n	800e30a <upap_input+0x78>
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d014      	beq.n	800e324 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 800e2fa:	e014      	b.n	800e326 <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 800e2fc:	7eba      	ldrb	r2, [r7, #26]
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	69f9      	ldr	r1, [r7, #28]
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f000 f812 	bl	800e32c <upap_rauthack>
	break;
 800e308:	e00d      	b.n	800e326 <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 800e30a:	7eba      	ldrb	r2, [r7, #26]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	69f9      	ldr	r1, [r7, #28]
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f000 f843 	bl	800e39c <upap_rauthnak>
	break;
 800e316:	e006      	b.n	800e326 <upap_input+0x94>
	return;
 800e318:	bf00      	nop
 800e31a:	e004      	b.n	800e326 <upap_input+0x94>
	return;
 800e31c:	bf00      	nop
 800e31e:	e002      	b.n	800e326 <upap_input+0x94>
	return;
 800e320:	bf00      	nop
 800e322:	e000      	b.n	800e326 <upap_input+0x94>
	break;
 800e324:	bf00      	nop
    }
}
 800e326:	3720      	adds	r7, #32
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e340:	2b03      	cmp	r3, #3
 800e342:	d122      	bne.n	800e38a <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	dd10      	ble.n	800e36c <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	60ba      	str	r2, [r7, #8]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800e354:	7dfb      	ldrb	r3, [r7, #23]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d008      	beq.n	800e36c <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800e360:	7dfa      	ldrb	r2, [r7, #23]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	429a      	cmp	r2, r3
 800e366:	dc12      	bgt.n	800e38e <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800e36c:	68f9      	ldr	r1, [r7, #12]
 800e36e:	480a      	ldr	r0, [pc, #40]	; (800e398 <upap_rauthack+0x6c>)
 800e370:	f7fa fe66 	bl	8009040 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2204      	movs	r2, #4
 800e378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 800e37c:	2200      	movs	r2, #0
 800e37e:	f24c 0123 	movw	r1, #49187	; 0xc023
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7fa ffc0 	bl	8009308 <auth_withpeer_success>
 800e388:	e002      	b.n	800e390 <upap_rauthack+0x64>
	return;
 800e38a:	bf00      	nop
 800e38c:	e000      	b.n	800e390 <upap_rauthack+0x64>
		return;
 800e38e:	bf00      	nop
}
 800e390:	3718      	adds	r7, #24
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	0800e1bd 	.word	0x0800e1bd

0800e39c <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d121      	bne.n	800e3f8 <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	dd10      	ble.n	800e3dc <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	1c5a      	adds	r2, r3, #1
 800e3be:	60ba      	str	r2, [r7, #8]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d008      	beq.n	800e3dc <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 800e3d0:	7dfa      	ldrb	r2, [r7, #23]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	dc11      	bgt.n	800e3fc <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	4809      	ldr	r0, [pc, #36]	; (800e404 <upap_rauthnak+0x68>)
 800e3e0:	f7fa fe2e 	bl	8009040 <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 800e3ec:	f24c 0123 	movw	r1, #49187	; 0xc023
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7fa ff75 	bl	80092e0 <auth_withpeer_fail>
 800e3f6:	e002      	b.n	800e3fe <upap_rauthnak+0x62>
	return;
 800e3f8:	bf00      	nop
 800e3fa:	e000      	b.n	800e3fe <upap_rauthnak+0x62>
		return;
 800e3fc:	bf00      	nop
}
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	0800e1bd 	.word	0x0800e1bd

0800e408 <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e416:	461a      	mov	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e41e:	4413      	add	r3, r2
 800e420:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 800e422:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	b29b      	uxth	r3, r3
 800e428:	3304      	adds	r3, #4
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e430:	4619      	mov	r1, r3
 800e432:	2000      	movs	r0, #0
 800e434:	f7f4 fb68 	bl	8002b08 <pbuf_alloc>
 800e438:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 808a 	beq.w	800e556 <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	891a      	ldrh	r2, [r3, #8]
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	895b      	ldrh	r3, [r3, #10]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d003      	beq.n	800e456 <upap_sauthreq+0x4e>
        pbuf_free(p);
 800e44e:	6938      	ldr	r0, [r7, #16]
 800e450:	f7f4 fdf8 	bl	8003044 <pbuf_free>
        return;
 800e454:	e080      	b.n	800e558 <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	60fa      	str	r2, [r7, #12]
 800e462:	22ff      	movs	r2, #255	; 0xff
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	60fa      	str	r2, [r7, #12]
 800e46c:	2203      	movs	r2, #3
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	1c5a      	adds	r2, r3, #1
 800e474:	60fa      	str	r2, [r7, #12]
 800e476:	22c0      	movs	r2, #192	; 0xc0
 800e478:	701a      	strb	r2, [r3, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	60fa      	str	r2, [r7, #12]
 800e480:	2223      	movs	r2, #35	; 0x23
 800e482:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	60fa      	str	r2, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	60fa      	str	r2, [r7, #12]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800e49a:	3201      	adds	r2, #1
 800e49c:	b2d1      	uxtb	r1, r2
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800e4aa:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	60fa      	str	r2, [r7, #12]
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	1212      	asrs	r2, r2, #8
 800e4b6:	b2d2      	uxtb	r2, r2
 800e4b8:	701a      	strb	r2, [r3, #0]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	1c5a      	adds	r2, r3, #1
 800e4be:	60fa      	str	r2, [r7, #12]
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	b2d2      	uxtb	r2, r2
 800e4c4:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	60fa      	str	r2, [r7, #12]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800e4d2:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4de:	461a      	mov	r2, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 fd4f 	bl	800ef84 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	60fa      	str	r2, [r7, #12]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800e500:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e50c:	461a      	mov	r2, r3
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f000 fd38 	bl	800ef84 <memcpy>

    ppp_write(pcb, p);
 800e514:	6939      	ldr	r1, [r7, #16]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff faf0 	bl	800dafc <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 800e51c:	6879      	ldr	r1, [r7, #4]
 800e51e:	4810      	ldr	r0, [pc, #64]	; (800e560 <upap_sauthreq+0x158>)
 800e520:	f7fa fd8e 	bl	8009040 <sys_untimeout>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7b1b      	ldrb	r3, [r3, #12]
 800e528:	461a      	mov	r2, r3
 800e52a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e52e:	fb03 f302 	mul.w	r3, r3, r2
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	490a      	ldr	r1, [pc, #40]	; (800e560 <upap_sauthreq+0x158>)
 800e536:	4618      	mov	r0, r3
 800e538:	f7fa fd56 	bl	8008fe8 <sys_timeout>
    ++pcb->upap.us_transmits;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e542:	3301      	adds	r3, #1
 800e544:	b2da      	uxtb	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2203      	movs	r2, #3
 800e550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e554:	e000      	b.n	800e558 <upap_sauthreq+0x150>
        return;
 800e556:	bf00      	nop
}
 800e558:	3718      	adds	r7, #24
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	0800e1bd 	.word	0x0800e1bd

0800e564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e59c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e56a:	e003      	b.n	800e574 <LoopCopyDataInit>

0800e56c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e56c:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e56e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e572:	3104      	adds	r1, #4

0800e574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e574:	480b      	ldr	r0, [pc, #44]	; (800e5a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e576:	4b0c      	ldr	r3, [pc, #48]	; (800e5a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e57a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e57c:	d3f6      	bcc.n	800e56c <CopyDataInit>
  ldr  r2, =_sbss
 800e57e:	4a0b      	ldr	r2, [pc, #44]	; (800e5ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e580:	e002      	b.n	800e588 <LoopFillZerobss>

0800e582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e584:	f842 3b04 	str.w	r3, [r2], #4

0800e588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e588:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e58a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e58c:	d3f9      	bcc.n	800e582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e58e:	f000 f8d5 	bl	800e73c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e592:	f000 fcd3 	bl	800ef3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e596:	f7f2 fd37 	bl	8001008 <main>
  bx  lr    
 800e59a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800e59c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800e5a0:	0801247c 	.word	0x0801247c
  ldr  r0, =_sdata
 800e5a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e5a8:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 800e5ac:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 800e5b0:	200010d0 	.word	0x200010d0

0800e5b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e5b4:	e7fe      	b.n	800e5b4 <ADC_IRQHandler>

0800e5b6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800e5b6:	b480      	push	{r7}
 800e5b8:	af00      	add	r7, sp, #0
}
 800e5ba:	bf00      	nop
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800e5c8:	e7fe      	b.n	800e5c8 <HardFault_Handler+0x4>

0800e5ca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800e5ce:	e7fe      	b.n	800e5ce <MemManage_Handler+0x4>

0800e5d0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800e5d4:	e7fe      	b.n	800e5d4 <BusFault_Handler+0x4>

0800e5d6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800e5da:	e7fe      	b.n	800e5da <UsageFault_Handler+0x4>

0800e5dc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
}
 800e5e0:	bf00      	nop
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	af00      	add	r7, sp, #0
}
 800e5ee:	bf00      	nop
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	af00      	add	r7, sp, #0
}
 800e5fc:	bf00      	nop
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800e606:	b480      	push	{r7}
 800e608:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800e60a:	bf00      	nop
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 800e618:	4b04      	ldr	r3, [pc, #16]	; (800e62c <_getpid+0x18>)
 800e61a:	2226      	movs	r2, #38	; 0x26
 800e61c:	601a      	str	r2, [r3, #0]
	return -1;
 800e61e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e622:	4618      	mov	r0, r3
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	200010cc 	.word	0x200010cc

0800e630 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800e63a:	4b05      	ldr	r3, [pc, #20]	; (800e650 <_kill+0x20>)
 800e63c:	2226      	movs	r2, #38	; 0x26
 800e63e:	601a      	str	r2, [r3, #0]
	return -1;
 800e640:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e644:	4618      	mov	r0, r3
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	200010cc 	.word	0x200010cc

0800e654 <_exit>:

void _exit(int32_t status)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 800e65c:	e7fe      	b.n	800e65c <_exit+0x8>
	...

0800e660 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 800e66c:	4b05      	ldr	r3, [pc, #20]	; (800e684 <_write+0x24>)
 800e66e:	2226      	movs	r2, #38	; 0x26
 800e670:	601a      	str	r2, [r3, #0]
	return -1;
 800e672:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	200010cc 	.word	0x200010cc

0800e688 <_sbrk>:

void * _sbrk(int32_t incr)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800e690:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <_sbrk+0x38>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d102      	bne.n	800e69e <_sbrk+0x16>
		heap_end = & end;
 800e698:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <_sbrk+0x38>)
 800e69a:	4a0a      	ldr	r2, [pc, #40]	; (800e6c4 <_sbrk+0x3c>)
 800e69c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800e69e:	4b08      	ldr	r3, [pc, #32]	; (800e6c0 <_sbrk+0x38>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <_sbrk+0x38>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	4a04      	ldr	r2, [pc, #16]	; (800e6c0 <_sbrk+0x38>)
 800e6ae:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3714      	adds	r7, #20
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	200005b8 	.word	0x200005b8
 800e6c4:	200010d0 	.word	0x200010d0

0800e6c8 <_close>:

int _close(int32_t file)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800e6d0:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <_close+0x20>)
 800e6d2:	2226      	movs	r2, #38	; 0x26
 800e6d4:	601a      	str	r2, [r3, #0]
	return -1;
 800e6d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	200010cc 	.word	0x200010cc

0800e6ec <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800e6f8:	4b05      	ldr	r3, [pc, #20]	; (800e710 <_lseek+0x24>)
 800e6fa:	2226      	movs	r2, #38	; 0x26
 800e6fc:	601a      	str	r2, [r3, #0]
	return -1;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e702:	4618      	mov	r0, r3
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	200010cc 	.word	0x200010cc

0800e714 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800e720:	4b05      	ldr	r3, [pc, #20]	; (800e738 <_read+0x24>)
 800e722:	2226      	movs	r2, #38	; 0x26
 800e724:	601a      	str	r2, [r3, #0]
	return -1;
 800e726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	200010cc 	.word	0x200010cc

0800e73c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e740:	4a16      	ldr	r2, [pc, #88]	; (800e79c <SystemInit+0x60>)
 800e742:	4b16      	ldr	r3, [pc, #88]	; (800e79c <SystemInit+0x60>)
 800e744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e74c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e750:	4a13      	ldr	r2, [pc, #76]	; (800e7a0 <SystemInit+0x64>)
 800e752:	4b13      	ldr	r3, [pc, #76]	; (800e7a0 <SystemInit+0x64>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f043 0301 	orr.w	r3, r3, #1
 800e75a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e75c:	4b10      	ldr	r3, [pc, #64]	; (800e7a0 <SystemInit+0x64>)
 800e75e:	2200      	movs	r2, #0
 800e760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e762:	4a0f      	ldr	r2, [pc, #60]	; (800e7a0 <SystemInit+0x64>)
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <SystemInit+0x64>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e770:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e772:	4b0b      	ldr	r3, [pc, #44]	; (800e7a0 <SystemInit+0x64>)
 800e774:	4a0b      	ldr	r2, [pc, #44]	; (800e7a4 <SystemInit+0x68>)
 800e776:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e778:	4a09      	ldr	r2, [pc, #36]	; (800e7a0 <SystemInit+0x64>)
 800e77a:	4b09      	ldr	r3, [pc, #36]	; (800e7a0 <SystemInit+0x64>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e782:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e784:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <SystemInit+0x64>)
 800e786:	2200      	movs	r2, #0
 800e788:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800e78a:	f000 f80d 	bl	800e7a8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e78e:	4b03      	ldr	r3, [pc, #12]	; (800e79c <SystemInit+0x60>)
 800e790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e794:	609a      	str	r2, [r3, #8]
#endif
}
 800e796:	bf00      	nop
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	e000ed00 	.word	0xe000ed00
 800e7a0:	40023800 	.word	0x40023800
 800e7a4:	24003010 	.word	0x24003010

0800e7a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	607b      	str	r3, [r7, #4]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800e7b6:	4b33      	ldr	r3, [pc, #204]	; (800e884 <SetSysClock+0xdc>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7be:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d103      	bne.n	800e7d4 <SetSysClock+0x2c>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e7d2:	d1f0      	bne.n	800e7b6 <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800e7d4:	4b2b      	ldr	r3, [pc, #172]	; (800e884 <SetSysClock+0xdc>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	603b      	str	r3, [r7, #0]
 800e7e4:	e001      	b.n	800e7ea <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d142      	bne.n	800e876 <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800e7f0:	4a24      	ldr	r2, [pc, #144]	; (800e884 <SetSysClock+0xdc>)
 800e7f2:	4b24      	ldr	r3, [pc, #144]	; (800e884 <SetSysClock+0xdc>)
 800e7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7fa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800e7fc:	4a22      	ldr	r2, [pc, #136]	; (800e888 <SetSysClock+0xe0>)
 800e7fe:	4b22      	ldr	r3, [pc, #136]	; (800e888 <SetSysClock+0xe0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e806:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800e808:	4a1e      	ldr	r2, [pc, #120]	; (800e884 <SetSysClock+0xdc>)
 800e80a:	4b1e      	ldr	r3, [pc, #120]	; (800e884 <SetSysClock+0xdc>)
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800e810:	4a1c      	ldr	r2, [pc, #112]	; (800e884 <SetSysClock+0xdc>)
 800e812:	4b1c      	ldr	r3, [pc, #112]	; (800e884 <SetSysClock+0xdc>)
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e81a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800e81c:	4a19      	ldr	r2, [pc, #100]	; (800e884 <SetSysClock+0xdc>)
 800e81e:	4b19      	ldr	r3, [pc, #100]	; (800e884 <SetSysClock+0xdc>)
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800e826:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800e828:	4b16      	ldr	r3, [pc, #88]	; (800e884 <SetSysClock+0xdc>)
 800e82a:	4a18      	ldr	r2, [pc, #96]	; (800e88c <SetSysClock+0xe4>)
 800e82c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800e82e:	4a15      	ldr	r2, [pc, #84]	; (800e884 <SetSysClock+0xdc>)
 800e830:	4b14      	ldr	r3, [pc, #80]	; (800e884 <SetSysClock+0xdc>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e838:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800e83a:	bf00      	nop
 800e83c:	4b11      	ldr	r3, [pc, #68]	; (800e884 <SetSysClock+0xdc>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d0f9      	beq.n	800e83c <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800e848:	4b11      	ldr	r3, [pc, #68]	; (800e890 <SetSysClock+0xe8>)
 800e84a:	f240 7205 	movw	r2, #1797	; 0x705
 800e84e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800e850:	4a0c      	ldr	r2, [pc, #48]	; (800e884 <SetSysClock+0xdc>)
 800e852:	4b0c      	ldr	r3, [pc, #48]	; (800e884 <SetSysClock+0xdc>)
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f023 0303 	bic.w	r3, r3, #3
 800e85a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800e85c:	4a09      	ldr	r2, [pc, #36]	; (800e884 <SetSysClock+0xdc>)
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <SetSysClock+0xdc>)
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	f043 0302 	orr.w	r3, r3, #2
 800e866:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800e868:	bf00      	nop
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <SetSysClock+0xdc>)
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f003 030c 	and.w	r3, r3, #12
 800e872:	2b08      	cmp	r3, #8
 800e874:	d1f9      	bne.n	800e86a <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800e876:	bf00      	nop
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	40023800 	.word	0x40023800
 800e888:	40007000 	.word	0x40007000
 800e88c:	07405419 	.word	0x07405419
 800e890:	40023c00 	.word	0x40023c00

0800e894 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800e894:	b480      	push	{r7}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
	int div = 1;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800e8a4:	e004      	b.n	800e8b0 <ts_itoa+0x1c>
		div *= base;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	fb02 f303 	mul.w	r3, r2, r3
 800e8ae:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d2f3      	bcs.n	800e8a6 <ts_itoa+0x12>

	while (div != 0)
 800e8be:	e029      	b.n	800e914 <ts_itoa+0x80>
	{
		int num = d/div;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	613b      	str	r3, [r7, #16]
		d = d%div;
 800e8ca:	697a      	ldr	r2, [r7, #20]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8d2:	fb02 f201 	mul.w	r2, r2, r1
 800e8d6:	1a9b      	subs	r3, r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]
		div /= base;
 800e8da:	697a      	ldr	r2, [r7, #20]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	fb92 f3f3 	sdiv	r3, r2, r3
 800e8e2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	2b09      	cmp	r3, #9
 800e8e8:	dd0a      	ble.n	800e900 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	1c59      	adds	r1, r3, #1
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	6011      	str	r1, [r2, #0]
 800e8f4:	693a      	ldr	r2, [r7, #16]
 800e8f6:	b2d2      	uxtb	r2, r2
 800e8f8:	3237      	adds	r2, #55	; 0x37
 800e8fa:	b2d2      	uxtb	r2, r2
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	e009      	b.n	800e914 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	1c59      	adds	r1, r3, #1
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	6011      	str	r1, [r2, #0]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	b2d2      	uxtb	r2, r2
 800e90e:	3230      	adds	r2, #48	; 0x30
 800e910:	b2d2      	uxtb	r2, r2
 800e912:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1d2      	bne.n	800e8c0 <ts_itoa+0x2c>
	}
}
 800e91a:	bf00      	nop
 800e91c:	371c      	adds	r7, #28
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b088      	sub	sp, #32
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800e936:	e07d      	b.n	800ea34 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b25      	cmp	r3, #37	; 0x25
 800e93e:	d171      	bne.n	800ea24 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	3301      	adds	r3, #1
 800e944:	60bb      	str	r3, [r7, #8]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b64      	cmp	r3, #100	; 0x64
 800e94c:	d01e      	beq.n	800e98c <ts_formatstring+0x66>
 800e94e:	2b64      	cmp	r3, #100	; 0x64
 800e950:	dc06      	bgt.n	800e960 <ts_formatstring+0x3a>
 800e952:	2b58      	cmp	r3, #88	; 0x58
 800e954:	d050      	beq.n	800e9f8 <ts_formatstring+0xd2>
 800e956:	2b63      	cmp	r3, #99	; 0x63
 800e958:	d00e      	beq.n	800e978 <ts_formatstring+0x52>
 800e95a:	2b25      	cmp	r3, #37	; 0x25
 800e95c:	d058      	beq.n	800ea10 <ts_formatstring+0xea>
 800e95e:	e05d      	b.n	800ea1c <ts_formatstring+0xf6>
 800e960:	2b73      	cmp	r3, #115	; 0x73
 800e962:	d02b      	beq.n	800e9bc <ts_formatstring+0x96>
 800e964:	2b73      	cmp	r3, #115	; 0x73
 800e966:	dc02      	bgt.n	800e96e <ts_formatstring+0x48>
 800e968:	2b69      	cmp	r3, #105	; 0x69
 800e96a:	d00f      	beq.n	800e98c <ts_formatstring+0x66>
 800e96c:	e056      	b.n	800ea1c <ts_formatstring+0xf6>
 800e96e:	2b75      	cmp	r3, #117	; 0x75
 800e970:	d037      	beq.n	800e9e2 <ts_formatstring+0xbc>
 800e972:	2b78      	cmp	r3, #120	; 0x78
 800e974:	d040      	beq.n	800e9f8 <ts_formatstring+0xd2>
 800e976:	e051      	b.n	800ea1c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	60fa      	str	r2, [r7, #12]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	1d11      	adds	r1, r2, #4
 800e982:	6079      	str	r1, [r7, #4]
 800e984:	6812      	ldr	r2, [r2, #0]
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]
				break;
 800e98a:	e047      	b.n	800ea1c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	1d1a      	adds	r2, r3, #4
 800e990:	607a      	str	r2, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	da07      	bge.n	800e9ac <ts_formatstring+0x86>
					{
						val *= -1;
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	425b      	negs	r3, r3
 800e9a0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	60fa      	str	r2, [r7, #12]
 800e9a8:	222d      	movs	r2, #45	; 0x2d
 800e9aa:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800e9ac:	69f9      	ldr	r1, [r7, #28]
 800e9ae:	f107 030c 	add.w	r3, r7, #12
 800e9b2:	220a      	movs	r2, #10
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff ff6d 	bl	800e894 <ts_itoa>
				}
				break;
 800e9ba:	e02f      	b.n	800ea1c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	1d1a      	adds	r2, r3, #4
 800e9c0:	607a      	str	r2, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800e9c6:	e007      	b.n	800e9d8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	60fa      	str	r2, [r7, #12]
 800e9ce:	69ba      	ldr	r2, [r7, #24]
 800e9d0:	1c51      	adds	r1, r2, #1
 800e9d2:	61b9      	str	r1, [r7, #24]
 800e9d4:	7812      	ldrb	r2, [r2, #0]
 800e9d6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1f3      	bne.n	800e9c8 <ts_formatstring+0xa2>
					}
				}
				break;
 800e9e0:	e01c      	b.n	800ea1c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	1d1a      	adds	r2, r3, #4
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	6819      	ldr	r1, [r3, #0]
 800e9ea:	f107 030c 	add.w	r3, r7, #12
 800e9ee:	220a      	movs	r2, #10
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff ff4f 	bl	800e894 <ts_itoa>
				break;
 800e9f6:	e011      	b.n	800ea1c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	1d1a      	adds	r2, r3, #4
 800e9fc:	607a      	str	r2, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4619      	mov	r1, r3
 800ea02:	f107 030c 	add.w	r3, r7, #12
 800ea06:	2210      	movs	r2, #16
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff ff43 	bl	800e894 <ts_itoa>
				break;
 800ea0e:	e005      	b.n	800ea1c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	1c5a      	adds	r2, r3, #1
 800ea14:	60fa      	str	r2, [r7, #12]
 800ea16:	2225      	movs	r2, #37	; 0x25
 800ea18:	701a      	strb	r2, [r3, #0]
				  break;
 800ea1a:	bf00      	nop
			}
			fmt++;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60bb      	str	r3, [r7, #8]
 800ea22:	e007      	b.n	800ea34 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	60fa      	str	r2, [r7, #12]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	1c51      	adds	r1, r2, #1
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	7812      	ldrb	r2, [r2, #0]
 800ea32:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f47f af7d 	bne.w	800e938 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2200      	movs	r2, #0
 800ea42:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	461a      	mov	r2, r3
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	1ad3      	subs	r3, r2, r3
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3720      	adds	r7, #32
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800ea62:	e081      	b.n	800eb68 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b25      	cmp	r3, #37	; 0x25
 800ea6a:	d177      	bne.n	800eb5c <ts_formatlength+0x108>
		{
			++fmt;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	3b58      	subs	r3, #88	; 0x58
 800ea78:	2b20      	cmp	r3, #32
 800ea7a:	d86a      	bhi.n	800eb52 <ts_formatlength+0xfe>
 800ea7c:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <ts_formatlength+0x30>)
 800ea7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea82:	bf00      	nop
 800ea84:	0800eb45 	.word	0x0800eb45
 800ea88:	0800eb53 	.word	0x0800eb53
 800ea8c:	0800eb53 	.word	0x0800eb53
 800ea90:	0800eb53 	.word	0x0800eb53
 800ea94:	0800eb53 	.word	0x0800eb53
 800ea98:	0800eb53 	.word	0x0800eb53
 800ea9c:	0800eb53 	.word	0x0800eb53
 800eaa0:	0800eb53 	.word	0x0800eb53
 800eaa4:	0800eb53 	.word	0x0800eb53
 800eaa8:	0800eb53 	.word	0x0800eb53
 800eaac:	0800eb53 	.word	0x0800eb53
 800eab0:	0800eb09 	.word	0x0800eb09
 800eab4:	0800eb17 	.word	0x0800eb17
 800eab8:	0800eb53 	.word	0x0800eb53
 800eabc:	0800eb53 	.word	0x0800eb53
 800eac0:	0800eb53 	.word	0x0800eb53
 800eac4:	0800eb53 	.word	0x0800eb53
 800eac8:	0800eb17 	.word	0x0800eb17
 800eacc:	0800eb53 	.word	0x0800eb53
 800ead0:	0800eb53 	.word	0x0800eb53
 800ead4:	0800eb53 	.word	0x0800eb53
 800ead8:	0800eb53 	.word	0x0800eb53
 800eadc:	0800eb53 	.word	0x0800eb53
 800eae0:	0800eb53 	.word	0x0800eb53
 800eae4:	0800eb53 	.word	0x0800eb53
 800eae8:	0800eb53 	.word	0x0800eb53
 800eaec:	0800eb53 	.word	0x0800eb53
 800eaf0:	0800eb25 	.word	0x0800eb25
 800eaf4:	0800eb53 	.word	0x0800eb53
 800eaf8:	0800eb17 	.word	0x0800eb17
 800eafc:	0800eb53 	.word	0x0800eb53
 800eb00:	0800eb53 	.word	0x0800eb53
 800eb04:	0800eb45 	.word	0x0800eb45
			{
			  case 'c':
		  		  va_arg(va, int);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	603b      	str	r3, [r7, #0]
				  ++length;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3301      	adds	r3, #1
 800eb12:	60fb      	str	r3, [r7, #12]
				  break;
 800eb14:	e025      	b.n	800eb62 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	330b      	adds	r3, #11
 800eb1a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	603b      	str	r3, [r7, #0]
				  break;
 800eb22:	e01e      	b.n	800eb62 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	1d1a      	adds	r2, r3, #4
 800eb28:	603a      	str	r2, [r7, #0]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800eb2e:	e002      	b.n	800eb36 <ts_formatlength+0xe2>
			  			  ++length;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	3301      	adds	r3, #1
 800eb34:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	60ba      	str	r2, [r7, #8]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1f6      	bne.n	800eb30 <ts_formatlength+0xdc>
			  	  }
				  break;
 800eb42:	e00e      	b.n	800eb62 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	3308      	adds	r3, #8
 800eb48:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	603b      	str	r3, [r7, #0]
				  break;
 800eb50:	e007      	b.n	800eb62 <ts_formatlength+0x10e>
			  default:
				  ++length;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3301      	adds	r3, #1
 800eb56:	60fb      	str	r3, [r7, #12]
				  break;
 800eb58:	bf00      	nop
 800eb5a:	e002      	b.n	800eb62 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3301      	adds	r3, #1
 800eb66:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f47f af79 	bne.w	800ea64 <ts_formatlength+0x10>
	}
	return length;
 800eb72:	68fb      	ldr	r3, [r7, #12]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800eb80:	b40f      	push	{r0, r1, r2, r3}
 800eb82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
	int length = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800eb8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb92:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800eb94:	6839      	ldr	r1, [r7, #0]
 800eb96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb98:	f7ff ff5c 	bl	800ea54 <ts_formatlength>
 800eb9c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800eb9e:	466b      	mov	r3, sp
 800eba0:	461e      	mov	r6, r3
		char buf[length];
 800eba2:	68f9      	ldr	r1, [r7, #12]
 800eba4:	1e4b      	subs	r3, r1, #1
 800eba6:	60bb      	str	r3, [r7, #8]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	461a      	mov	r2, r3
 800ebac:	f04f 0300 	mov.w	r3, #0
 800ebb0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800ebb4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800ebb8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	f04f 0300 	mov.w	r3, #0
 800ebc4:	00dd      	lsls	r5, r3, #3
 800ebc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ebca:	00d4      	lsls	r4, r2, #3
 800ebcc:	460b      	mov	r3, r1
 800ebce:	3307      	adds	r3, #7
 800ebd0:	08db      	lsrs	r3, r3, #3
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	ebad 0d03 	sub.w	sp, sp, r3
 800ebd8:	466b      	mov	r3, sp
 800ebda:	3300      	adds	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800ebde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebe2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	683a      	ldr	r2, [r7, #0]
 800ebe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff fe9b 	bl	800e926 <ts_formatstring>
 800ebf0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f7ff fd31 	bl	800e660 <_write>
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800ec02:	68fb      	ldr	r3, [r7, #12]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec0e:	b004      	add	sp, #16
 800ec10:	4770      	bx	lr

0800ec12 <abort>:
 800ec12:	b508      	push	{r3, lr}
 800ec14:	2006      	movs	r0, #6
 800ec16:	f000 fac7 	bl	800f1a8 <raise>
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	f7ff fd1a 	bl	800e654 <_exit>

0800ec20 <__sflush_r>:
 800ec20:	898a      	ldrh	r2, [r1, #12]
 800ec22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec26:	4605      	mov	r5, r0
 800ec28:	0710      	lsls	r0, r2, #28
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	d45a      	bmi.n	800ece4 <__sflush_r+0xc4>
 800ec2e:	684b      	ldr	r3, [r1, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	dc05      	bgt.n	800ec40 <__sflush_r+0x20>
 800ec34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	dc02      	bgt.n	800ec40 <__sflush_r+0x20>
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d0f9      	beq.n	800ec3a <__sflush_r+0x1a>
 800ec46:	2300      	movs	r3, #0
 800ec48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec4c:	682f      	ldr	r7, [r5, #0]
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	d033      	beq.n	800ecba <__sflush_r+0x9a>
 800ec52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec54:	89a3      	ldrh	r3, [r4, #12]
 800ec56:	075a      	lsls	r2, r3, #29
 800ec58:	d505      	bpl.n	800ec66 <__sflush_r+0x46>
 800ec5a:	6863      	ldr	r3, [r4, #4]
 800ec5c:	1ac0      	subs	r0, r0, r3
 800ec5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec60:	b10b      	cbz	r3, 800ec66 <__sflush_r+0x46>
 800ec62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec64:	1ac0      	subs	r0, r0, r3
 800ec66:	2300      	movs	r3, #0
 800ec68:	4602      	mov	r2, r0
 800ec6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec6c:	6a21      	ldr	r1, [r4, #32]
 800ec6e:	4628      	mov	r0, r5
 800ec70:	47b0      	blx	r6
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	d106      	bne.n	800ec86 <__sflush_r+0x66>
 800ec78:	6829      	ldr	r1, [r5, #0]
 800ec7a:	291d      	cmp	r1, #29
 800ec7c:	d84b      	bhi.n	800ed16 <__sflush_r+0xf6>
 800ec7e:	4a2b      	ldr	r2, [pc, #172]	; (800ed2c <__sflush_r+0x10c>)
 800ec80:	40ca      	lsrs	r2, r1
 800ec82:	07d6      	lsls	r6, r2, #31
 800ec84:	d547      	bpl.n	800ed16 <__sflush_r+0xf6>
 800ec86:	2200      	movs	r2, #0
 800ec88:	6062      	str	r2, [r4, #4]
 800ec8a:	04d9      	lsls	r1, r3, #19
 800ec8c:	6922      	ldr	r2, [r4, #16]
 800ec8e:	6022      	str	r2, [r4, #0]
 800ec90:	d504      	bpl.n	800ec9c <__sflush_r+0x7c>
 800ec92:	1c42      	adds	r2, r0, #1
 800ec94:	d101      	bne.n	800ec9a <__sflush_r+0x7a>
 800ec96:	682b      	ldr	r3, [r5, #0]
 800ec98:	b903      	cbnz	r3, 800ec9c <__sflush_r+0x7c>
 800ec9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ec9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec9e:	602f      	str	r7, [r5, #0]
 800eca0:	2900      	cmp	r1, #0
 800eca2:	d0ca      	beq.n	800ec3a <__sflush_r+0x1a>
 800eca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eca8:	4299      	cmp	r1, r3
 800ecaa:	d002      	beq.n	800ecb2 <__sflush_r+0x92>
 800ecac:	4628      	mov	r0, r5
 800ecae:	f000 f997 	bl	800efe0 <_free_r>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ecb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecba:	6a21      	ldr	r1, [r4, #32]
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	47b0      	blx	r6
 800ecc2:	1c41      	adds	r1, r0, #1
 800ecc4:	d1c6      	bne.n	800ec54 <__sflush_r+0x34>
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0c3      	beq.n	800ec54 <__sflush_r+0x34>
 800eccc:	2b1d      	cmp	r3, #29
 800ecce:	d001      	beq.n	800ecd4 <__sflush_r+0xb4>
 800ecd0:	2b16      	cmp	r3, #22
 800ecd2:	d101      	bne.n	800ecd8 <__sflush_r+0xb8>
 800ecd4:	602f      	str	r7, [r5, #0]
 800ecd6:	e7b0      	b.n	800ec3a <__sflush_r+0x1a>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecde:	81a3      	strh	r3, [r4, #12]
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece4:	690f      	ldr	r7, [r1, #16]
 800ece6:	2f00      	cmp	r7, #0
 800ece8:	d0a7      	beq.n	800ec3a <__sflush_r+0x1a>
 800ecea:	0793      	lsls	r3, r2, #30
 800ecec:	680e      	ldr	r6, [r1, #0]
 800ecee:	bf08      	it	eq
 800ecf0:	694b      	ldreq	r3, [r1, #20]
 800ecf2:	600f      	str	r7, [r1, #0]
 800ecf4:	bf18      	it	ne
 800ecf6:	2300      	movne	r3, #0
 800ecf8:	eba6 0807 	sub.w	r8, r6, r7
 800ecfc:	608b      	str	r3, [r1, #8]
 800ecfe:	f1b8 0f00 	cmp.w	r8, #0
 800ed02:	dd9a      	ble.n	800ec3a <__sflush_r+0x1a>
 800ed04:	4643      	mov	r3, r8
 800ed06:	463a      	mov	r2, r7
 800ed08:	6a21      	ldr	r1, [r4, #32]
 800ed0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	47b0      	blx	r6
 800ed10:	2800      	cmp	r0, #0
 800ed12:	dc07      	bgt.n	800ed24 <__sflush_r+0x104>
 800ed14:	89a3      	ldrh	r3, [r4, #12]
 800ed16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed1a:	81a3      	strh	r3, [r4, #12]
 800ed1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	4407      	add	r7, r0
 800ed26:	eba8 0800 	sub.w	r8, r8, r0
 800ed2a:	e7e8      	b.n	800ecfe <__sflush_r+0xde>
 800ed2c:	20400001 	.word	0x20400001

0800ed30 <_fflush_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	690b      	ldr	r3, [r1, #16]
 800ed34:	4605      	mov	r5, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	b1db      	cbz	r3, 800ed72 <_fflush_r+0x42>
 800ed3a:	b118      	cbz	r0, 800ed44 <_fflush_r+0x14>
 800ed3c:	6983      	ldr	r3, [r0, #24]
 800ed3e:	b90b      	cbnz	r3, 800ed44 <_fflush_r+0x14>
 800ed40:	f000 f872 	bl	800ee28 <__sinit>
 800ed44:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <_fflush_r+0x48>)
 800ed46:	429c      	cmp	r4, r3
 800ed48:	d109      	bne.n	800ed5e <_fflush_r+0x2e>
 800ed4a:	686c      	ldr	r4, [r5, #4]
 800ed4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed50:	b17b      	cbz	r3, 800ed72 <_fflush_r+0x42>
 800ed52:	4621      	mov	r1, r4
 800ed54:	4628      	mov	r0, r5
 800ed56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed5a:	f7ff bf61 	b.w	800ec20 <__sflush_r>
 800ed5e:	4b07      	ldr	r3, [pc, #28]	; (800ed7c <_fflush_r+0x4c>)
 800ed60:	429c      	cmp	r4, r3
 800ed62:	d101      	bne.n	800ed68 <_fflush_r+0x38>
 800ed64:	68ac      	ldr	r4, [r5, #8]
 800ed66:	e7f1      	b.n	800ed4c <_fflush_r+0x1c>
 800ed68:	4b05      	ldr	r3, [pc, #20]	; (800ed80 <_fflush_r+0x50>)
 800ed6a:	429c      	cmp	r4, r3
 800ed6c:	bf08      	it	eq
 800ed6e:	68ec      	ldreq	r4, [r5, #12]
 800ed70:	e7ec      	b.n	800ed4c <_fflush_r+0x1c>
 800ed72:	2000      	movs	r0, #0
 800ed74:	bd38      	pop	{r3, r4, r5, pc}
 800ed76:	bf00      	nop
 800ed78:	080123fc 	.word	0x080123fc
 800ed7c:	0801241c 	.word	0x0801241c
 800ed80:	080123dc 	.word	0x080123dc

0800ed84 <fflush>:
 800ed84:	4601      	mov	r1, r0
 800ed86:	b920      	cbnz	r0, 800ed92 <fflush+0xe>
 800ed88:	4b04      	ldr	r3, [pc, #16]	; (800ed9c <fflush+0x18>)
 800ed8a:	4905      	ldr	r1, [pc, #20]	; (800eda0 <fflush+0x1c>)
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f000 b8b7 	b.w	800ef00 <_fwalk_reent>
 800ed92:	4b04      	ldr	r3, [pc, #16]	; (800eda4 <fflush+0x20>)
 800ed94:	6818      	ldr	r0, [r3, #0]
 800ed96:	f7ff bfcb 	b.w	800ed30 <_fflush_r>
 800ed9a:	bf00      	nop
 800ed9c:	0801243c 	.word	0x0801243c
 800eda0:	0800ed31 	.word	0x0800ed31
 800eda4:	20000008 	.word	0x20000008

0800eda8 <_cleanup_r>:
 800eda8:	4901      	ldr	r1, [pc, #4]	; (800edb0 <_cleanup_r+0x8>)
 800edaa:	f000 b8a9 	b.w	800ef00 <_fwalk_reent>
 800edae:	bf00      	nop
 800edb0:	0800ed31 	.word	0x0800ed31

0800edb4 <std.isra.0>:
 800edb4:	2300      	movs	r3, #0
 800edb6:	b510      	push	{r4, lr}
 800edb8:	4604      	mov	r4, r0
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	6043      	str	r3, [r0, #4]
 800edbe:	6083      	str	r3, [r0, #8]
 800edc0:	8181      	strh	r1, [r0, #12]
 800edc2:	6643      	str	r3, [r0, #100]	; 0x64
 800edc4:	81c2      	strh	r2, [r0, #14]
 800edc6:	6103      	str	r3, [r0, #16]
 800edc8:	6143      	str	r3, [r0, #20]
 800edca:	6183      	str	r3, [r0, #24]
 800edcc:	4619      	mov	r1, r3
 800edce:	2208      	movs	r2, #8
 800edd0:	305c      	adds	r0, #92	; 0x5c
 800edd2:	f000 f8fc 	bl	800efce <memset>
 800edd6:	4b05      	ldr	r3, [pc, #20]	; (800edec <std.isra.0+0x38>)
 800edd8:	6263      	str	r3, [r4, #36]	; 0x24
 800edda:	4b05      	ldr	r3, [pc, #20]	; (800edf0 <std.isra.0+0x3c>)
 800eddc:	62a3      	str	r3, [r4, #40]	; 0x28
 800edde:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <std.isra.0+0x40>)
 800ede0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ede2:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <std.isra.0+0x44>)
 800ede4:	6224      	str	r4, [r4, #32]
 800ede6:	6323      	str	r3, [r4, #48]	; 0x30
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	bf00      	nop
 800edec:	0800f249 	.word	0x0800f249
 800edf0:	0800f26b 	.word	0x0800f26b
 800edf4:	0800f2a3 	.word	0x0800f2a3
 800edf8:	0800f2c7 	.word	0x0800f2c7

0800edfc <__sfmoreglue>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	1e4a      	subs	r2, r1, #1
 800ee00:	2568      	movs	r5, #104	; 0x68
 800ee02:	4355      	muls	r5, r2
 800ee04:	460e      	mov	r6, r1
 800ee06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee0a:	f000 f937 	bl	800f07c <_malloc_r>
 800ee0e:	4604      	mov	r4, r0
 800ee10:	b140      	cbz	r0, 800ee24 <__sfmoreglue+0x28>
 800ee12:	2100      	movs	r1, #0
 800ee14:	e880 0042 	stmia.w	r0, {r1, r6}
 800ee18:	300c      	adds	r0, #12
 800ee1a:	60a0      	str	r0, [r4, #8]
 800ee1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee20:	f000 f8d5 	bl	800efce <memset>
 800ee24:	4620      	mov	r0, r4
 800ee26:	bd70      	pop	{r4, r5, r6, pc}

0800ee28 <__sinit>:
 800ee28:	6983      	ldr	r3, [r0, #24]
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	bb33      	cbnz	r3, 800ee7e <__sinit+0x56>
 800ee30:	6483      	str	r3, [r0, #72]	; 0x48
 800ee32:	64c3      	str	r3, [r0, #76]	; 0x4c
 800ee34:	6503      	str	r3, [r0, #80]	; 0x50
 800ee36:	4b12      	ldr	r3, [pc, #72]	; (800ee80 <__sinit+0x58>)
 800ee38:	4a12      	ldr	r2, [pc, #72]	; (800ee84 <__sinit+0x5c>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6282      	str	r2, [r0, #40]	; 0x28
 800ee3e:	4298      	cmp	r0, r3
 800ee40:	bf04      	itt	eq
 800ee42:	2301      	moveq	r3, #1
 800ee44:	6183      	streq	r3, [r0, #24]
 800ee46:	f000 f81f 	bl	800ee88 <__sfp>
 800ee4a:	6060      	str	r0, [r4, #4]
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 f81b 	bl	800ee88 <__sfp>
 800ee52:	60a0      	str	r0, [r4, #8]
 800ee54:	4620      	mov	r0, r4
 800ee56:	f000 f817 	bl	800ee88 <__sfp>
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	60e0      	str	r0, [r4, #12]
 800ee5e:	2104      	movs	r1, #4
 800ee60:	6860      	ldr	r0, [r4, #4]
 800ee62:	f7ff ffa7 	bl	800edb4 <std.isra.0>
 800ee66:	2201      	movs	r2, #1
 800ee68:	2109      	movs	r1, #9
 800ee6a:	68a0      	ldr	r0, [r4, #8]
 800ee6c:	f7ff ffa2 	bl	800edb4 <std.isra.0>
 800ee70:	2202      	movs	r2, #2
 800ee72:	2112      	movs	r1, #18
 800ee74:	68e0      	ldr	r0, [r4, #12]
 800ee76:	f7ff ff9d 	bl	800edb4 <std.isra.0>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	61a3      	str	r3, [r4, #24]
 800ee7e:	bd10      	pop	{r4, pc}
 800ee80:	0801243c 	.word	0x0801243c
 800ee84:	0800eda9 	.word	0x0800eda9

0800ee88 <__sfp>:
 800ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8a:	4b1c      	ldr	r3, [pc, #112]	; (800eefc <__sfp+0x74>)
 800ee8c:	681e      	ldr	r6, [r3, #0]
 800ee8e:	69b3      	ldr	r3, [r6, #24]
 800ee90:	4607      	mov	r7, r0
 800ee92:	b913      	cbnz	r3, 800ee9a <__sfp+0x12>
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7ff ffc7 	bl	800ee28 <__sinit>
 800ee9a:	3648      	adds	r6, #72	; 0x48
 800ee9c:	68b4      	ldr	r4, [r6, #8]
 800ee9e:	6873      	ldr	r3, [r6, #4]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	d503      	bpl.n	800eeac <__sfp+0x24>
 800eea4:	6833      	ldr	r3, [r6, #0]
 800eea6:	b133      	cbz	r3, 800eeb6 <__sfp+0x2e>
 800eea8:	6836      	ldr	r6, [r6, #0]
 800eeaa:	e7f7      	b.n	800ee9c <__sfp+0x14>
 800eeac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eeb0:	b16d      	cbz	r5, 800eece <__sfp+0x46>
 800eeb2:	3468      	adds	r4, #104	; 0x68
 800eeb4:	e7f4      	b.n	800eea0 <__sfp+0x18>
 800eeb6:	2104      	movs	r1, #4
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7ff ff9f 	bl	800edfc <__sfmoreglue>
 800eebe:	6030      	str	r0, [r6, #0]
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d1f1      	bne.n	800eea8 <__sfp+0x20>
 800eec4:	230c      	movs	r3, #12
 800eec6:	603b      	str	r3, [r7, #0]
 800eec8:	4604      	mov	r4, r0
 800eeca:	4620      	mov	r0, r4
 800eecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eed2:	81e3      	strh	r3, [r4, #14]
 800eed4:	2301      	movs	r3, #1
 800eed6:	81a3      	strh	r3, [r4, #12]
 800eed8:	6665      	str	r5, [r4, #100]	; 0x64
 800eeda:	6025      	str	r5, [r4, #0]
 800eedc:	60a5      	str	r5, [r4, #8]
 800eede:	6065      	str	r5, [r4, #4]
 800eee0:	6125      	str	r5, [r4, #16]
 800eee2:	6165      	str	r5, [r4, #20]
 800eee4:	61a5      	str	r5, [r4, #24]
 800eee6:	2208      	movs	r2, #8
 800eee8:	4629      	mov	r1, r5
 800eeea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eeee:	f000 f86e 	bl	800efce <memset>
 800eef2:	6365      	str	r5, [r4, #52]	; 0x34
 800eef4:	63a5      	str	r5, [r4, #56]	; 0x38
 800eef6:	64a5      	str	r5, [r4, #72]	; 0x48
 800eef8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800eefa:	e7e6      	b.n	800eeca <__sfp+0x42>
 800eefc:	0801243c 	.word	0x0801243c

0800ef00 <_fwalk_reent>:
 800ef00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef04:	4680      	mov	r8, r0
 800ef06:	4689      	mov	r9, r1
 800ef08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef0c:	2600      	movs	r6, #0
 800ef0e:	b914      	cbnz	r4, 800ef16 <_fwalk_reent+0x16>
 800ef10:	4630      	mov	r0, r6
 800ef12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef16:	68a5      	ldr	r5, [r4, #8]
 800ef18:	6867      	ldr	r7, [r4, #4]
 800ef1a:	3f01      	subs	r7, #1
 800ef1c:	d501      	bpl.n	800ef22 <_fwalk_reent+0x22>
 800ef1e:	6824      	ldr	r4, [r4, #0]
 800ef20:	e7f5      	b.n	800ef0e <_fwalk_reent+0xe>
 800ef22:	89ab      	ldrh	r3, [r5, #12]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d907      	bls.n	800ef38 <_fwalk_reent+0x38>
 800ef28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	d003      	beq.n	800ef38 <_fwalk_reent+0x38>
 800ef30:	4629      	mov	r1, r5
 800ef32:	4640      	mov	r0, r8
 800ef34:	47c8      	blx	r9
 800ef36:	4306      	orrs	r6, r0
 800ef38:	3568      	adds	r5, #104	; 0x68
 800ef3a:	e7ee      	b.n	800ef1a <_fwalk_reent+0x1a>

0800ef3c <__libc_init_array>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	4e0d      	ldr	r6, [pc, #52]	; (800ef74 <__libc_init_array+0x38>)
 800ef40:	4c0d      	ldr	r4, [pc, #52]	; (800ef78 <__libc_init_array+0x3c>)
 800ef42:	1ba4      	subs	r4, r4, r6
 800ef44:	10a4      	asrs	r4, r4, #2
 800ef46:	2500      	movs	r5, #0
 800ef48:	42a5      	cmp	r5, r4
 800ef4a:	d109      	bne.n	800ef60 <__libc_init_array+0x24>
 800ef4c:	4e0b      	ldr	r6, [pc, #44]	; (800ef7c <__libc_init_array+0x40>)
 800ef4e:	4c0c      	ldr	r4, [pc, #48]	; (800ef80 <__libc_init_array+0x44>)
 800ef50:	f000 fd4c 	bl	800f9ec <_init>
 800ef54:	1ba4      	subs	r4, r4, r6
 800ef56:	10a4      	asrs	r4, r4, #2
 800ef58:	2500      	movs	r5, #0
 800ef5a:	42a5      	cmp	r5, r4
 800ef5c:	d105      	bne.n	800ef6a <__libc_init_array+0x2e>
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}
 800ef60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef64:	4798      	blx	r3
 800ef66:	3501      	adds	r5, #1
 800ef68:	e7ee      	b.n	800ef48 <__libc_init_array+0xc>
 800ef6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef6e:	4798      	blx	r3
 800ef70:	3501      	adds	r5, #1
 800ef72:	e7f2      	b.n	800ef5a <__libc_init_array+0x1e>
 800ef74:	08012474 	.word	0x08012474
 800ef78:	08012474 	.word	0x08012474
 800ef7c:	08012474 	.word	0x08012474
 800ef80:	08012478 	.word	0x08012478

0800ef84 <memcpy>:
 800ef84:	b510      	push	{r4, lr}
 800ef86:	1e43      	subs	r3, r0, #1
 800ef88:	440a      	add	r2, r1
 800ef8a:	4291      	cmp	r1, r2
 800ef8c:	d100      	bne.n	800ef90 <memcpy+0xc>
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef98:	e7f7      	b.n	800ef8a <memcpy+0x6>

0800ef9a <memmove>:
 800ef9a:	4288      	cmp	r0, r1
 800ef9c:	b510      	push	{r4, lr}
 800ef9e:	eb01 0302 	add.w	r3, r1, r2
 800efa2:	d803      	bhi.n	800efac <memmove+0x12>
 800efa4:	1e42      	subs	r2, r0, #1
 800efa6:	4299      	cmp	r1, r3
 800efa8:	d10c      	bne.n	800efc4 <memmove+0x2a>
 800efaa:	bd10      	pop	{r4, pc}
 800efac:	4298      	cmp	r0, r3
 800efae:	d2f9      	bcs.n	800efa4 <memmove+0xa>
 800efb0:	1881      	adds	r1, r0, r2
 800efb2:	1ad2      	subs	r2, r2, r3
 800efb4:	42d3      	cmn	r3, r2
 800efb6:	d100      	bne.n	800efba <memmove+0x20>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x1a>
 800efc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800efcc:	e7eb      	b.n	800efa6 <memmove+0xc>

0800efce <memset>:
 800efce:	4402      	add	r2, r0
 800efd0:	4603      	mov	r3, r0
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d100      	bne.n	800efd8 <memset+0xa>
 800efd6:	4770      	bx	lr
 800efd8:	f803 1b01 	strb.w	r1, [r3], #1
 800efdc:	e7f9      	b.n	800efd2 <memset+0x4>
	...

0800efe0 <_free_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4605      	mov	r5, r0
 800efe4:	2900      	cmp	r1, #0
 800efe6:	d045      	beq.n	800f074 <_free_r+0x94>
 800efe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efec:	1f0c      	subs	r4, r1, #4
 800efee:	2b00      	cmp	r3, #0
 800eff0:	bfb8      	it	lt
 800eff2:	18e4      	addlt	r4, r4, r3
 800eff4:	f000 f9d0 	bl	800f398 <__malloc_lock>
 800eff8:	4a1f      	ldr	r2, [pc, #124]	; (800f078 <_free_r+0x98>)
 800effa:	6813      	ldr	r3, [r2, #0]
 800effc:	4610      	mov	r0, r2
 800effe:	b933      	cbnz	r3, 800f00e <_free_r+0x2e>
 800f000:	6063      	str	r3, [r4, #4]
 800f002:	6014      	str	r4, [r2, #0]
 800f004:	4628      	mov	r0, r5
 800f006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f00a:	f000 b9c6 	b.w	800f39a <__malloc_unlock>
 800f00e:	42a3      	cmp	r3, r4
 800f010:	d90c      	bls.n	800f02c <_free_r+0x4c>
 800f012:	6821      	ldr	r1, [r4, #0]
 800f014:	1862      	adds	r2, r4, r1
 800f016:	4293      	cmp	r3, r2
 800f018:	bf04      	itt	eq
 800f01a:	681a      	ldreq	r2, [r3, #0]
 800f01c:	685b      	ldreq	r3, [r3, #4]
 800f01e:	6063      	str	r3, [r4, #4]
 800f020:	bf04      	itt	eq
 800f022:	1852      	addeq	r2, r2, r1
 800f024:	6022      	streq	r2, [r4, #0]
 800f026:	6004      	str	r4, [r0, #0]
 800f028:	e7ec      	b.n	800f004 <_free_r+0x24>
 800f02a:	4613      	mov	r3, r2
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	b10a      	cbz	r2, 800f034 <_free_r+0x54>
 800f030:	42a2      	cmp	r2, r4
 800f032:	d9fa      	bls.n	800f02a <_free_r+0x4a>
 800f034:	6819      	ldr	r1, [r3, #0]
 800f036:	1858      	adds	r0, r3, r1
 800f038:	42a0      	cmp	r0, r4
 800f03a:	d10b      	bne.n	800f054 <_free_r+0x74>
 800f03c:	6820      	ldr	r0, [r4, #0]
 800f03e:	4401      	add	r1, r0
 800f040:	1858      	adds	r0, r3, r1
 800f042:	4282      	cmp	r2, r0
 800f044:	6019      	str	r1, [r3, #0]
 800f046:	d1dd      	bne.n	800f004 <_free_r+0x24>
 800f048:	6810      	ldr	r0, [r2, #0]
 800f04a:	6852      	ldr	r2, [r2, #4]
 800f04c:	605a      	str	r2, [r3, #4]
 800f04e:	4401      	add	r1, r0
 800f050:	6019      	str	r1, [r3, #0]
 800f052:	e7d7      	b.n	800f004 <_free_r+0x24>
 800f054:	d902      	bls.n	800f05c <_free_r+0x7c>
 800f056:	230c      	movs	r3, #12
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	e7d3      	b.n	800f004 <_free_r+0x24>
 800f05c:	6820      	ldr	r0, [r4, #0]
 800f05e:	1821      	adds	r1, r4, r0
 800f060:	428a      	cmp	r2, r1
 800f062:	bf04      	itt	eq
 800f064:	6811      	ldreq	r1, [r2, #0]
 800f066:	6852      	ldreq	r2, [r2, #4]
 800f068:	6062      	str	r2, [r4, #4]
 800f06a:	bf04      	itt	eq
 800f06c:	1809      	addeq	r1, r1, r0
 800f06e:	6021      	streq	r1, [r4, #0]
 800f070:	605c      	str	r4, [r3, #4]
 800f072:	e7c7      	b.n	800f004 <_free_r+0x24>
 800f074:	bd38      	pop	{r3, r4, r5, pc}
 800f076:	bf00      	nop
 800f078:	200005bc 	.word	0x200005bc

0800f07c <_malloc_r>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	1ccd      	adds	r5, r1, #3
 800f080:	f025 0503 	bic.w	r5, r5, #3
 800f084:	3508      	adds	r5, #8
 800f086:	2d0c      	cmp	r5, #12
 800f088:	bf38      	it	cc
 800f08a:	250c      	movcc	r5, #12
 800f08c:	2d00      	cmp	r5, #0
 800f08e:	4606      	mov	r6, r0
 800f090:	db01      	blt.n	800f096 <_malloc_r+0x1a>
 800f092:	42a9      	cmp	r1, r5
 800f094:	d903      	bls.n	800f09e <_malloc_r+0x22>
 800f096:	230c      	movs	r3, #12
 800f098:	6033      	str	r3, [r6, #0]
 800f09a:	2000      	movs	r0, #0
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	f000 f97b 	bl	800f398 <__malloc_lock>
 800f0a2:	4a23      	ldr	r2, [pc, #140]	; (800f130 <_malloc_r+0xb4>)
 800f0a4:	6814      	ldr	r4, [r2, #0]
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	b991      	cbnz	r1, 800f0d0 <_malloc_r+0x54>
 800f0aa:	4c22      	ldr	r4, [pc, #136]	; (800f134 <_malloc_r+0xb8>)
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	b91b      	cbnz	r3, 800f0b8 <_malloc_r+0x3c>
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f000 f841 	bl	800f138 <_sbrk_r>
 800f0b6:	6020      	str	r0, [r4, #0]
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f000 f83c 	bl	800f138 <_sbrk_r>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d126      	bne.n	800f112 <_malloc_r+0x96>
 800f0c4:	230c      	movs	r3, #12
 800f0c6:	6033      	str	r3, [r6, #0]
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f000 f966 	bl	800f39a <__malloc_unlock>
 800f0ce:	e7e4      	b.n	800f09a <_malloc_r+0x1e>
 800f0d0:	680b      	ldr	r3, [r1, #0]
 800f0d2:	1b5b      	subs	r3, r3, r5
 800f0d4:	d41a      	bmi.n	800f10c <_malloc_r+0x90>
 800f0d6:	2b0b      	cmp	r3, #11
 800f0d8:	d90f      	bls.n	800f0fa <_malloc_r+0x7e>
 800f0da:	600b      	str	r3, [r1, #0]
 800f0dc:	50cd      	str	r5, [r1, r3]
 800f0de:	18cc      	adds	r4, r1, r3
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f000 f95a 	bl	800f39a <__malloc_unlock>
 800f0e6:	f104 000b 	add.w	r0, r4, #11
 800f0ea:	1d23      	adds	r3, r4, #4
 800f0ec:	f020 0007 	bic.w	r0, r0, #7
 800f0f0:	1ac3      	subs	r3, r0, r3
 800f0f2:	d01b      	beq.n	800f12c <_malloc_r+0xb0>
 800f0f4:	425a      	negs	r2, r3
 800f0f6:	50e2      	str	r2, [r4, r3]
 800f0f8:	bd70      	pop	{r4, r5, r6, pc}
 800f0fa:	428c      	cmp	r4, r1
 800f0fc:	bf0d      	iteet	eq
 800f0fe:	6863      	ldreq	r3, [r4, #4]
 800f100:	684b      	ldrne	r3, [r1, #4]
 800f102:	6063      	strne	r3, [r4, #4]
 800f104:	6013      	streq	r3, [r2, #0]
 800f106:	bf18      	it	ne
 800f108:	460c      	movne	r4, r1
 800f10a:	e7e9      	b.n	800f0e0 <_malloc_r+0x64>
 800f10c:	460c      	mov	r4, r1
 800f10e:	6849      	ldr	r1, [r1, #4]
 800f110:	e7ca      	b.n	800f0a8 <_malloc_r+0x2c>
 800f112:	1cc4      	adds	r4, r0, #3
 800f114:	f024 0403 	bic.w	r4, r4, #3
 800f118:	42a0      	cmp	r0, r4
 800f11a:	d005      	beq.n	800f128 <_malloc_r+0xac>
 800f11c:	1a21      	subs	r1, r4, r0
 800f11e:	4630      	mov	r0, r6
 800f120:	f000 f80a 	bl	800f138 <_sbrk_r>
 800f124:	3001      	adds	r0, #1
 800f126:	d0cd      	beq.n	800f0c4 <_malloc_r+0x48>
 800f128:	6025      	str	r5, [r4, #0]
 800f12a:	e7d9      	b.n	800f0e0 <_malloc_r+0x64>
 800f12c:	bd70      	pop	{r4, r5, r6, pc}
 800f12e:	bf00      	nop
 800f130:	200005bc 	.word	0x200005bc
 800f134:	200005c0 	.word	0x200005c0

0800f138 <_sbrk_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4c06      	ldr	r4, [pc, #24]	; (800f154 <_sbrk_r+0x1c>)
 800f13c:	2300      	movs	r3, #0
 800f13e:	4605      	mov	r5, r0
 800f140:	4608      	mov	r0, r1
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	f7ff faa0 	bl	800e688 <_sbrk>
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	d102      	bne.n	800f152 <_sbrk_r+0x1a>
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	b103      	cbz	r3, 800f152 <_sbrk_r+0x1a>
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	bd38      	pop	{r3, r4, r5, pc}
 800f154:	200010cc 	.word	0x200010cc

0800f158 <_raise_r>:
 800f158:	291f      	cmp	r1, #31
 800f15a:	b538      	push	{r3, r4, r5, lr}
 800f15c:	4604      	mov	r4, r0
 800f15e:	460d      	mov	r5, r1
 800f160:	d904      	bls.n	800f16c <_raise_r+0x14>
 800f162:	2316      	movs	r3, #22
 800f164:	6003      	str	r3, [r0, #0]
 800f166:	f04f 30ff 	mov.w	r0, #4294967295
 800f16a:	bd38      	pop	{r3, r4, r5, pc}
 800f16c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f16e:	b112      	cbz	r2, 800f176 <_raise_r+0x1e>
 800f170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f174:	b94b      	cbnz	r3, 800f18a <_raise_r+0x32>
 800f176:	4620      	mov	r0, r4
 800f178:	f000 f830 	bl	800f1dc <_getpid_r>
 800f17c:	462a      	mov	r2, r5
 800f17e:	4601      	mov	r1, r0
 800f180:	4620      	mov	r0, r4
 800f182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f186:	f000 b817 	b.w	800f1b8 <_kill_r>
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d00a      	beq.n	800f1a4 <_raise_r+0x4c>
 800f18e:	1c59      	adds	r1, r3, #1
 800f190:	d103      	bne.n	800f19a <_raise_r+0x42>
 800f192:	2316      	movs	r3, #22
 800f194:	6003      	str	r3, [r0, #0]
 800f196:	2001      	movs	r0, #1
 800f198:	bd38      	pop	{r3, r4, r5, pc}
 800f19a:	2400      	movs	r4, #0
 800f19c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	4798      	blx	r3
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}

0800f1a8 <raise>:
 800f1a8:	4b02      	ldr	r3, [pc, #8]	; (800f1b4 <raise+0xc>)
 800f1aa:	4601      	mov	r1, r0
 800f1ac:	6818      	ldr	r0, [r3, #0]
 800f1ae:	f7ff bfd3 	b.w	800f158 <_raise_r>
 800f1b2:	bf00      	nop
 800f1b4:	20000008 	.word	0x20000008

0800f1b8 <_kill_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4c07      	ldr	r4, [pc, #28]	; (800f1d8 <_kill_r+0x20>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4605      	mov	r5, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	f7ff fa33 	bl	800e630 <_kill>
 800f1ca:	1c43      	adds	r3, r0, #1
 800f1cc:	d102      	bne.n	800f1d4 <_kill_r+0x1c>
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	b103      	cbz	r3, 800f1d4 <_kill_r+0x1c>
 800f1d2:	602b      	str	r3, [r5, #0]
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
 800f1d6:	bf00      	nop
 800f1d8:	200010cc 	.word	0x200010cc

0800f1dc <_getpid_r>:
 800f1dc:	f7ff ba1a 	b.w	800e614 <_getpid>

0800f1e0 <sniprintf>:
 800f1e0:	b40c      	push	{r2, r3}
 800f1e2:	b530      	push	{r4, r5, lr}
 800f1e4:	4b17      	ldr	r3, [pc, #92]	; (800f244 <sniprintf+0x64>)
 800f1e6:	1e0c      	subs	r4, r1, #0
 800f1e8:	b09d      	sub	sp, #116	; 0x74
 800f1ea:	681d      	ldr	r5, [r3, #0]
 800f1ec:	da08      	bge.n	800f200 <sniprintf+0x20>
 800f1ee:	238b      	movs	r3, #139	; 0x8b
 800f1f0:	602b      	str	r3, [r5, #0]
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f6:	b01d      	add	sp, #116	; 0x74
 800f1f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1fc:	b002      	add	sp, #8
 800f1fe:	4770      	bx	lr
 800f200:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f204:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f208:	bf14      	ite	ne
 800f20a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f20e:	4623      	moveq	r3, r4
 800f210:	9304      	str	r3, [sp, #16]
 800f212:	9307      	str	r3, [sp, #28]
 800f214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f218:	9002      	str	r0, [sp, #8]
 800f21a:	9006      	str	r0, [sp, #24]
 800f21c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f220:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f222:	ab21      	add	r3, sp, #132	; 0x84
 800f224:	a902      	add	r1, sp, #8
 800f226:	4628      	mov	r0, r5
 800f228:	9301      	str	r3, [sp, #4]
 800f22a:	f000 f913 	bl	800f454 <_svfiprintf_r>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	bfbc      	itt	lt
 800f232:	238b      	movlt	r3, #139	; 0x8b
 800f234:	602b      	strlt	r3, [r5, #0]
 800f236:	2c00      	cmp	r4, #0
 800f238:	d0dd      	beq.n	800f1f6 <sniprintf+0x16>
 800f23a:	9b02      	ldr	r3, [sp, #8]
 800f23c:	2200      	movs	r2, #0
 800f23e:	701a      	strb	r2, [r3, #0]
 800f240:	e7d9      	b.n	800f1f6 <sniprintf+0x16>
 800f242:	bf00      	nop
 800f244:	20000008 	.word	0x20000008

0800f248 <__sread>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	460c      	mov	r4, r1
 800f24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f250:	f000 fb8a 	bl	800f968 <_read_r>
 800f254:	2800      	cmp	r0, #0
 800f256:	bfab      	itete	ge
 800f258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f25a:	89a3      	ldrhlt	r3, [r4, #12]
 800f25c:	181b      	addge	r3, r3, r0
 800f25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f262:	bfac      	ite	ge
 800f264:	6563      	strge	r3, [r4, #84]	; 0x54
 800f266:	81a3      	strhlt	r3, [r4, #12]
 800f268:	bd10      	pop	{r4, pc}

0800f26a <__swrite>:
 800f26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f26e:	461f      	mov	r7, r3
 800f270:	898b      	ldrh	r3, [r1, #12]
 800f272:	05db      	lsls	r3, r3, #23
 800f274:	4605      	mov	r5, r0
 800f276:	460c      	mov	r4, r1
 800f278:	4616      	mov	r6, r2
 800f27a:	d505      	bpl.n	800f288 <__swrite+0x1e>
 800f27c:	2302      	movs	r3, #2
 800f27e:	2200      	movs	r2, #0
 800f280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f284:	f000 f876 	bl	800f374 <_lseek_r>
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f28e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	4632      	mov	r2, r6
 800f296:	463b      	mov	r3, r7
 800f298:	4628      	mov	r0, r5
 800f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29e:	f000 b847 	b.w	800f330 <_write_r>

0800f2a2 <__sseek>:
 800f2a2:	b510      	push	{r4, lr}
 800f2a4:	460c      	mov	r4, r1
 800f2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2aa:	f000 f863 	bl	800f374 <_lseek_r>
 800f2ae:	1c43      	adds	r3, r0, #1
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	bf15      	itete	ne
 800f2b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2be:	81a3      	strheq	r3, [r4, #12]
 800f2c0:	bf18      	it	ne
 800f2c2:	81a3      	strhne	r3, [r4, #12]
 800f2c4:	bd10      	pop	{r4, pc}

0800f2c6 <__sclose>:
 800f2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ca:	f000 b843 	b.w	800f354 <_close_r>

0800f2ce <strncpy>:
 800f2ce:	b570      	push	{r4, r5, r6, lr}
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	b902      	cbnz	r2, 800f2d6 <strncpy+0x8>
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
 800f2d6:	4623      	mov	r3, r4
 800f2d8:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f2dc:	f803 5b01 	strb.w	r5, [r3], #1
 800f2e0:	1e56      	subs	r6, r2, #1
 800f2e2:	b91d      	cbnz	r5, 800f2ec <strncpy+0x1e>
 800f2e4:	4414      	add	r4, r2
 800f2e6:	42a3      	cmp	r3, r4
 800f2e8:	d103      	bne.n	800f2f2 <strncpy+0x24>
 800f2ea:	bd70      	pop	{r4, r5, r6, pc}
 800f2ec:	461c      	mov	r4, r3
 800f2ee:	4632      	mov	r2, r6
 800f2f0:	e7ef      	b.n	800f2d2 <strncpy+0x4>
 800f2f2:	f803 5b01 	strb.w	r5, [r3], #1
 800f2f6:	e7f6      	b.n	800f2e6 <strncpy+0x18>

0800f2f8 <strstr>:
 800f2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fa:	7803      	ldrb	r3, [r0, #0]
 800f2fc:	b133      	cbz	r3, 800f30c <strstr+0x14>
 800f2fe:	4603      	mov	r3, r0
 800f300:	4618      	mov	r0, r3
 800f302:	1c5e      	adds	r6, r3, #1
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	b933      	cbnz	r3, 800f316 <strstr+0x1e>
 800f308:	4618      	mov	r0, r3
 800f30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30c:	780b      	ldrb	r3, [r1, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bf18      	it	ne
 800f312:	2000      	movne	r0, #0
 800f314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f316:	1e4d      	subs	r5, r1, #1
 800f318:	1e44      	subs	r4, r0, #1
 800f31a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f31e:	2a00      	cmp	r2, #0
 800f320:	d0f3      	beq.n	800f30a <strstr+0x12>
 800f322:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800f326:	4297      	cmp	r7, r2
 800f328:	4633      	mov	r3, r6
 800f32a:	d0f6      	beq.n	800f31a <strstr+0x22>
 800f32c:	e7e8      	b.n	800f300 <strstr+0x8>
	...

0800f330 <_write_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4c07      	ldr	r4, [pc, #28]	; (800f350 <_write_r+0x20>)
 800f334:	4605      	mov	r5, r0
 800f336:	4608      	mov	r0, r1
 800f338:	4611      	mov	r1, r2
 800f33a:	2200      	movs	r2, #0
 800f33c:	6022      	str	r2, [r4, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	f7ff f98e 	bl	800e660 <_write>
 800f344:	1c43      	adds	r3, r0, #1
 800f346:	d102      	bne.n	800f34e <_write_r+0x1e>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	b103      	cbz	r3, 800f34e <_write_r+0x1e>
 800f34c:	602b      	str	r3, [r5, #0]
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	200010cc 	.word	0x200010cc

0800f354 <_close_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4c06      	ldr	r4, [pc, #24]	; (800f370 <_close_r+0x1c>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4605      	mov	r5, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	f7ff f9b2 	bl	800e6c8 <_close>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_close_r+0x1a>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_close_r+0x1a>
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	200010cc 	.word	0x200010cc

0800f374 <_lseek_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4c07      	ldr	r4, [pc, #28]	; (800f394 <_lseek_r+0x20>)
 800f378:	4605      	mov	r5, r0
 800f37a:	4608      	mov	r0, r1
 800f37c:	4611      	mov	r1, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	6022      	str	r2, [r4, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	f7ff f9b2 	bl	800e6ec <_lseek>
 800f388:	1c43      	adds	r3, r0, #1
 800f38a:	d102      	bne.n	800f392 <_lseek_r+0x1e>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	b103      	cbz	r3, 800f392 <_lseek_r+0x1e>
 800f390:	602b      	str	r3, [r5, #0]
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	200010cc 	.word	0x200010cc

0800f398 <__malloc_lock>:
 800f398:	4770      	bx	lr

0800f39a <__malloc_unlock>:
 800f39a:	4770      	bx	lr

0800f39c <__ssputs_r>:
 800f39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a0:	688e      	ldr	r6, [r1, #8]
 800f3a2:	429e      	cmp	r6, r3
 800f3a4:	4682      	mov	sl, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	4691      	mov	r9, r2
 800f3aa:	4698      	mov	r8, r3
 800f3ac:	d835      	bhi.n	800f41a <__ssputs_r+0x7e>
 800f3ae:	898a      	ldrh	r2, [r1, #12]
 800f3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3b4:	d031      	beq.n	800f41a <__ssputs_r+0x7e>
 800f3b6:	6825      	ldr	r5, [r4, #0]
 800f3b8:	6909      	ldr	r1, [r1, #16]
 800f3ba:	1a6f      	subs	r7, r5, r1
 800f3bc:	6965      	ldr	r5, [r4, #20]
 800f3be:	2302      	movs	r3, #2
 800f3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800f3c8:	f108 0301 	add.w	r3, r8, #1
 800f3cc:	443b      	add	r3, r7
 800f3ce:	429d      	cmp	r5, r3
 800f3d0:	bf38      	it	cc
 800f3d2:	461d      	movcc	r5, r3
 800f3d4:	0553      	lsls	r3, r2, #21
 800f3d6:	d531      	bpl.n	800f43c <__ssputs_r+0xa0>
 800f3d8:	4629      	mov	r1, r5
 800f3da:	f7ff fe4f 	bl	800f07c <_malloc_r>
 800f3de:	4606      	mov	r6, r0
 800f3e0:	b950      	cbnz	r0, 800f3f8 <__ssputs_r+0x5c>
 800f3e2:	230c      	movs	r3, #12
 800f3e4:	f8ca 3000 	str.w	r3, [sl]
 800f3e8:	89a3      	ldrh	r3, [r4, #12]
 800f3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3ee:	81a3      	strh	r3, [r4, #12]
 800f3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f8:	463a      	mov	r2, r7
 800f3fa:	6921      	ldr	r1, [r4, #16]
 800f3fc:	f7ff fdc2 	bl	800ef84 <memcpy>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f40a:	81a3      	strh	r3, [r4, #12]
 800f40c:	6126      	str	r6, [r4, #16]
 800f40e:	6165      	str	r5, [r4, #20]
 800f410:	443e      	add	r6, r7
 800f412:	1bed      	subs	r5, r5, r7
 800f414:	6026      	str	r6, [r4, #0]
 800f416:	60a5      	str	r5, [r4, #8]
 800f418:	4646      	mov	r6, r8
 800f41a:	4546      	cmp	r6, r8
 800f41c:	bf28      	it	cs
 800f41e:	4646      	movcs	r6, r8
 800f420:	4632      	mov	r2, r6
 800f422:	4649      	mov	r1, r9
 800f424:	6820      	ldr	r0, [r4, #0]
 800f426:	f7ff fdb8 	bl	800ef9a <memmove>
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	1b9b      	subs	r3, r3, r6
 800f42e:	60a3      	str	r3, [r4, #8]
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	441e      	add	r6, r3
 800f434:	6026      	str	r6, [r4, #0]
 800f436:	2000      	movs	r0, #0
 800f438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43c:	462a      	mov	r2, r5
 800f43e:	f000 faa5 	bl	800f98c <_realloc_r>
 800f442:	4606      	mov	r6, r0
 800f444:	2800      	cmp	r0, #0
 800f446:	d1e1      	bne.n	800f40c <__ssputs_r+0x70>
 800f448:	6921      	ldr	r1, [r4, #16]
 800f44a:	4650      	mov	r0, sl
 800f44c:	f7ff fdc8 	bl	800efe0 <_free_r>
 800f450:	e7c7      	b.n	800f3e2 <__ssputs_r+0x46>
	...

0800f454 <_svfiprintf_r>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	b09d      	sub	sp, #116	; 0x74
 800f45a:	4680      	mov	r8, r0
 800f45c:	9303      	str	r3, [sp, #12]
 800f45e:	898b      	ldrh	r3, [r1, #12]
 800f460:	061c      	lsls	r4, r3, #24
 800f462:	460d      	mov	r5, r1
 800f464:	4616      	mov	r6, r2
 800f466:	d50f      	bpl.n	800f488 <_svfiprintf_r+0x34>
 800f468:	690b      	ldr	r3, [r1, #16]
 800f46a:	b96b      	cbnz	r3, 800f488 <_svfiprintf_r+0x34>
 800f46c:	2140      	movs	r1, #64	; 0x40
 800f46e:	f7ff fe05 	bl	800f07c <_malloc_r>
 800f472:	6028      	str	r0, [r5, #0]
 800f474:	6128      	str	r0, [r5, #16]
 800f476:	b928      	cbnz	r0, 800f484 <_svfiprintf_r+0x30>
 800f478:	230c      	movs	r3, #12
 800f47a:	f8c8 3000 	str.w	r3, [r8]
 800f47e:	f04f 30ff 	mov.w	r0, #4294967295
 800f482:	e0c5      	b.n	800f610 <_svfiprintf_r+0x1bc>
 800f484:	2340      	movs	r3, #64	; 0x40
 800f486:	616b      	str	r3, [r5, #20]
 800f488:	2300      	movs	r3, #0
 800f48a:	9309      	str	r3, [sp, #36]	; 0x24
 800f48c:	2320      	movs	r3, #32
 800f48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f492:	2330      	movs	r3, #48	; 0x30
 800f494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f498:	f04f 0b01 	mov.w	fp, #1
 800f49c:	4637      	mov	r7, r6
 800f49e:	463c      	mov	r4, r7
 800f4a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d13c      	bne.n	800f522 <_svfiprintf_r+0xce>
 800f4a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800f4ac:	d00b      	beq.n	800f4c6 <_svfiprintf_r+0x72>
 800f4ae:	4653      	mov	r3, sl
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	f7ff ff71 	bl	800f39c <__ssputs_r>
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	f000 80a3 	beq.w	800f606 <_svfiprintf_r+0x1b2>
 800f4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c2:	4453      	add	r3, sl
 800f4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c6:	783b      	ldrb	r3, [r7, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f000 809c 	beq.w	800f606 <_svfiprintf_r+0x1b2>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d4:	9304      	str	r3, [sp, #16]
 800f4d6:	9307      	str	r3, [sp, #28]
 800f4d8:	9205      	str	r2, [sp, #20]
 800f4da:	9306      	str	r3, [sp, #24]
 800f4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800f4e2:	2205      	movs	r2, #5
 800f4e4:	7821      	ldrb	r1, [r4, #0]
 800f4e6:	4850      	ldr	r0, [pc, #320]	; (800f628 <_svfiprintf_r+0x1d4>)
 800f4e8:	f7f0 fe7a 	bl	80001e0 <memchr>
 800f4ec:	1c67      	adds	r7, r4, #1
 800f4ee:	9b04      	ldr	r3, [sp, #16]
 800f4f0:	b9d8      	cbnz	r0, 800f52a <_svfiprintf_r+0xd6>
 800f4f2:	06d9      	lsls	r1, r3, #27
 800f4f4:	bf44      	itt	mi
 800f4f6:	2220      	movmi	r2, #32
 800f4f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4fc:	071a      	lsls	r2, r3, #28
 800f4fe:	bf44      	itt	mi
 800f500:	222b      	movmi	r2, #43	; 0x2b
 800f502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f506:	7822      	ldrb	r2, [r4, #0]
 800f508:	2a2a      	cmp	r2, #42	; 0x2a
 800f50a:	d016      	beq.n	800f53a <_svfiprintf_r+0xe6>
 800f50c:	9a07      	ldr	r2, [sp, #28]
 800f50e:	2100      	movs	r1, #0
 800f510:	200a      	movs	r0, #10
 800f512:	4627      	mov	r7, r4
 800f514:	3401      	adds	r4, #1
 800f516:	783b      	ldrb	r3, [r7, #0]
 800f518:	3b30      	subs	r3, #48	; 0x30
 800f51a:	2b09      	cmp	r3, #9
 800f51c:	d951      	bls.n	800f5c2 <_svfiprintf_r+0x16e>
 800f51e:	b1c9      	cbz	r1, 800f554 <_svfiprintf_r+0x100>
 800f520:	e011      	b.n	800f546 <_svfiprintf_r+0xf2>
 800f522:	2b25      	cmp	r3, #37	; 0x25
 800f524:	d0c0      	beq.n	800f4a8 <_svfiprintf_r+0x54>
 800f526:	4627      	mov	r7, r4
 800f528:	e7b9      	b.n	800f49e <_svfiprintf_r+0x4a>
 800f52a:	4a3f      	ldr	r2, [pc, #252]	; (800f628 <_svfiprintf_r+0x1d4>)
 800f52c:	1a80      	subs	r0, r0, r2
 800f52e:	fa0b f000 	lsl.w	r0, fp, r0
 800f532:	4318      	orrs	r0, r3
 800f534:	9004      	str	r0, [sp, #16]
 800f536:	463c      	mov	r4, r7
 800f538:	e7d3      	b.n	800f4e2 <_svfiprintf_r+0x8e>
 800f53a:	9a03      	ldr	r2, [sp, #12]
 800f53c:	1d11      	adds	r1, r2, #4
 800f53e:	6812      	ldr	r2, [r2, #0]
 800f540:	9103      	str	r1, [sp, #12]
 800f542:	2a00      	cmp	r2, #0
 800f544:	db01      	blt.n	800f54a <_svfiprintf_r+0xf6>
 800f546:	9207      	str	r2, [sp, #28]
 800f548:	e004      	b.n	800f554 <_svfiprintf_r+0x100>
 800f54a:	4252      	negs	r2, r2
 800f54c:	f043 0302 	orr.w	r3, r3, #2
 800f550:	9207      	str	r2, [sp, #28]
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	783b      	ldrb	r3, [r7, #0]
 800f556:	2b2e      	cmp	r3, #46	; 0x2e
 800f558:	d10e      	bne.n	800f578 <_svfiprintf_r+0x124>
 800f55a:	787b      	ldrb	r3, [r7, #1]
 800f55c:	2b2a      	cmp	r3, #42	; 0x2a
 800f55e:	f107 0101 	add.w	r1, r7, #1
 800f562:	d132      	bne.n	800f5ca <_svfiprintf_r+0x176>
 800f564:	9b03      	ldr	r3, [sp, #12]
 800f566:	1d1a      	adds	r2, r3, #4
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	9203      	str	r2, [sp, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	bfb8      	it	lt
 800f570:	f04f 33ff 	movlt.w	r3, #4294967295
 800f574:	3702      	adds	r7, #2
 800f576:	9305      	str	r3, [sp, #20]
 800f578:	4c2c      	ldr	r4, [pc, #176]	; (800f62c <_svfiprintf_r+0x1d8>)
 800f57a:	7839      	ldrb	r1, [r7, #0]
 800f57c:	2203      	movs	r2, #3
 800f57e:	4620      	mov	r0, r4
 800f580:	f7f0 fe2e 	bl	80001e0 <memchr>
 800f584:	b138      	cbz	r0, 800f596 <_svfiprintf_r+0x142>
 800f586:	2340      	movs	r3, #64	; 0x40
 800f588:	1b00      	subs	r0, r0, r4
 800f58a:	fa03 f000 	lsl.w	r0, r3, r0
 800f58e:	9b04      	ldr	r3, [sp, #16]
 800f590:	4303      	orrs	r3, r0
 800f592:	9304      	str	r3, [sp, #16]
 800f594:	3701      	adds	r7, #1
 800f596:	7839      	ldrb	r1, [r7, #0]
 800f598:	4825      	ldr	r0, [pc, #148]	; (800f630 <_svfiprintf_r+0x1dc>)
 800f59a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f59e:	2206      	movs	r2, #6
 800f5a0:	1c7e      	adds	r6, r7, #1
 800f5a2:	f7f0 fe1d 	bl	80001e0 <memchr>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d035      	beq.n	800f616 <_svfiprintf_r+0x1c2>
 800f5aa:	4b22      	ldr	r3, [pc, #136]	; (800f634 <_svfiprintf_r+0x1e0>)
 800f5ac:	b9fb      	cbnz	r3, 800f5ee <_svfiprintf_r+0x19a>
 800f5ae:	9b03      	ldr	r3, [sp, #12]
 800f5b0:	3307      	adds	r3, #7
 800f5b2:	f023 0307 	bic.w	r3, r3, #7
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	9303      	str	r3, [sp, #12]
 800f5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5bc:	444b      	add	r3, r9
 800f5be:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c0:	e76c      	b.n	800f49c <_svfiprintf_r+0x48>
 800f5c2:	fb00 3202 	mla	r2, r0, r2, r3
 800f5c6:	2101      	movs	r1, #1
 800f5c8:	e7a3      	b.n	800f512 <_svfiprintf_r+0xbe>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	9305      	str	r3, [sp, #20]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	240a      	movs	r4, #10
 800f5d2:	460f      	mov	r7, r1
 800f5d4:	3101      	adds	r1, #1
 800f5d6:	783a      	ldrb	r2, [r7, #0]
 800f5d8:	3a30      	subs	r2, #48	; 0x30
 800f5da:	2a09      	cmp	r2, #9
 800f5dc:	d903      	bls.n	800f5e6 <_svfiprintf_r+0x192>
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0ca      	beq.n	800f578 <_svfiprintf_r+0x124>
 800f5e2:	9005      	str	r0, [sp, #20]
 800f5e4:	e7c8      	b.n	800f578 <_svfiprintf_r+0x124>
 800f5e6:	fb04 2000 	mla	r0, r4, r0, r2
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e7f1      	b.n	800f5d2 <_svfiprintf_r+0x17e>
 800f5ee:	ab03      	add	r3, sp, #12
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	4b10      	ldr	r3, [pc, #64]	; (800f638 <_svfiprintf_r+0x1e4>)
 800f5f6:	a904      	add	r1, sp, #16
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	f3af 8000 	nop.w
 800f5fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f602:	4681      	mov	r9, r0
 800f604:	d1d9      	bne.n	800f5ba <_svfiprintf_r+0x166>
 800f606:	89ab      	ldrh	r3, [r5, #12]
 800f608:	065b      	lsls	r3, r3, #25
 800f60a:	f53f af38 	bmi.w	800f47e <_svfiprintf_r+0x2a>
 800f60e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f610:	b01d      	add	sp, #116	; 0x74
 800f612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f616:	ab03      	add	r3, sp, #12
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	462a      	mov	r2, r5
 800f61c:	4b06      	ldr	r3, [pc, #24]	; (800f638 <_svfiprintf_r+0x1e4>)
 800f61e:	a904      	add	r1, sp, #16
 800f620:	4640      	mov	r0, r8
 800f622:	f000 f881 	bl	800f728 <_printf_i>
 800f626:	e7ea      	b.n	800f5fe <_svfiprintf_r+0x1aa>
 800f628:	08012440 	.word	0x08012440
 800f62c:	08012446 	.word	0x08012446
 800f630:	0801244a 	.word	0x0801244a
 800f634:	00000000 	.word	0x00000000
 800f638:	0800f39d 	.word	0x0800f39d

0800f63c <_printf_common>:
 800f63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f640:	4691      	mov	r9, r2
 800f642:	461f      	mov	r7, r3
 800f644:	688a      	ldr	r2, [r1, #8]
 800f646:	690b      	ldr	r3, [r1, #16]
 800f648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f64c:	4293      	cmp	r3, r2
 800f64e:	bfb8      	it	lt
 800f650:	4613      	movlt	r3, r2
 800f652:	f8c9 3000 	str.w	r3, [r9]
 800f656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f65a:	4606      	mov	r6, r0
 800f65c:	460c      	mov	r4, r1
 800f65e:	b112      	cbz	r2, 800f666 <_printf_common+0x2a>
 800f660:	3301      	adds	r3, #1
 800f662:	f8c9 3000 	str.w	r3, [r9]
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	0699      	lsls	r1, r3, #26
 800f66a:	bf42      	ittt	mi
 800f66c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f670:	3302      	addmi	r3, #2
 800f672:	f8c9 3000 	strmi.w	r3, [r9]
 800f676:	6825      	ldr	r5, [r4, #0]
 800f678:	f015 0506 	ands.w	r5, r5, #6
 800f67c:	d107      	bne.n	800f68e <_printf_common+0x52>
 800f67e:	f104 0a19 	add.w	sl, r4, #25
 800f682:	68e3      	ldr	r3, [r4, #12]
 800f684:	f8d9 2000 	ldr.w	r2, [r9]
 800f688:	1a9b      	subs	r3, r3, r2
 800f68a:	429d      	cmp	r5, r3
 800f68c:	db29      	blt.n	800f6e2 <_printf_common+0xa6>
 800f68e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f692:	6822      	ldr	r2, [r4, #0]
 800f694:	3300      	adds	r3, #0
 800f696:	bf18      	it	ne
 800f698:	2301      	movne	r3, #1
 800f69a:	0692      	lsls	r2, r2, #26
 800f69c:	d42e      	bmi.n	800f6fc <_printf_common+0xc0>
 800f69e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	47c0      	blx	r8
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	d021      	beq.n	800f6f0 <_printf_common+0xb4>
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	68e5      	ldr	r5, [r4, #12]
 800f6b0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6b4:	f003 0306 	and.w	r3, r3, #6
 800f6b8:	2b04      	cmp	r3, #4
 800f6ba:	bf08      	it	eq
 800f6bc:	1aad      	subeq	r5, r5, r2
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	6922      	ldr	r2, [r4, #16]
 800f6c2:	bf0c      	ite	eq
 800f6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6c8:	2500      	movne	r5, #0
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	bfc4      	itt	gt
 800f6ce:	1a9b      	subgt	r3, r3, r2
 800f6d0:	18ed      	addgt	r5, r5, r3
 800f6d2:	f04f 0900 	mov.w	r9, #0
 800f6d6:	341a      	adds	r4, #26
 800f6d8:	454d      	cmp	r5, r9
 800f6da:	d11b      	bne.n	800f714 <_printf_common+0xd8>
 800f6dc:	2000      	movs	r0, #0
 800f6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	4652      	mov	r2, sl
 800f6e6:	4639      	mov	r1, r7
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	47c0      	blx	r8
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	d103      	bne.n	800f6f8 <_printf_common+0xbc>
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6f8:	3501      	adds	r5, #1
 800f6fa:	e7c2      	b.n	800f682 <_printf_common+0x46>
 800f6fc:	18e1      	adds	r1, r4, r3
 800f6fe:	1c5a      	adds	r2, r3, #1
 800f700:	2030      	movs	r0, #48	; 0x30
 800f702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f706:	4422      	add	r2, r4
 800f708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f70c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f710:	3302      	adds	r3, #2
 800f712:	e7c4      	b.n	800f69e <_printf_common+0x62>
 800f714:	2301      	movs	r3, #1
 800f716:	4622      	mov	r2, r4
 800f718:	4639      	mov	r1, r7
 800f71a:	4630      	mov	r0, r6
 800f71c:	47c0      	blx	r8
 800f71e:	3001      	adds	r0, #1
 800f720:	d0e6      	beq.n	800f6f0 <_printf_common+0xb4>
 800f722:	f109 0901 	add.w	r9, r9, #1
 800f726:	e7d7      	b.n	800f6d8 <_printf_common+0x9c>

0800f728 <_printf_i>:
 800f728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f72c:	4617      	mov	r7, r2
 800f72e:	7e0a      	ldrb	r2, [r1, #24]
 800f730:	b085      	sub	sp, #20
 800f732:	2a6e      	cmp	r2, #110	; 0x6e
 800f734:	4698      	mov	r8, r3
 800f736:	4606      	mov	r6, r0
 800f738:	460c      	mov	r4, r1
 800f73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f73c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800f740:	f000 80bc 	beq.w	800f8bc <_printf_i+0x194>
 800f744:	d81a      	bhi.n	800f77c <_printf_i+0x54>
 800f746:	2a63      	cmp	r2, #99	; 0x63
 800f748:	d02e      	beq.n	800f7a8 <_printf_i+0x80>
 800f74a:	d80a      	bhi.n	800f762 <_printf_i+0x3a>
 800f74c:	2a00      	cmp	r2, #0
 800f74e:	f000 80c8 	beq.w	800f8e2 <_printf_i+0x1ba>
 800f752:	2a58      	cmp	r2, #88	; 0x58
 800f754:	f000 808a 	beq.w	800f86c <_printf_i+0x144>
 800f758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f75c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800f760:	e02a      	b.n	800f7b8 <_printf_i+0x90>
 800f762:	2a64      	cmp	r2, #100	; 0x64
 800f764:	d001      	beq.n	800f76a <_printf_i+0x42>
 800f766:	2a69      	cmp	r2, #105	; 0x69
 800f768:	d1f6      	bne.n	800f758 <_printf_i+0x30>
 800f76a:	6821      	ldr	r1, [r4, #0]
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f772:	d023      	beq.n	800f7bc <_printf_i+0x94>
 800f774:	1d11      	adds	r1, r2, #4
 800f776:	6019      	str	r1, [r3, #0]
 800f778:	6813      	ldr	r3, [r2, #0]
 800f77a:	e027      	b.n	800f7cc <_printf_i+0xa4>
 800f77c:	2a73      	cmp	r2, #115	; 0x73
 800f77e:	f000 80b4 	beq.w	800f8ea <_printf_i+0x1c2>
 800f782:	d808      	bhi.n	800f796 <_printf_i+0x6e>
 800f784:	2a6f      	cmp	r2, #111	; 0x6f
 800f786:	d02a      	beq.n	800f7de <_printf_i+0xb6>
 800f788:	2a70      	cmp	r2, #112	; 0x70
 800f78a:	d1e5      	bne.n	800f758 <_printf_i+0x30>
 800f78c:	680a      	ldr	r2, [r1, #0]
 800f78e:	f042 0220 	orr.w	r2, r2, #32
 800f792:	600a      	str	r2, [r1, #0]
 800f794:	e003      	b.n	800f79e <_printf_i+0x76>
 800f796:	2a75      	cmp	r2, #117	; 0x75
 800f798:	d021      	beq.n	800f7de <_printf_i+0xb6>
 800f79a:	2a78      	cmp	r2, #120	; 0x78
 800f79c:	d1dc      	bne.n	800f758 <_printf_i+0x30>
 800f79e:	2278      	movs	r2, #120	; 0x78
 800f7a0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800f7a4:	496e      	ldr	r1, [pc, #440]	; (800f960 <_printf_i+0x238>)
 800f7a6:	e064      	b.n	800f872 <_printf_i+0x14a>
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800f7ae:	1d11      	adds	r1, r2, #4
 800f7b0:	6019      	str	r1, [r3, #0]
 800f7b2:	6813      	ldr	r3, [r2, #0]
 800f7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e0a3      	b.n	800f904 <_printf_i+0x1dc>
 800f7bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 800f7c0:	f102 0104 	add.w	r1, r2, #4
 800f7c4:	6019      	str	r1, [r3, #0]
 800f7c6:	d0d7      	beq.n	800f778 <_printf_i+0x50>
 800f7c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	da03      	bge.n	800f7d8 <_printf_i+0xb0>
 800f7d0:	222d      	movs	r2, #45	; 0x2d
 800f7d2:	425b      	negs	r3, r3
 800f7d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7d8:	4962      	ldr	r1, [pc, #392]	; (800f964 <_printf_i+0x23c>)
 800f7da:	220a      	movs	r2, #10
 800f7dc:	e017      	b.n	800f80e <_printf_i+0xe6>
 800f7de:	6820      	ldr	r0, [r4, #0]
 800f7e0:	6819      	ldr	r1, [r3, #0]
 800f7e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f7e6:	d003      	beq.n	800f7f0 <_printf_i+0xc8>
 800f7e8:	1d08      	adds	r0, r1, #4
 800f7ea:	6018      	str	r0, [r3, #0]
 800f7ec:	680b      	ldr	r3, [r1, #0]
 800f7ee:	e006      	b.n	800f7fe <_printf_i+0xd6>
 800f7f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f7f4:	f101 0004 	add.w	r0, r1, #4
 800f7f8:	6018      	str	r0, [r3, #0]
 800f7fa:	d0f7      	beq.n	800f7ec <_printf_i+0xc4>
 800f7fc:	880b      	ldrh	r3, [r1, #0]
 800f7fe:	4959      	ldr	r1, [pc, #356]	; (800f964 <_printf_i+0x23c>)
 800f800:	2a6f      	cmp	r2, #111	; 0x6f
 800f802:	bf14      	ite	ne
 800f804:	220a      	movne	r2, #10
 800f806:	2208      	moveq	r2, #8
 800f808:	2000      	movs	r0, #0
 800f80a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800f80e:	6865      	ldr	r5, [r4, #4]
 800f810:	60a5      	str	r5, [r4, #8]
 800f812:	2d00      	cmp	r5, #0
 800f814:	f2c0 809c 	blt.w	800f950 <_printf_i+0x228>
 800f818:	6820      	ldr	r0, [r4, #0]
 800f81a:	f020 0004 	bic.w	r0, r0, #4
 800f81e:	6020      	str	r0, [r4, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d13f      	bne.n	800f8a4 <_printf_i+0x17c>
 800f824:	2d00      	cmp	r5, #0
 800f826:	f040 8095 	bne.w	800f954 <_printf_i+0x22c>
 800f82a:	4675      	mov	r5, lr
 800f82c:	2a08      	cmp	r2, #8
 800f82e:	d10b      	bne.n	800f848 <_printf_i+0x120>
 800f830:	6823      	ldr	r3, [r4, #0]
 800f832:	07da      	lsls	r2, r3, #31
 800f834:	d508      	bpl.n	800f848 <_printf_i+0x120>
 800f836:	6923      	ldr	r3, [r4, #16]
 800f838:	6862      	ldr	r2, [r4, #4]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	bfde      	ittt	le
 800f83e:	2330      	movle	r3, #48	; 0x30
 800f840:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f844:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f848:	ebae 0305 	sub.w	r3, lr, r5
 800f84c:	6123      	str	r3, [r4, #16]
 800f84e:	f8cd 8000 	str.w	r8, [sp]
 800f852:	463b      	mov	r3, r7
 800f854:	aa03      	add	r2, sp, #12
 800f856:	4621      	mov	r1, r4
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff feef 	bl	800f63c <_printf_common>
 800f85e:	3001      	adds	r0, #1
 800f860:	d155      	bne.n	800f90e <_printf_i+0x1e6>
 800f862:	f04f 30ff 	mov.w	r0, #4294967295
 800f866:	b005      	add	sp, #20
 800f868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f86c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800f870:	493c      	ldr	r1, [pc, #240]	; (800f964 <_printf_i+0x23c>)
 800f872:	6822      	ldr	r2, [r4, #0]
 800f874:	6818      	ldr	r0, [r3, #0]
 800f876:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f87a:	f100 0504 	add.w	r5, r0, #4
 800f87e:	601d      	str	r5, [r3, #0]
 800f880:	d001      	beq.n	800f886 <_printf_i+0x15e>
 800f882:	6803      	ldr	r3, [r0, #0]
 800f884:	e002      	b.n	800f88c <_printf_i+0x164>
 800f886:	0655      	lsls	r5, r2, #25
 800f888:	d5fb      	bpl.n	800f882 <_printf_i+0x15a>
 800f88a:	8803      	ldrh	r3, [r0, #0]
 800f88c:	07d0      	lsls	r0, r2, #31
 800f88e:	bf44      	itt	mi
 800f890:	f042 0220 	orrmi.w	r2, r2, #32
 800f894:	6022      	strmi	r2, [r4, #0]
 800f896:	b91b      	cbnz	r3, 800f8a0 <_printf_i+0x178>
 800f898:	6822      	ldr	r2, [r4, #0]
 800f89a:	f022 0220 	bic.w	r2, r2, #32
 800f89e:	6022      	str	r2, [r4, #0]
 800f8a0:	2210      	movs	r2, #16
 800f8a2:	e7b1      	b.n	800f808 <_printf_i+0xe0>
 800f8a4:	4675      	mov	r5, lr
 800f8a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8aa:	fb02 3310 	mls	r3, r2, r0, r3
 800f8ae:	5ccb      	ldrb	r3, [r1, r3]
 800f8b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d1f5      	bne.n	800f8a6 <_printf_i+0x17e>
 800f8ba:	e7b7      	b.n	800f82c <_printf_i+0x104>
 800f8bc:	6808      	ldr	r0, [r1, #0]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	6949      	ldr	r1, [r1, #20]
 800f8c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f8c6:	d004      	beq.n	800f8d2 <_printf_i+0x1aa>
 800f8c8:	1d10      	adds	r0, r2, #4
 800f8ca:	6018      	str	r0, [r3, #0]
 800f8cc:	6813      	ldr	r3, [r2, #0]
 800f8ce:	6019      	str	r1, [r3, #0]
 800f8d0:	e007      	b.n	800f8e2 <_printf_i+0x1ba>
 800f8d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8d6:	f102 0004 	add.w	r0, r2, #4
 800f8da:	6018      	str	r0, [r3, #0]
 800f8dc:	6813      	ldr	r3, [r2, #0]
 800f8de:	d0f6      	beq.n	800f8ce <_printf_i+0x1a6>
 800f8e0:	8019      	strh	r1, [r3, #0]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	6123      	str	r3, [r4, #16]
 800f8e6:	4675      	mov	r5, lr
 800f8e8:	e7b1      	b.n	800f84e <_printf_i+0x126>
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	1d11      	adds	r1, r2, #4
 800f8ee:	6019      	str	r1, [r3, #0]
 800f8f0:	6815      	ldr	r5, [r2, #0]
 800f8f2:	6862      	ldr	r2, [r4, #4]
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f7f0 fc72 	bl	80001e0 <memchr>
 800f8fc:	b108      	cbz	r0, 800f902 <_printf_i+0x1da>
 800f8fe:	1b40      	subs	r0, r0, r5
 800f900:	6060      	str	r0, [r4, #4]
 800f902:	6863      	ldr	r3, [r4, #4]
 800f904:	6123      	str	r3, [r4, #16]
 800f906:	2300      	movs	r3, #0
 800f908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f90c:	e79f      	b.n	800f84e <_printf_i+0x126>
 800f90e:	6923      	ldr	r3, [r4, #16]
 800f910:	462a      	mov	r2, r5
 800f912:	4639      	mov	r1, r7
 800f914:	4630      	mov	r0, r6
 800f916:	47c0      	blx	r8
 800f918:	3001      	adds	r0, #1
 800f91a:	d0a2      	beq.n	800f862 <_printf_i+0x13a>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	079b      	lsls	r3, r3, #30
 800f920:	d507      	bpl.n	800f932 <_printf_i+0x20a>
 800f922:	2500      	movs	r5, #0
 800f924:	f104 0919 	add.w	r9, r4, #25
 800f928:	68e3      	ldr	r3, [r4, #12]
 800f92a:	9a03      	ldr	r2, [sp, #12]
 800f92c:	1a9b      	subs	r3, r3, r2
 800f92e:	429d      	cmp	r5, r3
 800f930:	db05      	blt.n	800f93e <_printf_i+0x216>
 800f932:	68e0      	ldr	r0, [r4, #12]
 800f934:	9b03      	ldr	r3, [sp, #12]
 800f936:	4298      	cmp	r0, r3
 800f938:	bfb8      	it	lt
 800f93a:	4618      	movlt	r0, r3
 800f93c:	e793      	b.n	800f866 <_printf_i+0x13e>
 800f93e:	2301      	movs	r3, #1
 800f940:	464a      	mov	r2, r9
 800f942:	4639      	mov	r1, r7
 800f944:	4630      	mov	r0, r6
 800f946:	47c0      	blx	r8
 800f948:	3001      	adds	r0, #1
 800f94a:	d08a      	beq.n	800f862 <_printf_i+0x13a>
 800f94c:	3501      	adds	r5, #1
 800f94e:	e7eb      	b.n	800f928 <_printf_i+0x200>
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1a7      	bne.n	800f8a4 <_printf_i+0x17c>
 800f954:	780b      	ldrb	r3, [r1, #0]
 800f956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f95a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f95e:	e765      	b.n	800f82c <_printf_i+0x104>
 800f960:	08012462 	.word	0x08012462
 800f964:	08012451 	.word	0x08012451

0800f968 <_read_r>:
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4c07      	ldr	r4, [pc, #28]	; (800f988 <_read_r+0x20>)
 800f96c:	4605      	mov	r5, r0
 800f96e:	4608      	mov	r0, r1
 800f970:	4611      	mov	r1, r2
 800f972:	2200      	movs	r2, #0
 800f974:	6022      	str	r2, [r4, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	f7fe fecc 	bl	800e714 <_read>
 800f97c:	1c43      	adds	r3, r0, #1
 800f97e:	d102      	bne.n	800f986 <_read_r+0x1e>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	b103      	cbz	r3, 800f986 <_read_r+0x1e>
 800f984:	602b      	str	r3, [r5, #0]
 800f986:	bd38      	pop	{r3, r4, r5, pc}
 800f988:	200010cc 	.word	0x200010cc

0800f98c <_realloc_r>:
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	4607      	mov	r7, r0
 800f990:	4614      	mov	r4, r2
 800f992:	460e      	mov	r6, r1
 800f994:	b921      	cbnz	r1, 800f9a0 <_realloc_r+0x14>
 800f996:	4611      	mov	r1, r2
 800f998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f99c:	f7ff bb6e 	b.w	800f07c <_malloc_r>
 800f9a0:	b922      	cbnz	r2, 800f9ac <_realloc_r+0x20>
 800f9a2:	f7ff fb1d 	bl	800efe0 <_free_r>
 800f9a6:	4625      	mov	r5, r4
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ac:	f000 f814 	bl	800f9d8 <_malloc_usable_size_r>
 800f9b0:	4284      	cmp	r4, r0
 800f9b2:	d90f      	bls.n	800f9d4 <_realloc_r+0x48>
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	f7ff fb60 	bl	800f07c <_malloc_r>
 800f9bc:	4605      	mov	r5, r0
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d0f2      	beq.n	800f9a8 <_realloc_r+0x1c>
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4622      	mov	r2, r4
 800f9c6:	f7ff fadd 	bl	800ef84 <memcpy>
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4638      	mov	r0, r7
 800f9ce:	f7ff fb07 	bl	800efe0 <_free_r>
 800f9d2:	e7e9      	b.n	800f9a8 <_realloc_r+0x1c>
 800f9d4:	4635      	mov	r5, r6
 800f9d6:	e7e7      	b.n	800f9a8 <_realloc_r+0x1c>

0800f9d8 <_malloc_usable_size_r>:
 800f9d8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	f1a0 0004 	sub.w	r0, r0, #4
 800f9e2:	bfbc      	itt	lt
 800f9e4:	580b      	ldrlt	r3, [r1, r0]
 800f9e6:	18c0      	addlt	r0, r0, r3
 800f9e8:	4770      	bx	lr
	...

0800f9ec <_init>:
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	bf00      	nop
 800f9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9f2:	bc08      	pop	{r3}
 800f9f4:	469e      	mov	lr, r3
 800f9f6:	4770      	bx	lr

0800f9f8 <_fini>:
 800f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fa:	bf00      	nop
 800f9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9fe:	bc08      	pop	{r3}
 800fa00:	469e      	mov	lr, r3
 800fa02:	4770      	bx	lr
