
src_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014844  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000362c  080149d4  080149d4  000249d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08018000  08018000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018004  08018004  00028004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08018008  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030074  2**0
                  CONTENTS
  7 .bss          00002410  20000074  20000074  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20002484  20002484  00030074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bde4  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000071db  00000000  00000000  0006be88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001738  00000000  00000000  00073068  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001608  00000000  00000000  000747a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010c92  00000000  00000000  00075da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000066d4  00000000  00000000  00086a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008d10e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005fb8  00000000  00000000  0008d18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080149bc 	.word	0x080149bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080149bc 	.word	0x080149bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
 80002ac:	2300      	movs	r3, #0
 80002ae:	73bb      	strb	r3, [r7, #14]
 80002b0:	230f      	movs	r3, #15
 80002b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d039      	beq.n	8000330 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <NVIC_Init+0xbc>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	43db      	mvns	r3, r3
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	f1c3 0304 	rsb	r3, r3, #4
 80002d2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80002d4:	7b7a      	ldrb	r2, [r7, #13]
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	fa42 f303 	asr.w	r3, r2, r3
 80002dc:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	461a      	mov	r2, r3
 80002e4:	7bbb      	ldrb	r3, [r7, #14]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	789a      	ldrb	r2, [r3, #2]
 80002f0:	7b7b      	ldrb	r3, [r7, #13]
 80002f2:	4013      	ands	r3, r2
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	011b      	lsls	r3, r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <NVIC_Init+0xc0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	7bfa      	ldrb	r2, [r7, #15]
 800030c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <NVIC_Init+0xc0>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f003 031f 	and.w	r3, r3, #31
 8000324:	2101      	movs	r1, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800032a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800032e:	e00f      	b.n	8000350 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000330:	490b      	ldr	r1, [pc, #44]	; (8000360 <NVIC_Init+0xc0>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f003 031f 	and.w	r3, r3, #31
 8000344:	2201      	movs	r2, #1
 8000346:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000348:	f100 0320 	add.w	r3, r0, #32
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000350:	bf00      	nop
 8000352:	3714      	adds	r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000e100 	.word	0xe000e100

08000364 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000370:	4b34      	ldr	r3, [pc, #208]	; (8000444 <EXTI_Init+0xe0>)
 8000372:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	799b      	ldrb	r3, [r3, #6]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d04f      	beq.n	800041c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800037c:	4931      	ldr	r1, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <EXTI_Init+0xe0>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	43db      	mvns	r3, r3
 8000388:	4013      	ands	r3, r2
 800038a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800038c:	492d      	ldr	r1, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <EXTI_Init+0xe0>)
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	43db      	mvns	r3, r3
 8000398:	4013      	ands	r3, r2
 800039a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	6811      	ldr	r1, [r2, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003b6:	4923      	ldr	r1, [pc, #140]	; (8000444 <EXTI_Init+0xe0>)
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <EXTI_Init+0xe0>)
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4013      	ands	r3, r2
 80003c4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80003c6:	491f      	ldr	r1, [pc, #124]	; (8000444 <EXTI_Init+0xe0>)
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <EXTI_Init+0xe0>)
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	795b      	ldrb	r3, [r3, #5]
 80003da:	2b10      	cmp	r3, #16
 80003dc:	d10e      	bne.n	80003fc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80003de:	4919      	ldr	r1, [pc, #100]	; (8000444 <EXTI_Init+0xe0>)
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <EXTI_Init+0xe0>)
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80003ec:	4915      	ldr	r1, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <EXTI_Init+0xe0>)
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80003fa:	e01d      	b.n	8000438 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <EXTI_Init+0xe0>)
 80003fe:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	795b      	ldrb	r3, [r3, #5]
 8000404:	461a      	mov	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	6811      	ldr	r1, [r2, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	430a      	orrs	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	e00d      	b.n	8000438 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	6811      	ldr	r1, [r2, #0]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	6812      	ldr	r2, [r2, #0]
 8000432:	43d2      	mvns	r2, r2
 8000434:	400a      	ands	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40013c00 	.word	0x40013c00

08000448 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <EXTI_GetITStatus+0x44>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4013      	ands	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <EXTI_GetITStatus+0x44>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4013      	ands	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	d005      	beq.n	800047a <EXTI_GetITStatus+0x32>
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d002      	beq.n	800047a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000474:	2301      	movs	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e001      	b.n	800047e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40013c00 	.word	0x40013c00

08000490 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <EXTI_ClearITPendingBit+0x1c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6153      	str	r3, [r2, #20]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40013c00 	.word	0x40013c00

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	691a      	ldr	r2, [r3, #16]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	4013      	ands	r3, r2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	831a      	strh	r2, [r3, #24]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	835a      	strh	r2, [r3, #26]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800063c:	b490      	push	{r4, r7}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	220f      	movs	r2, #15
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000660:	4916      	ldr	r1, [pc, #88]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3302      	adds	r3, #2
 8000674:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	43db      	mvns	r3, r3
 800067c:	401a      	ands	r2, r3
 800067e:	1c83      	adds	r3, r0, #2
 8000680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	089b      	lsrs	r3, r3, #2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461c      	mov	r4, r3
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <SYSCFG_EXTILineConfig+0x80>)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3302      	adds	r3, #2
 8000698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069c:	79f9      	ldrb	r1, [r7, #7]
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	431a      	orrs	r2, r3
 80006ac:	1ca3      	adds	r3, r4, #2
 80006ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc90      	pop	{r4, r7}
 80006ba:	4770      	bx	lr
 80006bc:	40013800 	.word	0x40013800

080006c0 <send_gsm_command_by_index>:
#include "uart_line_queue.h"
#include "main.h"
#include "gsm_state.h"

// Hàm gửi lệnh AT dựa trên chỉ số lệnh trong gsm_commands
void send_gsm_command_by_index(int idx) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    if (idx < 0 || idx >= gsm_commands_count) return;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db1d      	blt.n	800070a <send_gsm_command_by_index+0x4a>
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <send_gsm_command_by_index+0x54>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da18      	bge.n	800070a <send_gsm_command_by_index+0x4a>
    uart1_send_raw((uint8_t *)gsm_commands[idx].syntax, strlen(gsm_commands[idx].syntax));
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	3304      	adds	r3, #4
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <send_gsm_command_by_index+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3304      	adds	r3, #4
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd77 	bl	80001e4 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4619      	mov	r1, r3
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 fc8a 	bl	8001014 <uart1_send_raw>
    uart1_send_raw((uint8_t *)"\r\n", 2);
 8000700:	2102      	movs	r1, #2
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <send_gsm_command_by_index+0x5c>)
 8000704:	f000 fc86 	bl	8001014 <uart1_send_raw>
 8000708:	e000      	b.n	800070c <send_gsm_command_by_index+0x4c>
    if (idx < 0 || idx >= gsm_commands_count) return;
 800070a:	bf00      	nop
}
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	08017b24 	.word	0x08017b24
 8000718:	08017a74 	.word	0x08017a74
 800071c:	080149d4 	.word	0x080149d4

08000720 <send_all_gsm_commands_with_check>:

// Hàm gửi lần lượt các lệnh, chỉ gửi tiếp khi phản hồi thành công
void send_all_gsm_commands_with_check(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0d4      	sub	sp, #336	; 0x150
 8000724:	af02      	add	r7, sp, #8
    static uint32_t start_tick = 0;
    static uint32_t last_send_tick = 0;
    static bool waiting_for_response = false;
    char response[256];

    if (current_command_index >= gsm_commands_count) {
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	da78      	bge.n	8000824 <send_all_gsm_commands_with_check+0x104>
        return; 
    }

    if (!waiting_for_response) {
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00e      	beq.n	800075e <send_all_gsm_commands_with_check+0x3e>
        start_tick = timer2_get_tick();
 8000740:	f000 fb64 	bl	8000e0c <timer2_get_tick>
 8000744:	4602      	mov	r2, r0
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000748:	601a      	str	r2, [r3, #0]
        last_send_tick = start_tick - 5000;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000752:	3b08      	subs	r3, #8
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 8000756:	6013      	str	r3, [r2, #0]
        waiting_for_response = true;
 8000758:	4b37      	ldr	r3, [pc, #220]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
    }

    uint32_t wait_time = gsm_commands[current_command_index].max_response_time_ms;
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	4413      	add	r3, r2
 8000768:	330c      	adds	r3, #12
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    if ((timer2_get_tick() - start_tick) < wait_time) {
 8000770:	f000 fb4c 	bl	8000e0c <timer2_get_tick>
 8000774:	4602      	mov	r2, r0
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <send_all_gsm_commands_with_check+0x11c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000780:	429a      	cmp	r2, r3
 8000782:	d231      	bcs.n	80007e8 <send_all_gsm_commands_with_check+0xc8>
        if ((timer2_get_tick() - last_send_tick) >= 3000) { 
 8000784:	f000 fb42 	bl	8000e0c <timer2_get_tick>
 8000788:	4602      	mov	r2, r0
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000794:	4293      	cmp	r3, r2
 8000796:	d91e      	bls.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            send_gsm_command_by_index(current_command_index);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff8f 	bl	80006c0 <send_gsm_command_by_index>
            last_send_tick = timer2_get_tick();
 80007a2:	f000 fb33 	bl	8000e0c <timer2_get_tick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <send_all_gsm_commands_with_check+0x120>)
 80007aa:	601a      	str	r2, [r3, #0]
        }
        while (uart_line_queue_pop(response)) {
 80007ac:	e013      	b.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
            if (check_gsm_response_by_index(current_command_index, response)) {
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f931 	bl	8000a20 <check_gsm_response_by_index>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <send_all_gsm_commands_with_check+0xb6>
                waiting_for_response = false;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
                current_command_index++;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007d2:	6013      	str	r3, [r2, #0]
                return; 
 80007d4:	e027      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        while (uart_line_queue_pop(response)) {
 80007d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fdf2 	bl	80013c4 <uart_line_queue_pop>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1e3      	bne.n	80007ae <send_all_gsm_commands_with_check+0x8e>
 80007e6:	e01e      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
            }
        }
    } else {
        current_device_state = DEVICE_STATE_GSM_ERROR;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <send_all_gsm_commands_with_check+0x128>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	701a      	strb	r2, [r3, #0]
        char log_buf[64];
        snprintf(log_buf, sizeof(log_buf), "Loi khi gui lenh case %d: %s", current_command_index, gsm_commands[current_command_index].command);
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <send_all_gsm_commands_with_check+0x124>)
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4413      	add	r3, r2
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1d38      	adds	r0, r7, #4
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	460b      	mov	r3, r1
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <send_all_gsm_commands_with_check+0x12c>)
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	f013 fcb2 	bl	8014170 <sniprintf>
        uart_log(log_buf);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fbc8 	bl	8000fa4 <uart_log>
        waiting_for_response = false;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <send_all_gsm_commands_with_check+0x118>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
        current_command_index = gsm_commands_count;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <send_all_gsm_commands_with_check+0x114>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <send_all_gsm_commands_with_check+0x110>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e000      	b.n	8000826 <send_all_gsm_commands_with_check+0x106>
        return; 
 8000824:	bf00      	nop
    }
 8000826:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090
 8000834:	08017b24 	.word	0x08017b24
 8000838:	20000094 	.word	0x20000094
 800083c:	20000098 	.word	0x20000098
 8000840:	2000009c 	.word	0x2000009c
 8000844:	08017a74 	.word	0x08017a74
 8000848:	20000537 	.word	0x20000537
 800084c:	080149d8 	.word	0x080149d8

08000850 <parse_response_at>:
#include <stdio.h>
#include "gsm_state.h"
#include "ppp_net/ppp_connection.h"
#include "main.h"

bool parse_response_at(const char* response) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <parse_response_at+0x24>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f013 fd34 	bl	80142c8 <strstr>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08014b58 	.word	0x08014b58

08000878 <parse_response_ati>:

bool parse_response_ati(const char* response) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "Manufacturer: INCORPORATED") != NULL;
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <parse_response_ati+0x24>)
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f013 fd20 	bl	80142c8 <strstr>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08014b5c 	.word	0x08014b5c

080008a0 <parse_response_at_cpin>:

bool parse_response_at_cpin(const char* response) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CPIN: READY") != NULL;
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <parse_response_at_cpin+0x24>)
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f013 fd0c 	bl	80142c8 <strstr>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08014b78 	.word	0x08014b78

080008c8 <parse_response_at_csq>:

bool parse_response_at_csq(const char* response) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CSQ:") != NULL;
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <parse_response_at_csq+0x24>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f013 fcf8 	bl	80142c8 <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08014b88 	.word	0x08014b88

080008f0 <parse_response_at_cereg>:

bool parse_response_at_cereg(const char* response) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CEREG: 0,1") != NULL;
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <parse_response_at_cereg+0x24>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f013 fce4 	bl	80142c8 <strstr>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08014b90 	.word	0x08014b90

08000918 <parse_response_at_cops>:

bool parse_response_at_cops(const char* response) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+COPS=0") != NULL;
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <parse_response_at_cops+0x24>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f013 fcd0 	bl	80142c8 <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08014b9c 	.word	0x08014b9c

08000940 <parse_response_at_cgdcont>:

bool parse_response_at_cgdcont(const char* response) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
   // uart_log(response);
    return strstr(response, "OK") != NULL;
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <parse_response_at_cgdcont+0x24>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f013 fcbc 	bl	80142c8 <strstr>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08014b58 	.word	0x08014b58

08000968 <parse_response_at_cgauth>:

bool parse_response_at_cgauth(const char* response) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <parse_response_at_cgauth+0x24>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f013 fca8 	bl	80142c8 <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08014b58 	.word	0x08014b58

08000990 <parse_response_at_cgact>:

bool parse_response_at_cgact(const char* response) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "OK") != NULL;
 8000998:	4906      	ldr	r1, [pc, #24]	; (80009b4 <parse_response_at_cgact+0x24>)
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f013 fc94 	bl	80142c8 <strstr>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08014b58 	.word	0x08014b58

080009b8 <parse_response_at_cgpaddr>:

bool parse_response_at_cgpaddr(const char* response) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    return strstr(response, "+CGPADDR: 1,") != NULL;
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <parse_response_at_cgpaddr+0x24>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f013 fc80 	bl	80142c8 <strstr>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08014ba4 	.word	0x08014ba4

080009e0 <parse_response_atd99>:
bool parse_response_at_cgdata(const char* response) {
    //uart_log(response);
    return strstr(response, "CONNECT") != NULL;
}

bool parse_response_atd99(const char* response) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    //uart_log(response);
    if (strstr(response, "CONNECT") != NULL) {
 80009e8:	490a      	ldr	r1, [pc, #40]	; (8000a14 <parse_response_atd99+0x34>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f013 fc6c 	bl	80142c8 <strstr>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <parse_response_atd99+0x2a>
        gsm_ppp_mode = true;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <parse_response_atd99+0x38>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
        //uart_log("Switching to PPP mode.");
        current_device_state = DEVICE_STATE_BOOTING_DEVICE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <parse_response_atd99+0x3c>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	701a      	strb	r2, [r3, #0]
        restart_dma2_stream2();
 8000a02:	f000 fc59 	bl	80012b8 <restart_dma2_stream2>
        return true;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <parse_response_atd99+0x2c>
    }
    return false;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08014bb4 	.word	0x08014bb4
 8000a18:	200005f8 	.word	0x200005f8
 8000a1c:	20000537 	.word	0x20000537

08000a20 <check_gsm_response_by_index>:
#include "gsm_parser.h"
#include <stdbool.h>
#include <string.h>
#include "gsm_state.h"

bool check_gsm_response_by_index(int idx, const char* response) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    switch (idx) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d855      	bhi.n	8000adc <check_gsm_response_by_index+0xbc>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <check_gsm_response_by_index+0x18>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a6f 	.word	0x08000a6f
 8000a40:	08000a79 	.word	0x08000a79
 8000a44:	08000a83 	.word	0x08000a83
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000aab 	.word	0x08000aab
 8000a54:	08000ab5 	.word	0x08000ab5
 8000a58:	08000abf 	.word	0x08000abf
 8000a5c:	08000ac9 	.word	0x08000ac9
 8000a60:	08000ad3 	.word	0x08000ad3
        case 0: // AT
            return parse_response_at(response);
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f7ff fef3 	bl	8000850 <parse_response_at>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e037      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 1: // ATI
            return parse_response_ati(response);
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f7ff ff02 	bl	8000878 <parse_response_ati>
 8000a74:	4603      	mov	r3, r0
 8000a76:	e032      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 2: // AT+CPIN?
            return parse_response_at_cpin(response);
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f7ff ff11 	bl	80008a0 <parse_response_at_cpin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e02d      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 3: // AT+CSQ
            return parse_response_at_csq(response);
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f7ff ff20 	bl	80008c8 <parse_response_at_csq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	e028      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 4: // AT+CEREG?
            return parse_response_at_cereg(response);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f7ff ff2f 	bl	80008f0 <parse_response_at_cereg>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e023      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 5: // AT+COPS
            return parse_response_at_cops(response);
 8000a96:	6838      	ldr	r0, [r7, #0]
 8000a98:	f7ff ff3e 	bl	8000918 <parse_response_at_cops>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	e019      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 6: // AT+CGDCONT
            return parse_response_at_cgdcont(response);
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f7ff ff48 	bl	8000940 <parse_response_at_cgdcont>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	e014      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 7: // AT+CGAUTH
            return parse_response_at_cgauth(response);
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff ff57 	bl	8000968 <parse_response_at_cgauth>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e00f      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 8: // AT+CGACT
            return parse_response_at_cgact(response);
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f7ff ff66 	bl	8000990 <parse_response_at_cgact>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	e00a      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 9: // AT+CGPADDR
            return parse_response_at_cgpaddr(response);
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f7ff ff75 	bl	80009b8 <parse_response_at_cgpaddr>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e005      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        case 10: // ATD*99#
            return parse_response_atd99(response);
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff ff84 	bl	80009e0 <parse_response_atd99>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	e000      	b.n	8000ade <check_gsm_response_by_index+0xbe>
        // case 11: // +++
        //     return parse_response_plus(response);
        // case 12: // ATH
        //     return parse_response_ath(response);
        default:
            return false;
 8000adc:	2300      	movs	r3, #0
    }
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <button_init>:
volatile uint8_t g_button_pressed_flag = 0;
volatile uint8_t g_button_released_flag = 0;
static uint32_t last_irq_tick = 0;

void button_init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;

    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000af2:	2300      	movs	r3, #0
 8000af4:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000afa:	2300      	movs	r3, #0
 8000afc:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <button_init+0x64>)
 8000b06:	f7ff fcd3 	bl	80004b0 <GPIO_Init>

    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fd95 	bl	800063c <SYSCFG_EXTILineConfig>
    EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b16:	2300      	movs	r3, #0
 8000b18:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStruct);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc1c 	bl	8000364 <EXTI_Init>

    NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000b30:	2301      	movs	r3, #1
 8000b32:	717b      	strb	r3, [r7, #5]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8000b34:	2301      	movs	r3, #1
 8000b36:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbae 	bl	80002a0 <NVIC_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020000 	.word	0x40020000

08000b50 <EXTI0_IRQHandler>:

// Hàm xử lý ngắt EXTI0 (PA0)
void EXTI0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fc76 	bl	8000448 <EXTI_GetITStatus>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01c      	beq.n	8000b9c <EXTI0_IRQHandler+0x4c>
        uint32_t now = timer2_get_tick();
 8000b62:	f000 f953 	bl	8000e0c <timer2_get_tick>
 8000b66:	6078      	str	r0, [r7, #4]
        if (now - last_irq_tick > 30) { 
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b1e      	cmp	r3, #30
 8000b72:	d910      	bls.n	8000b96 <EXTI0_IRQHandler+0x46>
            if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == Bit_RESET) {
 8000b74:	2101      	movs	r1, #1
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <EXTI0_IRQHandler+0x58>)
 8000b78:	f7ff fd28 	bl	80005cc <GPIO_ReadInputDataBit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <EXTI0_IRQHandler+0x3a>
                g_button_pressed_flag = 1;   
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <EXTI0_IRQHandler+0x5c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e002      	b.n	8000b90 <EXTI0_IRQHandler+0x40>
            } else {
                g_button_released_flag = 1;  
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <EXTI0_IRQHandler+0x60>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
            }
            last_irq_tick = now;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI0_IRQHandler+0x54>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
        }
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fc7a 	bl	8000490 <EXTI_ClearITPendingBit>
    }
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000a4 	.word	0x200000a4
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	200000a1 	.word	0x200000a1

08000bb4 <hardware_init>:
#include "stm32f4xx.h"
#include "uart_line_queue.h"

#define GSM_POWER_GPIO_PORT GPIOA
#define GSM_POWER_PIN       8
void hardware_init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <hardware_init+0x58>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f043 0303 	orr.w	r3, r3, #3
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN | RCC_APB1ENR_TIM2EN;
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <hardware_init+0x58>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_SYSCFGEN;
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <hardware_init+0x58>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <hardware_init+0x58>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30

    timer2_init_1ms();
 8000bf0:	f000 f8c4 	bl	8000d7c <timer2_init_1ms>
    uart_line_queue_init();
 8000bf4:	f000 fb90 	bl	8001318 <uart_line_queue_init>
    uart_init_all();
 8000bf8:	f000 f942 	bl	8000e80 <uart_init_all>
    led_init();
 8000bfc:	f000 f83c 	bl	8000c78 <led_init>
    button_init();
 8000c00:	f7ff ff72 	bl	8000ae8 <button_init>
    gsm_module_power_cycle();
 8000c04:	f000 f804 	bl	8000c10 <gsm_module_power_cycle>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <gsm_module_power_cycle>:

uint8_t switch_read(uint8_t index) {
    return 0; 
}

void gsm_module_power_cycle(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    GSM_POWER_GPIO_PORT->MODER &= ~(3U << (GSM_POWER_PIN * 2));
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c1e:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->MODER |=  (1U << (GSM_POWER_PIN * 2));
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
    GSM_POWER_GPIO_PORT->OTYPER &= ~(1U << GSM_POWER_PIN);
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c36:	6053      	str	r3, [r2, #4]
    GSM_POWER_GPIO_PORT->OSPEEDR |= (3U << (GSM_POWER_PIN * 2));
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c42:	6093      	str	r3, [r2, #8]
    GSM_POWER_GPIO_PORT->PUPDR &= ~(3U << (GSM_POWER_PIN * 2));
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c4e:	60d3      	str	r3, [r2, #12]
    GSM_POWER_GPIO_PORT->ODR &= ~(1U << GSM_POWER_PIN);
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5a:	6153      	str	r3, [r2, #20]
    delay_ms(2000); 
 8000c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c60:	f000 f8e0 	bl	8000e24 <delay_ms>
    GSM_POWER_GPIO_PORT->ODR |= (1U << GSM_POWER_PIN); 
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c66:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <gsm_module_power_cycle+0x64>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6153      	str	r3, [r2, #20]
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020000 	.word	0x40020000

08000c78 <led_init>:
#include "stm32f4xx.h"
#include "led.h"
#include "hardware.h"

void led_init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
    // Configure LED 4G (Green Network) as output
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.GPIO_Pin = LED_4G_PIN;
 8000c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c82:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000c84:	2301      	movs	r3, #1
 8000c86:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	717b      	strb	r3, [r7, #5]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(LED_4G_PORT, &GPIO_InitStruct);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <led_init+0x4c>)
 8000c9a:	f7ff fc09 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_PIN;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_PORT, &GPIO_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <led_init+0x4c>)
 8000ca8:	f7ff fc02 	bl	80004b0 <GPIO_Init>
    GPIO_InitStruct.GPIO_Pin = LED_STT_SWITCH_PIN;
 8000cac:	2320      	movs	r3, #32
 8000cae:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_STT_SWITCH_PORT, &GPIO_InitStruct);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <led_init+0x4c>)
 8000cb6:	f7ff fbfb 	bl	80004b0 <GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <led_4g_on>:

void led_4g_on(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_4G_PORT, LED_4G_PIN);
 8000ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <led_4g_on+0x14>)
 8000cd2:	f7ff fc95 	bl	8000600 <GPIO_SetBits>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <led_4g_off>:

void led_4g_off(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_4G_PORT, LED_4G_PIN);
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <led_4g_off+0x14>)
 8000cea:	f7ff fc98 	bl	800061e <GPIO_ResetBits>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <led_stt_on>:
        led_4g_on();
    else
        led_4g_off();
}

void led_stt_on(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_PORT, LED_STT_PIN);
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <led_stt_on+0x10>)
 8000d00:	f7ff fc7e 	bl	8000600 <GPIO_SetBits>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020400 	.word	0x40020400

08000d0c <led_stt_off>:

void led_stt_off(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_PORT, LED_STT_PIN);
 8000d10:	2110      	movs	r1, #16
 8000d12:	4802      	ldr	r0, [pc, #8]	; (8000d1c <led_stt_off+0x10>)
 8000d14:	f7ff fc83 	bl	800061e <GPIO_ResetBits>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40020400 	.word	0x40020400

08000d20 <led_stt_switch_on>:
        led_stt_on();
    else
        led_stt_off();
}

void led_stt_switch_on(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d24:	2120      	movs	r1, #32
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <led_stt_switch_on+0x10>)
 8000d28:	f7ff fc6a 	bl	8000600 <GPIO_SetBits>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020400 	.word	0x40020400

08000d34 <led_stt_switch_off>:

void led_stt_switch_off(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    GPIO_ResetBits(LED_STT_SWITCH_PORT, LED_STT_SWITCH_PIN);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <led_stt_switch_off+0x10>)
 8000d3c:	f7ff fc6f 	bl	800061e <GPIO_ResetBits>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020400 	.word	0x40020400

08000d48 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000d52:	4909      	ldr	r1, [pc, #36]	; (8000d78 <NVIC_EnableIRQ+0x30>)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <timer2_init_1ms>:
#include "stm32f4xx.h"

static volatile uint32_t timer2_tick = 0;

void timer2_init_1ms(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    TIM2->PSC = 15;      // 16MHz / (15+1) = 1MHz
 8000d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d84:	220f      	movs	r2, #15
 8000d86:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;     // 1MHz / (999+1) = 1kHz (1ms)
 8000d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	2201      	movs	r2, #1
 8000d98:	829a      	strh	r2, [r3, #20]
    TIM2->DIER |= TIM_DIER_UIE;
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da2:	899b      	ldrh	r3, [r3, #12]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	8193      	strh	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	8013      	strh	r3, [r2, #0]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000dc2:	201c      	movs	r0, #28
 8000dc4:	f7ff ffc0 	bl	8000d48 <NVIC_EnableIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) // Update interrupt flag
 8000dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd4:	8a1b      	ldrh	r3, [r3, #16]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00e      	beq.n	8000dfe <TIM2_IRQHandler+0x32>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Clear flag
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de8:	8a1b      	ldrh	r3, [r3, #16]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	8213      	strh	r3, [r2, #16]
        timer2_tick++;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <TIM2_IRQHandler+0x3c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <TIM2_IRQHandler+0x3c>)
 8000dfc:	6013      	str	r3, [r2, #0]
    }
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200000a8 	.word	0x200000a8

08000e0c <timer2_get_tick>:

uint32_t timer2_get_tick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
    return timer2_tick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <timer2_get_tick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a8 	.word	0x200000a8

08000e24 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    uint32_t start = timer2_get_tick();
 8000e2c:	f7ff ffee 	bl	8000e0c <timer2_get_tick>
 8000e30:	60f8      	str	r0, [r7, #12]
    while ((timer2_get_tick() - start) < ms) {
 8000e32:	bf00      	nop
 8000e34:	f7ff ffea 	bl	8000e0c <timer2_get_tick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad2      	subs	r2, r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3f7      	bcc.n	8000e34 <delay_ms+0x10>
    }
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <NVIC_EnableIRQ>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e56:	4909      	ldr	r1, [pc, #36]	; (8000e7c <NVIC_EnableIRQ+0x30>)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	f002 021f 	and.w	r2, r2, #31
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <uart_init_all>:
uint8_t m_uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
volatile uint32_t m_old_uart1_dma_rx_pos = 0;
volatile bool rx_line_ready = false;

void uart_init_all(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000e84:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <uart_init_all+0x104>)
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <uart_init_all+0x104>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000e90:	4a3c      	ldr	r2, [pc, #240]	; (8000f84 <uart_init_all+0x104>)
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <uart_init_all+0x104>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44

    GPIOA->MODER &= ~((3U << (9 * 2)) | (3U << (10 * 2)));
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <uart_init_all+0x108>)
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <uart_init_all+0x108>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000ea6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (9 * 2)) | (2U << (10 * 2)));
 8000ea8:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <uart_init_all+0x108>)
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <uart_init_all+0x108>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000eb2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <uart_init_all+0x108>)
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <uart_init_all+0x108>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ebe:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= ((7U << (4 * 1)) | (7U << (4 * 2)));
 8000ec0:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <uart_init_all+0x108>)
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <uart_init_all+0x108>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000eca:	6253      	str	r3, [r2, #36]	; 0x24

    USART1->BRR = 16000000 / 115200;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <uart_init_all+0x10c>)
 8000ece:	228a      	movs	r2, #138	; 0x8a
 8000ed0:	811a      	strh	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <uart_init_all+0x10c>)
 8000ed4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ed8:	819a      	strh	r2, [r3, #12]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <uart_init_all+0x104>)
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <uart_init_all+0x104>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));
 8000ee6:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <uart_init_all+0x108>)
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <uart_init_all+0x108>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ef0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2U << (2 * 2)) | (2U << (3 * 2)));
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <uart_init_all+0x108>)
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <uart_init_all+0x108>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000efc:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <uart_init_all+0x108>)
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <uart_init_all+0x108>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f08:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7U << (4 * 2)) | (7U << (4 * 3)));
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <uart_init_all+0x108>)
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <uart_init_all+0x108>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000f14:	6213      	str	r3, [r2, #32]

    USART2->BRR = 16000000 / 115200;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <uart_init_all+0x110>)
 8000f18:	228a      	movs	r2, #138	; 0x8a
 8000f1a:	811a      	strh	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <uart_init_all+0x110>)
 8000f1e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000f22:	819a      	strh	r2, [r3, #12]

    USART1->CR3 |= USART_CR3_DMAR;
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <uart_init_all+0x10c>)
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <uart_init_all+0x10c>)
 8000f28:	8a9b      	ldrh	r3, [r3, #20]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	8293      	strh	r3, [r2, #20]

    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <uart_init_all+0x114>)
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <uart_init_all+0x114>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 8000f40:	bf00      	nop
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <uart_init_all+0x114>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <uart_init_all+0xc2>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <uart_init_all+0x114>)
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <uart_init_all+0x118>)
 8000f52:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <uart_init_all+0x114>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <uart_init_all+0x11c>)
 8000f58:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <uart_init_all+0x114>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <uart_init_all+0x114>)
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <uart_init_all+0x120>)
 8000f66:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <uart_init_all+0x114>)
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <uart_init_all+0x114>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f74:	203a      	movs	r0, #58	; 0x3a
 8000f76:	f7ff ff69 	bl	8000e4c <NVIC_EnableIRQ>
    uart_enable_uart1_idle_irq();
 8000f7a:	f000 f98b 	bl	8001294 <uart_enable_uart1_idle_irq>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40026440 	.word	0x40026440
 8000f98:	40011004 	.word	0x40011004
 8000f9c:	2000077c 	.word	0x2000077c
 8000fa0:	08000500 	.word	0x08000500

08000fa4 <uart_log>:

void uart_log(const char* msg)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    const char* p = msg;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
    while (*p) {
 8000fb0:	e00e      	b.n	8000fd0 <uart_log+0x2c>
        while (!(USART2->SR & USART_SR_TXE));
 8000fb2:	bf00      	nop
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <uart_log+0x6c>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f8      	beq.n	8000fb4 <uart_log+0x10>
        USART2->DR = *p++;
 8000fc2:	4913      	ldr	r1, [pc, #76]	; (8001010 <uart_log+0x6c>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60fa      	str	r2, [r7, #12]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	808b      	strh	r3, [r1, #4]
    while (*p) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1ec      	bne.n	8000fb2 <uart_log+0xe>
    }
    while (!(USART2->SR & USART_SR_TXE));
 8000fd8:	bf00      	nop
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <uart_log+0x6c>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f8      	beq.n	8000fda <uart_log+0x36>
    USART2->DR = '\r';
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <uart_log+0x6c>)
 8000fea:	220d      	movs	r2, #13
 8000fec:	809a      	strh	r2, [r3, #4]
    while (!(USART2->SR & USART_SR_TXE));
 8000fee:	bf00      	nop
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <uart_log+0x6c>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f8      	beq.n	8000ff0 <uart_log+0x4c>
    USART2->DR = '\n';
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <uart_log+0x6c>)
 8001000:	220a      	movs	r2, #10
 8001002:	809a      	strh	r2, [r3, #4]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40004400 	.word	0x40004400

08001014 <uart1_send_raw>:

void uart1_send_raw(const uint8_t* raw, uint32_t length)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < length; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e011      	b.n	8001048 <uart1_send_raw+0x34>
        while (!(USART1->SR & USART_SR_TXE));
 8001024:	bf00      	nop
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <uart1_send_raw+0x58>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f8      	beq.n	8001026 <uart1_send_raw+0x12>
        USART1->DR = raw[i];
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <uart1_send_raw+0x58>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	808b      	strh	r3, [r1, #4]
    for (uint32_t i = 0; i < length; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3e9      	bcc.n	8001024 <uart1_send_raw+0x10>
    }
    while (!(USART1->SR & USART_SR_TC));
 8001050:	bf00      	nop
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <uart1_send_raw+0x58>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f8      	beq.n	8001052 <uart1_send_raw+0x3e>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40011000 	.word	0x40011000

08001070 <gsm_hw_layer_uart_fill_rx>:

void gsm_hw_layer_uart_fill_rx(uint8_t *data, uint32_t length)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    static uint8_t line_buf[UART_LINE_MAX_LEN];
    static uint16_t line_idx = 0;

    for (uint32_t i = 0; i < length; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e033      	b.n	80010e8 <gsm_hw_layer_uart_fill_rx+0x78>
        if (line_idx < UART_LINE_MAX_LEN - 1) {
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b7e      	cmp	r3, #126	; 0x7e
 8001086:	d829      	bhi.n	80010dc <gsm_hw_layer_uart_fill_rx+0x6c>
            line_buf[line_idx++] = data[i];
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	b291      	uxth	r1, r2
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 8001092:	8011      	strh	r1, [r2, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010a0:	545a      	strb	r2, [r3, r1]
            if (data[i] == '\n' || data[i] == '\r') {
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d005      	beq.n	80010ba <gsm_hw_layer_uart_fill_rx+0x4a>
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b0d      	cmp	r3, #13
 80010b8:	d113      	bne.n	80010e2 <gsm_hw_layer_uart_fill_rx+0x72>
                if (line_idx > 1) {
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d908      	bls.n	80010d4 <gsm_hw_layer_uart_fill_rx+0x64>
                    line_buf[line_idx] = 0;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	5499      	strb	r1, [r3, r2]
                    uart_line_queue_push((char*)line_buf);
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <gsm_hw_layer_uart_fill_rx+0x8c>)
 80010d0:	f000 f938 	bl	8001344 <uart_line_queue_push>
                }
                line_idx = 0;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	e002      	b.n	80010e2 <gsm_hw_layer_uart_fill_rx+0x72>
            }
        } else {
            line_idx = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <gsm_hw_layer_uart_fill_rx+0x88>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3c7      	bcc.n	8001080 <gsm_hw_layer_uart_fill_rx+0x10>
        }
    }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000b2 	.word	0x200000b2
 80010fc:	200000b4 	.word	0x200000b4

08001100 <uart1_poll>:

void uart1_poll(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    if (!rx_line_ready) {
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <uart1_poll+0x108>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d172      	bne.n	80011fc <uart1_poll+0xfc>
        return;
    }
    rx_line_ready = false;
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <uart1_poll+0x108>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

    uint32_t pos = UART1_RX_BUFFER_SIZE - DMA2_Stream2->NDTR;
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <uart1_poll+0x10c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001124:	607b      	str	r3, [r7, #4]

    if (pos == m_old_uart1_dma_rx_pos) {
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <uart1_poll+0x110>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d067      	beq.n	8001200 <uart1_poll+0x100>
        return;
    }

    if (gsm_ppp_mode && ppp != NULL) {
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <uart1_poll+0x114>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02e      	beq.n	8001198 <uart1_poll+0x98>
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <uart1_poll+0x118>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02a      	beq.n	8001198 <uart1_poll+0x98>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <uart1_poll+0x110>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d90d      	bls.n	8001168 <uart1_poll+0x68>
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <uart1_poll+0x118>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <uart1_poll+0x110>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <uart1_poll+0x11c>)
 8001156:	1899      	adds	r1, r3, r2
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <uart1_poll+0x110>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f011 fbd5 	bl	8012910 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001166:	e03c      	b.n	80011e2 <uart1_poll+0xe2>
        } else {
            pppos_input(ppp, &m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <uart1_poll+0x118>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <uart1_poll+0x110>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <uart1_poll+0x11c>)
 8001172:	1899      	adds	r1, r3, r2
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <uart1_poll+0x110>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800117c:	461a      	mov	r2, r3
 800117e:	f011 fbc7 	bl	8012910 <pppos_input>
            if (pos > 0) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02c      	beq.n	80011e2 <uart1_poll+0xe2>
                pppos_input(ppp, &m_uart1_rx_buffer[0], pos);
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <uart1_poll+0x118>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4923      	ldr	r1, [pc, #140]	; (800121c <uart1_poll+0x11c>)
 8001190:	4618      	mov	r0, r3
 8001192:	f011 fbbd 	bl	8012910 <pppos_input>
        if (pos > m_old_uart1_dma_rx_pos) {
 8001196:	e024      	b.n	80011e2 <uart1_poll+0xe2>
            }
        }
    } else {
        if (pos > m_old_uart1_dma_rx_pos) {
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <uart1_poll+0x110>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90b      	bls.n	80011ba <uart1_poll+0xba>
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], pos - m_old_uart1_dma_rx_pos);
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <uart1_poll+0x110>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <uart1_poll+0x11c>)
 80011a8:	1898      	adds	r0, r3, r2
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <uart1_poll+0x110>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff ff5c 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
 80011b8:	e014      	b.n	80011e4 <uart1_poll+0xe4>
        } else {
            gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[m_old_uart1_dma_rx_pos], UART1_RX_BUFFER_SIZE - m_old_uart1_dma_rx_pos);
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <uart1_poll+0x110>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <uart1_poll+0x11c>)
 80011c0:	441a      	add	r2, r3
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <uart1_poll+0x110>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff4f 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
            if (pos > 0) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <uart1_poll+0xe4>
                gsm_hw_layer_uart_fill_rx(&m_uart1_rx_buffer[0], pos);
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <uart1_poll+0x11c>)
 80011dc:	f7ff ff48 	bl	8001070 <gsm_hw_layer_uart_fill_rx>
 80011e0:	e000      	b.n	80011e4 <uart1_poll+0xe4>
        if (pos > m_old_uart1_dma_rx_pos) {
 80011e2:	bf00      	nop
            }
        }
    }
    m_old_uart1_dma_rx_pos = pos;
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <uart1_poll+0x110>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
    if (m_old_uart1_dma_rx_pos == UART1_RX_BUFFER_SIZE)
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <uart1_poll+0x110>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f2:	d106      	bne.n	8001202 <uart1_poll+0x102>
        m_old_uart1_dma_rx_pos = 0;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <uart1_poll+0x110>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e002      	b.n	8001202 <uart1_poll+0x102>
        return;
 80011fc:	bf00      	nop
 80011fe:	e000      	b.n	8001202 <uart1_poll+0x102>
        return;
 8001200:	bf00      	nop
}
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000b0 	.word	0x200000b0
 800120c:	40026440 	.word	0x40026440
 8001210:	200000ac 	.word	0x200000ac
 8001214:	200005f8 	.word	0x200005f8
 8001218:	200005f4 	.word	0x200005f4
 800121c:	2000077c 	.word	0x2000077c

08001220 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    if (DMA2->LISR & DMA_LISR_TCIF2) {
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <DMA2_Stream2_IRQHandler+0x22>
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <DMA2_Stream2_IRQHandler+0x2c>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6093      	str	r3, [r2, #8]
        rx_line_ready = true;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <DMA2_Stream2_IRQHandler+0x30>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
    }
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40026400 	.word	0x40026400
 8001250:	200000b0 	.word	0x200000b0

08001254 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_IDLE) {
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <USART1_IRQHandler+0x38>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <USART1_IRQHandler+0x2c>
        volatile uint32_t tmp;
        tmp = USART1->SR;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <USART1_IRQHandler+0x38>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	607b      	str	r3, [r7, #4]
        tmp = USART1->DR;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <USART1_IRQHandler+0x38>)
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	607b      	str	r3, [r7, #4]
        (void)tmp;
 8001278:	687b      	ldr	r3, [r7, #4]
        rx_line_ready = true;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <USART1_IRQHandler+0x3c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
    }
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40011000 	.word	0x40011000
 8001290:	200000b0 	.word	0x200000b0

08001294 <uart_enable_uart1_idle_irq>:

void uart_enable_uart1_idle_irq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    USART1->CR1 |= USART_CR1_IDLEIE;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <uart_enable_uart1_idle_irq+0x20>)
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <uart_enable_uart1_idle_irq+0x20>)
 800129c:	899b      	ldrh	r3, [r3, #12]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	8193      	strh	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 80012a8:	2025      	movs	r0, #37	; 0x25
 80012aa:	f7ff fdcf 	bl	8000e4c <NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40011000 	.word	0x40011000

080012b8 <restart_dma2_stream2>:
    NVIC_DisableIRQ(USART1_IRQn);
    uart_log("UART1 IRQ disabled");
}

void restart_dma2_stream2(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    DMA2_Stream2->CR &= ~DMA_SxCR_EN;
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <restart_dma2_stream2+0x50>)
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <restart_dma2_stream2+0x50>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & DMA_SxCR_EN);
 80012c8:	bf00      	nop
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <restart_dma2_stream2+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <restart_dma2_stream2+0x12>

    DMA2_Stream2->PAR  = (uint32_t)&USART1->DR;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <restart_dma2_stream2+0x50>)
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <restart_dma2_stream2+0x54>)
 80012da:	609a      	str	r2, [r3, #8]
    DMA2_Stream2->M0AR = (uint32_t)m_uart1_rx_buffer;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <restart_dma2_stream2+0x50>)
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <restart_dma2_stream2+0x58>)
 80012e0:	60da      	str	r2, [r3, #12]
    DMA2_Stream2->NDTR = UART1_RX_BUFFER_SIZE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <restart_dma2_stream2+0x50>)
 80012e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e8:	605a      	str	r2, [r3, #4]

    DMA2_Stream2->CR =
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <restart_dma2_stream2+0x50>)
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <restart_dma2_stream2+0x5c>)
 80012ee:	601a      	str	r2, [r3, #0]
        (0 << 6) |
        (0 << 13) |
        (0 << 11) |
        (0 << 16);

    DMA2_Stream2->CR |= DMA_SxCR_EN;
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <restart_dma2_stream2+0x50>)
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <restart_dma2_stream2+0x50>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40026440 	.word	0x40026440
 800130c:	40011004 	.word	0x40011004
 8001310:	2000077c 	.word	0x2000077c
 8001314:	08000500 	.word	0x08000500

08001318 <uart_line_queue_init>:
static char uart_line_queue[UART_LINE_QUEUE_SIZE][UART_LINE_MAX_LEN];
static volatile uint8_t uart_line_queue_head = 0;
static volatile uint8_t uart_line_queue_tail = 0;
static volatile uint8_t uart_line_queue_count = 0;

void uart_line_queue_init(void) {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
    uart_line_queue_head = 0;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <uart_line_queue_init+0x20>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    uart_line_queue_tail = 0;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <uart_line_queue_init+0x24>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count = 0;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <uart_line_queue_init+0x28>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000534 	.word	0x20000534
 800133c:	20000535 	.word	0x20000535
 8001340:	20000536 	.word	0x20000536

08001344 <uart_line_queue_push>:

// Push a line into the queue, returns true if success, false if full
bool uart_line_queue_push(const char *line) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count >= UART_LINE_QUEUE_SIZE) return false;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <uart_line_queue_push+0x74>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b07      	cmp	r3, #7
 8001354:	d901      	bls.n	800135a <uart_line_queue_push+0x16>
 8001356:	2300      	movs	r3, #0
 8001358:	e029      	b.n	80013ae <uart_line_queue_push+0x6a>
    strncpy(uart_line_queue[uart_line_queue_head], line, UART_LINE_MAX_LEN - 1);
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <uart_line_queue_push+0x78>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	01db      	lsls	r3, r3, #7
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <uart_line_queue_push+0x7c>)
 8001364:	4413      	add	r3, r2
 8001366:	227f      	movs	r2, #127	; 0x7f
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f012 ff97 	bl	801429e <strncpy>
    uart_line_queue[uart_line_queue_head][UART_LINE_MAX_LEN - 1] = '\0';
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <uart_line_queue_push+0x78>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <uart_line_queue_push+0x7c>)
 8001378:	01db      	lsls	r3, r3, #7
 800137a:	4413      	add	r3, r2
 800137c:	337f      	adds	r3, #127	; 0x7f
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    uart_line_queue_head = (uart_line_queue_head + 1) % UART_LINE_QUEUE_SIZE;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <uart_line_queue_push+0x78>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	425a      	negs	r2, r3
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	f002 0207 	and.w	r2, r2, #7
 8001394:	bf58      	it	pl
 8001396:	4253      	negpl	r3, r2
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <uart_line_queue_push+0x78>)
 800139c:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count++;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <uart_line_queue_push+0x74>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <uart_line_queue_push+0x74>)
 80013aa:	701a      	strb	r2, [r3, #0]
    return true;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000536 	.word	0x20000536
 80013bc:	20000534 	.word	0x20000534
 80013c0:	20000134 	.word	0x20000134

080013c4 <uart_line_queue_pop>:

// Pop a line from the queue, returns true if a line was available
bool uart_line_queue_pop(char *out_line) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    if (uart_line_queue_count == 0) return false;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <uart_line_queue_pop+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <uart_line_queue_pop+0x16>
 80013d6:	2300      	movs	r3, #0
 80013d8:	e020      	b.n	800141c <uart_line_queue_pop+0x58>
    strncpy(out_line, uart_line_queue[uart_line_queue_tail], UART_LINE_MAX_LEN);
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <uart_line_queue_pop+0x64>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <uart_line_queue_pop+0x68>)
 80013e4:	4413      	add	r3, r2
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f012 ff57 	bl	801429e <strncpy>
    uart_line_queue_tail = (uart_line_queue_tail + 1) % UART_LINE_QUEUE_SIZE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <uart_line_queue_pop+0x64>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	425a      	negs	r2, r3
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	f002 0207 	and.w	r2, r2, #7
 8001402:	bf58      	it	pl
 8001404:	4253      	negpl	r3, r2
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <uart_line_queue_pop+0x64>)
 800140a:	701a      	strb	r2, [r3, #0]
    uart_line_queue_count--;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <uart_line_queue_pop+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <uart_line_queue_pop+0x60>)
 8001418:	701a      	strb	r2, [r3, #0]
    return true;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000536 	.word	0x20000536
 8001428:	20000535 	.word	0x20000535
 800142c:	20000134 	.word	0x20000134

08001430 <main>:
#include "hardware/button.h"

device_state_t current_device_state = DEVICE_STATE_BOOTING_GSM;
swich_state_t switch_state = swich_off;
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
    hardware_init();
 8001436:	f7ff fbbd 	bl	8000bb4 <hardware_init>
    uart_log("UART2 log test");
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <main+0x5c>)
 800143c:	f7ff fdb2 	bl	8000fa4 <uart_log>
    uint32_t start_tick = timer2_get_tick();
 8001440:	f7ff fce4 	bl	8000e0c <timer2_get_tick>
 8001444:	6078      	str	r0, [r7, #4]
    while (timer2_get_tick() - start_tick < 15000) {
 8001446:	f7ff fce1 	bl	8000e0c <timer2_get_tick>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <main+0x3e>
        led_update_by_device_state();
 8001462:	f000 f9c9 	bl	80017f8 <led_update_by_device_state>
        delay_ms(10);
 8001466:	200a      	movs	r0, #10
 8001468:	f7ff fcdc 	bl	8000e24 <delay_ms>
    while (timer2_get_tick() - start_tick < 15000) {
 800146c:	e7eb      	b.n	8001446 <main+0x16>
    }
    ppp_connection_init();
 800146e:	f000 fe0b 	bl	8002088 <ppp_connection_init>
    //led_stt_switch_set_state(1); 
    while (1) {      
        led_update_by_device_state();
 8001472:	f000 f9c1 	bl	80017f8 <led_update_by_device_state>
        led_stt_switch_control();
 8001476:	f000 f9fd 	bl	8001874 <led_stt_switch_control>
        button_logic_update();
 800147a:	f000 f81d 	bl	80014b8 <button_logic_update>
        uart1_poll();
 800147e:	f7ff fe3f 	bl	8001100 <uart1_poll>
        send_all_gsm_commands_with_check();
 8001482:	f7ff f94d 	bl	8000720 <send_all_gsm_commands_with_check>
        ppp_connection_poll();
 8001486:	f000 fe2d 	bl	80020e4 <ppp_connection_poll>
        led_update_by_device_state();
 800148a:	e7f2      	b.n	8001472 <main+0x42>
 800148c:	08014bbc 	.word	0x08014bbc

08001490 <toggle_switch_state>:
} button_state_t;

static button_state_t button_state = BUTTON_IDLE;
static uint32_t button_press_time = 0;

static void toggle_switch_state(void) {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <toggle_switch_state+0x24>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d103      	bne.n	80014a4 <toggle_switch_state+0x14>
        switch_state = swich_off;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <toggle_switch_state+0x24>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    } else {
        switch_state = swich_on;
    }
}
 80014a2:	e002      	b.n	80014aa <toggle_switch_state+0x1a>
        switch_state = swich_on;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <toggle_switch_state+0x24>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000538 	.word	0x20000538

080014b8 <button_logic_update>:

void button_logic_update(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
    uint32_t now = timer2_get_tick();
 80014be:	f7ff fca5 	bl	8000e0c <timer2_get_tick>
 80014c2:	6078      	str	r0, [r7, #4]

    switch (button_state)
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <button_logic_update+0x90>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <button_logic_update+0x1a>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d00f      	beq.n	80014f0 <button_logic_update+0x38>

                button_state = BUTTON_IDLE;
            }
            break;
    }
 80014d0:	e036      	b.n	8001540 <button_logic_update+0x88>
            if (g_button_pressed_flag)
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <button_logic_update+0x94>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d02e      	beq.n	800153a <button_logic_update+0x82>
                g_button_pressed_flag = 0;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <button_logic_update+0x94>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
                button_press_time = now;
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <button_logic_update+0x98>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
                button_state = BUTTON_PRESSED_WAIT_RELEASE;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <button_logic_update+0x90>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
            break;
 80014ee:	e024      	b.n	800153a <button_logic_update+0x82>
            if (g_button_released_flag)
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <button_logic_update+0x9c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d021      	beq.n	800153e <button_logic_update+0x86>
                g_button_released_flag = 0;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <button_logic_update+0x9c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
                uint32_t duration = now - button_press_time;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <button_logic_update+0x98>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	603b      	str	r3, [r7, #0]
                if (duration < 5000) {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001510:	4293      	cmp	r3, r2
 8001512:	d802      	bhi.n	800151a <button_logic_update+0x62>
                    toggle_switch_state();
 8001514:	f7ff ffbc 	bl	8001490 <toggle_switch_state>
 8001518:	e00b      	b.n	8001532 <button_logic_update+0x7a>
                else if (duration < 10000) {
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001520:	4293      	cmp	r3, r2
 8001522:	d803      	bhi.n	800152c <button_logic_update+0x74>
                    uart_log("5<s < 10s");
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <button_logic_update+0xa0>)
 8001526:	f7ff fd3d 	bl	8000fa4 <uart_log>
 800152a:	e002      	b.n	8001532 <button_logic_update+0x7a>
                    uart_log("10s");
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <button_logic_update+0xa4>)
 800152e:	f7ff fd39 	bl	8000fa4 <uart_log>
                button_state = BUTTON_IDLE;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <button_logic_update+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
            break;
 8001538:	e001      	b.n	800153e <button_logic_update+0x86>
            break;
 800153a:	bf00      	nop
 800153c:	e000      	b.n	8001540 <button_logic_update+0x88>
            break;
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000539 	.word	0x20000539
 800154c:	200000a0 	.word	0x200000a0
 8001550:	2000053c 	.word	0x2000053c
 8001554:	200000a1 	.word	0x200000a1
 8001558:	08014bcc 	.word	0x08014bcc
 800155c:	08014bd8 	.word	0x08014bd8

08001560 <led_4g_blink_200_200>:
#include "middle/led_logic.h"
#include "hardware/led.h"
#include "hardware/timer.h"
#include "main.h"

void led_4g_blink_200_200(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 8001566:	f7ff fc51 	bl	8000e0c <timer2_get_tick>
 800156a:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <led_4g_blink_200_200+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d202      	bcs.n	800157c <led_4g_blink_200_200+0x1c>
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <led_4g_blink_200_200+0x68>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]

    if (led_state) {
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <led_4g_blink_200_200+0x6c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <led_4g_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <led_4g_blink_200_200+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2bc7      	cmp	r3, #199	; 0xc7
 800158e:	d916      	bls.n	80015be <led_4g_blink_200_200+0x5e>
            led_4g_off();
 8001590:	f7ff fba6 	bl	8000ce0 <led_4g_off>
            led_state = 0;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <led_4g_blink_200_200+0x6c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <led_4g_blink_200_200+0x68>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
            led_4g_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80015a0:	e00d      	b.n	80015be <led_4g_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <led_4g_blink_200_200+0x68>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2bc7      	cmp	r3, #199	; 0xc7
 80015ac:	d907      	bls.n	80015be <led_4g_blink_200_200+0x5e>
            led_4g_on();
 80015ae:	f7ff fb8b 	bl	8000cc8 <led_4g_on>
            led_state = 1;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <led_4g_blink_200_200+0x6c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <led_4g_blink_200_200+0x68>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000540 	.word	0x20000540
 80015cc:	20000544 	.word	0x20000544

080015d0 <led_4g_blink_200_500_200_2000>:

void led_4g_blink_200_500_200_2000(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 80015d6:	f7ff fc19 	bl	8000e0c <timer2_get_tick>
 80015da:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d205      	bcs.n	80015f2 <led_4g_blink_200_500_200_2000+0x22>
        last_tick = now;
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
        phase = 0;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d84f      	bhi.n	800169a <led_4g_blink_200_500_200_2000+0xca>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <led_4g_blink_200_500_200_2000+0x30>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001611 	.word	0x08001611
 8001604:	0800162f 	.word	0x0800162f
 8001608:	0800164f 	.word	0x0800164f
 800160c:	0800166d 	.word	0x0800166d
        case 0:
            led_4g_on();
 8001610:	f7ff fb5a 	bl	8000cc8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2bc7      	cmp	r3, #199	; 0xc7
 800161e:	d935      	bls.n	800168c <led_4g_blink_200_500_200_2000+0xbc>
                last_tick = now;
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
                phase = 1;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800162c:	e02e      	b.n	800168c <led_4g_blink_200_500_200_2000+0xbc>
        case 1:
            led_4g_off();
 800162e:	f7ff fb57 	bl	8000ce0 <led_4g_off>
            if (now - last_tick >= 500) {
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800163e:	d327      	bcc.n	8001690 <led_4g_blink_200_500_200_2000+0xc0>
                last_tick = now;
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
                phase = 2;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800164c:	e020      	b.n	8001690 <led_4g_blink_200_500_200_2000+0xc0>
        case 2:
            led_4g_on();
 800164e:	f7ff fb3b 	bl	8000cc8 <led_4g_on>
            if (now - last_tick >= 200) {
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2bc7      	cmp	r3, #199	; 0xc7
 800165c:	d91a      	bls.n	8001694 <led_4g_blink_200_500_200_2000+0xc4>
                last_tick = now;
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
                phase = 3;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001666:	2203      	movs	r2, #3
 8001668:	701a      	strb	r2, [r3, #0]
            }
            break;
 800166a:	e013      	b.n	8001694 <led_4g_blink_200_500_200_2000+0xc4>
        case 3:
            led_4g_off();
 800166c:	f7ff fb38 	bl	8000ce0 <led_4g_off>
            if (now - last_tick >= 2000) {
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800167c:	d30c      	bcc.n	8001698 <led_4g_blink_200_500_200_2000+0xc8>
                last_tick = now;
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <led_4g_blink_200_500_200_2000+0xd4>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
                phase = 0;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <led_4g_blink_200_500_200_2000+0xd8>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
            }
            break;
 800168a:	e005      	b.n	8001698 <led_4g_blink_200_500_200_2000+0xc8>
            break;
 800168c:	bf00      	nop
 800168e:	e004      	b.n	800169a <led_4g_blink_200_500_200_2000+0xca>
            break;
 8001690:	bf00      	nop
 8001692:	e002      	b.n	800169a <led_4g_blink_200_500_200_2000+0xca>
            break;
 8001694:	bf00      	nop
 8001696:	e000      	b.n	800169a <led_4g_blink_200_500_200_2000+0xca>
            break;
 8001698:	bf00      	nop
    }
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000548 	.word	0x20000548
 80016a8:	2000054c 	.word	0x2000054c

080016ac <led_stt_blink_200_200>:

void led_stt_blink_200_200(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t led_state = 0;
    uint32_t now = timer2_get_tick();
 80016b2:	f7ff fbab 	bl	8000e0c <timer2_get_tick>
 80016b6:	6078      	str	r0, [r7, #4]

    if (now < last_tick) last_tick = now;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <led_stt_blink_200_200+0x68>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d202      	bcs.n	80016c8 <led_stt_blink_200_200+0x1c>
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <led_stt_blink_200_200+0x68>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6013      	str	r3, [r2, #0]

    if (led_state) {
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <led_stt_blink_200_200+0x6c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <led_stt_blink_200_200+0x42>
        if (now - last_tick >= 200) {
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <led_stt_blink_200_200+0x68>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2bc7      	cmp	r3, #199	; 0xc7
 80016da:	d916      	bls.n	800170a <led_stt_blink_200_200+0x5e>
            led_stt_off();
 80016dc:	f7ff fb16 	bl	8000d0c <led_stt_off>
            led_state = 0;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <led_stt_blink_200_200+0x6c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <led_stt_blink_200_200+0x68>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6013      	str	r3, [r2, #0]
            led_stt_on();
            led_state = 1;
            last_tick = now;
        }
    }
}
 80016ec:	e00d      	b.n	800170a <led_stt_blink_200_200+0x5e>
        if (now - last_tick >= 200) {
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <led_stt_blink_200_200+0x68>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2bc7      	cmp	r3, #199	; 0xc7
 80016f8:	d907      	bls.n	800170a <led_stt_blink_200_200+0x5e>
            led_stt_on();
 80016fa:	f7ff fafd 	bl	8000cf8 <led_stt_on>
            led_state = 1;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <led_stt_blink_200_200+0x6c>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
            last_tick = now;
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <led_stt_blink_200_200+0x68>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000550 	.word	0x20000550
 8001718:	20000554 	.word	0x20000554

0800171c <led_stt_blink_200_500_200_2000>:

void led_stt_blink_200_500_200_2000(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t phase = 0;
    uint32_t now = timer2_get_tick();
 8001722:	f7ff fb73 	bl	8000e0c <timer2_get_tick>
 8001726:	6078      	str	r0, [r7, #4]

    if (now < last_tick) {
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d205      	bcs.n	800173e <led_stt_blink_200_500_200_2000+0x22>
        last_tick = now;
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6013      	str	r3, [r2, #0]
        phase = 0;
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    }

    switch (phase) {
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d84f      	bhi.n	80017e6 <led_stt_blink_200_500_200_2000+0xca>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <led_stt_blink_200_500_200_2000+0x30>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	0800177b 	.word	0x0800177b
 8001754:	0800179b 	.word	0x0800179b
 8001758:	080017b9 	.word	0x080017b9
        case 0:
            led_stt_on();
 800175c:	f7ff facc 	bl	8000cf8 <led_stt_on>
            if (now - last_tick >= 200) {
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2bc7      	cmp	r3, #199	; 0xc7
 800176a:	d935      	bls.n	80017d8 <led_stt_blink_200_500_200_2000+0xbc>
                last_tick = now;
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
                phase = 1;
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001778:	e02e      	b.n	80017d8 <led_stt_blink_200_500_200_2000+0xbc>
        case 1:
            led_stt_off();
 800177a:	f7ff fac7 	bl	8000d0c <led_stt_off>
            if (now - last_tick >= 500) {
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800178a:	d327      	bcc.n	80017dc <led_stt_blink_200_500_200_2000+0xc0>
                last_tick = now;
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
                phase = 2;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 8001794:	2202      	movs	r2, #2
 8001796:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001798:	e020      	b.n	80017dc <led_stt_blink_200_500_200_2000+0xc0>
        case 2:
            led_stt_on();
 800179a:	f7ff faad 	bl	8000cf8 <led_stt_on>
            if (now - last_tick >= 200) {
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2bc7      	cmp	r3, #199	; 0xc7
 80017a8:	d91a      	bls.n	80017e0 <led_stt_blink_200_500_200_2000+0xc4>
                last_tick = now;
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6013      	str	r3, [r2, #0]
                phase = 3;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 80017b2:	2203      	movs	r2, #3
 80017b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017b6:	e013      	b.n	80017e0 <led_stt_blink_200_500_200_2000+0xc4>
        case 3:
            led_stt_off();
 80017b8:	f7ff faa8 	bl	8000d0c <led_stt_off>
            if (now - last_tick >= 2000) {
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017c8:	d30c      	bcc.n	80017e4 <led_stt_blink_200_500_200_2000+0xc8>
                last_tick = now;
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <led_stt_blink_200_500_200_2000+0xd4>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6013      	str	r3, [r2, #0]
                phase = 0;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <led_stt_blink_200_500_200_2000+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017d6:	e005      	b.n	80017e4 <led_stt_blink_200_500_200_2000+0xc8>
            break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <led_stt_blink_200_500_200_2000+0xca>
            break;
 80017e4:	bf00      	nop
    }
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000558 	.word	0x20000558
 80017f4:	2000055c 	.word	0x2000055c

080017f8 <led_update_by_device_state>:

void led_update_by_device_state(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    switch (current_device_state) {
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <led_update_by_device_state+0x78>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d82d      	bhi.n	8001860 <led_update_by_device_state+0x68>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <led_update_by_device_state+0x14>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	08001825 	.word	0x08001825
 8001810:	0800182f 	.word	0x0800182f
 8001814:	08001839 	.word	0x08001839
 8001818:	08001843 	.word	0x08001843
 800181c:	0800184d 	.word	0x0800184d
 8001820:	08001857 	.word	0x08001857
        case DEVICE_STATE_BOOTING_GSM:
            led_4g_blink_200_200();
 8001824:	f7ff fe9c 	bl	8001560 <led_4g_blink_200_200>
            led_stt_off();
 8001828:	f7ff fa70 	bl	8000d0c <led_stt_off>
            break;
 800182c:	e01d      	b.n	800186a <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_READY:
            led_4g_on();
 800182e:	f7ff fa4b 	bl	8000cc8 <led_4g_on>
            led_stt_off();
 8001832:	f7ff fa6b 	bl	8000d0c <led_stt_off>
            break;
 8001836:	e018      	b.n	800186a <led_update_by_device_state+0x72>

        case DEVICE_STATE_GSM_ERROR:
            led_4g_blink_200_500_200_2000();
 8001838:	f7ff feca 	bl	80015d0 <led_4g_blink_200_500_200_2000>
            led_stt_off();
 800183c:	f7ff fa66 	bl	8000d0c <led_stt_off>
            break;
 8001840:	e013      	b.n	800186a <led_update_by_device_state+0x72>

        case DEVICE_STATE_BOOTING_DEVICE:
            led_stt_blink_200_200();
 8001842:	f7ff ff33 	bl	80016ac <led_stt_blink_200_200>
            led_4g_on();
 8001846:	f7ff fa3f 	bl	8000cc8 <led_4g_on>
            break;
 800184a:	e00e      	b.n	800186a <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_READY:
            led_stt_on();
 800184c:	f7ff fa54 	bl	8000cf8 <led_stt_on>
            led_4g_on();
 8001850:	f7ff fa3a 	bl	8000cc8 <led_4g_on>
            break;
 8001854:	e009      	b.n	800186a <led_update_by_device_state+0x72>

        case DEVICE_STATE_DEVICE_ERROR:
            led_stt_blink_200_500_200_2000();
 8001856:	f7ff ff61 	bl	800171c <led_stt_blink_200_500_200_2000>
            led_4g_on();
 800185a:	f7ff fa35 	bl	8000cc8 <led_4g_on>
            break;
 800185e:	e004      	b.n	800186a <led_update_by_device_state+0x72>
        default:
            led_4g_off();
 8001860:	f7ff fa3e 	bl	8000ce0 <led_4g_off>
            led_stt_off();
 8001864:	f7ff fa52 	bl	8000d0c <led_stt_off>
            break;
 8001868:	bf00      	nop
    }
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000537 	.word	0x20000537

08001874 <led_stt_switch_control>:

uint8_t led_stt_switch_read_state(void) {
    return (switch_state == swich_on) ? 1 : 0;
}

void led_stt_switch_control(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
    if (switch_state == swich_on) {
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <led_stt_switch_control+0x1c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <led_stt_switch_control+0x12>
        led_stt_switch_on();
 8001880:	f7ff fa4e 	bl	8000d20 <led_stt_switch_on>
    } else {
        led_stt_switch_off();
    }
 8001884:	e001      	b.n	800188a <led_stt_switch_control+0x16>
        led_stt_switch_off();
 8001886:	f7ff fa55 	bl	8000d34 <led_stt_switch_off>
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000538 	.word	0x20000538

08001894 <mqtt_try_reconnect>:
static int mqtt_reconnect_attempts = 0;
#define MQTT_MAX_RECONNECT_ATTEMPTS 10

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status);

static void mqtt_try_reconnect(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af02      	add	r7, sp, #8
    if (mqtt_reconnect_attempts < MQTT_MAX_RECONNECT_ATTEMPTS) {
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <mqtt_try_reconnect+0x54>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b09      	cmp	r3, #9
 80018a0:	dc18      	bgt.n	80018d4 <mqtt_try_reconnect+0x40>
        mqtt_reconnect_attempts++;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <mqtt_try_reconnect+0x54>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <mqtt_try_reconnect+0x54>)
 80018aa:	6013      	str	r3, [r2, #0]
        uart_log("MQTT reconnecting...");
 80018ac:	480f      	ldr	r0, [pc, #60]	; (80018ec <mqtt_try_reconnect+0x58>)
 80018ae:	f7ff fb79 	bl	8000fa4 <uart_log>
        delay_ms(2000); 
 80018b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018b6:	f7ff fab5 	bl	8000e24 <delay_ms>
        mqtt_client_connect(mqtt_client,
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <mqtt_try_reconnect+0x5c>)
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <mqtt_try_reconnect+0x60>)
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <mqtt_try_reconnect+0x60>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <mqtt_try_reconnect+0x64>)
 80018c8:	f240 725b 	movw	r2, #1883	; 0x75b
 80018cc:	490b      	ldr	r1, [pc, #44]	; (80018fc <mqtt_try_reconnect+0x68>)
 80018ce:	f002 f84d 	bl	800396c <mqtt_client_connect>
            &mqtt_client_info);
    } else {
        uart_log("MQTT reconnect failed too many times!");
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
    }
}
 80018d2:	e005      	b.n	80018e0 <mqtt_try_reconnect+0x4c>
        uart_log("MQTT reconnect failed too many times!");
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <mqtt_try_reconnect+0x6c>)
 80018d6:	f7ff fb65 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <mqtt_try_reconnect+0x70>)
 80018dc:	2205      	movs	r2, #5
 80018de:	701a      	strb	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200005e8 	.word	0x200005e8
 80018ec:	08014bf0 	.word	0x08014bf0
 80018f0:	20000560 	.word	0x20000560
 80018f4:	08017b28 	.word	0x08017b28
 80018f8:	08001a5d 	.word	0x08001a5d
 80018fc:	20000000 	.word	0x20000000
 8001900:	08014c08 	.word	0x08014c08
 8001904:	20000537 	.word	0x20000537

08001908 <mqtt_incoming_publish_cb>:

static void
mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0a6      	sub	sp, #152	; 0x98
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
    snprintf(last_topic, sizeof(last_topic), "%s", topic);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <mqtt_incoming_publish_cb+0x3c>)
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <mqtt_incoming_publish_cb+0x40>)
 800191c:	f012 fc28 	bl	8014170 <sniprintf>
    char log_buf[128];
    snprintf(log_buf, sizeof(log_buf), "Incoming publish: topic %s, len %d", topic, (int)tot_len);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f107 0010 	add.w	r0, r7, #16
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <mqtt_incoming_publish_cb+0x44>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	f012 fc1f 	bl	8014170 <sniprintf>
    uart_log(log_buf);
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fb34 	bl	8000fa4 <uart_log>
}
 800193c:	bf00      	nop
 800193e:	3790      	adds	r7, #144	; 0x90
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	08014c30 	.word	0x08014c30
 8001948:	20000564 	.word	0x20000564
 800194c:	08014c34 	.word	0x08014c34

08001950 <mqtt_incoming_data_cb>:

static void
mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08d      	sub	sp, #52	; 0x34
 8001954:	af04      	add	r7, sp, #16
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	460b      	mov	r3, r1
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4613      	mov	r3, r2
 8001964:	717b      	strb	r3, [r7, #5]
    uart_log("Received data:");
 8001966:	4834      	ldr	r0, [pc, #208]	; (8001a38 <mqtt_incoming_data_cb+0xe8>)
 8001968:	f7ff fb1c 	bl	8000fa4 <uart_log>
    uart_log((const char *)data);
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f7ff fb19 	bl	8000fa4 <uart_log>

    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <mqtt_incoming_data_cb+0xec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d13d      	bne.n	80019f6 <mqtt_incoming_data_cb+0xa6>
 800197a:	4931      	ldr	r1, [pc, #196]	; (8001a40 <mqtt_incoming_data_cb+0xf0>)
 800197c:	4831      	ldr	r0, [pc, #196]	; (8001a44 <mqtt_incoming_data_cb+0xf4>)
 800197e:	f7fe fc27 	bl	80001d0 <strcmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d136      	bne.n	80019f6 <mqtt_incoming_data_cb+0xa6>
        uart_log("Received connect confirm, switching to main topics.");
 8001988:	482f      	ldr	r0, [pc, #188]	; (8001a48 <mqtt_incoming_data_cb+0xf8>)
 800198a:	f7ff fb0b 	bl	8000fa4 <uart_log>
        mqtt_sub_unsub(mqtt_client, "start/device/cmd", 0, NULL, NULL, 0); 
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <mqtt_incoming_data_cb+0xfc>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	2200      	movs	r2, #0
 800199e:	4928      	ldr	r1, [pc, #160]	; (8001a40 <mqtt_incoming_data_cb+0xf0>)
 80019a0:	f001 fecc 	bl	800373c <mqtt_sub_unsub>
        mqtt_sub_unsub(mqtt_client, "device/switch1/cmd", 0, NULL, NULL, 1); 
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <mqtt_incoming_data_cb+0xfc>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	2200      	movs	r2, #0
 80019b4:	4926      	ldr	r1, [pc, #152]	; (8001a50 <mqtt_incoming_data_cb+0x100>)
 80019b6:	f001 fec1 	bl	800373c <mqtt_sub_unsub>
        const char *topic = "device/switch1/status";
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <mqtt_incoming_data_cb+0x104>)
 80019bc:	61fb      	str	r3, [r7, #28]
        const char *message = "{\"msg\": \"OFF\"}";
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <mqtt_incoming_data_cb+0x108>)
 80019c0:	61bb      	str	r3, [r7, #24]
        mqtt_publish(mqtt_client, topic, message, strlen(message), 0, 0, NULL, NULL);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <mqtt_incoming_data_cb+0xfc>)
 80019c4:	681c      	ldr	r4, [r3, #0]
 80019c6:	69b8      	ldr	r0, [r7, #24]
 80019c8:	f7fe fc0c 	bl	80001e4 <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2300      	movs	r3, #0
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	69f9      	ldr	r1, [r7, #28]
 80019e6:	4620      	mov	r0, r4
 80019e8:	f001 fdca 	bl	8003580 <mqtt_publish>
        mqtt_phase = 1;
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <mqtt_incoming_data_cb+0xec>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    if (mqtt_phase == 0 && strcmp(last_topic, "start/device/cmd") == 0) {
 80019f2:	bf00      	nop
        int cmd_code = mqtt_parse_command(last_topic, data, len);
        if (cmd_code == 1 || cmd_code == 2) {
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
        }
    }
}
 80019f4:	e01b      	b.n	8001a2e <mqtt_incoming_data_cb+0xde>
    } else if (mqtt_phase == 1 && strcmp(last_topic, "device/switch1/cmd") == 0) {
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <mqtt_incoming_data_cb+0xec>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d117      	bne.n	8001a2e <mqtt_incoming_data_cb+0xde>
 80019fe:	4914      	ldr	r1, [pc, #80]	; (8001a50 <mqtt_incoming_data_cb+0x100>)
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <mqtt_incoming_data_cb+0xf4>)
 8001a02:	f7fe fbe5 	bl	80001d0 <strcmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d110      	bne.n	8001a2e <mqtt_incoming_data_cb+0xde>
        int cmd_code = mqtt_parse_command(last_topic, data, len);
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <mqtt_incoming_data_cb+0xf4>)
 8001a14:	f000 f946 	bl	8001ca4 <mqtt_parse_command>
 8001a18:	6178      	str	r0, [r7, #20]
        if (cmd_code == 1 || cmd_code == 2) {
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d002      	beq.n	8001a26 <mqtt_incoming_data_cb+0xd6>
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d103      	bne.n	8001a2e <mqtt_incoming_data_cb+0xde>
            mqtt_handle_command_and_respond("device/switch1/status", cmd_code);
 8001a26:	6979      	ldr	r1, [r7, #20]
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <mqtt_incoming_data_cb+0x104>)
 8001a2a:	f000 f8e5 	bl	8001bf8 <mqtt_handle_command_and_respond>
}
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	08014c58 	.word	0x08014c58
 8001a3c:	200005e4 	.word	0x200005e4
 8001a40:	08014c68 	.word	0x08014c68
 8001a44:	20000564 	.word	0x20000564
 8001a48:	08014c7c 	.word	0x08014c7c
 8001a4c:	20000560 	.word	0x20000560
 8001a50:	08014cb0 	.word	0x08014cb0
 8001a54:	08014cc4 	.word	0x08014cc4
 8001a58:	08014cdc 	.word	0x08014cdc

08001a5c <mqtt_connection_cb>:

static void
mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08e      	sub	sp, #56	; 0x38
 8001a60:	af04      	add	r7, sp, #16
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80fb      	strh	r3, [r7, #6]
    const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24

    if (status == MQTT_CONNECT_ACCEPTED) {
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d153      	bne.n	8001b1c <mqtt_connection_cb+0xc0>
        uart_log("MQTT connection accepted!");
 8001a74:	482f      	ldr	r0, [pc, #188]	; (8001b34 <mqtt_connection_cb+0xd8>)
 8001a76:	f7ff fa95 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_READY;
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <mqtt_connection_cb+0xdc>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	701a      	strb	r2, [r3, #0]
        mqtt_reconnect_attempts = 0; 
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <mqtt_connection_cb+0xe0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        if (mqtt_phase == 1) {
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <mqtt_connection_cb+0xe4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d121      	bne.n	8001ad2 <mqtt_connection_cb+0x76>
            mqtt_sub_unsub(client, "device/switch1/cmd", 0, NULL, NULL, 1);
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	492a      	ldr	r1, [pc, #168]	; (8001b44 <mqtt_connection_cb+0xe8>)
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f001 fe4d 	bl	800373c <mqtt_sub_unsub>
            const char *topic = "device/switch1/status";
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <mqtt_connection_cb+0xec>)
 8001aa4:	623b      	str	r3, [r7, #32]
            const char *message = "{\"msg\": \"Reconnect broker\"}";
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <mqtt_connection_cb+0xf0>)
 8001aa8:	61fb      	str	r3, [r7, #28]
            mqtt_publish(client, topic, message, strlen(message), 0, 0, NULL, NULL);
 8001aaa:	69f8      	ldr	r0, [r7, #28]
 8001aac:	f7fe fb9a 	bl	80001e4 <strlen>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9303      	str	r3, [sp, #12]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f001 fd58 	bl	8003580 <mqtt_publish>
    } else {
        uart_log("MQTT connection failed!");
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
        mqtt_try_reconnect();
    }
}
 8001ad0:	e02c      	b.n	8001b2c <mqtt_connection_cb+0xd0>
            mqtt_phase = 0;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <mqtt_connection_cb+0xe4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
            mqtt_sub_unsub(client,
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	491a      	ldr	r1, [pc, #104]	; (8001b50 <mqtt_connection_cb+0xf4>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f001 fe28 	bl	800373c <mqtt_sub_unsub>
            const char *topic = "start/device/status";
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <mqtt_connection_cb+0xf8>)
 8001aee:	61bb      	str	r3, [r7, #24]
            const char *message = "{\"msg\": \"Connect broker\"}";
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <mqtt_connection_cb+0xfc>)
 8001af2:	617b      	str	r3, [r7, #20]
            mqtt_publish(client, topic, message, strlen(message), 0, 0, NULL, NULL);
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7fe fb75 	bl	80001e4 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	2300      	movs	r3, #0
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f001 fd33 	bl	8003580 <mqtt_publish>
}
 8001b1a:	e007      	b.n	8001b2c <mqtt_connection_cb+0xd0>
        uart_log("MQTT connection failed!");
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <mqtt_connection_cb+0x100>)
 8001b1e:	f7ff fa41 	bl	8000fa4 <uart_log>
        current_device_state = DEVICE_STATE_DEVICE_ERROR;
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <mqtt_connection_cb+0xdc>)
 8001b24:	2205      	movs	r2, #5
 8001b26:	701a      	strb	r2, [r3, #0]
        mqtt_try_reconnect();
 8001b28:	f7ff feb4 	bl	8001894 <mqtt_try_reconnect>
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	08014cec 	.word	0x08014cec
 8001b38:	20000537 	.word	0x20000537
 8001b3c:	200005e8 	.word	0x200005e8
 8001b40:	200005e4 	.word	0x200005e4
 8001b44:	08014cb0 	.word	0x08014cb0
 8001b48:	08014cc4 	.word	0x08014cc4
 8001b4c:	08014d08 	.word	0x08014d08
 8001b50:	08014c68 	.word	0x08014c68
 8001b54:	08014d24 	.word	0x08014d24
 8001b58:	08014d38 	.word	0x08014d38
 8001b5c:	08014d54 	.word	0x08014d54

08001b60 <mqtt_example_init>:

void
mqtt_example_init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af02      	add	r7, sp, #8
#if LWIP_TCP
  mqtt_client = mqtt_client_new();
 8001b66:	f001 fef7 	bl	8003958 <mqtt_client_new>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <mqtt_example_init+0x3c>)
 8001b6e:	601a      	str	r2, [r3, #0]

  mqtt_set_inpub_callback(mqtt_client,
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <mqtt_example_init+0x3c>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <mqtt_example_init+0x40>)
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <mqtt_example_init+0x44>)
 8001b78:	490b      	ldr	r1, [pc, #44]	; (8001ba8 <mqtt_example_init+0x48>)
 8001b7a:	f001 fec3 	bl	8003904 <mqtt_set_inpub_callback>
          mqtt_incoming_publish_cb,
          mqtt_incoming_data_cb,
          LWIP_CONST_CAST(void*, &mqtt_client_info));

  mqtt_client_connect(mqtt_client,
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <mqtt_example_init+0x3c>)
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <mqtt_example_init+0x40>)
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <mqtt_example_init+0x40>)
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <mqtt_example_init+0x4c>)
 8001b8c:	f240 725b 	movw	r2, #1883	; 0x75b
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <mqtt_example_init+0x50>)
 8001b92:	f001 feeb 	bl	800396c <mqtt_client_connect>
          &mqtt_ip, MQTT_PORT,
          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
          &mqtt_client_info);
#endif
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000560 	.word	0x20000560
 8001ba0:	08017b28 	.word	0x08017b28
 8001ba4:	08001951 	.word	0x08001951
 8001ba8:	08001909 	.word	0x08001909
 8001bac:	08001a5d 	.word	0x08001a5d
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <handle_led_stt_switch>:
extern mqtt_client_t* mqtt_client;
extern device_state_t current_device_state;
extern swich_state_t switch_state;

// Hàm xử lý bật/tắt led_stt_switch dựa vào mã lệnh
void handle_led_stt_switch(int cmd_code) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    if (cmd_code == 1) { // ON
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d106      	bne.n	8001bd0 <handle_led_stt_switch+0x1c>
        switch_state = swich_on;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <handle_led_stt_switch+0x38>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: ON");
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <handle_led_stt_switch+0x3c>)
 8001bca:	f7ff f9eb 	bl	8000fa4 <uart_log>
    } else if (cmd_code == 2) { // OFF
        switch_state = swich_off;
        uart_log("led_stt_switch: OFF");
    }
}
 8001bce:	e008      	b.n	8001be2 <handle_led_stt_switch+0x2e>
    } else if (cmd_code == 2) { // OFF
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d105      	bne.n	8001be2 <handle_led_stt_switch+0x2e>
        switch_state = swich_off;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <handle_led_stt_switch+0x38>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
        uart_log("led_stt_switch: OFF");
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <handle_led_stt_switch+0x40>)
 8001bde:	f7ff f9e1 	bl	8000fa4 <uart_log>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000538 	.word	0x20000538
 8001bf0:	08014d6c 	.word	0x08014d6c
 8001bf4:	08014d80 	.word	0x08014d80

08001bf8 <mqtt_handle_command_and_respond>:

void mqtt_handle_command_and_respond(const char* topic, int cmd_code) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b0b6      	sub	sp, #216	; 0xd8
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    char response_topic[64] = "device/switch1/status";
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <mqtt_handle_command_and_respond+0x98>)
 8001c04:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001c08:	461d      	mov	r5, r3
 8001c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c12:	6020      	str	r0, [r4, #0]
 8001c14:	3404      	adds	r4, #4
 8001c16:	8021      	strh	r1, [r4, #0]
 8001c18:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 8001c1c:	222a      	movs	r2, #42	; 0x2a
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f012 f99c 	bl	8013f5e <memset>
    char response_msg[128];

    // Xử lý bật/tắt led_stt_switch
    handle_led_stt_switch(cmd_code);
 8001c26:	6838      	ldr	r0, [r7, #0]
 8001c28:	f7ff ffc4 	bl	8001bb4 <handle_led_stt_switch>

    // Gửi trạng thái thiết bị lên MQTT với chuỗi trạng thái từ parser
    snprintf(response_msg, sizeof(response_msg),
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <mqtt_handle_command_and_respond+0x9c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f8cb 	bl	8001dcc <get_switch_state_string>
 8001c36:	4604      	mov	r4, r0
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <mqtt_handle_command_and_respond+0xa0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f88b 	bl	8001d58 <get_device_state_string>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f107 0008 	add.w	r0, r7, #8
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <mqtt_handle_command_and_respond+0xa4>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	f012 fa8e 	bl	8014170 <sniprintf>
             "{\"status\":\"%s\",\"state\":\"%s\"}",
             get_switch_state_string(switch_state),
             get_device_state_string(current_device_state));

    mqtt_publish(mqtt_client, response_topic, response_msg, strlen(response_msg), 0, 0, NULL, NULL);
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <mqtt_handle_command_and_respond+0xa8>)
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fac1 	bl	80001e4 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b298      	uxth	r0, r3
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9303      	str	r3, [sp, #12]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4620      	mov	r0, r4
 8001c82:	f001 fc7d 	bl	8003580 <mqtt_publish>
 8001c86:	bf00      	nop
 8001c88:	37c8      	adds	r7, #200	; 0xc8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08014db4 	.word	0x08014db4
 8001c94:	20000538 	.word	0x20000538
 8001c98:	20000537 	.word	0x20000537
 8001c9c:	08014d94 	.word	0x08014d94
 8001ca0:	20000560 	.word	0x20000560

08001ca4 <mqtt_parse_command>:
#include <stdio.h>
#include "hardware/uart.h"
#include "main.h"

// Trả về 1 nếu là ON, 2 nếu là OFF, 0 nếu không hợp lệ
int mqtt_parse_command(const char* topic, const uint8_t* data, uint16_t len) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	80fb      	strh	r3, [r7, #6]
    if (topic == NULL || data == NULL || len == 0) return 0;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <mqtt_parse_command+0x20>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <mqtt_parse_command+0x20>
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <mqtt_parse_command+0x24>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e039      	b.n	8001d3c <mqtt_parse_command+0x98>

    // Tìm chuỗi "msg"
    const char* msg_ptr = strstr((const char*)data, "\"msg\"");
 8001cc8:	491e      	ldr	r1, [pc, #120]	; (8001d44 <mqtt_parse_command+0xa0>)
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	f012 fafc 	bl	80142c8 <strstr>
 8001cd0:	61b8      	str	r0, [r7, #24]
    if (msg_ptr) {
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d030      	beq.n	8001d3a <mqtt_parse_command+0x96>
        const char* colon = strchr(msg_ptr, ':');
 8001cd8:	213a      	movs	r1, #58	; 0x3a
 8001cda:	69b8      	ldr	r0, [r7, #24]
 8001cdc:	f012 fabf 	bl	801425e <strchr>
 8001ce0:	6178      	str	r0, [r7, #20]
        if (colon) {
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d028      	beq.n	8001d3a <mqtt_parse_command+0x96>
            const char* value = colon + 1;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
            while (*value == ' ' || *value == '\"') value++;
 8001cee:	e002      	b.n	8001cf6 <mqtt_parse_command+0x52>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d0f8      	beq.n	8001cf0 <mqtt_parse_command+0x4c>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b22      	cmp	r3, #34	; 0x22
 8001d04:	d0f4      	beq.n	8001cf0 <mqtt_parse_command+0x4c>
            if (strncmp(value, "ON", 2) == 0) {
 8001d06:	2202      	movs	r2, #2
 8001d08:	490f      	ldr	r1, [pc, #60]	; (8001d48 <mqtt_parse_command+0xa4>)
 8001d0a:	69f8      	ldr	r0, [r7, #28]
 8001d0c:	f012 fab5 	bl	801427a <strncmp>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <mqtt_parse_command+0x7c>
                uart_log("MQTT CMD: ON");
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <mqtt_parse_command+0xa8>)
 8001d18:	f7ff f944 	bl	8000fa4 <uart_log>
                return 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00d      	b.n	8001d3c <mqtt_parse_command+0x98>
            }
            if (strncmp(value, "OFF", 3) == 0) {
 8001d20:	2203      	movs	r2, #3
 8001d22:	490b      	ldr	r1, [pc, #44]	; (8001d50 <mqtt_parse_command+0xac>)
 8001d24:	69f8      	ldr	r0, [r7, #28]
 8001d26:	f012 faa8 	bl	801427a <strncmp>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <mqtt_parse_command+0x96>
                uart_log("MQTT CMD: OFF");
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <mqtt_parse_command+0xb0>)
 8001d32:	f7ff f937 	bl	8000fa4 <uart_log>
                return 2;
 8001d36:	2302      	movs	r3, #2
 8001d38:	e000      	b.n	8001d3c <mqtt_parse_command+0x98>
            }
        }
    }
    return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	08014df4 	.word	0x08014df4
 8001d48:	08014dfc 	.word	0x08014dfc
 8001d4c:	08014e00 	.word	0x08014e00
 8001d50:	08014e10 	.word	0x08014e10
 8001d54:	08014e14 	.word	0x08014e14

08001d58 <get_device_state_string>:

const char* get_device_state_string(device_state_t state) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d81b      	bhi.n	8001da0 <get_device_state_string+0x48>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <get_device_state_string+0x18>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001d99 	.word	0x08001d99
 8001d84:	08001d9d 	.word	0x08001d9d
        case DEVICE_STATE_BOOTING_GSM:     return "BOOTING_GSM";
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <get_device_state_string+0x58>)
 8001d8a:	e00a      	b.n	8001da2 <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_READY:       return "GSM_READY";
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <get_device_state_string+0x5c>)
 8001d8e:	e008      	b.n	8001da2 <get_device_state_string+0x4a>
        case DEVICE_STATE_GSM_ERROR:       return "GSM_ERROR";
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <get_device_state_string+0x60>)
 8001d92:	e006      	b.n	8001da2 <get_device_state_string+0x4a>
        case DEVICE_STATE_BOOTING_DEVICE:  return "BOOTING_DEVICE";
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <get_device_state_string+0x64>)
 8001d96:	e004      	b.n	8001da2 <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_READY:    return "DEVICE_READY";
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <get_device_state_string+0x68>)
 8001d9a:	e002      	b.n	8001da2 <get_device_state_string+0x4a>
        case DEVICE_STATE_DEVICE_ERROR:    return "DEVICE_ERROR";
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <get_device_state_string+0x6c>)
 8001d9e:	e000      	b.n	8001da2 <get_device_state_string+0x4a>
        default:                           return "UNKNOWN";
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <get_device_state_string+0x70>)
    }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	08014e24 	.word	0x08014e24
 8001db4:	08014e30 	.word	0x08014e30
 8001db8:	08014e3c 	.word	0x08014e3c
 8001dbc:	08014e48 	.word	0x08014e48
 8001dc0:	08014e58 	.word	0x08014e58
 8001dc4:	08014e68 	.word	0x08014e68
 8001dc8:	08014e78 	.word	0x08014e78

08001dcc <get_switch_state_string>:

const char* get_switch_state_string(swich_state_t state) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <get_switch_state_string+0x18>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d103      	bne.n	8001de8 <get_switch_state_string+0x1c>
        case swich_on:  return "ON";
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <get_switch_state_string+0x2c>)
 8001de2:	e002      	b.n	8001dea <get_switch_state_string+0x1e>
        case swich_off: return "OFF";
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <get_switch_state_string+0x30>)
 8001de6:	e000      	b.n	8001dea <get_switch_state_string+0x1e>
        default:        return "UNKNOWN";
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <get_switch_state_string+0x34>)
    }
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	08014dfc 	.word	0x08014dfc
 8001dfc:	08014e10 	.word	0x08014e10
 8001e00:	08014e78 	.word	0x08014e78

08001e04 <sys_init>:
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/err.h"
#include "arch/sys_arch.h"

void sys_init(void) {}
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <sys_mutex_new>:

err_t sys_mutex_new(sys_mutex_t *mutex) { *mutex = 0; return ERR_OK; }
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	2300      	movs	r3, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex) { (void)mutex; }
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <sys_mutex_unlock>:
void sys_mutex_unlock(sys_mutex_t *mutex) { (void)mutex; }
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <sys_mbox_new>:
err_t sys_sem_new(sys_sem_t *sem, u8_t count) { *sem = 0; (void)count; return ERR_OK; }
void sys_sem_signal(sys_sem_t *sem) { (void)sem; }
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout) { (void)sem; (void)timeout; return 0; }
void sys_sem_free(sys_sem_t *sem) { (void)sem; }

err_t sys_mbox_new(sys_mbox_t *mbox, int size) { *mbox = 0; (void)size; return ERR_OK; }
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <sys_mbox_trypost>:
void sys_mbox_post(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; }
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg) { (void)mbox; (void)msg; return ERR_OK; }
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <sys_arch_mbox_fetch>:
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout) { (void)mbox; (void)msg; (void)timeout; return 0; }
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <sys_thread_new>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg) { (void)mbox; (void)msg; return 0; }
void sys_mbox_free(sys_mbox_t *mbox) { (void)mbox; }

sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio) { (void)name; (void)thread; (void)arg; (void)stacksize; (void)prio; return 0; }
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <lwip_win32_platform_diag>:
    (void)msg;
    while (1) { }
}

// Diagnostic output for LwIP (optional)
void lwip_win32_platform_diag(const char *msg) {
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
    // Optionally send to UART or ignore
    (void)msg;
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <sys_now>:
void sys_check_core_locking(void) {
    // No-op for baremetal
}

// Returns system time in ms (replace with your own timer if needed)
uint32_t sys_now(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
    // TODO: Thay thế bằng hàm trả về thời gian thực tế nếu bạn có timer
    static uint32_t fake_tick = 0;
    return fake_tick++;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <sys_now+0x18>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <sys_now+0x18>)
 8001ee4:	600a      	str	r2, [r1, #0]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	200005ec 	.word	0x200005ec

08001ef4 <sys_jiffies>:

// Returns system time in ticks (can be same as sys_now)
uint32_t sys_jiffies(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    return sys_now();
 8001ef8:	f7ff ffee 	bl	8001ed8 <sys_now>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <lwip_port_rand>:

// Returns a random 32-bit value (replace with your own RNG if needed)
uint32_t lwip_port_rand(void) {
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    static uint32_t seed = 123456789;
    seed = seed * 1103515245 + 12345;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <lwip_port_rand+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <lwip_port_rand+0x2c>)
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001f16:	3339      	adds	r3, #57	; 0x39
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <lwip_port_rand+0x28>)
 8001f1a:	6013      	str	r3, [r2, #0]
    return seed;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <lwip_port_rand+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000004 	.word	0x20000004
 8001f30:	41c64e6d 	.word	0x41c64e6d

08001f34 <sys_arch_protect>:

// --- LwIP baremetal porting functions ---

// sys_arch_protect/sys_arch_unprotect: No real protection needed for single-thread
unsigned long sys_arch_protect(void) {
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
    return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <sys_arch_unprotect>:
void sys_arch_unprotect(unsigned long pval) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    (void)pval;
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <ppp_output_callback>:
volatile bool gsm_ppp_mode = false;

static struct netif ppp_netif;
static bool ppp_connected = false;

static u32_t ppp_output_callback(ppp_pcb *pcb, const void *data, u32_t len, void *ctx) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
    (void)pcb;
    (void)ctx;
    uart1_send_raw((const uint8_t*)data, len);
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f7ff f853 	bl	8001014 <uart1_send_raw>
    return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ppp_status_cb>:

static void ppp_status_cb(ppp_pcb *pcb, int err_code, void *ctx) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09e      	sub	sp, #120	; 0x78
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
    (void)pcb;
    (void)ctx;
    switch (err_code) {
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <ppp_status_cb+0x18>
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d044      	beq.n	8002018 <ppp_status_cb+0xa0>
 8001f8e:	e050      	b.n	8002032 <ppp_status_cb+0xba>
        case PPPERR_NONE: {
            char log_buf[100];
            uart_log("PPP connected");
 8001f90:	4830      	ldr	r0, [pc, #192]	; (8002054 <ppp_status_cb+0xdc>)
 8001f92:	f7ff f807 	bl	8000fa4 <uart_log>
            ppp_connected = true;
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <ppp_status_cb+0xe0>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = true;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <ppp_status_cb+0xe4>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = true;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <ppp_status_cb+0xe8>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]

            sprintf(log_buf, "   IP address:  %s", ipaddr_ntoa(netif_ip4_addr(&ppp_netif)));
 8001fa8:	482e      	ldr	r0, [pc, #184]	; (8002064 <ppp_status_cb+0xec>)
 8001faa:	f002 fc7d 	bl	80048a8 <ip4addr_ntoa>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	492c      	ldr	r1, [pc, #176]	; (8002068 <ppp_status_cb+0xf0>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f011 fd94 	bl	8013ae4 <siprintf>
            uart_log(log_buf);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe ffef 	bl	8000fa4 <uart_log>
            sprintf(log_buf, "   Gateway:     %s", ipaddr_ntoa(netif_ip4_gw(&ppp_netif)));
 8001fc6:	4829      	ldr	r0, [pc, #164]	; (800206c <ppp_status_cb+0xf4>)
 8001fc8:	f002 fc6e 	bl	80048a8 <ip4addr_ntoa>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4927      	ldr	r1, [pc, #156]	; (8002070 <ppp_status_cb+0xf8>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f011 fd85 	bl	8013ae4 <siprintf>
            uart_log(log_buf);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffe0 	bl	8000fa4 <uart_log>
            sprintf(log_buf, "   Netmask:     %s", ipaddr_ntoa(netif_ip4_netmask(&ppp_netif)));
 8001fe4:	4823      	ldr	r0, [pc, #140]	; (8002074 <ppp_status_cb+0xfc>)
 8001fe6:	f002 fc5f 	bl	80048a8 <ip4addr_ntoa>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4921      	ldr	r1, [pc, #132]	; (8002078 <ppp_status_cb+0x100>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f011 fd76 	bl	8013ae4 <siprintf>
            uart_log(log_buf);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe ffd1 	bl	8000fa4 <uart_log>
            
            //uart_log("Waiting for PPP to stabilize...");
            delay_ms(2000);
 8002002:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002006:	f7fe ff0d 	bl	8000e24 <delay_ms>
            //uart_log("Testing Internet connection...");
            //test_tcp_connect_google();
            //uart_log("Internet connection test completed.");

            //uart_log("Initializing MQTT...");
            mqtt_example_init();
 800200a:	f7ff fda9 	bl	8001b60 <mqtt_example_init>
            uart_log("MQTT initialization completed.");
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <ppp_status_cb+0x104>)
 8002010:	f7fe ffc8 	bl	8000fa4 <uart_log>

            break;
 8002014:	bf00      	nop
 8002016:	e019      	b.n	800204c <ppp_status_cb+0xd4>
        }
        case PPPERR_USER:
            uart_log("PPP connection terminated by user");
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <ppp_status_cb+0x108>)
 800201a:	f7fe ffc3 	bl	8000fa4 <uart_log>
            ppp_connected = false;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <ppp_status_cb+0xe0>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <ppp_status_cb+0xe4>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <ppp_status_cb+0xe8>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
            break;
 8002030:	e00c      	b.n	800204c <ppp_status_cb+0xd4>
        default:
            uart_log("PPP connection error");
 8002032:	4814      	ldr	r0, [pc, #80]	; (8002084 <ppp_status_cb+0x10c>)
 8002034:	f7fe ffb6 	bl	8000fa4 <uart_log>
            ppp_connected = false;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <ppp_status_cb+0xe0>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
            gsm_ppp_mode = false;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <ppp_status_cb+0xe4>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
            ppp_connection_established = false;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <ppp_status_cb+0xe8>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
            break;
 800204a:	bf00      	nop
    }
}
 800204c:	bf00      	nop
 800204e:	3778      	adds	r7, #120	; 0x78
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08014e80 	.word	0x08014e80
 8002058:	2000062c 	.word	0x2000062c
 800205c:	200005f8 	.word	0x200005f8
 8002060:	200005f0 	.word	0x200005f0
 8002064:	20000600 	.word	0x20000600
 8002068:	08014e90 	.word	0x08014e90
 800206c:	20000608 	.word	0x20000608
 8002070:	08014ea4 	.word	0x08014ea4
 8002074:	20000604 	.word	0x20000604
 8002078:	08014eb8 	.word	0x08014eb8
 800207c:	08014ecc 	.word	0x08014ecc
 8002080:	08014eec 	.word	0x08014eec
 8002084:	08014f10 	.word	0x08014f10

08002088 <ppp_connection_init>:

void ppp_connection_init(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    //uart_log("Initializing PPP connection...");

    tcpip_init(NULL, NULL);
 800208c:	2100      	movs	r1, #0
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f912 	bl	80022b8 <tcpip_init>

    ppp = pppos_create(&ppp_netif, ppp_output_callback, ppp_status_cb, NULL);
 8002094:	2300      	movs	r3, #0
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <ppp_connection_init+0x48>)
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <ppp_connection_init+0x4c>)
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <ppp_connection_init+0x50>)
 800209c:	f010 fa60 	bl	8012560 <pppos_create>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <ppp_connection_init+0x54>)
 80020a4:	601a      	str	r2, [r3, #0]
    if (ppp == NULL) {
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <ppp_connection_init+0x54>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <ppp_connection_init+0x2e>
        uart_log("Failed to create PPP control block");
 80020ae:	480c      	ldr	r0, [pc, #48]	; (80020e0 <ppp_connection_init+0x58>)
 80020b0:	f7fe ff78 	bl	8000fa4 <uart_log>
        return;
 80020b4:	e00b      	b.n	80020ce <ppp_connection_init+0x46>
    }

    ppp_set_default(ppp);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <ppp_connection_init+0x54>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fc2d 	bl	800591c <netif_set_default>
    ppp_connect(ppp, 0);
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <ppp_connection_init+0x54>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00f ff17 	bl	8011efc <ppp_connect>
}
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	08001f79 	.word	0x08001f79
 80020d4:	08001f59 	.word	0x08001f59
 80020d8:	200005fc 	.word	0x200005fc
 80020dc:	200005f4 	.word	0x200005f4
 80020e0:	08014f28 	.word	0x08014f28

080020e4 <ppp_connection_poll>:

void ppp_connection_poll(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
    sys_check_timeouts();
 80020e8:	f00b fa0a 	bl	800d500 <sys_check_timeouts>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <tcpip_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80020fa:	f00b fa37 	bl	800d56c <sys_timeouts_sleeptime>
 80020fe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d10b      	bne.n	8002120 <tcpip_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <tcpip_mbox_fetch+0x68>)
 800210a:	f7ff fe9a 	bl	8001e42 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff feba 	bl	8001e8c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <tcpip_mbox_fetch+0x68>)
 800211a:	f7ff fe88 	bl	8001e2e <sys_mutex_lock>
    return;
 800211e:	e018      	b.n	8002152 <tcpip_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <tcpip_mbox_fetch+0x3c>
    sys_check_timeouts();
 8002126:	f00b f9eb 	bl	800d500 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800212a:	e7e6      	b.n	80020fa <tcpip_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <tcpip_mbox_fetch+0x68>)
 800212e:	f7ff fe88 	bl	8001e42 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fea8 	bl	8001e8c <sys_arch_mbox_fetch>
 800213c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <tcpip_mbox_fetch+0x68>)
 8002140:	f7ff fe75 	bl	8001e2e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d102      	bne.n	8002152 <tcpip_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800214c:	f00b f9d8 	bl	800d500 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8002150:	e7d3      	b.n	80020fa <tcpip_mbox_fetch+0xa>
  }
}
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000087c 	.word	0x2000087c

0800215c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <tcpip_thread+0x54>)
 8002166:	f7ff fe62 	bl	8001e2e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <tcpip_thread+0x58>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <tcpip_thread+0x58>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <tcpip_thread+0x5c>)
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	4610      	mov	r0, r2
 800217c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4619      	mov	r1, r3
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <tcpip_thread+0x60>)
 8002186:	f7ff ffb3 	bl	80020f0 <tcpip_mbox_fetch>
    if (msg == NULL) {
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <tcpip_thread+0x4a>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <tcpip_thread+0x64>)
 8002192:	229a      	movs	r2, #154	; 0x9a
 8002194:	490b      	ldr	r1, [pc, #44]	; (80021c4 <tcpip_thread+0x68>)
 8002196:	480c      	ldr	r0, [pc, #48]	; (80021c8 <tcpip_thread+0x6c>)
 8002198:	f011 fcba 	bl	8013b10 <iprintf>
 800219c:	2000      	movs	r0, #0
 800219e:	f011 fdb9 	bl	8013d14 <fflush>
 80021a2:	f011 fcfe 	bl	8013ba2 <abort>
      continue;
    }
    tcpip_thread_handle_msg(msg);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f80f 	bl	80021cc <tcpip_thread_handle_msg>
    tcpip_mbox_fetch(&tcpip_mbox, (void **)&msg);
 80021ae:	e7e6      	b.n	800217e <tcpip_thread+0x22>
 80021b0:	2000087c 	.word	0x2000087c
 80021b4:	20000630 	.word	0x20000630
 80021b8:	20000634 	.word	0x20000634
 80021bc:	20000638 	.word	0x20000638
 80021c0:	08014f4c 	.word	0x08014f4c
 80021c4:	08014f6c 	.word	0x08014f6c
 80021c8:	08014f8c 	.word	0x08014f8c

080021cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d018      	beq.n	800220e <tcpip_thread_handle_msg+0x42>
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d021      	beq.n	8002224 <tcpip_thread_handle_msg+0x58>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d126      	bne.n	8002232 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6850      	ldr	r0, [r2, #4]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4798      	blx	r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 ff70 	bl	80060e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	2004      	movs	r0, #4
 8002208:	f003 f996 	bl	8005538 <memp_free>
      break;
 800220c:	e01c      	b.n	8002248 <tcpip_thread_handle_msg+0x7c>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	4610      	mov	r0, r2
 8002218:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	2003      	movs	r0, #3
 800221e:	f003 f98b 	bl	8005538 <memp_free>
      break;
 8002222:	e011      	b.n	8002248 <tcpip_thread_handle_msg+0x7c>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	4610      	mov	r0, r2
 800222e:	4798      	blx	r3
      break;
 8002230:	e00a      	b.n	8002248 <tcpip_thread_handle_msg+0x7c>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <tcpip_thread_handle_msg+0x84>)
 8002234:	22dd      	movs	r2, #221	; 0xdd
 8002236:	4907      	ldr	r1, [pc, #28]	; (8002254 <tcpip_thread_handle_msg+0x88>)
 8002238:	4807      	ldr	r0, [pc, #28]	; (8002258 <tcpip_thread_handle_msg+0x8c>)
 800223a:	f011 fc69 	bl	8013b10 <iprintf>
 800223e:	2000      	movs	r0, #0
 8002240:	f011 fd68 	bl	8013d14 <fflush>
 8002244:	f011 fcad 	bl	8013ba2 <abort>
      break;
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	08014f4c 	.word	0x08014f4c
 8002254:	08014f6c 	.word	0x08014f6c
 8002258:	08014f8c 	.word	0x08014f8c

0800225c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8002266:	2003      	movs	r0, #3
 8002268:	f003 f8f6 	bl	8005458 <memp_malloc>
 800226c:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <tcpip_try_callback+0x1e>
    return ERR_MEM;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	e017      	b.n	80022aa <tcpip_try_callback+0x4e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	4809      	ldr	r0, [pc, #36]	; (80022b4 <tcpip_try_callback+0x58>)
 8002290:	f7ff fdf0 	bl	8001e74 <sys_mbox_trypost>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <tcpip_try_callback+0x4c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	2003      	movs	r0, #3
 800229e:	f003 f94b 	bl	8005538 <memp_free>
    return ERR_MEM;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e000      	b.n	80022aa <tcpip_try_callback+0x4e>
  }
  return ERR_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000638 	.word	0x20000638

080022b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80022c2:	f001 ff57 	bl	8004174 <lwip_init>

  tcpip_init_done = initfunc;
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <tcpip_init+0x7c>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <tcpip_init+0x80>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80022d2:	2100      	movs	r1, #0
 80022d4:	4819      	ldr	r0, [pc, #100]	; (800233c <tcpip_init+0x84>)
 80022d6:	f7ff fdbe 	bl	8001e56 <sys_mbox_new>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <tcpip_init+0x88>)
 80022e2:	f240 229a 	movw	r2, #666	; 0x29a
 80022e6:	4917      	ldr	r1, [pc, #92]	; (8002344 <tcpip_init+0x8c>)
 80022e8:	4817      	ldr	r0, [pc, #92]	; (8002348 <tcpip_init+0x90>)
 80022ea:	f011 fc11 	bl	8013b10 <iprintf>
 80022ee:	2000      	movs	r0, #0
 80022f0:	f011 fd10 	bl	8013d14 <fflush>
 80022f4:	f011 fc55 	bl	8013ba2 <abort>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80022f8:	4814      	ldr	r0, [pc, #80]	; (800234c <tcpip_init+0x94>)
 80022fa:	f7ff fd8a 	bl	8001e12 <sys_mutex_new>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <tcpip_init+0x64>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <tcpip_init+0x88>)
 8002306:	f240 229e 	movw	r2, #670	; 0x29e
 800230a:	4911      	ldr	r1, [pc, #68]	; (8002350 <tcpip_init+0x98>)
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <tcpip_init+0x90>)
 800230e:	f011 fbff 	bl	8013b10 <iprintf>
 8002312:	2000      	movs	r0, #0
 8002314:	f011 fcfe 	bl	8013d14 <fflush>
 8002318:	f011 fc43 	bl	8013ba2 <abort>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800231c:	2301      	movs	r3, #1
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	490b      	ldr	r1, [pc, #44]	; (8002354 <tcpip_init+0x9c>)
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <tcpip_init+0xa0>)
 8002328:	f7ff fdbd 	bl	8001ea6 <sys_thread_new>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000630 	.word	0x20000630
 8002338:	20000634 	.word	0x20000634
 800233c:	20000638 	.word	0x20000638
 8002340:	08014f4c 	.word	0x08014f4c
 8002344:	08014fb4 	.word	0x08014fb4
 8002348:	08014f8c 	.word	0x08014f8c
 800234c:	2000087c 	.word	0x2000087c
 8002350:	08014fd8 	.word	0x08014fd8
 8002354:	0800215d 	.word	0x0800215d
 8002358:	08014ffc 	.word	0x08014ffc

0800235c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	88db      	ldrh	r3, [r3, #6]
 8002368:	3301      	adds	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	88db      	ldrh	r3, [r3, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	88db      	ldrh	r3, [r3, #6]
 800237c:	3301      	adds	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	88db      	ldrh	r3, [r3, #6]
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	2bff      	cmp	r3, #255	; 0xff
 80023c0:	d902      	bls.n	80023c8 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	801a      	strh	r2, [r3, #0]
  }
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	885b      	ldrh	r3, [r3, #2]
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d90a      	bls.n	800241c <mqtt_ringbuf_advance_get_idx+0x28>
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <mqtt_ringbuf_advance_get_idx+0x54>)
 8002408:	22cb      	movs	r2, #203	; 0xcb
 800240a:	4910      	ldr	r1, [pc, #64]	; (800244c <mqtt_ringbuf_advance_get_idx+0x58>)
 800240c:	4810      	ldr	r0, [pc, #64]	; (8002450 <mqtt_ringbuf_advance_get_idx+0x5c>)
 800240e:	f011 fb7f 	bl	8013b10 <iprintf>
 8002412:	2000      	movs	r0, #0
 8002414:	f011 fc7e 	bl	8013d14 <fflush>
 8002418:	f011 fbc3 	bl	8013ba2 <abort>

  rb->get += len;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	885a      	ldrh	r2, [r3, #2]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4413      	add	r3, r2
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	885b      	ldrh	r3, [r3, #2]
 800242e:	2bff      	cmp	r3, #255	; 0xff
 8002430:	d906      	bls.n	8002440 <mqtt_ringbuf_advance_get_idx+0x4c>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	885b      	ldrh	r3, [r3, #2]
 8002436:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	805a      	strh	r2, [r3, #2]
  }
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	0801509c 	.word	0x0801509c
 800244c:	080150c0 	.word	0x080150c0
 8002450:	08015100 	.word	0x08015100

08002454 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	885b      	ldrh	r3, [r3, #2]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d303      	bcc.n	800247a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002478:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	b29b      	uxth	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffda 	bl	8002454 <mqtt_ringbuf_len>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	885b      	ldrh	r3, [r3, #2]
 80024a8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024ac:	429a      	cmp	r2, r3
 80024ae:	da04      	bge.n	80024ba <mqtt_output_send+0x2e>
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffcf 	bl	8002454 <mqtt_ringbuf_len>
 80024b6:	4603      	mov	r3, r0
 80024b8:	e004      	b.n	80024c4 <mqtt_output_send+0x38>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	885b      	ldrh	r3, [r3, #2]
 80024be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80024cc:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <mqtt_output_send+0x5e>
 80024d4:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <mqtt_output_send+0x168>)
 80024d6:	22f0      	movs	r2, #240	; 0xf0
 80024d8:	4947      	ldr	r1, [pc, #284]	; (80025f8 <mqtt_output_send+0x16c>)
 80024da:	4848      	ldr	r0, [pc, #288]	; (80025fc <mqtt_output_send+0x170>)
 80024dc:	f011 fb18 	bl	8013b10 <iprintf>
 80024e0:	2000      	movs	r0, #0
 80024e2:	f011 fc17 	bl	8013d14 <fflush>
 80024e6:	f011 fb5c 	bl	8013ba2 <abort>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80024ea:	89bb      	ldrh	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d07c      	beq.n	80025ea <mqtt_output_send+0x15e>
 80024f0:	897b      	ldrh	r3, [r7, #10]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d079      	beq.n	80025ea <mqtt_output_send+0x15e>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80024f6:	89ba      	ldrh	r2, [r7, #12]
 80024f8:	897b      	ldrh	r3, [r7, #10]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d90d      	bls.n	800251a <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa6 	bl	8002454 <mqtt_ringbuf_len>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	897b      	ldrh	r3, [r7, #10]
 800250e:	4293      	cmp	r3, r2
 8002510:	bf34      	ite	cc
 8002512:	2301      	movcc	r3, #1
 8002514:	2300      	movcs	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff5a 	bl	80023d4 <mqtt_ringbuf_get_ptr>
 8002520:	4601      	mov	r1, r0
 8002522:	7bbb      	ldrb	r3, [r7, #14]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <mqtt_output_send+0xa0>
 8002528:	2303      	movs	r3, #3
 800252a:	e000      	b.n	800252e <mqtt_output_send+0xa2>
 800252c:	2301      	movs	r3, #1
 800252e:	89ba      	ldrh	r2, [r7, #12]
 8002530:	6838      	ldr	r0, [r7, #0]
 8002532:	f008 ff37 	bl	800b3a4 <tcp_write>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d146      	bne.n	80025d0 <mqtt_output_send+0x144>
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d043      	beq.n	80025d0 <mqtt_output_send+0x144>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8002548:	89bb      	ldrh	r3, [r7, #12]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff51 	bl	80023f4 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002558:	461c      	mov	r4, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff7a 	bl	8002454 <mqtt_ringbuf_len>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	885b      	ldrh	r3, [r3, #2]
 8002568:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800256c:	429a      	cmp	r2, r3
 800256e:	da04      	bge.n	800257a <mqtt_output_send+0xee>
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff6f 	bl	8002454 <mqtt_ringbuf_len>
 8002576:	4603      	mov	r3, r0
 8002578:	e003      	b.n	8002582 <mqtt_output_send+0xf6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	885b      	ldrh	r3, [r3, #2]
 800257e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002582:	429c      	cmp	r4, r3
 8002584:	da03      	bge.n	800258e <mqtt_output_send+0x102>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800258c:	e014      	b.n	80025b8 <mqtt_output_send+0x12c>
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff60 	bl	8002454 <mqtt_ringbuf_len>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	885b      	ldrh	r3, [r3, #2]
 800259c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025a0:	429a      	cmp	r2, r3
 80025a2:	da04      	bge.n	80025ae <mqtt_output_send+0x122>
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff55 	bl	8002454 <mqtt_ringbuf_len>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e004      	b.n	80025b8 <mqtt_output_send+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	885b      	ldrh	r3, [r3, #2]
 80025b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff0a 	bl	80023d4 <mqtt_ringbuf_get_ptr>
 80025c0:	4601      	mov	r1, r0
 80025c2:	89ba      	ldrh	r2, [r7, #12]
 80025c4:	2301      	movs	r3, #1
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f008 feec 	bl	800b3a4 <tcp_write>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80025d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <mqtt_output_send+0x160>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80025d8:	89bb      	ldrh	r3, [r7, #12]
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff09 	bl	80023f4 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f009 fd9c 	bl	800c120 <tcp_output>
 80025e8:	e000      	b.n	80025ec <mqtt_output_send+0x160>
    return;
 80025ea:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0801509c 	.word	0x0801509c
 80025f8:	08015128 	.word	0x08015128
 80025fc:	08015100 	.word	0x08015100

08002600 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10b      	bne.n	8002632 <mqtt_create_request+0x32>
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <mqtt_create_request+0x8c>)
 800261c:	f240 1223 	movw	r2, #291	; 0x123
 8002620:	491b      	ldr	r1, [pc, #108]	; (8002690 <mqtt_create_request+0x90>)
 8002622:	481c      	ldr	r0, [pc, #112]	; (8002694 <mqtt_create_request+0x94>)
 8002624:	f011 fa74 	bl	8013b10 <iprintf>
 8002628:	2000      	movs	r0, #0
 800262a:	f011 fb73 	bl	8013d14 <fflush>
 800262e:	f011 fab8 	bl	8013ba2 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8002632:	2300      	movs	r3, #0
 8002634:	74fb      	strb	r3, [r7, #19]
 8002636:	e01f      	b.n	8002678 <mqtt_create_request+0x78>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	440b      	add	r3, r1
 800264a:	429a      	cmp	r2, r3
 800264c:	d111      	bne.n	8002672 <mqtt_create_request+0x72>
      r = &r_objs[n];
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	819a      	strh	r2, [r3, #12]
      break;
 8002670:	e006      	b.n	8002680 <mqtt_create_request+0x80>
  for (n = 0; n < r_objs_len; n++) {
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	3301      	adds	r3, #1
 8002676:	74fb      	strb	r3, [r7, #19]
 8002678:	7cfa      	ldrb	r2, [r7, #19]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3db      	bcc.n	8002638 <mqtt_create_request+0x38>
    }
  }
  return r;
 8002680:	697b      	ldr	r3, [r7, #20]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	0801509c 	.word	0x0801509c
 8002690:	08015148 	.word	0x08015148
 8002694:	08015100 	.word	0x08015100

08002698 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <mqtt_append_request+0x30>
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <mqtt_append_request+0x9c>)
 80026b2:	f240 123f 	movw	r2, #319	; 0x13f
 80026b6:	4920      	ldr	r1, [pc, #128]	; (8002738 <mqtt_append_request+0xa0>)
 80026b8:	4820      	ldr	r0, [pc, #128]	; (800273c <mqtt_append_request+0xa4>)
 80026ba:	f011 fa29 	bl	8013b10 <iprintf>
 80026be:	2000      	movs	r0, #0
 80026c0:	f011 fb28 	bl	8013d14 <fflush>
 80026c4:	f011 fa6d 	bl	8013ba2 <abort>

  /* Iterate through queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e00a      	b.n	80026e6 <mqtt_append_request+0x4e>
    time_before += iter->timeout_diff;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	89da      	ldrh	r2, [r3, #14]
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	827b      	strh	r3, [r7, #18]
    head = iter;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f1      	bne.n	80026d0 <mqtt_append_request+0x38>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80026ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f0:	2b1e      	cmp	r3, #30
 80026f2:	dd0b      	ble.n	800270c <mqtt_append_request+0x74>
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <mqtt_append_request+0x9c>)
 80026f6:	f240 1247 	movw	r2, #327	; 0x147
 80026fa:	4911      	ldr	r1, [pc, #68]	; (8002740 <mqtt_append_request+0xa8>)
 80026fc:	480f      	ldr	r0, [pc, #60]	; (800273c <mqtt_append_request+0xa4>)
 80026fe:	f011 fa07 	bl	8013b10 <iprintf>
 8002702:	2000      	movs	r0, #0
 8002704:	f011 fb06 	bl	8013d14 <fflush>
 8002708:	f011 fa4b 	bl	8013ba2 <abort>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800270c:	8a7b      	ldrh	r3, [r7, #18]
 800270e:	f1c3 031e 	rsb	r3, r3, #30
 8002712:	b29a      	uxth	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <mqtt_append_request+0x8e>
    *tail = r;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8002724:	e002      	b.n	800272c <mqtt_append_request+0x94>
    head->next = r;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	0801509c 	.word	0x0801509c
 8002738:	0801516c 	.word	0x0801516c
 800273c:	08015100 	.word	0x08015100
 8002740:	08015190 	.word	0x08015190

08002744 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <mqtt_delete_request+0x14>
    r->next = r;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]
  }
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <mqtt_take_request+0x32>
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <mqtt_take_request+0xa4>)
 8002780:	f240 1267 	movw	r2, #359	; 0x167
 8002784:	4921      	ldr	r1, [pc, #132]	; (800280c <mqtt_take_request+0xa8>)
 8002786:	4822      	ldr	r0, [pc, #136]	; (8002810 <mqtt_take_request+0xac>)
 8002788:	f011 f9c2 	bl	8013b10 <iprintf>
 800278c:	2000      	movs	r0, #0
 800278e:	f011 fac1 	bl	8013d14 <fflush>
 8002792:	f011 fa06 	bl	8013ba2 <abort>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e009      	b.n	80027b2 <mqtt_take_request+0x4e>
    if (iter->pkt_id == pkt_id) {
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	899b      	ldrh	r3, [r3, #12]
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d008      	beq.n	80027ba <mqtt_take_request+0x56>
      break;
    }
    prev = iter;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f2      	bne.n	800279e <mqtt_take_request+0x3a>
 80027b8:	e000      	b.n	80027bc <mqtt_take_request+0x58>
      break;
 80027ba:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01c      	beq.n	80027fc <mqtt_take_request+0x98>
    /* unchain */
    if (prev == NULL) {
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <mqtt_take_request+0x6e>
      *tail = iter->next;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e003      	b.n	80027da <mqtt_take_request+0x76>
    } else {
      prev->next = iter->next;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <mqtt_take_request+0x92>
      iter->next->timeout_diff += iter->timeout_diff;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	89d1      	ldrh	r1, [r2, #14]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	89d2      	ldrh	r2, [r2, #14]
 80027f0:	440a      	add	r2, r1
 80027f2:	b292      	uxth	r2, r2
 80027f4:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80027fc:	68fb      	ldr	r3, [r7, #12]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	0801509c 	.word	0x0801509c
 800280c:	080151c8 	.word	0x080151c8
 8002810:	08015100 	.word	0x08015100

08002814 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <mqtt_request_time_elapsed+0x2a>
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <mqtt_request_time_elapsed+0xa0>)
 8002828:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800282c:	4922      	ldr	r1, [pc, #136]	; (80028b8 <mqtt_request_time_elapsed+0xa4>)
 800282e:	4823      	ldr	r0, [pc, #140]	; (80028bc <mqtt_request_time_elapsed+0xa8>)
 8002830:	f011 f96e 	bl	8013b10 <iprintf>
 8002834:	2000      	movs	r0, #0
 8002836:	f011 fa6d 	bl	8013d14 <fflush>
 800283a:	f011 f9b2 	bl	8013ba2 <abort>
  r = *tail;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8002844:	e02c      	b.n	80028a0 <mqtt_request_time_elapsed+0x8c>
    if (t >= r->timeout_diff) {
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	89db      	ldrh	r3, [r3, #14]
 800284e:	429a      	cmp	r2, r3
 8002850:	d31c      	bcc.n	800288c <mqtt_request_time_elapsed+0x78>
      t -= (u8_t)r->timeout_diff;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	89db      	ldrh	r3, [r3, #14]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <mqtt_request_time_elapsed+0x6a>
        r->cb(r->arg, ERR_TIMEOUT);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	f06f 0102 	mvn.w	r1, #2
 800287a:	4610      	mov	r0, r2
 800287c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff60 	bl	8002744 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e009      	b.n	80028a0 <mqtt_request_time_elapsed+0x8c>
    } else {
      r->timeout_diff -= t;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	89da      	ldrh	r2, [r3, #14]
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	b29b      	uxth	r3, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	81da      	strh	r2, [r3, #14]
      t = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <mqtt_request_time_elapsed+0x98>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1cc      	bne.n	8002846 <mqtt_request_time_elapsed+0x32>
    }
  }
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	0801509c 	.word	0x0801509c
 80028b8:	080151e8 	.word	0x080151e8
 80028bc:	08015100 	.word	0x08015100

080028c0 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <mqtt_clear_requests+0x26>
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <mqtt_clear_requests+0x54>)
 80028d0:	f240 12a7 	movw	r2, #423	; 0x1a7
 80028d4:	4910      	ldr	r1, [pc, #64]	; (8002918 <mqtt_clear_requests+0x58>)
 80028d6:	4811      	ldr	r0, [pc, #68]	; (800291c <mqtt_clear_requests+0x5c>)
 80028d8:	f011 f91a 	bl	8013b10 <iprintf>
 80028dc:	2000      	movs	r0, #0
 80028de:	f011 fa19 	bl	8013d14 <fflush>
 80028e2:	f011 f95e 	bl	8013ba2 <abort>
  for (iter = *tail; iter != NULL; iter = next) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e007      	b.n	80028fe <mqtt_clear_requests+0x3e>
    next = iter->next;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff ff25 	bl	8002744 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f4      	bne.n	80028ee <mqtt_clear_requests+0x2e>
  }
  *tail = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	0801509c 	.word	0x0801509c
 8002918:	08015210 	.word	0x08015210
 800291c:	08015100 	.word	0x08015100

08002920 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <mqtt_init_requests+0x28>
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <mqtt_init_requests+0x58>)
 8002932:	f240 12b7 	movw	r2, #439	; 0x1b7
 8002936:	4911      	ldr	r1, [pc, #68]	; (800297c <mqtt_init_requests+0x5c>)
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <mqtt_init_requests+0x60>)
 800293a:	f011 f8e9 	bl	8013b10 <iprintf>
 800293e:	2000      	movs	r0, #0
 8002940:	f011 f9e8 	bl	8013d14 <fflush>
 8002944:	f011 f92d 	bl	8013ba2 <abort>
  for (n = 0; n < r_objs_len; n++) {
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e00b      	b.n	8002966 <mqtt_init_requests+0x46>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	440a      	add	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3ef      	bcc.n	800294e <mqtt_init_requests+0x2e>
  }
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0801509c 	.word	0x0801509c
 800297c:	08015234 	.word	0x08015234
 8002980:	08015100 	.word	0x08015100

08002984 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fcfd 	bl	8002394 <mqtt_ringbuf_put>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fceb 	bl	8002394 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fce5 	bl	8002394 <mqtt_ringbuf_put>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	4613      	mov	r3, r2
 80029de:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	82fb      	strh	r3, [r7, #22]
 80029e4:	e00a      	b.n	80029fc <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 80029e6:	8afb      	ldrh	r3, [r7, #22]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fccf 	bl	8002394 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80029f6:	8afb      	ldrh	r3, [r7, #22]
 80029f8:	3301      	adds	r3, #1
 80029fa:	82fb      	strh	r3, [r7, #22]
 80029fc:	8afa      	ldrh	r2, [r7, #22]
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3f0      	bcc.n	80029e6 <mqtt_output_append_buf+0x14>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fcb5 	bl	8002394 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fcaf 	bl	8002394 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	82fb      	strh	r3, [r7, #22]
 8002a3a:	e00a      	b.n	8002a52 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff fca4 	bl	8002394 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	82fb      	strh	r3, [r7, #22]
 8002a52:	8afa      	ldrh	r2, [r7, #22]
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3f0      	bcc.n	8002a3c <mqtt_output_append_string+0x30>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	4608      	mov	r0, r1
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4603      	mov	r3, r0
 8002a72:	70fb      	strb	r3, [r7, #3]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70bb      	strb	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b25a      	sxtb	r2, r3
 8002a92:	787b      	ldrb	r3, [r7, #1]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	f003 0306 	and.w	r3, r3, #6
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff65 	bl	8002984 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8002aba:	8abb      	ldrh	r3, [r7, #20]
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac2:	b25a      	sxtb	r2, r3
 8002ac4:	8abb      	ldrh	r3, [r7, #20]
 8002ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac8:	d902      	bls.n	8002ad0 <mqtt_output_append_fixed_header+0x6e>
 8002aca:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002ace:	e000      	b.n	8002ad2 <mqtt_output_append_fixed_header+0x70>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff52 	bl	8002984 <mqtt_output_append_u8>
    r_length >>= 7;
 8002ae0:	8abb      	ldrh	r3, [r7, #20]
 8002ae2:	09db      	lsrs	r3, r3, #7
 8002ae4:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8002ae6:	8abb      	ldrh	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e6      	bne.n	8002aba <mqtt_output_append_fixed_header+0x58>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	3301      	adds	r3, #1
 8002b04:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <mqtt_output_check_space+0x30>
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <mqtt_output_check_space+0x64>)
 8002b0e:	f240 2207 	movw	r2, #519	; 0x207
 8002b12:	4912      	ldr	r1, [pc, #72]	; (8002b5c <mqtt_output_check_space+0x68>)
 8002b14:	4812      	ldr	r0, [pc, #72]	; (8002b60 <mqtt_output_check_space+0x6c>)
 8002b16:	f010 fffb 	bl	8013b10 <iprintf>
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f011 f8fa 	bl	8013d14 <fflush>
 8002b20:	f011 f83f 	bl	8013ba2 <abort>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	3301      	adds	r3, #1
 8002b28:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	09db      	lsrs	r3, r3, #7
 8002b2e:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f6      	bne.n	8002b24 <mqtt_output_check_space+0x30>

  return (total_len <= mqtt_ringbuf_free(rb));
 8002b36:	89fc      	ldrh	r4, [r7, #14]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fc8b 	bl	8002454 <mqtt_ringbuf_len>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b44:	429c      	cmp	r4, r3
 8002b46:	bfd4      	ite	le
 8002b48:	2301      	movle	r3, #1
 8002b4a:	2300      	movgt	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0801509c 	.word	0x0801509c
 8002b5c:	08015258 	.word	0x08015258
 8002b60:	08015100 	.word	0x08015100

08002b64 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <mqtt_close+0x2a>
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <mqtt_close+0xbc>)
 8002b78:	f240 221b 	movw	r2, #539	; 0x21b
 8002b7c:	4929      	ldr	r1, [pc, #164]	; (8002c24 <mqtt_close+0xc0>)
 8002b7e:	482a      	ldr	r0, [pc, #168]	; (8002c28 <mqtt_close+0xc4>)
 8002b80:	f010 ffc6 	bl	8013b10 <iprintf>
 8002b84:	2000      	movs	r0, #0
 8002b86:	f011 f8c5 	bl	8013d14 <fflush>
 8002b8a:	f011 f80a 	bl	8013ba2 <abort>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d024      	beq.n	8002be0 <mqtt_close+0x7c>
    err_t res;
    altcp_recv(client->conn, NULL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 fb2f 	bl	8008200 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f005 fb75 	bl	8008298 <tcp_err>
    altcp_sent(client->conn, NULL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 fb49 	bl	800824c <tcp_sent>
    res = altcp_close(client->conn);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 f8cc 	bl	8006d5c <tcp_close>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8002bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <mqtt_close+0x76>
      altcp_abort(client->conn);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f9af 	bl	8006f38 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3318      	adds	r3, #24
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe6b 	bl	80028c0 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <mqtt_close+0xc8>)
 8002bee:	f00a fc4d 	bl	800d48c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7a9b      	ldrb	r3, [r3, #10]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <mqtt_close+0xb2>

    client->conn_state = TCP_DISCONNECTED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <mqtt_close+0xb2>
      client->connect_cb(client, client->connect_arg, reason);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6911      	ldr	r1, [r2, #16]
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	0801509c 	.word	0x0801509c
 8002c24:	0801527c 	.word	0x0801527c
 8002c28:	08015100 	.word	0x08015100
 8002c2c:	08002c31 	.word	0x08002c31

08002c30 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <mqtt_cyclic_timer+0x2e>
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <mqtt_cyclic_timer+0x128>)
 8002c48:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002c4c:	4943      	ldr	r1, [pc, #268]	; (8002d5c <mqtt_cyclic_timer+0x12c>)
 8002c4e:	4844      	ldr	r0, [pc, #272]	; (8002d60 <mqtt_cyclic_timer+0x130>)
 8002c50:	f010 ff5e 	bl	8013b10 <iprintf>
 8002c54:	2000      	movs	r0, #0
 8002c56:	f011 f85d 	bl	8013d14 <fflush>
 8002c5a:	f010 ffa2 	bl	8013ba2 <abort>

  if (client->conn_state == MQTT_CONNECTING) {
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	7a9b      	ldrb	r3, [r3, #10]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d115      	bne.n	8002c92 <mqtt_cyclic_timer+0x62>
    client->cyclic_tick++;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2b63      	cmp	r3, #99	; 0x63
 8002c80:	dd5d      	ble.n	8002d3e <mqtt_cyclic_timer+0x10e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002c82:	f240 1101 	movw	r1, #257	; 0x101
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	f7ff ff6c 	bl	8002b64 <mqtt_close>
      restart_timer = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e055      	b.n	8002d3e <mqtt_cyclic_timer+0x10e>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	7a9b      	ldrb	r3, [r3, #10]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d14f      	bne.n	8002d3a <mqtt_cyclic_timer+0x10a>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3318      	adds	r3, #24
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fdb7 	bl	8002814 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	885b      	ldrh	r3, [r3, #2]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d047      	beq.n	8002d3e <mqtt_cyclic_timer+0x10e>

      client->server_watchdog++;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	889b      	ldrh	r3, [r3, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	889b      	ldrh	r3, [r3, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	885b      	ldrh	r3, [r3, #2]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	885b      	ldrh	r3, [r3, #2]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dd06      	ble.n	8002ce8 <mqtt_cyclic_timer+0xb8>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8002cda:	f240 1101 	movw	r1, #257	; 0x101
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f7ff ff40 	bl	8002b64 <mqtt_close>
        restart_timer = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      client->cyclic_tick++;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	801a      	strh	r2, [r3, #0]
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	8852      	ldrh	r2, [r2, #2]
 8002d04:	4293      	cmp	r3, r2
 8002d06:	db1a      	blt.n	8002d3e <mqtt_cyclic_timer+0x10e>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	33ec      	adds	r3, #236	; 0xec
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fef0 	bl	8002af4 <mqtt_output_check_space>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d011      	beq.n	8002d3e <mqtt_cyclic_timer+0x10e>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002d20:	2300      	movs	r3, #0
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2300      	movs	r3, #0
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	210c      	movs	r1, #12
 8002d2e:	f7ff fe98 	bl	8002a62 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e001      	b.n	8002d3e <mqtt_cyclic_timer+0x10e>
        }
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <mqtt_cyclic_timer+0x120>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4907      	ldr	r1, [pc, #28]	; (8002d64 <mqtt_cyclic_timer+0x134>)
 8002d48:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d4c:	f00a fb72 	bl	800d434 <sys_timeout>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	0801509c 	.word	0x0801509c
 8002d5c:	08015298 	.word	0x08015298
 8002d60:	08015100 	.word	0x08015100
 8002d64:	08002c31 	.word	0x08002c31

08002d68 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	70fb      	strb	r3, [r7, #3]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	803b      	strh	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	33ec      	adds	r3, #236	; 0xec
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff feb1 	bl	8002af4 <mqtt_output_check_space>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01d      	beq.n	8002dd4 <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002d9e:	78ba      	ldrb	r2, [r7, #2]
 8002da0:	78f9      	ldrb	r1, [r7, #3]
 8002da2:	2302      	movs	r3, #2
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	f7ff fe58 	bl	8002a62 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	33ec      	adds	r3, #236	; 0xec
 8002db6:	883a      	ldrh	r2, [r7, #0]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fdf1 	bl	80029a2 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7ff fb5d 	bl	800248c <mqtt_output_send>
 8002dd2:	e001      	b.n	8002dd8 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8002dd4:	23ff      	movs	r3, #255	; 0xff
 8002dd6:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8002dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <mqtt_incoming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incoming_suback(struct mqtt_request_t *r, u8_t result)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <mqtt_incoming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6890      	ldr	r0, [r2, #8]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	2a02      	cmp	r2, #2
 8002e04:	d801      	bhi.n	8002e0a <mqtt_incoming_suback+0x26>
 8002e06:	2200      	movs	r2, #0
 8002e08:	e001      	b.n	8002e0e <mqtt_incoming_suback+0x2a>
 8002e0a:	f06f 020c 	mvn.w	r2, #12
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4798      	blx	r3
  }
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <mqtt_message_received>:
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length,
                      u8_t *var_hdr_payload)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08f      	sub	sp, #60	; 0x3c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	72fb      	strb	r3, [r7, #11]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	86fb      	strh	r3, [r7, #54]	; 0x36

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  u16_t pkt_id = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	85bb      	strh	r3, [r7, #44]	; 0x2c

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
 8002e42:	7afa      	ldrb	r2, [r7, #11]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d90b      	bls.n	8002e64 <mqtt_message_received+0x48>
 8002e4c:	4ba3      	ldr	r3, [pc, #652]	; (80030dc <mqtt_message_received+0x2c0>)
 8002e4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8002e52:	49a3      	ldr	r1, [pc, #652]	; (80030e0 <mqtt_message_received+0x2c4>)
 8002e54:	48a3      	ldr	r0, [pc, #652]	; (80030e4 <mqtt_message_received+0x2c8>)
 8002e56:	f010 fe5b 	bl	8013b10 <iprintf>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f010 ff5a 	bl	8013d14 <fflush>
 8002e60:	f010 fe9f 	bl	8013ba2 <abort>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8002e64:	7afa      	ldrb	r2, [r7, #11]
 8002e66:	893b      	ldrh	r3, [r7, #8]
 8002e68:	4413      	add	r3, r2
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	dd09      	ble.n	8002e82 <mqtt_message_received+0x66>
 8002e6e:	4b9b      	ldr	r3, [pc, #620]	; (80030dc <mqtt_message_received+0x2c0>)
 8002e70:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002e74:	499c      	ldr	r1, [pc, #624]	; (80030e8 <mqtt_message_received+0x2cc>)
 8002e76:	489b      	ldr	r0, [pc, #620]	; (80030e4 <mqtt_message_received+0x2c8>)
 8002e78:	f7ff f823 	bl	8001ec2 <lwip_win32_platform_diag>
 8002e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e80:	e184      	b.n	800318c <mqtt_message_received+0x370>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8002e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d123      	bne.n	8002ed2 <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	7a9b      	ldrb	r3, [r3, #10]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	f040 8165 	bne.w	800315e <mqtt_message_received+0x342>
      if (length < 2) {
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f240 8163 	bls.w	8003162 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8002ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8159 	bne.w	800315e <mqtt_message_received+0x342>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != NULL) {
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 814e 	beq.w	800315e <mqtt_message_received+0x342>
          client->connect_cb(client, client->connect_arg, res);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6911      	ldr	r1, [r2, #16]
 8002eca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	4798      	blx	r3
 8002ed0:	e145      	b.n	800315e <mqtt_message_received+0x342>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8002ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ed6:	2b0d      	cmp	r3, #13
 8002ed8:	f000 8141 	beq.w	800315e <mqtt_message_received+0x342>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8002edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	f040 80d2 	bne.w	800308a <mqtt_message_received+0x26e>
    u16_t payload_offset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8002eea:	893b      	ldrh	r3, [r7, #8]
 8002eec:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002ef4:	105b      	asrs	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if (client->msg_idx == (u32_t)(fixed_hdr_len + length)) {
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f04:	7af9      	ldrb	r1, [r7, #11]
 8002f06:	893a      	ldrh	r2, [r7, #8]
 8002f08:	440a      	add	r2, r1
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f040 8085 	bne.w	800301a <mqtt_message_received+0x1fe>
      /* First publish message frame. Should have topic and pkt id*/
      size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8002f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <mqtt_message_received+0x108>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e000      	b.n	8002f26 <mqtt_message_received+0x10a>
 8002f24:	2300      	movs	r3, #0
 8002f26:	847b      	strh	r3, [r7, #34]	; 0x22
      if (length < 2 + qos_len) {
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	f2c0 8119 	blt.w	8003166 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	843b      	strh	r3, [r7, #32]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8002f3a:	8c3b      	ldrh	r3, [r7, #32]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	3301      	adds	r3, #1
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	843b      	strh	r3, [r7, #32]
      if ((topic_len > length - (2 + qos_len)) ||
 8002f4c:	8c3a      	ldrh	r2, [r7, #32]
 8002f4e:	8939      	ldrh	r1, [r7, #8]
 8002f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f52:	3302      	adds	r3, #2
 8002f54:	1acb      	subs	r3, r1, r3
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f300 8107 	bgt.w	800316a <mqtt_message_received+0x34e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8002f5c:	8c3a      	ldrh	r2, [r7, #32]
 8002f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f62:	1acb      	subs	r3, r1, r3
 8002f64:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f200 80ff 	bhi.w	800316a <mqtt_message_received+0x34e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8002f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6e:	3302      	adds	r3, #2
 8002f70:	61fb      	str	r3, [r7, #28]
      after_topic = 2 + topic_len;
 8002f72:	8c3b      	ldrh	r3, [r7, #32]
 8002f74:	3302      	adds	r3, #2
 8002f76:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8002f78:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <mqtt_message_received+0x16a>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e000      	b.n	8002f88 <mqtt_message_received+0x16c>
 8002f86:	2301      	movs	r3, #1
 8002f88:	441a      	add	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f200 80ee 	bhi.w	800316e <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8002f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01a      	beq.n	8002fd0 <mqtt_message_received+0x1b4>
        if (length < after_topic + 2U) {
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f0c0 80e6 	bcc.w	8003172 <mqtt_message_received+0x356>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8002fa6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fba:	440b      	add	r3, r1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8002fc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fca:	3302      	adds	r3, #2
 8002fcc:	863b      	strh	r3, [r7, #48]	; 0x30
 8002fce:	e002      	b.n	8002fd6 <mqtt_message_received+0x1ba>
      } else {
        client->inpub_pkt_id = 0;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8002fd6:	8c3b      	ldrh	r3, [r7, #32]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	76fb      	strb	r3, [r7, #27]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8002fe0:	8c3b      	ldrh	r3, [r7, #32]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8002fea:	893a      	ldrh	r2, [r7, #8]
 8002fec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8002ff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ff4:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <mqtt_message_received+0x1f4>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8003006:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	440a      	add	r2, r1
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8003010:	8c3b      	ldrh	r3, [r7, #32]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	7efa      	ldrb	r2, [r7, #27]
 8003018:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800301a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <mqtt_message_received+0x20c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 809b 	bne.w	800315e <mqtt_message_received+0x342>
      if (length < (size_t)(payload_offset + payload_length)) {
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800302c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800302e:	440a      	add	r2, r1
 8003030:	4293      	cmp	r3, r2
 8003032:	f0c0 80a0 	bcc.w	8003176 <mqtt_message_received+0x35a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      if (client->data_cb != NULL) {
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <mqtt_message_received+0x240>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003046:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304a:	18d1      	adds	r1, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800305a:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d17d      	bne.n	800315e <mqtt_message_received+0x342>
 8003062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003066:	2b00      	cmp	r3, #0
 8003068:	d079      	beq.n	800315e <mqtt_message_received+0x342>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800306a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <mqtt_message_received+0x25a>
 8003072:	2304      	movs	r3, #4
 8003074:	e000      	b.n	8003078 <mqtt_message_received+0x25c>
 8003076:	2305      	movs	r3, #5
 8003078:	76bb      	strb	r3, [r7, #26]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incoming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	891a      	ldrh	r2, [r3, #8]
 800307e:	7eb9      	ldrb	r1, [r7, #26]
 8003080:	2300      	movs	r3, #0
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff fe70 	bl	8002d68 <pub_ack_rec_rel_response>
 8003088:	e069      	b.n	800315e <mqtt_message_received+0x342>
      }
    }
  } else {
    if (length < 2) {
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d974      	bls.n	800317a <mqtt_message_received+0x35e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short message\n"));
      goto out_disconnect;
    }
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	85bb      	strh	r3, [r7, #44]	; 0x2c
    pkt_id |= (u16_t)var_hdr_payload[1];
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	3301      	adds	r3, #1
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030a4:	4313      	orrs	r3, r2
 80030a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (pkt_id == 0) {
 80030a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d067      	beq.n	800317e <mqtt_message_received+0x362>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80030ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d106      	bne.n	80030c4 <mqtt_message_received+0x2a8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80030b6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80030b8:	2301      	movs	r3, #1
 80030ba:	2106      	movs	r1, #6
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff fe53 	bl	8002d68 <pub_ack_rec_rel_response>
 80030c2:	e04c      	b.n	800315e <mqtt_message_received+0x342>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80030c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d10f      	bne.n	80030ec <mqtt_message_received+0x2d0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80030cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80030ce:	2300      	movs	r3, #0
 80030d0:	2107      	movs	r1, #7
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff fe48 	bl	8002d68 <pub_ack_rec_rel_response>
 80030d8:	e041      	b.n	800315e <mqtt_message_received+0x342>
 80030da:	bf00      	nop
 80030dc:	0801509c 	.word	0x0801509c
 80030e0:	080152bc 	.word	0x080152bc
 80030e4:	08015100 	.word	0x08015100
 80030e8:	080152e0 	.word	0x080152e0

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80030ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d00b      	beq.n	800310c <mqtt_message_received+0x2f0>
 80030f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030f8:	2b0b      	cmp	r3, #11
 80030fa:	d007      	beq.n	800310c <mqtt_message_received+0x2f0>
 80030fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003100:	2b07      	cmp	r3, #7
 8003102:	d003      	beq.n	800310c <mqtt_message_received+0x2f0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8003104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003108:	2b04      	cmp	r3, #4
 800310a:	d13a      	bne.n	8003182 <mqtt_message_received+0x366>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3318      	adds	r3, #24
 8003110:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fb25 	bl	8002764 <mqtt_take_request>
 800311a:	6178      	str	r0, [r7, #20]
      if (r != NULL) {
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01c      	beq.n	800315c <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8003122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003126:	2b09      	cmp	r3, #9
 8003128:	d10a      	bne.n	8003140 <mqtt_message_received+0x324>
          if (length < 3) {
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d92a      	bls.n	8003186 <mqtt_message_received+0x36a>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incoming_suback(r, var_hdr_payload[2]);
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	3302      	adds	r3, #2
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7ff fe53 	bl	8002de4 <mqtt_incoming_suback>
 800313e:	e00a      	b.n	8003156 <mqtt_message_received+0x33a>
          }
        } else if (r->cb != NULL) {
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <mqtt_message_received+0x33a>
          r->cb(r->arg, ERR_OK);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	2100      	movs	r1, #0
 8003152:	4610      	mov	r0, r2
 8003154:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff faf4 	bl	8002744 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800315c:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800315e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003160:	e014      	b.n	800318c <mqtt_message_received+0x370>
        goto out_disconnect;
 8003162:	bf00      	nop
 8003164:	e010      	b.n	8003188 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8003166:	bf00      	nop
 8003168:	e00e      	b.n	8003188 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800316a:	bf00      	nop
 800316c:	e00c      	b.n	8003188 <mqtt_message_received+0x36c>
        goto out_disconnect;
 800316e:	bf00      	nop
 8003170:	e00a      	b.n	8003188 <mqtt_message_received+0x36c>
          goto out_disconnect;
 8003172:	bf00      	nop
 8003174:	e008      	b.n	8003188 <mqtt_message_received+0x36c>
        goto out_disconnect;
 8003176:	bf00      	nop
 8003178:	e006      	b.n	8003188 <mqtt_message_received+0x36c>
      goto out_disconnect;
 800317a:	bf00      	nop
 800317c:	e004      	b.n	8003188 <mqtt_message_received+0x36c>
      goto out_disconnect;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <mqtt_message_received+0x36c>
      goto out_disconnect;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <mqtt_message_received+0x36c>
            goto out_disconnect;
 8003186:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8003188:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800318c:	4618      	mov	r0, r3
 800318e:	373c      	adds	r7, #60	; 0x3c
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af02      	add	r7, sp, #8
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_len = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80031ae:	e0b7      	b.n	8003320 <mqtt_parse_incoming+0x18c>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d903      	bls.n	80031be <mqtt_parse_incoming+0x2a>
 80031b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da4f      	bge.n	800325e <mqtt_parse_incoming+0xca>

      if (fixed_hdr_len < client->msg_idx) {
 80031be:	7dfa      	ldrb	r2, [r7, #23]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d206      	bcs.n	80031d6 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80031d2:	75bb      	strb	r3, [r7, #22]
 80031d4:	e012      	b.n	80031fc <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80031d6:	8bfb      	ldrh	r3, [r7, #30]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	83fa      	strh	r2, [r7, #30]
 80031dc:	4619      	mov	r1, r3
 80031de:	6838      	ldr	r0, [r7, #0]
 80031e0:	f003 fb40 	bl	8006864 <pbuf_get_at>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6691      	str	r1, [r2, #104]	; 0x68
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	7dba      	ldrb	r2, [r7, #22]
 80031f8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	3301      	adds	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_len >= 2) {
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f240 808b 	bls.w	8003320 <mqtt_parse_incoming+0x18c>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 800320a:	7dbb      	ldrb	r3, [r7, #22]
 800320c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	1e9a      	subs	r2, r3, #2
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8003224:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db79      	blt.n	8003320 <mqtt_parse_incoming+0x18c>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <mqtt_parse_incoming+0xba>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0, NULL);
 8003232:	7df9      	ldrb	r1, [r7, #23]
 8003234:	2300      	movs	r3, #0
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2300      	movs	r3, #0
 800323a:	2200      	movs	r2, #0
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fded 	bl	8002e1c <mqtt_message_received>
            client->msg_idx = 0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]
 800324c:	e068      	b.n	8003320 <mqtt_parse_incoming+0x18c>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 800324e:	7dfa      	ldrb	r2, [r7, #23]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	441a      	add	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_len >= 2) {
 800325c:	e060      	b.n	8003320 <mqtt_parse_incoming+0x18c>
      u16_t cpy_len, buffer_space;
      u8_t *var_hdr_payload;
      mqtt_connection_status_t res;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	891a      	ldrh	r2, [r3, #8]
 8003262:	8bfb      	ldrh	r3, [r7, #30]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	429a      	cmp	r2, r3
 800326e:	d205      	bcs.n	800327c <mqtt_parse_incoming+0xe8>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	891a      	ldrh	r2, [r3, #8]
 8003274:	8bfb      	ldrh	r3, [r7, #30]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	e001      	b.n	8003280 <mqtt_parse_incoming+0xec>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	b29b      	uxth	r3, r3
 8003280:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800328a:	827b      	strh	r3, [r7, #18]
      if (cpy_len > buffer_space) {
 800328c:	8aba      	ldrh	r2, [r7, #20]
 800328e:	8a7b      	ldrh	r3, [r7, #18]
 8003290:	429a      	cmp	r2, r3
 8003292:	d901      	bls.n	8003298 <mqtt_parse_incoming+0x104>
        cpy_len = buffer_space;
 8003294:	8a7b      	ldrh	r3, [r7, #18]
 8003296:	82bb      	strh	r3, [r7, #20]
      }
      /* Adjust cpy_len to ensure zero-copy operation for remaining parts of current message */
      if (client->msg_idx >= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329c:	2b7f      	cmp	r3, #127	; 0x7f
 800329e:	d90c      	bls.n	80032ba <mqtt_parse_incoming+0x126>
        if (cpy_len > (p->len - in_offset))
 80032a0:	8aba      	ldrh	r2, [r7, #20]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	895b      	ldrh	r3, [r3, #10]
 80032a6:	4619      	mov	r1, r3
 80032a8:	8bfb      	ldrh	r3, [r7, #30]
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dd04      	ble.n	80032ba <mqtt_parse_incoming+0x126>
          cpy_len = p->len - in_offset;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	895a      	ldrh	r2, [r3, #10]
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	82bb      	strh	r3, [r7, #20]
      }
      var_hdr_payload = (u8_t*)pbuf_get_contiguous(p, client->rx_buffer + fixed_hdr_len,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	18d1      	adds	r1, r2, r3
 80032c4:	8a7a      	ldrh	r2, [r7, #18]
 80032c6:	8ab8      	ldrh	r0, [r7, #20]
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4603      	mov	r3, r0
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f003 f9ea 	bl	80066a8 <pbuf_get_contiguous>
 80032d4:	60f8      	str	r0, [r7, #12]
                                                   buffer_space, cpy_len, in_offset);

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032da:	8abb      	ldrh	r3, [r7, #20]
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 80032e2:	8bfa      	ldrh	r2, [r7, #30]
 80032e4:	8abb      	ldrh	r3, [r7, #20]
 80032e6:	4413      	add	r3, r2
 80032e8:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80032ea:	8abb      	ldrh	r3, [r7, #20]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      /* Whole or partial message received */
      res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len, var_hdr_payload);
 80032f2:	8aba      	ldrh	r2, [r7, #20]
 80032f4:	7df9      	ldrb	r1, [r7, #23]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fd8d 	bl	8002e1c <mqtt_message_received>
 8003302:	4603      	mov	r3, r0
 8003304:	817b      	strh	r3, [r7, #10]
      if (res != MQTT_CONNECT_ACCEPTED) {
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <mqtt_parse_incoming+0x17c>
        return res;
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	e00e      	b.n	800332e <mqtt_parse_incoming+0x19a>
      }
      if (msg_rem_len == 0) {
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <mqtt_parse_incoming+0x18c>
        /* Reset parser state */
        client->msg_idx = 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	669a      	str	r2, [r3, #104]	; 0x68
        /* msg_tot_len = 0; */
        fixed_hdr_len = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	891b      	ldrh	r3, [r3, #8]
 8003324:	8bfa      	ldrh	r2, [r7, #30]
 8003326:	429a      	cmp	r2, r3
 8003328:	f4ff af42 	bcc.w	80031b0 <mqtt_parse_incoming+0x1c>
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <mqtt_tcp_recv_cb+0x30>
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <mqtt_tcp_recv_cb+0xc0>)
 8003352:	f240 32ae 	movw	r2, #942	; 0x3ae
 8003356:	4929      	ldr	r1, [pc, #164]	; (80033fc <mqtt_tcp_recv_cb+0xc4>)
 8003358:	4829      	ldr	r0, [pc, #164]	; (8003400 <mqtt_tcp_recv_cb+0xc8>)
 800335a:	f010 fbd9 	bl	8013b10 <iprintf>
 800335e:	2000      	movs	r0, #0
 8003360:	f010 fcd8 	bl	8013d14 <fflush>
 8003364:	f010 fc1d 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	d00b      	beq.n	800338a <mqtt_tcp_recv_cb+0x52>
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <mqtt_tcp_recv_cb+0xc0>)
 8003374:	f240 32af 	movw	r2, #943	; 0x3af
 8003378:	4922      	ldr	r1, [pc, #136]	; (8003404 <mqtt_tcp_recv_cb+0xcc>)
 800337a:	4821      	ldr	r0, [pc, #132]	; (8003400 <mqtt_tcp_recv_cb+0xc8>)
 800337c:	f010 fbc8 	bl	8013b10 <iprintf>
 8003380:	2000      	movs	r0, #0
 8003382:	f010 fcc7 	bl	8013d14 <fflush>
 8003386:	f010 fc0c 	bl	8013ba2 <abort>

  if (p == NULL) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <mqtt_tcp_recv_cb+0x64>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003394:	6978      	ldr	r0, [r7, #20]
 8003396:	f7ff fbe5 	bl	8002b64 <mqtt_close>
 800339a:	e027      	b.n	80033ec <mqtt_tcp_recv_cb+0xb4>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <mqtt_tcp_recv_cb+0x78>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f002 fe9d 	bl	80060e4 <pbuf_free>
      return err;
 80033aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ae:	e01e      	b.n	80033ee <mqtt_tcp_recv_cb+0xb6>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	891b      	ldrh	r3, [r3, #8]
 80033b4:	4619      	mov	r1, r3
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	f003 fec8 	bl	800714c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff fee8 	bl	8003194 <mqtt_parse_incoming>
 80033c4:	4603      	mov	r3, r0
 80033c6:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f002 fe8b 	bl	80060e4 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80033ce:	8a7b      	ldrh	r3, [r7, #18]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <mqtt_tcp_recv_cb+0xa6>
      mqtt_close(client, res);
 80033d4:	8a7b      	ldrh	r3, [r7, #18]
 80033d6:	4619      	mov	r1, r3
 80033d8:	6978      	ldr	r0, [r7, #20]
 80033da:	f7ff fbc3 	bl	8002b64 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	885b      	ldrh	r3, [r3, #2]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <mqtt_tcp_recv_cb+0xb4>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	0801509c 	.word	0x0801509c
 80033fc:	080152f8 	.word	0x080152f8
 8003400:	08015100 	.word	0x08015100
 8003404:	0801531c 	.word	0x0801531c

08003408 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	7a9b      	ldrb	r3, [r3, #10]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d127      	bne.n	8003472 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800342e:	e00d      	b.n	800344c <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	6892      	ldr	r2, [r2, #8]
 8003440:	2100      	movs	r1, #0
 8003442:	4610      	mov	r0, r2
 8003444:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	f7ff f97c 	bl	8002744 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3318      	adds	r3, #24
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f986 	bl	8002764 <mqtt_take_request>
 8003458:	6138      	str	r0, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e7      	bne.n	8003430 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7ff f80d 	bl	800248c <mqtt_output_send>
  }
  return ERR_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <mqtt_tcp_err_cb+0x2e>
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <mqtt_tcp_err_cb+0x48>)
 8003494:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003498:	490b      	ldr	r1, [pc, #44]	; (80034c8 <mqtt_tcp_err_cb+0x4c>)
 800349a:	480c      	ldr	r0, [pc, #48]	; (80034cc <mqtt_tcp_err_cb+0x50>)
 800349c:	f010 fb38 	bl	8013b10 <iprintf>
 80034a0:	2000      	movs	r0, #0
 80034a2:	f010 fc37 	bl	8013d14 <fflush>
 80034a6:	f010 fb7c 	bl	8013ba2 <abort>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = NULL;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80034b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fb55 	bl	8002b64 <mqtt_close>
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	0801509c 	.word	0x0801509c
 80034c8:	08015344 	.word	0x08015344
 80034cc:	08015100 	.word	0x08015100

080034d0 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	7a9b      	ldrb	r3, [r3, #10]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d105      	bne.n	80034f2 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	33ec      	adds	r3, #236	; 0xec
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe ffcd 	bl	800248c <mqtt_output_send>
  }
  return ERR_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	e025      	b.n	8003568 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8003522:	4913      	ldr	r1, [pc, #76]	; (8003570 <mqtt_tcp_connect_cb+0x74>)
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f004 fe6b 	bl	8008200 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800352a:	4912      	ldr	r1, [pc, #72]	; (8003574 <mqtt_tcp_connect_cb+0x78>)
 800352c:	68b8      	ldr	r0, [r7, #8]
 800352e:	f004 fe8d 	bl	800824c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8003532:	2202      	movs	r2, #2
 8003534:	4910      	ldr	r1, [pc, #64]	; (8003578 <mqtt_tcp_connect_cb+0x7c>)
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f004 fed4 	bl	80082e4 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2202      	movs	r2, #2
 8003540:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	490d      	ldr	r1, [pc, #52]	; (800357c <mqtt_tcp_connect_cb+0x80>)
 8003546:	f241 3088 	movw	r0, #5000	; 0x1388
 800354a:	f009 ff73 	bl	800d434 <sys_timeout>
  client->cyclic_tick = 0;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fe ff93 	bl	800248c <mqtt_output_send>

  return ERR_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	08003339 	.word	0x08003339
 8003574:	08003409 	.word	0x08003409
 8003578:	080034d1 	.word	0x080034d1
 800357c:	08002c31 	.word	0x08002c31

08003580 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <mqtt_publish+0x2c>
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <mqtt_publish+0x1a0>)
 8003596:	f240 425b 	movw	r2, #1115	; 0x45b
 800359a:	4962      	ldr	r1, [pc, #392]	; (8003724 <mqtt_publish+0x1a4>)
 800359c:	4862      	ldr	r0, [pc, #392]	; (8003728 <mqtt_publish+0x1a8>)
 800359e:	f010 fab7 	bl	8013b10 <iprintf>
 80035a2:	2000      	movs	r0, #0
 80035a4:	f010 fbb6 	bl	8013d14 <fflush>
 80035a8:	f010 fafb 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <mqtt_publish+0x4a>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <mqtt_publish+0x1a0>)
 80035b4:	f240 425c 	movw	r2, #1116	; 0x45c
 80035b8:	495c      	ldr	r1, [pc, #368]	; (800372c <mqtt_publish+0x1ac>)
 80035ba:	485b      	ldr	r0, [pc, #364]	; (8003728 <mqtt_publish+0x1a8>)
 80035bc:	f010 faa8 	bl	8013b10 <iprintf>
 80035c0:	2000      	movs	r0, #0
 80035c2:	f010 fba7 	bl	8013d14 <fflush>
 80035c6:	f010 faec 	bl	8013ba2 <abort>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	7a9b      	ldrb	r3, [r3, #10]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <mqtt_publish+0x66>
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <mqtt_publish+0x1a0>)
 80035d4:	f240 425d 	movw	r2, #1117	; 0x45d
 80035d8:	4955      	ldr	r1, [pc, #340]	; (8003730 <mqtt_publish+0x1b0>)
 80035da:	4853      	ldr	r0, [pc, #332]	; (8003728 <mqtt_publish+0x1a8>)
 80035dc:	f7fe fc71 	bl	8001ec2 <lwip_win32_platform_diag>
 80035e0:	f06f 030a 	mvn.w	r3, #10
 80035e4:	e097      	b.n	8003716 <mqtt_publish+0x196>

  topic_strlen = strlen(topic);
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f7fc fdfc 	bl	80001e4 <strlen>
 80035ec:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d909      	bls.n	800360c <mqtt_publish+0x8c>
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <mqtt_publish+0x1a0>)
 80035fa:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80035fe:	494d      	ldr	r1, [pc, #308]	; (8003734 <mqtt_publish+0x1b4>)
 8003600:	4849      	ldr	r0, [pc, #292]	; (8003728 <mqtt_publish+0x1a8>)
 8003602:	f7fe fc5e 	bl	8001ec2 <lwip_win32_platform_diag>
 8003606:	f06f 030f 	mvn.w	r3, #15
 800360a:	e084      	b.n	8003716 <mqtt_publish+0x196>
  topic_len = (u16_t)topic_strlen;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8003610:	8b7b      	ldrh	r3, [r7, #26]
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4413      	add	r3, r2
 8003618:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800361a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <mqtt_publish+0xb4>
    total_len += 2;
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	3302      	adds	r3, #2
 8003626:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7fe fe97 	bl	800235c <msg_generate_packet_id>
 800362e:	4603      	mov	r3, r0
 8003630:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003632:	e001      	b.n	8003638 <mqtt_publish+0xb8>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363e:	d309      	bcc.n	8003654 <mqtt_publish+0xd4>
 8003640:	4b37      	ldr	r3, [pc, #220]	; (8003720 <mqtt_publish+0x1a0>)
 8003642:	f240 426c 	movw	r2, #1132	; 0x46c
 8003646:	493c      	ldr	r1, [pc, #240]	; (8003738 <mqtt_publish+0x1b8>)
 8003648:	4837      	ldr	r0, [pc, #220]	; (8003728 <mqtt_publish+0x1a8>)
 800364a:	f7fe fc3a 	bl	8001ec2 <lwip_win32_platform_diag>
 800364e:	f06f 030f 	mvn.w	r3, #15
 8003652:	e060      	b.n	8003716 <mqtt_publish+0x196>
  remaining_length = (u16_t)total_len;
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f103 001c 	add.w	r0, r3, #28
 800365e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	2104      	movs	r1, #4
 8003668:	f7fe ffca 	bl	8002600 <mqtt_create_request>
 800366c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <mqtt_publish+0xfa>
    return ERR_MEM;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	e04d      	b.n	8003716 <mqtt_publish+0x196>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	33ec      	adds	r3, #236	; 0xec
 800367e:	8b3a      	ldrh	r2, [r7, #24]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fa36 	bl	8002af4 <mqtt_output_check_space>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <mqtt_publish+0x11a>
    mqtt_delete_request(r);
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff f858 	bl	8002744 <mqtt_delete_request>
    return ERR_MEM;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e03d      	b.n	8003716 <mqtt_publish+0x196>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80036a0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80036a4:	8b3b      	ldrh	r3, [r7, #24]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	2103      	movs	r1, #3
 80036b4:	f7ff f9d5 	bl	8002a62 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	33ec      	adds	r3, #236	; 0xec
 80036bc:	8b7a      	ldrh	r2, [r7, #26]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f9a3 	bl	8002a0c <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80036c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <mqtt_publish+0x15c>
    mqtt_output_append_u16(&client->output, pkt_id);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	33ec      	adds	r3, #236	; 0xec
 80036d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f963 	bl	80029a2 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <mqtt_publish+0x176>
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <mqtt_publish+0x176>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	33ec      	adds	r3, #236	; 0xec
 80036ec:	887a      	ldrh	r2, [r7, #2]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff f96e 	bl	80029d2 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3318      	adds	r3, #24
 80036fa:	6979      	ldr	r1, [r7, #20]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe ffcb 	bl	8002698 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe febc 	bl	800248c <mqtt_output_send>
  return ERR_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	0801509c 	.word	0x0801509c
 8003724:	08015364 	.word	0x08015364
 8003728:	08015100 	.word	0x08015100
 800372c:	08015384 	.word	0x08015384
 8003730:	080153a0 	.word	0x080153a0
 8003734:	080153c0 	.word	0x080153c0
 8003738:	080153e4 	.word	0x080153e4

0800373c <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <mqtt_sub_unsub+0x2e>
 8003752:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <mqtt_sub_unsub+0x1ac>)
 8003754:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8003758:	4964      	ldr	r1, [pc, #400]	; (80038ec <mqtt_sub_unsub+0x1b0>)
 800375a:	4865      	ldr	r0, [pc, #404]	; (80038f0 <mqtt_sub_unsub+0x1b4>)
 800375c:	f010 f9d8 	bl	8013b10 <iprintf>
 8003760:	2000      	movs	r0, #0
 8003762:	f010 fad7 	bl	8013d14 <fflush>
 8003766:	f010 fa1c 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <mqtt_sub_unsub+0x4c>
 8003770:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <mqtt_sub_unsub+0x1ac>)
 8003772:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8003776:	495f      	ldr	r1, [pc, #380]	; (80038f4 <mqtt_sub_unsub+0x1b8>)
 8003778:	485d      	ldr	r0, [pc, #372]	; (80038f0 <mqtt_sub_unsub+0x1b4>)
 800377a:	f010 f9c9 	bl	8013b10 <iprintf>
 800377e:	2000      	movs	r0, #0
 8003780:	f010 fac8 	bl	8013d14 <fflush>
 8003784:	f010 fa0d 	bl	8013ba2 <abort>

  topic_strlen = strlen(topic);
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f7fc fd2b 	bl	80001e4 <strlen>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003796:	4293      	cmp	r3, r2
 8003798:	d909      	bls.n	80037ae <mqtt_sub_unsub+0x72>
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <mqtt_sub_unsub+0x1ac>)
 800379c:	f240 42aa 	movw	r2, #1194	; 0x4aa
 80037a0:	4955      	ldr	r1, [pc, #340]	; (80038f8 <mqtt_sub_unsub+0x1bc>)
 80037a2:	4853      	ldr	r0, [pc, #332]	; (80038f0 <mqtt_sub_unsub+0x1b4>)
 80037a4:	f7fe fb8d 	bl	8001ec2 <lwip_win32_platform_diag>
 80037a8:	f06f 030f 	mvn.w	r3, #15
 80037ac:	e098      	b.n	80038e0 <mqtt_sub_unsub+0x1a4>
  topic_len = (u16_t)topic_strlen;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 80037b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037b4:	3304      	adds	r3, #4
 80037b6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	bf14      	ite	ne
 80037be:	2201      	movne	r2, #1
 80037c0:	2200      	moveq	r2, #0
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	4413      	add	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d309      	bcc.n	80037e4 <mqtt_sub_unsub+0xa8>
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <mqtt_sub_unsub+0x1ac>)
 80037d2:	f240 42ae 	movw	r2, #1198	; 0x4ae
 80037d6:	4949      	ldr	r1, [pc, #292]	; (80038fc <mqtt_sub_unsub+0x1c0>)
 80037d8:	4845      	ldr	r0, [pc, #276]	; (80038f0 <mqtt_sub_unsub+0x1b4>)
 80037da:	f7fe fb72 	bl	8001ec2 <lwip_win32_platform_diag>
 80037de:	f06f 030f 	mvn.w	r3, #15
 80037e2:	e07d      	b.n	80038e0 <mqtt_sub_unsub+0x1a4>
  remaining_length = (u16_t)total_len;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d90b      	bls.n	8003806 <mqtt_sub_unsub+0xca>
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <mqtt_sub_unsub+0x1ac>)
 80037f0:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80037f4:	4942      	ldr	r1, [pc, #264]	; (8003900 <mqtt_sub_unsub+0x1c4>)
 80037f6:	483e      	ldr	r0, [pc, #248]	; (80038f0 <mqtt_sub_unsub+0x1b4>)
 80037f8:	f010 f98a 	bl	8013b10 <iprintf>
 80037fc:	2000      	movs	r0, #0
 80037fe:	f010 fa89 	bl	8013d14 <fflush>
 8003802:	f010 f9ce 	bl	8013ba2 <abort>
  if (client->conn_state == TCP_DISCONNECTED) {
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	7a9b      	ldrb	r3, [r3, #10]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <mqtt_sub_unsub+0xd8>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800380e:	f06f 030a 	mvn.w	r3, #10
 8003812:	e065      	b.n	80038e0 <mqtt_sub_unsub+0x1a4>
  }

  pkt_id = msg_generate_packet_id(client);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7fe fda1 	bl	800235c <msg_generate_packet_id>
 800381a:	4603      	mov	r3, r0
 800381c:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f103 001c 	add.w	r0, r3, #28
 8003824:	8b3a      	ldrh	r2, [r7, #24]
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2104      	movs	r1, #4
 800382e:	f7fe fee7 	bl	8002600 <mqtt_create_request>
 8003832:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <mqtt_sub_unsub+0x104>
    return ERR_MEM;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e04f      	b.n	80038e0 <mqtt_sub_unsub+0x1a4>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	33ec      	adds	r3, #236	; 0xec
 8003844:	8b7a      	ldrh	r2, [r7, #26]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f953 	bl	8002af4 <mqtt_output_check_space>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <mqtt_sub_unsub+0x124>
    mqtt_delete_request(r);
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7fe ff75 	bl	8002744 <mqtt_delete_request>
    return ERR_MEM;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e03f      	b.n	80038e0 <mqtt_sub_unsub+0x1a4>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003866:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <mqtt_sub_unsub+0x136>
 800386e:	2108      	movs	r1, #8
 8003870:	e000      	b.n	8003874 <mqtt_sub_unsub+0x138>
 8003872:	210a      	movs	r1, #10
 8003874:	8b7b      	ldrh	r3, [r7, #26]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	2200      	movs	r2, #0
 8003880:	f7ff f8ef 	bl	8002a62 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	33ec      	adds	r3, #236	; 0xec
 8003888:	8b3a      	ldrh	r2, [r7, #24]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff f888 	bl	80029a2 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	33ec      	adds	r3, #236	; 0xec
 8003896:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f8b6 	bl	8002a0c <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 80038a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <mqtt_sub_unsub+0x184>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	bf28      	it	cs
 80038b4:	2302      	movcs	r3, #2
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f7ff f862 	bl	8002984 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3318      	adds	r3, #24
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fee6 	bl	8002698 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7fe fdd7 	bl	800248c <mqtt_output_send>
  return ERR_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0801509c 	.word	0x0801509c
 80038ec:	08015408 	.word	0x08015408
 80038f0:	08015100 	.word	0x08015100
 80038f4:	08015428 	.word	0x08015428
 80038f8:	08015448 	.word	0x08015448
 80038fc:	08015470 	.word	0x08015470
 8003900:	08015498 	.word	0x08015498

08003904 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <mqtt_set_inpub_callback+0x2c>
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <mqtt_set_inpub_callback+0x48>)
 800391a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800391e:	490c      	ldr	r1, [pc, #48]	; (8003950 <mqtt_set_inpub_callback+0x4c>)
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <mqtt_set_inpub_callback+0x50>)
 8003922:	f010 f8f5 	bl	8013b10 <iprintf>
 8003926:	2000      	movs	r0, #0
 8003928:	f010 f9f4 	bl	8013d14 <fflush>
 800392c:	f010 f939 	bl	8013ba2 <abort>
  client->data_cb = data_cb;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	0801509c 	.word	0x0801509c
 8003950:	080154b0 	.word	0x080154b0
 8003954:	08015100 	.word	0x08015100

08003958 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800395c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8003960:	2001      	movs	r0, #1
 8003962:	f001 fc95 	bl	8005290 <mem_calloc>
 8003966:	4603      	mov	r3, r0
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}

0800396c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800397c:	230a      	movs	r3, #10
 800397e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	2300      	movs	r3, #0
 8003988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  u16_t client_user_len = 0, client_pass_len = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003996:	2300      	movs	r3, #0
 8003998:	84bb      	strh	r3, [r7, #36]	; 0x24
  mqtt_incoming_data_cb_t data_cb;
  mqtt_incoming_publish_cb_t pub_cb;
  void *inpub_arg;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <mqtt_client_connect+0x4c>
 80039a0:	4bab      	ldr	r3, [pc, #684]	; (8003c50 <mqtt_client_connect+0x2e4>)
 80039a2:	f240 5219 	movw	r2, #1305	; 0x519
 80039a6:	49ab      	ldr	r1, [pc, #684]	; (8003c54 <mqtt_client_connect+0x2e8>)
 80039a8:	48ab      	ldr	r0, [pc, #684]	; (8003c58 <mqtt_client_connect+0x2ec>)
 80039aa:	f010 f8b1 	bl	8013b10 <iprintf>
 80039ae:	2000      	movs	r0, #0
 80039b0:	f010 f9b0 	bl	8013d14 <fflush>
 80039b4:	f010 f8f5 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <mqtt_client_connect+0x6a>
 80039be:	4ba4      	ldr	r3, [pc, #656]	; (8003c50 <mqtt_client_connect+0x2e4>)
 80039c0:	f240 521a 	movw	r2, #1306	; 0x51a
 80039c4:	49a5      	ldr	r1, [pc, #660]	; (8003c5c <mqtt_client_connect+0x2f0>)
 80039c6:	48a4      	ldr	r0, [pc, #656]	; (8003c58 <mqtt_client_connect+0x2ec>)
 80039c8:	f010 f8a2 	bl	8013b10 <iprintf>
 80039cc:	2000      	movs	r0, #0
 80039ce:	f010 f9a1 	bl	8013d14 <fflush>
 80039d2:	f010 f8e6 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <mqtt_client_connect+0x88>
 80039dc:	4b9c      	ldr	r3, [pc, #624]	; (8003c50 <mqtt_client_connect+0x2e4>)
 80039de:	f240 521b 	movw	r2, #1307	; 0x51b
 80039e2:	499f      	ldr	r1, [pc, #636]	; (8003c60 <mqtt_client_connect+0x2f4>)
 80039e4:	489c      	ldr	r0, [pc, #624]	; (8003c58 <mqtt_client_connect+0x2ec>)
 80039e6:	f010 f893 	bl	8013b10 <iprintf>
 80039ea:	2000      	movs	r0, #0
 80039ec:	f010 f992 	bl	8013d14 <fflush>
 80039f0:	f010 f8d7 	bl	8013ba2 <abort>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 80039f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <mqtt_client_connect+0xa8>
 80039fc:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <mqtt_client_connect+0x2e4>)
 80039fe:	f240 521c 	movw	r2, #1308	; 0x51c
 8003a02:	4998      	ldr	r1, [pc, #608]	; (8003c64 <mqtt_client_connect+0x2f8>)
 8003a04:	4894      	ldr	r0, [pc, #592]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003a06:	f010 f883 	bl	8013b10 <iprintf>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f010 f982 	bl	8013d14 <fflush>
 8003a10:	f010 f8c7 	bl	8013ba2 <abort>

  if (client->conn_state != TCP_DISCONNECTED) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	7a9b      	ldrb	r3, [r3, #10]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <mqtt_client_connect+0xb6>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8003a1c:	f06f 0309 	mvn.w	r3, #9
 8003a20:	e23a      	b.n	8003e98 <mqtt_client_connect+0x52c>
  }

  /* Wipe clean, but keep callbacks */
  data_cb = client->data_cb;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	623b      	str	r3, [r7, #32]
  pub_cb = client->pub_cb;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	61fb      	str	r3, [r7, #28]
  inpub_arg = client->inpub_arg;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	61bb      	str	r3, [r7, #24]
  memset(client, 0, sizeof(mqtt_client_t));
 8003a34:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f010 fa8f 	bl	8013f5e <memset>
  client->data_cb = data_cb;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = inpub_arg;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	65da      	str	r2, [r3, #92]	; 0x5c

  client->connect_arg = arg;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a56:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	899a      	ldrh	r2, [r3, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	331c      	adds	r3, #28
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe ff57 	bl	8002920 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07c      	beq.n	8003b74 <mqtt_client_connect+0x208>
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d078      	beq.n	8003b74 <mqtt_client_connect+0x208>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8003a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    flags |= (client_info->will_qos & 3) << 3;
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	7e5b      	ldrb	r3, [r3, #25]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f003 0318 	and.w	r3, r3, #24
 8003a9a:	b25a      	sxtb	r2, r3
 8003a9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (client_info->will_retain) {
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	7e9b      	ldrb	r3, [r3, #26]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <mqtt_client_connect+0x150>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8003ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ab4:	f043 0320 	orr.w	r3, r3, #32
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    len = strlen(client_info->will_topic);
 8003abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fb8f 	bl	80001e4 <strlen>
 8003ac6:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2bff      	cmp	r3, #255	; 0xff
 8003acc:	d909      	bls.n	8003ae2 <mqtt_client_connect+0x176>
 8003ace:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003ad0:	f240 5239 	movw	r2, #1337	; 0x539
 8003ad4:	4964      	ldr	r1, [pc, #400]	; (8003c68 <mqtt_client_connect+0x2fc>)
 8003ad6:	4860      	ldr	r0, [pc, #384]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003ad8:	f7fe f9f3 	bl	8001ec2 <lwip_win32_platform_diag>
 8003adc:	f06f 0305 	mvn.w	r3, #5
 8003ae0:	e1da      	b.n	8003e98 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <mqtt_client_connect+0x190>
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003aea:	f240 523a 	movw	r2, #1338	; 0x53a
 8003aee:	495f      	ldr	r1, [pc, #380]	; (8003c6c <mqtt_client_connect+0x300>)
 8003af0:	4859      	ldr	r0, [pc, #356]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003af2:	f7fe f9e6 	bl	8001ec2 <lwip_win32_platform_diag>
 8003af6:	f06f 0305 	mvn.w	r3, #5
 8003afa:	e1cd      	b.n	8003e98 <mqtt_client_connect+0x52c>
    will_topic_len = (u8_t)len;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    if (client_info->will_msg_len == 0)
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	7e1b      	ldrb	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <mqtt_client_connect+0x1cc>
    {
        len = strlen(client_info->will_msg);
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fb68 	bl	80001e4 <strlen>
 8003b14:	6178      	str	r0, [r7, #20]
        LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2bff      	cmp	r3, #255	; 0xff
 8003b1a:	d909      	bls.n	8003b30 <mqtt_client_connect+0x1c4>
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003b1e:	f240 523f 	movw	r2, #1343	; 0x53f
 8003b22:	4953      	ldr	r1, [pc, #332]	; (8003c70 <mqtt_client_connect+0x304>)
 8003b24:	484c      	ldr	r0, [pc, #304]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003b26:	f7fe f9cc 	bl	8001ec2 <lwip_win32_platform_diag>
 8003b2a:	f06f 0305 	mvn.w	r3, #5
 8003b2e:	e1b3      	b.n	8003e98 <mqtt_client_connect+0x52c>
        will_msg_len = (u8_t)len;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003b36:	e003      	b.n	8003b40 <mqtt_client_connect+0x1d4>
    }
    else
    {
        will_msg_len = client_info->will_msg_len;
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	7e1b      	ldrb	r3, [r3, #24]
 8003b3c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8003b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b42:	1c9a      	adds	r2, r3, #2
 8003b44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003b48:	4413      	add	r3, r2
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5a:	d309      	bcc.n	8003b70 <mqtt_client_connect+0x204>
 8003b5c:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003b5e:	f240 5247 	movw	r2, #1351	; 0x547
 8003b62:	4944      	ldr	r1, [pc, #272]	; (8003c74 <mqtt_client_connect+0x308>)
 8003b64:	483c      	ldr	r0, [pc, #240]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003b66:	f7fe f9ac 	bl	8001ec2 <lwip_win32_platform_diag>
 8003b6a:	f06f 0305 	mvn.w	r3, #5
 8003b6e:	e193      	b.n	8003e98 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_user != NULL) {
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03d      	beq.n	8003bf8 <mqtt_client_connect+0x28c>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8003b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_user);
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fb29 	bl	80001e4 <strlen>
 8003b92:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d309      	bcc.n	8003bb0 <mqtt_client_connect+0x244>
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003b9e:	f240 524d 	movw	r2, #1357	; 0x54d
 8003ba2:	4935      	ldr	r1, [pc, #212]	; (8003c78 <mqtt_client_connect+0x30c>)
 8003ba4:	482c      	ldr	r0, [pc, #176]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003ba6:	f7fe f98c 	bl	8001ec2 <lwip_win32_platform_diag>
 8003baa:	f06f 0305 	mvn.w	r3, #5
 8003bae:	e173      	b.n	8003e98 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <mqtt_client_connect+0x25e>
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003bb8:	f240 524e 	movw	r2, #1358	; 0x54e
 8003bbc:	492f      	ldr	r1, [pc, #188]	; (8003c7c <mqtt_client_connect+0x310>)
 8003bbe:	4826      	ldr	r0, [pc, #152]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003bc0:	f7fe f97f 	bl	8001ec2 <lwip_win32_platform_diag>
 8003bc4:	f06f 0305 	mvn.w	r3, #5
 8003bc8:	e166      	b.n	8003e98 <mqtt_client_connect+0x52c>
    client_user_len = (u16_t)len;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
    len = remaining_length + 2 + client_user_len;
 8003bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d309      	bcc.n	8003bf4 <mqtt_client_connect+0x288>
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003be2:	f240 5251 	movw	r2, #1361	; 0x551
 8003be6:	4923      	ldr	r1, [pc, #140]	; (8003c74 <mqtt_client_connect+0x308>)
 8003be8:	481b      	ldr	r0, [pc, #108]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003bea:	f7fe f96a 	bl	8001ec2 <lwip_win32_platform_diag>
 8003bee:	f06f 0305 	mvn.w	r3, #5
 8003bf2:	e151      	b.n	8003e98 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  if (client_info->client_pass != NULL) {
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05a      	beq.n	8003cb6 <mqtt_client_connect+0x34a>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8003c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len = strlen(client_info->client_pass);
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fc fae7 	bl	80001e4 <strlen>
 8003c16:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d309      	bcc.n	8003c34 <mqtt_client_connect+0x2c8>
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003c22:	f240 5257 	movw	r2, #1367	; 0x557
 8003c26:	4916      	ldr	r1, [pc, #88]	; (8003c80 <mqtt_client_connect+0x314>)
 8003c28:	480b      	ldr	r0, [pc, #44]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003c2a:	f7fe f94a 	bl	8001ec2 <lwip_win32_platform_diag>
 8003c2e:	f06f 0305 	mvn.w	r3, #5
 8003c32:	e131      	b.n	8003e98 <mqtt_client_connect+0x52c>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d126      	bne.n	8003c88 <mqtt_client_connect+0x31c>
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <mqtt_client_connect+0x2e4>)
 8003c3c:	f44f 62ab 	mov.w	r2, #1368	; 0x558
 8003c40:	4910      	ldr	r1, [pc, #64]	; (8003c84 <mqtt_client_connect+0x318>)
 8003c42:	4805      	ldr	r0, [pc, #20]	; (8003c58 <mqtt_client_connect+0x2ec>)
 8003c44:	f7fe f93d 	bl	8001ec2 <lwip_win32_platform_diag>
 8003c48:	f06f 0305 	mvn.w	r3, #5
 8003c4c:	e124      	b.n	8003e98 <mqtt_client_connect+0x52c>
 8003c4e:	bf00      	nop
 8003c50:	0801509c 	.word	0x0801509c
 8003c54:	080154d8 	.word	0x080154d8
 8003c58:	08015100 	.word	0x08015100
 8003c5c:	080154fc 	.word	0x080154fc
 8003c60:	08015524 	.word	0x08015524
 8003c64:	08015550 	.word	0x08015550
 8003c68:	08015584 	.word	0x08015584
 8003c6c:	080155c4 	.word	0x080155c4
 8003c70:	08015604 	.word	0x08015604
 8003c74:	08015640 	.word	0x08015640
 8003c78:	08015670 	.word	0x08015670
 8003c7c:	080156b0 	.word	0x080156b0
 8003c80:	080156f4 	.word	0x080156f4
 8003c84:	08015734 	.word	0x08015734
    client_pass_len = (u16_t)len;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    len = remaining_length + 2 + client_pass_len;
 8003c8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d309      	bcc.n	8003cb2 <mqtt_client_connect+0x346>
 8003c9e:	4b80      	ldr	r3, [pc, #512]	; (8003ea0 <mqtt_client_connect+0x534>)
 8003ca0:	f240 525b 	movw	r2, #1371	; 0x55b
 8003ca4:	497f      	ldr	r1, [pc, #508]	; (8003ea4 <mqtt_client_connect+0x538>)
 8003ca6:	4880      	ldr	r0, [pc, #512]	; (8003ea8 <mqtt_client_connect+0x53c>)
 8003ca8:	f7fe f90b 	bl	8001ec2 <lwip_win32_platform_diag>
 8003cac:	f06f 0305 	mvn.w	r3, #5
 8003cb0:	e0f2      	b.n	8003e98 <mqtt_client_connect+0x52c>
    remaining_length = (u16_t)len;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8003cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  len = strlen(client_info->client_id);
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fa8c 	bl	80001e4 <strlen>
 8003ccc:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d309      	bcc.n	8003cea <mqtt_client_connect+0x37e>
 8003cd6:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <mqtt_client_connect+0x534>)
 8003cd8:	f240 5263 	movw	r2, #1379	; 0x563
 8003cdc:	4973      	ldr	r1, [pc, #460]	; (8003eac <mqtt_client_connect+0x540>)
 8003cde:	4872      	ldr	r0, [pc, #456]	; (8003ea8 <mqtt_client_connect+0x53c>)
 8003ce0:	f7fe f8ef 	bl	8001ec2 <lwip_win32_platform_diag>
 8003ce4:	f06f 0305 	mvn.w	r3, #5
 8003ce8:	e0d6      	b.n	8003e98 <mqtt_client_connect+0x52c>
  client_id_length = (u16_t)len;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 8003cee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	8a7b      	ldrh	r3, [r7, #18]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d309      	bcc.n	8003d14 <mqtt_client_connect+0x3a8>
 8003d00:	4b67      	ldr	r3, [pc, #412]	; (8003ea0 <mqtt_client_connect+0x534>)
 8003d02:	f240 5266 	movw	r2, #1382	; 0x566
 8003d06:	4967      	ldr	r1, [pc, #412]	; (8003ea4 <mqtt_client_connect+0x538>)
 8003d08:	4867      	ldr	r0, [pc, #412]	; (8003ea8 <mqtt_client_connect+0x53c>)
 8003d0a:	f7fe f8da 	bl	8001ec2 <lwip_win32_platform_diag>
 8003d0e:	f06f 0305 	mvn.w	r3, #5
 8003d12:	e0c1      	b.n	8003e98 <mqtt_client_connect+0x52c>
  remaining_length = (u16_t)len;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	85bb      	strh	r3, [r7, #44]	; 0x2c

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	33ec      	adds	r3, #236	; 0xec
 8003d1c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fee7 	bl	8002af4 <mqtt_output_check_space>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <mqtt_client_connect+0x3c6>
    return ERR_MEM;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	e0b2      	b.n	8003e98 <mqtt_client_connect+0x52c>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8003d32:	2000      	movs	r0, #0
 8003d34:	f004 fa44 	bl	80081c0 <tcp_new_ip_type>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <mqtt_client_connect+0x3e0>
    return ERR_MEM;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	e0a5      	b.n	8003e98 <mqtt_client_connect+0x52c>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 fa42 	bl	80081dc <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4954      	ldr	r1, [pc, #336]	; (8003eb0 <mqtt_client_connect+0x544>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 f8f5 	bl	8006f50 <tcp_bind>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003d6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8084 	bne.w	8003e7e <mqtt_client_connect+0x512>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68d8      	ldr	r0, [r3, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	; (8003eb4 <mqtt_client_connect+0x548>)
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	f003 fa80 	bl	8007284 <tcp_connect>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK) {
 8003d8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d177      	bne.n	8003e82 <mqtt_client_connect+0x516>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4948      	ldr	r1, [pc, #288]	; (8003eb8 <mqtt_client_connect+0x54c>)
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fa7d 	bl	8008298 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2200      	movs	r2, #0
 8003db6:	2101      	movs	r1, #1
 8003db8:	f7fe fe53 	bl	8002a62 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	33ec      	adds	r3, #236	; 0xec
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	493e      	ldr	r1, [pc, #248]	; (8003ebc <mqtt_client_connect+0x550>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fe21 	bl	8002a0c <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	33ec      	adds	r3, #236	; 0xec
 8003dce:	2104      	movs	r1, #4
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fdd7 	bl	8002984 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	33ec      	adds	r3, #236	; 0xec
 8003dda:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fdcf 	bl	8002984 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dee:	899b      	ldrh	r3, [r3, #12]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f7fe fdd5 	bl	80029a2 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	8a7a      	ldrh	r2, [r7, #18]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fe fe01 	bl	8002a0c <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8003e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <mqtt_client_connect+0x4d6>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003e24:	b292      	uxth	r2, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fe fdf0 	bl	8002a0c <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003e3a:	b292      	uxth	r2, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7fe fde5 	bl	8002a0c <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8003e42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da08      	bge.n	8003e5c <mqtt_client_connect+0x4f0>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7fe fdd8 	bl	8002a0c <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8003e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <mqtt_client_connect+0x50e>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e74:	4619      	mov	r1, r3
 8003e76:	f7fe fdc9 	bl	8002a0c <mqtt_output_append_string>
  }
  return ERR_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e00c      	b.n	8003e98 <mqtt_client_connect+0x52c>
    goto tcp_fail;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <mqtt_client_connect+0x518>
    goto tcp_fail;
 8003e82:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 f855 	bl	8006f38 <tcp_abort>
  client->conn = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
  return err;
 8003e94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3730      	adds	r7, #48	; 0x30
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	0801509c 	.word	0x0801509c
 8003ea4:	08015640 	.word	0x08015640
 8003ea8:	08015100 	.word	0x08015100
 8003eac:	08015778 	.word	0x08015778
 8003eb0:	08017b44 	.word	0x08017b44
 8003eb4:	080034fd 	.word	0x080034fd
 8003eb8:	0800347d 	.word	0x0800347d
 8003ebc:	080157b4 	.word	0x080157b4

08003ec0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	b21a      	sxth	r2, r3
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	b29b      	uxth	r3, r3
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	061a      	lsls	r2, r3, #24
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	4313      	orrs	r3, r2
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	; 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <lwip_standard_chksum+0x40>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	dd0a      	ble.n	8003f5c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8003f46:	f107 030e 	add.w	r3, r7, #14
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	1c51      	adds	r1, r2, #1
 8003f50:	61f9      	str	r1, [r7, #28]
 8003f52:	7812      	ldrb	r2, [r2, #0]
 8003f54:	701a      	strb	r2, [r3, #0]
    len--;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8003f60:	e00a      	b.n	8003f78 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	61ba      	str	r2, [r7, #24]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4413      	add	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
    len -= 2;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3b02      	subs	r3, #2
 8003f76:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	dcf1      	bgt.n	8003f62 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	dd04      	ble.n	8003f8e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8003f84:	f107 030e 	add.w	r3, r7, #14
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	7812      	ldrb	r2, [r2, #0]
 8003f8c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	461a      	mov	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	0c1a      	lsrs	r2, r3, #16
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	0c1a      	lsrs	r2, r3, #16
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	b29b      	uxth	r3, r3
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	72fb      	strb	r3, [r7, #11]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e02b      	b.n	800404a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	895b      	ldrh	r3, [r3, #10]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7ff ff8d 	bl	8003f1c <lwip_standard_chksum>
 8004002:	4603      	mov	r3, r0
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0c1a      	lsrs	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b29b      	uxth	r3, r3
 8004014:	4413      	add	r3, r2
 8004016:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	895b      	ldrh	r3, [r3, #10]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1d0      	bne.n	8003ff2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ff28 	bl	8003ec0 <lwip_htons>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800407a:	893b      	ldrh	r3, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff1f 	bl	8003ec0 <lwip_htons>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0c1a      	lsrs	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b29b      	uxth	r3, r3
 8004094:	4413      	add	r3, r2
 8004096:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0c1a      	lsrs	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	b29b      	uxth	r3, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	72fb      	strb	r3, [r7, #11]
 80040c2:	4613      	mov	r3, r2
 80040c4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	0c1a      	lsrs	r2, r3, #16
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4413      	add	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	0c1a      	lsrs	r2, r3, #16
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	b29b      	uxth	r3, r3
 800410a:	4413      	add	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800410e:	893a      	ldrh	r2, [r7, #8]
 8004110:	7af9      	ldrb	r1, [r7, #11]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ff5e 	bl	8003fd6 <inet_cksum_pseudo_base>
 800411a:	4603      	mov	r3, r0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	72fb      	strb	r3, [r7, #11]
 8004132:	4613      	mov	r3, r2
 8004134:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8004136:	893a      	ldrh	r2, [r7, #8]
 8004138:	7af9      	ldrb	r1, [r7, #11]
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff ffb7 	bl	80040b4 <inet_chksum_pseudo>
 8004146:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fedb 	bl	8003f1c <lwip_standard_chksum>
 8004166:	4603      	mov	r3, r0
 8004168:	43db      	mvns	r3, r3
 800416a:	b29b      	uxth	r3, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800417e:	f002 fbab 	bl	80068d8 <stats_init>
#if !NO_SYS
  sys_init();
 8004182:	f7fd fe3f 	bl	8001e04 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8004186:	f000 fcfb 	bl	8004b80 <mem_init>
  memp_init();
 800418a:	f001 f8df 	bl	800534c <memp_init>
  pbuf_init();
  netif_init();
 800418e:	f001 f9fd 	bl	800558c <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004192:	f002 fbaf 	bl	80068f4 <tcp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
#if PPP_SUPPORT
  ppp_init();
 8004196:	f00d ff79 	bl	801208c <ppp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800419a:	f009 f92b 	bl	800d3f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80041b0:	4b34      	ldr	r3, [pc, #208]	; (8004284 <ip4_route+0xdc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e033      	b.n	8004220 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d029      	beq.n	800421a <ip4_route+0x72>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d022      	beq.n	800421a <ip4_route+0x72>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3304      	adds	r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01d      	beq.n	800421a <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	405a      	eors	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3308      	adds	r3, #8
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	e03e      	b.n	8004278 <ip4_route+0xd0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <ip4_route+0x72>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	330c      	adds	r3, #12
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d101      	bne.n	800421a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	e02e      	b.n	8004278 <ip4_route+0xd0>
  NETIF_FOREACH(netif) {
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1c8      	bne.n	80041b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <ip4_route+0xe0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <ip4_route+0xbc>
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <ip4_route+0xe0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d012      	beq.n	8004264 <ip4_route+0xbc>
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <ip4_route+0xe0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <ip4_route+0xe0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <ip4_route+0xbc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b7f      	cmp	r3, #127	; 0x7f
 8004262:	d107      	bne.n	8004274 <ip4_route+0xcc>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <ip4_route+0xe4>)
 8004266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004268:	3301      	adds	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <ip4_route+0xe4>)
 800426e:	84da      	strh	r2, [r3, #38]	; 0x26
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	e001      	b.n	8004278 <ip4_route+0xd0>
  }

  return netif_default;
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <ip4_route+0xe0>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	20002210 	.word	0x20002210
 8004288:	20002214 	.word	0x20002214
 800428c:	2000221c 	.word	0x2000221c

08004290 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <ip4_input_accept+0x44>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d011      	beq.n	80042d4 <ip4_input_accept+0x44>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <ip4_input_accept+0x50>)
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d008      	beq.n	80042d0 <ip4_input_accept+0x40>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <ip4_input_accept+0x50>)
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 faad 	bl	8004824 <ip4_addr_isbroadcast_u32>
 80042ca:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <ip4_input_accept+0x44>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <ip4_input_accept+0x46>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000880 	.word	0x20000880

080042e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80042ee:	4b8e      	ldr	r3, [pc, #568]	; (8004528 <ip4_input+0x244>)
 80042f0:	8b5b      	ldrh	r3, [r3, #26]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <ip4_input+0x244>)
 80042f8:	835a      	strh	r2, [r3, #26]
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b04      	cmp	r3, #4
 800430a:	d010      	beq.n	800432e <ip4_input+0x4a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 fee9 	bl	80060e4 <pbuf_free>
    IP_STATS_INC(ip.err);
 8004312:	4b85      	ldr	r3, [pc, #532]	; (8004528 <ip4_input+0x244>)
 8004314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004316:	3301      	adds	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b83      	ldr	r3, [pc, #524]	; (8004528 <ip4_input+0x244>)
 800431c:	859a      	strh	r2, [r3, #44]	; 0x2c
    IP_STATS_INC(ip.drop);
 800431e:	4b82      	ldr	r3, [pc, #520]	; (8004528 <ip4_input+0x244>)
 8004320:	8bdb      	ldrh	r3, [r3, #30]
 8004322:	3301      	adds	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	4b80      	ldr	r3, [pc, #512]	; (8004528 <ip4_input+0x244>)
 8004328:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e125      	b.n	800457a <ip4_input+0x296>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	b2db      	uxtb	r3, r3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	b2db      	uxtb	r3, r3
 800433c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	885b      	ldrh	r3, [r3, #2]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fdbb 	bl	8003ec0 <lwip_htons>
 800434a:	4603      	mov	r3, r0
 800434c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	891b      	ldrh	r3, [r3, #8]
 8004352:	89ba      	ldrh	r2, [r7, #12]
 8004354:	429a      	cmp	r2, r3
 8004356:	d204      	bcs.n	8004362 <ip4_input+0x7e>
    pbuf_realloc(p, iphdr_len);
 8004358:	89bb      	ldrh	r3, [r7, #12]
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fd49 	bl	8005df4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	895b      	ldrh	r3, [r3, #10]
 8004366:	89fa      	ldrh	r2, [r7, #14]
 8004368:	429a      	cmp	r2, r3
 800436a:	d807      	bhi.n	800437c <ip4_input+0x98>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	891b      	ldrh	r3, [r3, #8]
 8004370:	89ba      	ldrh	r2, [r7, #12]
 8004372:	429a      	cmp	r2, r3
 8004374:	d802      	bhi.n	800437c <ip4_input+0x98>
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	2b13      	cmp	r3, #19
 800437a:	d810      	bhi.n	800439e <ip4_input+0xba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 feb1 	bl	80060e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8004382:	4b69      	ldr	r3, [pc, #420]	; (8004528 <ip4_input+0x244>)
 8004384:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004386:	3301      	adds	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	4b67      	ldr	r3, [pc, #412]	; (8004528 <ip4_input+0x244>)
 800438c:	845a      	strh	r2, [r3, #34]	; 0x22
    IP_STATS_INC(ip.drop);
 800438e:	4b66      	ldr	r3, [pc, #408]	; (8004528 <ip4_input+0x244>)
 8004390:	8bdb      	ldrh	r3, [r3, #30]
 8004392:	3301      	adds	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	4b64      	ldr	r3, [pc, #400]	; (8004528 <ip4_input+0x244>)
 8004398:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e0ed      	b.n	800457a <ip4_input+0x296>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6938      	ldr	r0, [r7, #16]
 80043a4:	f7ff fed4 	bl	8004150 <inet_chksum>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <ip4_input+0xec>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 fe98 	bl	80060e4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 80043b4:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <ip4_input+0x244>)
 80043b6:	8c1b      	ldrh	r3, [r3, #32]
 80043b8:	3301      	adds	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	4b5a      	ldr	r3, [pc, #360]	; (8004528 <ip4_input+0x244>)
 80043be:	841a      	strh	r2, [r3, #32]
      IP_STATS_INC(ip.drop);
 80043c0:	4b59      	ldr	r3, [pc, #356]	; (8004528 <ip4_input+0x244>)
 80043c2:	8bdb      	ldrh	r3, [r3, #30]
 80043c4:	3301      	adds	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	4b57      	ldr	r3, [pc, #348]	; (8004528 <ip4_input+0x244>)
 80043ca:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e0d4      	b.n	800457a <ip4_input+0x296>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	4a55      	ldr	r2, [pc, #340]	; (800452c <ip4_input+0x248>)
 80043d6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4a53      	ldr	r2, [pc, #332]	; (800452c <ip4_input+0x248>)
 80043de:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80043e0:	4b52      	ldr	r3, [pc, #328]	; (800452c <ip4_input+0x248>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e8:	2be0      	cmp	r3, #224	; 0xe0
 80043ea:	d111      	bne.n	8004410 <ip4_input+0x12c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <ip4_input+0x126>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	3304      	adds	r3, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <ip4_input+0x126>
      netif = inp;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e02a      	b.n	8004460 <ip4_input+0x17c>
    } else {
      netif = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e027      	b.n	8004460 <ip4_input+0x17c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8004410:	6838      	ldr	r0, [r7, #0]
 8004412:	f7ff ff3d 	bl	8004290 <ip4_input_accept>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <ip4_input+0x13e>
      netif = inp;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e01e      	b.n	8004460 <ip4_input+0x17c>
    } else {
      netif = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <ip4_input+0x248>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b7f      	cmp	r3, #127	; 0x7f
 800442e:	d017      	beq.n	8004460 <ip4_input+0x17c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8004430:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <ip4_input+0x24c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e00e      	b.n	8004456 <ip4_input+0x172>
          if (netif == inp) {
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d006      	beq.n	800444e <ip4_input+0x16a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f7ff ff25 	bl	8004290 <ip4_input_accept>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <ip4_input+0x17a>
 800444c:	e000      	b.n	8004450 <ip4_input+0x16c>
            continue;
 800444e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ed      	bne.n	8004438 <ip4_input+0x154>
 800445c:	e000      	b.n	8004460 <ip4_input+0x17c>
            break;
 800445e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <ip4_input+0x248>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f9dc 	bl	8004824 <ip4_addr_isbroadcast_u32>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <ip4_input+0x248>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800447a:	2be0      	cmp	r3, #224	; 0xe0
 800447c:	d10a      	bne.n	8004494 <ip4_input+0x1b0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f001 fe30 	bl	80060e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <ip4_input+0x244>)
 8004486:	8bdb      	ldrh	r3, [r3, #30]
 8004488:	3301      	adds	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <ip4_input+0x244>)
 800448e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e072      	b.n	800457a <ip4_input+0x296>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <ip4_input+0x1cc>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <ip4_input+0x244>)
 800449c:	8bdb      	ldrh	r3, [r3, #30]
 800449e:	3301      	adds	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <ip4_input+0x244>)
 80044a4:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 fe1c 	bl	80060e4 <pbuf_free>
    return ERR_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e064      	b.n	800457a <ip4_input+0x296>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	88db      	ldrh	r3, [r3, #6]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d010      	beq.n	80044e4 <ip4_input+0x200>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 fe0e 	bl	80060e4 <pbuf_free>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
                lwip_ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
 80044c8:	4b17      	ldr	r3, [pc, #92]	; (8004528 <ip4_input+0x244>)
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	3301      	adds	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <ip4_input+0x244>)
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    IP_STATS_INC(ip.drop);
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <ip4_input+0x244>)
 80044d6:	8bdb      	ldrh	r3, [r3, #30]
 80044d8:	3301      	adds	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <ip4_input+0x244>)
 80044de:	83da      	strh	r2, [r3, #30]
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e04a      	b.n	800457a <ip4_input+0x296>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <ip4_input+0x248>)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <ip4_input+0x248>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <ip4_input+0x248>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	b2db      	uxtb	r3, r3
 8004504:	b29a      	uxth	r2, r3
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <ip4_input+0x248>)
 8004508:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800450a:	89fb      	ldrh	r3, [r7, #14]
 800450c:	4619      	mov	r1, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f001 fd92 	bl	8006038 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	7a5b      	ldrb	r3, [r3, #9]
 8004518:	2b06      	cmp	r3, #6
 800451a:	d10b      	bne.n	8004534 <ip4_input+0x250>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f004 f902 	bl	8008728 <tcp_input>
        break;
 8004524:	e016      	b.n	8004554 <ip4_input+0x270>
 8004526:	bf00      	nop
 8004528:	2000221c 	.word	0x2000221c
 800452c:	20000880 	.word	0x20000880
 8004530:	20002210 	.word	0x20002210
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <ip4_input+0x2a0>)
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3301      	adds	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <ip4_input+0x2a0>)
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
          IP_STATS_INC(ip.drop);
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <ip4_input+0x2a0>)
 8004542:	8bdb      	ldrh	r3, [r3, #30]
 8004544:	3301      	adds	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <ip4_input+0x2a0>)
 800454a:	83da      	strh	r2, [r3, #30]
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fdc9 	bl	80060e4 <pbuf_free>
        break;
 8004552:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <ip4_input+0x2a4>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <ip4_input+0x2a4>)
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <ip4_input+0x2a4>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <ip4_input+0x2a4>)
 8004568:	2200      	movs	r2, #0
 800456a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <ip4_input+0x2a4>)
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <ip4_input+0x2a4>)
 8004574:	2200      	movs	r2, #0
 8004576:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2000221c 	.word	0x2000221c
 8004588:	20000880 	.word	0x20000880

0800458c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af04      	add	r7, sp, #16
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <ip4_output_if+0x26>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	3304      	adds	r3, #4
 80045b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	9302      	str	r3, [sp, #8]
 80045be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f805 	bl	80045e0 <ip4_output_if_src>
 80045d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	7b9b      	ldrb	r3, [r3, #14]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d00b      	beq.n	8004612 <ip4_output_if_src+0x32>
 80045fa:	4b83      	ldr	r3, [pc, #524]	; (8004808 <ip4_output_if_src+0x228>)
 80045fc:	f240 326b 	movw	r2, #875	; 0x36b
 8004600:	4982      	ldr	r1, [pc, #520]	; (800480c <ip4_output_if_src+0x22c>)
 8004602:	4883      	ldr	r0, [pc, #524]	; (8004810 <ip4_output_if_src+0x230>)
 8004604:	f00f fa84 	bl	8013b10 <iprintf>
 8004608:	2000      	movs	r0, #0
 800460a:	f00f fb83 	bl	8013d14 <fflush>
 800460e:	f00f fac8 	bl	8013ba2 <abort>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80cf 	beq.w	80047b8 <ip4_output_if_src+0x1d8>
    u16_t ip_hlen = IP_HLEN;
 800461a:	2314      	movs	r3, #20
 800461c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800461e:	2114      	movs	r1, #20
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f001 fcf9 	bl	8006018 <pbuf_add_header>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <ip4_output_if_src+0x5e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800462c:	4b79      	ldr	r3, [pc, #484]	; (8004814 <ip4_output_if_src+0x234>)
 800462e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004630:	3301      	adds	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b77      	ldr	r3, [pc, #476]	; (8004814 <ip4_output_if_src+0x234>)
 8004636:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004638:	f06f 0301 	mvn.w	r3, #1
 800463c:	e0df      	b.n	80047fe <ip4_output_if_src+0x21e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	895b      	ldrh	r3, [r3, #10]
 8004648:	2b13      	cmp	r3, #19
 800464a:	d80b      	bhi.n	8004664 <ip4_output_if_src+0x84>
 800464c:	4b6e      	ldr	r3, [pc, #440]	; (8004808 <ip4_output_if_src+0x228>)
 800464e:	f44f 7268 	mov.w	r2, #928	; 0x3a0
 8004652:	4971      	ldr	r1, [pc, #452]	; (8004818 <ip4_output_if_src+0x238>)
 8004654:	486e      	ldr	r0, [pc, #440]	; (8004810 <ip4_output_if_src+0x230>)
 8004656:	f00f fa5b 	bl	8013b10 <iprintf>
 800465a:	2000      	movs	r0, #0
 800465c:	f00f fb5a 	bl	8013d14 <fflush>
 8004660:	f00f fa9f 	bl	8013ba2 <abort>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004670:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8004672:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	4313      	orrs	r3, r2
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	b21a      	sxth	r2, r3
 8004680:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	430b      	orrs	r3, r1
 800468a:	121b      	asrs	r3, r3, #8
 800468c:	b21b      	sxth	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	b21b      	sxth	r3, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	b21b      	sxth	r3, r3
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80046c0:	8b7b      	ldrh	r3, [r7, #26]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80046d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80046da:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	4313      	orrs	r3, r2
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	b21a      	sxth	r2, r3
 80046ea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	430b      	orrs	r3, r1
 80046f6:	121b      	asrs	r3, r3, #8
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b21b      	sxth	r3, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbd5 	bl	8003ec0 <lwip_htons>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	885b      	ldrh	r3, [r3, #2]
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	719a      	strb	r2, [r3, #6]
 8004732:	2200      	movs	r2, #0
 8004734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <ip4_output_if_src+0x23c>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fbc0 	bl	8003ec0 <lwip_htons>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	889b      	ldrh	r3, [r3, #4]
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8004756:	4b31      	ldr	r3, [pc, #196]	; (800481c <ip4_output_if_src+0x23c>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <ip4_output_if_src+0x23c>)
 8004760:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <ip4_output_if_src+0x192>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004768:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <ip4_output_if_src+0x240>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e003      	b.n	800477a <ip4_output_if_src+0x19a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	b29b      	uxth	r3, r3
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	0c1a      	lsrs	r2, r3, #16
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	b29b      	uxth	r3, r3
 800479a:	4413      	add	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	815a      	strh	r2, [r3, #10]
 80047b6:	e015      	b.n	80047e4 <ip4_output_if_src+0x204>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	895b      	ldrh	r3, [r3, #10]
 80047bc:	2b13      	cmp	r3, #19
 80047be:	d808      	bhi.n	80047d2 <ip4_output_if_src+0x1f2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <ip4_output_if_src+0x234>)
 80047c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c4:	3301      	adds	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <ip4_output_if_src+0x234>)
 80047ca:	859a      	strh	r2, [r3, #44]	; 0x2c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80047cc:	f06f 0301 	mvn.w	r3, #1
 80047d0:	e015      	b.n	80047fe <ip4_output_if_src+0x21e>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	617b      	str	r3, [r7, #20]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80047de:	f107 0310 	add.w	r3, r7, #16
 80047e2:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <ip4_output_if_src+0x234>)
 80047e6:	8b1b      	ldrh	r3, [r3, #24]
 80047e8:	3301      	adds	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <ip4_output_if_src+0x234>)
 80047ee:	831a      	strh	r2, [r3, #24]
    return ERR_BUF;
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fa:	4798      	blx	r3
 80047fc:	4603      	mov	r3, r0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	08015808 	.word	0x08015808
 800480c:	0801582c 	.word	0x0801582c
 8004810:	08015838 	.word	0x08015838
 8004814:	2000221c 	.word	0x2000221c
 8004818:	08015860 	.word	0x08015860
 800481c:	2000063a 	.word	0x2000063a
 8004820:	08017b44 	.word	0x08017b44

08004824 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d002      	beq.n	8004840 <ip4_addr_isbroadcast_u32+0x1c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8004840:	2301      	movs	r3, #1
 8004842:	e02a      	b.n	800489a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8004852:	2300      	movs	r3, #0
 8004854:	e021      	b.n	800489a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d101      	bne.n	8004866 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8004862:	2300      	movs	r3, #0
 8004864:	e019      	b.n	800489a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	405a      	eors	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	43da      	mvns	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004890:	429a      	cmp	r2, r3
 8004892:	d101      	bne.n	8004898 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8004898:	2300      	movs	r3, #0
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80048b0:	2210      	movs	r2, #16
 80048b2:	4904      	ldr	r1, [pc, #16]	; (80048c4 <ip4addr_ntoa+0x1c>)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f807 	bl	80048c8 <ip4addr_ntoa_r>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	2000063c 	.word	0x2000063c

080048c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b08d      	sub	sp, #52	; 0x34
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80048e2:	f107 0318 	add.w	r3, r7, #24
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048ee:	e059      	b.n	80049a4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <ip4addr_ntoa_r+0x100>)
 80048fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004900:	08d9      	lsrs	r1, r3, #3
 8004902:	460b      	mov	r3, r1
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <ip4addr_ntoa_r+0x100>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8004920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800492a:	4619      	mov	r1, r3
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	3330      	adds	r3, #48	; 0x30
 8004930:	b2da      	uxtb	r2, r3
 8004932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004936:	440b      	add	r3, r1
 8004938:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1d8      	bne.n	80048f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8004944:	e012      	b.n	800496c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	623a      	str	r2, [r7, #32]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4293      	cmp	r3, r2
 8004950:	db01      	blt.n	8004956 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	e031      	b.n	80049ba <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004960:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004964:	440a      	add	r2, r1
 8004966:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800496a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800496c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	623a      	str	r2, [r7, #32]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4293      	cmp	r3, r2
 8004984:	db01      	blt.n	800498a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	e017      	b.n	80049ba <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004990:	222e      	movs	r2, #46	; 0x2e
 8004992:	701a      	strb	r2, [r3, #0]
    ap++;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	3301      	adds	r3, #1
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800499a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499e:	3301      	adds	r3, #1
 80049a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d9a1      	bls.n	80048f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	3b01      	subs	r3, #1
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
  return buf;
 80049b8:	68bb      	ldr	r3, [r7, #8]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3734      	adds	r7, #52	; 0x34
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	cccccccd 	.word	0xcccccccd

080049cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <ptr_to_mem+0x20>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	4413      	add	r3, r2
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	2000064c 	.word	0x2000064c

080049f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <mem_to_ptr+0x20>)
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	b29b      	uxth	r3, r3
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000064c 	.word	0x2000064c

08004a14 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <plug_holes+0x148>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d20b      	bcs.n	8004a3e <plug_holes+0x2a>
 8004a26:	4b4e      	ldr	r3, [pc, #312]	; (8004b60 <plug_holes+0x14c>)
 8004a28:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <plug_holes+0x150>)
 8004a2e:	484e      	ldr	r0, [pc, #312]	; (8004b68 <plug_holes+0x154>)
 8004a30:	f00f f86e 	bl	8013b10 <iprintf>
 8004a34:	2000      	movs	r0, #0
 8004a36:	f00f f96d 	bl	8013d14 <fflush>
 8004a3a:	f00f f8b2 	bl	8013ba2 <abort>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <plug_holes+0x158>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d30b      	bcc.n	8004a60 <plug_holes+0x4c>
 8004a48:	4b45      	ldr	r3, [pc, #276]	; (8004b60 <plug_holes+0x14c>)
 8004a4a:	f240 12d3 	movw	r2, #467	; 0x1d3
 8004a4e:	4948      	ldr	r1, [pc, #288]	; (8004b70 <plug_holes+0x15c>)
 8004a50:	4845      	ldr	r0, [pc, #276]	; (8004b68 <plug_holes+0x154>)
 8004a52:	f00f f85d 	bl	8013b10 <iprintf>
 8004a56:	2000      	movs	r0, #0
 8004a58:	f00f f95c 	bl	8013d14 <fflush>
 8004a5c:	f00f f8a1 	bl	8013ba2 <abort>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <plug_holes+0x6c>
 8004a68:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <plug_holes+0x14c>)
 8004a6a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8004a6e:	4941      	ldr	r1, [pc, #260]	; (8004b74 <plug_holes+0x160>)
 8004a70:	483d      	ldr	r0, [pc, #244]	; (8004b68 <plug_holes+0x154>)
 8004a72:	f00f f84d 	bl	8013b10 <iprintf>
 8004a76:	2000      	movs	r0, #0
 8004a78:	f00f f94c 	bl	8013d14 <fflush>
 8004a7c:	f00f f891 	bl	8013ba2 <abort>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a88:	d90b      	bls.n	8004aa2 <plug_holes+0x8e>
 8004a8a:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <plug_holes+0x14c>)
 8004a8c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8004a90:	4939      	ldr	r1, [pc, #228]	; (8004b78 <plug_holes+0x164>)
 8004a92:	4835      	ldr	r0, [pc, #212]	; (8004b68 <plug_holes+0x154>)
 8004a94:	f00f f83c 	bl	8013b10 <iprintf>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f00f f93b 	bl	8013d14 <fflush>
 8004a9e:	f00f f880 	bl	8013ba2 <abort>

  nmem = ptr_to_mem(mem->next);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff ff90 	bl	80049cc <ptr_to_mem>
 8004aac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d024      	beq.n	8004b00 <plug_holes+0xec>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d120      	bne.n	8004b00 <plug_holes+0xec>
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <plug_holes+0x158>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d01b      	beq.n	8004b00 <plug_holes+0xec>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004ac8:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <plug_holes+0x168>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d102      	bne.n	8004ad8 <plug_holes+0xc4>
      lfree = mem;
 8004ad2:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <plug_holes+0x168>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ae8:	d00a      	beq.n	8004b00 <plug_holes+0xec>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff6c 	bl	80049cc <ptr_to_mem>
 8004af4:	4604      	mov	r4, r0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff7a 	bl	80049f0 <mem_to_ptr>
 8004afc:	4603      	mov	r3, r0
 8004afe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	885b      	ldrh	r3, [r3, #2]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff61 	bl	80049cc <ptr_to_mem>
 8004b0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d01f      	beq.n	8004b54 <plug_holes+0x140>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11b      	bne.n	8004b54 <plug_holes+0x140>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004b1c:	4b17      	ldr	r3, [pc, #92]	; (8004b7c <plug_holes+0x168>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d102      	bne.n	8004b2c <plug_holes+0x118>
      lfree = pmem;
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <plug_holes+0x168>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b3c:	d00a      	beq.n	8004b54 <plug_holes+0x140>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff42 	bl	80049cc <ptr_to_mem>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f7ff ff50 	bl	80049f0 <mem_to_ptr>
 8004b50:	4603      	mov	r3, r0
 8004b52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	2000064c 	.word	0x2000064c
 8004b60:	08015890 	.word	0x08015890
 8004b64:	080158b0 	.word	0x080158b0
 8004b68:	080158c8 	.word	0x080158c8
 8004b6c:	20000650 	.word	0x20000650
 8004b70:	080158f0 	.word	0x080158f0
 8004b74:	0801590c 	.word	0x0801590c
 8004b78:	08015928 	.word	0x08015928
 8004b7c:	20000658 	.word	0x20000658

08004b80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b86:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <mem_init+0x90>)
 8004b88:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <mem_init+0x94>)
 8004b8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b8c:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <mem_init+0x90>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004ba6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004baa:	f7ff ff0f 	bl	80049cc <ptr_to_mem>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <mem_init+0x98>)
 8004bb2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <mem_init+0x98>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <mem_init+0x98>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bc4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <mem_init+0x98>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <mem_init+0x90>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a11      	ldr	r2, [pc, #68]	; (8004c1c <mem_init+0x9c>)
 8004bd6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <mem_init+0xa0>)
 8004bda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8004be2:	4810      	ldr	r0, [pc, #64]	; (8004c24 <mem_init+0xa4>)
 8004be4:	f7fd f915 	bl	8001e12 <sys_mutex_new>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <mem_init+0x86>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <mem_init+0xa8>)
 8004bf0:	f240 2212 	movw	r2, #530	; 0x212
 8004bf4:	490d      	ldr	r1, [pc, #52]	; (8004c2c <mem_init+0xac>)
 8004bf6:	480e      	ldr	r0, [pc, #56]	; (8004c30 <mem_init+0xb0>)
 8004bf8:	f00e ff8a 	bl	8013b10 <iprintf>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f00f f889 	bl	8013d14 <fflush>
 8004c02:	f00e ffce 	bl	8013ba2 <abort>
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000064c 	.word	0x2000064c
 8004c14:	20000898 	.word	0x20000898
 8004c18:	20000650 	.word	0x20000650
 8004c1c:	20000658 	.word	0x20000658
 8004c20:	2000221c 	.word	0x2000221c
 8004c24:	20000654 	.word	0x20000654
 8004c28:	08015890 	.word	0x08015890
 8004c2c:	08015954 	.word	0x08015954
 8004c30:	080158c8 	.word	0x080158c8

08004c34 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fed7 	bl	80049f0 <mem_to_ptr>
 8004c42:	4603      	mov	r3, r0
 8004c44:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff febe 	bl	80049cc <ptr_to_mem>
 8004c50:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	885b      	ldrh	r3, [r3, #2]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff feb8 	bl	80049cc <ptr_to_mem>
 8004c5c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c66:	d818      	bhi.n	8004c9a <mem_link_valid+0x66>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	885b      	ldrh	r3, [r3, #2]
 8004c6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c70:	d813      	bhi.n	8004c9a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c76:	8afa      	ldrh	r2, [r7, #22]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d004      	beq.n	8004c86 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	8afa      	ldrh	r2, [r7, #22]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d109      	bne.n	8004c9a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <mem_link_valid+0x74>)
 8004c88:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d006      	beq.n	8004c9e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	885b      	ldrh	r3, [r3, #2]
 8004c94:	8afa      	ldrh	r2, [r7, #22]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d001      	beq.n	8004c9e <mem_link_valid+0x6a>
    return 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <mem_link_valid+0x6c>
  }
  return 1;
 8004c9e:	2301      	movs	r3, #1
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000650 	.word	0x20000650

08004cac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d062      	beq.n	8004d80 <mem_free+0xd4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3b06      	subs	r3, #6
 8004cbe:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004cc0:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <mem_free+0xdc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d306      	bcc.n	8004cd8 <mem_free+0x2c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 020c 	add.w	r2, r3, #12
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <mem_free+0xe0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d90b      	bls.n	8004cf0 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004cd8:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <mem_free+0xe4>)
 8004cda:	f240 2272 	movw	r2, #626	; 0x272
 8004cde:	492d      	ldr	r1, [pc, #180]	; (8004d94 <mem_free+0xe8>)
 8004ce0:	482d      	ldr	r0, [pc, #180]	; (8004d98 <mem_free+0xec>)
 8004ce2:	f00e ff15 	bl	8013b10 <iprintf>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f00f f814 	bl	8013d14 <fflush>
 8004cec:	f00e ff59 	bl	8013ba2 <abort>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004cf0:	482a      	ldr	r0, [pc, #168]	; (8004d9c <mem_free+0xf0>)
 8004cf2:	f7fd f89c 	bl	8001e2e <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	791b      	ldrb	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <mem_free+0x6a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <mem_free+0xe4>)
 8004d00:	f240 227f 	movw	r2, #639	; 0x27f
 8004d04:	4926      	ldr	r1, [pc, #152]	; (8004da0 <mem_free+0xf4>)
 8004d06:	4824      	ldr	r0, [pc, #144]	; (8004d98 <mem_free+0xec>)
 8004d08:	f00e ff02 	bl	8013b10 <iprintf>
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f00f f801 	bl	8013d14 <fflush>
 8004d12:	f00e ff46 	bl	8013ba2 <abort>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ff8c 	bl	8004c34 <mem_link_valid>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <mem_free+0x8e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <mem_free+0xe4>)
 8004d24:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004d28:	491e      	ldr	r1, [pc, #120]	; (8004da4 <mem_free+0xf8>)
 8004d2a:	481b      	ldr	r0, [pc, #108]	; (8004d98 <mem_free+0xec>)
 8004d2c:	f00e fef0 	bl	8013b10 <iprintf>
 8004d30:	2000      	movs	r0, #0
 8004d32:	f00e ffef 	bl	8013d14 <fflush>
 8004d36:	f00e ff34 	bl	8013ba2 <abort>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <mem_free+0xfc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d202      	bcs.n	8004d50 <mem_free+0xa4>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <mem_free+0xfc>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <mem_free+0x100>)
 8004d52:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	490b      	ldr	r1, [pc, #44]	; (8004d88 <mem_free+0xdc>)
 8004d5a:	6809      	ldr	r1, [r1, #0]
 8004d5c:	1a5b      	subs	r3, r3, r1
 8004d5e:	b299      	uxth	r1, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	1acb      	subs	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <mem_free+0x100>)
 8004d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fe4e 	bl	8004a14 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004d78:	4808      	ldr	r0, [pc, #32]	; (8004d9c <mem_free+0xf0>)
 8004d7a:	f7fd f862 	bl	8001e42 <sys_mutex_unlock>
 8004d7e:	e000      	b.n	8004d82 <mem_free+0xd6>
    return;
 8004d80:	bf00      	nop
}
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	2000064c 	.word	0x2000064c
 8004d8c:	20000650 	.word	0x20000650
 8004d90:	08015890 	.word	0x08015890
 8004d94:	08015970 	.word	0x08015970
 8004d98:	080158c8 	.word	0x080158c8
 8004d9c:	20000654 	.word	0x20000654
 8004da0:	0801598c 	.word	0x0801598c
 8004da4:	080159b4 	.word	0x080159b4
 8004da8:	20000658 	.word	0x20000658
 8004dac:	2000221c 	.word	0x2000221c

08004db0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004dc0:	8bfb      	ldrh	r3, [r7, #30]
 8004dc2:	2b0b      	cmp	r3, #11
 8004dc4:	d801      	bhi.n	8004dca <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004dca:	8bfb      	ldrh	r3, [r7, #30]
 8004dcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dd0:	d803      	bhi.n	8004dda <mem_trim+0x2a>
 8004dd2:	8bfa      	ldrh	r2, [r7, #30]
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d201      	bcs.n	8004dde <mem_trim+0x2e>
    return NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e10c      	b.n	8004ff8 <mem_trim+0x248>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <mem_trim+0x250>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d304      	bcc.n	8004df2 <mem_trim+0x42>
 8004de8:	4b86      	ldr	r3, [pc, #536]	; (8005004 <mem_trim+0x254>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d30b      	bcc.n	8004e0a <mem_trim+0x5a>
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <mem_trim+0x258>)
 8004df4:	f240 22c5 	movw	r2, #709	; 0x2c5
 8004df8:	4984      	ldr	r1, [pc, #528]	; (800500c <mem_trim+0x25c>)
 8004dfa:	4885      	ldr	r0, [pc, #532]	; (8005010 <mem_trim+0x260>)
 8004dfc:	f00e fe88 	bl	8013b10 <iprintf>
 8004e00:	2000      	movs	r0, #0
 8004e02:	f00e ff87 	bl	8013d14 <fflush>
 8004e06:	f00e fecc 	bl	8013ba2 <abort>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e0a:	4b7d      	ldr	r3, [pc, #500]	; (8005000 <mem_trim+0x250>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d304      	bcc.n	8004e1e <mem_trim+0x6e>
 8004e14:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <mem_trim+0x254>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d30f      	bcc.n	8004e3e <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004e1e:	f7fd f889 	bl	8001f34 <sys_arch_protect>
 8004e22:	60b8      	str	r0, [r7, #8]
 8004e24:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <mem_trim+0x264>)
 8004e26:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	4b79      	ldr	r3, [pc, #484]	; (8005014 <mem_trim+0x264>)
 8004e30:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f7fd f885 	bl	8001f44 <sys_arch_unprotect>
    return rmem;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	e0dc      	b.n	8004ff8 <mem_trim+0x248>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3b06      	subs	r3, #6
 8004e42:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004e44:	69b8      	ldr	r0, [r7, #24]
 8004e46:	f7ff fdd3 	bl	80049f0 <mem_to_ptr>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	881a      	ldrh	r2, [r3, #0]
 8004e52:	8afb      	ldrh	r3, [r7, #22]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b06      	subs	r3, #6
 8004e5a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e5c:	8bfa      	ldrh	r2, [r7, #30]
 8004e5e:	8abb      	ldrh	r3, [r7, #20]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90b      	bls.n	8004e7c <mem_trim+0xcc>
 8004e64:	4b68      	ldr	r3, [pc, #416]	; (8005008 <mem_trim+0x258>)
 8004e66:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004e6a:	496b      	ldr	r1, [pc, #428]	; (8005018 <mem_trim+0x268>)
 8004e6c:	4868      	ldr	r0, [pc, #416]	; (8005010 <mem_trim+0x260>)
 8004e6e:	f00e fe4f 	bl	8013b10 <iprintf>
 8004e72:	2000      	movs	r0, #0
 8004e74:	f00e ff4e 	bl	8013d14 <fflush>
 8004e78:	f00e fe93 	bl	8013ba2 <abort>
  if (newsize > size) {
 8004e7c:	8bfa      	ldrh	r2, [r7, #30]
 8004e7e:	8abb      	ldrh	r3, [r7, #20]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d901      	bls.n	8004e88 <mem_trim+0xd8>
    /* not supported */
    return NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e0b7      	b.n	8004ff8 <mem_trim+0x248>
  }
  if (newsize == size) {
 8004e88:	8bfa      	ldrh	r2, [r7, #30]
 8004e8a:	8abb      	ldrh	r3, [r7, #20]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d101      	bne.n	8004e94 <mem_trim+0xe4>
    /* No change in size, simply return */
    return rmem;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	e0b1      	b.n	8004ff8 <mem_trim+0x248>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8004e94:	4861      	ldr	r0, [pc, #388]	; (800501c <mem_trim+0x26c>)
 8004e96:	f7fc ffca 	bl	8001e2e <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fd94 	bl	80049cc <ptr_to_mem>
 8004ea4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	791b      	ldrb	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d150      	bne.n	8004f50 <mem_trim+0x1a0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004eb6:	d10b      	bne.n	8004ed0 <mem_trim+0x120>
 8004eb8:	4b53      	ldr	r3, [pc, #332]	; (8005008 <mem_trim+0x258>)
 8004eba:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8004ebe:	4958      	ldr	r1, [pc, #352]	; (8005020 <mem_trim+0x270>)
 8004ec0:	4853      	ldr	r0, [pc, #332]	; (8005010 <mem_trim+0x260>)
 8004ec2:	f00e fe25 	bl	8013b10 <iprintf>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f00e ff24 	bl	8013d14 <fflush>
 8004ecc:	f00e fe69 	bl	8013ba2 <abort>
    /* remember the old next pointer */
    next = mem2->next;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	81fb      	strh	r3, [r7, #14]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ed6:	8afa      	ldrh	r2, [r7, #22]
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	4413      	add	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3306      	adds	r3, #6
 8004ee0:	81bb      	strh	r3, [r7, #12]
    if (lfree == mem2) {
 8004ee2:	4b50      	ldr	r3, [pc, #320]	; (8005024 <mem_trim+0x274>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d106      	bne.n	8004efa <mem_trim+0x14a>
      lfree = ptr_to_mem(ptr2);
 8004eec:	89bb      	ldrh	r3, [r7, #12]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fd6c 	bl	80049cc <ptr_to_mem>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <mem_trim+0x274>)
 8004ef8:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004efa:	89bb      	ldrh	r3, [r7, #12]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fd65 	bl	80049cc <ptr_to_mem>
 8004f02:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2200      	movs	r2, #0
 8004f08:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	89fa      	ldrh	r2, [r7, #14]
 8004f0e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	8afa      	ldrh	r2, [r7, #22]
 8004f14:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	89ba      	ldrh	r2, [r7, #12]
 8004f1a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f24:	d007      	beq.n	8004f36 <mem_trim+0x186>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fd4e 	bl	80049cc <ptr_to_mem>
 8004f30:	4602      	mov	r2, r0
 8004f32:	89bb      	ldrh	r3, [r7, #12]
 8004f34:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <mem_trim+0x264>)
 8004f38:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004f3c:	8bf9      	ldrh	r1, [r7, #30]
 8004f3e:	8abb      	ldrh	r3, [r7, #20]
 8004f40:	1acb      	subs	r3, r1, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <mem_trim+0x264>)
 8004f4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004f4e:	e04f      	b.n	8004ff0 <mem_trim+0x240>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f50:	8bfb      	ldrh	r3, [r7, #30]
 8004f52:	f103 0212 	add.w	r2, r3, #18
 8004f56:	8abb      	ldrh	r3, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d849      	bhi.n	8004ff0 <mem_trim+0x240>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f5c:	8afa      	ldrh	r2, [r7, #22]
 8004f5e:	8bfb      	ldrh	r3, [r7, #30]
 8004f60:	4413      	add	r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3306      	adds	r3, #6
 8004f66:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f70:	d10b      	bne.n	8004f8a <mem_trim+0x1da>
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <mem_trim+0x258>)
 8004f74:	f240 3209 	movw	r2, #777	; 0x309
 8004f78:	4929      	ldr	r1, [pc, #164]	; (8005020 <mem_trim+0x270>)
 8004f7a:	4825      	ldr	r0, [pc, #148]	; (8005010 <mem_trim+0x260>)
 8004f7c:	f00e fdc8 	bl	8013b10 <iprintf>
 8004f80:	2000      	movs	r0, #0
 8004f82:	f00e fec7 	bl	8013d14 <fflush>
 8004f86:	f00e fe0c 	bl	8013ba2 <abort>
    mem2 = ptr_to_mem(ptr2);
 8004f8a:	89bb      	ldrh	r3, [r7, #12]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fd1d 	bl	80049cc <ptr_to_mem>
 8004f92:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f94:	4b23      	ldr	r3, [pc, #140]	; (8005024 <mem_trim+0x274>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d202      	bcs.n	8004fa4 <mem_trim+0x1f4>
      lfree = mem2;
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <mem_trim+0x274>)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	8afa      	ldrh	r2, [r7, #22]
 8004fb6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	89ba      	ldrh	r2, [r7, #12]
 8004fbc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fc6:	d007      	beq.n	8004fd8 <mem_trim+0x228>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fcfd 	bl	80049cc <ptr_to_mem>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	89bb      	ldrh	r3, [r7, #12]
 8004fd6:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004fd8:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <mem_trim+0x264>)
 8004fda:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004fde:	8bf9      	ldrh	r1, [r7, #30]
 8004fe0:	8abb      	ldrh	r3, [r7, #20]
 8004fe2:	1acb      	subs	r3, r1, r3
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <mem_trim+0x264>)
 8004fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004ff0:	480a      	ldr	r0, [pc, #40]	; (800501c <mem_trim+0x26c>)
 8004ff2:	f7fc ff26 	bl	8001e42 <sys_mutex_unlock>
  return rmem;
 8004ff6:	687b      	ldr	r3, [r7, #4]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000064c 	.word	0x2000064c
 8005004:	20000650 	.word	0x20000650
 8005008:	08015890 	.word	0x08015890
 800500c:	080159e8 	.word	0x080159e8
 8005010:	080158c8 	.word	0x080158c8
 8005014:	2000221c 	.word	0x2000221c
 8005018:	08015a00 	.word	0x08015a00
 800501c:	20000654 	.word	0x20000654
 8005020:	08015a20 	.word	0x08015a20
 8005024:	20000658 	.word	0x20000658

08005028 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b089      	sub	sp, #36	; 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <mem_malloc+0x14>
    return NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	e112      	b.n	8005262 <mem_malloc+0x23a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005040:	8bbb      	ldrh	r3, [r7, #28]
 8005042:	2b0b      	cmp	r3, #11
 8005044:	d801      	bhi.n	800504a <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005046:	230c      	movs	r3, #12
 8005048:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800504a:	8bbb      	ldrh	r3, [r7, #28]
 800504c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005050:	d803      	bhi.n	800505a <mem_malloc+0x32>
 8005052:	8bba      	ldrh	r2, [r7, #28]
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	429a      	cmp	r2, r3
 8005058:	d201      	bcs.n	800505e <mem_malloc+0x36>
    return NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	e101      	b.n	8005262 <mem_malloc+0x23a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800505e:	4883      	ldr	r0, [pc, #524]	; (800526c <mem_malloc+0x244>)
 8005060:	f7fc fee5 	bl	8001e2e <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005064:	4b82      	ldr	r3, [pc, #520]	; (8005270 <mem_malloc+0x248>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fcc1 	bl	80049f0 <mem_to_ptr>
 800506e:	4603      	mov	r3, r0
 8005070:	83fb      	strh	r3, [r7, #30]
 8005072:	e0e3      	b.n	800523c <mem_malloc+0x214>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005074:	8bfb      	ldrh	r3, [r7, #30]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fca8 	bl	80049cc <ptr_to_mem>
 800507c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	791b      	ldrb	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 80d3 	bne.w	800522e <mem_malloc+0x206>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	8bfb      	ldrh	r3, [r7, #30]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	1f9a      	subs	r2, r3, #6
 8005094:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005096:	429a      	cmp	r2, r3
 8005098:	f0c0 80c9 	bcc.w	800522e <mem_malloc+0x206>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	1f9a      	subs	r2, r3, #6
 80050a8:	8bbb      	ldrh	r3, [r7, #28]
 80050aa:	3312      	adds	r3, #18
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d351      	bcc.n	8005154 <mem_malloc+0x12c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80050b0:	8bfa      	ldrh	r2, [r7, #30]
 80050b2:	8bbb      	ldrh	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3306      	adds	r3, #6
 80050ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80050bc:	8a7b      	ldrh	r3, [r7, #18]
 80050be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050c2:	d10b      	bne.n	80050dc <mem_malloc+0xb4>
 80050c4:	4b6b      	ldr	r3, [pc, #428]	; (8005274 <mem_malloc+0x24c>)
 80050c6:	f240 327a 	movw	r2, #890	; 0x37a
 80050ca:	496b      	ldr	r1, [pc, #428]	; (8005278 <mem_malloc+0x250>)
 80050cc:	486b      	ldr	r0, [pc, #428]	; (800527c <mem_malloc+0x254>)
 80050ce:	f00e fd1f 	bl	8013b10 <iprintf>
 80050d2:	2000      	movs	r0, #0
 80050d4:	f00e fe1e 	bl	8013d14 <fflush>
 80050d8:	f00e fd63 	bl	8013ba2 <abort>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80050dc:	8a7b      	ldrh	r3, [r7, #18]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fc74 	bl	80049cc <ptr_to_mem>
 80050e4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	881a      	ldrh	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8bfa      	ldrh	r2, [r7, #30]
 80050f8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	8a7a      	ldrh	r2, [r7, #18]
 80050fe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2201      	movs	r2, #1
 8005104:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800510e:	d007      	beq.n	8005120 <mem_malloc+0xf8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fc59 	bl	80049cc <ptr_to_mem>
 800511a:	4602      	mov	r2, r0
 800511c:	8a7b      	ldrh	r3, [r7, #18]
 800511e:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8005120:	4b57      	ldr	r3, [pc, #348]	; (8005280 <mem_malloc+0x258>)
 8005122:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005126:	8bbb      	ldrh	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	3306      	adds	r3, #6
 800512e:	b29a      	uxth	r2, r3
 8005130:	4b53      	ldr	r3, [pc, #332]	; (8005280 <mem_malloc+0x258>)
 8005132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005136:	4b52      	ldr	r3, [pc, #328]	; (8005280 <mem_malloc+0x258>)
 8005138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800513c:	4b50      	ldr	r3, [pc, #320]	; (8005280 <mem_malloc+0x258>)
 800513e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005142:	429a      	cmp	r2, r3
 8005144:	d227      	bcs.n	8005196 <mem_malloc+0x16e>
 8005146:	4b4e      	ldr	r3, [pc, #312]	; (8005280 <mem_malloc+0x258>)
 8005148:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800514c:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <mem_malloc+0x258>)
 800514e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005152:	e020      	b.n	8005196 <mem_malloc+0x16e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2201      	movs	r2, #1
 8005158:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800515a:	4b49      	ldr	r3, [pc, #292]	; (8005280 <mem_malloc+0x258>)
 800515c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	4413      	add	r3, r2
 8005166:	b29c      	uxth	r4, r3
 8005168:	6978      	ldr	r0, [r7, #20]
 800516a:	f7ff fc41 	bl	80049f0 <mem_to_ptr>
 800516e:	4603      	mov	r3, r0
 8005170:	1ae3      	subs	r3, r4, r3
 8005172:	b29a      	uxth	r2, r3
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <mem_malloc+0x258>)
 8005176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <mem_malloc+0x258>)
 800517c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8005180:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <mem_malloc+0x258>)
 8005182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005186:	429a      	cmp	r2, r3
 8005188:	d205      	bcs.n	8005196 <mem_malloc+0x16e>
 800518a:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <mem_malloc+0x258>)
 800518c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005190:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <mem_malloc+0x258>)
 8005192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <mem_malloc+0x248>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	d12c      	bne.n	80051fa <mem_malloc+0x1d2>
          struct mem *cur = lfree;
 80051a0:	4b33      	ldr	r3, [pc, #204]	; (8005270 <mem_malloc+0x248>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80051a6:	e005      	b.n	80051b4 <mem_malloc+0x18c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fc0d 	bl	80049cc <ptr_to_mem>
 80051b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <mem_malloc+0x19e>
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <mem_malloc+0x25c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d1f0      	bne.n	80051a8 <mem_malloc+0x180>
          }
          lfree = cur;
 80051c6:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <mem_malloc+0x248>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <mem_malloc+0x248>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <mem_malloc+0x25c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d010      	beq.n	80051fa <mem_malloc+0x1d2>
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <mem_malloc+0x248>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <mem_malloc+0x1d2>
 80051e2:	4b24      	ldr	r3, [pc, #144]	; (8005274 <mem_malloc+0x24c>)
 80051e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80051e8:	4927      	ldr	r1, [pc, #156]	; (8005288 <mem_malloc+0x260>)
 80051ea:	4824      	ldr	r0, [pc, #144]	; (800527c <mem_malloc+0x254>)
 80051ec:	f00e fc90 	bl	8013b10 <iprintf>
 80051f0:	2000      	movs	r0, #0
 80051f2:	f00e fd8f 	bl	8013d14 <fflush>
 80051f6:	f00e fcd4 	bl	8013ba2 <abort>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80051fa:	481c      	ldr	r0, [pc, #112]	; (800526c <mem_malloc+0x244>)
 80051fc:	f7fc fe21 	bl	8001e42 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005200:	8bba      	ldrh	r2, [r7, #28]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	4413      	add	r3, r2
 8005206:	3306      	adds	r3, #6
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <mem_malloc+0x25c>)
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	4293      	cmp	r3, r2
 800520e:	d90b      	bls.n	8005228 <mem_malloc+0x200>
 8005210:	4b18      	ldr	r3, [pc, #96]	; (8005274 <mem_malloc+0x24c>)
 8005212:	f240 32ad 	movw	r2, #941	; 0x3ad
 8005216:	491d      	ldr	r1, [pc, #116]	; (800528c <mem_malloc+0x264>)
 8005218:	4818      	ldr	r0, [pc, #96]	; (800527c <mem_malloc+0x254>)
 800521a:	f00e fc79 	bl	8013b10 <iprintf>
 800521e:	2000      	movs	r0, #0
 8005220:	f00e fd78 	bl	8013d14 <fflush>
 8005224:	f00e fcbd 	bl	8013ba2 <abort>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3306      	adds	r3, #6
 800522c:	e019      	b.n	8005262 <mem_malloc+0x23a>
         ptr = ptr_to_mem(ptr)->next) {
 800522e:	8bfb      	ldrh	r3, [r7, #30]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fbcb 	bl	80049cc <ptr_to_mem>
 8005236:	4603      	mov	r3, r0
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800523c:	8bfa      	ldrh	r2, [r7, #30]
 800523e:	8bbb      	ldrh	r3, [r7, #28]
 8005240:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005244:	429a      	cmp	r2, r3
 8005246:	f4ff af15 	bcc.w	8005074 <mem_malloc+0x4c>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <mem_malloc+0x258>)
 800524c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005250:	3301      	adds	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <mem_malloc+0x258>)
 8005256:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800525a:	4804      	ldr	r0, [pc, #16]	; (800526c <mem_malloc+0x244>)
 800525c:	f7fc fdf1 	bl	8001e42 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	; 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	20000654 	.word	0x20000654
 8005270:	20000658 	.word	0x20000658
 8005274:	08015890 	.word	0x08015890
 8005278:	08015a20 	.word	0x08015a20
 800527c:	080158c8 	.word	0x080158c8
 8005280:	2000221c 	.word	0x2000221c
 8005284:	20000650 	.word	0x20000650
 8005288:	08015a34 	.word	0x08015a34
 800528c:	08015a50 	.word	0x08015a50

08005290 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	460a      	mov	r2, r1
 800529a:	80fb      	strh	r3, [r7, #6]
 800529c:	4613      	mov	r3, r2
 800529e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	88ba      	ldrh	r2, [r7, #4]
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d001      	beq.n	80052ba <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e00e      	b.n	80052d8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff feb2 	bl	8005028 <mem_malloc>
 80052c4:	60b8      	str	r0, [r7, #8]
  if (p) {
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	2100      	movs	r1, #0
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f00e fe44 	bl	8013f5e <memset>
  }
  return p;
 80052d6:	68bb      	ldr	r3, [r7, #8]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e011      	b.n	8005320 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	891b      	ldrh	r3, [r3, #8]
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4413      	add	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	895b      	ldrh	r3, [r3, #10]
 8005324:	461a      	mov	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	dce7      	bgt.n	80052fc <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	8952      	ldrh	r2, [r2, #10]
 8005334:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005352:	2300      	movs	r3, #0
 8005354:	80fb      	strh	r3, [r7, #6]
 8005356:	e013      	b.n	8005380 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <memp_init+0x44>)
 800535c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ffbd 	bl	80052e0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	4909      	ldr	r1, [pc, #36]	; (8005390 <memp_init+0x44>)
 800536c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005370:	6852      	ldr	r2, [r2, #4]
 8005372:	4908      	ldr	r1, [pc, #32]	; (8005394 <memp_init+0x48>)
 8005374:	331c      	adds	r3, #28
 8005376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	3301      	adds	r3, #1
 800537e:	80fb      	strh	r3, [r7, #6]
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	2b07      	cmp	r3, #7
 8005384:	d9e8      	bls.n	8005358 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	08017bec 	.word	0x08017bec
 8005394:	2000221c 	.word	0x2000221c

08005398 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80053a0:	f7fc fdc8 	bl	8001f34 <sys_arch_protect>
 80053a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01d      	beq.n	80053f0 <do_memp_malloc_pool+0x58>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	891a      	ldrh	r2, [r3, #8]
 80053c4:	3201      	adds	r2, #1
 80053c6:	b292      	uxth	r2, r2
 80053c8:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	891a      	ldrh	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	895b      	ldrh	r3, [r3, #10]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d905      	bls.n	80053e6 <do_memp_malloc_pool+0x4e>
      desc->stats->max = desc->stats->used;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	8912      	ldrh	r2, [r2, #8]
 80053e4:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7fc fdac 	bl	8001f44 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	e009      	b.n	8005404 <do_memp_malloc_pool+0x6c>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	889a      	ldrh	r2, [r3, #4]
 80053f6:	3201      	adds	r2, #1
 80053f8:	b292      	uxth	r2, r2
 80053fa:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7fc fda1 	bl	8001f44 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <memp_malloc_pool+0x26>
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <memp_malloc_pool+0x40>)
 800541c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005420:	490b      	ldr	r1, [pc, #44]	; (8005450 <memp_malloc_pool+0x44>)
 8005422:	480c      	ldr	r0, [pc, #48]	; (8005454 <memp_malloc_pool+0x48>)
 8005424:	f00e fb74 	bl	8013b10 <iprintf>
 8005428:	2000      	movs	r0, #0
 800542a:	f00e fc73 	bl	8013d14 <fflush>
 800542e:	f00e fbb8 	bl	8013ba2 <abort>
  if (desc == NULL) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <memp_malloc_pool+0x30>
    return NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	e003      	b.n	8005444 <memp_malloc_pool+0x38>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ffab 	bl	8005398 <do_memp_malloc_pool>
 8005442:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	08015ae8 	.word	0x08015ae8
 8005450:	08015b08 	.word	0x08015b08
 8005454:	08015b1c 	.word	0x08015b1c

08005458 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b07      	cmp	r3, #7
 8005466:	d908      	bls.n	800547a <memp_malloc+0x22>
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <memp_malloc+0x3c>)
 800546a:	f240 1257 	movw	r2, #343	; 0x157
 800546e:	490a      	ldr	r1, [pc, #40]	; (8005498 <memp_malloc+0x40>)
 8005470:	480a      	ldr	r0, [pc, #40]	; (800549c <memp_malloc+0x44>)
 8005472:	f7fc fd26 	bl	8001ec2 <lwip_win32_platform_diag>
 8005476:	2300      	movs	r3, #0
 8005478:	e008      	b.n	800548c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <memp_malloc+0x48>)
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff ff88 	bl	8005398 <do_memp_malloc_pool>
 8005488:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	08015ae8 	.word	0x08015ae8
 8005498:	08015b44 	.word	0x08015b44
 800549c:	08015b1c 	.word	0x08015b1c
 80054a0:	08017bec 	.word	0x08017bec

080054a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80054b2:	f7fc fd3f 	bl	8001f34 <sys_arch_protect>
 80054b6:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	891a      	ldrh	r2, [r3, #8]
 80054be:	3a01      	subs	r2, #1
 80054c0:	b292      	uxth	r2, r2
 80054c2:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f7fc fd34 	bl	8001f44 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <memp_free_pool+0x28>
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <memp_free_pool+0x48>)
 80054f6:	f240 1295 	movw	r2, #405	; 0x195
 80054fa:	490d      	ldr	r1, [pc, #52]	; (8005530 <memp_free_pool+0x4c>)
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <memp_free_pool+0x50>)
 80054fe:	f00e fb07 	bl	8013b10 <iprintf>
 8005502:	2000      	movs	r0, #0
 8005504:	f00e fc06 	bl	8013d14 <fflush>
 8005508:	f00e fb4b 	bl	8013ba2 <abort>
  if ((desc == NULL) || (mem == NULL)) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <memp_free_pool+0x3e>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <memp_free_pool+0x3e>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ffc2 	bl	80054a4 <do_memp_free_pool>
 8005520:	e000      	b.n	8005524 <memp_free_pool+0x40>
    return;
 8005522:	bf00      	nop
}
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	08015ae8 	.word	0x08015ae8
 8005530:	08015b08 	.word	0x08015b08
 8005534:	08015b1c 	.word	0x08015b1c

08005538 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	6039      	str	r1, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	2b07      	cmp	r3, #7
 8005548:	d907      	bls.n	800555a <memp_free+0x22>
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <memp_free+0x44>)
 800554c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005550:	490b      	ldr	r1, [pc, #44]	; (8005580 <memp_free+0x48>)
 8005552:	480c      	ldr	r0, [pc, #48]	; (8005584 <memp_free+0x4c>)
 8005554:	f7fc fcb5 	bl	8001ec2 <lwip_win32_platform_diag>
 8005558:	e00c      	b.n	8005574 <memp_free+0x3c>

  if (mem == NULL) {
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <memp_free+0x50>)
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff9a 	bl	80054a4 <do_memp_free_pool>
 8005570:	e000      	b.n	8005574 <memp_free+0x3c>
    return;
 8005572:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	08015ae8 	.word	0x08015ae8
 8005580:	08015b64 	.word	0x08015b64
 8005584:	08015b1c 	.word	0x08015b1c
 8005588:	08017bec 	.word	0x08017bec

0800558c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <netif_add+0x26>
 80055b0:	4b5b      	ldr	r3, [pc, #364]	; (8005720 <netif_add+0x184>)
 80055b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80055b6:	495b      	ldr	r1, [pc, #364]	; (8005724 <netif_add+0x188>)
 80055b8:	485b      	ldr	r0, [pc, #364]	; (8005728 <netif_add+0x18c>)
 80055ba:	f7fc fc82 	bl	8001ec2 <lwip_win32_platform_diag>
 80055be:	2300      	movs	r3, #0
 80055c0:	e0a9      	b.n	8005716 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <netif_add+0x3e>
 80055c8:	4b55      	ldr	r3, [pc, #340]	; (8005720 <netif_add+0x184>)
 80055ca:	f240 1233 	movw	r2, #307	; 0x133
 80055ce:	4957      	ldr	r1, [pc, #348]	; (800572c <netif_add+0x190>)
 80055d0:	4855      	ldr	r0, [pc, #340]	; (8005728 <netif_add+0x18c>)
 80055d2:	f7fc fc76 	bl	8001ec2 <lwip_win32_platform_diag>
 80055d6:	2300      	movs	r3, #0
 80055d8:	e09d      	b.n	8005716 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80055e0:	4b53      	ldr	r3, [pc, #332]	; (8005730 <netif_add+0x194>)
 80055e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80055ea:	4b51      	ldr	r3, [pc, #324]	; (8005730 <netif_add+0x194>)
 80055ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80055f4:	4b4e      	ldr	r3, [pc, #312]	; (8005730 <netif_add+0x194>)
 80055f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a49      	ldr	r2, [pc, #292]	; (8005734 <netif_add+0x198>)
 800560e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8005624:	4b44      	ldr	r3, [pc, #272]	; (8005738 <netif_add+0x19c>)
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005632:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f924 	bl	8005888 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	4798      	blx	r3
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <netif_add+0xb4>
    return NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	e062      	b.n	8005716 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005656:	2bff      	cmp	r3, #255	; 0xff
 8005658:	d103      	bne.n	8005662 <netif_add+0xc6>
        netif->num = 0;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005666:	4b35      	ldr	r3, [pc, #212]	; (800573c <netif_add+0x1a0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e035      	b.n	80056da <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d10b      	bne.n	800568e <netif_add+0xf2>
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <netif_add+0x184>)
 8005678:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800567c:	4930      	ldr	r1, [pc, #192]	; (8005740 <netif_add+0x1a4>)
 800567e:	482a      	ldr	r0, [pc, #168]	; (8005728 <netif_add+0x18c>)
 8005680:	f00e fa46 	bl	8013b10 <iprintf>
 8005684:	2000      	movs	r0, #0
 8005686:	f00e fb45 	bl	8013d14 <fflush>
 800568a:	f00e fa8a 	bl	8013ba2 <abort>
        num_netifs++;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	dd0b      	ble.n	80056b2 <netif_add+0x116>
 800569a:	4b21      	ldr	r3, [pc, #132]	; (8005720 <netif_add+0x184>)
 800569c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80056a0:	4928      	ldr	r1, [pc, #160]	; (8005744 <netif_add+0x1a8>)
 80056a2:	4821      	ldr	r0, [pc, #132]	; (8005728 <netif_add+0x18c>)
 80056a4:	f00e fa34 	bl	8013b10 <iprintf>
 80056a8:	2000      	movs	r0, #0
 80056aa:	f00e fb33 	bl	8013d14 <fflush>
 80056ae:	f00e fa78 	bl	8013ba2 <abort>
        if (netif2->num == netif->num) {
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056be:	429a      	cmp	r2, r3
 80056c0:	d108      	bne.n	80056d4 <netif_add+0x138>
          netif->num++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056c8:	3301      	adds	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 80056d2:	e005      	b.n	80056e0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1c6      	bne.n	800566e <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1b4      	bne.n	8005650 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056ec:	2bfe      	cmp	r3, #254	; 0xfe
 80056ee:	d103      	bne.n	80056f8 <netif_add+0x15c>
    netif_num = 0;
 80056f0:	4b11      	ldr	r3, [pc, #68]	; (8005738 <netif_add+0x19c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e006      	b.n	8005706 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056fe:	3301      	adds	r3, #1
 8005700:	b2da      	uxtb	r2, r3
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <netif_add+0x19c>)
 8005704:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <netif_add+0x1a0>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800570e:	4a0b      	ldr	r2, [pc, #44]	; (800573c <netif_add+0x1a0>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	08015b80 	.word	0x08015b80
 8005724:	08015c00 	.word	0x08015c00
 8005728:	08015bbc 	.word	0x08015bbc
 800572c:	08015c1c 	.word	0x08015c1c
 8005730:	08017b44 	.word	0x08017b44
 8005734:	08005aa1 	.word	0x08005aa1
 8005738:	200006fc 	.word	0x200006fc
 800573c:	20002210 	.word	0x20002210
 8005740:	08015c40 	.word	0x08015c40
 8005744:	08015c54 	.word	0x08015c54

08005748 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f002 ff95 	bl	8008684 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <netif_do_set_ipaddr+0x2a>
 8005776:	4b22      	ldr	r3, [pc, #136]	; (8005800 <netif_do_set_ipaddr+0x9c>)
 8005778:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 800577c:	4921      	ldr	r1, [pc, #132]	; (8005804 <netif_do_set_ipaddr+0xa0>)
 800577e:	4822      	ldr	r0, [pc, #136]	; (8005808 <netif_do_set_ipaddr+0xa4>)
 8005780:	f00e f9c6 	bl	8013b10 <iprintf>
 8005784:	2000      	movs	r0, #0
 8005786:	f00e fac5 	bl	8013d14 <fflush>
 800578a:	f00e fa0a 	bl	8013ba2 <abort>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <netif_do_set_ipaddr+0x48>
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <netif_do_set_ipaddr+0x9c>)
 8005796:	f240 12dd 	movw	r2, #477	; 0x1dd
 800579a:	491a      	ldr	r1, [pc, #104]	; (8005804 <netif_do_set_ipaddr+0xa0>)
 800579c:	481a      	ldr	r0, [pc, #104]	; (8005808 <netif_do_set_ipaddr+0xa4>)
 800579e:	f00e f9b7 	bl	8013b10 <iprintf>
 80057a2:	2000      	movs	r0, #0
 80057a4:	f00e fab6 	bl	8013d14 <fflush>
 80057a8:	f00e f9fb 	bl	8013ba2 <abort>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d01c      	beq.n	80057f4 <netif_do_set_ipaddr+0x90>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3304      	adds	r3, #4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ffb9 	bl	8005748 <netif_do_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <netif_do_set_ipaddr+0x7e>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	e000      	b.n	80057e4 <netif_do_set_ipaddr+0x80>
 80057e2:	2300      	movs	r3, #0
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80057e8:	2101      	movs	r1, #1
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8d2 	bl	8005994 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <netif_do_set_ipaddr+0x92>
  }
  return 0; /* address unchanged */
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	08015b80 	.word	0x08015b80
 8005804:	08015c84 	.word	0x08015c84
 8005808:	08015bbc 	.word	0x08015bbc

0800580c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3308      	adds	r3, #8
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d00a      	beq.n	800583c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <netif_do_set_netmask+0x26>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	e000      	b.n	8005834 <netif_do_set_netmask+0x28>
 8005832:	2300      	movs	r3, #0
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	330c      	adds	r3, #12
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d00a      	beq.n	800587a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <netif_do_set_gw+0x26>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	e000      	b.n	8005872 <netif_do_set_gw+0x28>
 8005870:	2300      	movs	r3, #0
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <netif_set_addr+0x90>)
 80058a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80058ae:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <netif_set_addr+0x90>)
 80058b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80058b8:	4b17      	ldr	r3, [pc, #92]	; (8005918 <netif_set_addr+0x90>)
 80058ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <netif_set_addr+0x42>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <netif_set_addr+0x46>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <netif_set_addr+0x48>
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	461a      	mov	r2, r3
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ff3f 	bl	8005764 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff ff8e 	bl	800580c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ffa8 	bl	800584a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	461a      	mov	r2, r3
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff ff2b 	bl	8005764 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800590e:	bf00      	nop
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	08017b44 	.word	0x08017b44

0800591c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005924:	4a04      	ldr	r2, [pc, #16]	; (8005938 <netif_set_default+0x1c>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20002214 	.word	0x20002214

0800593c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <netif_set_up+0x1e>
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <netif_set_up+0x4c>)
 800594c:	f240 326b 	movw	r2, #875	; 0x36b
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <netif_set_up+0x50>)
 8005952:	480f      	ldr	r0, [pc, #60]	; (8005990 <netif_set_up+0x54>)
 8005954:	f7fc fab5 	bl	8001ec2 <lwip_win32_platform_diag>
 8005958:	e013      	b.n	8005982 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	b2da      	uxtb	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800597a:	2103      	movs	r1, #3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f809 	bl	8005994 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	08015b80 	.word	0x08015b80
 800598c:	08015cf4 	.word	0x08015cf4
 8005990:	08015bbc 	.word	0x08015bbc

08005994 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <netif_issue_reports+0x2a>
 80059a6:	4b11      	ldr	r3, [pc, #68]	; (80059ec <netif_issue_reports+0x58>)
 80059a8:	f44f 7262 	mov.w	r2, #904	; 0x388
 80059ac:	4910      	ldr	r1, [pc, #64]	; (80059f0 <netif_issue_reports+0x5c>)
 80059ae:	4811      	ldr	r0, [pc, #68]	; (80059f4 <netif_issue_reports+0x60>)
 80059b0:	f00e f8ae 	bl	8013b10 <iprintf>
 80059b4:	2000      	movs	r0, #0
 80059b6:	f00e f9ad 	bl	8013d14 <fflush>
 80059ba:	f00e f8f2 	bl	8013ba2 <abort>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <netif_issue_reports+0x50>
      !(netif->flags & NETIF_FLAG_UP)) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80059d2:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <netif_issue_reports+0x50>
    return;
  }
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	e000      	b.n	80059e6 <netif_issue_reports+0x52>
    return;
 80059e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08015b80 	.word	0x08015b80
 80059f0:	08015d10 	.word	0x08015d10
 80059f4:	08015bbc 	.word	0x08015bbc

080059f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d107      	bne.n	8005a16 <netif_set_link_up+0x1e>
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <netif_set_link_up+0x4c>)
 8005a08:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8005a0c:	490e      	ldr	r1, [pc, #56]	; (8005a48 <netif_set_link_up+0x50>)
 8005a0e:	480f      	ldr	r0, [pc, #60]	; (8005a4c <netif_set_link_up+0x54>)
 8005a10:	f7fc fa57 	bl	8001ec2 <lwip_win32_platform_diag>
 8005a14:	e013      	b.n	8005a3e <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10c      	bne.n	8005a3e <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a36:	2103      	movs	r1, #3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffab 	bl	8005994 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	08015b80 	.word	0x08015b80
 8005a48:	08015d54 	.word	0x08015d54
 8005a4c:	08015bbc 	.word	0x08015bbc

08005a50 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d107      	bne.n	8005a6e <netif_set_link_down+0x1e>
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <netif_set_link_down+0x44>)
 8005a60:	f240 4223 	movw	r2, #1059	; 0x423
 8005a64:	490c      	ldr	r1, [pc, #48]	; (8005a98 <netif_set_link_down+0x48>)
 8005a66:	480d      	ldr	r0, [pc, #52]	; (8005a9c <netif_set_link_down+0x4c>)
 8005a68:	f7fc fa2b 	bl	8001ec2 <lwip_win32_platform_diag>
 8005a6c:	e00f      	b.n	8005a8e <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a82:	f023 0304 	bic.w	r3, r3, #4
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08015b80 	.word	0x08015b80
 8005a98:	08015d78 	.word	0x08015d78
 8005a9c:	08015bbc 	.word	0x08015bbc

08005aa0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005aac:	f06f 030b 	mvn.w	r3, #11
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d013      	beq.n	8005af4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <netif_get_by_index+0x48>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e00c      	b.n	8005aee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ada:	3301      	adds	r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	79fa      	ldrb	r2, [r7, #7]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d101      	bne.n	8005ae8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	e006      	b.n	8005af6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ef      	bne.n	8005ad4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20002210 	.word	0x20002210

08005b08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005b0e:	f7fc fa11 	bl	8001f34 <sys_arch_protect>
 8005b12:	6038      	str	r0, [r7, #0]
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <pbuf_free_ooseq+0x44>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	f7fc fa12 	bl	8001f44 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <pbuf_free_ooseq+0x48>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e00a      	b.n	8005b3e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f002 fde5 	bl	8008700 <tcp_free_ooseq>
      return;
 8005b36:	e005      	b.n	8005b44 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f1      	bne.n	8005b28 <pbuf_free_ooseq+0x20>
    }
  }
}
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20002218 	.word	0x20002218
 8005b50:	200022c4 	.word	0x200022c4

08005b54 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8005b5c:	f7ff ffd4 	bl	8005b08 <pbuf_free_ooseq>
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8005b6e:	f7fc f9e1 	bl	8001f34 <sys_arch_protect>
 8005b72:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8005b74:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <pbuf_pool_is_empty+0x4c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8005b7a:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <pbuf_pool_is_empty+0x4c>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fc f9df 	bl	8001f44 <sys_arch_unprotect>

  if (!queued) {
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	480a      	ldr	r0, [pc, #40]	; (8005bb8 <pbuf_pool_is_empty+0x50>)
 8005b90:	f7fc fb64 	bl	800225c <tcpip_try_callback>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <pbuf_pool_is_empty+0x44>
 8005b9a:	f7fc f9cb 	bl	8001f34 <sys_arch_protect>
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <pbuf_pool_is_empty+0x4c>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc f9cc 	bl	8001f44 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20002218 	.word	0x20002218
 8005bb8:	08005b55 	.word	0x08005b55

08005bbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	460b      	mov	r3, r1
 8005bcc:	80fb      	strh	r3, [r7, #6]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88ba      	ldrh	r2, [r7, #4]
 8005be8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005bea:	8b3b      	ldrh	r3, [r7, #24]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	7f3a      	ldrb	r2, [r7, #28]
 8005bf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	73da      	strb	r2, [r3, #15]

  LWIP_PBUF_CUSTOM_DATA_INIT(p);
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	80bb      	strh	r3, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	2b41      	cmp	r3, #65	; 0x41
 8005c2a:	d00b      	beq.n	8005c44 <pbuf_alloc+0x34>
 8005c2c:	2b41      	cmp	r3, #65	; 0x41
 8005c2e:	dc02      	bgt.n	8005c36 <pbuf_alloc+0x26>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d007      	beq.n	8005c44 <pbuf_alloc+0x34>
 8005c34:	e08b      	b.n	8005d4e <pbuf_alloc+0x13e>
 8005c36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c3a:	d00b      	beq.n	8005c54 <pbuf_alloc+0x44>
 8005c3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c40:	d05b      	beq.n	8005cfa <pbuf_alloc+0xea>
 8005c42:	e084      	b.n	8005d4e <pbuf_alloc+0x13e>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005c44:	887a      	ldrh	r2, [r7, #2]
 8005c46:	88bb      	ldrh	r3, [r7, #4]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f000 f898 	bl	8005d80 <pbuf_alloc_reference>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005c52:	e088      	b.n	8005d66 <pbuf_alloc+0x156>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005c60:	2007      	movs	r0, #7
 8005c62:	f7ff fbf9 	bl	8005458 <memp_malloc>
 8005c66:	6178      	str	r0, [r7, #20]
        if (q == NULL) {
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8005c6e:	f7ff ff7b 	bl	8005b68 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8005c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c7a:	f000 fa33 	bl	80060e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e072      	b.n	8005d68 <pbuf_alloc+0x158>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005c82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	8b7b      	ldrh	r3, [r7, #26]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	827b      	strh	r3, [r7, #18]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c96:	3310      	adds	r3, #16
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	18d1      	adds	r1, r2, r3
 8005c9c:	8a78      	ldrh	r0, [r7, #18]
 8005c9e:	8b7a      	ldrh	r2, [r7, #26]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	4603      	mov	r3, r0
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7ff ff86 	bl	8005bbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005cb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb6:	d10b      	bne.n	8005cd0 <pbuf_alloc+0xc0>
 8005cb8:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <pbuf_alloc+0x160>)
 8005cba:	f240 1205 	movw	r2, #261	; 0x105
 8005cbe:	492d      	ldr	r1, [pc, #180]	; (8005d74 <pbuf_alloc+0x164>)
 8005cc0:	482d      	ldr	r0, [pc, #180]	; (8005d78 <pbuf_alloc+0x168>)
 8005cc2:	f00d ff25 	bl	8013b10 <iprintf>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f00e f824 	bl	8013d14 <fflush>
 8005ccc:	f00d ff69 	bl	8013ba2 <abort>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e002      	b.n	8005ce2 <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005ce6:	8b7a      	ldrh	r2, [r7, #26]
 8005ce8:	8a7b      	ldrh	r3, [r7, #18]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005cf2:	8b7b      	ldrh	r3, [r7, #26]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1b3      	bne.n	8005c60 <pbuf_alloc+0x50>
      break;
 8005cf8:	e035      	b.n	8005d66 <pbuf_alloc+0x156>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005cfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005cfc:	88bb      	ldrh	r3, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	823b      	strh	r3, [r7, #16]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005d02:	8a3b      	ldrh	r3, [r7, #16]
 8005d04:	3310      	adds	r3, #16
 8005d06:	81fb      	strh	r3, [r7, #14]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005d08:	8a3a      	ldrh	r2, [r7, #16]
 8005d0a:	88bb      	ldrh	r3, [r7, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d303      	bcc.n	8005d18 <pbuf_alloc+0x108>
 8005d10:	89fa      	ldrh	r2, [r7, #14]
 8005d12:	88bb      	ldrh	r3, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d201      	bcs.n	8005d1c <pbuf_alloc+0x10c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e025      	b.n	8005d68 <pbuf_alloc+0x158>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005d1c:	89fb      	ldrh	r3, [r7, #14]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff f982 	bl	8005028 <mem_malloc>
 8005d24:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <pbuf_alloc+0x120>
        return NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e01b      	b.n	8005d68 <pbuf_alloc+0x158>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d32:	3310      	adds	r3, #16
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	18d1      	adds	r1, r2, r3
 8005d38:	88b8      	ldrh	r0, [r7, #4]
 8005d3a:	88ba      	ldrh	r2, [r7, #4]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	887b      	ldrh	r3, [r7, #2]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4603      	mov	r3, r0
 8005d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d48:	f7ff ff38 	bl	8005bbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005d4c:	e00b      	b.n	8005d66 <pbuf_alloc+0x156>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <pbuf_alloc+0x160>)
 8005d50:	f240 1229 	movw	r2, #297	; 0x129
 8005d54:	4909      	ldr	r1, [pc, #36]	; (8005d7c <pbuf_alloc+0x16c>)
 8005d56:	4808      	ldr	r0, [pc, #32]	; (8005d78 <pbuf_alloc+0x168>)
 8005d58:	f00d feda 	bl	8013b10 <iprintf>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f00d ffd9 	bl	8013d14 <fflush>
 8005d62:	f00d ff1e 	bl	8013ba2 <abort>
      return NULL;
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3728      	adds	r7, #40	; 0x28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08015d9c 	.word	0x08015d9c
 8005d74:	08015dbc 	.word	0x08015dbc
 8005d78:	08015df0 	.word	0x08015df0
 8005d7c:	08015e18 	.word	0x08015e18

08005d80 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	807b      	strh	r3, [r7, #2]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005d90:	883b      	ldrh	r3, [r7, #0]
 8005d92:	2b41      	cmp	r3, #65	; 0x41
 8005d94:	d00e      	beq.n	8005db4 <pbuf_alloc_reference+0x34>
 8005d96:	883b      	ldrh	r3, [r7, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d00b      	beq.n	8005db4 <pbuf_alloc_reference+0x34>
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <pbuf_alloc_reference+0x68>)
 8005d9e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005da2:	4912      	ldr	r1, [pc, #72]	; (8005dec <pbuf_alloc_reference+0x6c>)
 8005da4:	4812      	ldr	r0, [pc, #72]	; (8005df0 <pbuf_alloc_reference+0x70>)
 8005da6:	f00d feb3 	bl	8013b10 <iprintf>
 8005daa:	2000      	movs	r0, #0
 8005dac:	f00d ffb2 	bl	8013d14 <fflush>
 8005db0:	f00d fef7 	bl	8013ba2 <abort>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005db4:	2006      	movs	r0, #6
 8005db6:	f7ff fb4f 	bl	8005458 <memp_malloc>
 8005dba:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <pbuf_alloc_reference+0x46>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e00b      	b.n	8005dde <pbuf_alloc_reference+0x5e>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005dc6:	8879      	ldrh	r1, [r7, #2]
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9301      	str	r3, [sp, #4]
 8005dce:	883b      	ldrh	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff fef0 	bl	8005bbc <pbuf_init_alloced_pbuf>
  return p;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	08015d9c 	.word	0x08015d9c
 8005dec:	08015e34 	.word	0x08015e34
 8005df0:	08015df0 	.word	0x08015df0

08005df4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <pbuf_realloc+0x2a>
 8005e06:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <pbuf_realloc+0x130>)
 8005e08:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8005e0c:	4946      	ldr	r1, [pc, #280]	; (8005f28 <pbuf_realloc+0x134>)
 8005e0e:	4847      	ldr	r0, [pc, #284]	; (8005f2c <pbuf_realloc+0x138>)
 8005e10:	f00d fe7e 	bl	8013b10 <iprintf>
 8005e14:	2000      	movs	r0, #0
 8005e16:	f00d ff7d 	bl	8013d14 <fflush>
 8005e1a:	f00d fec2 	bl	8013ba2 <abort>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	891b      	ldrh	r3, [r3, #8]
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d278      	bcs.n	8005f1a <pbuf_realloc+0x126>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	891a      	ldrh	r2, [r3, #8]
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005e32:	887b      	ldrh	r3, [r7, #2]
 8005e34:	827b      	strh	r3, [r7, #18]
  q = p;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005e3a:	e01d      	b.n	8005e78 <pbuf_realloc+0x84>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	895b      	ldrh	r3, [r3, #10]
 8005e40:	8a7a      	ldrh	r2, [r7, #18]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	891a      	ldrh	r2, [r3, #8]
 8005e4a:	8a3b      	ldrh	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <pbuf_realloc+0x84>
 8005e60:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <pbuf_realloc+0x130>)
 8005e62:	f240 12b1 	movw	r2, #433	; 0x1b1
 8005e66:	4932      	ldr	r1, [pc, #200]	; (8005f30 <pbuf_realloc+0x13c>)
 8005e68:	4830      	ldr	r0, [pc, #192]	; (8005f2c <pbuf_realloc+0x138>)
 8005e6a:	f00d fe51 	bl	8013b10 <iprintf>
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f00d ff50 	bl	8013d14 <fflush>
 8005e74:	f00d fe95 	bl	8013ba2 <abort>
  while (rem_len > q->len) {
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	895b      	ldrh	r3, [r3, #10]
 8005e7c:	8a7a      	ldrh	r2, [r7, #18]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d8dc      	bhi.n	8005e3c <pbuf_realloc+0x48>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	7b1b      	ldrb	r3, [r3, #12]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d131      	bne.n	8005ef2 <pbuf_realloc+0xfe>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	895b      	ldrh	r3, [r3, #10]
 8005e92:	8a7a      	ldrh	r2, [r7, #18]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d02c      	beq.n	8005ef2 <pbuf_realloc+0xfe>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	8a7b      	ldrh	r3, [r7, #18]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f7fe ff7f 	bl	8004db0 <mem_trim>
 8005eb2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <pbuf_realloc+0xde>
 8005eba:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <pbuf_realloc+0x130>)
 8005ebc:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005ec0:	491c      	ldr	r1, [pc, #112]	; (8005f34 <pbuf_realloc+0x140>)
 8005ec2:	481a      	ldr	r0, [pc, #104]	; (8005f2c <pbuf_realloc+0x138>)
 8005ec4:	f00d fe24 	bl	8013b10 <iprintf>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	f00d ff23 	bl	8013d14 <fflush>
 8005ece:	f00d fe68 	bl	8013ba2 <abort>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d00b      	beq.n	8005ef2 <pbuf_realloc+0xfe>
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <pbuf_realloc+0x130>)
 8005edc:	f240 12c1 	movw	r2, #449	; 0x1c1
 8005ee0:	4915      	ldr	r1, [pc, #84]	; (8005f38 <pbuf_realloc+0x144>)
 8005ee2:	4812      	ldr	r0, [pc, #72]	; (8005f2c <pbuf_realloc+0x138>)
 8005ee4:	f00d fe14 	bl	8013b10 <iprintf>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f00d ff13 	bl	8013d14 <fflush>
 8005eee:	f00d fe58 	bl	8013ba2 <abort>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	8a7a      	ldrh	r2, [r7, #18]
 8005ef6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	895a      	ldrh	r2, [r3, #10]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <pbuf_realloc+0x11e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f8e9 	bl	80060e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e000      	b.n	8005f1c <pbuf_realloc+0x128>
    return;
 8005f1a:	bf00      	nop

}
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	08015d9c 	.word	0x08015d9c
 8005f28:	08015e48 	.word	0x08015e48
 8005f2c:	08015df0 	.word	0x08015df0
 8005f30:	08015e60 	.word	0x08015e60
 8005f34:	08015e78 	.word	0x08015e78
 8005f38:	08015e94 	.word	0x08015e94

08005f3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <pbuf_add_header_impl+0x2c>
 8005f50:	4b2e      	ldr	r3, [pc, #184]	; (800600c <pbuf_add_header_impl+0xd0>)
 8005f52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005f56:	492e      	ldr	r1, [pc, #184]	; (8006010 <pbuf_add_header_impl+0xd4>)
 8005f58:	482e      	ldr	r0, [pc, #184]	; (8006014 <pbuf_add_header_impl+0xd8>)
 8005f5a:	f00d fdd9 	bl	8013b10 <iprintf>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f00d fed8 	bl	8013d14 <fflush>
 8005f64:	f00d fe1d 	bl	8013ba2 <abort>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <pbuf_add_header_impl+0x3a>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d301      	bcc.n	8005f7a <pbuf_add_header_impl+0x3e>
    return 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e044      	b.n	8006004 <pbuf_add_header_impl+0xc8>
  }
  if (header_size_increment == 0) {
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <pbuf_add_header_impl+0x48>
    return 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e03f      	b.n	8006004 <pbuf_add_header_impl+0xc8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	891a      	ldrh	r2, [r3, #8]
 8005f8c:	8a7b      	ldrh	r3, [r7, #18]
 8005f8e:	4413      	add	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8a7a      	ldrh	r2, [r7, #18]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d901      	bls.n	8005f9c <pbuf_add_header_impl+0x60>
    return 1;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e033      	b.n	8006004 <pbuf_add_header_impl+0xc8>
  }

  type_internal = p->type_internal;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	7b1b      	ldrb	r3, [r3, #12]
 8005fa0:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005fa2:	8a3b      	ldrh	r3, [r7, #16]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <pbuf_add_header_impl+0x8c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f103 0210 	add.w	r2, r3, #16
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d90d      	bls.n	8005fe0 <pbuf_add_header_impl+0xa4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e01d      	b.n	8006004 <pbuf_add_header_impl+0xc8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d006      	beq.n	8005fdc <pbuf_add_header_impl+0xa0>
      payload = (u8_t *)p->payload - header_size_increment;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e001      	b.n	8005fe0 <pbuf_add_header_impl+0xa4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e011      	b.n	8006004 <pbuf_add_header_impl+0xc8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	895a      	ldrh	r2, [r3, #10]
 8005fea:	8a7b      	ldrh	r3, [r7, #18]
 8005fec:	4413      	add	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	891a      	ldrh	r2, [r3, #8]
 8005ff8:	8a7b      	ldrh	r3, [r7, #18]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	811a      	strh	r2, [r3, #8]


  return 0;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	08015d9c 	.word	0x08015d9c
 8006010:	08015eb0 	.word	0x08015eb0
 8006014:	08015df0 	.word	0x08015df0

08006018 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006022:	2200      	movs	r2, #0
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ff88 	bl	8005f3c <pbuf_add_header_impl>
 800602c:	4603      	mov	r3, r0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <pbuf_remove_header+0x28>
 8006048:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <pbuf_remove_header+0x9c>)
 800604a:	f44f 7214 	mov.w	r2, #592	; 0x250
 800604e:	4922      	ldr	r1, [pc, #136]	; (80060d8 <pbuf_remove_header+0xa0>)
 8006050:	4822      	ldr	r0, [pc, #136]	; (80060dc <pbuf_remove_header+0xa4>)
 8006052:	f00d fd5d 	bl	8013b10 <iprintf>
 8006056:	2000      	movs	r0, #0
 8006058:	f00d fe5c 	bl	8013d14 <fflush>
 800605c:	f00d fda1 	bl	8013ba2 <abort>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <pbuf_remove_header+0x36>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d301      	bcc.n	8006072 <pbuf_remove_header+0x3a>
    return 1;
 800606e:	2301      	movs	r3, #1
 8006070:	e02c      	b.n	80060cc <pbuf_remove_header+0x94>
  }
  if (header_size_decrement == 0) {
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <pbuf_remove_header+0x44>
    return 0;
 8006078:	2300      	movs	r3, #0
 800607a:	e027      	b.n	80060cc <pbuf_remove_header+0x94>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	895b      	ldrh	r3, [r3, #10]
 8006084:	89fa      	ldrh	r2, [r7, #14]
 8006086:	429a      	cmp	r2, r3
 8006088:	d908      	bls.n	800609c <pbuf_remove_header+0x64>
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <pbuf_remove_header+0x9c>)
 800608c:	f240 225a 	movw	r2, #602	; 0x25a
 8006090:	4913      	ldr	r1, [pc, #76]	; (80060e0 <pbuf_remove_header+0xa8>)
 8006092:	4812      	ldr	r0, [pc, #72]	; (80060dc <pbuf_remove_header+0xa4>)
 8006094:	f7fb ff15 	bl	8001ec2 <lwip_win32_platform_diag>
 8006098:	2301      	movs	r3, #1
 800609a:	e017      	b.n	80060cc <pbuf_remove_header+0x94>

  /* remember current payload pointer */
  payload = p->payload;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	895a      	ldrh	r2, [r3, #10]
 80060b2:	89fb      	ldrh	r3, [r7, #14]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	891a      	ldrh	r2, [r3, #8]
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	08015d9c 	.word	0x08015d9c
 80060d8:	08015eb0 	.word	0x08015eb0
 80060dc:	08015df0 	.word	0x08015df0
 80060e0:	08015ebc 	.word	0x08015ebc

080060e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <pbuf_free+0x30>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <pbuf_free+0x2c>
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <pbuf_free+0xf0>)
 80060fa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80060fe:	4936      	ldr	r1, [pc, #216]	; (80061d8 <pbuf_free+0xf4>)
 8006100:	4836      	ldr	r0, [pc, #216]	; (80061dc <pbuf_free+0xf8>)
 8006102:	f00d fd05 	bl	8013b10 <iprintf>
 8006106:	2000      	movs	r0, #0
 8006108:	f00d fe04 	bl	8013d14 <fflush>
 800610c:	f00d fd49 	bl	8013ba2 <abort>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006110:	2300      	movs	r3, #0
 8006112:	e05b      	b.n	80061cc <pbuf_free+0xe8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006118:	e054      	b.n	80061c4 <pbuf_free+0xe0>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800611a:	f7fb ff0b 	bl	8001f34 <sys_arch_protect>
 800611e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7b9b      	ldrb	r3, [r3, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <pbuf_free+0x5c>
 8006128:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <pbuf_free+0xf0>)
 800612a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800612e:	492c      	ldr	r1, [pc, #176]	; (80061e0 <pbuf_free+0xfc>)
 8006130:	482a      	ldr	r0, [pc, #168]	; (80061dc <pbuf_free+0xf8>)
 8006132:	f00d fced 	bl	8013b10 <iprintf>
 8006136:	2000      	movs	r0, #0
 8006138:	f00d fdec 	bl	8013d14 <fflush>
 800613c:	f00d fd31 	bl	8013ba2 <abort>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7b9b      	ldrb	r3, [r3, #14]
 8006144:	3b01      	subs	r3, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	739a      	strb	r2, [r3, #14]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7b9b      	ldrb	r3, [r3, #14]
 8006150:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8006152:	69b8      	ldr	r0, [r7, #24]
 8006154:	f7fb fef6 	bl	8001f44 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d130      	bne.n	80061c0 <pbuf_free+0xdc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7b1b      	ldrb	r3, [r3, #12]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	73fb      	strb	r3, [r7, #15]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d104      	bne.n	800617e <pbuf_free+0x9a>
          memp_free(MEMP_PBUF_POOL, p);
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	2007      	movs	r0, #7
 8006178:	f7ff f9de 	bl	8005538 <memp_free>
 800617c:	e01a      	b.n	80061b4 <pbuf_free+0xd0>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d104      	bne.n	800618e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF, p);
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	2006      	movs	r0, #6
 8006188:	f7ff f9d6 	bl	8005538 <memp_free>
 800618c:	e012      	b.n	80061b4 <pbuf_free+0xd0>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <pbuf_free+0xb8>
          mem_free(p);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fe fd89 	bl	8004cac <mem_free>
 800619a:	e00b      	b.n	80061b4 <pbuf_free+0xd0>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <pbuf_free+0xf0>)
 800619e:	f240 3213 	movw	r2, #787	; 0x313
 80061a2:	4910      	ldr	r1, [pc, #64]	; (80061e4 <pbuf_free+0x100>)
 80061a4:	480d      	ldr	r0, [pc, #52]	; (80061dc <pbuf_free+0xf8>)
 80061a6:	f00d fcb3 	bl	8013b10 <iprintf>
 80061aa:	2000      	movs	r0, #0
 80061ac:	f00d fdb2 	bl	8013d14 <fflush>
 80061b0:	f00d fcf7 	bl	8013ba2 <abort>
        }
      }
      count++;
 80061b4:	7ffb      	ldrb	r3, [r7, #31]
 80061b6:	3301      	adds	r3, #1
 80061b8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	e001      	b.n	80061c4 <pbuf_free+0xe0>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1a7      	bne.n	800611a <pbuf_free+0x36>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80061ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08015d9c 	.word	0x08015d9c
 80061d8:	08015eb0 	.word	0x08015eb0
 80061dc:	08015df0 	.word	0x08015df0
 80061e0:	08015edc 	.word	0x08015edc
 80061e4:	08015ef4 	.word	0x08015ef4

080061e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80061f4:	e005      	b.n	8006202 <pbuf_clen+0x1a>
    ++len;
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	3301      	adds	r3, #1
 80061fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f6      	bne.n	80061f6 <pbuf_clen+0xe>
  }
  return len;
 8006208:	89fb      	ldrh	r3, [r7, #14]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01b      	beq.n	800625e <pbuf_ref+0x46>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006226:	f7fb fe85 	bl	8001f34 <sys_arch_protect>
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7b9b      	ldrb	r3, [r3, #14]
 8006230:	3301      	adds	r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	739a      	strb	r2, [r3, #14]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7fb fe83 	bl	8001f44 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7b9b      	ldrb	r3, [r3, #14]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <pbuf_ref+0x46>
 8006246:	4b08      	ldr	r3, [pc, #32]	; (8006268 <pbuf_ref+0x50>)
 8006248:	f240 3246 	movw	r2, #838	; 0x346
 800624c:	4907      	ldr	r1, [pc, #28]	; (800626c <pbuf_ref+0x54>)
 800624e:	4808      	ldr	r0, [pc, #32]	; (8006270 <pbuf_ref+0x58>)
 8006250:	f00d fc5e 	bl	8013b10 <iprintf>
 8006254:	2000      	movs	r0, #0
 8006256:	f00d fd5d 	bl	8013d14 <fflush>
 800625a:	f00d fca2 	bl	8013ba2 <abort>
  }
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	08015d9c 	.word	0x08015d9c
 800626c:	08015f08 	.word	0x08015f08
 8006270:	08015df0 	.word	0x08015df0

08006274 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <pbuf_cat+0x16>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d107      	bne.n	800629a <pbuf_cat+0x26>
 800628a:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <pbuf_cat+0xcc>)
 800628c:	f240 325e 	movw	r2, #862	; 0x35e
 8006290:	492c      	ldr	r1, [pc, #176]	; (8006344 <pbuf_cat+0xd0>)
 8006292:	482d      	ldr	r0, [pc, #180]	; (8006348 <pbuf_cat+0xd4>)
 8006294:	f7fb fe15 	bl	8001ec2 <lwip_win32_platform_diag>
 8006298:	e04e      	b.n	8006338 <pbuf_cat+0xc4>
             ((h != NULL) && (t != NULL)), return;);
  LWIP_ASSERT("Creating an infinite loop", h != t);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d10b      	bne.n	80062ba <pbuf_cat+0x46>
 80062a2:	4b27      	ldr	r3, [pc, #156]	; (8006340 <pbuf_cat+0xcc>)
 80062a4:	f240 325f 	movw	r2, #863	; 0x35f
 80062a8:	4928      	ldr	r1, [pc, #160]	; (800634c <pbuf_cat+0xd8>)
 80062aa:	4827      	ldr	r0, [pc, #156]	; (8006348 <pbuf_cat+0xd4>)
 80062ac:	f00d fc30 	bl	8013b10 <iprintf>
 80062b0:	2000      	movs	r0, #0
 80062b2:	f00d fd2f 	bl	8013d14 <fflush>
 80062b6:	f00d fc74 	bl	8013ba2 <abort>

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e00a      	b.n	80062d6 <pbuf_cat+0x62>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	891a      	ldrh	r2, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	891b      	ldrh	r3, [r3, #8]
 80062c8:	4413      	add	r3, r2
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <pbuf_cat+0x4c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	891a      	ldrh	r2, [r3, #8]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	895b      	ldrh	r3, [r3, #10]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d00b      	beq.n	8006302 <pbuf_cat+0x8e>
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pbuf_cat+0xcc>)
 80062ec:	f240 3267 	movw	r2, #871	; 0x367
 80062f0:	4917      	ldr	r1, [pc, #92]	; (8006350 <pbuf_cat+0xdc>)
 80062f2:	4815      	ldr	r0, [pc, #84]	; (8006348 <pbuf_cat+0xd4>)
 80062f4:	f00d fc0c 	bl	8013b10 <iprintf>
 80062f8:	2000      	movs	r0, #0
 80062fa:	f00d fd0b 	bl	8013d14 <fflush>
 80062fe:	f00d fc50 	bl	8013ba2 <abort>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <pbuf_cat+0xae>
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <pbuf_cat+0xcc>)
 800630c:	f44f 725a 	mov.w	r2, #872	; 0x368
 8006310:	4910      	ldr	r1, [pc, #64]	; (8006354 <pbuf_cat+0xe0>)
 8006312:	480d      	ldr	r0, [pc, #52]	; (8006348 <pbuf_cat+0xd4>)
 8006314:	f00d fbfc 	bl	8013b10 <iprintf>
 8006318:	2000      	movs	r0, #0
 800631a:	f00d fcfb 	bl	8013d14 <fflush>
 800631e:	f00d fc40 	bl	8013ba2 <abort>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	891a      	ldrh	r2, [r3, #8]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	891b      	ldrh	r3, [r3, #8]
 800632a:	4413      	add	r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	08015d9c 	.word	0x08015d9c
 8006344:	08015f1c 	.word	0x08015f1c
 8006348:	08015df0 	.word	0x08015df0
 800634c:	08015f54 	.word	0x08015f54
 8006350:	08015f70 	.word	0x08015f70
 8006354:	08015fa0 	.word	0x08015fa0

08006358 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <pbuf_copy+0x24>
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <pbuf_copy+0x3c>)
 800636a:	f240 32c7 	movw	r2, #967	; 0x3c7
 800636e:	490a      	ldr	r1, [pc, #40]	; (8006398 <pbuf_copy+0x40>)
 8006370:	480a      	ldr	r0, [pc, #40]	; (800639c <pbuf_copy+0x44>)
 8006372:	f7fb fda6 	bl	8001ec2 <lwip_win32_platform_diag>
 8006376:	f06f 030f 	mvn.w	r3, #15
 800637a:	e007      	b.n	800638c <pbuf_copy+0x34>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	891a      	ldrh	r2, [r3, #8]
 8006380:	2300      	movs	r3, #0
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f80b 	bl	80063a0 <pbuf_copy_partial_pbuf>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	08015d9c 	.word	0x08015d9c
 8006398:	08015fec 	.word	0x08015fec
 800639c:	08015df0 	.word	0x08015df0

080063a0 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	460b      	mov	r3, r1
 80063b0:	80fb      	strh	r3, [r7, #6]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 80063b6:	88bb      	ldrh	r3, [r7, #4]
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <pbuf_copy_partial_pbuf+0x2e>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	891b      	ldrh	r3, [r3, #8]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d909      	bls.n	80063e2 <pbuf_copy_partial_pbuf+0x42>
 80063ce:	4b74      	ldr	r3, [pc, #464]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 80063d0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80063d4:	4973      	ldr	r1, [pc, #460]	; (80065a4 <pbuf_copy_partial_pbuf+0x204>)
 80063d6:	4874      	ldr	r0, [pc, #464]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 80063d8:	f7fb fd73 	bl	8001ec2 <lwip_win32_platform_diag>
 80063dc:	f06f 030f 	mvn.w	r3, #15
 80063e0:	e0d9      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <pbuf_copy_partial_pbuf+0x58>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	891b      	ldrh	r3, [r3, #8]
 80063ec:	4619      	mov	r1, r3
 80063ee:	88ba      	ldrh	r2, [r7, #4]
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	4413      	add	r3, r2
 80063f4:	4299      	cmp	r1, r3
 80063f6:	da09      	bge.n	800640c <pbuf_copy_partial_pbuf+0x6c>
 80063f8:	4b69      	ldr	r3, [pc, #420]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 80063fa:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80063fe:	496b      	ldr	r1, [pc, #428]	; (80065ac <pbuf_copy_partial_pbuf+0x20c>)
 8006400:	4869      	ldr	r0, [pc, #420]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 8006402:	f7fb fd5e 	bl	8001ec2 <lwip_win32_platform_diag>
 8006406:	f06f 030f 	mvn.w	r3, #15
 800640a:	e0c4      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	895b      	ldrh	r3, [r3, #10]
 8006410:	461a      	mov	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	895b      	ldrh	r3, [r3, #10]
 800641a:	4619      	mov	r1, r3
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	429a      	cmp	r2, r3
 8006422:	d306      	bcc.n	8006432 <pbuf_copy_partial_pbuf+0x92>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	461a      	mov	r2, r3
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e005      	b.n	800643e <pbuf_copy_partial_pbuf+0x9e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	895b      	ldrh	r3, [r3, #10]
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4293      	cmp	r3, r2
 8006444:	bf28      	it	cs
 8006446:	4613      	movcs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	18d0      	adds	r0, r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4413      	add	r3, r2
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4619      	mov	r1, r3
 800645e:	f00d fd59 	bl	8013f14 <memcpy>
    offset_to += len;
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
 8006468:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	b29b      	uxth	r3, r3
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	895b      	ldrh	r3, [r3, #10]
 8006480:	461a      	mov	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	429a      	cmp	r2, r3
 8006486:	d20b      	bcs.n	80064a0 <pbuf_copy_partial_pbuf+0x100>
 8006488:	4b45      	ldr	r3, [pc, #276]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 800648a:	f240 32fa 	movw	r2, #1018	; 0x3fa
 800648e:	4948      	ldr	r1, [pc, #288]	; (80065b0 <pbuf_copy_partial_pbuf+0x210>)
 8006490:	4845      	ldr	r0, [pc, #276]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 8006492:	f00d fb3d 	bl	8013b10 <iprintf>
 8006496:	2000      	movs	r0, #0
 8006498:	f00d fc3c 	bl	8013d14 <fflush>
 800649c:	f00d fb81 	bl	8013ba2 <abort>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	895b      	ldrh	r3, [r3, #10]
 80064a4:	461a      	mov	r2, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d20b      	bcs.n	80064c4 <pbuf_copy_partial_pbuf+0x124>
 80064ac:	4b3c      	ldr	r3, [pc, #240]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 80064ae:	f240 32fb 	movw	r2, #1019	; 0x3fb
 80064b2:	4940      	ldr	r1, [pc, #256]	; (80065b4 <pbuf_copy_partial_pbuf+0x214>)
 80064b4:	483c      	ldr	r0, [pc, #240]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 80064b6:	f00d fb2b 	bl	8013b10 <iprintf>
 80064ba:	2000      	movs	r0, #0
 80064bc:	f00d fc2a 	bl	8013d14 <fflush>
 80064c0:	f00d fb6f 	bl	8013ba2 <abort>
    if (offset_from >= p_from->len) {
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	895b      	ldrh	r3, [r3, #10]
 80064c8:	461a      	mov	r2, r3
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d814      	bhi.n	80064fa <pbuf_copy_partial_pbuf+0x15a>
      /* on to next p_from (if any) */
      offset_from = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <pbuf_copy_partial_pbuf+0x15a>
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <pbuf_copy_partial_pbuf+0x15a>
 80064e6:	4b2e      	ldr	r3, [pc, #184]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 80064e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064ec:	4932      	ldr	r1, [pc, #200]	; (80065b8 <pbuf_copy_partial_pbuf+0x218>)
 80064ee:	482e      	ldr	r0, [pc, #184]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 80064f0:	f7fb fce7 	bl	8001ec2 <lwip_win32_platform_diag>
 80064f4:	f06f 030f 	mvn.w	r3, #15
 80064f8:	e04d      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
    }
    if (offset_to == p_to->len) {
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	895b      	ldrh	r3, [r3, #10]
 80064fe:	461a      	mov	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	429a      	cmp	r2, r3
 8006504:	d114      	bne.n	8006530 <pbuf_copy_partial_pbuf+0x190>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10c      	bne.n	8006530 <pbuf_copy_partial_pbuf+0x190>
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <pbuf_copy_partial_pbuf+0x190>
 800651c:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 800651e:	f240 4206 	movw	r2, #1030	; 0x406
 8006522:	4926      	ldr	r1, [pc, #152]	; (80065bc <pbuf_copy_partial_pbuf+0x21c>)
 8006524:	4820      	ldr	r0, [pc, #128]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 8006526:	f7fb fccc 	bl	8001ec2 <lwip_win32_platform_diag>
 800652a:	f06f 030f 	mvn.w	r3, #15
 800652e:	e032      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d013      	beq.n	800655e <pbuf_copy_partial_pbuf+0x1be>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	895a      	ldrh	r2, [r3, #10]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	891b      	ldrh	r3, [r3, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d10d      	bne.n	800655e <pbuf_copy_partial_pbuf+0x1be>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <pbuf_copy_partial_pbuf+0x1be>
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 800654c:	f240 420c 	movw	r2, #1036	; 0x40c
 8006550:	491b      	ldr	r1, [pc, #108]	; (80065c0 <pbuf_copy_partial_pbuf+0x220>)
 8006552:	4815      	ldr	r0, [pc, #84]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 8006554:	f7fb fcb5 	bl	8001ec2 <lwip_win32_platform_diag>
 8006558:	f06f 0305 	mvn.w	r3, #5
 800655c:	e01b      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <pbuf_copy_partial_pbuf+0x1ec>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	895a      	ldrh	r2, [r3, #10]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	891b      	ldrh	r3, [r3, #8]
 800656c:	429a      	cmp	r2, r3
 800656e:	d10d      	bne.n	800658c <pbuf_copy_partial_pbuf+0x1ec>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <pbuf_copy_partial_pbuf+0x1ec>
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <pbuf_copy_partial_pbuf+0x200>)
 800657a:	f240 4211 	movw	r2, #1041	; 0x411
 800657e:	4910      	ldr	r1, [pc, #64]	; (80065c0 <pbuf_copy_partial_pbuf+0x220>)
 8006580:	4809      	ldr	r0, [pc, #36]	; (80065a8 <pbuf_copy_partial_pbuf+0x208>)
 8006582:	f7fb fc9e 	bl	8001ec2 <lwip_win32_platform_diag>
 8006586:	f06f 0305 	mvn.w	r3, #5
 800658a:	e004      	b.n	8006596 <pbuf_copy_partial_pbuf+0x1f6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f47f af3c 	bne.w	800640c <pbuf_copy_partial_pbuf+0x6c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08015d9c 	.word	0x08015d9c
 80065a4:	08016008 	.word	0x08016008
 80065a8:	08015df0 	.word	0x08015df0
 80065ac:	0801603c 	.word	0x0801603c
 80065b0:	0801606c 	.word	0x0801606c
 80065b4:	08016084 	.word	0x08016084
 80065b8:	080160a0 	.word	0x080160a0
 80065bc:	080160b0 	.word	0x080160b0
 80065c0:	080160c0 	.word	0x080160c0

080065c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	460b      	mov	r3, r1
 80065d4:	80fb      	strh	r3, [r7, #6]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d108      	bne.n	80065fa <pbuf_copy_partial+0x36>
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <pbuf_copy_partial+0xd4>)
 80065ea:	f240 422c 	movw	r2, #1068	; 0x42c
 80065ee:	492b      	ldr	r1, [pc, #172]	; (800669c <pbuf_copy_partial+0xd8>)
 80065f0:	482b      	ldr	r0, [pc, #172]	; (80066a0 <pbuf_copy_partial+0xdc>)
 80065f2:	f7fb fc66 	bl	8001ec2 <lwip_win32_platform_diag>
 80065f6:	2300      	movs	r3, #0
 80065f8:	e04a      	b.n	8006690 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <pbuf_copy_partial+0x4e>
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <pbuf_copy_partial+0xd4>)
 8006602:	f240 422d 	movw	r2, #1069	; 0x42d
 8006606:	4927      	ldr	r1, [pc, #156]	; (80066a4 <pbuf_copy_partial+0xe0>)
 8006608:	4825      	ldr	r0, [pc, #148]	; (80066a0 <pbuf_copy_partial+0xdc>)
 800660a:	f7fb fc5a 	bl	8001ec2 <lwip_win32_platform_diag>
 800660e:	2300      	movs	r3, #0
 8006610:	e03e      	b.n	8006690 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e034      	b.n	8006682 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006618:	88bb      	ldrh	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <pbuf_copy_partial+0x70>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	895b      	ldrh	r3, [r3, #10]
 8006622:	88ba      	ldrh	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d305      	bcc.n	8006634 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	895b      	ldrh	r3, [r3, #10]
 800662c:	88ba      	ldrh	r2, [r7, #4]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	80bb      	strh	r3, [r7, #4]
 8006632:	e023      	b.n	800667c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	895a      	ldrh	r2, [r3, #10]
 8006638:	88bb      	ldrh	r3, [r7, #4]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800663e:	8b3a      	ldrh	r2, [r7, #24]
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	429a      	cmp	r2, r3
 8006644:	d901      	bls.n	800664a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800664a:	8b7b      	ldrh	r3, [r7, #26]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	18d0      	adds	r0, r2, r3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	88bb      	ldrh	r3, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	8b3a      	ldrh	r2, [r7, #24]
 800665a:	4619      	mov	r1, r3
 800665c:	f00d fc5a 	bl	8013f14 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006660:	8afa      	ldrh	r2, [r7, #22]
 8006662:	8b3b      	ldrh	r3, [r7, #24]
 8006664:	4413      	add	r3, r2
 8006666:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006668:	8b7a      	ldrh	r2, [r7, #26]
 800666a:	8b3b      	ldrh	r3, [r7, #24]
 800666c:	4413      	add	r3, r2
 800666e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	8b3b      	ldrh	r3, [r7, #24]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <pbuf_copy_partial+0xca>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1c4      	bne.n	8006618 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800668e:	8afb      	ldrh	r3, [r7, #22]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	08015d9c 	.word	0x08015d9c
 800669c:	080160f8 	.word	0x080160f8
 80066a0:	08015df0 	.word	0x08015df0
 80066a4:	08016118 	.word	0x08016118

080066a8 <pbuf_get_contiguous>:
 *         - pointer to 'buffer' if data was not contiguous and had to be copied
 *         - NULL on error
 */
void *
pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	807b      	strh	r3, [r7, #2]
  const struct pbuf *q;
  u16_t out_offset;

  LWIP_ERROR("pbuf_get_contiguous: invalid buf", (p != NULL), return NULL;);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d108      	bne.n	80066ce <pbuf_get_contiguous+0x26>
 80066bc:	4b25      	ldr	r3, [pc, #148]	; (8006754 <pbuf_get_contiguous+0xac>)
 80066be:	f240 425c 	movw	r2, #1116	; 0x45c
 80066c2:	4925      	ldr	r1, [pc, #148]	; (8006758 <pbuf_get_contiguous+0xb0>)
 80066c4:	4825      	ldr	r0, [pc, #148]	; (800675c <pbuf_get_contiguous+0xb4>)
 80066c6:	f7fb fbfc 	bl	8001ec2 <lwip_win32_platform_diag>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e03d      	b.n	800674a <pbuf_get_contiguous+0xa2>
  LWIP_ERROR("pbuf_get_contiguous: invalid bufsize", (buffer == NULL) || (bufsize >= len), return NULL;);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <pbuf_get_contiguous+0x46>
 80066d4:	887a      	ldrh	r2, [r7, #2]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d908      	bls.n	80066ee <pbuf_get_contiguous+0x46>
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <pbuf_get_contiguous+0xac>)
 80066de:	f240 425d 	movw	r2, #1117	; 0x45d
 80066e2:	491f      	ldr	r1, [pc, #124]	; (8006760 <pbuf_get_contiguous+0xb8>)
 80066e4:	481d      	ldr	r0, [pc, #116]	; (800675c <pbuf_get_contiguous+0xb4>)
 80066e6:	f7fb fbec 	bl	8001ec2 <lwip_win32_platform_diag>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e02d      	b.n	800674a <pbuf_get_contiguous+0xa2>

  q = pbuf_skip_const(p, offset, &out_offset);
 80066ee:	f107 0212 	add.w	r2, r7, #18
 80066f2:	8c3b      	ldrh	r3, [r7, #32]
 80066f4:	4619      	mov	r1, r3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f834 	bl	8006764 <pbuf_skip_const>
 80066fc:	6178      	str	r0, [r7, #20]
  if (q != NULL) {
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d021      	beq.n	8006748 <pbuf_get_contiguous+0xa0>
    if (q->len >= (out_offset + len)) {
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	895b      	ldrh	r3, [r3, #10]
 8006708:	461a      	mov	r2, r3
 800670a:	8a7b      	ldrh	r3, [r7, #18]
 800670c:	4619      	mov	r1, r3
 800670e:	887b      	ldrh	r3, [r7, #2]
 8006710:	440b      	add	r3, r1
 8006712:	429a      	cmp	r2, r3
 8006714:	db04      	blt.n	8006720 <pbuf_get_contiguous+0x78>
      /* all data in this pbuf, return zero-copy */
      return (u8_t *)q->payload + out_offset;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	8a7a      	ldrh	r2, [r7, #18]
 800671c:	4413      	add	r3, r2
 800671e:	e014      	b.n	800674a <pbuf_get_contiguous+0xa2>
    }
    if (buffer == NULL) {
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <pbuf_get_contiguous+0x82>
      /* the caller does not want to copy */
      return NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	e00f      	b.n	800674a <pbuf_get_contiguous+0xa2>
    }
    /* need to copy */
    if (pbuf_copy_partial(q, buffer, len, out_offset) != len) {
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	887a      	ldrh	r2, [r7, #2]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	f7ff ff47 	bl	80065c4 <pbuf_copy_partial>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	4293      	cmp	r3, r2
 800673e:	d001      	beq.n	8006744 <pbuf_get_contiguous+0x9c>
      /* copying failed: pbuf is too short */
      return NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	e002      	b.n	800674a <pbuf_get_contiguous+0xa2>
    }
    return buffer;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	e000      	b.n	800674a <pbuf_get_contiguous+0xa2>
  }
  /* pbuf is too short (offset does not fit in) */
  return NULL;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	08015d9c 	.word	0x08015d9c
 8006758:	0801613c 	.word	0x0801613c
 800675c:	08015df0 	.word	0x08015df0
 8006760:	08016160 	.word	0x08016160

08006764 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	460b      	mov	r3, r1
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8006772:	897b      	ldrh	r3, [r7, #10]
 8006774:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800677a:	e007      	b.n	800678c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	895b      	ldrh	r3, [r3, #10]
 8006780:	8afa      	ldrh	r2, [r7, #22]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <pbuf_skip_const+0x38>
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	895b      	ldrh	r3, [r3, #10]
 8006796:	8afa      	ldrh	r2, [r7, #22]
 8006798:	429a      	cmp	r2, r3
 800679a:	d2ef      	bcs.n	800677c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8afa      	ldrh	r2, [r7, #22]
 80067a6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80067a8:	693b      	ldr	r3, [r7, #16]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf *
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  struct pbuf *q;
  if (p->next == NULL) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <pbuf_coalesce+0x18>
    return p;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	e010      	b.n	80067f0 <pbuf_coalesce+0x3a>
  }
  q = pbuf_clone(layer, PBUF_RAM, p);
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f80e 	bl	80067f8 <pbuf_clone>
 80067dc:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <pbuf_coalesce+0x32>
    /* @todo: what do we do now? */
    return p;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	e003      	b.n	80067f0 <pbuf_coalesce+0x3a>
  }
  pbuf_free(p);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fc7b 	bl	80060e4 <pbuf_free>
  return q;
 80067ee:	68fb      	ldr	r3, [r7, #12]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	603a      	str	r2, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	460b      	mov	r3, r1
 8006806:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	8919      	ldrh	r1, [r3, #8]
 800680c:	88ba      	ldrh	r2, [r7, #4]
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff f9fd 	bl	8005c10 <pbuf_alloc>
 8006816:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <pbuf_clone+0x2a>
    return NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	e016      	b.n	8006850 <pbuf_clone+0x58>
  }
  err = pbuf_copy(q, p);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff fd97 	bl	8006358 <pbuf_copy>
 800682a:	4603      	mov	r3, r0
 800682c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800682e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <pbuf_clone+0x56>
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <pbuf_clone+0x60>)
 8006838:	f240 524c 	movw	r2, #1356	; 0x54c
 800683c:	4907      	ldr	r1, [pc, #28]	; (800685c <pbuf_clone+0x64>)
 800683e:	4808      	ldr	r0, [pc, #32]	; (8006860 <pbuf_clone+0x68>)
 8006840:	f00d f966 	bl	8013b10 <iprintf>
 8006844:	2000      	movs	r0, #0
 8006846:	f00d fa65 	bl	8013d14 <fflush>
 800684a:	f00d f9aa 	bl	8013ba2 <abort>
  return q;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08015d9c 	.word	0x08015d9c
 800685c:	08016224 	.word	0x08016224
 8006860:	08015df0 	.word	0x08015df0

08006864 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f80c 	bl	8006892 <pbuf_try_get_at>
 800687a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	db02      	blt.n	8006888 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e000      	b.n	800688a <pbuf_get_at+0x26>
  }
  return 0;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800689e:	f107 020a 	add.w	r2, r7, #10
 80068a2:	887b      	ldrh	r3, [r7, #2]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff5c 	bl	8006764 <pbuf_skip_const>
 80068ac:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <pbuf_try_get_at+0x38>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	895a      	ldrh	r2, [r3, #10]
 80068b8:	897b      	ldrh	r3, [r7, #10]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d905      	bls.n	80068ca <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	897a      	ldrh	r2, [r7, #10]
 80068c4:	4413      	add	r3, r2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	e001      	b.n	80068ce <pbuf_try_get_at+0x3c>
  }
  return -1;
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <stats_init+0x14>)
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <stats_init+0x18>)
 80068e0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80068e2:	bf00      	nop
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	2000221c 	.word	0x2000221c
 80068f0:	08016238 	.word	0x08016238

080068f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80068f8:	f7fb fb04 	bl	8001f04 <lwip_port_rand>
 80068fc:	4603      	mov	r3, r0
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006904:	b29b      	uxth	r3, r3
 8006906:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800690a:	b29a      	uxth	r2, r3
 800690c:	4b01      	ldr	r3, [pc, #4]	; (8006914 <tcp_init+0x20>)
 800690e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006910:	bf00      	nop
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000008 	.word	0x20000008

08006918 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7d1b      	ldrb	r3, [r3, #20]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10a      	bne.n	800693e <tcp_free+0x26>
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <tcp_free+0x38>)
 800692a:	22d4      	movs	r2, #212	; 0xd4
 800692c:	4909      	ldr	r1, [pc, #36]	; (8006954 <tcp_free+0x3c>)
 800692e:	480a      	ldr	r0, [pc, #40]	; (8006958 <tcp_free+0x40>)
 8006930:	f00d f8ee 	bl	8013b10 <iprintf>
 8006934:	2000      	movs	r0, #0
 8006936:	f00d f9ed 	bl	8013d14 <fflush>
 800693a:	f00d f932 	bl	8013ba2 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	2000      	movs	r0, #0
 8006942:	f7fe fdf9 	bl	8005538 <memp_free>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	080162b4 	.word	0x080162b4
 8006954:	080162d4 	.word	0x080162d4
 8006958:	080162e8 	.word	0x080162e8

0800695c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7d1b      	ldrb	r3, [r3, #20]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10a      	bne.n	8006982 <tcp_free_listen+0x26>
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <tcp_free_listen+0x38>)
 800696e:	22df      	movs	r2, #223	; 0xdf
 8006970:	4909      	ldr	r1, [pc, #36]	; (8006998 <tcp_free_listen+0x3c>)
 8006972:	480a      	ldr	r0, [pc, #40]	; (800699c <tcp_free_listen+0x40>)
 8006974:	f00d f8cc 	bl	8013b10 <iprintf>
 8006978:	2000      	movs	r0, #0
 800697a:	f00d f9cb 	bl	8013d14 <fflush>
 800697e:	f00d f910 	bl	8013ba2 <abort>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	2001      	movs	r0, #1
 8006986:	f7fe fdd7 	bl	8005538 <memp_free>
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	080162b4 	.word	0x080162b4
 8006998:	08016310 	.word	0x08016310
 800699c:	080162e8 	.word	0x080162e8

080069a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80069a4:	f001 f8f8 	bl	8007b98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <tcp_tmr+0x28>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <tcp_tmr+0x28>)
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <tcp_tmr+0x28>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80069c0:	f000 fd78 	bl	80074b4 <tcp_slowtmr>
  }
}
 80069c4:	bf00      	nop
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200006fd 	.word	0x200006fd

080069cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <tcp_remove_listener+0x26>
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <tcp_remove_listener+0x50>)
 80069de:	22ff      	movs	r2, #255	; 0xff
 80069e0:	490f      	ldr	r1, [pc, #60]	; (8006a20 <tcp_remove_listener+0x54>)
 80069e2:	4810      	ldr	r0, [pc, #64]	; (8006a24 <tcp_remove_listener+0x58>)
 80069e4:	f00d f894 	bl	8013b10 <iprintf>
 80069e8:	2000      	movs	r0, #0
 80069ea:	f00d f993 	bl	8013d14 <fflush>
 80069ee:	f00d f8d8 	bl	8013ba2 <abort>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e00a      	b.n	8006a0e <tcp_remove_listener+0x42>
    if (pcb->listener == lpcb) {
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d102      	bne.n	8006a08 <tcp_remove_listener+0x3c>
      pcb->listener = NULL;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f1      	bne.n	80069f8 <tcp_remove_listener+0x2c>
    }
  }
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	080162b4 	.word	0x080162b4
 8006a20:	0801632c 	.word	0x0801632c
 8006a24:	080162e8 	.word	0x080162e8

08006a28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <tcp_listen_closed+0x26>
 8006a36:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <tcp_listen_closed+0x74>)
 8006a38:	f240 1211 	movw	r2, #273	; 0x111
 8006a3c:	4918      	ldr	r1, [pc, #96]	; (8006aa0 <tcp_listen_closed+0x78>)
 8006a3e:	4819      	ldr	r0, [pc, #100]	; (8006aa4 <tcp_listen_closed+0x7c>)
 8006a40:	f00d f866 	bl	8013b10 <iprintf>
 8006a44:	2000      	movs	r0, #0
 8006a46:	f00d f965 	bl	8013d14 <fflush>
 8006a4a:	f00d f8aa 	bl	8013ba2 <abort>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7d1b      	ldrb	r3, [r3, #20]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d00b      	beq.n	8006a6e <tcp_listen_closed+0x46>
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <tcp_listen_closed+0x74>)
 8006a58:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006a5c:	4912      	ldr	r1, [pc, #72]	; (8006aa8 <tcp_listen_closed+0x80>)
 8006a5e:	4811      	ldr	r0, [pc, #68]	; (8006aa4 <tcp_listen_closed+0x7c>)
 8006a60:	f00d f856 	bl	8013b10 <iprintf>
 8006a64:	2000      	movs	r0, #0
 8006a66:	f00d f955 	bl	8013d14 <fflush>
 8006a6a:	f00d f89a 	bl	8013ba2 <abort>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e00b      	b.n	8006a8c <tcp_listen_closed+0x64>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <tcp_listen_closed+0x84>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff ffa3 	bl	80069cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d9f0      	bls.n	8006a74 <tcp_listen_closed+0x4c>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	080162b4 	.word	0x080162b4
 8006aa0:	08016354 	.word	0x08016354
 8006aa4:	080162e8 	.word	0x080162e8
 8006aa8:	08016360 	.word	0x08016360
 8006aac:	08017c24 	.word	0x08017c24

08006ab0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ab0:	b5b0      	push	{r4, r5, r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <tcp_close_shutdown+0x2a>
 8006ac2:	4b67      	ldr	r3, [pc, #412]	; (8006c60 <tcp_close_shutdown+0x1b0>)
 8006ac4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ac8:	4966      	ldr	r1, [pc, #408]	; (8006c64 <tcp_close_shutdown+0x1b4>)
 8006aca:	4867      	ldr	r0, [pc, #412]	; (8006c68 <tcp_close_shutdown+0x1b8>)
 8006acc:	f00d f820 	bl	8013b10 <iprintf>
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f00d f91f 	bl	8013d14 <fflush>
 8006ad6:	f00d f864 	bl	8013ba2 <abort>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d06c      	beq.n	8006bba <tcp_close_shutdown+0x10a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7d1b      	ldrb	r3, [r3, #20]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d003      	beq.n	8006af0 <tcp_close_shutdown+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7d1b      	ldrb	r3, [r3, #20]
 8006aec:	2b07      	cmp	r3, #7
 8006aee:	d164      	bne.n	8006bba <tcp_close_shutdown+0x10a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <tcp_close_shutdown+0x54>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afc:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d05a      	beq.n	8006bba <tcp_close_shutdown+0x10a>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8b5b      	ldrh	r3, [r3, #26]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <tcp_close_shutdown+0x78>
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <tcp_close_shutdown+0x1b0>)
 8006b12:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006b16:	4955      	ldr	r1, [pc, #340]	; (8006c6c <tcp_close_shutdown+0x1bc>)
 8006b18:	4853      	ldr	r0, [pc, #332]	; (8006c68 <tcp_close_shutdown+0x1b8>)
 8006b1a:	f00c fff9 	bl	8013b10 <iprintf>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	f00d f8f8 	bl	8013d14 <fflush>
 8006b24:	f00d f83d 	bl	8013ba2 <abort>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006b30:	687d      	ldr	r5, [r7, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	8ad2      	ldrh	r2, [r2, #22]
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	8b09      	ldrh	r1, [r1, #24]
 8006b3e:	9102      	str	r1, [sp, #8]
 8006b40:	9201      	str	r2, [sp, #4]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	462b      	mov	r3, r5
 8006b46:	4622      	mov	r2, r4
 8006b48:	4601      	mov	r1, r0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f006 f9d0 	bl	800cef0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fbfb 	bl	800834c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006b56:	4b46      	ldr	r3, [pc, #280]	; (8006c70 <tcp_close_shutdown+0x1c0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d105      	bne.n	8006b6c <tcp_close_shutdown+0xbc>
 8006b60:	4b43      	ldr	r3, [pc, #268]	; (8006c70 <tcp_close_shutdown+0x1c0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4a42      	ldr	r2, [pc, #264]	; (8006c70 <tcp_close_shutdown+0x1c0>)
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e013      	b.n	8006b94 <tcp_close_shutdown+0xe4>
 8006b6c:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <tcp_close_shutdown+0x1c0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	e00c      	b.n	8006b8e <tcp_close_shutdown+0xde>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d104      	bne.n	8006b88 <tcp_close_shutdown+0xd8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e005      	b.n	8006b94 <tcp_close_shutdown+0xe4>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ef      	bne.n	8006b74 <tcp_close_shutdown+0xc4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <tcp_close_shutdown+0x1c4>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ba0:	4b35      	ldr	r3, [pc, #212]	; (8006c78 <tcp_close_shutdown+0x1c8>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d102      	bne.n	8006bb0 <tcp_close_shutdown+0x100>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006baa:	f004 f9fb 	bl	800afa4 <tcp_trigger_input_pcb_close>
 8006bae:	e002      	b.n	8006bb6 <tcp_close_shutdown+0x106>
      } else {
        tcp_free(pcb);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff feb1 	bl	8006918 <tcp_free>
      }
      return ERR_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e04d      	b.n	8006c56 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7d1b      	ldrb	r3, [r3, #20]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d02d      	beq.n	8006c1e <tcp_close_shutdown+0x16e>
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d036      	beq.n	8006c34 <tcp_close_shutdown+0x184>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d13f      	bne.n	8006c4a <tcp_close_shutdown+0x19a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8adb      	ldrh	r3, [r3, #22]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d021      	beq.n	8006c16 <tcp_close_shutdown+0x166>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <tcp_close_shutdown+0x1cc>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d105      	bne.n	8006be8 <tcp_close_shutdown+0x138>
 8006bdc:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <tcp_close_shutdown+0x1cc>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <tcp_close_shutdown+0x1cc>)
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e013      	b.n	8006c10 <tcp_close_shutdown+0x160>
 8006be8:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <tcp_close_shutdown+0x1cc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	e00c      	b.n	8006c0a <tcp_close_shutdown+0x15a>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d104      	bne.n	8006c04 <tcp_close_shutdown+0x154>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e005      	b.n	8006c10 <tcp_close_shutdown+0x160>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ef      	bne.n	8006bf0 <tcp_close_shutdown+0x140>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fe7e 	bl	8006918 <tcp_free>
      break;
 8006c1c:	e01a      	b.n	8006c54 <tcp_close_shutdown+0x1a4>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff ff02 	bl	8006a28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4816      	ldr	r0, [pc, #88]	; (8006c80 <tcp_close_shutdown+0x1d0>)
 8006c28:	f001 fbe0 	bl	80083ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fe95 	bl	800695c <tcp_free_listen>
      break;
 8006c32:	e00f      	b.n	8006c54 <tcp_close_shutdown+0x1a4>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	480e      	ldr	r0, [pc, #56]	; (8006c70 <tcp_close_shutdown+0x1c0>)
 8006c38:	f001 fbd8 	bl	80083ec <tcp_pcb_remove>
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <tcp_close_shutdown+0x1c4>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fe68 	bl	8006918 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006c48:	e004      	b.n	8006c54 <tcp_close_shutdown+0x1a4>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f81a 	bl	8006c84 <tcp_close_shutdown_fin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	e000      	b.n	8006c56 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	080162b4 	.word	0x080162b4
 8006c64:	08016378 	.word	0x08016378
 8006c68:	080162e8 	.word	0x080162e8
 8006c6c:	08016398 	.word	0x08016398
 8006c70:	200022c4 	.word	0x200022c4
 8006c74:	200022c0 	.word	0x200022c0
 8006c78:	200022d8 	.word	0x200022d8
 8006c7c:	200022d0 	.word	0x200022d0
 8006c80:	200022cc 	.word	0x200022cc

08006c84 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <tcp_close_shutdown_fin+0x26>
 8006c92:	4b2f      	ldr	r3, [pc, #188]	; (8006d50 <tcp_close_shutdown_fin+0xcc>)
 8006c94:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006c98:	492e      	ldr	r1, [pc, #184]	; (8006d54 <tcp_close_shutdown_fin+0xd0>)
 8006c9a:	482f      	ldr	r0, [pc, #188]	; (8006d58 <tcp_close_shutdown_fin+0xd4>)
 8006c9c:	f00c ff38 	bl	8013b10 <iprintf>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f00d f837 	bl	8013d14 <fflush>
 8006ca6:	f00c ff7c 	bl	8013ba2 <abort>

  switch (pcb->state) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	7d1b      	ldrb	r3, [r3, #20]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d010      	beq.n	8006cd4 <tcp_close_shutdown_fin+0x50>
 8006cb2:	2b07      	cmp	r3, #7
 8006cb4:	d01b      	beq.n	8006cee <tcp_close_shutdown_fin+0x6a>
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d126      	bne.n	8006d08 <tcp_close_shutdown_fin+0x84>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f005 f8d0 	bl	800be60 <tcp_send_fin>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11f      	bne.n	8006d0c <tcp_close_shutdown_fin+0x88>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2205      	movs	r2, #5
 8006cd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cd2:	e01b      	b.n	8006d0c <tcp_close_shutdown_fin+0x88>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f005 f8c3 	bl	800be60 <tcp_send_fin>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d114      	bne.n	8006d10 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2205      	movs	r2, #5
 8006cea:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006cec:	e010      	b.n	8006d10 <tcp_close_shutdown_fin+0x8c>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f005 f8b6 	bl	800be60 <tcp_send_fin>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <tcp_close_shutdown_fin+0x90>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2209      	movs	r2, #9
 8006d04:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006d06:	e005      	b.n	8006d14 <tcp_close_shutdown_fin+0x90>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e01c      	b.n	8006d46 <tcp_close_shutdown_fin+0xc2>
      break;
 8006d0c:	bf00      	nop
 8006d0e:	e002      	b.n	8006d16 <tcp_close_shutdown_fin+0x92>
      break;
 8006d10:	bf00      	nop
 8006d12:	e000      	b.n	8006d16 <tcp_close_shutdown_fin+0x92>
      break;
 8006d14:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <tcp_close_shutdown_fin+0xa2>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f005 f9fe 	bl	800c120 <tcp_output>
 8006d24:	e00d      	b.n	8006d42 <tcp_close_shutdown_fin+0xbe>
  } else if (err == ERR_MEM) {
 8006d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d108      	bne.n	8006d42 <tcp_close_shutdown_fin+0xbe>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8b5b      	ldrh	r3, [r3, #26]
 8006d34:	f043 0308 	orr.w	r3, r3, #8
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e001      	b.n	8006d46 <tcp_close_shutdown_fin+0xc2>
  }
  return err;
 8006d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	080162b4 	.word	0x080162b4
 8006d54:	08016354 	.word	0x08016354
 8006d58:	080162e8 	.word	0x080162e8

08006d5c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <tcp_close+0x22>
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <tcp_close+0x4c>)
 8006d6c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006d70:	490e      	ldr	r1, [pc, #56]	; (8006dac <tcp_close+0x50>)
 8006d72:	480f      	ldr	r0, [pc, #60]	; (8006db0 <tcp_close+0x54>)
 8006d74:	f7fb f8a5 	bl	8001ec2 <lwip_win32_platform_diag>
 8006d78:	f06f 030f 	mvn.w	r3, #15
 8006d7c:	e00f      	b.n	8006d9e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7d1b      	ldrb	r3, [r3, #20]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d006      	beq.n	8006d94 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8b5b      	ldrh	r3, [r3, #26]
 8006d8a:	f043 0310 	orr.w	r3, r3, #16
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006d94:	2101      	movs	r1, #1
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fe8a 	bl	8006ab0 <tcp_close_shutdown>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	080162b4 	.word	0x080162b4
 8006dac:	080163b4 	.word	0x080163b4
 8006db0:	080162e8 	.word	0x080162e8

08006db4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08e      	sub	sp, #56	; 0x38
 8006db8:	af04      	add	r7, sp, #16
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d107      	bne.n	8006dd4 <tcp_abandon+0x20>
 8006dc4:	4b54      	ldr	r3, [pc, #336]	; (8006f18 <tcp_abandon+0x164>)
 8006dc6:	f240 223d 	movw	r2, #573	; 0x23d
 8006dca:	4954      	ldr	r1, [pc, #336]	; (8006f1c <tcp_abandon+0x168>)
 8006dcc:	4854      	ldr	r0, [pc, #336]	; (8006f20 <tcp_abandon+0x16c>)
 8006dce:	f7fb f878 	bl	8001ec2 <lwip_win32_platform_diag>
 8006dd2:	e09e      	b.n	8006f12 <tcp_abandon+0x15e>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7d1b      	ldrb	r3, [r3, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10b      	bne.n	8006df4 <tcp_abandon+0x40>
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <tcp_abandon+0x164>)
 8006dde:	f240 2241 	movw	r2, #577	; 0x241
 8006de2:	4950      	ldr	r1, [pc, #320]	; (8006f24 <tcp_abandon+0x170>)
 8006de4:	484e      	ldr	r0, [pc, #312]	; (8006f20 <tcp_abandon+0x16c>)
 8006de6:	f00c fe93 	bl	8013b10 <iprintf>
 8006dea:	2000      	movs	r0, #0
 8006dec:	f00c ff92 	bl	8013d14 <fflush>
 8006df0:	f00c fed7 	bl	8013ba2 <abort>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7d1b      	ldrb	r3, [r3, #20]
 8006df8:	2b0a      	cmp	r3, #10
 8006dfa:	d107      	bne.n	8006e0c <tcp_abandon+0x58>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	484a      	ldr	r0, [pc, #296]	; (8006f28 <tcp_abandon+0x174>)
 8006e00:	f001 faf4 	bl	80083ec <tcp_pcb_remove>
    tcp_free(pcb);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fd87 	bl	8006918 <tcp_free>
 8006e0a:	e082      	b.n	8006f12 <tcp_abandon+0x15e>
  } else {
    int send_rst = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	7d1b      	ldrb	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d126      	bne.n	8006e84 <tcp_abandon+0xd0>
      if (pcb->local_port != 0) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8adb      	ldrh	r3, [r3, #22]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d02e      	beq.n	8006e9c <tcp_abandon+0xe8>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e3e:	4b3b      	ldr	r3, [pc, #236]	; (8006f2c <tcp_abandon+0x178>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d105      	bne.n	8006e54 <tcp_abandon+0xa0>
 8006e48:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <tcp_abandon+0x178>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	4a37      	ldr	r2, [pc, #220]	; (8006f2c <tcp_abandon+0x178>)
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e013      	b.n	8006e7c <tcp_abandon+0xc8>
 8006e54:	4b35      	ldr	r3, [pc, #212]	; (8006f2c <tcp_abandon+0x178>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e00c      	b.n	8006e76 <tcp_abandon+0xc2>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d104      	bne.n	8006e70 <tcp_abandon+0xbc>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	e005      	b.n	8006e7c <tcp_abandon+0xc8>
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ef      	bne.n	8006e5c <tcp_abandon+0xa8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60da      	str	r2, [r3, #12]
 8006e82:	e00b      	b.n	8006e9c <tcp_abandon+0xe8>
      }
    } else {
      send_rst = reset;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8adb      	ldrh	r3, [r3, #22]
 8006e8c:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4827      	ldr	r0, [pc, #156]	; (8006f30 <tcp_abandon+0x17c>)
 8006e92:	f001 faab 	bl	80083ec <tcp_pcb_remove>
 8006e96:	4b27      	ldr	r3, [pc, #156]	; (8006f34 <tcp_abandon+0x180>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unacked);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 ff57 	bl	8007d5c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <tcp_abandon+0x10c>
      tcp_segs_free(pcb->unsent);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 ff4e 	bl	8007d5c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <tcp_abandon+0x11e>
      tcp_segs_free(pcb->ooseq);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 ff45 	bl	8007d5c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <tcp_abandon+0x142>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	8b12      	ldrh	r2, [r2, #24]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ee6:	9201      	str	r2, [sp, #4]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	460b      	mov	r3, r1
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	69b9      	ldr	r1, [r7, #24]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f005 fffd 	bl	800cef0 <tcp_rst>
    }
    last_state = pcb->state;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7d1b      	ldrb	r3, [r3, #20]
 8006efa:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fd0b 	bl	8006918 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <tcp_abandon+0x15e>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f06f 010c 	mvn.w	r1, #12
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	4798      	blx	r3
  }
}
 8006f12:	3728      	adds	r7, #40	; 0x28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	080162b4 	.word	0x080162b4
 8006f1c:	080163e8 	.word	0x080163e8
 8006f20:	080162e8 	.word	0x080162e8
 8006f24:	08016404 	.word	0x08016404
 8006f28:	200022d4 	.word	0x200022d4
 8006f2c:	200022d0 	.word	0x200022d0
 8006f30:	200022c4 	.word	0x200022c4
 8006f34:	200022c0 	.word	0x200022c0

08006f38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006f40:	2101      	movs	r1, #1
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ff36 	bl	8006db4 <tcp_abandon>
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006f5e:	2304      	movs	r3, #4
 8006f60:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006f68:	4b3e      	ldr	r3, [pc, #248]	; (8007064 <tcp_bind+0x114>)
 8006f6a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <tcp_bind+0x36>
 8006f72:	4b3d      	ldr	r3, [pc, #244]	; (8007068 <tcp_bind+0x118>)
 8006f74:	f240 22aa 	movw	r2, #682	; 0x2aa
 8006f78:	493c      	ldr	r1, [pc, #240]	; (800706c <tcp_bind+0x11c>)
 8006f7a:	483d      	ldr	r0, [pc, #244]	; (8007070 <tcp_bind+0x120>)
 8006f7c:	f7fa ffa1 	bl	8001ec2 <lwip_win32_platform_diag>
 8006f80:	f06f 030f 	mvn.w	r3, #15
 8006f84:	e06a      	b.n	800705c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	7d1b      	ldrb	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <tcp_bind+0x52>
 8006f8e:	4b36      	ldr	r3, [pc, #216]	; (8007068 <tcp_bind+0x118>)
 8006f90:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8006f94:	4937      	ldr	r1, [pc, #220]	; (8007074 <tcp_bind+0x124>)
 8006f96:	4836      	ldr	r0, [pc, #216]	; (8007070 <tcp_bind+0x120>)
 8006f98:	f7fa ff93 	bl	8001ec2 <lwip_win32_platform_diag>
 8006f9c:	f06f 0305 	mvn.w	r3, #5
 8006fa0:	e05c      	b.n	800705c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <tcp_bind+0x6c>
    port = tcp_new_port();
 8006fa8:	f000 f926 	bl	80071f8 <tcp_new_port>
 8006fac:	4603      	mov	r3, r0
 8006fae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006fb0:	88fb      	ldrh	r3, [r7, #6]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d135      	bne.n	8007022 <tcp_bind+0xd2>
      return ERR_BUF;
 8006fb6:	f06f 0301 	mvn.w	r3, #1
 8006fba:	e04f      	b.n	800705c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e02b      	b.n	800701a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006fc2:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <tcp_bind+0x128>)
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e01e      	b.n	800700e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	8adb      	ldrh	r3, [r3, #22]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d116      	bne.n	8007008 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006fda:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <tcp_bind+0xb2>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <tcp_bind+0xb2>
                 ip_addr_eq(&cpcb->local_ip, ipaddr))) {
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d102      	bne.n	8007008 <tcp_bind+0xb8>
              return ERR_USE;
 8007002:	f06f 0307 	mvn.w	r3, #7
 8007006:	e029      	b.n	800705c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1dd      	bne.n	8006fd0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	429a      	cmp	r2, r3
 8007020:	dbcf      	blt.n	8006fc2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00c      	beq.n	8007042 <tcp_bind+0xf2>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <tcp_bind+0xec>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	e000      	b.n	800703e <tcp_bind+0xee>
 800703c:	2300      	movs	r3, #0
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <tcp_bind+0x12c>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <tcp_bind+0x12c>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	f006 f915 	bl	800d284 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	08017b44 	.word	0x08017b44
 8007068:	080162b4 	.word	0x080162b4
 800706c:	08016438 	.word	0x08016438
 8007070:	080162e8 	.word	0x080162e8
 8007074:	08016450 	.word	0x08016450
 8007078:	08017c24 	.word	0x08017c24
 800707c:	200022d0 	.word	0x200022d0

08007080 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <tcp_update_rcv_ann_wnd+0x26>
 800708e:	4b2b      	ldr	r3, [pc, #172]	; (800713c <tcp_update_rcv_ann_wnd+0xbc>)
 8007090:	f240 32aa 	movw	r2, #938	; 0x3aa
 8007094:	492a      	ldr	r1, [pc, #168]	; (8007140 <tcp_update_rcv_ann_wnd+0xc0>)
 8007096:	482b      	ldr	r0, [pc, #172]	; (8007144 <tcp_update_rcv_ann_wnd+0xc4>)
 8007098:	f00c fd3a 	bl	8013b10 <iprintf>
 800709c:	2000      	movs	r0, #0
 800709e:	f00c fe39 	bl	8013d14 <fflush>
 80070a2:	f00c fd7e 	bl	8013ba2 <abort>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80070ae:	4413      	add	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80070ba:	f240 21da 	movw	r1, #730	; 0x2da
 80070be:	428a      	cmp	r2, r1
 80070c0:	d802      	bhi.n	80070c8 <tcp_update_rcv_ann_wnd+0x48>
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80070c6:	e001      	b.n	80070cc <tcp_update_rcv_ann_wnd+0x4c>
 80070c8:	f240 22da 	movw	r2, #730	; 0x2da
 80070cc:	4413      	add	r3, r2
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	db08      	blt.n	80070e8 <tcp_update_rcv_ann_wnd+0x68>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	e025      	b.n	8007134 <tcp_update_rcv_ann_wnd+0xb4>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da03      	bge.n	80070fe <tcp_update_rcv_ann_wnd+0x7e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070fc:	e019      	b.n	8007132 <tcp_update_rcv_ann_wnd+0xb2>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007110:	d30b      	bcc.n	800712a <tcp_update_rcv_ann_wnd+0xaa>
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <tcp_update_rcv_ann_wnd+0xbc>)
 8007114:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007118:	490b      	ldr	r1, [pc, #44]	; (8007148 <tcp_update_rcv_ann_wnd+0xc8>)
 800711a:	480a      	ldr	r0, [pc, #40]	; (8007144 <tcp_update_rcv_ann_wnd+0xc4>)
 800711c:	f00c fcf8 	bl	8013b10 <iprintf>
 8007120:	2000      	movs	r0, #0
 8007122:	f00c fdf7 	bl	8013d14 <fflush>
 8007126:	f00c fd3c 	bl	8013ba2 <abort>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007132:	2300      	movs	r3, #0
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	080162b4 	.word	0x080162b4
 8007140:	08016500 	.word	0x08016500
 8007144:	080162e8 	.word	0x080162e8
 8007148:	08016524 	.word	0x08016524

0800714c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d107      	bne.n	800716e <tcp_recved+0x22>
 800715e:	4b22      	ldr	r3, [pc, #136]	; (80071e8 <tcp_recved+0x9c>)
 8007160:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007164:	4921      	ldr	r1, [pc, #132]	; (80071ec <tcp_recved+0xa0>)
 8007166:	4822      	ldr	r0, [pc, #136]	; (80071f0 <tcp_recved+0xa4>)
 8007168:	f7fa feab 	bl	8001ec2 <lwip_win32_platform_diag>
 800716c:	e038      	b.n	80071e0 <tcp_recved+0x94>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7d1b      	ldrb	r3, [r3, #20]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10b      	bne.n	800718e <tcp_recved+0x42>
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <tcp_recved+0x9c>)
 8007178:	f240 32d7 	movw	r2, #983	; 0x3d7
 800717c:	491d      	ldr	r1, [pc, #116]	; (80071f4 <tcp_recved+0xa8>)
 800717e:	481c      	ldr	r0, [pc, #112]	; (80071f0 <tcp_recved+0xa4>)
 8007180:	f00c fcc6 	bl	8013b10 <iprintf>
 8007184:	2000      	movs	r0, #0
 8007186:	f00c fdc5 	bl	8013d14 <fflush>
 800718a:	f00c fd0a 	bl	8013ba2 <abort>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	4413      	add	r3, r2
 8007196:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800719e:	4293      	cmp	r3, r2
 80071a0:	d804      	bhi.n	80071ac <tcp_recved+0x60>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a6:	89fa      	ldrh	r2, [r7, #14]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d204      	bcs.n	80071b6 <tcp_recved+0x6a>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80071b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80071b4:	e002      	b.n	80071bc <tcp_recved+0x70>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	89fa      	ldrh	r2, [r7, #14]
 80071ba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff5f 	bl	8007080 <tcp_update_rcv_ann_wnd>
 80071c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 80071ca:	d909      	bls.n	80071e0 <tcp_recved+0x94>
    tcp_ack_now(pcb);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8b5b      	ldrh	r3, [r3, #26]
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f004 ffa0 	bl	800c120 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	080162b4 	.word	0x080162b4
 80071ec:	08016540 	.word	0x08016540
 80071f0:	080162e8 	.word	0x080162e8
 80071f4:	08016558 	.word	0x08016558

080071f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007202:	4b1e      	ldr	r3, [pc, #120]	; (800727c <tcp_new_port+0x84>)
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	4b1c      	ldr	r3, [pc, #112]	; (800727c <tcp_new_port+0x84>)
 800720c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800720e:	4b1b      	ldr	r3, [pc, #108]	; (800727c <tcp_new_port+0x84>)
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007216:	4293      	cmp	r3, r2
 8007218:	d103      	bne.n	8007222 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800721a:	4b18      	ldr	r3, [pc, #96]	; (800727c <tcp_new_port+0x84>)
 800721c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007220:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007222:	2300      	movs	r3, #0
 8007224:	71fb      	strb	r3, [r7, #7]
 8007226:	e01e      	b.n	8007266 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <tcp_new_port+0x88>)
 800722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	e011      	b.n	800725a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	8ada      	ldrh	r2, [r3, #22]
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <tcp_new_port+0x84>)
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d108      	bne.n	8007254 <tcp_new_port+0x5c>
        n++;
 8007242:	88bb      	ldrh	r3, [r7, #4]
 8007244:	3301      	adds	r3, #1
 8007246:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007248:	88bb      	ldrh	r3, [r7, #4]
 800724a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724e:	d3d8      	bcc.n	8007202 <tcp_new_port+0xa>
          return 0;
 8007250:	2300      	movs	r3, #0
 8007252:	e00d      	b.n	8007270 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1ea      	bne.n	8007236 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	3301      	adds	r3, #1
 8007264:	71fb      	strb	r3, [r7, #7]
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d9dd      	bls.n	8007228 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <tcp_new_port+0x84>)
 800726e:	881b      	ldrh	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000008 	.word	0x20000008
 8007280:	08017c24 	.word	0x08017c24

08007284 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <tcp_connect+0x2e>
 800729e:	4b7d      	ldr	r3, [pc, #500]	; (8007494 <tcp_connect+0x210>)
 80072a0:	f240 4239 	movw	r2, #1081	; 0x439
 80072a4:	497c      	ldr	r1, [pc, #496]	; (8007498 <tcp_connect+0x214>)
 80072a6:	487d      	ldr	r0, [pc, #500]	; (800749c <tcp_connect+0x218>)
 80072a8:	f7fa fe0b 	bl	8001ec2 <lwip_win32_platform_diag>
 80072ac:	f06f 030f 	mvn.w	r3, #15
 80072b0:	e0ec      	b.n	800748c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <tcp_connect+0x48>
 80072b8:	4b76      	ldr	r3, [pc, #472]	; (8007494 <tcp_connect+0x210>)
 80072ba:	f240 423a 	movw	r2, #1082	; 0x43a
 80072be:	4978      	ldr	r1, [pc, #480]	; (80074a0 <tcp_connect+0x21c>)
 80072c0:	4876      	ldr	r0, [pc, #472]	; (800749c <tcp_connect+0x218>)
 80072c2:	f7fa fdfe 	bl	8001ec2 <lwip_win32_platform_diag>
 80072c6:	f06f 030f 	mvn.w	r3, #15
 80072ca:	e0df      	b.n	800748c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <tcp_connect+0x64>
 80072d4:	4b6f      	ldr	r3, [pc, #444]	; (8007494 <tcp_connect+0x210>)
 80072d6:	f240 423c 	movw	r2, #1084	; 0x43c
 80072da:	4972      	ldr	r1, [pc, #456]	; (80074a4 <tcp_connect+0x220>)
 80072dc:	486f      	ldr	r0, [pc, #444]	; (800749c <tcp_connect+0x218>)
 80072de:	f7fa fdf0 	bl	8001ec2 <lwip_win32_platform_diag>
 80072e2:	f06f 0309 	mvn.w	r3, #9
 80072e6:	e0d1      	b.n	800748c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <tcp_connect+0x70>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	e000      	b.n	80072f6 <tcp_connect+0x72>
 80072f4:	2300      	movs	r3, #0
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7a1b      	ldrb	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	7a1b      	ldrb	r3, [r3, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fbd5 	bl	8005abc <netif_get_by_index>
 8007312:	6278      	str	r0, [r7, #36]	; 0x24
 8007314:	e005      	b.n	8007322 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3304      	adds	r3, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7fc ff44 	bl	80041a8 <ip4_route>
 8007320:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8007328:	f06f 0303 	mvn.w	r3, #3
 800732c:	e0ae      	b.n	800748c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <tcp_connect+0xb8>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <tcp_connect+0xc4>
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	3304      	adds	r3, #4
 8007346:	e000      	b.n	800734a <tcp_connect+0xc6>
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d102      	bne.n	8007358 <tcp_connect+0xd4>
      return ERR_RTE;
 8007352:	f06f 0303 	mvn.w	r3, #3
 8007356:	e099      	b.n	800748c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8adb      	ldrh	r3, [r3, #22]
 8007364:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8adb      	ldrh	r3, [r3, #22]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10c      	bne.n	8007388 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800736e:	f7ff ff43 	bl	80071f8 <tcp_new_port>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8adb      	ldrh	r3, [r3, #22]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d102      	bne.n	8007388 <tcp_connect+0x104>
      return ERR_BUF;
 8007382:	f06f 0301 	mvn.w	r3, #1
 8007386:	e081      	b.n	800748c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 f8db 	bl	8008544 <tcp_next_iss>
 800738e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1e5a      	subs	r2, r3, #1
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1e5a      	subs	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80073d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80073dc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3304      	adds	r3, #4
 80073e6:	461a      	mov	r2, r3
 80073e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ea:	f001 f8d5 	bl	8008598 <tcp_eff_send_mss_netif>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007406:	2102      	movs	r1, #2
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f004 fd7d 	bl	800bf08 <tcp_enqueue_flags>
 800740e:	4603      	mov	r3, r0
 8007410:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8007412:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d136      	bne.n	8007488 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2202      	movs	r2, #2
 800741e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007420:	8b7b      	ldrh	r3, [r7, #26]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d021      	beq.n	800746a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007426:	4b20      	ldr	r3, [pc, #128]	; (80074a8 <tcp_connect+0x224>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d105      	bne.n	800743c <tcp_connect+0x1b8>
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <tcp_connect+0x224>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <tcp_connect+0x224>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	e013      	b.n	8007464 <tcp_connect+0x1e0>
 800743c:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <tcp_connect+0x224>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	623b      	str	r3, [r7, #32]
 8007442:	e00c      	b.n	800745e <tcp_connect+0x1da>
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d104      	bne.n	8007458 <tcp_connect+0x1d4>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e005      	b.n	8007464 <tcp_connect+0x1e0>
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1ef      	bne.n	8007444 <tcp_connect+0x1c0>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <tcp_connect+0x228>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	4a0e      	ldr	r2, [pc, #56]	; (80074ac <tcp_connect+0x228>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	f005 ff04 	bl	800d284 <tcp_timer_needed>
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <tcp_connect+0x22c>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f004 fe4c 	bl	800c120 <tcp_output>
  }
  return ret;
 8007488:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3728      	adds	r7, #40	; 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	080162b4 	.word	0x080162b4
 8007498:	08016580 	.word	0x08016580
 800749c:	080162e8 	.word	0x080162e8
 80074a0:	0801659c 	.word	0x0801659c
 80074a4:	080165b8 	.word	0x080165b8
 80074a8:	200022d0 	.word	0x200022d0
 80074ac:	200022c4 	.word	0x200022c4
 80074b0:	200022c0 	.word	0x200022c0

080074b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074b4:	b5b0      	push	{r4, r5, r7, lr}
 80074b6:	b090      	sub	sp, #64	; 0x40
 80074b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80074c0:	4ba1      	ldr	r3, [pc, #644]	; (8007748 <tcp_slowtmr+0x294>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	4aa0      	ldr	r2, [pc, #640]	; (8007748 <tcp_slowtmr+0x294>)
 80074c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074ca:	4ba0      	ldr	r3, [pc, #640]	; (800774c <tcp_slowtmr+0x298>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	4b9e      	ldr	r3, [pc, #632]	; (800774c <tcp_slowtmr+0x298>)
 80074d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80074da:	4b9d      	ldr	r3, [pc, #628]	; (8007750 <tcp_slowtmr+0x29c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80074e0:	e2c3      	b.n	8007a6a <tcp_slowtmr+0x5b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	7d1b      	ldrb	r3, [r3, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <tcp_slowtmr+0x4e>
 80074ea:	4b9a      	ldr	r3, [pc, #616]	; (8007754 <tcp_slowtmr+0x2a0>)
 80074ec:	f240 42c2 	movw	r2, #1218	; 0x4c2
 80074f0:	4999      	ldr	r1, [pc, #612]	; (8007758 <tcp_slowtmr+0x2a4>)
 80074f2:	489a      	ldr	r0, [pc, #616]	; (800775c <tcp_slowtmr+0x2a8>)
 80074f4:	f00c fb0c 	bl	8013b10 <iprintf>
 80074f8:	2000      	movs	r0, #0
 80074fa:	f00c fc0b 	bl	8013d14 <fflush>
 80074fe:	f00c fb50 	bl	8013ba2 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	7d1b      	ldrb	r3, [r3, #20]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10b      	bne.n	8007522 <tcp_slowtmr+0x6e>
 800750a:	4b92      	ldr	r3, [pc, #584]	; (8007754 <tcp_slowtmr+0x2a0>)
 800750c:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8007510:	4993      	ldr	r1, [pc, #588]	; (8007760 <tcp_slowtmr+0x2ac>)
 8007512:	4892      	ldr	r0, [pc, #584]	; (800775c <tcp_slowtmr+0x2a8>)
 8007514:	f00c fafc 	bl	8013b10 <iprintf>
 8007518:	2000      	movs	r0, #0
 800751a:	f00c fbfb 	bl	8013d14 <fflush>
 800751e:	f00c fb40 	bl	8013ba2 <abort>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	2b0a      	cmp	r3, #10
 8007528:	d10b      	bne.n	8007542 <tcp_slowtmr+0x8e>
 800752a:	4b8a      	ldr	r3, [pc, #552]	; (8007754 <tcp_slowtmr+0x2a0>)
 800752c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007530:	498c      	ldr	r1, [pc, #560]	; (8007764 <tcp_slowtmr+0x2b0>)
 8007532:	488a      	ldr	r0, [pc, #552]	; (800775c <tcp_slowtmr+0x2a8>)
 8007534:	f00c faec 	bl	8013b10 <iprintf>
 8007538:	2000      	movs	r0, #0
 800753a:	f00c fbeb 	bl	8013d14 <fflush>
 800753e:	f00c fb30 	bl	8013ba2 <abort>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	7f9a      	ldrb	r2, [r3, #30]
 8007546:	4b81      	ldr	r3, [pc, #516]	; (800774c <tcp_slowtmr+0x298>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d105      	bne.n	800755a <tcp_slowtmr+0xa6>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007558:	e287      	b.n	8007a6a <tcp_slowtmr+0x5b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 800755a:	4b7c      	ldr	r3, [pc, #496]	; (800774c <tcp_slowtmr+0x298>)
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	7d1b      	ldrb	r3, [r3, #20]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d10a      	bne.n	800758c <tcp_slowtmr+0xd8>
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800757c:	2b05      	cmp	r3, #5
 800757e:	d905      	bls.n	800758c <tcp_slowtmr+0xd8>
      ++pcb_remove;
 8007580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007584:	3301      	adds	r3, #1
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800758a:	e129      	b.n	80077e0 <tcp_slowtmr+0x32c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007592:	2b0b      	cmp	r3, #11
 8007594:	d905      	bls.n	80075a2 <tcp_slowtmr+0xee>
      ++pcb_remove;
 8007596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759a:	3301      	adds	r3, #1
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075a0:	e11e      	b.n	80077e0 <tcp_slowtmr+0x32c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07f      	beq.n	80076ac <tcp_slowtmr+0x1f8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <tcp_slowtmr+0x118>
 80075b4:	4b67      	ldr	r3, [pc, #412]	; (8007754 <tcp_slowtmr+0x2a0>)
 80075b6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 80075ba:	496b      	ldr	r1, [pc, #428]	; (8007768 <tcp_slowtmr+0x2b4>)
 80075bc:	4867      	ldr	r0, [pc, #412]	; (800775c <tcp_slowtmr+0x2a8>)
 80075be:	f00c faa7 	bl	8013b10 <iprintf>
 80075c2:	2000      	movs	r0, #0
 80075c4:	f00c fba6 	bl	8013d14 <fflush>
 80075c8:	f00c faeb 	bl	8013ba2 <abort>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <tcp_slowtmr+0x138>
 80075d4:	4b5f      	ldr	r3, [pc, #380]	; (8007754 <tcp_slowtmr+0x2a0>)
 80075d6:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80075da:	4964      	ldr	r1, [pc, #400]	; (800776c <tcp_slowtmr+0x2b8>)
 80075dc:	485f      	ldr	r0, [pc, #380]	; (800775c <tcp_slowtmr+0x2a8>)
 80075de:	f00c fa97 	bl	8013b10 <iprintf>
 80075e2:	2000      	movs	r0, #0
 80075e4:	f00c fb96 	bl	8013d14 <fflush>
 80075e8:	f00c fadb 	bl	8013ba2 <abort>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80075f2:	2b0b      	cmp	r3, #11
 80075f4:	d905      	bls.n	8007602 <tcp_slowtmr+0x14e>
          ++pcb_remove; /* max probes reached */
 80075f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075fa:	3301      	adds	r3, #1
 80075fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007600:	e0ee      	b.n	80077e0 <tcp_slowtmr+0x32c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007608:	3b01      	subs	r3, #1
 800760a:	4a59      	ldr	r2, [pc, #356]	; (8007770 <tcp_slowtmr+0x2bc>)
 800760c:	5cd3      	ldrb	r3, [r2, r3]
 800760e:	77fb      	strb	r3, [r7, #31]
          if (pcb->persist_cnt < backoff_cnt) {
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007616:	7ffa      	ldrb	r2, [r7, #31]
 8007618:	429a      	cmp	r2, r3
 800761a:	d907      	bls.n	800762c <tcp_slowtmr+0x178>
            pcb->persist_cnt++;
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007622:	3301      	adds	r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007632:	7ffa      	ldrb	r2, [r7, #31]
 8007634:	429a      	cmp	r2, r3
 8007636:	f200 80d3 	bhi.w	80077e0 <tcp_slowtmr+0x32c>
            int next_slot = 1; /* increment timer to next slot */
 800763a:	2301      	movs	r3, #1
 800763c:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <tcp_slowtmr+0x1a6>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800764a:	f005 fd49 	bl	800d0e0 <tcp_zero_window_probe>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d014      	beq.n	800767e <tcp_slowtmr+0x1ca>
                next_slot = 0; /* try probe again with current slot */
 8007654:	2300      	movs	r3, #0
 8007656:	623b      	str	r3, [r7, #32]
 8007658:	e011      	b.n	800767e <tcp_slowtmr+0x1ca>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007660:	4619      	mov	r1, r3
 8007662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007664:	f004 fa8e 	bl	800bb84 <tcp_split_unsent_seg>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <tcp_slowtmr+0x1ca>
                if (tcp_output(pcb) == ERR_OK) {
 800766e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007670:	f004 fd56 	bl	800c120 <tcp_output>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <tcp_slowtmr+0x1ca>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80ad 	beq.w	80077e0 <tcp_slowtmr+0x32c>
              pcb->persist_cnt = 0;
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007694:	2b06      	cmp	r3, #6
 8007696:	f200 80a3 	bhi.w	80077e0 <tcp_slowtmr+0x32c>
                pcb->persist_backoff++;
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80076a0:	3301      	adds	r3, #1
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80076aa:	e099      	b.n	80077e0 <tcp_slowtmr+0x32c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	db0f      	blt.n	80076d6 <tcp_slowtmr+0x222>
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80076bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d008      	beq.n	80076d6 <tcp_slowtmr+0x222>
          ++pcb->rtime;
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3301      	adds	r3, #1
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	b21a      	sxth	r2, r3
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80076e2:	429a      	cmp	r2, r3
 80076e4:	db7c      	blt.n	80077e0 <tcp_slowtmr+0x32c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076e8:	f005 f85a 	bl	800c7a0 <tcp_rexmit_rto_prepare>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <tcp_slowtmr+0x24e>
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d172      	bne.n	80077e0 <tcp_slowtmr+0x32c>
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d06e      	beq.n	80077e0 <tcp_slowtmr+0x32c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	7d1b      	ldrb	r3, [r3, #20]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d03b      	beq.n	8007782 <tcp_slowtmr+0x2ce>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007710:	2b0c      	cmp	r3, #12
 8007712:	bf28      	it	cs
 8007714:	230c      	movcs	r3, #12
 8007716:	77bb      	strb	r3, [r7, #30]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800771e:	10db      	asrs	r3, r3, #3
 8007720:	b21b      	sxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800772a:	4413      	add	r3, r2
 800772c:	7fba      	ldrb	r2, [r7, #30]
 800772e:	4911      	ldr	r1, [pc, #68]	; (8007774 <tcp_slowtmr+0x2c0>)
 8007730:	5c8a      	ldrb	r2, [r1, r2]
 8007732:	4093      	lsls	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800773c:	4293      	cmp	r3, r2
 800773e:	dc1b      	bgt.n	8007778 <tcp_slowtmr+0x2c4>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	b21a      	sxth	r2, r3
 8007744:	e01a      	b.n	800777c <tcp_slowtmr+0x2c8>
 8007746:	bf00      	nop
 8007748:	200022c8 	.word	0x200022c8
 800774c:	200006fe 	.word	0x200006fe
 8007750:	200022c4 	.word	0x200022c4
 8007754:	080162b4 	.word	0x080162b4
 8007758:	080165e8 	.word	0x080165e8
 800775c:	080162e8 	.word	0x080162e8
 8007760:	08016614 	.word	0x08016614
 8007764:	08016640 	.word	0x08016640
 8007768:	0801666c 	.word	0x0801666c
 800776c:	080166a0 	.word	0x080166a0
 8007770:	08017c1c 	.word	0x08017c1c
 8007774:	08017c0c 	.word	0x08017c0c
 8007778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	2200      	movs	r2, #0
 8007786:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007794:	4293      	cmp	r3, r2
 8007796:	bf28      	it	cs
 8007798:	4613      	movcs	r3, r2
 800779a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800779c:	8afb      	ldrh	r3, [r7, #22]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d206      	bcs.n	80077c8 <tcp_slowtmr+0x314>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80077da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077dc:	f005 f85e 	bl	800c89c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
 80077e4:	2b06      	cmp	r3, #6
 80077e6:	d111      	bne.n	800780c <tcp_slowtmr+0x358>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	8b5b      	ldrh	r3, [r3, #26]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00b      	beq.n	800780c <tcp_slowtmr+0x358>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077f4:	4ba2      	ldr	r3, [pc, #648]	; (8007a80 <tcp_slowtmr+0x5cc>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b28      	cmp	r3, #40	; 0x28
 8007800:	d904      	bls.n	800780c <tcp_slowtmr+0x358>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007806:	3301      	adds	r3, #1
 8007808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	7a5b      	ldrb	r3, [r3, #9]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b00      	cmp	r3, #0
 8007816:	d04c      	beq.n	80078b2 <tcp_slowtmr+0x3fe>
        ((pcb->state == ESTABLISHED) ||
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800781c:	2b04      	cmp	r3, #4
 800781e:	d003      	beq.n	8007828 <tcp_slowtmr+0x374>
         (pcb->state == CLOSE_WAIT))) {
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007824:	2b07      	cmp	r3, #7
 8007826:	d144      	bne.n	80078b2 <tcp_slowtmr+0x3fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007828:	4b95      	ldr	r3, [pc, #596]	; (8007a80 <tcp_slowtmr+0x5cc>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007838:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800783c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007840:	4990      	ldr	r1, [pc, #576]	; (8007a84 <tcp_slowtmr+0x5d0>)
 8007842:	fba1 1303 	umull	r1, r3, r1, r3
 8007846:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007848:	429a      	cmp	r2, r3
 800784a:	d90a      	bls.n	8007862 <tcp_slowtmr+0x3ae>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800784c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007850:	3301      	adds	r3, #1
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800785a:	3301      	adds	r3, #1
 800785c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007860:	e027      	b.n	80078b2 <tcp_slowtmr+0x3fe>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007862:	4b87      	ldr	r3, [pc, #540]	; (8007a80 <tcp_slowtmr+0x5cc>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007878:	4618      	mov	r0, r3
 800787a:	4b83      	ldr	r3, [pc, #524]	; (8007a88 <tcp_slowtmr+0x5d4>)
 800787c:	fb03 f300 	mul.w	r3, r3, r0
 8007880:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007882:	4980      	ldr	r1, [pc, #512]	; (8007a84 <tcp_slowtmr+0x5d0>)
 8007884:	fba1 1303 	umull	r1, r3, r1, r3
 8007888:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800788a:	429a      	cmp	r2, r3
 800788c:	d911      	bls.n	80078b2 <tcp_slowtmr+0x3fe>
        err = tcp_keepalive(pcb);
 800788e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007890:	f005 fbe0 	bl	800d054 <tcp_keepalive>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800789a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d107      	bne.n	80078b2 <tcp_slowtmr+0x3fe>
          pcb->keep_cnt_sent++;
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80078a8:	3301      	adds	r3, #1
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <tcp_slowtmr+0x42a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80078ba:	4b71      	ldr	r3, [pc, #452]	; (8007a80 <tcp_slowtmr+0x5cc>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	1ad2      	subs	r2, r2, r3
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80078ca:	4619      	mov	r1, r3
 80078cc:	460b      	mov	r3, r1
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	440b      	add	r3, r1
 80078d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d302      	bcc.n	80078de <tcp_slowtmr+0x42a>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80078d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078da:	f000 ff11 	bl	8008700 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d10b      	bne.n	80078fe <tcp_slowtmr+0x44a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078e6:	4b66      	ldr	r3, [pc, #408]	; (8007a80 <tcp_slowtmr+0x5cc>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b28      	cmp	r3, #40	; 0x28
 80078f2:	d904      	bls.n	80078fe <tcp_slowtmr+0x44a>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80078f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f8:	3301      	adds	r3, #1
 80078fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	7d1b      	ldrb	r3, [r3, #20]
 8007902:	2b09      	cmp	r3, #9
 8007904:	d10b      	bne.n	800791e <tcp_slowtmr+0x46a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007906:	4b5e      	ldr	r3, [pc, #376]	; (8007a80 <tcp_slowtmr+0x5cc>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2bf0      	cmp	r3, #240	; 0xf0
 8007912:	d904      	bls.n	800791e <tcp_slowtmr+0x46a>
        ++pcb_remove;
 8007914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007918:	3301      	adds	r3, #1
 800791a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800791e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007922:	2b00      	cmp	r3, #0
 8007924:	d06a      	beq.n	80079fc <tcp_slowtmr+0x548>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800792e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007930:	f000 fd0c 	bl	800834c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d015      	beq.n	8007966 <tcp_slowtmr+0x4b2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800793a:	4b54      	ldr	r3, [pc, #336]	; (8007a8c <tcp_slowtmr+0x5d8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007940:	429a      	cmp	r2, r3
 8007942:	d10b      	bne.n	800795c <tcp_slowtmr+0x4a8>
 8007944:	4b52      	ldr	r3, [pc, #328]	; (8007a90 <tcp_slowtmr+0x5dc>)
 8007946:	f240 5271 	movw	r2, #1393	; 0x571
 800794a:	4952      	ldr	r1, [pc, #328]	; (8007a94 <tcp_slowtmr+0x5e0>)
 800794c:	4852      	ldr	r0, [pc, #328]	; (8007a98 <tcp_slowtmr+0x5e4>)
 800794e:	f00c f8df 	bl	8013b10 <iprintf>
 8007952:	2000      	movs	r0, #0
 8007954:	f00c f9de 	bl	8013d14 <fflush>
 8007958:	f00c f923 	bl	8013ba2 <abort>
        prev->next = pcb->next;
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e014      	b.n	8007990 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007966:	4b49      	ldr	r3, [pc, #292]	; (8007a8c <tcp_slowtmr+0x5d8>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d00b      	beq.n	8007988 <tcp_slowtmr+0x4d4>
 8007970:	4b47      	ldr	r3, [pc, #284]	; (8007a90 <tcp_slowtmr+0x5dc>)
 8007972:	f240 5275 	movw	r2, #1397	; 0x575
 8007976:	4949      	ldr	r1, [pc, #292]	; (8007a9c <tcp_slowtmr+0x5e8>)
 8007978:	4847      	ldr	r0, [pc, #284]	; (8007a98 <tcp_slowtmr+0x5e4>)
 800797a:	f00c f8c9 	bl	8013b10 <iprintf>
 800797e:	2000      	movs	r0, #0
 8007980:	f00c f9c8 	bl	8013d14 <fflush>
 8007984:	f00c f90d 	bl	8013ba2 <abort>
        tcp_active_pcbs = pcb->next;
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a3f      	ldr	r2, [pc, #252]	; (8007a8c <tcp_slowtmr+0x5d8>)
 800798e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007994:	2b00      	cmp	r3, #0
 8007996:	d013      	beq.n	80079c0 <tcp_slowtmr+0x50c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80079a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	3304      	adds	r3, #4
 80079a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a8:	8ad2      	ldrh	r2, [r2, #22]
 80079aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ac:	8b09      	ldrh	r1, [r1, #24]
 80079ae:	9102      	str	r1, [sp, #8]
 80079b0:	9201      	str	r2, [sp, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	462b      	mov	r3, r5
 80079b6:	4622      	mov	r2, r4
 80079b8:	4601      	mov	r1, r0
 80079ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079bc:	f005 fa98 	bl	800cef0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	7d1b      	ldrb	r3, [r3, #20]
 80079ca:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fe ff9e 	bl	8006918 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80079dc:	4b30      	ldr	r3, [pc, #192]	; (8007aa0 <tcp_slowtmr+0x5ec>)
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <tcp_slowtmr+0x53e>
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f06f 010c 	mvn.w	r1, #12
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80079f2:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <tcp_slowtmr+0x5ec>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d037      	beq.n	8007a6a <tcp_slowtmr+0x5b6>
        goto tcp_slowtmr_start;
 80079fa:	e56c      	b.n	80074d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	7f1b      	ldrb	r3, [r3, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	7f1a      	ldrb	r2, [r3, #28]
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	7f5b      	ldrb	r3, [r3, #29]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d325      	bcc.n	8007a6a <tcp_slowtmr+0x5b6>
        prev->polltmr = 0;
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	2200      	movs	r2, #0
 8007a22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007a24:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <tcp_slowtmr+0x5ec>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <tcp_slowtmr+0x598>
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3c:	6912      	ldr	r2, [r2, #16]
 8007a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007a4a:	e002      	b.n	8007a52 <tcp_slowtmr+0x59e>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <tcp_slowtmr+0x5ec>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d000      	beq.n	8007a5c <tcp_slowtmr+0x5a8>
          goto tcp_slowtmr_start;
 8007a5a:	e53c      	b.n	80074d6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <tcp_slowtmr+0x5b6>
          tcp_output(prev);
 8007a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a66:	f004 fb5b 	bl	800c120 <tcp_output>
  while (pcb != NULL) {
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f47f ad38 	bne.w	80074e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <tcp_slowtmr+0x5f0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007a7c:	e076      	b.n	8007b6c <tcp_slowtmr+0x6b8>
 8007a7e:	bf00      	nop
 8007a80:	200022c8 	.word	0x200022c8
 8007a84:	10624dd3 	.word	0x10624dd3
 8007a88:	000124f8 	.word	0x000124f8
 8007a8c:	200022c4 	.word	0x200022c4
 8007a90:	080162b4 	.word	0x080162b4
 8007a94:	080166d8 	.word	0x080166d8
 8007a98:	080162e8 	.word	0x080162e8
 8007a9c:	08016704 	.word	0x08016704
 8007aa0:	200022c0 	.word	0x200022c0
 8007aa4:	200022d4 	.word	0x200022d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	7d1b      	ldrb	r3, [r3, #20]
 8007aac:	2b0a      	cmp	r3, #10
 8007aae:	d00b      	beq.n	8007ac8 <tcp_slowtmr+0x614>
 8007ab0:	4b32      	ldr	r3, [pc, #200]	; (8007b7c <tcp_slowtmr+0x6c8>)
 8007ab2:	f240 52a5 	movw	r2, #1445	; 0x5a5
 8007ab6:	4932      	ldr	r1, [pc, #200]	; (8007b80 <tcp_slowtmr+0x6cc>)
 8007ab8:	4832      	ldr	r0, [pc, #200]	; (8007b84 <tcp_slowtmr+0x6d0>)
 8007aba:	f00c f829 	bl	8013b10 <iprintf>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f00c f928 	bl	8013d14 <fflush>
 8007ac4:	f00c f86d 	bl	8013ba2 <abort>
    pcb_remove = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ace:	4b2e      	ldr	r3, [pc, #184]	; (8007b88 <tcp_slowtmr+0x6d4>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2bf0      	cmp	r3, #240	; 0xf0
 8007ada:	d904      	bls.n	8007ae6 <tcp_slowtmr+0x632>
      ++pcb_remove;
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d039      	beq.n	8007b62 <tcp_slowtmr+0x6ae>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af0:	f000 fc2c 	bl	800834c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d015      	beq.n	8007b26 <tcp_slowtmr+0x672>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007afa:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <tcp_slowtmr+0x6d8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d10b      	bne.n	8007b1c <tcp_slowtmr+0x668>
 8007b04:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <tcp_slowtmr+0x6c8>)
 8007b06:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007b0a:	4921      	ldr	r1, [pc, #132]	; (8007b90 <tcp_slowtmr+0x6dc>)
 8007b0c:	481d      	ldr	r0, [pc, #116]	; (8007b84 <tcp_slowtmr+0x6d0>)
 8007b0e:	f00b ffff 	bl	8013b10 <iprintf>
 8007b12:	2000      	movs	r0, #0
 8007b14:	f00c f8fe 	bl	8013d14 <fflush>
 8007b18:	f00c f843 	bl	8013ba2 <abort>
        prev->next = pcb->next;
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	e014      	b.n	8007b50 <tcp_slowtmr+0x69c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007b26:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <tcp_slowtmr+0x6d8>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d00b      	beq.n	8007b48 <tcp_slowtmr+0x694>
 8007b30:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <tcp_slowtmr+0x6c8>)
 8007b32:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007b36:	4917      	ldr	r1, [pc, #92]	; (8007b94 <tcp_slowtmr+0x6e0>)
 8007b38:	4812      	ldr	r0, [pc, #72]	; (8007b84 <tcp_slowtmr+0x6d0>)
 8007b3a:	f00b ffe9 	bl	8013b10 <iprintf>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f00c f8e8 	bl	8013d14 <fflush>
 8007b44:	f00c f82d 	bl	8013ba2 <abort>
        tcp_tw_pcbs = pcb->next;
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4a0f      	ldr	r2, [pc, #60]	; (8007b8c <tcp_slowtmr+0x6d8>)
 8007b4e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007b5a:	6838      	ldr	r0, [r7, #0]
 8007b5c:	f7fe fedc 	bl	8006918 <tcp_free>
 8007b60:	e004      	b.n	8007b6c <tcp_slowtmr+0x6b8>
    } else {
      prev = pcb;
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d19a      	bne.n	8007aa8 <tcp_slowtmr+0x5f4>
    }
  }
}
 8007b72:	bf00      	nop
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	080162b4 	.word	0x080162b4
 8007b80:	08016730 	.word	0x08016730
 8007b84:	080162e8 	.word	0x080162e8
 8007b88:	200022c8 	.word	0x200022c8
 8007b8c:	200022d4 	.word	0x200022d4
 8007b90:	08016760 	.word	0x08016760
 8007b94:	08016788 	.word	0x08016788

08007b98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b9e:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <tcp_fasttmr+0xbc>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <tcp_fasttmr+0xbc>)
 8007ba8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007baa:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <tcp_fasttmr+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007bb0:	e048      	b.n	8007c44 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7f9a      	ldrb	r2, [r3, #30]
 8007bb6:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <tcp_fasttmr+0xbc>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d03f      	beq.n	8007c3e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007bbe:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <tcp_fasttmr+0xbc>)
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8b5b      	ldrh	r3, [r3, #26]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d010      	beq.n	8007bf4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8b5b      	ldrh	r3, [r3, #26]
 8007bd6:	f043 0302 	orr.w	r3, r3, #2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f004 fa9d 	bl	800c120 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	8b5b      	ldrh	r3, [r3, #26]
 8007bea:	f023 0303 	bic.w	r3, r3, #3
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8b5b      	ldrh	r3, [r3, #26]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8b5b      	ldrh	r3, [r3, #26]
 8007c04:	f023 0308 	bic.w	r3, r3, #8
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f838 	bl	8006c84 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007c22:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <tcp_fasttmr+0xc4>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f819 	bl	8007c60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <tcp_fasttmr+0xc4>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d000      	beq.n	8007c38 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007c36:	e7b8      	b.n	8007baa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e002      	b.n	8007c44 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1b3      	bne.n	8007bb2 <tcp_fasttmr+0x1a>
    }
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200006fe 	.word	0x200006fe
 8007c58:	200022c4 	.word	0x200022c4
 8007c5c:	200022c0 	.word	0x200022c0

08007c60 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007c60:	b590      	push	{r4, r7, lr}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <tcp_process_refused_data+0x22>
 8007c6e:	4b38      	ldr	r3, [pc, #224]	; (8007d50 <tcp_process_refused_data+0xf0>)
 8007c70:	f240 620d 	movw	r2, #1549	; 0x60d
 8007c74:	4937      	ldr	r1, [pc, #220]	; (8007d54 <tcp_process_refused_data+0xf4>)
 8007c76:	4838      	ldr	r0, [pc, #224]	; (8007d58 <tcp_process_refused_data+0xf8>)
 8007c78:	f7fa f923 	bl	8001ec2 <lwip_win32_platform_diag>
 8007c7c:	f06f 030f 	mvn.w	r3, #15
 8007c80:	e061      	b.n	8007d46 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c86:	7b5b      	ldrb	r3, [r3, #13]
 8007c88:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <tcp_process_refused_data+0x58>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6918      	ldr	r0, [r3, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	47a0      	blx	r4
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
 8007cb6:	e007      	b.n	8007cc8 <tcp_process_refused_data+0x68>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f000 f8aa 	bl	8007e18 <tcp_recv_null>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d12b      	bne.n	8007d28 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d034      	beq.n	8007d44 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cde:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d005      	beq.n	8007cf2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	3301      	adds	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <tcp_process_refused_data+0xb4>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6918      	ldr	r0, [r3, #16]
 8007d06:	2300      	movs	r3, #0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	47a0      	blx	r4
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	e001      	b.n	8007d18 <tcp_process_refused_data+0xb8>
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1c:	f113 0f0d 	cmn.w	r3, #13
 8007d20:	d110      	bne.n	8007d44 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8007d22:	f06f 030c 	mvn.w	r3, #12
 8007d26:	e00e      	b.n	8007d46 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8007d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2c:	f113 0f0d 	cmn.w	r3, #13
 8007d30:	d102      	bne.n	8007d38 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007d32:	f06f 030c 	mvn.w	r3, #12
 8007d36:	e006      	b.n	8007d46 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007d3e:	f06f 0304 	mvn.w	r3, #4
 8007d42:	e000      	b.n	8007d46 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd90      	pop	{r4, r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	080162b4 	.word	0x080162b4
 8007d54:	080167b0 	.word	0x080167b0
 8007d58:	080162e8 	.word	0x080162e8

08007d5c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007d64:	e007      	b.n	8007d76 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f809 	bl	8007d84 <tcp_seg_free>
    seg = next;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f4      	bne.n	8007d66 <tcp_segs_free+0xa>
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00c      	beq.n	8007dac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe f9a0 	bl	80060e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	2002      	movs	r0, #2
 8007da8:	f7fd fbc6 	bl	8005538 <memp_free>
  }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <tcp_seg_copy+0x26>
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <tcp_seg_copy+0x58>)
 8007dc4:	f240 6286 	movw	r2, #1670	; 0x686
 8007dc8:	4911      	ldr	r1, [pc, #68]	; (8007e10 <tcp_seg_copy+0x5c>)
 8007dca:	4812      	ldr	r0, [pc, #72]	; (8007e14 <tcp_seg_copy+0x60>)
 8007dcc:	f00b fea0 	bl	8013b10 <iprintf>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f00b ff9f 	bl	8013d14 <fflush>
 8007dd6:	f00b fee4 	bl	8013ba2 <abort>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007dda:	2002      	movs	r0, #2
 8007ddc:	f7fd fb3c 	bl	8005458 <memp_malloc>
 8007de0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <tcp_seg_copy+0x38>
    return NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e00a      	b.n	8007e02 <tcp_seg_copy+0x4e>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007dec:	2214      	movs	r2, #20
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f00c f88f 	bl	8013f14 <memcpy>
  pbuf_ref(cseg->p);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fa0c 	bl	8006218 <pbuf_ref>
  return cseg;
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	080162b4 	.word	0x080162b4
 8007e10:	080167f4 	.word	0x080167f4
 8007e14:	080162e8 	.word	0x080162e8

08007e18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <tcp_recv_null+0x28>
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <tcp_recv_null+0x60>)
 8007e2e:	f240 629c 	movw	r2, #1692	; 0x69c
 8007e32:	4912      	ldr	r1, [pc, #72]	; (8007e7c <tcp_recv_null+0x64>)
 8007e34:	4812      	ldr	r0, [pc, #72]	; (8007e80 <tcp_recv_null+0x68>)
 8007e36:	f7fa f844 	bl	8001ec2 <lwip_win32_platform_diag>
 8007e3a:	f06f 030f 	mvn.w	r3, #15
 8007e3e:	e016      	b.n	8007e6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	891b      	ldrh	r3, [r3, #8]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	68b8      	ldr	r0, [r7, #8]
 8007e4e:	f7ff f97d 	bl	800714c <tcp_recved>
    pbuf_free(p);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fe f946 	bl	80060e4 <pbuf_free>
 8007e58:	e008      	b.n	8007e6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007e62:	68b8      	ldr	r0, [r7, #8]
 8007e64:	f7fe ff7a 	bl	8006d5c <tcp_close>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	e000      	b.n	8007e6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	080162b4 	.word	0x080162b4
 8007e7c:	08016810 	.word	0x08016810
 8007e80:	080162e8 	.word	0x080162e8

08007e84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	db01      	blt.n	8007e9a <tcp_kill_prio+0x16>
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	e000      	b.n	8007e9c <tcp_kill_prio+0x18>
 8007e9a:	237f      	movs	r3, #127	; 0x7f
 8007e9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d034      	beq.n	8007f0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007eb2:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <tcp_kill_prio+0x94>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	e01f      	b.n	8007efa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	7d5b      	ldrb	r3, [r3, #21]
 8007ebe:	7afa      	ldrb	r2, [r7, #11]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d80c      	bhi.n	8007ede <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007ec8:	7afa      	ldrb	r2, [r7, #11]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d112      	bne.n	8007ef4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <tcp_kill_prio+0x98>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d30a      	bcc.n	8007ef4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <tcp_kill_prio+0x98>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	7d5b      	ldrb	r3, [r3, #21]
 8007ef2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1dc      	bne.n	8007eba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f7ff f816 	bl	8006f38 <tcp_abort>
 8007f0c:	e000      	b.n	8007f10 <tcp_kill_prio+0x8c>
    return;
 8007f0e:	bf00      	nop
  }
}
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	200022c4 	.word	0x200022c4
 8007f1c:	200022c8 	.word	0x200022c8

08007f20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d00e      	beq.n	8007f4e <tcp_kill_state+0x2e>
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	d00b      	beq.n	8007f4e <tcp_kill_state+0x2e>
 8007f36:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <tcp_kill_state+0x8c>)
 8007f38:	f240 62e1 	movw	r2, #1761	; 0x6e1
 8007f3c:	491c      	ldr	r1, [pc, #112]	; (8007fb0 <tcp_kill_state+0x90>)
 8007f3e:	481d      	ldr	r0, [pc, #116]	; (8007fb4 <tcp_kill_state+0x94>)
 8007f40:	f00b fde6 	bl	8013b10 <iprintf>
 8007f44:	2000      	movs	r0, #0
 8007f46:	f00b fee5 	bl	8013d14 <fflush>
 8007f4a:	f00b fe2a 	bl	8013ba2 <abort>

  inactivity = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <tcp_kill_state+0x98>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e017      	b.n	8007f8e <tcp_kill_state+0x6e>
    if (pcb->state == state) {
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	7d1b      	ldrb	r3, [r3, #20]
 8007f62:	79fa      	ldrb	r2, [r7, #7]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d10f      	bne.n	8007f88 <tcp_kill_state+0x68>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <tcp_kill_state+0x9c>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	1ad2      	subs	r2, r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d307      	bcc.n	8007f88 <tcp_kill_state+0x68>
        inactivity = tcp_ticks - pcb->tmr;
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <tcp_kill_state+0x9c>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e4      	bne.n	8007f5e <tcp_kill_state+0x3e>
      }
    }
  }
  if (inactive != NULL) {
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <tcp_kill_state+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6938      	ldr	r0, [r7, #16]
 8007f9e:	f7fe ff09 	bl	8006db4 <tcp_abandon>
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	080162b4 	.word	0x080162b4
 8007fb0:	0801682c 	.word	0x0801682c
 8007fb4:	080162e8 	.word	0x080162e8
 8007fb8:	200022c4 	.word	0x200022c4
 8007fbc:	200022c8 	.word	0x200022c8

08007fc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <tcp_kill_timewait+0x58>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e012      	b.n	8007ffc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <tcp_kill_timewait+0x5c>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d307      	bcc.n	8007ff6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <tcp_kill_timewait+0x5c>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e9      	bne.n	8007fd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008008:	68b8      	ldr	r0, [r7, #8]
 800800a:	f7fe ff95 	bl	8006f38 <tcp_abort>
  }
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	200022d4 	.word	0x200022d4
 800801c:	200022c8 	.word	0x200022c8

08008020 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <tcp_handle_closepend+0x48>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800802c:	e014      	b.n	8008058 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8b5b      	ldrh	r3, [r3, #26]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d009      	beq.n	8008054 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8b5b      	ldrh	r3, [r3, #26]
 8008044:	f023 0308 	bic.w	r3, r3, #8
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fe fe18 	bl	8006c84 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e7      	bne.n	800802e <tcp_handle_closepend+0xe>
  }
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	200022c4 	.word	0x200022c4

0800806c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008076:	2000      	movs	r0, #0
 8008078:	f7fd f9ee 	bl	8005458 <memp_malloc>
 800807c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d14a      	bne.n	800811a <tcp_alloc+0xae>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008084:	f7ff ffcc 	bl	8008020 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008088:	f7ff ff9a 	bl	8007fc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800808c:	2000      	movs	r0, #0
 800808e:	f7fd f9e3 	bl	8005458 <memp_malloc>
 8008092:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d136      	bne.n	8008108 <tcp_alloc+0x9c>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800809a:	2009      	movs	r0, #9
 800809c:	f7ff ff40 	bl	8007f20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080a0:	2000      	movs	r0, #0
 80080a2:	f7fd f9d9 	bl	8005458 <memp_malloc>
 80080a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d123      	bne.n	80080f6 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80080ae:	2008      	movs	r0, #8
 80080b0:	f7ff ff36 	bl	8007f20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7fd f9cf 	bl	8005458 <memp_malloc>
 80080ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d110      	bne.n	80080e4 <tcp_alloc+0x78>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fedd 	bl	8007e84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7fd f9c4 	bl	8005458 <memp_malloc>
 80080d0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <tcp_alloc+0x78>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80080d8:	4b34      	ldr	r3, [pc, #208]	; (80081ac <tcp_alloc+0x140>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	889a      	ldrh	r2, [r3, #4]
 80080de:	3a01      	subs	r2, #1
 80080e0:	b292      	uxth	r2, r2
 80080e2:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <tcp_alloc+0x140>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	889a      	ldrh	r2, [r3, #4]
 80080f0:	3a01      	subs	r2, #1
 80080f2:	b292      	uxth	r2, r2
 80080f4:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <tcp_alloc+0x9c>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80080fc:	4b2b      	ldr	r3, [pc, #172]	; (80081ac <tcp_alloc+0x140>)
 80080fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008100:	889a      	ldrh	r2, [r3, #4]
 8008102:	3a01      	subs	r2, #1
 8008104:	b292      	uxth	r2, r2
 8008106:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <tcp_alloc+0xae>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800810e:	4b27      	ldr	r3, [pc, #156]	; (80081ac <tcp_alloc+0x140>)
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	889a      	ldrh	r2, [r3, #4]
 8008114:	3a01      	subs	r2, #1
 8008116:	b292      	uxth	r2, r2
 8008118:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d03f      	beq.n	80081a0 <tcp_alloc+0x134>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008120:	229c      	movs	r2, #156	; 0x9c
 8008122:	2100      	movs	r1, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f00b ff1a 	bl	8013f5e <memset>
    pcb->prio = prio;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	79fa      	ldrb	r2, [r7, #7]
 800812e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f640 3268 	movw	r2, #2920	; 0xb68
 8008136:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008156:	865a      	strh	r2, [r3, #50]	; 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2206      	movs	r2, #6
 800815c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2206      	movs	r2, #6
 8008164:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008176:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <tcp_alloc+0x144>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800817e:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <tcp_alloc+0x148>)
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f640 3268 	movw	r2, #2920	; 0xb68
 800818c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a09      	ldr	r2, [pc, #36]	; (80081b8 <tcp_alloc+0x14c>)
 8008194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a08      	ldr	r2, [pc, #32]	; (80081bc <tcp_alloc+0x150>)
 800819c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 80081a0:	68fb      	ldr	r3, [r7, #12]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	2000221c 	.word	0x2000221c
 80081b0:	200022c8 	.word	0x200022c8
 80081b4:	200006fe 	.word	0x200006fe
 80081b8:	08007e19 	.word	0x08007e19
 80081bc:	006ddd00 	.word	0x006ddd00

080081c0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80081ca:	2040      	movs	r0, #64	; 0x40
 80081cc:	f7ff ff4e 	bl	800806c <tcp_alloc>
 80081d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	611a      	str	r2, [r3, #16]
  }
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d013      	beq.n	8008238 <tcp_recv+0x38>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7d1b      	ldrb	r3, [r3, #20]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d10b      	bne.n	8008230 <tcp_recv+0x30>
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <tcp_recv+0x40>)
 800821a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800821e:	4909      	ldr	r1, [pc, #36]	; (8008244 <tcp_recv+0x44>)
 8008220:	4809      	ldr	r0, [pc, #36]	; (8008248 <tcp_recv+0x48>)
 8008222:	f00b fc75 	bl	8013b10 <iprintf>
 8008226:	2000      	movs	r0, #0
 8008228:	f00b fd74 	bl	8013d14 <fflush>
 800822c:	f00b fcb9 	bl	8013ba2 <abort>
    pcb->recv = recv;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	080162b4 	.word	0x080162b4
 8008244:	0801683c 	.word	0x0801683c
 8008248:	080162e8 	.word	0x080162e8

0800824c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d013      	beq.n	8008284 <tcp_sent+0x38>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7d1b      	ldrb	r3, [r3, #20]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d10b      	bne.n	800827c <tcp_sent+0x30>
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <tcp_sent+0x40>)
 8008266:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800826a:	4909      	ldr	r1, [pc, #36]	; (8008290 <tcp_sent+0x44>)
 800826c:	4809      	ldr	r0, [pc, #36]	; (8008294 <tcp_sent+0x48>)
 800826e:	f00b fc4f 	bl	8013b10 <iprintf>
 8008272:	2000      	movs	r0, #0
 8008274:	f00b fd4e 	bl	8013d14 <fflush>
 8008278:	f00b fc93 	bl	8013ba2 <abort>
    pcb->sent = sent;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	080162b4 	.word	0x080162b4
 8008290:	08016864 	.word	0x08016864
 8008294:	080162e8 	.word	0x080162e8

08008298 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d013      	beq.n	80082d0 <tcp_err+0x38>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10b      	bne.n	80082c8 <tcp_err+0x30>
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <tcp_err+0x40>)
 80082b2:	f640 0216 	movw	r2, #2070	; 0x816
 80082b6:	4909      	ldr	r1, [pc, #36]	; (80082dc <tcp_err+0x44>)
 80082b8:	4809      	ldr	r0, [pc, #36]	; (80082e0 <tcp_err+0x48>)
 80082ba:	f00b fc29 	bl	8013b10 <iprintf>
 80082be:	2000      	movs	r0, #0
 80082c0:	f00b fd28 	bl	8013d14 <fflush>
 80082c4:	f00b fc6d 	bl	8013ba2 <abort>
    pcb->errf = err;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	080162b4 	.word	0x080162b4
 80082dc:	0801688c 	.word	0x0801688c
 80082e0:	080162e8 	.word	0x080162e8

080082e4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d107      	bne.n	8008308 <tcp_poll+0x24>
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <tcp_poll+0x58>)
 80082fa:	f640 0247 	movw	r2, #2119	; 0x847
 80082fe:	4910      	ldr	r1, [pc, #64]	; (8008340 <tcp_poll+0x5c>)
 8008300:	4810      	ldr	r0, [pc, #64]	; (8008344 <tcp_poll+0x60>)
 8008302:	f7f9 fdde 	bl	8001ec2 <lwip_win32_platform_diag>
 8008306:	e016      	b.n	8008336 <tcp_poll+0x52>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	7d1b      	ldrb	r3, [r3, #20]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10b      	bne.n	8008328 <tcp_poll+0x44>
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <tcp_poll+0x58>)
 8008312:	f640 0248 	movw	r2, #2120	; 0x848
 8008316:	490c      	ldr	r1, [pc, #48]	; (8008348 <tcp_poll+0x64>)
 8008318:	480a      	ldr	r0, [pc, #40]	; (8008344 <tcp_poll+0x60>)
 800831a:	f00b fbf9 	bl	8013b10 <iprintf>
 800831e:	2000      	movs	r0, #0
 8008320:	f00b fcf8 	bl	8013d14 <fflush>
 8008324:	f00b fc3d 	bl	8013ba2 <abort>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	79fa      	ldrb	r2, [r7, #7]
 8008334:	775a      	strb	r2, [r3, #29]
}
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	080162b4 	.word	0x080162b4
 8008340:	080168b4 	.word	0x080168b4
 8008344:	080162e8 	.word	0x080162e8
 8008348:	080168cc 	.word	0x080168cc

0800834c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d107      	bne.n	800836a <tcp_pcb_purge+0x1e>
 800835a:	4b21      	ldr	r3, [pc, #132]	; (80083e0 <tcp_pcb_purge+0x94>)
 800835c:	f640 025b 	movw	r2, #2139	; 0x85b
 8008360:	4920      	ldr	r1, [pc, #128]	; (80083e4 <tcp_pcb_purge+0x98>)
 8008362:	4821      	ldr	r0, [pc, #132]	; (80083e8 <tcp_pcb_purge+0x9c>)
 8008364:	f7f9 fdad 	bl	8001ec2 <lwip_win32_platform_diag>
 8008368:	e037      	b.n	80083da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7d1b      	ldrb	r3, [r3, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d033      	beq.n	80083da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008376:	2b0a      	cmp	r3, #10
 8008378:	d02f      	beq.n	80083da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800837e:	2b01      	cmp	r3, #1
 8008380:	d02b      	beq.n	80083da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fea8 	bl	80060e4 <pbuf_free>
      pcb->refused_data = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9ac 	bl	8008700 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fcd1 	bl	8007d5c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff fccc 	bl	8007d5c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	080162b4 	.word	0x080162b4
 80083e4:	080168ec 	.word	0x080168ec
 80083e8:	080162e8 	.word	0x080162e8

080083ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <tcp_pcb_remove+0x28>
 80083fc:	4b4a      	ldr	r3, [pc, #296]	; (8008528 <tcp_pcb_remove+0x13c>)
 80083fe:	f640 028d 	movw	r2, #2189	; 0x88d
 8008402:	494a      	ldr	r1, [pc, #296]	; (800852c <tcp_pcb_remove+0x140>)
 8008404:	484a      	ldr	r0, [pc, #296]	; (8008530 <tcp_pcb_remove+0x144>)
 8008406:	f00b fb83 	bl	8013b10 <iprintf>
 800840a:	2000      	movs	r0, #0
 800840c:	f00b fc82 	bl	8013d14 <fflush>
 8008410:	f00b fbc7 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <tcp_pcb_remove+0x46>
 800841a:	4b43      	ldr	r3, [pc, #268]	; (8008528 <tcp_pcb_remove+0x13c>)
 800841c:	f640 028e 	movw	r2, #2190	; 0x88e
 8008420:	4944      	ldr	r1, [pc, #272]	; (8008534 <tcp_pcb_remove+0x148>)
 8008422:	4843      	ldr	r0, [pc, #268]	; (8008530 <tcp_pcb_remove+0x144>)
 8008424:	f00b fb74 	bl	8013b10 <iprintf>
 8008428:	2000      	movs	r0, #0
 800842a:	f00b fc73 	bl	8013d14 <fflush>
 800842e:	f00b fbb8 	bl	8013ba2 <abort>

  TCP_RMV(pcblist, pcb);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d105      	bne.n	8008448 <tcp_pcb_remove+0x5c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e013      	b.n	8008470 <tcp_pcb_remove+0x84>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e00c      	b.n	800846a <tcp_pcb_remove+0x7e>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d104      	bne.n	8008464 <tcp_pcb_remove+0x78>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	e005      	b.n	8008470 <tcp_pcb_remove+0x84>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ef      	bne.n	8008450 <tcp_pcb_remove+0x64>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008476:	6838      	ldr	r0, [r7, #0]
 8008478:	f7ff ff68 	bl	800834c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	7d1b      	ldrb	r3, [r3, #20]
 8008480:	2b0a      	cmp	r3, #10
 8008482:	d013      	beq.n	80084ac <tcp_pcb_remove+0xc0>
      (pcb->state != LISTEN) &&
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008488:	2b01      	cmp	r3, #1
 800848a:	d00f      	beq.n	80084ac <tcp_pcb_remove+0xc0>
      (pcb->flags & TF_ACK_DELAY)) {
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	8b5b      	ldrh	r3, [r3, #26]
 8008490:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <tcp_pcb_remove+0xc0>
    tcp_ack_now(pcb);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	8b5b      	ldrh	r3, [r3, #26]
 800849c:	f043 0302 	orr.w	r3, r3, #2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80084a6:	6838      	ldr	r0, [r7, #0]
 80084a8:	f003 fe3a 	bl	800c120 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	7d1b      	ldrb	r3, [r3, #20]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d02f      	beq.n	8008514 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00b      	beq.n	80084d4 <tcp_pcb_remove+0xe8>
 80084bc:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <tcp_pcb_remove+0x13c>)
 80084be:	f640 029d 	movw	r2, #2205	; 0x89d
 80084c2:	491d      	ldr	r1, [pc, #116]	; (8008538 <tcp_pcb_remove+0x14c>)
 80084c4:	481a      	ldr	r0, [pc, #104]	; (8008530 <tcp_pcb_remove+0x144>)
 80084c6:	f00b fb23 	bl	8013b10 <iprintf>
 80084ca:	2000      	movs	r0, #0
 80084cc:	f00b fc22 	bl	8013d14 <fflush>
 80084d0:	f00b fb67 	bl	8013ba2 <abort>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <tcp_pcb_remove+0x108>
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <tcp_pcb_remove+0x13c>)
 80084de:	f640 029e 	movw	r2, #2206	; 0x89e
 80084e2:	4916      	ldr	r1, [pc, #88]	; (800853c <tcp_pcb_remove+0x150>)
 80084e4:	4812      	ldr	r0, [pc, #72]	; (8008530 <tcp_pcb_remove+0x144>)
 80084e6:	f00b fb13 	bl	8013b10 <iprintf>
 80084ea:	2000      	movs	r0, #0
 80084ec:	f00b fc12 	bl	8013d14 <fflush>
 80084f0:	f00b fb57 	bl	8013ba2 <abort>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <tcp_pcb_remove+0x128>
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <tcp_pcb_remove+0x13c>)
 80084fe:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
 8008502:	490f      	ldr	r1, [pc, #60]	; (8008540 <tcp_pcb_remove+0x154>)
 8008504:	480a      	ldr	r0, [pc, #40]	; (8008530 <tcp_pcb_remove+0x144>)
 8008506:	f00b fb03 	bl	8013b10 <iprintf>
 800850a:	2000      	movs	r0, #0
 800850c:	f00b fc02 	bl	8013d14 <fflush>
 8008510:	f00b fb47 	bl	8013ba2 <abort>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2200      	movs	r2, #0
 8008518:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	080162b4 	.word	0x080162b4
 800852c:	08016908 	.word	0x08016908
 8008530:	080162e8 	.word	0x080162e8
 8008534:	08016924 	.word	0x08016924
 8008538:	08016944 	.word	0x08016944
 800853c:	0801695c 	.word	0x0801695c
 8008540:	08016978 	.word	0x08016978

08008544 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <tcp_next_iss+0x26>
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <tcp_next_iss+0x40>)
 8008554:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8008558:	490b      	ldr	r1, [pc, #44]	; (8008588 <tcp_next_iss+0x44>)
 800855a:	480c      	ldr	r0, [pc, #48]	; (800858c <tcp_next_iss+0x48>)
 800855c:	f00b fad8 	bl	8013b10 <iprintf>
 8008560:	2000      	movs	r0, #0
 8008562:	f00b fbd7 	bl	8013d14 <fflush>
 8008566:	f00b fb1c 	bl	8013ba2 <abort>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <tcp_next_iss+0x4c>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <tcp_next_iss+0x50>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4413      	add	r3, r2
 8008574:	4a06      	ldr	r2, [pc, #24]	; (8008590 <tcp_next_iss+0x4c>)
 8008576:	6013      	str	r3, [r2, #0]
  return iss;
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <tcp_next_iss+0x4c>)
 800857a:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	080162b4 	.word	0x080162b4
 8008588:	08016990 	.word	0x08016990
 800858c:	080162e8 	.word	0x080162e8
 8008590:	2000000c 	.word	0x2000000c
 8008594:	200022c8 	.word	0x200022c8

08008598 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <tcp_eff_send_mss_netif+0x2c>
 80085ac:	4b17      	ldr	r3, [pc, #92]	; (800860c <tcp_eff_send_mss_netif+0x74>)
 80085ae:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80085b2:	4917      	ldr	r1, [pc, #92]	; (8008610 <tcp_eff_send_mss_netif+0x78>)
 80085b4:	4817      	ldr	r0, [pc, #92]	; (8008614 <tcp_eff_send_mss_netif+0x7c>)
 80085b6:	f00b faab 	bl	8013b10 <iprintf>
 80085ba:	2000      	movs	r0, #0
 80085bc:	f00b fbaa 	bl	8013d14 <fflush>
 80085c0:	f00b faef 	bl	8013ba2 <abort>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <tcp_eff_send_mss_netif+0x36>
      return sendmss;
 80085ca:	89fb      	ldrh	r3, [r7, #14]
 80085cc:	e019      	b.n	8008602 <tcp_eff_send_mss_netif+0x6a>
    }
    mtu = outif->mtu;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	8c1b      	ldrh	r3, [r3, #32]
 80085d2:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80085d4:	8afb      	ldrh	r3, [r7, #22]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d012      	beq.n	8008600 <tcp_eff_send_mss_netif+0x68>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80085da:	2328      	movs	r3, #40	; 0x28
 80085dc:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80085de:	8afa      	ldrh	r2, [r7, #22]
 80085e0:	8abb      	ldrh	r3, [r7, #20]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d904      	bls.n	80085f0 <tcp_eff_send_mss_netif+0x58>
 80085e6:	8afa      	ldrh	r2, [r7, #22]
 80085e8:	8abb      	ldrh	r3, [r7, #20]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	e000      	b.n	80085f2 <tcp_eff_send_mss_netif+0x5a>
 80085f0:	2300      	movs	r3, #0
 80085f2:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80085f4:	8a7a      	ldrh	r2, [r7, #18]
 80085f6:	89fb      	ldrh	r3, [r7, #14]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	bf28      	it	cs
 80085fc:	4613      	movcs	r3, r2
 80085fe:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008600:	89fb      	ldrh	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	080162b4 	.word	0x080162b4
 8008610:	080169ac 	.word	0x080169ac
 8008614:	080162e8 	.word	0x080162e8

08008618 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11d      	bne.n	8008668 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800862c:	4b12      	ldr	r3, [pc, #72]	; (8008678 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800862e:	f640 120a 	movw	r2, #2314	; 0x90a
 8008632:	4912      	ldr	r1, [pc, #72]	; (800867c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8008634:	4812      	ldr	r0, [pc, #72]	; (8008680 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8008636:	f00b fa6b 	bl	8013b10 <iprintf>
 800863a:	2000      	movs	r0, #0
 800863c:	f00b fb6a 	bl	8013d14 <fflush>
 8008640:	f00b faaf 	bl	8013ba2 <abort>

  while (pcb != NULL) {
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d108      	bne.n	8008662 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7fe fc6e 	bl	8006f38 <tcp_abort>
      pcb = next;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e002      	b.n	8008668 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1ea      	bne.n	8008644 <tcp_netif_ip_addr_changed_pcblist+0x2c>
    }
  }
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	080162b4 	.word	0x080162b4
 800867c:	080169d4 	.word	0x080169d4
 8008680:	080162e8 	.word	0x080162e8

08008684 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d02a      	beq.n	80086ea <tcp_netif_ip_addr_changed+0x66>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d026      	beq.n	80086ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800869c:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <tcp_netif_ip_addr_changed+0x70>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ffb8 	bl	8008618 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80086a8:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <tcp_netif_ip_addr_changed+0x74>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ffb2 	bl	8008618 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <tcp_netif_ip_addr_changed+0x66>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d013      	beq.n	80086ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <tcp_netif_ip_addr_changed+0x78>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e00c      	b.n	80086e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d103      	bne.n	80086de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1ef      	bne.n	80086ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200022c4 	.word	0x200022c4
 80086f8:	200022d0 	.word	0x200022d0
 80086fc:	200022cc 	.word	0x200022cc

08008700 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fb21 	bl	8007d5c <tcp_segs_free>
    pcb->ooseq = NULL;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008728:	b590      	push	{r4, r7, lr}
 800872a:	b08d      	sub	sp, #52	; 0x34
 800872c:	af04      	add	r7, sp, #16
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <tcp_input+0x26>
 8008738:	4b7b      	ldr	r3, [pc, #492]	; (8008928 <tcp_input+0x200>)
 800873a:	2283      	movs	r2, #131	; 0x83
 800873c:	497b      	ldr	r1, [pc, #492]	; (800892c <tcp_input+0x204>)
 800873e:	487c      	ldr	r0, [pc, #496]	; (8008930 <tcp_input+0x208>)
 8008740:	f00b f9e6 	bl	8013b10 <iprintf>
 8008744:	2000      	movs	r0, #0
 8008746:	f00b fae5 	bl	8013d14 <fflush>
 800874a:	f00b fa2a 	bl	8013ba2 <abort>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800874e:	4b79      	ldr	r3, [pc, #484]	; (8008934 <tcp_input+0x20c>)
 8008750:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008754:	3301      	adds	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	4b76      	ldr	r3, [pc, #472]	; (8008934 <tcp_input+0x20c>)
 800875a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	4a75      	ldr	r2, [pc, #468]	; (8008938 <tcp_input+0x210>)
 8008764:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	895b      	ldrh	r3, [r3, #10]
 800876a:	2b13      	cmp	r3, #19
 800876c:	d809      	bhi.n	8008782 <tcp_input+0x5a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800876e:	4b71      	ldr	r3, [pc, #452]	; (8008934 <tcp_input+0x20c>)
 8008770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008774:	3301      	adds	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	4b6e      	ldr	r3, [pc, #440]	; (8008934 <tcp_input+0x20c>)
 800877a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 800877e:	f000 bc6a 	b.w	8009056 <tcp_input+0x92e>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008782:	4b6e      	ldr	r3, [pc, #440]	; (800893c <tcp_input+0x214>)
 8008784:	695a      	ldr	r2, [r3, #20]
 8008786:	4b6d      	ldr	r3, [pc, #436]	; (800893c <tcp_input+0x214>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fc f849 	bl	8004824 <ip4_addr_isbroadcast_u32>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <tcp_input+0x7c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008798:	4b68      	ldr	r3, [pc, #416]	; (800893c <tcp_input+0x214>)
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80087a0:	2be0      	cmp	r3, #224	; 0xe0
 80087a2:	d109      	bne.n	80087b8 <tcp_input+0x90>
    TCP_STATS_INC(tcp.proterr);
 80087a4:	4b63      	ldr	r3, [pc, #396]	; (8008934 <tcp_input+0x20c>)
 80087a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087aa:	3301      	adds	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	4b61      	ldr	r3, [pc, #388]	; (8008934 <tcp_input+0x20c>)
 80087b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    goto dropped;
 80087b4:	f000 bc4f 	b.w	8009056 <tcp_input+0x92e>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	891a      	ldrh	r2, [r3, #8]
 80087bc:	4b60      	ldr	r3, [pc, #384]	; (8008940 <tcp_input+0x218>)
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	4b60      	ldr	r3, [pc, #384]	; (8008944 <tcp_input+0x21c>)
 80087c2:	2106      	movs	r1, #6
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fb fcad 	bl	8004124 <ip_chksum_pseudo>
 80087ca:	4603      	mov	r3, r0
 80087cc:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80087ce:	8a3b      	ldrh	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <tcp_input+0xc0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 80087d4:	4b57      	ldr	r3, [pc, #348]	; (8008934 <tcp_input+0x20c>)
 80087d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087da:	3301      	adds	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	4b55      	ldr	r3, [pc, #340]	; (8008934 <tcp_input+0x20c>)
 80087e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      goto dropped;
 80087e4:	f000 bc37 	b.w	8009056 <tcp_input+0x92e>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80087e8:	4b53      	ldr	r3, [pc, #332]	; (8008938 <tcp_input+0x210>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	899b      	ldrh	r3, [r3, #12]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fb fb65 	bl	8003ec0 <lwip_htons>
 80087f6:	4603      	mov	r3, r0
 80087f8:	0b1b      	lsrs	r3, r3, #12
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b13      	cmp	r3, #19
 8008806:	d905      	bls.n	8008814 <tcp_input+0xec>
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	891b      	ldrh	r3, [r3, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d909      	bls.n	8008828 <tcp_input+0x100>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8008814:	4b47      	ldr	r3, [pc, #284]	; (8008934 <tcp_input+0x20c>)
 8008816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800881a:	3301      	adds	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	4b45      	ldr	r3, [pc, #276]	; (8008934 <tcp_input+0x20c>)
 8008820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    goto dropped;
 8008824:	f000 bc17 	b.w	8009056 <tcp_input+0x92e>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b14      	subs	r3, #20
 800882e:	b29a      	uxth	r2, r3
 8008830:	4b45      	ldr	r3, [pc, #276]	; (8008948 <tcp_input+0x220>)
 8008832:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008834:	4b45      	ldr	r3, [pc, #276]	; (800894c <tcp_input+0x224>)
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	895a      	ldrh	r2, [r3, #10]
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	b29b      	uxth	r3, r3
 8008842:	429a      	cmp	r2, r3
 8008844:	d309      	bcc.n	800885a <tcp_input+0x132>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <tcp_input+0x220>)
 8008848:	881a      	ldrh	r2, [r3, #0]
 800884a:	4b41      	ldr	r3, [pc, #260]	; (8008950 <tcp_input+0x228>)
 800884c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fd fbf0 	bl	8006038 <pbuf_remove_header>
 8008858:	e082      	b.n	8008960 <tcp_input+0x238>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <tcp_input+0x150>
 8008862:	4b31      	ldr	r3, [pc, #196]	; (8008928 <tcp_input+0x200>)
 8008864:	22c2      	movs	r2, #194	; 0xc2
 8008866:	493b      	ldr	r1, [pc, #236]	; (8008954 <tcp_input+0x22c>)
 8008868:	4831      	ldr	r0, [pc, #196]	; (8008930 <tcp_input+0x208>)
 800886a:	f00b f951 	bl	8013b10 <iprintf>
 800886e:	2000      	movs	r0, #0
 8008870:	f00b fa50 	bl	8013d14 <fflush>
 8008874:	f00b f995 	bl	8013ba2 <abort>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008878:	2114      	movs	r1, #20
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fd fbdc 	bl	8006038 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	895a      	ldrh	r2, [r3, #10]
 8008884:	4b32      	ldr	r3, [pc, #200]	; (8008950 <tcp_input+0x228>)
 8008886:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008888:	4b2f      	ldr	r3, [pc, #188]	; (8008948 <tcp_input+0x220>)
 800888a:	881a      	ldrh	r2, [r3, #0]
 800888c:	4b30      	ldr	r3, [pc, #192]	; (8008950 <tcp_input+0x228>)
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008894:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <tcp_input+0x228>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fd fbcc 	bl	8006038 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	895b      	ldrh	r3, [r3, #10]
 80088a6:	89ba      	ldrh	r2, [r7, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d908      	bls.n	80088be <tcp_input+0x196>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80088ac:	4b21      	ldr	r3, [pc, #132]	; (8008934 <tcp_input+0x20c>)
 80088ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088b2:	3301      	adds	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <tcp_input+0x20c>)
 80088b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 80088bc:	e3cb      	b.n	8009056 <tcp_input+0x92e>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	4a21      	ldr	r2, [pc, #132]	; (800894c <tcp_input+0x224>)
 80088c6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	89ba      	ldrh	r2, [r7, #12]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fd fbb1 	bl	8006038 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	891a      	ldrh	r2, [r3, #8]
 80088da:	89bb      	ldrh	r3, [r7, #12]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	895b      	ldrh	r3, [r3, #10]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <tcp_input+0x1da>
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <tcp_input+0x200>)
 80088ee:	22df      	movs	r2, #223	; 0xdf
 80088f0:	4919      	ldr	r1, [pc, #100]	; (8008958 <tcp_input+0x230>)
 80088f2:	480f      	ldr	r0, [pc, #60]	; (8008930 <tcp_input+0x208>)
 80088f4:	f00b f90c 	bl	8013b10 <iprintf>
 80088f8:	2000      	movs	r0, #0
 80088fa:	f00b fa0b 	bl	8013d14 <fflush>
 80088fe:	f00b f950 	bl	8013ba2 <abort>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	891a      	ldrh	r2, [r3, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	891b      	ldrh	r3, [r3, #8]
 800890c:	429a      	cmp	r2, r3
 800890e:	d027      	beq.n	8008960 <tcp_input+0x238>
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <tcp_input+0x200>)
 8008912:	22e0      	movs	r2, #224	; 0xe0
 8008914:	4911      	ldr	r1, [pc, #68]	; (800895c <tcp_input+0x234>)
 8008916:	4806      	ldr	r0, [pc, #24]	; (8008930 <tcp_input+0x208>)
 8008918:	f00b f8fa 	bl	8013b10 <iprintf>
 800891c:	2000      	movs	r0, #0
 800891e:	f00b f9f9 	bl	8013d14 <fflush>
 8008922:	f00b f93e 	bl	8013ba2 <abort>
 8008926:	bf00      	nop
 8008928:	08016a08 	.word	0x08016a08
 800892c:	08016a2c 	.word	0x08016a2c
 8008930:	08016a44 	.word	0x08016a44
 8008934:	2000221c 	.word	0x2000221c
 8008938:	20000714 	.word	0x20000714
 800893c:	20000880 	.word	0x20000880
 8008940:	20000894 	.word	0x20000894
 8008944:	20000890 	.word	0x20000890
 8008948:	20000718 	.word	0x20000718
 800894c:	2000071c 	.word	0x2000071c
 8008950:	2000071a 	.word	0x2000071a
 8008954:	08016a6c 	.word	0x08016a6c
 8008958:	08016a7c 	.word	0x08016a7c
 800895c:	08016a88 	.word	0x08016a88
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008960:	4b91      	ldr	r3, [pc, #580]	; (8008ba8 <tcp_input+0x480>)
 8008962:	681c      	ldr	r4, [r3, #0]
 8008964:	4b90      	ldr	r3, [pc, #576]	; (8008ba8 <tcp_input+0x480>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	4618      	mov	r0, r3
 800896e:	f7fb faa7 	bl	8003ec0 <lwip_htons>
 8008972:	4603      	mov	r3, r0
 8008974:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008976:	4b8c      	ldr	r3, [pc, #560]	; (8008ba8 <tcp_input+0x480>)
 8008978:	681c      	ldr	r4, [r3, #0]
 800897a:	4b8b      	ldr	r3, [pc, #556]	; (8008ba8 <tcp_input+0x480>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	b29b      	uxth	r3, r3
 8008982:	4618      	mov	r0, r3
 8008984:	f7fb fa9c 	bl	8003ec0 <lwip_htons>
 8008988:	4603      	mov	r3, r0
 800898a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800898c:	4b86      	ldr	r3, [pc, #536]	; (8008ba8 <tcp_input+0x480>)
 800898e:	681c      	ldr	r4, [r3, #0]
 8008990:	4b85      	ldr	r3, [pc, #532]	; (8008ba8 <tcp_input+0x480>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4618      	mov	r0, r3
 8008998:	f7fb faa7 	bl	8003eea <lwip_htonl>
 800899c:	4603      	mov	r3, r0
 800899e:	6063      	str	r3, [r4, #4]
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	4a82      	ldr	r2, [pc, #520]	; (8008bac <tcp_input+0x484>)
 80089a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80089a6:	4b80      	ldr	r3, [pc, #512]	; (8008ba8 <tcp_input+0x480>)
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	4b7f      	ldr	r3, [pc, #508]	; (8008ba8 <tcp_input+0x480>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fb fa9a 	bl	8003eea <lwip_htonl>
 80089b6:	4603      	mov	r3, r0
 80089b8:	60a3      	str	r3, [r4, #8]
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	4a7c      	ldr	r2, [pc, #496]	; (8008bb0 <tcp_input+0x488>)
 80089be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80089c0:	4b79      	ldr	r3, [pc, #484]	; (8008ba8 <tcp_input+0x480>)
 80089c2:	681c      	ldr	r4, [r3, #0]
 80089c4:	4b78      	ldr	r3, [pc, #480]	; (8008ba8 <tcp_input+0x480>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	89db      	ldrh	r3, [r3, #14]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fb fa77 	bl	8003ec0 <lwip_htons>
 80089d2:	4603      	mov	r3, r0
 80089d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80089d6:	4b74      	ldr	r3, [pc, #464]	; (8008ba8 <tcp_input+0x480>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	899b      	ldrh	r3, [r3, #12]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fb fa6e 	bl	8003ec0 <lwip_htons>
 80089e4:	4603      	mov	r3, r0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	4b71      	ldr	r3, [pc, #452]	; (8008bb4 <tcp_input+0x48c>)
 80089f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	891a      	ldrh	r2, [r3, #8]
 80089f6:	4b70      	ldr	r3, [pc, #448]	; (8008bb8 <tcp_input+0x490>)
 80089f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80089fa:	4b6e      	ldr	r3, [pc, #440]	; (8008bb4 <tcp_input+0x48c>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d014      	beq.n	8008a30 <tcp_input+0x308>
    tcplen++;
 8008a06:	4b6c      	ldr	r3, [pc, #432]	; (8008bb8 <tcp_input+0x490>)
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	4b6a      	ldr	r3, [pc, #424]	; (8008bb8 <tcp_input+0x490>)
 8008a10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	891a      	ldrh	r2, [r3, #8]
 8008a16:	4b68      	ldr	r3, [pc, #416]	; (8008bb8 <tcp_input+0x490>)
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d908      	bls.n	8008a30 <tcp_input+0x308>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8008a1e:	4b67      	ldr	r3, [pc, #412]	; (8008bbc <tcp_input+0x494>)
 8008a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a24:	3301      	adds	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	4b64      	ldr	r3, [pc, #400]	; (8008bbc <tcp_input+0x494>)
 8008a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      goto dropped;
 8008a2e:	e312      	b.n	8009056 <tcp_input+0x92e>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a34:	4b62      	ldr	r3, [pc, #392]	; (8008bc0 <tcp_input+0x498>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e097      	b.n	8008b6c <tcp_input+0x444>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	7d1b      	ldrb	r3, [r3, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <tcp_input+0x332>
 8008a44:	4b5f      	ldr	r3, [pc, #380]	; (8008bc4 <tcp_input+0x49c>)
 8008a46:	22fb      	movs	r2, #251	; 0xfb
 8008a48:	495f      	ldr	r1, [pc, #380]	; (8008bc8 <tcp_input+0x4a0>)
 8008a4a:	4860      	ldr	r0, [pc, #384]	; (8008bcc <tcp_input+0x4a4>)
 8008a4c:	f00b f860 	bl	8013b10 <iprintf>
 8008a50:	2000      	movs	r0, #0
 8008a52:	f00b f95f 	bl	8013d14 <fflush>
 8008a56:	f00b f8a4 	bl	8013ba2 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	7d1b      	ldrb	r3, [r3, #20]
 8008a5e:	2b0a      	cmp	r3, #10
 8008a60:	d10a      	bne.n	8008a78 <tcp_input+0x350>
 8008a62:	4b58      	ldr	r3, [pc, #352]	; (8008bc4 <tcp_input+0x49c>)
 8008a64:	22fc      	movs	r2, #252	; 0xfc
 8008a66:	495a      	ldr	r1, [pc, #360]	; (8008bd0 <tcp_input+0x4a8>)
 8008a68:	4858      	ldr	r0, [pc, #352]	; (8008bcc <tcp_input+0x4a4>)
 8008a6a:	f00b f851 	bl	8013b10 <iprintf>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f00b f950 	bl	8013d14 <fflush>
 8008a74:	f00b f895 	bl	8013ba2 <abort>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	7d1b      	ldrb	r3, [r3, #20]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d10a      	bne.n	8008a96 <tcp_input+0x36e>
 8008a80:	4b50      	ldr	r3, [pc, #320]	; (8008bc4 <tcp_input+0x49c>)
 8008a82:	22fd      	movs	r2, #253	; 0xfd
 8008a84:	4953      	ldr	r1, [pc, #332]	; (8008bd4 <tcp_input+0x4ac>)
 8008a86:	4851      	ldr	r0, [pc, #324]	; (8008bcc <tcp_input+0x4a4>)
 8008a88:	f00b f842 	bl	8013b10 <iprintf>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	f00b f941 	bl	8013d14 <fflush>
 8008a92:	f00b f886 	bl	8013ba2 <abort>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	7a1b      	ldrb	r3, [r3, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00c      	beq.n	8008ab8 <tcp_input+0x390>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	7a1a      	ldrb	r2, [r3, #8]
 8008aa2:	4b4d      	ldr	r3, [pc, #308]	; (8008bd8 <tcp_input+0x4b0>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008aaa:	3301      	adds	r3, #1
 8008aac:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d002      	beq.n	8008ab8 <tcp_input+0x390>
      prev = pcb;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	61bb      	str	r3, [r7, #24]
      continue;
 8008ab6:	e056      	b.n	8008b66 <tcp_input+0x43e>
    }

    if (pcb->remote_port == tcphdr->src &&
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	8b1a      	ldrh	r2, [r3, #24]
 8008abc:	4b3a      	ldr	r3, [pc, #232]	; (8008ba8 <tcp_input+0x480>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d14c      	bne.n	8008b62 <tcp_input+0x43a>
        pcb->local_port == tcphdr->dest &&
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	8ada      	ldrh	r2, [r3, #22]
 8008acc:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <tcp_input+0x480>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	885b      	ldrh	r3, [r3, #2]
 8008ad2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d144      	bne.n	8008b62 <tcp_input+0x43a>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b3e      	ldr	r3, [pc, #248]	; (8008bd8 <tcp_input+0x4b0>)
 8008ade:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d13e      	bne.n	8008b62 <tcp_input+0x43a>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4b3b      	ldr	r3, [pc, #236]	; (8008bd8 <tcp_input+0x4b0>)
 8008aea:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d138      	bne.n	8008b62 <tcp_input+0x43a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d10b      	bne.n	8008b12 <tcp_input+0x3ea>
 8008afa:	4b32      	ldr	r3, [pc, #200]	; (8008bc4 <tcp_input+0x49c>)
 8008afc:	f240 120d 	movw	r2, #269	; 0x10d
 8008b00:	4936      	ldr	r1, [pc, #216]	; (8008bdc <tcp_input+0x4b4>)
 8008b02:	4832      	ldr	r0, [pc, #200]	; (8008bcc <tcp_input+0x4a4>)
 8008b04:	f00b f804 	bl	8013b10 <iprintf>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f00b f903 	bl	8013d14 <fflush>
 8008b0e:	f00b f848 	bl	8013ba2 <abort>
      if (prev != NULL) {
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <tcp_input+0x408>
        prev->next = pcb->next;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <tcp_input+0x498>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008b28:	4a25      	ldr	r2, [pc, #148]	; (8008bc0 <tcp_input+0x498>)
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e007      	b.n	8008b40 <tcp_input+0x418>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008b30:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <tcp_input+0x494>)
 8008b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b36:	3301      	adds	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <tcp_input+0x494>)
 8008b3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d115      	bne.n	8008b76 <tcp_input+0x44e>
 8008b4a:	4b1e      	ldr	r3, [pc, #120]	; (8008bc4 <tcp_input+0x49c>)
 8008b4c:	f240 1215 	movw	r2, #277	; 0x115
 8008b50:	4923      	ldr	r1, [pc, #140]	; (8008be0 <tcp_input+0x4b8>)
 8008b52:	481e      	ldr	r0, [pc, #120]	; (8008bcc <tcp_input+0x4a4>)
 8008b54:	f00a ffdc 	bl	8013b10 <iprintf>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f00b f8db 	bl	8013d14 <fflush>
 8008b5e:	f00b f820 	bl	8013ba2 <abort>
      break;
    }
    prev = pcb;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f47f af64 	bne.w	8008a3c <tcp_input+0x314>
 8008b74:	e000      	b.n	8008b78 <tcp_input+0x450>
      break;
 8008b76:	bf00      	nop
  }

  if (pcb == NULL) {
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f040 80c5 	bne.w	8008d0a <tcp_input+0x5e2>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b80:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <tcp_input+0x4bc>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e066      	b.n	8008c56 <tcp_input+0x52e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	7d1b      	ldrb	r3, [r3, #20]
 8008b8c:	2b0a      	cmp	r3, #10
 8008b8e:	d02d      	beq.n	8008bec <tcp_input+0x4c4>
 8008b90:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <tcp_input+0x49c>)
 8008b92:	f240 121f 	movw	r2, #287	; 0x11f
 8008b96:	4914      	ldr	r1, [pc, #80]	; (8008be8 <tcp_input+0x4c0>)
 8008b98:	480c      	ldr	r0, [pc, #48]	; (8008bcc <tcp_input+0x4a4>)
 8008b9a:	f00a ffb9 	bl	8013b10 <iprintf>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f00b f8b8 	bl	8013d14 <fflush>
 8008ba4:	f00a fffd 	bl	8013ba2 <abort>
 8008ba8:	20000714 	.word	0x20000714
 8008bac:	20000724 	.word	0x20000724
 8008bb0:	20000728 	.word	0x20000728
 8008bb4:	20000730 	.word	0x20000730
 8008bb8:	2000072e 	.word	0x2000072e
 8008bbc:	2000221c 	.word	0x2000221c
 8008bc0:	200022c4 	.word	0x200022c4
 8008bc4:	08016a08 	.word	0x08016a08
 8008bc8:	08016aa8 	.word	0x08016aa8
 8008bcc:	08016a44 	.word	0x08016a44
 8008bd0:	08016ad0 	.word	0x08016ad0
 8008bd4:	08016afc 	.word	0x08016afc
 8008bd8:	20000880 	.word	0x20000880
 8008bdc:	08016b24 	.word	0x08016b24
 8008be0:	08016b50 	.word	0x08016b50
 8008be4:	200022d4 	.word	0x200022d4
 8008be8:	08016b7c 	.word	0x08016b7c

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	7a1b      	ldrb	r3, [r3, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <tcp_input+0x4e0>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	7a1a      	ldrb	r2, [r3, #8]
 8008bf8:	4b9e      	ldr	r3, [pc, #632]	; (8008e74 <tcp_input+0x74c>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c00:	3301      	adds	r3, #1
 8008c02:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d122      	bne.n	8008c4e <tcp_input+0x526>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	8b1a      	ldrh	r2, [r3, #24]
 8008c0c:	4b9a      	ldr	r3, [pc, #616]	; (8008e78 <tcp_input+0x750>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d11b      	bne.n	8008c50 <tcp_input+0x528>
          pcb->local_port == tcphdr->dest &&
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	8ada      	ldrh	r2, [r3, #22]
 8008c1c:	4b96      	ldr	r3, [pc, #600]	; (8008e78 <tcp_input+0x750>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d113      	bne.n	8008c50 <tcp_input+0x528>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b91      	ldr	r3, [pc, #580]	; (8008e74 <tcp_input+0x74c>)
 8008c2e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d10d      	bne.n	8008c50 <tcp_input+0x528>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4b8e      	ldr	r3, [pc, #568]	; (8008e74 <tcp_input+0x74c>)
 8008c3a:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d107      	bne.n	8008c50 <tcp_input+0x528>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008c40:	69f8      	ldr	r0, [r7, #28]
 8008c42:	f000 fb85 	bl	8009350 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fd fa4c 	bl	80060e4 <pbuf_free>
        return;
 8008c4c:	e210      	b.n	8009070 <tcp_input+0x948>
        continue;
 8008c4e:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	61fb      	str	r3, [r7, #28]
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d195      	bne.n	8008b88 <tcp_input+0x460>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c60:	4b86      	ldr	r3, [pc, #536]	; (8008e7c <tcp_input+0x754>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e02a      	b.n	8008cbe <tcp_input+0x596>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	7a1b      	ldrb	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <tcp_input+0x562>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	7a1a      	ldrb	r2, [r3, #8]
 8008c74:	4b7f      	ldr	r3, [pc, #508]	; (8008e74 <tcp_input+0x74c>)
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d002      	beq.n	8008c8a <tcp_input+0x562>
        prev = (struct tcp_pcb *)lpcb;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	61bb      	str	r3, [r7, #24]
        continue;
 8008c88:	e016      	b.n	8008cb8 <tcp_input+0x590>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	8ada      	ldrh	r2, [r3, #22]
 8008c8e:	4b7a      	ldr	r3, [pc, #488]	; (8008e78 <tcp_input+0x750>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d10c      	bne.n	8008cb4 <tcp_input+0x58c>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b75      	ldr	r3, [pc, #468]	; (8008e74 <tcp_input+0x74c>)
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d00f      	beq.n	8008cc6 <tcp_input+0x59e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00d      	beq.n	8008cc8 <tcp_input+0x5a0>
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <tcp_input+0x5a0>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1d1      	bne.n	8008c68 <tcp_input+0x540>
 8008cc4:	e000      	b.n	8008cc8 <tcp_input+0x5a0>
            break;
 8008cc6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01d      	beq.n	8008d0a <tcp_input+0x5e2>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <tcp_input+0x5c4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008cdc:	4b67      	ldr	r3, [pc, #412]	; (8008e7c <tcp_input+0x754>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008ce4:	4a65      	ldr	r2, [pc, #404]	; (8008e7c <tcp_input+0x754>)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	e007      	b.n	8008cfc <tcp_input+0x5d4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8008cec:	4b64      	ldr	r3, [pc, #400]	; (8008e80 <tcp_input+0x758>)
 8008cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	4b62      	ldr	r3, [pc, #392]	; (8008e80 <tcp_input+0x758>)
 8008cf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	f000 fa19 	bl	8009134 <tcp_listen_input>
      }
      pbuf_free(p);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fd f9ee 	bl	80060e4 <pbuf_free>
      return;
 8008d08:	e1b2      	b.n	8009070 <tcp_input+0x948>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 8167 	beq.w	8008fe0 <tcp_input+0x8b8>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008d12:	4b5c      	ldr	r3, [pc, #368]	; (8008e84 <tcp_input+0x75c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	891a      	ldrh	r2, [r3, #8]
 8008d1c:	4b59      	ldr	r3, [pc, #356]	; (8008e84 <tcp_input+0x75c>)
 8008d1e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008d20:	4a58      	ldr	r2, [pc, #352]	; (8008e84 <tcp_input+0x75c>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008d26:	4b54      	ldr	r3, [pc, #336]	; (8008e78 <tcp_input+0x750>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a56      	ldr	r2, [pc, #344]	; (8008e84 <tcp_input+0x75c>)
 8008d2c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8008d2e:	4b56      	ldr	r3, [pc, #344]	; (8008e88 <tcp_input+0x760>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008d34:	4b55      	ldr	r3, [pc, #340]	; (8008e8c <tcp_input+0x764>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008d3a:	4b55      	ldr	r3, [pc, #340]	; (8008e90 <tcp_input+0x768>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008d40:	4b54      	ldr	r3, [pc, #336]	; (8008e94 <tcp_input+0x76c>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <tcp_input+0x632>
      p->flags |= PBUF_FLAG_PUSH;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7b5b      	ldrb	r3, [r3, #13]
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01e      	beq.n	8008da0 <tcp_input+0x678>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008d62:	69f8      	ldr	r0, [r7, #28]
 8008d64:	f7fe ff7c 	bl	8007c60 <tcp_process_refused_data>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	f113 0f0d 	cmn.w	r3, #13
 8008d6e:	d007      	beq.n	8008d80 <tcp_input+0x658>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d013      	beq.n	8008da0 <tcp_input+0x678>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008d78:	4b47      	ldr	r3, [pc, #284]	; (8008e98 <tcp_input+0x770>)
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <tcp_input+0x678>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <tcp_input+0x666>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008d88:	69f8      	ldr	r0, [r7, #28]
 8008d8a:	f004 f8f9 	bl	800cf80 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8008d8e:	4b3c      	ldr	r3, [pc, #240]	; (8008e80 <tcp_input+0x758>)
 8008d90:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8008d94:	3301      	adds	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <tcp_input+0x758>)
 8008d9a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008d9e:	e10c      	b.n	8008fba <tcp_input+0x892>
      }
    }
    tcp_input_pcb = pcb;
 8008da0:	4a3e      	ldr	r2, [pc, #248]	; (8008e9c <tcp_input+0x774>)
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008da6:	69f8      	ldr	r0, [r7, #28]
 8008da8:	f000 fb52 	bl	8009450 <tcp_process>
 8008dac:	4603      	mov	r3, r0
 8008dae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008db0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008db4:	f113 0f0d 	cmn.w	r3, #13
 8008db8:	f000 80ff 	beq.w	8008fba <tcp_input+0x892>
      if (recv_flags & TF_RESET) {
 8008dbc:	4b33      	ldr	r3, [pc, #204]	; (8008e8c <tcp_input+0x764>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 0308 	and.w	r3, r3, #8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d015      	beq.n	8008df4 <tcp_input+0x6cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d008      	beq.n	8008de4 <tcp_input+0x6bc>
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	6912      	ldr	r2, [r2, #16]
 8008ddc:	f06f 010d 	mvn.w	r1, #13
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008de4:	69f9      	ldr	r1, [r7, #28]
 8008de6:	482e      	ldr	r0, [pc, #184]	; (8008ea0 <tcp_input+0x778>)
 8008de8:	f7ff fb00 	bl	80083ec <tcp_pcb_remove>
        tcp_free(pcb);
 8008dec:	69f8      	ldr	r0, [r7, #28]
 8008dee:	f7fd fd93 	bl	8006918 <tcp_free>
 8008df2:	e0e2      	b.n	8008fba <tcp_input+0x892>
      } else {
        err = ERR_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008df8:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <tcp_input+0x768>)
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d01d      	beq.n	8008e3c <tcp_input+0x714>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008e00:	4b23      	ldr	r3, [pc, #140]	; (8008e90 <tcp_input+0x768>)
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00a      	beq.n	8008e26 <tcp_input+0x6fe>
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	6910      	ldr	r0, [r2, #16]
 8008e1a:	897a      	ldrh	r2, [r7, #10]
 8008e1c:	69f9      	ldr	r1, [r7, #28]
 8008e1e:	4798      	blx	r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	74fb      	strb	r3, [r7, #19]
 8008e24:	e001      	b.n	8008e2a <tcp_input+0x702>
 8008e26:	2300      	movs	r3, #0
 8008e28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008e2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e2e:	f113 0f0d 	cmn.w	r3, #13
 8008e32:	f000 80b9 	beq.w	8008fa8 <tcp_input+0x880>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008e36:	4b16      	ldr	r3, [pc, #88]	; (8008e90 <tcp_input+0x768>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008e3c:	69f8      	ldr	r0, [r7, #28]
 8008e3e:	f000 f933 	bl	80090a8 <tcp_input_delayed_close>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 80b1 	bne.w	8008fac <tcp_input+0x884>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <tcp_input+0x760>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d065      	beq.n	8008f1e <tcp_input+0x7f6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d02a      	beq.n	8008eb0 <tcp_input+0x788>
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <tcp_input+0x77c>)
 8008e5c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008e60:	4911      	ldr	r1, [pc, #68]	; (8008ea8 <tcp_input+0x780>)
 8008e62:	4812      	ldr	r0, [pc, #72]	; (8008eac <tcp_input+0x784>)
 8008e64:	f00a fe54 	bl	8013b10 <iprintf>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f00a ff53 	bl	8013d14 <fflush>
 8008e6e:	f00a fe98 	bl	8013ba2 <abort>
 8008e72:	bf00      	nop
 8008e74:	20000880 	.word	0x20000880
 8008e78:	20000714 	.word	0x20000714
 8008e7c:	200022cc 	.word	0x200022cc
 8008e80:	2000221c 	.word	0x2000221c
 8008e84:	20000700 	.word	0x20000700
 8008e88:	20000734 	.word	0x20000734
 8008e8c:	20000731 	.word	0x20000731
 8008e90:	2000072c 	.word	0x2000072c
 8008e94:	20000730 	.word	0x20000730
 8008e98:	2000072e 	.word	0x2000072e
 8008e9c:	200022d8 	.word	0x200022d8
 8008ea0:	200022c4 	.word	0x200022c4
 8008ea4:	08016a08 	.word	0x08016a08
 8008ea8:	08016bac 	.word	0x08016bac
 8008eac:	08016a44 	.word	0x08016a44
          if (pcb->flags & TF_RXCLOSED) {
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	8b5b      	ldrh	r3, [r3, #26]
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d008      	beq.n	8008ece <tcp_input+0x7a6>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ebc:	4b6e      	ldr	r3, [pc, #440]	; (8009078 <tcp_input+0x950>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fd f90f 	bl	80060e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ec6:	69f8      	ldr	r0, [r7, #28]
 8008ec8:	f7fe f836 	bl	8006f38 <tcp_abort>
            goto aborted;
 8008ecc:	e075      	b.n	8008fba <tcp_input+0x892>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00c      	beq.n	8008ef2 <tcp_input+0x7ca>
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	6918      	ldr	r0, [r3, #16]
 8008ee2:	4b65      	ldr	r3, [pc, #404]	; (8009078 <tcp_input+0x950>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	47a0      	blx	r4
 8008eec:	4603      	mov	r3, r0
 8008eee:	74fb      	strb	r3, [r7, #19]
 8008ef0:	e008      	b.n	8008f04 <tcp_input+0x7dc>
 8008ef2:	4b61      	ldr	r3, [pc, #388]	; (8009078 <tcp_input+0x950>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	69f9      	ldr	r1, [r7, #28]
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7fe ff8c 	bl	8007e18 <tcp_recv_null>
 8008f00:	4603      	mov	r3, r0
 8008f02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f08:	f113 0f0d 	cmn.w	r3, #13
 8008f0c:	d050      	beq.n	8008fb0 <tcp_input+0x888>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008f0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <tcp_input+0x7f6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008f16:	4b58      	ldr	r3, [pc, #352]	; (8009078 <tcp_input+0x950>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008f1e:	4b57      	ldr	r3, [pc, #348]	; (800907c <tcp_input+0x954>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d031      	beq.n	8008f8e <tcp_input+0x866>
          if (pcb->refused_data != NULL) {
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <tcp_input+0x81e>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008f3a:	7b52      	ldrb	r2, [r2, #13]
 8008f3c:	f042 0220 	orr.w	r2, r2, #32
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	735a      	strb	r2, [r3, #13]
 8008f44:	e023      	b.n	8008f8e <tcp_input+0x866>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f4a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d005      	beq.n	8008f5e <tcp_input+0x836>
              pcb->rcv_wnd++;
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f56:	3301      	adds	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <tcp_input+0x858>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	6918      	ldr	r0, [r3, #16]
 8008f72:	2300      	movs	r3, #0
 8008f74:	2200      	movs	r2, #0
 8008f76:	69f9      	ldr	r1, [r7, #28]
 8008f78:	47a0      	blx	r4
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	74fb      	strb	r3, [r7, #19]
 8008f7e:	e001      	b.n	8008f84 <tcp_input+0x85c>
 8008f80:	2300      	movs	r3, #0
 8008f82:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f88:	f113 0f0d 	cmn.w	r3, #13
 8008f8c:	d012      	beq.n	8008fb4 <tcp_input+0x88c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	; (8009080 <tcp_input+0x958>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008f94:	69f8      	ldr	r0, [r7, #28]
 8008f96:	f000 f887 	bl	80090a8 <tcp_input_delayed_close>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <tcp_input+0x890>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008fa0:	69f8      	ldr	r0, [r7, #28]
 8008fa2:	f003 f8bd 	bl	800c120 <tcp_output>
 8008fa6:	e008      	b.n	8008fba <tcp_input+0x892>
              goto aborted;
 8008fa8:	bf00      	nop
 8008faa:	e006      	b.n	8008fba <tcp_input+0x892>
          goto aborted;
 8008fac:	bf00      	nop
 8008fae:	e004      	b.n	8008fba <tcp_input+0x892>
            goto aborted;
 8008fb0:	bf00      	nop
 8008fb2:	e002      	b.n	8008fba <tcp_input+0x892>
              goto aborted;
 8008fb4:	bf00      	nop
 8008fb6:	e000      	b.n	8008fba <tcp_input+0x892>
          goto aborted;
 8008fb8:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <tcp_input+0x958>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008fc0:	4b2d      	ldr	r3, [pc, #180]	; (8009078 <tcp_input+0x950>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <tcp_input+0x95c>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d04f      	beq.n	800906e <tcp_input+0x946>
      pbuf_free(inseg.p);
 8008fce:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <tcp_input+0x95c>)
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd f886 	bl	80060e4 <pbuf_free>
      inseg.p = NULL;
 8008fd8:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <tcp_input+0x95c>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008fde:	e046      	b.n	800906e <tcp_input+0x946>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008fe0:	4b29      	ldr	r3, [pc, #164]	; (8009088 <tcp_input+0x960>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	899b      	ldrh	r3, [r3, #12]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fa ff69 	bl	8003ec0 <lwip_htons>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d129      	bne.n	800904e <tcp_input+0x926>
      TCP_STATS_INC(tcp.proterr);
 8008ffa:	4b24      	ldr	r3, [pc, #144]	; (800908c <tcp_input+0x964>)
 8008ffc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009000:	3301      	adds	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	4b21      	ldr	r3, [pc, #132]	; (800908c <tcp_input+0x964>)
 8009006:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      TCP_STATS_INC(tcp.drop);
 800900a:	4b20      	ldr	r3, [pc, #128]	; (800908c <tcp_input+0x964>)
 800900c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8009010:	3301      	adds	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	4b1d      	ldr	r3, [pc, #116]	; (800908c <tcp_input+0x964>)
 8009016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800901a:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <tcp_input+0x968>)
 800901c:	6858      	ldr	r0, [r3, #4]
 800901e:	4b1d      	ldr	r3, [pc, #116]	; (8009094 <tcp_input+0x96c>)
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <tcp_input+0x970>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	4b1c      	ldr	r3, [pc, #112]	; (800909c <tcp_input+0x974>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800902e:	4b16      	ldr	r3, [pc, #88]	; (8009088 <tcp_input+0x960>)
 8009030:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009032:	885b      	ldrh	r3, [r3, #2]
 8009034:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009036:	4a14      	ldr	r2, [pc, #80]	; (8009088 <tcp_input+0x960>)
 8009038:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800903a:	8812      	ldrh	r2, [r2, #0]
 800903c:	b292      	uxth	r2, r2
 800903e:	9202      	str	r2, [sp, #8]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <tcp_input+0x978>)
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4b17      	ldr	r3, [pc, #92]	; (80090a4 <tcp_input+0x97c>)
 8009048:	4622      	mov	r2, r4
 800904a:	f003 ff72 	bl	800cf32 <tcp_rst_netif>
    pbuf_free(p);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fd f848 	bl	80060e4 <pbuf_free>
  return;
 8009054:	e00b      	b.n	800906e <tcp_input+0x946>
dropped:
  TCP_STATS_INC(tcp.drop);
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <tcp_input+0x964>)
 8009058:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800905c:	3301      	adds	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <tcp_input+0x964>)
 8009062:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7fd f83c 	bl	80060e4 <pbuf_free>
 800906c:	e000      	b.n	8009070 <tcp_input+0x948>
  return;
 800906e:	bf00      	nop
}
 8009070:	3724      	adds	r7, #36	; 0x24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd90      	pop	{r4, r7, pc}
 8009076:	bf00      	nop
 8009078:	20000734 	.word	0x20000734
 800907c:	20000731 	.word	0x20000731
 8009080:	200022d8 	.word	0x200022d8
 8009084:	20000700 	.word	0x20000700
 8009088:	20000714 	.word	0x20000714
 800908c:	2000221c 	.word	0x2000221c
 8009090:	20000880 	.word	0x20000880
 8009094:	20000728 	.word	0x20000728
 8009098:	2000072e 	.word	0x2000072e
 800909c:	20000724 	.word	0x20000724
 80090a0:	20000890 	.word	0x20000890
 80090a4:	20000894 	.word	0x20000894

080090a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <tcp_input_delayed_close+0x26>
 80090b6:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <tcp_input_delayed_close+0x78>)
 80090b8:	f240 225a 	movw	r2, #602	; 0x25a
 80090bc:	4919      	ldr	r1, [pc, #100]	; (8009124 <tcp_input_delayed_close+0x7c>)
 80090be:	481a      	ldr	r0, [pc, #104]	; (8009128 <tcp_input_delayed_close+0x80>)
 80090c0:	f00a fd26 	bl	8013b10 <iprintf>
 80090c4:	2000      	movs	r0, #0
 80090c6:	f00a fe25 	bl	8013d14 <fflush>
 80090ca:	f00a fd6a 	bl	8013ba2 <abort>

  if (recv_flags & TF_CLOSED) {
 80090ce:	4b17      	ldr	r3, [pc, #92]	; (800912c <tcp_input_delayed_close+0x84>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01c      	beq.n	8009114 <tcp_input_delayed_close+0x6c>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8b5b      	ldrh	r3, [r3, #26]
 80090de:	f003 0310 	and.w	r3, r3, #16
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <tcp_input_delayed_close+0x5a>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <tcp_input_delayed_close+0x5a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	6912      	ldr	r2, [r2, #16]
 80090fa:	f06f 010e 	mvn.w	r1, #14
 80090fe:	4610      	mov	r0, r2
 8009100:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	480a      	ldr	r0, [pc, #40]	; (8009130 <tcp_input_delayed_close+0x88>)
 8009106:	f7ff f971 	bl	80083ec <tcp_pcb_remove>
    tcp_free(pcb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fd fc04 	bl	8006918 <tcp_free>
    return 1;
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <tcp_input_delayed_close+0x6e>
  }
  return 0;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	08016a08 	.word	0x08016a08
 8009124:	08016bc8 	.word	0x08016bc8
 8009128:	08016a44 	.word	0x08016a44
 800912c:	20000731 	.word	0x20000731
 8009130:	200022c4 	.word	0x200022c4

08009134 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009134:	b590      	push	{r4, r7, lr}
 8009136:	b08b      	sub	sp, #44	; 0x2c
 8009138:	af04      	add	r7, sp, #16
 800913a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800913c:	4b76      	ldr	r3, [pc, #472]	; (8009318 <tcp_listen_input+0x1e4>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	f040 80e1 	bne.w	800930c <tcp_listen_input+0x1d8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <tcp_listen_input+0x34>
 8009150:	4b72      	ldr	r3, [pc, #456]	; (800931c <tcp_listen_input+0x1e8>)
 8009152:	f240 2281 	movw	r2, #641	; 0x281
 8009156:	4972      	ldr	r1, [pc, #456]	; (8009320 <tcp_listen_input+0x1ec>)
 8009158:	4872      	ldr	r0, [pc, #456]	; (8009324 <tcp_listen_input+0x1f0>)
 800915a:	f00a fcd9 	bl	8013b10 <iprintf>
 800915e:	2000      	movs	r0, #0
 8009160:	f00a fdd8 	bl	8013d14 <fflush>
 8009164:	f00a fd1d 	bl	8013ba2 <abort>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009168:	4b6b      	ldr	r3, [pc, #428]	; (8009318 <tcp_listen_input+0x1e4>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01a      	beq.n	80091aa <tcp_listen_input+0x76>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009174:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <tcp_listen_input+0x1f4>)
 8009176:	6858      	ldr	r0, [r3, #4]
 8009178:	4b6c      	ldr	r3, [pc, #432]	; (800932c <tcp_listen_input+0x1f8>)
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	4b6c      	ldr	r3, [pc, #432]	; (8009330 <tcp_listen_input+0x1fc>)
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	4b6c      	ldr	r3, [pc, #432]	; (8009334 <tcp_listen_input+0x200>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009188:	4b6b      	ldr	r3, [pc, #428]	; (8009338 <tcp_listen_input+0x204>)
 800918a:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009190:	4a69      	ldr	r2, [pc, #420]	; (8009338 <tcp_listen_input+0x204>)
 8009192:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	b292      	uxth	r2, r2
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	4b67      	ldr	r3, [pc, #412]	; (800933c <tcp_listen_input+0x208>)
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4b67      	ldr	r3, [pc, #412]	; (8009340 <tcp_listen_input+0x20c>)
 80091a2:	4622      	mov	r2, r4
 80091a4:	f003 fec5 	bl	800cf32 <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80091a8:	e0b2      	b.n	8009310 <tcp_listen_input+0x1dc>
  } else if (flags & TCP_SYN) {
 80091aa:	4b5b      	ldr	r3, [pc, #364]	; (8009318 <tcp_listen_input+0x1e4>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80ac 	beq.w	8009310 <tcp_listen_input+0x1dc>
    npcb = tcp_alloc(pcb->prio);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7d5b      	ldrb	r3, [r3, #21]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ff55 	bl	800806c <tcp_alloc>
 80091c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d119      	bne.n	80091fe <tcp_listen_input+0xca>
      TCP_STATS_INC(tcp.memerr);
 80091ca:	4b5e      	ldr	r3, [pc, #376]	; (8009344 <tcp_listen_input+0x210>)
 80091cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80091d0:	3301      	adds	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	4b5b      	ldr	r3, [pc, #364]	; (8009344 <tcp_listen_input+0x210>)
 80091d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <tcp_listen_input+0xc4>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6910      	ldr	r0, [r2, #16]
 80091ea:	f04f 32ff 	mov.w	r2, #4294967295
 80091ee:	2100      	movs	r1, #0
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	74fb      	strb	r3, [r7, #19]
      return;
 80091f6:	e08c      	b.n	8009312 <tcp_listen_input+0x1de>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091f8:	23f0      	movs	r3, #240	; 0xf0
 80091fa:	74fb      	strb	r3, [r7, #19]
      return;
 80091fc:	e089      	b.n	8009312 <tcp_listen_input+0x1de>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80091fe:	4b4a      	ldr	r3, [pc, #296]	; (8009328 <tcp_listen_input+0x1f4>)
 8009200:	695a      	ldr	r2, [r3, #20]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009206:	4b48      	ldr	r3, [pc, #288]	; (8009328 <tcp_listen_input+0x1f4>)
 8009208:	691a      	ldr	r2, [r3, #16]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	8ada      	ldrh	r2, [r3, #22]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009216:	4b48      	ldr	r3, [pc, #288]	; (8009338 <tcp_listen_input+0x204>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29a      	uxth	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2203      	movs	r2, #3
 8009226:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009228:	4b42      	ldr	r3, [pc, #264]	; (8009334 <tcp_listen_input+0x200>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800923a:	6978      	ldr	r0, [r7, #20]
 800923c:	f7ff f982 	bl	8008544 <tcp_next_iss>
 8009240:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800925a:	4b36      	ldr	r3, [pc, #216]	; (8009334 <tcp_listen_input+0x200>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	1e5a      	subs	r2, r3, #1
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	7a5b      	ldrb	r3, [r3, #9]
 8009276:	f003 030c 	and.w	r3, r3, #12
 800927a:	b2da      	uxtb	r2, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7a1a      	ldrb	r2, [r3, #8]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009288:	4b2f      	ldr	r3, [pc, #188]	; (8009348 <tcp_listen_input+0x214>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	60da      	str	r2, [r3, #12]
 8009290:	4a2d      	ldr	r2, [pc, #180]	; (8009348 <tcp_listen_input+0x214>)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	f003 fff5 	bl	800d284 <tcp_timer_needed>
 800929a:	4b2c      	ldr	r3, [pc, #176]	; (800934c <tcp_listen_input+0x218>)
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80092a0:	6978      	ldr	r0, [r7, #20]
 80092a2:	f001 fe05 	bl	800aeb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <tcp_listen_input+0x204>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	89db      	ldrh	r3, [r3, #14]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fa ff6d 	bl	80041a8 <ip4_route>
 80092ce:	4601      	mov	r1, r0
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	3304      	adds	r3, #4
 80092d4:	461a      	mov	r2, r3
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7ff f95e 	bl	8008598 <tcp_eff_send_mss_netif>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80092e4:	2112      	movs	r1, #18
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f002 fe0e 	bl	800bf08 <tcp_enqueue_flags>
 80092ec:	4603      	mov	r3, r0
 80092ee:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 80092f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <tcp_listen_input+0x1ce>
      tcp_abandon(npcb, 0);
 80092f8:	2100      	movs	r1, #0
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f7fd fd5a 	bl	8006db4 <tcp_abandon>
      return;
 8009300:	e007      	b.n	8009312 <tcp_listen_input+0x1de>
    tcp_output(npcb);
 8009302:	6978      	ldr	r0, [r7, #20]
 8009304:	f002 ff0c 	bl	800c120 <tcp_output>
  return;
 8009308:	bf00      	nop
 800930a:	e001      	b.n	8009310 <tcp_listen_input+0x1dc>
    return;
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <tcp_listen_input+0x1de>
  return;
 8009310:	bf00      	nop
}
 8009312:	371c      	adds	r7, #28
 8009314:	46bd      	mov	sp, r7
 8009316:	bd90      	pop	{r4, r7, pc}
 8009318:	20000730 	.word	0x20000730
 800931c:	08016a08 	.word	0x08016a08
 8009320:	08016bf0 	.word	0x08016bf0
 8009324:	08016a44 	.word	0x08016a44
 8009328:	20000880 	.word	0x20000880
 800932c:	20000728 	.word	0x20000728
 8009330:	2000072e 	.word	0x2000072e
 8009334:	20000724 	.word	0x20000724
 8009338:	20000714 	.word	0x20000714
 800933c:	20000890 	.word	0x20000890
 8009340:	20000894 	.word	0x20000894
 8009344:	2000221c 	.word	0x2000221c
 8009348:	200022c4 	.word	0x200022c4
 800934c:	200022c0 	.word	0x200022c0

08009350 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af04      	add	r7, sp, #16
 8009356:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <tcp_timewait_input+0xd4>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d159      	bne.n	8009418 <tcp_timewait_input+0xc8>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <tcp_timewait_input+0x32>
 800936a:	4b2f      	ldr	r3, [pc, #188]	; (8009428 <tcp_timewait_input+0xd8>)
 800936c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009370:	492e      	ldr	r1, [pc, #184]	; (800942c <tcp_timewait_input+0xdc>)
 8009372:	482f      	ldr	r0, [pc, #188]	; (8009430 <tcp_timewait_input+0xe0>)
 8009374:	f00a fbcc 	bl	8013b10 <iprintf>
 8009378:	2000      	movs	r0, #0
 800937a:	f00a fccb 	bl	8013d14 <fflush>
 800937e:	f00a fc10 	bl	8013ba2 <abort>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009382:	4b28      	ldr	r3, [pc, #160]	; (8009424 <tcp_timewait_input+0xd4>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02a      	beq.n	80093e4 <tcp_timewait_input+0x94>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800938e:	4b29      	ldr	r3, [pc, #164]	; (8009434 <tcp_timewait_input+0xe4>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	db2d      	blt.n	80093f8 <tcp_timewait_input+0xa8>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80093a4:	441a      	add	r2, r3
 80093a6:	4b23      	ldr	r3, [pc, #140]	; (8009434 <tcp_timewait_input+0xe4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db23      	blt.n	80093f8 <tcp_timewait_input+0xa8>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b0:	4b21      	ldr	r3, [pc, #132]	; (8009438 <tcp_timewait_input+0xe8>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	4b21      	ldr	r3, [pc, #132]	; (800943c <tcp_timewait_input+0xec>)
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <tcp_timewait_input+0xe4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093c0:	4b1f      	ldr	r3, [pc, #124]	; (8009440 <tcp_timewait_input+0xf0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093c8:	4a1d      	ldr	r2, [pc, #116]	; (8009440 <tcp_timewait_input+0xf0>)
 80093ca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093cc:	8812      	ldrh	r2, [r2, #0]
 80093ce:	b292      	uxth	r2, r2
 80093d0:	9202      	str	r2, [sp, #8]
 80093d2:	9301      	str	r3, [sp, #4]
 80093d4:	4b1b      	ldr	r3, [pc, #108]	; (8009444 <tcp_timewait_input+0xf4>)
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <tcp_timewait_input+0xf8>)
 80093da:	4602      	mov	r2, r0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f003 fd87 	bl	800cef0 <tcp_rst>
      return;
 80093e2:	e01c      	b.n	800941e <tcp_timewait_input+0xce>
    }
  } else if (flags & TCP_FIN) {
 80093e4:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <tcp_timewait_input+0xd4>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <tcp_timewait_input+0xa8>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <tcp_timewait_input+0xfc>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80093f8:	4b10      	ldr	r3, [pc, #64]	; (800943c <tcp_timewait_input+0xec>)
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00d      	beq.n	800941c <tcp_timewait_input+0xcc>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	8b5b      	ldrh	r3, [r3, #26]
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	b29a      	uxth	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f002 fe86 	bl	800c120 <tcp_output>
  }
  return;
 8009414:	bf00      	nop
 8009416:	e001      	b.n	800941c <tcp_timewait_input+0xcc>
    return;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <tcp_timewait_input+0xce>
  return;
 800941c:	bf00      	nop
}
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000730 	.word	0x20000730
 8009428:	08016a08 	.word	0x08016a08
 800942c:	08016c10 	.word	0x08016c10
 8009430:	08016a44 	.word	0x08016a44
 8009434:	20000724 	.word	0x20000724
 8009438:	20000728 	.word	0x20000728
 800943c:	2000072e 	.word	0x2000072e
 8009440:	20000714 	.word	0x20000714
 8009444:	20000890 	.word	0x20000890
 8009448:	20000894 	.word	0x20000894
 800944c:	200022c8 	.word	0x200022c8

08009450 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b08d      	sub	sp, #52	; 0x34
 8009454:	af04      	add	r7, sp, #16
 8009456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <tcp_process+0x2e>
 8009466:	4b9c      	ldr	r3, [pc, #624]	; (80096d8 <tcp_process+0x288>)
 8009468:	f240 321f 	movw	r2, #799	; 0x31f
 800946c:	499b      	ldr	r1, [pc, #620]	; (80096dc <tcp_process+0x28c>)
 800946e:	489c      	ldr	r0, [pc, #624]	; (80096e0 <tcp_process+0x290>)
 8009470:	f00a fb4e 	bl	8013b10 <iprintf>
 8009474:	2000      	movs	r0, #0
 8009476:	f00a fc4d 	bl	8013d14 <fflush>
 800947a:	f00a fb92 	bl	8013ba2 <abort>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800947e:	4b99      	ldr	r3, [pc, #612]	; (80096e4 <tcp_process+0x294>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	d053      	beq.n	8009532 <tcp_process+0xe2>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	7d1b      	ldrb	r3, [r3, #20]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d108      	bne.n	80094a4 <tcp_process+0x54>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009496:	4b94      	ldr	r3, [pc, #592]	; (80096e8 <tcp_process+0x298>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d123      	bne.n	80094e6 <tcp_process+0x96>
        acceptable = 1;
 800949e:	2301      	movs	r3, #1
 80094a0:	76fb      	strb	r3, [r7, #27]
 80094a2:	e020      	b.n	80094e6 <tcp_process+0x96>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a8:	4b90      	ldr	r3, [pc, #576]	; (80096ec <tcp_process+0x29c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d102      	bne.n	80094b6 <tcp_process+0x66>
        acceptable = 1;
 80094b0:	2301      	movs	r3, #1
 80094b2:	76fb      	strb	r3, [r7, #27]
 80094b4:	e017      	b.n	80094e6 <tcp_process+0x96>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80094b6:	4b8d      	ldr	r3, [pc, #564]	; (80096ec <tcp_process+0x29c>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	db10      	blt.n	80094e6 <tcp_process+0x96>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80094cc:	441a      	add	r2, r3
 80094ce:	4b87      	ldr	r3, [pc, #540]	; (80096ec <tcp_process+0x29c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	db06      	blt.n	80094e6 <tcp_process+0x96>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8b5b      	ldrh	r3, [r3, #26]
 80094dc:	f043 0302 	orr.w	r3, r3, #2
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80094e6:	7efb      	ldrb	r3, [r7, #27]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d020      	beq.n	800952e <tcp_process+0xde>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7d1b      	ldrb	r3, [r3, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10b      	bne.n	800950c <tcp_process+0xbc>
 80094f4:	4b78      	ldr	r3, [pc, #480]	; (80096d8 <tcp_process+0x288>)
 80094f6:	f240 323b 	movw	r2, #827	; 0x33b
 80094fa:	497d      	ldr	r1, [pc, #500]	; (80096f0 <tcp_process+0x2a0>)
 80094fc:	4878      	ldr	r0, [pc, #480]	; (80096e0 <tcp_process+0x290>)
 80094fe:	f00a fb07 	bl	8013b10 <iprintf>
 8009502:	2000      	movs	r0, #0
 8009504:	f00a fc06 	bl	8013d14 <fflush>
 8009508:	f00a fb4b 	bl	8013ba2 <abort>
      recv_flags |= TF_RESET;
 800950c:	4b79      	ldr	r3, [pc, #484]	; (80096f4 <tcp_process+0x2a4>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f043 0308 	orr.w	r3, r3, #8
 8009514:	b2da      	uxtb	r2, r3
 8009516:	4b77      	ldr	r3, [pc, #476]	; (80096f4 <tcp_process+0x2a4>)
 8009518:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8b5b      	ldrh	r3, [r3, #26]
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009528:	f06f 030d 	mvn.w	r3, #13
 800952c:	e3a1      	b.n	8009c72 <tcp_process+0x822>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	e39f      	b.n	8009c72 <tcp_process+0x822>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009532:	4b6c      	ldr	r3, [pc, #432]	; (80096e4 <tcp_process+0x294>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d010      	beq.n	8009560 <tcp_process+0x110>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7d1b      	ldrb	r3, [r3, #20]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d00c      	beq.n	8009560 <tcp_process+0x110>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7d1b      	ldrb	r3, [r3, #20]
 800954a:	2b03      	cmp	r3, #3
 800954c:	d008      	beq.n	8009560 <tcp_process+0x110>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	8b5b      	ldrh	r3, [r3, #26]
 8009552:	f043 0302 	orr.w	r3, r3, #2
 8009556:	b29a      	uxth	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	e388      	b.n	8009c72 <tcp_process+0x822>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	8b5b      	ldrh	r3, [r3, #26]
 8009564:	f003 0310 	and.w	r3, r3, #16
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <tcp_process+0x124>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800956c:	4b62      	ldr	r3, [pc, #392]	; (80096f8 <tcp_process+0x2a8>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fc93 	bl	800aeb0 <tcp_parseopt>

  if (flags & TCP_SYN) {
 800958a:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <tcp_process+0x294>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <tcp_process+0x15a>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7d1b      	ldrb	r3, [r3, #20]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d005      	beq.n	80095aa <tcp_process+0x15a>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7d1b      	ldrb	r3, [r3, #20]
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d001      	beq.n	80095aa <tcp_process+0x15a>
      return ERR_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e363      	b.n	8009c72 <tcp_process+0x822>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7d1b      	ldrb	r3, [r3, #20]
 80095ae:	3b02      	subs	r3, #2
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	f200 834e 	bhi.w	8009c52 <tcp_process+0x802>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <tcp_process+0x16c>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095dd 	.word	0x080095dd
 80095c0:	0800981b 	.word	0x0800981b
 80095c4:	080099d1 	.word	0x080099d1
 80095c8:	080099fb 	.word	0x080099fb
 80095cc:	08009ae9 	.word	0x08009ae9
 80095d0:	080099d1 	.word	0x080099d1
 80095d4:	08009b75 	.word	0x08009b75
 80095d8:	08009c1d 	.word	0x08009c1d
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80095dc:	4b41      	ldr	r3, [pc, #260]	; (80096e4 <tcp_process+0x294>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 0310 	and.w	r3, r3, #16
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80eb 	beq.w	80097c0 <tcp_process+0x370>
 80095ea:	4b3e      	ldr	r3, [pc, #248]	; (80096e4 <tcp_process+0x294>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 80e4 	beq.w	80097c0 <tcp_process+0x370>
          && (ackno == pcb->lastack + 1)) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	4b3a      	ldr	r3, [pc, #232]	; (80096e8 <tcp_process+0x298>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	f040 80dc 	bne.w	80097c0 <tcp_process+0x370>
        pcb->rcv_nxt = seqno + 1;
 8009608:	4b38      	ldr	r3, [pc, #224]	; (80096ec <tcp_process+0x29c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800961a:	4b33      	ldr	r3, [pc, #204]	; (80096e8 <tcp_process+0x298>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009622:	4b36      	ldr	r3, [pc, #216]	; (80096fc <tcp_process+0x2ac>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	89db      	ldrh	r3, [r3, #14]
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800963c:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <tcp_process+0x29c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2204      	movs	r2, #4
 800964a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fa fda7 	bl	80041a8 <ip4_route>
 800965a:	4601      	mov	r1, r0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3304      	adds	r3, #4
 8009660:	461a      	mov	r2, r3
 8009662:	4620      	mov	r0, r4
 8009664:	f7fe ff98 	bl	8008598 <tcp_eff_send_mss_netif>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009674:	009a      	lsls	r2, r3, #2
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009680:	428b      	cmp	r3, r1
 8009682:	bf38      	it	cc
 8009684:	460b      	movcc	r3, r1
 8009686:	429a      	cmp	r2, r3
 8009688:	d204      	bcs.n	8009694 <tcp_process+0x244>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	b29b      	uxth	r3, r3
 8009692:	e00d      	b.n	80096b0 <tcp_process+0x260>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	f241 121c 	movw	r2, #4380	; 0x111c
 800969e:	4293      	cmp	r3, r2
 80096a0:	d904      	bls.n	80096ac <tcp_process+0x25c>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	e001      	b.n	80096b0 <tcp_process+0x260>
 80096ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d121      	bne.n	8009704 <tcp_process+0x2b4>
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <tcp_process+0x288>)
 80096c2:	f240 3277 	movw	r2, #887	; 0x377
 80096c6:	490e      	ldr	r1, [pc, #56]	; (8009700 <tcp_process+0x2b0>)
 80096c8:	4805      	ldr	r0, [pc, #20]	; (80096e0 <tcp_process+0x290>)
 80096ca:	f00a fa21 	bl	8013b10 <iprintf>
 80096ce:	2000      	movs	r0, #0
 80096d0:	f00a fb20 	bl	8013d14 <fflush>
 80096d4:	f00a fa65 	bl	8013ba2 <abort>
 80096d8:	08016a08 	.word	0x08016a08
 80096dc:	08016c30 	.word	0x08016c30
 80096e0:	08016a44 	.word	0x08016a44
 80096e4:	20000730 	.word	0x20000730
 80096e8:	20000728 	.word	0x20000728
 80096ec:	20000724 	.word	0x20000724
 80096f0:	08016c4c 	.word	0x08016c4c
 80096f4:	20000731 	.word	0x20000731
 80096f8:	200022c8 	.word	0x200022c8
 80096fc:	20000714 	.word	0x20000714
 8009700:	08016c6c 	.word	0x08016c6c
        --pcb->snd_queuelen;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009718:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d116      	bne.n	800974e <tcp_process+0x2fe>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009724:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <tcp_process+0x2f4>
 800972c:	4b9b      	ldr	r3, [pc, #620]	; (800999c <tcp_process+0x54c>)
 800972e:	f240 327f 	movw	r2, #895	; 0x37f
 8009732:	499b      	ldr	r1, [pc, #620]	; (80099a0 <tcp_process+0x550>)
 8009734:	489b      	ldr	r0, [pc, #620]	; (80099a4 <tcp_process+0x554>)
 8009736:	f00a f9eb 	bl	8013b10 <iprintf>
 800973a:	2000      	movs	r0, #0
 800973c:	f00a faea 	bl	8013d14 <fflush>
 8009740:	f00a fa2f 	bl	8013ba2 <abort>
          pcb->unsent = rseg->next;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	66da      	str	r2, [r3, #108]	; 0x6c
 800974c:	e003      	b.n	8009756 <tcp_process+0x306>
        } else {
          pcb->unacked = rseg->next;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009756:	69f8      	ldr	r0, [r7, #28]
 8009758:	f7fe fb14 	bl	8007d84 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <tcp_process+0x31e>
          pcb->rtime = -1;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800976a:	861a      	strh	r2, [r3, #48]	; 0x30
 800976c:	e006      	b.n	800977c <tcp_process+0x32c>
        } else {
          pcb->rtime = 0;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <tcp_process+0x34c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6910      	ldr	r0, [r2, #16]
 8009790:	2200      	movs	r2, #0
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	76bb      	strb	r3, [r7, #26]
 800979a:	e001      	b.n	80097a0 <tcp_process+0x350>
 800979c:	2300      	movs	r3, #0
 800979e:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80097a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80097a4:	f113 0f0d 	cmn.w	r3, #13
 80097a8:	d102      	bne.n	80097b0 <tcp_process+0x360>
          return ERR_ABRT;
 80097aa:	f06f 030c 	mvn.w	r3, #12
 80097ae:	e260      	b.n	8009c72 <tcp_process+0x822>
        }
        tcp_ack_now(pcb);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	8b5b      	ldrh	r3, [r3, #26]
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80097be:	e24a      	b.n	8009c56 <tcp_process+0x806>
      else if (flags & TCP_ACK) {
 80097c0:	4b79      	ldr	r3, [pc, #484]	; (80099a8 <tcp_process+0x558>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8244 	beq.w	8009c56 <tcp_process+0x806>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097ce:	4b77      	ldr	r3, [pc, #476]	; (80099ac <tcp_process+0x55c>)
 80097d0:	6819      	ldr	r1, [r3, #0]
 80097d2:	4b77      	ldr	r3, [pc, #476]	; (80099b0 <tcp_process+0x560>)
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	4b76      	ldr	r3, [pc, #472]	; (80099b4 <tcp_process+0x564>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097de:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <tcp_process+0x568>)
 80097e0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097e2:	885b      	ldrh	r3, [r3, #2]
 80097e4:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097e6:	4a74      	ldr	r2, [pc, #464]	; (80099b8 <tcp_process+0x568>)
 80097e8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097ea:	8812      	ldrh	r2, [r2, #0]
 80097ec:	b292      	uxth	r2, r2
 80097ee:	9202      	str	r2, [sp, #8]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	4b72      	ldr	r3, [pc, #456]	; (80099bc <tcp_process+0x56c>)
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4b72      	ldr	r3, [pc, #456]	; (80099c0 <tcp_process+0x570>)
 80097f8:	4602      	mov	r2, r0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f003 fb78 	bl	800cef0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009806:	2b05      	cmp	r3, #5
 8009808:	f200 8225 	bhi.w	8009c56 <tcp_process+0x806>
          pcb->rtime = 0;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f003 f870 	bl	800c8f8 <tcp_rexmit_rto>
      break;
 8009818:	e21d      	b.n	8009c56 <tcp_process+0x806>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 800981a:	4b63      	ldr	r3, [pc, #396]	; (80099a8 <tcp_process+0x558>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <tcp_process+0x3ee>
        if (seqno == pcb->rcv_nxt - 1) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	1e5a      	subs	r2, r3, #1
 800982c:	4b61      	ldr	r3, [pc, #388]	; (80099b4 <tcp_process+0x564>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	f040 8212 	bne.w	8009c5a <tcp_process+0x80a>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f003 f884 	bl	800c944 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 800983c:	e20d      	b.n	8009c5a <tcp_process+0x80a>
      } else if (flags & TCP_ACK) {
 800983e:	4b5a      	ldr	r3, [pc, #360]	; (80099a8 <tcp_process+0x558>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f003 0310 	and.w	r3, r3, #16
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8207 	beq.w	8009c5a <tcp_process+0x80a>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800984c:	4b57      	ldr	r3, [pc, #348]	; (80099ac <tcp_process+0x55c>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	f2c0 8084 	blt.w	8009966 <tcp_process+0x516>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009862:	4b52      	ldr	r3, [pc, #328]	; (80099ac <tcp_process+0x55c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	db7c      	blt.n	8009966 <tcp_process+0x516>
          pcb->state = ESTABLISHED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2204      	movs	r2, #4
 8009870:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <tcp_process+0x430>
            err = ERR_VAL;
 800987a:	23fa      	movs	r3, #250	; 0xfa
 800987c:	76bb      	strb	r3, [r7, #26]
 800987e:	e022      	b.n	80098c6 <tcp_process+0x476>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <tcp_process+0x452>
 800988a:	4b44      	ldr	r3, [pc, #272]	; (800999c <tcp_process+0x54c>)
 800988c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8009890:	494c      	ldr	r1, [pc, #304]	; (80099c4 <tcp_process+0x574>)
 8009892:	4844      	ldr	r0, [pc, #272]	; (80099a4 <tcp_process+0x554>)
 8009894:	f00a f93c 	bl	8013b10 <iprintf>
 8009898:	2000      	movs	r0, #0
 800989a:	f00a fa3b 	bl	8013d14 <fflush>
 800989e:	f00a f980 	bl	8013ba2 <abort>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <tcp_process+0x472>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6910      	ldr	r0, [r2, #16]
 80098b6:	2200      	movs	r2, #0
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4798      	blx	r3
 80098bc:	4603      	mov	r3, r0
 80098be:	76bb      	strb	r3, [r7, #26]
 80098c0:	e001      	b.n	80098c6 <tcp_process+0x476>
 80098c2:	23f0      	movs	r3, #240	; 0xf0
 80098c4:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 80098c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <tcp_process+0x494>
            if (err != ERR_ABRT) {
 80098ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80098d2:	f113 0f0d 	cmn.w	r3, #13
 80098d6:	d002      	beq.n	80098de <tcp_process+0x48e>
              tcp_abort(pcb);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fd fb2d 	bl	8006f38 <tcp_abort>
            return ERR_ABRT;
 80098de:	f06f 030c 	mvn.w	r3, #12
 80098e2:	e1c6      	b.n	8009c72 <tcp_process+0x822>
          tcp_receive(pcb);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fae1 	bl	8009eac <tcp_receive>
          if (recv_acked != 0) {
 80098ea:	4b37      	ldr	r3, [pc, #220]	; (80099c8 <tcp_process+0x578>)
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <tcp_process+0x4ae>
            recv_acked--;
 80098f2:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <tcp_process+0x578>)
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	4b33      	ldr	r3, [pc, #204]	; (80099c8 <tcp_process+0x578>)
 80098fc:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009902:	009a      	lsls	r2, r3, #2
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	f241 111c 	movw	r1, #4380	; 0x111c
 800990e:	428b      	cmp	r3, r1
 8009910:	bf38      	it	cc
 8009912:	460b      	movcc	r3, r1
 8009914:	429a      	cmp	r2, r3
 8009916:	d204      	bcs.n	8009922 <tcp_process+0x4d2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	b29b      	uxth	r3, r3
 8009920:	e00d      	b.n	800993e <tcp_process+0x4ee>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	f241 121c 	movw	r2, #4380	; 0x111c
 800992c:	4293      	cmp	r3, r2
 800992e:	d904      	bls.n	800993a <tcp_process+0x4ea>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	b29b      	uxth	r3, r3
 8009938:	e001      	b.n	800993e <tcp_process+0x4ee>
 800993a:	f241 131c 	movw	r3, #4380	; 0x111c
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009944:	4b21      	ldr	r3, [pc, #132]	; (80099cc <tcp_process+0x57c>)
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	d024      	beq.n	800999a <tcp_process+0x54a>
            tcp_ack_now(pcb);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	8b5b      	ldrh	r3, [r3, #26]
 8009954:	f043 0302 	orr.w	r3, r3, #2
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2207      	movs	r2, #7
 8009962:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009964:	e019      	b.n	800999a <tcp_process+0x54a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <tcp_process+0x55c>)
 8009968:	6819      	ldr	r1, [r3, #0]
 800996a:	4b11      	ldr	r3, [pc, #68]	; (80099b0 <tcp_process+0x560>)
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <tcp_process+0x564>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <tcp_process+0x568>)
 8009978:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800997e:	4a0e      	ldr	r2, [pc, #56]	; (80099b8 <tcp_process+0x568>)
 8009980:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009982:	8812      	ldrh	r2, [r2, #0]
 8009984:	b292      	uxth	r2, r2
 8009986:	9202      	str	r2, [sp, #8]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <tcp_process+0x56c>)
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <tcp_process+0x570>)
 8009990:	4602      	mov	r2, r0
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f003 faac 	bl	800cef0 <tcp_rst>
      break;
 8009998:	e15f      	b.n	8009c5a <tcp_process+0x80a>
 800999a:	e15e      	b.n	8009c5a <tcp_process+0x80a>
 800999c:	08016a08 	.word	0x08016a08
 80099a0:	08016c84 	.word	0x08016c84
 80099a4:	08016a44 	.word	0x08016a44
 80099a8:	20000730 	.word	0x20000730
 80099ac:	20000728 	.word	0x20000728
 80099b0:	2000072e 	.word	0x2000072e
 80099b4:	20000724 	.word	0x20000724
 80099b8:	20000714 	.word	0x20000714
 80099bc:	20000890 	.word	0x20000890
 80099c0:	20000894 	.word	0x20000894
 80099c4:	08016c98 	.word	0x08016c98
 80099c8:	2000072c 	.word	0x2000072c
 80099cc:	20000731 	.word	0x20000731
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fa6b 	bl	8009eac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80099d6:	4b8b      	ldr	r3, [pc, #556]	; (8009c04 <tcp_process+0x7b4>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 813d 	beq.w	8009c5e <tcp_process+0x80e>
        tcp_ack_now(pcb);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	8b5b      	ldrh	r3, [r3, #26]
 80099e8:	f043 0302 	orr.w	r3, r3, #2
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2207      	movs	r2, #7
 80099f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80099f8:	e131      	b.n	8009c5e <tcp_process+0x80e>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa56 	bl	8009eac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a00:	4b80      	ldr	r3, [pc, #512]	; (8009c04 <tcp_process+0x7b4>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d056      	beq.n	8009aba <tcp_process+0x66a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a0c:	4b7e      	ldr	r3, [pc, #504]	; (8009c08 <tcp_process+0x7b8>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d045      	beq.n	8009aa4 <tcp_process+0x654>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a1c:	4b7b      	ldr	r3, [pc, #492]	; (8009c0c <tcp_process+0x7bc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d13f      	bne.n	8009aa4 <tcp_process+0x654>
            pcb->unsent == NULL) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d13b      	bne.n	8009aa4 <tcp_process+0x654>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8b5b      	ldrh	r3, [r3, #26]
 8009a30:	f043 0302 	orr.w	r3, r3, #2
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fe fc86 	bl	800834c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009a40:	4b73      	ldr	r3, [pc, #460]	; (8009c10 <tcp_process+0x7c0>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d105      	bne.n	8009a56 <tcp_process+0x606>
 8009a4a:	4b71      	ldr	r3, [pc, #452]	; (8009c10 <tcp_process+0x7c0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	4a6f      	ldr	r2, [pc, #444]	; (8009c10 <tcp_process+0x7c0>)
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	e013      	b.n	8009a7e <tcp_process+0x62e>
 8009a56:	4b6e      	ldr	r3, [pc, #440]	; (8009c10 <tcp_process+0x7c0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e00c      	b.n	8009a78 <tcp_process+0x628>
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d104      	bne.n	8009a72 <tcp_process+0x622>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	60da      	str	r2, [r3, #12]
 8009a70:	e005      	b.n	8009a7e <tcp_process+0x62e>
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1ef      	bne.n	8009a5e <tcp_process+0x60e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	60da      	str	r2, [r3, #12]
 8009a84:	4b63      	ldr	r3, [pc, #396]	; (8009c14 <tcp_process+0x7c4>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009a90:	4b61      	ldr	r3, [pc, #388]	; (8009c18 <tcp_process+0x7c8>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	60da      	str	r2, [r3, #12]
 8009a98:	4a5f      	ldr	r2, [pc, #380]	; (8009c18 <tcp_process+0x7c8>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	f003 fbf1 	bl	800d284 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009aa2:	e0de      	b.n	8009c62 <tcp_process+0x812>
          tcp_ack_now(pcb);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8b5b      	ldrh	r3, [r3, #26]
 8009aa8:	f043 0302 	orr.w	r3, r3, #2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2208      	movs	r2, #8
 8009ab6:	751a      	strb	r2, [r3, #20]
      break;
 8009ab8:	e0d3      	b.n	8009c62 <tcp_process+0x812>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009aba:	4b53      	ldr	r3, [pc, #332]	; (8009c08 <tcp_process+0x7b8>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80cd 	beq.w	8009c62 <tcp_process+0x812>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009acc:	4b4f      	ldr	r3, [pc, #316]	; (8009c0c <tcp_process+0x7bc>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	f040 80c6 	bne.w	8009c62 <tcp_process+0x812>
                 pcb->unsent == NULL) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f040 80c1 	bne.w	8009c62 <tcp_process+0x812>
        pcb->state = FIN_WAIT_2;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2206      	movs	r2, #6
 8009ae4:	751a      	strb	r2, [r3, #20]
      break;
 8009ae6:	e0bc      	b.n	8009c62 <tcp_process+0x812>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9df 	bl	8009eac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009aee:	4b45      	ldr	r3, [pc, #276]	; (8009c04 <tcp_process+0x7b4>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 80b5 	beq.w	8009c66 <tcp_process+0x816>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8b5b      	ldrh	r3, [r3, #26]
 8009b00:	f043 0302 	orr.w	r3, r3, #2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7fe fc1e 	bl	800834c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b10:	4b3f      	ldr	r3, [pc, #252]	; (8009c10 <tcp_process+0x7c0>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d105      	bne.n	8009b26 <tcp_process+0x6d6>
 8009b1a:	4b3d      	ldr	r3, [pc, #244]	; (8009c10 <tcp_process+0x7c0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	4a3b      	ldr	r2, [pc, #236]	; (8009c10 <tcp_process+0x7c0>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	e013      	b.n	8009b4e <tcp_process+0x6fe>
 8009b26:	4b3a      	ldr	r3, [pc, #232]	; (8009c10 <tcp_process+0x7c0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	e00c      	b.n	8009b48 <tcp_process+0x6f8>
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d104      	bne.n	8009b42 <tcp_process+0x6f2>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	60da      	str	r2, [r3, #12]
 8009b40:	e005      	b.n	8009b4e <tcp_process+0x6fe>
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1ef      	bne.n	8009b2e <tcp_process+0x6de>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	60da      	str	r2, [r3, #12]
 8009b54:	4b2f      	ldr	r3, [pc, #188]	; (8009c14 <tcp_process+0x7c4>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	220a      	movs	r2, #10
 8009b5e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b60:	4b2d      	ldr	r3, [pc, #180]	; (8009c18 <tcp_process+0x7c8>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60da      	str	r2, [r3, #12]
 8009b68:	4a2b      	ldr	r2, [pc, #172]	; (8009c18 <tcp_process+0x7c8>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	f003 fb89 	bl	800d284 <tcp_timer_needed>
      }
      break;
 8009b72:	e078      	b.n	8009c66 <tcp_process+0x816>
    case CLOSING:
      tcp_receive(pcb);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f999 	bl	8009eac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b7a:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <tcp_process+0x7b8>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d071      	beq.n	8009c6a <tcp_process+0x81a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b8a:	4b20      	ldr	r3, [pc, #128]	; (8009c0c <tcp_process+0x7bc>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d16b      	bne.n	8009c6a <tcp_process+0x81a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d167      	bne.n	8009c6a <tcp_process+0x81a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fe fbd6 	bl	800834c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009ba0:	4b1b      	ldr	r3, [pc, #108]	; (8009c10 <tcp_process+0x7c0>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d105      	bne.n	8009bb6 <tcp_process+0x766>
 8009baa:	4b19      	ldr	r3, [pc, #100]	; (8009c10 <tcp_process+0x7c0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <tcp_process+0x7c0>)
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e013      	b.n	8009bde <tcp_process+0x78e>
 8009bb6:	4b16      	ldr	r3, [pc, #88]	; (8009c10 <tcp_process+0x7c0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e00c      	b.n	8009bd8 <tcp_process+0x788>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d104      	bne.n	8009bd2 <tcp_process+0x782>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	60da      	str	r2, [r3, #12]
 8009bd0:	e005      	b.n	8009bde <tcp_process+0x78e>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1ef      	bne.n	8009bbe <tcp_process+0x76e>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	60da      	str	r2, [r3, #12]
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <tcp_process+0x7c4>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	220a      	movs	r2, #10
 8009bee:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <tcp_process+0x7c8>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60da      	str	r2, [r3, #12]
 8009bf8:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <tcp_process+0x7c8>)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	f003 fb41 	bl	800d284 <tcp_timer_needed>
      }
      break;
 8009c02:	e032      	b.n	8009c6a <tcp_process+0x81a>
 8009c04:	20000731 	.word	0x20000731
 8009c08:	20000730 	.word	0x20000730
 8009c0c:	20000728 	.word	0x20000728
 8009c10:	200022c4 	.word	0x200022c4
 8009c14:	200022c0 	.word	0x200022c0
 8009c18:	200022d4 	.word	0x200022d4
    case LAST_ACK:
      tcp_receive(pcb);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f945 	bl	8009eac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c22:	4b16      	ldr	r3, [pc, #88]	; (8009c7c <tcp_process+0x82c>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d01f      	beq.n	8009c6e <tcp_process+0x81e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c32:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <tcp_process+0x830>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d119      	bne.n	8009c6e <tcp_process+0x81e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d115      	bne.n	8009c6e <tcp_process+0x81e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009c42:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <tcp_process+0x834>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	f043 0310 	orr.w	r3, r3, #16
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <tcp_process+0x834>)
 8009c4e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009c50:	e00d      	b.n	8009c6e <tcp_process+0x81e>
    default:
      break;
 8009c52:	bf00      	nop
 8009c54:	e00c      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c56:	bf00      	nop
 8009c58:	e00a      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e008      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e006      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c62:	bf00      	nop
 8009c64:	e004      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c66:	bf00      	nop
 8009c68:	e002      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c6a:	bf00      	nop
 8009c6c:	e000      	b.n	8009c70 <tcp_process+0x820>
      break;
 8009c6e:	bf00      	nop
  }
  return ERR_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3724      	adds	r7, #36	; 0x24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd90      	pop	{r4, r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000730 	.word	0x20000730
 8009c80:	20000728 	.word	0x20000728
 8009c84:	20000731 	.word	0x20000731

08009c88 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009c88:	b5b0      	push	{r4, r5, r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10b      	bne.n	8009cb0 <tcp_oos_insert_segment+0x28>
 8009c98:	4b3d      	ldr	r3, [pc, #244]	; (8009d90 <tcp_oos_insert_segment+0x108>)
 8009c9a:	f240 422c 	movw	r2, #1068	; 0x42c
 8009c9e:	493d      	ldr	r1, [pc, #244]	; (8009d94 <tcp_oos_insert_segment+0x10c>)
 8009ca0:	483d      	ldr	r0, [pc, #244]	; (8009d98 <tcp_oos_insert_segment+0x110>)
 8009ca2:	f009 ff35 	bl	8013b10 <iprintf>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f00a f834 	bl	8013d14 <fflush>
 8009cac:	f009 ff79 	bl	8013ba2 <abort>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	899b      	ldrh	r3, [r3, #12]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fa f901 	bl	8003ec0 <lwip_htons>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d027      	beq.n	8009d1a <tcp_oos_insert_segment+0x92>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009cca:	6838      	ldr	r0, [r7, #0]
 8009ccc:	f7fe f846 	bl	8007d5c <tcp_segs_free>
    next = NULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	e055      	b.n	8009d82 <tcp_oos_insert_segment+0xfa>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fa f8ee 	bl	8003ec0 <lwip_htons>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00c      	beq.n	8009d0a <tcp_oos_insert_segment+0x82>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691c      	ldr	r4, [r3, #16]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	899b      	ldrh	r3, [r3, #12]
 8009cfa:	b29d      	uxth	r5, r3
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	f7fa f8df 	bl	8003ec0 <lwip_htons>
 8009d02:	4603      	mov	r3, r0
 8009d04:	432b      	orrs	r3, r5
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7fe f835 	bl	8007d84 <tcp_seg_free>
    while (next &&
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00e      	beq.n	8009d3e <tcp_oos_insert_segment+0xb6>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	891b      	ldrh	r3, [r3, #8]
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <tcp_oos_insert_segment+0x114>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	8909      	ldrh	r1, [r1, #8]
 8009d36:	440b      	add	r3, r1
 8009d38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dacb      	bge.n	8009cd6 <tcp_oos_insert_segment+0x4e>
    }
    if (next &&
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01e      	beq.n	8009d82 <tcp_oos_insert_segment+0xfa>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	891b      	ldrh	r3, [r3, #8]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4b12      	ldr	r3, [pc, #72]	; (8009d9c <tcp_oos_insert_segment+0x114>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	440b      	add	r3, r1
 8009d56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da12      	bge.n	8009d82 <tcp_oos_insert_segment+0xfa>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <tcp_oos_insert_segment+0x114>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	891b      	ldrh	r3, [r3, #8]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7fc f839 	bl	8005df4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	601a      	str	r2, [r3, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d90:	08016a08 	.word	0x08016a08
 8009d94:	08016cb8 	.word	0x08016cb8
 8009d98:	08016a44 	.word	0x08016a44
 8009d9c:	20000724 	.word	0x20000724

08009da0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009dae:	e048      	b.n	8009e42 <tcp_free_acked_segments+0xa2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fc fa12 	bl	80061e8 <pbuf_clen>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dce:	8a7a      	ldrh	r2, [r7, #18]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d90b      	bls.n	8009dec <tcp_free_acked_segments+0x4c>
 8009dd4:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <tcp_free_acked_segments+0xf4>)
 8009dd6:	f240 4264 	movw	r2, #1124	; 0x464
 8009dda:	492f      	ldr	r1, [pc, #188]	; (8009e98 <tcp_free_acked_segments+0xf8>)
 8009ddc:	482f      	ldr	r0, [pc, #188]	; (8009e9c <tcp_free_acked_segments+0xfc>)
 8009dde:	f009 fe97 	bl	8013b10 <iprintf>
 8009de2:	2000      	movs	r0, #0
 8009de4:	f009 ff96 	bl	8013d14 <fflush>
 8009de8:	f009 fedb 	bl	8013ba2 <abort>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009df2:	8a7b      	ldrh	r3, [r7, #18]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	891a      	ldrh	r2, [r3, #8]
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <tcp_free_acked_segments+0x100>)
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <tcp_free_acked_segments+0x100>)
 8009e0c:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009e0e:	6978      	ldr	r0, [r7, #20]
 8009e10:	f7fd ffb8 	bl	8007d84 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <tcp_free_acked_segments+0xa2>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10e      	bne.n	8009e42 <tcp_free_acked_segments+0xa2>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <tcp_free_acked_segments+0xa2>
 8009e2a:	4b1a      	ldr	r3, [pc, #104]	; (8009e94 <tcp_free_acked_segments+0xf4>)
 8009e2c:	f240 426f 	movw	r2, #1135	; 0x46f
 8009e30:	491c      	ldr	r1, [pc, #112]	; (8009ea4 <tcp_free_acked_segments+0x104>)
 8009e32:	481a      	ldr	r0, [pc, #104]	; (8009e9c <tcp_free_acked_segments+0xfc>)
 8009e34:	f009 fe6c 	bl	8013b10 <iprintf>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f009 ff6b 	bl	8013d14 <fflush>
 8009e3e:	f009 feb0 	bl	8013ba2 <abort>
  while (seg_list != NULL &&
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d020      	beq.n	8009e8a <tcp_free_acked_segments+0xea>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009e48:	4b17      	ldr	r3, [pc, #92]	; (8009ea8 <tcp_free_acked_segments+0x108>)
 8009e4a:	681c      	ldr	r4, [r3, #0]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fa f849 	bl	8003eea <lwip_htonl>
 8009e58:	4605      	mov	r5, r0
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	891b      	ldrh	r3, [r3, #8]
 8009e5e:	461e      	mov	r6, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	899b      	ldrh	r3, [r3, #12]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fa f829 	bl	8003ec0 <lwip_htons>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <tcp_free_acked_segments+0xde>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <tcp_free_acked_segments+0xe0>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4433      	add	r3, r6
 8009e82:	442b      	add	r3, r5
 8009e84:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da92      	bge.n	8009db0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e94:	08016a08 	.word	0x08016a08
 8009e98:	08016ce0 	.word	0x08016ce0
 8009e9c:	08016a44 	.word	0x08016a44
 8009ea0:	2000072c 	.word	0x2000072c
 8009ea4:	08016d08 	.word	0x08016d08
 8009ea8:	20000728 	.word	0x20000728

08009eac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009eac:	b5b0      	push	{r4, r5, r7, lr}
 8009eae:	b094      	sub	sp, #80	; 0x50
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <tcp_receive+0x26>
 8009eba:	4bab      	ldr	r3, [pc, #684]	; (800a168 <tcp_receive+0x2bc>)
 8009ebc:	f240 4287 	movw	r2, #1159	; 0x487
 8009ec0:	49aa      	ldr	r1, [pc, #680]	; (800a16c <tcp_receive+0x2c0>)
 8009ec2:	48ab      	ldr	r0, [pc, #684]	; (800a170 <tcp_receive+0x2c4>)
 8009ec4:	f009 fe24 	bl	8013b10 <iprintf>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f009 ff23 	bl	8013d14 <fflush>
 8009ece:	f009 fe68 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7d1b      	ldrb	r3, [r3, #20]
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d80b      	bhi.n	8009ef2 <tcp_receive+0x46>
 8009eda:	4ba3      	ldr	r3, [pc, #652]	; (800a168 <tcp_receive+0x2bc>)
 8009edc:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8009ee0:	49a4      	ldr	r1, [pc, #656]	; (800a174 <tcp_receive+0x2c8>)
 8009ee2:	48a3      	ldr	r0, [pc, #652]	; (800a170 <tcp_receive+0x2c4>)
 8009ee4:	f009 fe14 	bl	8013b10 <iprintf>
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f009 ff13 	bl	8013d14 <fflush>
 8009eee:	f009 fe58 	bl	8013ba2 <abort>

  if (flags & TCP_ACK) {
 8009ef2:	4ba1      	ldr	r3, [pc, #644]	; (800a178 <tcp_receive+0x2cc>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	f003 0310 	and.w	r3, r3, #16
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 8263 	beq.w	800a3c6 <tcp_receive+0x51a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f06:	461a      	mov	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	4413      	add	r3, r2
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f14:	4b99      	ldr	r3, [pc, #612]	; (800a17c <tcp_receive+0x2d0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	db1b      	blt.n	8009f56 <tcp_receive+0xaa>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f22:	4b96      	ldr	r3, [pc, #600]	; (800a17c <tcp_receive+0x2d0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d106      	bne.n	8009f38 <tcp_receive+0x8c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f2e:	4b94      	ldr	r3, [pc, #592]	; (800a180 <tcp_receive+0x2d4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	db0e      	blt.n	8009f56 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f3c:	4b90      	ldr	r3, [pc, #576]	; (800a180 <tcp_receive+0x2d4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d125      	bne.n	8009f90 <tcp_receive+0xe4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009f44:	4b8f      	ldr	r3, [pc, #572]	; (800a184 <tcp_receive+0x2d8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	89db      	ldrh	r3, [r3, #14]
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d91c      	bls.n	8009f90 <tcp_receive+0xe4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009f56:	4b8b      	ldr	r3, [pc, #556]	; (800a184 <tcp_receive+0x2d8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	89db      	ldrh	r3, [r3, #14]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d205      	bcs.n	8009f80 <tcp_receive+0xd4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009f80:	4b7e      	ldr	r3, [pc, #504]	; (800a17c <tcp_receive+0x2d0>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009f88:	4b7d      	ldr	r3, [pc, #500]	; (800a180 <tcp_receive+0x2d4>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f94:	4b7a      	ldr	r3, [pc, #488]	; (800a180 <tcp_receive+0x2d4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	db58      	blt.n	800a050 <tcp_receive+0x1a4>
      /* Clause 2 */
      if (tcplen == 0) {
 8009f9e:	4b7a      	ldr	r3, [pc, #488]	; (800a188 <tcp_receive+0x2dc>)
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f040 81af 	bne.w	800a306 <tcp_receive+0x45a>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009fb2:	441a      	add	r2, r3
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	f040 81a5 	bne.w	800a306 <tcp_receive+0x45a>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f2c0 819f 	blt.w	800a306 <tcp_receive+0x45a>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fcc:	4b6c      	ldr	r3, [pc, #432]	; (800a180 <tcp_receive+0x2d4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	f040 8198 	bne.w	800a306 <tcp_receive+0x45a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fdc:	3301      	adds	r3, #1
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d907      	bls.n	8009ffa <tcp_receive+0x14e>
                ++pcb->dupacks;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a000:	2b03      	cmp	r3, #3
 800a002:	d91b      	bls.n	800a03c <tcp_receive+0x190>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a00e:	4413      	add	r3, r2
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a018:	429a      	cmp	r2, r3
 800a01a:	d30a      	bcc.n	800a032 <tcp_receive+0x186>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a026:	4413      	add	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a030:	e004      	b.n	800a03c <tcp_receive+0x190>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a038:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a042:	2b02      	cmp	r3, #2
 800a044:	f240 815f 	bls.w	800a306 <tcp_receive+0x45a>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f002 fced 	bl	800ca28 <tcp_rexmit_fast>
 800a04e:	e15a      	b.n	800a306 <tcp_receive+0x45a>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a050:	4b4b      	ldr	r3, [pc, #300]	; (800a180 <tcp_receive+0x2d4>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f2c0 814d 	blt.w	800a2fc <tcp_receive+0x450>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a066:	4b46      	ldr	r3, [pc, #280]	; (800a180 <tcp_receive+0x2d4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f2c0 8145 	blt.w	800a2fc <tcp_receive+0x450>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8b5b      	ldrh	r3, [r3, #26]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d010      	beq.n	800a0a0 <tcp_receive+0x1f4>
        tcp_clear_flags(pcb, TF_INFR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	8b5b      	ldrh	r3, [r3, #26]
 800a082:	f023 0304 	bic.w	r3, r3, #4
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a0ae:	10db      	asrs	r3, r3, #3
 800a0b0:	b21b      	sxth	r3, r3
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4413      	add	r3, r2
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	b21a      	sxth	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a0c8:	4b2d      	ldr	r3, [pc, #180]	; (800a180 <tcp_receive+0x2d4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	867b      	strh	r3, [r7, #50]	; 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a0e0:	4b27      	ldr	r3, [pc, #156]	; (800a180 <tcp_receive+0x2d4>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	7d1b      	ldrb	r3, [r3, #20]
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	f240 8096 	bls.w	800a21e <tcp_receive+0x372>
        if (pcb->cwnd < pcb->ssthresh) {
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d244      	bcs.n	800a18c <tcp_receive+0x2e0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8b5b      	ldrh	r3, [r3, #26]
 800a106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <tcp_receive+0x266>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <tcp_receive+0x268>
 800a112:	2302      	movs	r3, #2
 800a114:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a118:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a122:	fb12 f303 	smulbb	r3, r2, r3
 800a126:	b29a      	uxth	r2, r3
 800a128:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a12a:	4293      	cmp	r3, r2
 800a12c:	bf28      	it	cs
 800a12e:	4613      	movcs	r3, r2
 800a130:	85fb      	strh	r3, [r7, #46]	; 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a13a:	4413      	add	r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a144:	429a      	cmp	r2, r3
 800a146:	d309      	bcc.n	800a15c <tcp_receive+0x2b0>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a14e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a150:	4413      	add	r3, r2
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a15a:	e060      	b.n	800a21e <tcp_receive+0x372>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a162:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a166:	e05a      	b.n	800a21e <tcp_receive+0x372>
 800a168:	08016a08 	.word	0x08016a08
 800a16c:	08016d28 	.word	0x08016d28
 800a170:	08016a44 	.word	0x08016a44
 800a174:	08016d44 	.word	0x08016d44
 800a178:	20000730 	.word	0x20000730
 800a17c:	20000724 	.word	0x20000724
 800a180:	20000728 	.word	0x20000728
 800a184:	20000714 	.word	0x20000714
 800a188:	2000072e 	.word	0x2000072e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a192:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a194:	4413      	add	r3, r2
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d309      	bcc.n	800a1b6 <tcp_receive+0x30a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a1aa:	4413      	add	r3, r2
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a1b4:	e004      	b.n	800a1c0 <tcp_receive+0x314>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d326      	bcc.n	800a21e <tcp_receive+0x372>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1f0:	4413      	add	r3, r2
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d30a      	bcc.n	800a214 <tcp_receive+0x368>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a208:	4413      	add	r3, r2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a212:	e004      	b.n	800a21e <tcp_receive+0x372>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a21a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a226:	4aa0      	ldr	r2, [pc, #640]	; (800a4a8 <tcp_receive+0x5fc>)
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fdb9 	bl	8009da0 <tcp_free_acked_segments>
 800a22e:	4602      	mov	r2, r0
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23c:	4a9b      	ldr	r2, [pc, #620]	; (800a4ac <tcp_receive+0x600>)
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7ff fdae 	bl	8009da0 <tcp_free_acked_segments>
 800a244:	4602      	mov	r2, r0
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <tcp_receive+0x3b0>
        pcb->rtime = -1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a258:	861a      	strh	r2, [r3, #48]	; 0x30
 800a25a:	e002      	b.n	800a262 <tcp_receive+0x3b6>
      } else {
        pcb->rtime = 0;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d103      	bne.n	800a278 <tcp_receive+0x3cc>
        pcb->unsent_oversize = 0;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a27e:	4b8c      	ldr	r3, [pc, #560]	; (800a4b0 <tcp_receive+0x604>)
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	4413      	add	r3, r2
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8b5b      	ldrh	r3, [r3, #26]
 800a290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a294:	2b00      	cmp	r3, #0
 800a296:	d035      	beq.n	800a304 <tcp_receive+0x458>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d118      	bne.n	800a2d2 <tcp_receive+0x426>
          if ((pcb->unsent == NULL) ||
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <tcp_receive+0x416>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7f9 fe1a 	bl	8003eea <lwip_htonl>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2bc:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	db20      	blt.n	800a304 <tcp_receive+0x458>
            tcp_clear_flags(pcb, TF_RTO);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8b5b      	ldrh	r3, [r3, #26]
 800a2c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a2d0:	e018      	b.n	800a304 <tcp_receive+0x458>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 fe05 	bl	8003eea <lwip_htonl>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	db0b      	blt.n	800a304 <tcp_receive+0x458>
          tcp_clear_flags(pcb, TF_RTO);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8b5b      	ldrh	r3, [r3, #26]
 800a2f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a2fa:	e003      	b.n	800a304 <tcp_receive+0x458>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f002 fe3f 	bl	800cf80 <tcp_send_empty_ack>
 800a302:	e000      	b.n	800a306 <tcp_receive+0x45a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a304:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d05b      	beq.n	800a3c6 <tcp_receive+0x51a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a312:	4b68      	ldr	r3, [pc, #416]	; (800a4b4 <tcp_receive+0x608>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	da54      	bge.n	800a3c6 <tcp_receive+0x51a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a31c:	4b66      	ldr	r3, [pc, #408]	; (800a4b8 <tcp_receive+0x60c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	b29a      	uxth	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a326:	b29b      	uxth	r3, r3
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a330:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a33a:	10db      	asrs	r3, r3, #3
 800a33c:	b21b      	sxth	r3, r3
 800a33e:	b29b      	uxth	r3, r3
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	b29b      	uxth	r3, r3
 800a344:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a34e:	b29a      	uxth	r2, r3
 800a350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a354:	4413      	add	r3, r2
 800a356:	b29b      	uxth	r3, r3
 800a358:	b21a      	sxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a35e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a362:	2b00      	cmp	r3, #0
 800a364:	da05      	bge.n	800a372 <tcp_receive+0x4c6>
        m = (s16_t) - m;
 800a366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a36a:	425b      	negs	r3, r3
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a372:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a37c:	109b      	asrs	r3, r3, #2
 800a37e:	b21b      	sxth	r3, r3
 800a380:	b29b      	uxth	r3, r3
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	b29b      	uxth	r3, r3
 800a386:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a390:	b29a      	uxth	r2, r3
 800a392:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a396:	4413      	add	r3, r2
 800a398:	b29b      	uxth	r3, r3
 800a39a:	b21a      	sxth	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3a6:	10db      	asrs	r3, r3, #3
 800a3a8:	b21b      	sxth	r3, r3
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	b21a      	sxth	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a3c6:	4b3d      	ldr	r3, [pc, #244]	; (800a4bc <tcp_receive+0x610>)
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 850f 	beq.w	800adee <tcp_receive+0xf42>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7d1b      	ldrb	r3, [r3, #20]
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	f200 850a 	bhi.w	800adee <tcp_receive+0xf42>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3de:	4b38      	ldr	r3, [pc, #224]	; (800a4c0 <tcp_receive+0x614>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f2c0 809e 	blt.w	800a528 <tcp_receive+0x67c>
 800a3ec:	4b33      	ldr	r3, [pc, #204]	; (800a4bc <tcp_receive+0x610>)
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4b33      	ldr	r3, [pc, #204]	; (800a4c0 <tcp_receive+0x614>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	441a      	add	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	3b01      	subs	r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	f2c0 8090 	blt.w	800a528 <tcp_receive+0x67c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a408:	4b2e      	ldr	r3, [pc, #184]	; (800a4c4 <tcp_receive+0x618>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	64bb      	str	r3, [r7, #72]	; 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a412:	4b2b      	ldr	r3, [pc, #172]	; (800a4c0 <tcp_receive+0x614>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	62bb      	str	r3, [r7, #40]	; 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a41a:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <tcp_receive+0x618>)
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10b      	bne.n	800a43a <tcp_receive+0x58e>
 800a422:	4b29      	ldr	r3, [pc, #164]	; (800a4c8 <tcp_receive+0x61c>)
 800a424:	f240 529a 	movw	r2, #1434	; 0x59a
 800a428:	4928      	ldr	r1, [pc, #160]	; (800a4cc <tcp_receive+0x620>)
 800a42a:	4829      	ldr	r0, [pc, #164]	; (800a4d0 <tcp_receive+0x624>)
 800a42c:	f009 fb70 	bl	8013b10 <iprintf>
 800a430:	2000      	movs	r0, #0
 800a432:	f009 fc6f 	bl	8013d14 <fflush>
 800a436:	f009 fbb4 	bl	8013ba2 <abort>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a440:	4293      	cmp	r3, r2
 800a442:	d90b      	bls.n	800a45c <tcp_receive+0x5b0>
 800a444:	4b20      	ldr	r3, [pc, #128]	; (800a4c8 <tcp_receive+0x61c>)
 800a446:	f240 529b 	movw	r2, #1435	; 0x59b
 800a44a:	4922      	ldr	r1, [pc, #136]	; (800a4d4 <tcp_receive+0x628>)
 800a44c:	4820      	ldr	r0, [pc, #128]	; (800a4d0 <tcp_receive+0x624>)
 800a44e:	f009 fb5f 	bl	8013b10 <iprintf>
 800a452:	2000      	movs	r0, #0
 800a454:	f009 fc5e 	bl	8013d14 <fflush>
 800a458:	f009 fba3 	bl	8013ba2 <abort>
      off = (u16_t)off32;
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a462:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <tcp_receive+0x618>)
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	891b      	ldrh	r3, [r3, #8]
 800a468:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d90b      	bls.n	800a488 <tcp_receive+0x5dc>
 800a470:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <tcp_receive+0x61c>)
 800a472:	f240 529d 	movw	r2, #1437	; 0x59d
 800a476:	4918      	ldr	r1, [pc, #96]	; (800a4d8 <tcp_receive+0x62c>)
 800a478:	4815      	ldr	r0, [pc, #84]	; (800a4d0 <tcp_receive+0x624>)
 800a47a:	f009 fb49 	bl	8013b10 <iprintf>
 800a47e:	2000      	movs	r0, #0
 800a480:	f009 fc48 	bl	8013d14 <fflush>
 800a484:	f009 fb8d 	bl	8013ba2 <abort>
      inseg.len -= off;
 800a488:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <tcp_receive+0x618>)
 800a48a:	891a      	ldrh	r2, [r3, #8]
 800a48c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	b29a      	uxth	r2, r3
 800a494:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <tcp_receive+0x618>)
 800a496:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <tcp_receive+0x618>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	891a      	ldrh	r2, [r3, #8]
 800a49e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      while (p->len < off) {
 800a4a6:	e029      	b.n	800a4fc <tcp_receive+0x650>
 800a4a8:	08016d60 	.word	0x08016d60
 800a4ac:	08016d68 	.word	0x08016d68
 800a4b0:	2000072c 	.word	0x2000072c
 800a4b4:	20000728 	.word	0x20000728
 800a4b8:	200022c8 	.word	0x200022c8
 800a4bc:	2000072e 	.word	0x2000072e
 800a4c0:	20000724 	.word	0x20000724
 800a4c4:	20000700 	.word	0x20000700
 800a4c8:	08016a08 	.word	0x08016a08
 800a4cc:	08016d70 	.word	0x08016d70
 800a4d0:	08016a44 	.word	0x08016a44
 800a4d4:	08016d80 	.word	0x08016d80
 800a4d8:	08016d90 	.word	0x08016d90
        off -= p->len;
 800a4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4de:	895b      	ldrh	r3, [r3, #10]
 800a4e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a4ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	64bb      	str	r3, [r7, #72]	; 0x48
      while (p->len < off) {
 800a4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fe:	895b      	ldrh	r3, [r3, #10]
 800a500:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a504:	429a      	cmp	r2, r3
 800a506:	d8e9      	bhi.n	800a4dc <tcp_receive+0x630>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a50c:	4619      	mov	r1, r3
 800a50e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a510:	f7fb fd92 	bl	8006038 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a514:	4b94      	ldr	r3, [pc, #592]	; (800a768 <tcp_receive+0x8bc>)
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a51c:	4993      	ldr	r1, [pc, #588]	; (800a76c <tcp_receive+0x8c0>)
 800a51e:	600a      	str	r2, [r1, #0]
 800a520:	4a92      	ldr	r2, [pc, #584]	; (800a76c <tcp_receive+0x8c0>)
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a526:	e00d      	b.n	800a544 <tcp_receive+0x698>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a528:	4b90      	ldr	r3, [pc, #576]	; (800a76c <tcp_receive+0x8c0>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	da06      	bge.n	800a544 <tcp_receive+0x698>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8b5b      	ldrh	r3, [r3, #26]
 800a53a:	f043 0302 	orr.w	r3, r3, #2
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a544:	4b89      	ldr	r3, [pc, #548]	; (800a76c <tcp_receive+0x8c0>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f2c0 8448 	blt.w	800ade4 <tcp_receive+0xf38>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a55c:	441a      	add	r2, r3
 800a55e:	4b83      	ldr	r3, [pc, #524]	; (800a76c <tcp_receive+0x8c0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	425b      	negs	r3, r3
 800a564:	4413      	add	r3, r2
 800a566:	3b01      	subs	r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f2c0 843b 	blt.w	800ade4 <tcp_receive+0xf38>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a572:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <tcp_receive+0x8c0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	f040 82ab 	bne.w	800aad2 <tcp_receive+0xc26>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a57c:	4b7a      	ldr	r3, [pc, #488]	; (800a768 <tcp_receive+0x8bc>)
 800a57e:	891c      	ldrh	r4, [r3, #8]
 800a580:	4b79      	ldr	r3, [pc, #484]	; (800a768 <tcp_receive+0x8bc>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	4618      	mov	r0, r3
 800a58a:	f7f9 fc99 	bl	8003ec0 <lwip_htons>
 800a58e:	4603      	mov	r3, r0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <tcp_receive+0x6f2>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <tcp_receive+0x6f4>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4423      	add	r3, r4
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	4b72      	ldr	r3, [pc, #456]	; (800a770 <tcp_receive+0x8c4>)
 800a5a6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5ac:	4b70      	ldr	r3, [pc, #448]	; (800a770 <tcp_receive+0x8c4>)
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d27a      	bcs.n	800a6aa <tcp_receive+0x7fe>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5b4:	4b6c      	ldr	r3, [pc, #432]	; (800a768 <tcp_receive+0x8bc>)
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	899b      	ldrh	r3, [r3, #12]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f9 fc7f 	bl	8003ec0 <lwip_htons>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01f      	beq.n	800a60e <tcp_receive+0x762>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a5ce:	4b66      	ldr	r3, [pc, #408]	; (800a768 <tcp_receive+0x8bc>)
 800a5d0:	691c      	ldr	r4, [r3, #16]
 800a5d2:	4b65      	ldr	r3, [pc, #404]	; (800a768 <tcp_receive+0x8bc>)
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	b21b      	sxth	r3, r3
 800a5dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5e0:	b21d      	sxth	r5, r3
 800a5e2:	4b61      	ldr	r3, [pc, #388]	; (800a768 <tcp_receive+0x8bc>)
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	899b      	ldrh	r3, [r3, #12]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f9 fc68 	bl	8003ec0 <lwip_htons>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f9 fc5f 	bl	8003ec0 <lwip_htons>
 800a602:	4603      	mov	r3, r0
 800a604:	b21b      	sxth	r3, r3
 800a606:	432b      	orrs	r3, r5
 800a608:	b21b      	sxth	r3, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a612:	4b55      	ldr	r3, [pc, #340]	; (800a768 <tcp_receive+0x8bc>)
 800a614:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a616:	4b54      	ldr	r3, [pc, #336]	; (800a768 <tcp_receive+0x8bc>)
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	899b      	ldrh	r3, [r3, #12]
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f9 fc4e 	bl	8003ec0 <lwip_htons>
 800a624:	4603      	mov	r3, r0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <tcp_receive+0x790>
            inseg.len -= 1;
 800a630:	4b4d      	ldr	r3, [pc, #308]	; (800a768 <tcp_receive+0x8bc>)
 800a632:	891b      	ldrh	r3, [r3, #8]
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	4b4b      	ldr	r3, [pc, #300]	; (800a768 <tcp_receive+0x8bc>)
 800a63a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a63c:	4b4a      	ldr	r3, [pc, #296]	; (800a768 <tcp_receive+0x8bc>)
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	4b49      	ldr	r3, [pc, #292]	; (800a768 <tcp_receive+0x8bc>)
 800a642:	891b      	ldrh	r3, [r3, #8]
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fb fbd4 	bl	8005df4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a64c:	4b46      	ldr	r3, [pc, #280]	; (800a768 <tcp_receive+0x8bc>)
 800a64e:	891c      	ldrh	r4, [r3, #8]
 800a650:	4b45      	ldr	r3, [pc, #276]	; (800a768 <tcp_receive+0x8bc>)
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	b29b      	uxth	r3, r3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f9 fc31 	bl	8003ec0 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 0303 	and.w	r3, r3, #3
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <tcp_receive+0x7c2>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e000      	b.n	800a670 <tcp_receive+0x7c4>
 800a66e:	2300      	movs	r3, #0
 800a670:	4423      	add	r3, r4
 800a672:	b29a      	uxth	r2, r3
 800a674:	4b3e      	ldr	r3, [pc, #248]	; (800a770 <tcp_receive+0x8c4>)
 800a676:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800a678:	4b3d      	ldr	r3, [pc, #244]	; (800a770 <tcp_receive+0x8c4>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b3b      	ldr	r3, [pc, #236]	; (800a76c <tcp_receive+0x8c0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	441a      	add	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a68c:	440b      	add	r3, r1
 800a68e:	429a      	cmp	r2, r3
 800a690:	d00b      	beq.n	800a6aa <tcp_receive+0x7fe>
 800a692:	4b38      	ldr	r3, [pc, #224]	; (800a774 <tcp_receive+0x8c8>)
 800a694:	f240 52d2 	movw	r2, #1490	; 0x5d2
 800a698:	4937      	ldr	r1, [pc, #220]	; (800a778 <tcp_receive+0x8cc>)
 800a69a:	4838      	ldr	r0, [pc, #224]	; (800a77c <tcp_receive+0x8d0>)
 800a69c:	f009 fa38 	bl	8013b10 <iprintf>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f009 fb37 	bl	8013d14 <fflush>
 800a6a6:	f009 fa7c 	bl	8013ba2 <abort>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 80ea 	beq.w	800a888 <tcp_receive+0x9dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <tcp_receive+0x8bc>)
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	899b      	ldrh	r3, [r3, #12]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f9 fbff 	bl	8003ec0 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d010      	beq.n	800a6f0 <tcp_receive+0x844>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a6ce:	e00a      	b.n	800a6e6 <tcp_receive+0x83a>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d4:	623b      	str	r3, [r7, #32]
              pcb->ooseq = pcb->ooseq->next;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a6e0:	6a38      	ldr	r0, [r7, #32]
 800a6e2:	f7fd fb4f 	bl	8007d84 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <tcp_receive+0x824>
 800a6ee:	e0cb      	b.n	800a888 <tcp_receive+0x9dc>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f4:	643b      	str	r3, [r7, #64]	; 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a6f6:	e050      	b.n	800a79a <tcp_receive+0x8ee>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	899b      	ldrh	r3, [r3, #12]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4618      	mov	r0, r3
 800a702:	f7f9 fbdd 	bl	8003ec0 <lwip_htons>
 800a706:	4603      	mov	r3, r0
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d03b      	beq.n	800a78a <tcp_receive+0x8de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <tcp_receive+0x8bc>)
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	899b      	ldrh	r3, [r3, #12]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f9 fbd0 	bl	8003ec0 <lwip_htons>
 800a720:	4603      	mov	r3, r0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d12e      	bne.n	800a78a <tcp_receive+0x8de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a72c:	4b0e      	ldr	r3, [pc, #56]	; (800a768 <tcp_receive+0x8bc>)
 800a72e:	691c      	ldr	r4, [r3, #16]
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <tcp_receive+0x8bc>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	899b      	ldrh	r3, [r3, #12]
 800a736:	b29d      	uxth	r5, r3
 800a738:	2001      	movs	r0, #1
 800a73a:	f7f9 fbc1 	bl	8003ec0 <lwip_htons>
 800a73e:	4603      	mov	r3, r0
 800a740:	432b      	orrs	r3, r5
 800a742:	b29b      	uxth	r3, r3
 800a744:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a746:	4b08      	ldr	r3, [pc, #32]	; (800a768 <tcp_receive+0x8bc>)
 800a748:	891c      	ldrh	r4, [r3, #8]
 800a74a:	4b07      	ldr	r3, [pc, #28]	; (800a768 <tcp_receive+0x8bc>)
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	899b      	ldrh	r3, [r3, #12]
 800a750:	b29b      	uxth	r3, r3
 800a752:	4618      	mov	r0, r3
 800a754:	f7f9 fbb4 	bl	8003ec0 <lwip_htons>
 800a758:	4603      	mov	r3, r0
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 0303 	and.w	r3, r3, #3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00d      	beq.n	800a780 <tcp_receive+0x8d4>
 800a764:	2301      	movs	r3, #1
 800a766:	e00c      	b.n	800a782 <tcp_receive+0x8d6>
 800a768:	20000700 	.word	0x20000700
 800a76c:	20000724 	.word	0x20000724
 800a770:	2000072e 	.word	0x2000072e
 800a774:	08016a08 	.word	0x08016a08
 800a778:	08016da0 	.word	0x08016da0
 800a77c:	08016a44 	.word	0x08016a44
 800a780:	2300      	movs	r3, #0
 800a782:	4423      	add	r3, r4
 800a784:	b29a      	uxth	r2, r3
 800a786:	4b9f      	ldr	r3, [pc, #636]	; (800aa04 <tcp_receive+0xb58>)
 800a788:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a78c:	61fb      	str	r3, [r7, #28]
              next = next->next;
 800a78e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	643b      	str	r3, [r7, #64]	; 0x40
              tcp_seg_free(tmp);
 800a794:	69f8      	ldr	r0, [r7, #28]
 800a796:	f7fd faf5 	bl	8007d84 <tcp_seg_free>
            while (next &&
 800a79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <tcp_receive+0x912>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a7a0:	4b98      	ldr	r3, [pc, #608]	; (800aa04 <tcp_receive+0xb58>)
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b98      	ldr	r3, [pc, #608]	; (800aa08 <tcp_receive+0xb5c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	441a      	add	r2, r3
 800a7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7b4:	8909      	ldrh	r1, [r1, #8]
 800a7b6:	440b      	add	r3, r1
 800a7b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da9c      	bge.n	800a6f8 <tcp_receive+0x84c>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05e      	beq.n	800a882 <tcp_receive+0x9d6>
                TCP_SEQ_GT(seqno + tcplen,
 800a7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	4b8e      	ldr	r3, [pc, #568]	; (800aa04 <tcp_receive+0xb58>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4b8d      	ldr	r3, [pc, #564]	; (800aa08 <tcp_receive+0xb5c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	440b      	add	r3, r1
 800a7d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	da52      	bge.n	800a882 <tcp_receive+0x9d6>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	4b88      	ldr	r3, [pc, #544]	; (800aa08 <tcp_receive+0xb5c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	4b87      	ldr	r3, [pc, #540]	; (800aa0c <tcp_receive+0xb60>)
 800a7f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a7f2:	4b86      	ldr	r3, [pc, #536]	; (800aa0c <tcp_receive+0xb60>)
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	899b      	ldrh	r3, [r3, #12]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7f9 fb60 	bl	8003ec0 <lwip_htons>
 800a800:	4603      	mov	r3, r0
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <tcp_receive+0x96c>
                inseg.len -= 1;
 800a80c:	4b7f      	ldr	r3, [pc, #508]	; (800aa0c <tcp_receive+0xb60>)
 800a80e:	891b      	ldrh	r3, [r3, #8]
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	4b7d      	ldr	r3, [pc, #500]	; (800aa0c <tcp_receive+0xb60>)
 800a816:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a818:	4b7c      	ldr	r3, [pc, #496]	; (800aa0c <tcp_receive+0xb60>)
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b7b      	ldr	r3, [pc, #492]	; (800aa0c <tcp_receive+0xb60>)
 800a81e:	891b      	ldrh	r3, [r3, #8]
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7fb fae6 	bl	8005df4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a828:	4b78      	ldr	r3, [pc, #480]	; (800aa0c <tcp_receive+0xb60>)
 800a82a:	891c      	ldrh	r4, [r3, #8]
 800a82c:	4b77      	ldr	r3, [pc, #476]	; (800aa0c <tcp_receive+0xb60>)
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	b29b      	uxth	r3, r3
 800a834:	4618      	mov	r0, r3
 800a836:	f7f9 fb43 	bl	8003ec0 <lwip_htons>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <tcp_receive+0x99e>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <tcp_receive+0x9a0>
 800a84a:	2300      	movs	r3, #0
 800a84c:	4423      	add	r3, r4
 800a84e:	b29a      	uxth	r2, r3
 800a850:	4b6c      	ldr	r3, [pc, #432]	; (800aa04 <tcp_receive+0xb58>)
 800a852:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 800a854:	4b6b      	ldr	r3, [pc, #428]	; (800aa04 <tcp_receive+0xb58>)
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	4b6b      	ldr	r3, [pc, #428]	; (800aa08 <tcp_receive+0xb5c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	441a      	add	r2, r3
 800a860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d00b      	beq.n	800a882 <tcp_receive+0x9d6>
 800a86a:	4b69      	ldr	r3, [pc, #420]	; (800aa10 <tcp_receive+0xb64>)
 800a86c:	f240 6203 	movw	r2, #1539	; 0x603
 800a870:	4968      	ldr	r1, [pc, #416]	; (800aa14 <tcp_receive+0xb68>)
 800a872:	4869      	ldr	r0, [pc, #420]	; (800aa18 <tcp_receive+0xb6c>)
 800a874:	f009 f94c 	bl	8013b10 <iprintf>
 800a878:	2000      	movs	r0, #0
 800a87a:	f009 fa4b 	bl	8013d14 <fflush>
 800a87e:	f009 f990 	bl	8013ba2 <abort>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a886:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a888:	4b5e      	ldr	r3, [pc, #376]	; (800aa04 <tcp_receive+0xb58>)
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	4b5e      	ldr	r3, [pc, #376]	; (800aa08 <tcp_receive+0xb5c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	441a      	add	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a89c:	4b59      	ldr	r3, [pc, #356]	; (800aa04 <tcp_receive+0xb58>)
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d20b      	bcs.n	800a8bc <tcp_receive+0xa10>
 800a8a4:	4b5a      	ldr	r3, [pc, #360]	; (800aa10 <tcp_receive+0xb64>)
 800a8a6:	f240 620d 	movw	r2, #1549	; 0x60d
 800a8aa:	495c      	ldr	r1, [pc, #368]	; (800aa1c <tcp_receive+0xb70>)
 800a8ac:	485a      	ldr	r0, [pc, #360]	; (800aa18 <tcp_receive+0xb6c>)
 800a8ae:	f009 f92f 	bl	8013b10 <iprintf>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f009 fa2e 	bl	8013d14 <fflush>
 800a8b8:	f009 f973 	bl	8013ba2 <abort>
        pcb->rcv_wnd -= tcplen;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8c0:	4b50      	ldr	r3, [pc, #320]	; (800aa04 <tcp_receive+0xb58>)
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7fc fbd7 	bl	8007080 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a8d2:	4b4e      	ldr	r3, [pc, #312]	; (800aa0c <tcp_receive+0xb60>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	891b      	ldrh	r3, [r3, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d006      	beq.n	800a8ea <tcp_receive+0xa3e>
          recv_data = inseg.p;
 800a8dc:	4b4b      	ldr	r3, [pc, #300]	; (800aa0c <tcp_receive+0xb60>)
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4a4f      	ldr	r2, [pc, #316]	; (800aa20 <tcp_receive+0xb74>)
 800a8e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakenly) deallocate it. */
          inseg.p = NULL;
 800a8e4:	4b49      	ldr	r3, [pc, #292]	; (800aa0c <tcp_receive+0xb60>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8ea:	4b48      	ldr	r3, [pc, #288]	; (800aa0c <tcp_receive+0xb60>)
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	899b      	ldrh	r3, [r3, #12]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7f9 fae4 	bl	8003ec0 <lwip_htons>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 80bc 	beq.w	800aa7e <tcp_receive+0xbd2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a906:	4b47      	ldr	r3, [pc, #284]	; (800aa24 <tcp_receive+0xb78>)
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	f043 0320 	orr.w	r3, r3, #32
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	4b44      	ldr	r3, [pc, #272]	; (800aa24 <tcp_receive+0xb78>)
 800a912:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a914:	e0b3      	b.n	800aa7e <tcp_receive+0xbd2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91a:	61bb      	str	r3, [r7, #24]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4a38      	ldr	r2, [pc, #224]	; (800aa08 <tcp_receive+0xb5c>)
 800a926:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	891b      	ldrh	r3, [r3, #8]
 800a92c:	461c      	mov	r4, r3
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	899b      	ldrh	r3, [r3, #12]
 800a934:	b29b      	uxth	r3, r3
 800a936:	4618      	mov	r0, r3
 800a938:	f7f9 fac2 	bl	8003ec0 <lwip_htons>
 800a93c:	4603      	mov	r3, r0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <tcp_receive+0xaa0>
 800a948:	2301      	movs	r3, #1
 800a94a:	e000      	b.n	800a94e <tcp_receive+0xaa2>
 800a94c:	2300      	movs	r3, #0
 800a94e:	4423      	add	r3, r4
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a954:	441a      	add	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95e:	461c      	mov	r4, r3
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	891b      	ldrh	r3, [r3, #8]
 800a964:	461d      	mov	r5, r3
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f9 faa6 	bl	8003ec0 <lwip_htons>
 800a974:	4603      	mov	r3, r0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0303 	and.w	r3, r3, #3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <tcp_receive+0xad8>
 800a980:	2301      	movs	r3, #1
 800a982:	e000      	b.n	800a986 <tcp_receive+0xada>
 800a984:	2300      	movs	r3, #0
 800a986:	442b      	add	r3, r5
 800a988:	429c      	cmp	r4, r3
 800a98a:	d20b      	bcs.n	800a9a4 <tcp_receive+0xaf8>
 800a98c:	4b20      	ldr	r3, [pc, #128]	; (800aa10 <tcp_receive+0xb64>)
 800a98e:	f240 6232 	movw	r2, #1586	; 0x632
 800a992:	4925      	ldr	r1, [pc, #148]	; (800aa28 <tcp_receive+0xb7c>)
 800a994:	4820      	ldr	r0, [pc, #128]	; (800aa18 <tcp_receive+0xb6c>)
 800a996:	f009 f8bb 	bl	8013b10 <iprintf>
 800a99a:	2000      	movs	r0, #0
 800a99c:	f009 f9ba 	bl	8013d14 <fflush>
 800a9a0:	f009 f8ff 	bl	8013ba2 <abort>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	891b      	ldrh	r3, [r3, #8]
 800a9a8:	461c      	mov	r4, r3
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	899b      	ldrh	r3, [r3, #12]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7f9 fa84 	bl	8003ec0 <lwip_htons>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <tcp_receive+0xb1c>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e000      	b.n	800a9ca <tcp_receive+0xb1e>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	18e1      	adds	r1, r4, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9d0:	b28b      	uxth	r3, r1
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fc fb50 	bl	8007080 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	891b      	ldrh	r3, [r3, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d027      	beq.n	800aa3a <tcp_receive+0xb8e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <tcp_receive+0xb74>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01c      	beq.n	800aa2c <tcp_receive+0xb80>
              pbuf_cat(recv_data, cseg->p);
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <tcp_receive+0xb74>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	f7fb fc39 	bl	8006274 <pbuf_cat>
 800aa02:	e017      	b.n	800aa34 <tcp_receive+0xb88>
 800aa04:	2000072e 	.word	0x2000072e
 800aa08:	20000724 	.word	0x20000724
 800aa0c:	20000700 	.word	0x20000700
 800aa10:	08016a08 	.word	0x08016a08
 800aa14:	08016dd8 	.word	0x08016dd8
 800aa18:	08016a44 	.word	0x08016a44
 800aa1c:	08016e14 	.word	0x08016e14
 800aa20:	20000734 	.word	0x20000734
 800aa24:	20000731 	.word	0x20000731
 800aa28:	08016e34 	.word	0x08016e34
            } else {
              recv_data = cseg->p;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4a73      	ldr	r2, [pc, #460]	; (800ac00 <tcp_receive+0xd54>)
 800aa32:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	899b      	ldrh	r3, [r3, #12]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f9 fa3c 	bl	8003ec0 <lwip_htons>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00d      	beq.n	800aa70 <tcp_receive+0xbc4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aa54:	4b6b      	ldr	r3, [pc, #428]	; (800ac04 <tcp_receive+0xd58>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f043 0320 	orr.w	r3, r3, #32
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	4b69      	ldr	r3, [pc, #420]	; (800ac04 <tcp_receive+0xd58>)
 800aa60:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	7d1b      	ldrb	r3, [r3, #20]
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d102      	bne.n	800aa70 <tcp_receive+0xbc4>
              pcb->state = CLOSE_WAIT;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2207      	movs	r2, #7
 800aa6e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f7fd f983 	bl	8007d84 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d008      	beq.n	800aa98 <tcp_receive+0xbec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aa92:	429a      	cmp	r2, r3
 800aa94:	f43f af3f 	beq.w	800a916 <tcp_receive+0xa6a>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	8b5b      	ldrh	r3, [r3, #26]
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <tcp_receive+0xc16>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	8b5b      	ldrh	r3, [r3, #26]
 800aaa8:	f023 0301 	bic.w	r3, r3, #1
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	835a      	strh	r2, [r3, #26]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	8b5b      	ldrh	r3, [r3, #26]
 800aab6:	f043 0302 	orr.w	r3, r3, #2
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aac0:	e194      	b.n	800adec <tcp_receive+0xf40>
        tcp_ack(pcb);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8b5b      	ldrh	r3, [r3, #26]
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aad0:	e18c      	b.n	800adec <tcp_receive+0xf40>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <tcp_receive+0xc3c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aada:	484b      	ldr	r0, [pc, #300]	; (800ac08 <tcp_receive+0xd5c>)
 800aadc:	f7fd f96a 	bl	8007db4 <tcp_seg_copy>
 800aae0:	4602      	mov	r2, r0
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	675a      	str	r2, [r3, #116]	; 0x74
 800aae6:	e179      	b.n	800addc <tcp_receive+0xf30>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63bb      	str	r3, [r7, #56]	; 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf2:	e161      	b.n	800adb8 <tcp_receive+0xf0c>
            if (seqno == next->tcphdr->seqno) {
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	4b44      	ldr	r3, [pc, #272]	; (800ac0c <tcp_receive+0xd60>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d122      	bne.n	800ab48 <tcp_receive+0xc9c>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab02:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <tcp_receive+0xd5c>)
 800ab04:	891a      	ldrh	r2, [r3, #8]
 800ab06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab08:	891b      	ldrh	r3, [r3, #8]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	f240 8159 	bls.w	800adc2 <tcp_receive+0xf16>

                /* If next segment is the last segment in ooseq
                   and smaller than inseg, that means it has been
                   trimmed before to fit our window, so we just
                   break here. */
                if (next->next == NULL) {
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8156 	beq.w	800adc6 <tcp_receive+0xf1a>
                }

                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800ab1a:	483b      	ldr	r0, [pc, #236]	; (800ac08 <tcp_receive+0xd5c>)
 800ab1c:	f7fd f94a 	bl	8007db4 <tcp_seg_copy>
 800ab20:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8150 	beq.w	800adca <tcp_receive+0xf1e>
                  if (prev != NULL) {
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <tcp_receive+0xc8c>
                    prev->next = cseg;
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e002      	b.n	800ab3e <tcp_receive+0xc92>
                  } else {
                    pcb->ooseq = cseg;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7ff f8a1 	bl	8009c88 <tcp_oos_insert_segment>
                }
                break;
 800ab46:	e140      	b.n	800adca <tcp_receive+0xf1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d117      	bne.n	800ab7e <tcp_receive+0xcd2>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ab4e:	4b2f      	ldr	r3, [pc, #188]	; (800ac0c <tcp_receive+0xd60>)
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	da58      	bge.n	800ac10 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab5e:	482a      	ldr	r0, [pc, #168]	; (800ac08 <tcp_receive+0xd5c>)
 800ab60:	f7fd f928 	bl	8007db4 <tcp_seg_copy>
 800ab64:	6178      	str	r0, [r7, #20]
                  if (cseg != NULL) {
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8130 	beq.w	800adce <tcp_receive+0xf22>
                    pcb->ooseq = cseg;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ab74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab76:	6978      	ldr	r0, [r7, #20]
 800ab78:	f7ff f886 	bl	8009c88 <tcp_oos_insert_segment>
                  }
                  break;
 800ab7c:	e127      	b.n	800adce <tcp_receive+0xf22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ab7e:	4b23      	ldr	r3, [pc, #140]	; (800ac0c <tcp_receive+0xd60>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db3f      	blt.n	800ac10 <tcp_receive+0xd64>
 800ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <tcp_receive+0xd60>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	db36      	blt.n	800ac10 <tcp_receive+0xd64>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aba2:	4819      	ldr	r0, [pc, #100]	; (800ac08 <tcp_receive+0xd5c>)
 800aba4:	f7fd f906 	bl	8007db4 <tcp_seg_copy>
 800aba8:	6138      	str	r0, [r7, #16]
                  if (cseg != NULL) {
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 8110 	beq.w	800add2 <tcp_receive+0xf26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800abb2:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <tcp_receive+0xd60>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abbe:	8909      	ldrh	r1, [r1, #8]
 800abc0:	440b      	add	r3, r1
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	da12      	bge.n	800abee <tcp_receive+0xd42>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800abc8:	4b10      	ldr	r3, [pc, #64]	; (800ac0c <tcp_receive+0xd60>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	b29a      	uxth	r2, r3
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	b29a      	uxth	r2, r3
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	891b      	ldrh	r3, [r3, #8]
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fb f903 	bl	8005df4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800abf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abf6:	6938      	ldr	r0, [r7, #16]
 800abf8:	f7ff f846 	bl	8009c88 <tcp_oos_insert_segment>
                  }
                  break;
 800abfc:	e0e9      	b.n	800add2 <tcp_receive+0xf26>
 800abfe:	bf00      	nop
 800ac00:	20000734 	.word	0x20000734
 800ac04:	20000731 	.word	0x20000731
 800ac08:	20000700 	.word	0x20000700
 800ac0c:	20000724 	.word	0x20000724
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac12:	63bb      	str	r3, [r7, #56]	; 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 80ca 	bne.w	800adb2 <tcp_receive+0xf06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	4b81      	ldr	r3, [pc, #516]	; (800ae2c <tcp_receive+0xf80>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f280 80c1 	bge.w	800adb2 <tcp_receive+0xf06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	899b      	ldrh	r3, [r3, #12]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7f9 f941 	bl	8003ec0 <lwip_htons>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 80c5 	bne.w	800add6 <tcp_receive+0xf2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ac4c:	4878      	ldr	r0, [pc, #480]	; (800ae30 <tcp_receive+0xf84>)
 800ac4e:	f7fd f8b1 	bl	8007db4 <tcp_seg_copy>
 800ac52:	4602      	mov	r2, r0
 800ac54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ac58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80bc 	beq.w	800adda <tcp_receive+0xf2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ac62:	4b72      	ldr	r3, [pc, #456]	; (800ae2c <tcp_receive+0xf80>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac6e:	8909      	ldrh	r1, [r1, #8]
 800ac70:	440b      	add	r3, r1
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	da12      	bge.n	800ac9e <tcp_receive+0xdf2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ac78:	4b6c      	ldr	r3, [pc, #432]	; (800ae2c <tcp_receive+0xf80>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac94:	891b      	ldrh	r3, [r3, #8]
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f7fb f8ab 	bl	8005df4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aca6:	441a      	add	r2, r3
 800aca8:	4b62      	ldr	r3, [pc, #392]	; (800ae34 <tcp_receive+0xf88>)
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	4619      	mov	r1, r3
 800acae:	4b5f      	ldr	r3, [pc, #380]	; (800ae2c <tcp_receive+0xf80>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	440b      	add	r3, r1
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f280 808f 	bge.w	800adda <tcp_receive+0xf2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800acbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	899b      	ldrh	r3, [r3, #12]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f9 f8fa 	bl	8003ec0 <lwip_htons>
 800accc:	4603      	mov	r3, r0
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d022      	beq.n	800ad1e <tcp_receive+0xe72>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691c      	ldr	r4, [r3, #16]
 800acde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	899b      	ldrh	r3, [r3, #12]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	b21b      	sxth	r3, r3
 800acea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800acee:	b21d      	sxth	r5, r3
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7f9 f8e0 	bl	8003ec0 <lwip_htons>
 800ad00:	4603      	mov	r3, r0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7f9 f8d7 	bl	8003ec0 <lwip_htons>
 800ad12:	4603      	mov	r3, r0
 800ad14:	b21b      	sxth	r3, r3
 800ad16:	432b      	orrs	r3, r5
 800ad18:	b21b      	sxth	r3, r3
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad26:	b291      	uxth	r1, r2
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ad2c:	440a      	add	r2, r1
 800ad2e:	b291      	uxth	r1, r2
 800ad30:	4a3e      	ldr	r2, [pc, #248]	; (800ae2c <tcp_receive+0xf80>)
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	b292      	uxth	r2, r2
 800ad36:	1a8a      	subs	r2, r1, r2
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	891b      	ldrh	r3, [r3, #8]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fb f852 	bl	8005df4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	891c      	ldrh	r4, [r3, #8]
 800ad56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	899b      	ldrh	r3, [r3, #12]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f9 f8ad 	bl	8003ec0 <lwip_htons>
 800ad66:	4603      	mov	r3, r0
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <tcp_receive+0xeca>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <tcp_receive+0xecc>
 800ad76:	2300      	movs	r3, #0
 800ad78:	4423      	add	r3, r4
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	4b2d      	ldr	r3, [pc, #180]	; (800ae34 <tcp_receive+0xf88>)
 800ad7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 800ad80:	4b2c      	ldr	r3, [pc, #176]	; (800ae34 <tcp_receive+0xf88>)
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b29      	ldr	r3, [pc, #164]	; (800ae2c <tcp_receive+0xf80>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	441a      	add	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad94:	440b      	add	r3, r1
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d01f      	beq.n	800adda <tcp_receive+0xf2e>
 800ad9a:	4b27      	ldr	r3, [pc, #156]	; (800ae38 <tcp_receive+0xf8c>)
 800ad9c:	f240 7209 	movw	r2, #1801	; 0x709
 800ada0:	4926      	ldr	r1, [pc, #152]	; (800ae3c <tcp_receive+0xf90>)
 800ada2:	4827      	ldr	r0, [pc, #156]	; (800ae40 <tcp_receive+0xf94>)
 800ada4:	f008 feb4 	bl	8013b10 <iprintf>
 800ada8:	2000      	movs	r0, #0
 800adaa:	f008 ffb3 	bl	8013d14 <fflush>
 800adae:	f008 fef8 	bl	8013ba2 <abort>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f47f ae9a 	bne.w	800aaf4 <tcp_receive+0xc48>
 800adc0:	e00c      	b.n	800addc <tcp_receive+0xf30>
                break;
 800adc2:	bf00      	nop
 800adc4:	e00a      	b.n	800addc <tcp_receive+0xf30>
                  break;
 800adc6:	bf00      	nop
 800adc8:	e008      	b.n	800addc <tcp_receive+0xf30>
                break;
 800adca:	bf00      	nop
 800adcc:	e006      	b.n	800addc <tcp_receive+0xf30>
                  break;
 800adce:	bf00      	nop
 800add0:	e004      	b.n	800addc <tcp_receive+0xf30>
                  break;
 800add2:	bf00      	nop
 800add4:	e002      	b.n	800addc <tcp_receive+0xf30>
                  break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <tcp_receive+0xf30>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800adda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f002 f8cf 	bl	800cf80 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ade2:	e003      	b.n	800adec <tcp_receive+0xf40>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f002 f8cb 	bl	800cf80 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800adea:	e01b      	b.n	800ae24 <tcp_receive+0xf78>
 800adec:	e01a      	b.n	800ae24 <tcp_receive+0xf78>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <tcp_receive+0xf80>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db0b      	blt.n	800ae14 <tcp_receive+0xf68>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ae04:	441a      	add	r2, r3
 800ae06:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <tcp_receive+0xf80>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	425b      	negs	r3, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	da07      	bge.n	800ae24 <tcp_receive+0xf78>
      tcp_ack_now(pcb);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	8b5b      	ldrh	r3, [r3, #26]
 800ae18:	f043 0302 	orr.w	r3, r3, #2
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae22:	e7ff      	b.n	800ae24 <tcp_receive+0xf78>
 800ae24:	bf00      	nop
 800ae26:	3750      	adds	r7, #80	; 0x50
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae2c:	20000724 	.word	0x20000724
 800ae30:	20000700 	.word	0x20000700
 800ae34:	2000072e 	.word	0x2000072e
 800ae38:	08016a08 	.word	0x08016a08
 800ae3c:	08016da0 	.word	0x08016da0
 800ae40:	08016a44 	.word	0x08016a44

0800ae44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae4a:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <tcp_get_next_optbyte+0x5c>)
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	b291      	uxth	r1, r2
 800ae52:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <tcp_get_next_optbyte+0x5c>)
 800ae54:	8011      	strh	r1, [r2, #0]
 800ae56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <tcp_get_next_optbyte+0x60>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <tcp_get_next_optbyte+0x26>
 800ae60:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <tcp_get_next_optbyte+0x64>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	88fa      	ldrh	r2, [r7, #6]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d208      	bcs.n	800ae7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <tcp_get_next_optbyte+0x68>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3314      	adds	r3, #20
 800ae70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ae72:	88fb      	ldrh	r3, [r7, #6]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	4413      	add	r3, r2
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	e00b      	b.n	800ae94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <tcp_get_next_optbyte+0x64>)
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ae8a:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <tcp_get_next_optbyte+0x60>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	797b      	ldrb	r3, [r7, #5]
 800ae90:	4413      	add	r3, r2
 800ae92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	20000720 	.word	0x20000720
 800aea4:	2000071c 	.word	0x2000071c
 800aea8:	2000071a 	.word	0x2000071a
 800aeac:	20000714 	.word	0x20000714

0800aeb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10b      	bne.n	800aed6 <tcp_parseopt+0x26>
 800aebe:	4b34      	ldr	r3, [pc, #208]	; (800af90 <tcp_parseopt+0xe0>)
 800aec0:	f240 728d 	movw	r2, #1933	; 0x78d
 800aec4:	4933      	ldr	r1, [pc, #204]	; (800af94 <tcp_parseopt+0xe4>)
 800aec6:	4834      	ldr	r0, [pc, #208]	; (800af98 <tcp_parseopt+0xe8>)
 800aec8:	f008 fe22 	bl	8013b10 <iprintf>
 800aecc:	2000      	movs	r0, #0
 800aece:	f008 ff21 	bl	8013d14 <fflush>
 800aed2:	f008 fe66 	bl	8013ba2 <abort>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aed6:	4b31      	ldr	r3, [pc, #196]	; (800af9c <tcp_parseopt+0xec>)
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d054      	beq.n	800af88 <tcp_parseopt+0xd8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aede:	4b30      	ldr	r3, [pc, #192]	; (800afa0 <tcp_parseopt+0xf0>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	e044      	b.n	800af70 <tcp_parseopt+0xc0>
      u8_t opt = tcp_get_next_optbyte();
 800aee6:	f7ff ffad 	bl	800ae44 <tcp_get_next_optbyte>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d03d      	beq.n	800af70 <tcp_parseopt+0xc0>
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d002      	beq.n	800aefe <tcp_parseopt+0x4e>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d040      	beq.n	800af7e <tcp_parseopt+0xce>
 800aefc:	e027      	b.n	800af4e <tcp_parseopt+0x9e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aefe:	f7ff ffa1 	bl	800ae44 <tcp_get_next_optbyte>
 800af02:	4603      	mov	r3, r0
 800af04:	2b04      	cmp	r3, #4
 800af06:	d13c      	bne.n	800af82 <tcp_parseopt+0xd2>
 800af08:	4b25      	ldr	r3, [pc, #148]	; (800afa0 <tcp_parseopt+0xf0>)
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	3302      	adds	r3, #2
 800af0e:	4a23      	ldr	r2, [pc, #140]	; (800af9c <tcp_parseopt+0xec>)
 800af10:	8812      	ldrh	r2, [r2, #0]
 800af12:	4293      	cmp	r3, r2
 800af14:	dc35      	bgt.n	800af82 <tcp_parseopt+0xd2>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af16:	f7ff ff95 	bl	800ae44 <tcp_get_next_optbyte>
 800af1a:	4603      	mov	r3, r0
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	021b      	lsls	r3, r3, #8
 800af20:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af22:	f7ff ff8f 	bl	800ae44 <tcp_get_next_optbyte>
 800af26:	4603      	mov	r3, r0
 800af28:	b29a      	uxth	r2, r3
 800af2a:	89bb      	ldrh	r3, [r7, #12]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af30:	89bb      	ldrh	r3, [r7, #12]
 800af32:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800af36:	4293      	cmp	r3, r2
 800af38:	d804      	bhi.n	800af44 <tcp_parseopt+0x94>
 800af3a:	89bb      	ldrh	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <tcp_parseopt+0x94>
 800af40:	89ba      	ldrh	r2, [r7, #12]
 800af42:	e001      	b.n	800af48 <tcp_parseopt+0x98>
 800af44:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af4c:	e010      	b.n	800af70 <tcp_parseopt+0xc0>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af4e:	f7ff ff79 	bl	800ae44 <tcp_get_next_optbyte>
 800af52:	4603      	mov	r3, r0
 800af54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af56:	7afb      	ldrb	r3, [r7, #11]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d914      	bls.n	800af86 <tcp_parseopt+0xd6>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800af5c:	7afb      	ldrb	r3, [r7, #11]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <tcp_parseopt+0xf0>)
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	4413      	add	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	3b02      	subs	r3, #2
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <tcp_parseopt+0xf0>)
 800af6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af70:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <tcp_parseopt+0xf0>)
 800af72:	881a      	ldrh	r2, [r3, #0]
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <tcp_parseopt+0xec>)
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d3b4      	bcc.n	800aee6 <tcp_parseopt+0x36>
 800af7c:	e004      	b.n	800af88 <tcp_parseopt+0xd8>
          return;
 800af7e:	bf00      	nop
 800af80:	e002      	b.n	800af88 <tcp_parseopt+0xd8>
            return;
 800af82:	bf00      	nop
 800af84:	e000      	b.n	800af88 <tcp_parseopt+0xd8>
            return;
 800af86:	bf00      	nop
      }
    }
  }
}
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	08016a08 	.word	0x08016a08
 800af94:	08016e58 	.word	0x08016e58
 800af98:	08016a44 	.word	0x08016a44
 800af9c:	20000718 	.word	0x20000718
 800afa0:	20000720 	.word	0x20000720

0800afa4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800afa4:	b480      	push	{r7}
 800afa6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800afa8:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <tcp_trigger_input_pcb_close+0x1c>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	f043 0310 	orr.w	r3, r3, #16
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <tcp_trigger_input_pcb_close+0x1c>)
 800afb4:	701a      	strb	r2, [r3, #0]
}
 800afb6:	bf00      	nop
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20000731 	.word	0x20000731

0800afc4 <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <tcp_route+0x28>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	7a1b      	ldrb	r3, [r3, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d006      	beq.n	800afec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	7a1b      	ldrb	r3, [r3, #8]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fa fd6a 	bl	8005abc <netif_get_by_index>
 800afe8:	4603      	mov	r3, r0
 800afea:	e003      	b.n	800aff4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7f9 f8db 	bl	80041a8 <ip4_route>
 800aff2:	4603      	mov	r3, r0
  }
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	4613      	mov	r3, r2
 800b00a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <tcp_create_segment+0x2c>
 800b012:	4b52      	ldr	r3, [pc, #328]	; (800b15c <tcp_create_segment+0x160>)
 800b014:	22a6      	movs	r2, #166	; 0xa6
 800b016:	4952      	ldr	r1, [pc, #328]	; (800b160 <tcp_create_segment+0x164>)
 800b018:	4852      	ldr	r0, [pc, #328]	; (800b164 <tcp_create_segment+0x168>)
 800b01a:	f008 fd79 	bl	8013b10 <iprintf>
 800b01e:	2000      	movs	r0, #0
 800b020:	f008 fe78 	bl	8013d14 <fflush>
 800b024:	f008 fdbd 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <tcp_create_segment+0x48>
 800b02e:	4b4b      	ldr	r3, [pc, #300]	; (800b15c <tcp_create_segment+0x160>)
 800b030:	22a7      	movs	r2, #167	; 0xa7
 800b032:	494d      	ldr	r1, [pc, #308]	; (800b168 <tcp_create_segment+0x16c>)
 800b034:	484b      	ldr	r0, [pc, #300]	; (800b164 <tcp_create_segment+0x168>)
 800b036:	f008 fd6b 	bl	8013b10 <iprintf>
 800b03a:	2000      	movs	r0, #0
 800b03c:	f008 fe6a 	bl	8013d14 <fflush>
 800b040:	f008 fdaf 	bl	8013ba2 <abort>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b044:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <tcp_create_segment+0x58>
 800b050:	2304      	movs	r3, #4
 800b052:	e000      	b.n	800b056 <tcp_create_segment+0x5a>
 800b054:	2300      	movs	r3, #0
 800b056:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b058:	2002      	movs	r0, #2
 800b05a:	f7fa f9fd 	bl	8005458 <memp_malloc>
 800b05e:	6138      	str	r0, [r7, #16]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d104      	bne.n	800b070 <tcp_create_segment+0x74>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f7fb f83c 	bl	80060e4 <pbuf_free>
    return NULL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e071      	b.n	800b154 <tcp_create_segment+0x158>
  }
  seg->flags = optflags;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b076:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	891a      	ldrh	r2, [r3, #8]
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d20a      	bcs.n	800b0a6 <tcp_create_segment+0xaa>
 800b090:	4b32      	ldr	r3, [pc, #200]	; (800b15c <tcp_create_segment+0x160>)
 800b092:	22b3      	movs	r2, #179	; 0xb3
 800b094:	4935      	ldr	r1, [pc, #212]	; (800b16c <tcp_create_segment+0x170>)
 800b096:	4833      	ldr	r0, [pc, #204]	; (800b164 <tcp_create_segment+0x168>)
 800b098:	f008 fd3a 	bl	8013b10 <iprintf>
 800b09c:	2000      	movs	r0, #0
 800b09e:	f008 fe39 	bl	8013d14 <fflush>
 800b0a2:	f008 fd7e 	bl	8013ba2 <abort>
  seg->len = p->tot_len - optlen;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	891a      	ldrh	r2, [r3, #8]
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0bc:	2114      	movs	r1, #20
 800b0be:	68b8      	ldr	r0, [r7, #8]
 800b0c0:	f7fa ffaa 	bl	8006018 <pbuf_add_header>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00c      	beq.n	800b0e4 <tcp_create_segment+0xe8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800b0ca:	4b29      	ldr	r3, [pc, #164]	; (800b170 <tcp_create_segment+0x174>)
 800b0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	4b26      	ldr	r3, [pc, #152]	; (800b170 <tcp_create_segment+0x174>)
 800b0d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    tcp_seg_free(seg);
 800b0da:	6938      	ldr	r0, [r7, #16]
 800b0dc:	f7fc fe52 	bl	8007d84 <tcp_seg_free>
    return NULL;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e037      	b.n	800b154 <tcp_create_segment+0x158>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	691c      	ldr	r4, [r3, #16]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8adb      	ldrh	r3, [r3, #22]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f8 fee2 	bl	8003ec0 <lwip_htons>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	691c      	ldr	r4, [r3, #16]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8b1b      	ldrh	r3, [r3, #24]
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f8 fed9 	bl	8003ec0 <lwip_htons>
 800b10e:	4603      	mov	r3, r0
 800b110:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	691c      	ldr	r4, [r3, #16]
 800b116:	6838      	ldr	r0, [r7, #0]
 800b118:	f7f8 fee7 	bl	8003eea <lwip_htonl>
 800b11c:	4603      	mov	r3, r0
 800b11e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	691c      	ldr	r4, [r3, #16]
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	089b      	lsrs	r3, r3, #2
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	3305      	adds	r3, #5
 800b12e:	b29b      	uxth	r3, r3
 800b130:	031b      	lsls	r3, r3, #12
 800b132:	b29a      	uxth	r2, r3
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	b29b      	uxth	r3, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f8 febf 	bl	8003ec0 <lwip_htons>
 800b142:	4603      	mov	r3, r0
 800b144:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2200      	movs	r2, #0
 800b14c:	749a      	strb	r2, [r3, #18]
 800b14e:	2200      	movs	r2, #0
 800b150:	74da      	strb	r2, [r3, #19]
  return seg;
 800b152:	693b      	ldr	r3, [r7, #16]
}
 800b154:	4618      	mov	r0, r3
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd90      	pop	{r4, r7, pc}
 800b15c:	08016e74 	.word	0x08016e74
 800b160:	08016e98 	.word	0x08016e98
 800b164:	08016eb8 	.word	0x08016eb8
 800b168:	08016ee0 	.word	0x08016ee0
 800b16c:	08016f04 	.word	0x08016f04
 800b170:	2000221c 	.word	0x2000221c

0800b174 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	607b      	str	r3, [r7, #4]
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
 800b180:	460b      	mov	r3, r1
 800b182:	81bb      	strh	r3, [r7, #12]
 800b184:	4613      	mov	r3, r2
 800b186:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b188:	89bb      	ldrh	r3, [r7, #12]
 800b18a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <tcp_pbuf_prealloc+0x34>
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <tcp_pbuf_prealloc+0xf8>)
 800b194:	22eb      	movs	r2, #235	; 0xeb
 800b196:	4936      	ldr	r1, [pc, #216]	; (800b270 <tcp_pbuf_prealloc+0xfc>)
 800b198:	4836      	ldr	r0, [pc, #216]	; (800b274 <tcp_pbuf_prealloc+0x100>)
 800b19a:	f008 fcb9 	bl	8013b10 <iprintf>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f008 fdb8 	bl	8013d14 <fflush>
 800b1a4:	f008 fcfd 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <tcp_pbuf_prealloc+0x50>
 800b1ae:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <tcp_pbuf_prealloc+0xf8>)
 800b1b0:	22ec      	movs	r2, #236	; 0xec
 800b1b2:	4931      	ldr	r1, [pc, #196]	; (800b278 <tcp_pbuf_prealloc+0x104>)
 800b1b4:	482f      	ldr	r0, [pc, #188]	; (800b274 <tcp_pbuf_prealloc+0x100>)
 800b1b6:	f008 fcab 	bl	8013b10 <iprintf>
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f008 fdaa 	bl	8013d14 <fflush>
 800b1c0:	f008 fcef 	bl	8013ba2 <abort>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b1c4:	89ba      	ldrh	r2, [r7, #12]
 800b1c6:	897b      	ldrh	r3, [r7, #10]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d21f      	bcs.n	800b20c <tcp_pbuf_prealloc+0x98>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d111      	bne.n	800b1fc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	8b5b      	ldrh	r3, [r3, #26]
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d113      	bne.n	800b20c <tcp_pbuf_prealloc+0x98>
        (!(pcb->flags & TF_NODELAY) &&
 800b1e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d007      	beq.n	800b1fc <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d103      	bne.n	800b1fc <tcp_pbuf_prealloc+0x88>
          pcb->unacked != NULL))) {
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d007      	beq.n	800b20c <tcp_pbuf_prealloc+0x98>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b1fc:	89bb      	ldrh	r3, [r7, #12]
 800b1fe:	f203 52b4 	addw	r2, r3, #1460	; 0x5b4
 800b202:	897b      	ldrh	r3, [r7, #10]
 800b204:	4293      	cmp	r3, r2
 800b206:	bf28      	it	cs
 800b208:	4613      	movcs	r3, r2
 800b20a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b20c:	8af9      	ldrh	r1, [r7, #22]
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b214:	4618      	mov	r0, r3
 800b216:	f7fa fcfb 	bl	8005c10 <pbuf_alloc>
 800b21a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <tcp_pbuf_prealloc+0xb2>
    return NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	e01e      	b.n	800b264 <tcp_pbuf_prealloc+0xf0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <tcp_pbuf_prealloc+0xd2>
 800b22e:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <tcp_pbuf_prealloc+0xf8>)
 800b230:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b234:	4911      	ldr	r1, [pc, #68]	; (800b27c <tcp_pbuf_prealloc+0x108>)
 800b236:	480f      	ldr	r0, [pc, #60]	; (800b274 <tcp_pbuf_prealloc+0x100>)
 800b238:	f008 fc6a 	bl	8013b10 <iprintf>
 800b23c:	2000      	movs	r0, #0
 800b23e:	f008 fd69 	bl	8013d14 <fflush>
 800b242:	f008 fcae 	bl	8013ba2 <abort>
  *oversize = p->len - length;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	895a      	ldrh	r2, [r3, #10]
 800b24a:	89bb      	ldrh	r3, [r7, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	b29a      	uxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	89ba      	ldrh	r2, [r7, #12]
 800b258:	811a      	strh	r2, [r3, #8]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	891a      	ldrh	r2, [r3, #8]
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	815a      	strh	r2, [r3, #10]
  return p;
 800b262:	693b      	ldr	r3, [r7, #16]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	08016e74 	.word	0x08016e74
 800b270:	08016f1c 	.word	0x08016f1c
 800b274:	08016eb8 	.word	0x08016eb8
 800b278:	08016f40 	.word	0x08016f40
 800b27c:	08016f60 	.word	0x08016f60

0800b280 <tcp_write_checks>:
 * @param len length of data to send (checked against snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <tcp_write_checks+0x2a>
 800b292:	4b3e      	ldr	r3, [pc, #248]	; (800b38c <tcp_write_checks+0x10c>)
 800b294:	f44f 729b 	mov.w	r2, #310	; 0x136
 800b298:	493d      	ldr	r1, [pc, #244]	; (800b390 <tcp_write_checks+0x110>)
 800b29a:	483e      	ldr	r0, [pc, #248]	; (800b394 <tcp_write_checks+0x114>)
 800b29c:	f008 fc38 	bl	8013b10 <iprintf>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	f008 fd37 	bl	8013d14 <fflush>
 800b2a6:	f008 fc7c 	bl	8013ba2 <abort>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7d1b      	ldrb	r3, [r3, #20]
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d00e      	beq.n	800b2d0 <tcp_write_checks+0x50>
      (pcb->state != CLOSE_WAIT) &&
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b2b6:	2b07      	cmp	r3, #7
 800b2b8:	d00a      	beq.n	800b2d0 <tcp_write_checks+0x50>
      (pcb->state != SYN_SENT) &&
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d006      	beq.n	800b2d0 <tcp_write_checks+0x50>
      (pcb->state != SYN_RCVD)) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d002      	beq.n	800b2d0 <tcp_write_checks+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b2ca:	f06f 030a 	mvn.w	r3, #10
 800b2ce:	e059      	b.n	800b384 <tcp_write_checks+0x104>
  } else if (len == 0) {
 800b2d0:	887b      	ldrh	r3, [r7, #2]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <tcp_write_checks+0x5a>
    return ERR_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e054      	b.n	800b384 <tcp_write_checks+0x104>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2e0:	887a      	ldrh	r2, [r7, #2]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d909      	bls.n	800b2fa <tcp_write_checks+0x7a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	e044      	b.n	800b384 <tcp_write_checks+0x104>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b300:	2b07      	cmp	r3, #7
 800b302:	d911      	bls.n	800b328 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800b304:	4b24      	ldr	r3, [pc, #144]	; (800b398 <tcp_write_checks+0x118>)
 800b306:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b30a:	3301      	adds	r3, #1
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	4b22      	ldr	r3, [pc, #136]	; (800b398 <tcp_write_checks+0x118>)
 800b310:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8b5b      	ldrh	r3, [r3, #26]
 800b318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	e02d      	b.n	800b384 <tcp_write_checks+0x104>
  }
  if (pcb->snd_queuelen != 0) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d013      	beq.n	800b35a <tcp_write_checks+0xda>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b336:	2b00      	cmp	r3, #0
 800b338:	d123      	bne.n	800b382 <tcp_write_checks+0x102>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d11f      	bne.n	800b382 <tcp_write_checks+0x102>
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <tcp_write_checks+0x10c>)
 800b344:	f240 1259 	movw	r2, #345	; 0x159
 800b348:	4914      	ldr	r1, [pc, #80]	; (800b39c <tcp_write_checks+0x11c>)
 800b34a:	4812      	ldr	r0, [pc, #72]	; (800b394 <tcp_write_checks+0x114>)
 800b34c:	f008 fbe0 	bl	8013b10 <iprintf>
 800b350:	2000      	movs	r0, #0
 800b352:	f008 fcdf 	bl	8013d14 <fflush>
 800b356:	f008 fc24 	bl	8013ba2 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d103      	bne.n	800b36a <tcp_write_checks+0xea>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00b      	beq.n	800b382 <tcp_write_checks+0x102>
 800b36a:	4b08      	ldr	r3, [pc, #32]	; (800b38c <tcp_write_checks+0x10c>)
 800b36c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800b370:	490b      	ldr	r1, [pc, #44]	; (800b3a0 <tcp_write_checks+0x120>)
 800b372:	4808      	ldr	r0, [pc, #32]	; (800b394 <tcp_write_checks+0x114>)
 800b374:	f008 fbcc 	bl	8013b10 <iprintf>
 800b378:	2000      	movs	r0, #0
 800b37a:	f008 fccb 	bl	8013d14 <fflush>
 800b37e:	f008 fc10 	bl	8013ba2 <abort>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	08016e74 	.word	0x08016e74
 800b390:	08016f74 	.word	0x08016f74
 800b394:	08016eb8 	.word	0x08016eb8
 800b398:	2000221c 	.word	0x2000221c
 800b39c:	08016f94 	.word	0x08016f94
 800b3a0:	08016fd0 	.word	0x08016fd0

0800b3a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b3a4:	b5b0      	push	{r4, r5, r7, lr}
 800b3a6:	b09a      	sub	sp, #104	; 0x68
 800b3a8:	af04      	add	r7, sp, #16
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	80fb      	strh	r3, [r7, #6]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	653b      	str	r3, [r7, #80]	; 0x50
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d109      	bne.n	800b404 <tcp_write+0x60>
 800b3f0:	4ba3      	ldr	r3, [pc, #652]	; (800b680 <tcp_write+0x2dc>)
 800b3f2:	f240 12a1 	movw	r2, #417	; 0x1a1
 800b3f6:	49a3      	ldr	r1, [pc, #652]	; (800b684 <tcp_write+0x2e0>)
 800b3f8:	48a3      	ldr	r0, [pc, #652]	; (800b688 <tcp_write+0x2e4>)
 800b3fa:	f7f6 fd62 	bl	8001ec2 <lwip_win32_platform_diag>
 800b3fe:	f06f 030f 	mvn.w	r3, #15
 800b402:	e3b0      	b.n	800bb66 <tcp_write+0x7c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b40a:	085b      	lsrs	r3, r3, #1
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b412:	4293      	cmp	r3, r2
 800b414:	bf28      	it	cs
 800b416:	4613      	movcs	r3, r2
 800b418:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <tcp_write+0x82>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b424:	e000      	b.n	800b428 <tcp_write+0x84>
 800b426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b428:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <tcp_write+0xa0>
 800b430:	4b93      	ldr	r3, [pc, #588]	; (800b680 <tcp_write+0x2dc>)
 800b432:	f240 12b1 	movw	r2, #433	; 0x1b1
 800b436:	4995      	ldr	r1, [pc, #596]	; (800b68c <tcp_write+0x2e8>)
 800b438:	4893      	ldr	r0, [pc, #588]	; (800b688 <tcp_write+0x2e4>)
 800b43a:	f7f6 fd42 	bl	8001ec2 <lwip_win32_platform_diag>
 800b43e:	f06f 030f 	mvn.w	r3, #15
 800b442:	e390      	b.n	800bb66 <tcp_write+0x7c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b444:	88fb      	ldrh	r3, [r7, #6]
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7ff ff19 	bl	800b280 <tcp_write_checks>
 800b44e:	4603      	mov	r3, r0
 800b450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b454:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <tcp_write+0xbe>
    return err;
 800b45c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b460:	e381      	b.n	800bb66 <tcp_write+0x7c2>
  }
  queuelen = pcb->snd_queuelen;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b468:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8136 	beq.w	800b6e8 <tcp_write+0x344>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b480:	653b      	str	r3, [r7, #80]	; 0x50
 800b482:	e002      	b.n	800b48a <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 800b484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f8      	bne.n	800b484 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	7b1b      	ldrb	r3, [r3, #12]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <tcp_write+0xfe>
 800b49e:	2304      	movs	r3, #4
 800b4a0:	e000      	b.n	800b4a4 <tcp_write+0x100>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b4a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4aa:	891b      	ldrh	r3, [r3, #8]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	8c3b      	ldrh	r3, [r7, #32]
 800b4b0:	440b      	add	r3, r1
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	da0b      	bge.n	800b4ce <tcp_write+0x12a>
 800b4b6:	4b72      	ldr	r3, [pc, #456]	; (800b680 <tcp_write+0x2dc>)
 800b4b8:	f240 12e9 	movw	r2, #489	; 0x1e9
 800b4bc:	4974      	ldr	r1, [pc, #464]	; (800b690 <tcp_write+0x2ec>)
 800b4be:	4872      	ldr	r0, [pc, #456]	; (800b688 <tcp_write+0x2e4>)
 800b4c0:	f008 fb26 	bl	8013b10 <iprintf>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	f008 fc25 	bl	8013d14 <fflush>
 800b4ca:	f008 fb6a 	bl	8013ba2 <abort>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d0:	891a      	ldrh	r2, [r3, #8]
 800b4d2:	8c3b      	ldrh	r3, [r7, #32]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	873b      	strh	r3, [r7, #56]	; 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800b4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e6:	895b      	ldrh	r3, [r3, #10]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d00b      	beq.n	800b504 <tcp_write+0x160>
 800b4ec:	4b64      	ldr	r3, [pc, #400]	; (800b680 <tcp_write+0x2dc>)
 800b4ee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b4f2:	4968      	ldr	r1, [pc, #416]	; (800b694 <tcp_write+0x2f0>)
 800b4f4:	4864      	ldr	r0, [pc, #400]	; (800b688 <tcp_write+0x2e4>)
 800b4f6:	f008 fb0b 	bl	8013b10 <iprintf>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	f008 fc0a 	bl	8013d14 <fflush>
 800b500:	f008 fb4f 	bl	8013ba2 <abort>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b50a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b50c:	8a7b      	ldrh	r3, [r7, #18]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d02c      	beq.n	800b56c <tcp_write+0x1c8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b512:	8a7b      	ldrh	r3, [r7, #18]
 800b514:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b516:	429a      	cmp	r2, r3
 800b518:	d20b      	bcs.n	800b532 <tcp_write+0x18e>
 800b51a:	4b59      	ldr	r3, [pc, #356]	; (800b680 <tcp_write+0x2dc>)
 800b51c:	f240 12fb 	movw	r2, #507	; 0x1fb
 800b520:	495d      	ldr	r1, [pc, #372]	; (800b698 <tcp_write+0x2f4>)
 800b522:	4859      	ldr	r0, [pc, #356]	; (800b688 <tcp_write+0x2e4>)
 800b524:	f008 faf4 	bl	8013b10 <iprintf>
 800b528:	2000      	movs	r0, #0
 800b52a:	f008 fbf3 	bl	8013d14 <fflush>
 800b52e:	f008 fb38 	bl	8013ba2 <abort>
      seg = last_unsent;
 800b532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b534:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b536:	8a7b      	ldrh	r3, [r7, #18]
 800b538:	88fa      	ldrh	r2, [r7, #6]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d901      	bls.n	800b542 <tcp_write+0x19e>
 800b53e:	8a7b      	ldrh	r3, [r7, #18]
 800b540:	e000      	b.n	800b544 <tcp_write+0x1a0>
 800b542:	88fb      	ldrh	r3, [r7, #6]
 800b544:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b546:	4293      	cmp	r3, r2
 800b548:	bfa8      	it	ge
 800b54a:	4613      	movge	r3, r2
 800b54c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b54e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b552:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b554:	4413      	add	r3, r2
 800b556:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b55a:	8a7a      	ldrh	r2, [r7, #18]
 800b55c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	b29b      	uxth	r3, r3
 800b562:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b564:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b566:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b56c:	8a7b      	ldrh	r3, [r7, #18]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d010      	beq.n	800b594 <tcp_write+0x1f0>
 800b572:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d00b      	beq.n	800b594 <tcp_write+0x1f0>
 800b57c:	4b40      	ldr	r3, [pc, #256]	; (800b680 <tcp_write+0x2dc>)
 800b57e:	f240 2203 	movw	r2, #515	; 0x203
 800b582:	4946      	ldr	r1, [pc, #280]	; (800b69c <tcp_write+0x2f8>)
 800b584:	4840      	ldr	r0, [pc, #256]	; (800b688 <tcp_write+0x2e4>)
 800b586:	f008 fac3 	bl	8013b10 <iprintf>
 800b58a:	2000      	movs	r0, #0
 800b58c:	f008 fbc2 	bl	8013d14 <fflush>
 800b590:	f008 fb07 	bl	8013ba2 <abort>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b594:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	f080 8185 	bcs.w	800b8aa <tcp_write+0x506>
 800b5a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8181 	beq.w	800b8aa <tcp_write+0x506>
 800b5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5aa:	891b      	ldrh	r3, [r3, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 817c 	beq.w	800b8aa <tcp_write+0x506>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	bfa8      	it	ge
 800b5c0:	4613      	movge	r3, r2
 800b5c2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b5c8:	797b      	ldrb	r3, [r7, #5]
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d029      	beq.n	800b626 <tcp_write+0x282>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b5d2:	f107 0012 	add.w	r0, r7, #18
 800b5d6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b5d8:	8bf9      	ldrh	r1, [r7, #30]
 800b5da:	2301      	movs	r3, #1
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	797b      	ldrb	r3, [r7, #5]
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f7ff fdc3 	bl	800b174 <tcp_pbuf_prealloc>
 800b5ee:	6578      	str	r0, [r7, #84]	; 0x54
 800b5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 8278 	beq.w	800bae8 <tcp_write+0x744>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800b5f8:	8a7b      	ldrh	r3, [r7, #18]
 800b5fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5fe:	6858      	ldr	r0, [r3, #4]
 800b600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	4413      	add	r3, r2
 800b608:	8bfa      	ldrh	r2, [r7, #30]
 800b60a:	4619      	mov	r1, r3
 800b60c:	f008 fc82 	bl	8013f14 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b610:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b612:	f7fa fde9 	bl	80061e8 <pbuf_clen>
 800b616:	4603      	mov	r3, r0
 800b618:	461a      	mov	r2, r3
 800b61a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b61e:	4413      	add	r3, r2
 800b620:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b624:	e059      	b.n	800b6da <tcp_write+0x336>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	637b      	str	r3, [r7, #52]	; 0x34
 800b62c:	e002      	b.n	800b634 <tcp_write+0x290>
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	637b      	str	r3, [r7, #52]	; 0x34
 800b634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1f8      	bne.n	800b62e <tcp_write+0x28a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63e:	7b1b      	ldrb	r3, [r3, #12]
 800b640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d12d      	bne.n	800b6a4 <tcp_write+0x300>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b64e:	8952      	ldrh	r2, [r2, #10]
 800b650:	441a      	add	r2, r3
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	429a      	cmp	r2, r3
 800b656:	d125      	bne.n	800b6a4 <tcp_write+0x300>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00b      	beq.n	800b678 <tcp_write+0x2d4>
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <tcp_write+0x2dc>)
 800b662:	f44f 720d 	mov.w	r2, #564	; 0x234
 800b666:	490e      	ldr	r1, [pc, #56]	; (800b6a0 <tcp_write+0x2fc>)
 800b668:	4807      	ldr	r0, [pc, #28]	; (800b688 <tcp_write+0x2e4>)
 800b66a:	f008 fa51 	bl	8013b10 <iprintf>
 800b66e:	2000      	movs	r0, #0
 800b670:	f008 fb50 	bl	8013d14 <fflush>
 800b674:	f008 fa95 	bl	8013ba2 <abort>
          extendlen = seglen;
 800b678:	8bfb      	ldrh	r3, [r7, #30]
 800b67a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b67c:	e02d      	b.n	800b6da <tcp_write+0x336>
 800b67e:	bf00      	nop
 800b680:	08016e74 	.word	0x08016e74
 800b684:	08017004 	.word	0x08017004
 800b688:	08016eb8 	.word	0x08016eb8
 800b68c:	0801701c 	.word	0x0801701c
 800b690:	08017050 	.word	0x08017050
 800b694:	08017068 	.word	0x08017068
 800b698:	08017098 	.word	0x08017098
 800b69c:	080170b8 	.word	0x080170b8
 800b6a0:	080170d8 	.word	0x080170d8
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b6a4:	8bfb      	ldrh	r3, [r7, #30]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	f7fa fab0 	bl	8005c10 <pbuf_alloc>
 800b6b0:	6578      	str	r0, [r7, #84]	; 0x54
 800b6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 8219 	beq.w	800baec <tcp_write+0x748>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b6ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b6c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b6c8:	f7fa fd8e 	bl	80061e8 <pbuf_clen>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b6da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6de:	8bfb      	ldrh	r3, [r7, #30]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b6e6:	e0e0      	b.n	800b8aa <tcp_write+0x506>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80db 	beq.w	800b8aa <tcp_write+0x506>
 800b6f4:	4ba5      	ldr	r3, [pc, #660]	; (800b98c <tcp_write+0x5e8>)
 800b6f6:	f240 224e 	movw	r2, #590	; 0x24e
 800b6fa:	49a5      	ldr	r1, [pc, #660]	; (800b990 <tcp_write+0x5ec>)
 800b6fc:	48a5      	ldr	r0, [pc, #660]	; (800b994 <tcp_write+0x5f0>)
 800b6fe:	f008 fa07 	bl	8013b10 <iprintf>
 800b702:	2000      	movs	r0, #0
 800b704:	f008 fb06 	bl	8013d14 <fflush>
 800b708:	f008 fa4b 	bl	8013ba2 <abort>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
 800b70c:	88fa      	ldrh	r2, [r7, #6]
 800b70e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b716:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b722:	8b7a      	ldrh	r2, [r7, #26]
 800b724:	8bbb      	ldrh	r3, [r7, #28]
 800b726:	4293      	cmp	r3, r2
 800b728:	bf28      	it	cs
 800b72a:	4613      	movcs	r3, r2
 800b72c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b72e:	797b      	ldrb	r3, [r7, #5]
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d03b      	beq.n	800b7b0 <tcp_write+0x40c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b738:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	8b3b      	ldrh	r3, [r7, #24]
 800b740:	4413      	add	r3, r2
 800b742:	b299      	uxth	r1, r3
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	2b00      	cmp	r3, #0
 800b748:	bf0c      	ite	eq
 800b74a:	2301      	moveq	r3, #1
 800b74c:	2300      	movne	r3, #0
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	f107 0012 	add.w	r0, r7, #18
 800b754:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	797b      	ldrb	r3, [r7, #5]
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4603      	mov	r3, r0
 800b762:	2036      	movs	r0, #54	; 0x36
 800b764:	f7ff fd06 	bl	800b174 <tcp_pbuf_prealloc>
 800b768:	6338      	str	r0, [r7, #48]	; 0x30
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 81bf 	beq.w	800baf0 <tcp_write+0x74c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	895b      	ldrh	r3, [r3, #10]
 800b776:	8b3a      	ldrh	r2, [r7, #24]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d90b      	bls.n	800b794 <tcp_write+0x3f0>
 800b77c:	4b83      	ldr	r3, [pc, #524]	; (800b98c <tcp_write+0x5e8>)
 800b77e:	f240 226a 	movw	r2, #618	; 0x26a
 800b782:	4985      	ldr	r1, [pc, #532]	; (800b998 <tcp_write+0x5f4>)
 800b784:	4883      	ldr	r0, [pc, #524]	; (800b994 <tcp_write+0x5f0>)
 800b786:	f008 f9c3 	bl	8013b10 <iprintf>
 800b78a:	2000      	movs	r0, #0
 800b78c:	f008 fac2 	bl	8013d14 <fflush>
 800b790:	f008 fa07 	bl	8013ba2 <abort>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b79c:	18d0      	adds	r0, r2, r3
 800b79e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	8b3a      	ldrh	r2, [r7, #24]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	f008 fbb3 	bl	8013f14 <memcpy>
 800b7ae:	e034      	b.n	800b81a <tcp_write+0x476>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00b      	beq.n	800b7ce <tcp_write+0x42a>
 800b7b6:	4b75      	ldr	r3, [pc, #468]	; (800b98c <tcp_write+0x5e8>)
 800b7b8:	f44f 721d 	mov.w	r2, #628	; 0x274
 800b7bc:	4977      	ldr	r1, [pc, #476]	; (800b99c <tcp_write+0x5f8>)
 800b7be:	4875      	ldr	r0, [pc, #468]	; (800b994 <tcp_write+0x5f0>)
 800b7c0:	f008 f9a6 	bl	8013b10 <iprintf>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f008 faa5 	bl	8013d14 <fflush>
 800b7ca:	f008 f9ea 	bl	8013ba2 <abort>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b7ce:	8b3b      	ldrh	r3, [r7, #24]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	2036      	movs	r0, #54	; 0x36
 800b7d6:	f7fa fa1b 	bl	8005c10 <pbuf_alloc>
 800b7da:	6178      	str	r0, [r7, #20]
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8188 	beq.w	800baf4 <tcp_write+0x750>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b7e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	441a      	add	r2, r3
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b7f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	2036      	movs	r0, #54	; 0x36
 800b7fe:	f7fa fa07 	bl	8005c10 <pbuf_alloc>
 800b802:	6338      	str	r0, [r7, #48]	; 0x30
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	2b00      	cmp	r3, #0
 800b808:	d103      	bne.n	800b812 <tcp_write+0x46e>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b80a:	6978      	ldr	r0, [r7, #20]
 800b80c:	f7fa fc6a 	bl	80060e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b810:	e173      	b.n	800bafa <tcp_write+0x756>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f7fa fd2d 	bl	8006274 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b81a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b81c:	f7fa fce4 	bl	80061e8 <pbuf_clen>
 800b820:	4603      	mov	r3, r0
 800b822:	461a      	mov	r2, r3
 800b824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b828:	4413      	add	r3, r2
 800b82a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b82e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b832:	2b08      	cmp	r3, #8
 800b834:	d903      	bls.n	800b83e <tcp_write+0x49a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b838:	f7fa fc54 	bl	80060e4 <pbuf_free>
      goto memerr;
 800b83c:	e15d      	b.n	800bafa <tcp_write+0x756>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b842:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b846:	441a      	add	r2, r3
 800b848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	4613      	mov	r3, r2
 800b850:	2200      	movs	r2, #0
 800b852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7ff fbd1 	bl	800affc <tcp_create_segment>
 800b85a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 814a 	beq.w	800baf8 <tcp_write+0x754>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800b864:	8a7a      	ldrh	r2, [r7, #18]
 800b866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b868:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <tcp_write+0x4d2>
      queue = seg;
 800b870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b872:	647b      	str	r3, [r7, #68]	; 0x44
 800b874:	e011      	b.n	800b89a <tcp_write+0x4f6>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10b      	bne.n	800b894 <tcp_write+0x4f0>
 800b87c:	4b43      	ldr	r3, [pc, #268]	; (800b98c <tcp_write+0x5e8>)
 800b87e:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b882:	4947      	ldr	r1, [pc, #284]	; (800b9a0 <tcp_write+0x5fc>)
 800b884:	4843      	ldr	r0, [pc, #268]	; (800b994 <tcp_write+0x5f0>)
 800b886:	f008 f943 	bl	8013b10 <iprintf>
 800b88a:	2000      	movs	r0, #0
 800b88c:	f008 fa42 	bl	8013d14 <fflush>
 800b890:	f008 f987 	bl	8013ba2 <abort>
      prev_seg->next = seg;
 800b894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b898:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b89e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b8a2:	8b3b      	ldrh	r3, [r7, #24]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b8aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	f4ff af2b 	bcc.w	800b70c <tcp_write+0x368>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800b8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <tcp_write+0x52c>
 800b8bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d006      	beq.n	800b8d0 <tcp_write+0x52c>
    last_unsent->oversize_left += oversize_add;
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c4:	895a      	ldrh	r2, [r3, #10]
 800b8c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ce:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b8d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d044      	beq.n	800b960 <tcp_write+0x5bc>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8dc:	e01e      	b.n	800b91c <tcp_write+0x578>
      p->tot_len += oversize_used;
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	891a      	ldrh	r2, [r3, #8]
 800b8e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b8e4:	4413      	add	r3, r2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d110      	bne.n	800b916 <tcp_write+0x572>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fa:	8952      	ldrh	r2, [r2, #10]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	4618      	mov	r0, r3
 800b904:	f008 fb06 	bl	8013f14 <memcpy>
        p->len += oversize_used;
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	895a      	ldrh	r2, [r3, #10]
 800b90c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b90e:	4413      	add	r3, r2
 800b910:	b29a      	uxth	r2, r3
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1dd      	bne.n	800b8de <tcp_write+0x53a>
      }
    }
    last_unsent->len += oversize_used;
 800b922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b924:	891a      	ldrh	r2, [r3, #8]
 800b926:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b928:	4413      	add	r3, r2
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92e:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800b930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b932:	895b      	ldrh	r3, [r3, #10]
 800b934:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b936:	429a      	cmp	r2, r3
 800b938:	d90b      	bls.n	800b952 <tcp_write+0x5ae>
 800b93a:	4b14      	ldr	r3, [pc, #80]	; (800b98c <tcp_write+0x5e8>)
 800b93c:	f240 22d7 	movw	r2, #727	; 0x2d7
 800b940:	4918      	ldr	r1, [pc, #96]	; (800b9a4 <tcp_write+0x600>)
 800b942:	4814      	ldr	r0, [pc, #80]	; (800b994 <tcp_write+0x5f0>)
 800b944:	f008 f8e4 	bl	8013b10 <iprintf>
 800b948:	2000      	movs	r0, #0
 800b94a:	f008 f9e3 	bl	8013d14 <fflush>
 800b94e:	f008 f928 	bl	8013ba2 <abort>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800b952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b954:	895a      	ldrh	r2, [r3, #10]
 800b956:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b95e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b960:	8a7a      	ldrh	r2, [r7, #18]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d02d      	beq.n	800b9ca <tcp_write+0x626>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b970:	2b00      	cmp	r3, #0
 800b972:	d11b      	bne.n	800b9ac <tcp_write+0x608>
 800b974:	4b05      	ldr	r3, [pc, #20]	; (800b98c <tcp_write+0x5e8>)
 800b976:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b97a:	490b      	ldr	r1, [pc, #44]	; (800b9a8 <tcp_write+0x604>)
 800b97c:	4805      	ldr	r0, [pc, #20]	; (800b994 <tcp_write+0x5f0>)
 800b97e:	f008 f8c7 	bl	8013b10 <iprintf>
 800b982:	2000      	movs	r0, #0
 800b984:	f008 f9c6 	bl	8013d14 <fflush>
 800b988:	f008 f90b 	bl	8013ba2 <abort>
 800b98c:	08016e74 	.word	0x08016e74
 800b990:	08017104 	.word	0x08017104
 800b994:	08016eb8 	.word	0x08016eb8
 800b998:	08017134 	.word	0x08017134
 800b99c:	08017174 	.word	0x08017174
 800b9a0:	08017184 	.word	0x08017184
 800b9a4:	08017198 	.word	0x08017198
 800b9a8:	080171c4 	.word	0x080171c4
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fa fc5e 	bl	8006274 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ba:	891a      	ldrh	r2, [r3, #8]
 800b9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9be:	891b      	ldrh	r3, [r3, #8]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c6:	811a      	strh	r2, [r3, #8]
 800b9c8:	e03c      	b.n	800ba44 <tcp_write+0x6a0>
  } else if (extendlen > 0) {
 800b9ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d039      	beq.n	800ba44 <tcp_write+0x6a0>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <tcp_write+0x63a>
 800b9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10b      	bne.n	800b9f6 <tcp_write+0x652>
 800b9de:	4b64      	ldr	r3, [pc, #400]	; (800bb70 <tcp_write+0x7cc>)
 800b9e0:	f240 22ea 	movw	r2, #746	; 0x2ea
 800b9e4:	4963      	ldr	r1, [pc, #396]	; (800bb74 <tcp_write+0x7d0>)
 800b9e6:	4864      	ldr	r0, [pc, #400]	; (800bb78 <tcp_write+0x7d4>)
 800b9e8:	f008 f892 	bl	8013b10 <iprintf>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f008 f991 	bl	8013d14 <fflush>
 800b9f2:	f008 f8d6 	bl	8013ba2 <abort>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9fc:	e009      	b.n	800ba12 <tcp_write+0x66e>
      p->tot_len += extendlen;
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	891a      	ldrh	r2, [r3, #8]
 800ba02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba04:	4413      	add	r3, r2
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1f1      	bne.n	800b9fe <tcp_write+0x65a>
    }
    p->tot_len += extendlen;
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	891a      	ldrh	r2, [r3, #8]
 800ba1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba20:	4413      	add	r3, r2
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	895a      	ldrh	r2, [r3, #10]
 800ba2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba2e:	4413      	add	r3, r2
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ba36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba38:	891a      	ldrh	r2, [r3, #8]
 800ba3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba3c:	4413      	add	r3, r2
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba42:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <tcp_write+0x6ae>
    pcb->unsent = queue;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba4e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba50:	e002      	b.n	800ba58 <tcp_write+0x6b4>
  } else {
    last_unsent->next = queue;
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba56:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba5c:	88fb      	ldrh	r3, [r7, #6]
 800ba5e:	441a      	add	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ba6a:	88fb      	ldrh	r3, [r7, #6]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ba7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d013      	beq.n	800bab2 <tcp_write+0x70e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10f      	bne.n	800bab2 <tcp_write+0x70e>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <tcp_write+0x70e>
 800ba9a:	4b35      	ldr	r3, [pc, #212]	; (800bb70 <tcp_write+0x7cc>)
 800ba9c:	f240 3216 	movw	r2, #790	; 0x316
 800baa0:	4936      	ldr	r1, [pc, #216]	; (800bb7c <tcp_write+0x7d8>)
 800baa2:	4835      	ldr	r0, [pc, #212]	; (800bb78 <tcp_write+0x7d4>)
 800baa4:	f008 f834 	bl	8013b10 <iprintf>
 800baa8:	2000      	movs	r0, #0
 800baaa:	f008 f933 	bl	8013d14 <fflush>
 800baae:	f008 f878 	bl	8013ba2 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d015      	beq.n	800bae4 <tcp_write+0x740>
 800bab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d011      	beq.n	800bae4 <tcp_write+0x740>
 800bac0:	797b      	ldrb	r3, [r7, #5]
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10c      	bne.n	800bae4 <tcp_write+0x740>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800baca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bacc:	691c      	ldr	r4, [r3, #16]
 800bace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	899b      	ldrh	r3, [r3, #12]
 800bad4:	b29d      	uxth	r5, r3
 800bad6:	2008      	movs	r0, #8
 800bad8:	f7f8 f9f2 	bl	8003ec0 <lwip_htons>
 800badc:	4603      	mov	r3, r0
 800bade:	432b      	orrs	r3, r5
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	e03e      	b.n	800bb66 <tcp_write+0x7c2>
          goto memerr;
 800bae8:	bf00      	nop
 800baea:	e006      	b.n	800bafa <tcp_write+0x756>
            goto memerr;
 800baec:	bf00      	nop
 800baee:	e004      	b.n	800bafa <tcp_write+0x756>
        goto memerr;
 800baf0:	bf00      	nop
 800baf2:	e002      	b.n	800bafa <tcp_write+0x756>
        goto memerr;
 800baf4:	bf00      	nop
 800baf6:	e000      	b.n	800bafa <tcp_write+0x756>
      goto memerr;
 800baf8:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8b5b      	ldrh	r3, [r3, #26]
 800bafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800bb08:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <tcp_write+0x7dc>)
 800bb0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	4b1b      	ldr	r3, [pc, #108]	; (800bb80 <tcp_write+0x7dc>)
 800bb14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  if (concat_p != NULL) {
 800bb18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <tcp_write+0x780>
    pbuf_free(concat_p);
 800bb1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb20:	f7fa fae0 	bl	80060e4 <pbuf_free>
  }
  if (queue != NULL) {
 800bb24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <tcp_write+0x78c>
    tcp_segs_free(queue);
 800bb2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bb2c:	f7fc f916 	bl	8007d5c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <tcp_write+0x7be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10f      	bne.n	800bb62 <tcp_write+0x7be>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <tcp_write+0x7be>
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <tcp_write+0x7cc>)
 800bb4c:	f240 322b 	movw	r2, #811	; 0x32b
 800bb50:	490a      	ldr	r1, [pc, #40]	; (800bb7c <tcp_write+0x7d8>)
 800bb52:	4809      	ldr	r0, [pc, #36]	; (800bb78 <tcp_write+0x7d4>)
 800bb54:	f007 ffdc 	bl	8013b10 <iprintf>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	f008 f8db 	bl	8013d14 <fflush>
 800bb5e:	f008 f820 	bl	8013ba2 <abort>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bb62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3758      	adds	r7, #88	; 0x58
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	08016e74 	.word	0x08016e74
 800bb74:	080171fc 	.word	0x080171fc
 800bb78:	08016eb8 	.word	0x08016eb8
 800bb7c:	08017234 	.word	0x08017234
 800bb80:	2000221c 	.word	0x2000221c

0800bb84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bb84:	b5b0      	push	{r4, r5, r7, lr}
 800bb86:	b08a      	sub	sp, #40	; 0x28
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61fb      	str	r3, [r7, #28]
 800bb94:	2300      	movs	r3, #0
 800bb96:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10b      	bne.n	800bbba <tcp_split_unsent_seg+0x36>
 800bba2:	4ba7      	ldr	r3, [pc, #668]	; (800be40 <tcp_split_unsent_seg+0x2bc>)
 800bba4:	f240 324e 	movw	r2, #846	; 0x34e
 800bba8:	49a6      	ldr	r1, [pc, #664]	; (800be44 <tcp_split_unsent_seg+0x2c0>)
 800bbaa:	48a7      	ldr	r0, [pc, #668]	; (800be48 <tcp_split_unsent_seg+0x2c4>)
 800bbac:	f007 ffb0 	bl	8013b10 <iprintf>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f008 f8af 	bl	8013d14 <fflush>
 800bbb6:	f007 fff4 	bl	8013ba2 <abort>

  useg = pcb->unsent;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbe:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <tcp_split_unsent_seg+0x48>
    return ERR_MEM;
 800bbc6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbca:	e135      	b.n	800be38 <tcp_split_unsent_seg+0x2b4>
  }

  if (split == 0) {
 800bbcc:	887b      	ldrh	r3, [r7, #2]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10b      	bne.n	800bbea <tcp_split_unsent_seg+0x66>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bbd2:	4b9b      	ldr	r3, [pc, #620]	; (800be40 <tcp_split_unsent_seg+0x2bc>)
 800bbd4:	f240 3256 	movw	r2, #854	; 0x356
 800bbd8:	499c      	ldr	r1, [pc, #624]	; (800be4c <tcp_split_unsent_seg+0x2c8>)
 800bbda:	489b      	ldr	r0, [pc, #620]	; (800be48 <tcp_split_unsent_seg+0x2c4>)
 800bbdc:	f007 ff98 	bl	8013b10 <iprintf>
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f008 f897 	bl	8013d14 <fflush>
 800bbe6:	f007 ffdc 	bl	8013ba2 <abort>
    return ERR_VAL;
  }

  if (useg->len <= split) {
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	891b      	ldrh	r3, [r3, #8]
 800bbee:	887a      	ldrh	r2, [r7, #2]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d301      	bcc.n	800bbf8 <tcp_split_unsent_seg+0x74>
    return ERR_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e11f      	b.n	800be38 <tcp_split_unsent_seg+0x2b4>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbfc:	887a      	ldrh	r2, [r7, #2]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d90b      	bls.n	800bc1a <tcp_split_unsent_seg+0x96>
 800bc02:	4b8f      	ldr	r3, [pc, #572]	; (800be40 <tcp_split_unsent_seg+0x2bc>)
 800bc04:	f240 325e 	movw	r2, #862	; 0x35e
 800bc08:	4991      	ldr	r1, [pc, #580]	; (800be50 <tcp_split_unsent_seg+0x2cc>)
 800bc0a:	488f      	ldr	r0, [pc, #572]	; (800be48 <tcp_split_unsent_seg+0x2c4>)
 800bc0c:	f007 ff80 	bl	8013b10 <iprintf>
 800bc10:	2000      	movs	r0, #0
 800bc12:	f008 f87f 	bl	8013d14 <fflush>
 800bc16:	f007 ffc4 	bl	8013ba2 <abort>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	891b      	ldrh	r3, [r3, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <tcp_split_unsent_seg+0xb6>
 800bc22:	4b87      	ldr	r3, [pc, #540]	; (800be40 <tcp_split_unsent_seg+0x2bc>)
 800bc24:	f240 325f 	movw	r2, #863	; 0x35f
 800bc28:	498a      	ldr	r1, [pc, #552]	; (800be54 <tcp_split_unsent_seg+0x2d0>)
 800bc2a:	4887      	ldr	r0, [pc, #540]	; (800be48 <tcp_split_unsent_seg+0x2c4>)
 800bc2c:	f007 ff70 	bl	8013b10 <iprintf>
 800bc30:	2000      	movs	r0, #0
 800bc32:	f008 f86f 	bl	8013d14 <fflush>
 800bc36:	f007 ffb4 	bl	8013ba2 <abort>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	7b1b      	ldrb	r3, [r3, #12]
 800bc3e:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <tcp_split_unsent_seg+0xca>
 800bc4a:	2304      	movs	r3, #4
 800bc4c:	e000      	b.n	800bc50 <tcp_split_unsent_seg+0xcc>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	891a      	ldrh	r2, [r3, #8]
 800bc56:	887b      	ldrh	r3, [r7, #2]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	89bb      	ldrh	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	2036      	movs	r0, #54	; 0x36
 800bc6e:	f7f9 ffcf 	bl	8005c10 <pbuf_alloc>
 800bc72:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 80bc 	beq.w	800bdf4 <tcp_split_unsent_seg+0x270>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	891a      	ldrh	r2, [r3, #8]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	887b      	ldrh	r3, [r7, #2]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	6858      	ldr	r0, [r3, #4]
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	18d1      	adds	r1, r2, r3
 800bc9c:	897b      	ldrh	r3, [r7, #10]
 800bc9e:	89ba      	ldrh	r2, [r7, #12]
 800bca0:	f7fa fc90 	bl	80065c4 <pbuf_copy_partial>
 800bca4:	4603      	mov	r3, r0
 800bca6:	461a      	mov	r2, r3
 800bca8:	89bb      	ldrh	r3, [r7, #12]
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	f040 80a4 	bne.w	800bdf8 <tcp_split_unsent_seg+0x274>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	899b      	ldrh	r3, [r3, #12]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7f8 f901 	bl	8003ec0 <lwip_htons>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcc6:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bcc8:	2300      	movs	r3, #0
 800bcca:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	f003 0308 	and.w	r3, r3, #8
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d007      	beq.n	800bce6 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_PSH;
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	f023 0308 	bic.w	r3, r3, #8
 800bcdc:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	f043 0308 	orr.w	r3, r3, #8
 800bce4:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d007      	beq.n	800bd00 <tcp_split_unsent_seg+0x17c>
    split_flags &= ~TCP_FIN;
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	f023 0301 	bic.w	r3, r3, #1
 800bcf6:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 800bcf8:	7dbb      	ldrb	r3, [r7, #22]
 800bcfa:	f043 0301 	orr.w	r3, r3, #1
 800bcfe:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f8 f8ef 	bl	8003eea <lwip_htonl>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	887b      	ldrh	r3, [r7, #2]
 800bd10:	18d1      	adds	r1, r2, r3
 800bd12:	7dba      	ldrb	r2, [r7, #22]
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	69b9      	ldr	r1, [r7, #24]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff f96d 	bl	800affc <tcp_create_segment>
 800bd22:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d102      	bne.n	800bd30 <tcp_split_unsent_seg+0x1ac>
    p = NULL; /* Freed by tcp_create_segment */
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800bd2e:	e064      	b.n	800bdfa <tcp_split_unsent_seg+0x276>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fa fa57 	bl	80061e8 <pbuf_clen>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd44:	1a9b      	subs	r3, r3, r2
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6858      	ldr	r0, [r3, #4]
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	891a      	ldrh	r2, [r3, #8]
 800bd58:	89bb      	ldrh	r3, [r7, #12]
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f7fa f848 	bl	8005df4 <pbuf_realloc>
  useg->len -= remainder;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	891a      	ldrh	r2, [r3, #8]
 800bd68:	89bb      	ldrh	r3, [r7, #12]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	691c      	ldr	r4, [r3, #16]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	899b      	ldrh	r3, [r3, #12]
 800bd7c:	b29d      	uxth	r5, r3
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7f8 f89c 	bl	8003ec0 <lwip_htons>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	432b      	orrs	r3, r5
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	81a3      	strh	r3, [r4, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2200      	movs	r2, #0
 800bd94:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fa fa24 	bl	80061e8 <pbuf_clen>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdaa:	4413      	add	r3, r2
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fa fa15 	bl	80061e8 <pbuf_clen>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdc8:	4413      	add	r3, r2
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	69fa      	ldr	r2, [r7, #28]
 800bdde:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <tcp_split_unsent_seg+0x26c>
    pcb->unsent_oversize = 0;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e021      	b.n	800be38 <tcp_split_unsent_seg+0x2b4>
    goto memerr;
 800bdf4:	bf00      	nop
 800bdf6:	e000      	b.n	800bdfa <tcp_split_unsent_seg+0x276>
    goto memerr;
 800bdf8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800bdfa:	4b17      	ldr	r3, [pc, #92]	; (800be58 <tcp_split_unsent_seg+0x2d4>)
 800bdfc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800be00:	3301      	adds	r3, #1
 800be02:	b29a      	uxth	r2, r3
 800be04:	4b14      	ldr	r3, [pc, #80]	; (800be58 <tcp_split_unsent_seg+0x2d4>)
 800be06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <tcp_split_unsent_seg+0x2a4>
 800be10:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <tcp_split_unsent_seg+0x2bc>)
 800be12:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 800be16:	4911      	ldr	r1, [pc, #68]	; (800be5c <tcp_split_unsent_seg+0x2d8>)
 800be18:	480b      	ldr	r0, [pc, #44]	; (800be48 <tcp_split_unsent_seg+0x2c4>)
 800be1a:	f007 fe79 	bl	8013b10 <iprintf>
 800be1e:	2000      	movs	r0, #0
 800be20:	f007 ff78 	bl	8013d14 <fflush>
 800be24:	f007 febd 	bl	8013ba2 <abort>
  if (p != NULL) {
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <tcp_split_unsent_seg+0x2b0>
    pbuf_free(p);
 800be2e:	69b8      	ldr	r0, [r7, #24]
 800be30:	f7fa f958 	bl	80060e4 <pbuf_free>
  }

  return ERR_MEM;
 800be34:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bdb0      	pop	{r4, r5, r7, pc}
 800be40:	08016e74 	.word	0x08016e74
 800be44:	08017254 	.word	0x08017254
 800be48:	08016eb8 	.word	0x08016eb8
 800be4c:	08017278 	.word	0x08017278
 800be50:	0801729c 	.word	0x0801729c
 800be54:	080172ac 	.word	0x080172ac
 800be58:	2000221c 	.word	0x2000221c
 800be5c:	080172bc 	.word	0x080172bc

0800be60 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800be60:	b5b0      	push	{r4, r5, r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10b      	bne.n	800be86 <tcp_send_fin+0x26>
 800be6e:	4b23      	ldr	r3, [pc, #140]	; (800befc <tcp_send_fin+0x9c>)
 800be70:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800be74:	4922      	ldr	r1, [pc, #136]	; (800bf00 <tcp_send_fin+0xa0>)
 800be76:	4823      	ldr	r0, [pc, #140]	; (800bf04 <tcp_send_fin+0xa4>)
 800be78:	f007 fe4a 	bl	8013b10 <iprintf>
 800be7c:	2000      	movs	r0, #0
 800be7e:	f007 ff49 	bl	8013d14 <fflush>
 800be82:	f007 fe8e 	bl	8013ba2 <abort>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d02d      	beq.n	800beea <tcp_send_fin+0x8a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be92:	60fb      	str	r3, [r7, #12]
 800be94:	e002      	b.n	800be9c <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1f8      	bne.n	800be96 <tcp_send_fin+0x36>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	899b      	ldrh	r3, [r3, #12]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	4618      	mov	r0, r3
 800beae:	f7f8 f807 	bl	8003ec0 <lwip_htons>
 800beb2:	4603      	mov	r3, r0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 0307 	and.w	r3, r3, #7
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d115      	bne.n	800beea <tcp_send_fin+0x8a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691c      	ldr	r4, [r3, #16]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	899b      	ldrh	r3, [r3, #12]
 800bec8:	b29d      	uxth	r5, r3
 800beca:	2001      	movs	r0, #1
 800becc:	f7f7 fff8 	bl	8003ec0 <lwip_htons>
 800bed0:	4603      	mov	r3, r0
 800bed2:	432b      	orrs	r3, r5
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	81a3      	strh	r3, [r4, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	8b5b      	ldrh	r3, [r3, #26]
 800bedc:	f043 0320 	orr.w	r3, r3, #32
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e004      	b.n	800bef4 <tcp_send_fin+0x94>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800beea:	2101      	movs	r1, #1
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f80b 	bl	800bf08 <tcp_enqueue_flags>
 800bef2:	4603      	mov	r3, r0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bdb0      	pop	{r4, r5, r7, pc}
 800befc:	08016e74 	.word	0x08016e74
 800bf00:	080172c8 	.word	0x080172c8
 800bf04:	08016eb8 	.word	0x08016eb8

0800bf08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	f003 0303 	and.w	r3, r3, #3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10b      	bne.n	800bf3e <tcp_enqueue_flags+0x36>
 800bf26:	4b76      	ldr	r3, [pc, #472]	; (800c100 <tcp_enqueue_flags+0x1f8>)
 800bf28:	f240 4214 	movw	r2, #1044	; 0x414
 800bf2c:	4975      	ldr	r1, [pc, #468]	; (800c104 <tcp_enqueue_flags+0x1fc>)
 800bf2e:	4876      	ldr	r0, [pc, #472]	; (800c108 <tcp_enqueue_flags+0x200>)
 800bf30:	f007 fdee 	bl	8013b10 <iprintf>
 800bf34:	2000      	movs	r0, #0
 800bf36:	f007 feed 	bl	8013d14 <fflush>
 800bf3a:	f007 fe32 	bl	8013ba2 <abort>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10b      	bne.n	800bf5c <tcp_enqueue_flags+0x54>
 800bf44:	4b6e      	ldr	r3, [pc, #440]	; (800c100 <tcp_enqueue_flags+0x1f8>)
 800bf46:	f240 4215 	movw	r2, #1045	; 0x415
 800bf4a:	4970      	ldr	r1, [pc, #448]	; (800c10c <tcp_enqueue_flags+0x204>)
 800bf4c:	486e      	ldr	r0, [pc, #440]	; (800c108 <tcp_enqueue_flags+0x200>)
 800bf4e:	f007 fddf 	bl	8013b10 <iprintf>
 800bf52:	2000      	movs	r0, #0
 800bf54:	f007 fede 	bl	8013d14 <fflush>
 800bf58:	f007 fe23 	bl	8013ba2 <abort>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <tcp_enqueue_flags+0x62>
    optflags = TF_SEG_OPTS_MSS;
 800bf66:	2301      	movs	r3, #1
 800bf68:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf6a:	7ffb      	ldrb	r3, [r7, #31]
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <tcp_enqueue_flags+0x70>
 800bf74:	2304      	movs	r3, #4
 800bf76:	e000      	b.n	800bf7a <tcp_enqueue_flags+0x72>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf84:	4619      	mov	r1, r3
 800bf86:	2036      	movs	r0, #54	; 0x36
 800bf88:	f7f9 fe42 	bl	8005c10 <pbuf_alloc>
 800bf8c:	6138      	str	r0, [r7, #16]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d111      	bne.n	800bfb8 <tcp_enqueue_flags+0xb0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	8b5b      	ldrh	r3, [r3, #26]
 800bf98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800bfa2:	4b5b      	ldr	r3, [pc, #364]	; (800c110 <tcp_enqueue_flags+0x208>)
 800bfa4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	4b58      	ldr	r3, [pc, #352]	; (800c110 <tcp_enqueue_flags+0x208>)
 800bfae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800bfb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb6:	e09f      	b.n	800c0f8 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	895a      	ldrh	r2, [r3, #10]
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d20b      	bcs.n	800bfdc <tcp_enqueue_flags+0xd4>
 800bfc4:	4b4e      	ldr	r3, [pc, #312]	; (800c100 <tcp_enqueue_flags+0x1f8>)
 800bfc6:	f240 423e 	movw	r2, #1086	; 0x43e
 800bfca:	4952      	ldr	r1, [pc, #328]	; (800c114 <tcp_enqueue_flags+0x20c>)
 800bfcc:	484e      	ldr	r0, [pc, #312]	; (800c108 <tcp_enqueue_flags+0x200>)
 800bfce:	f007 fd9f 	bl	8013b10 <iprintf>
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	f007 fe9e 	bl	8013d14 <fflush>
 800bfd8:	f007 fde3 	bl	8013ba2 <abort>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bfe0:	78fa      	ldrb	r2, [r7, #3]
 800bfe2:	7ffb      	ldrb	r3, [r7, #31]
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	6939      	ldr	r1, [r7, #16]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff f806 	bl	800affc <tcp_create_segment>
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d111      	bne.n	800c01c <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	8b5b      	ldrh	r3, [r3, #26]
 800bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c000:	b29a      	uxth	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800c006:	4b42      	ldr	r3, [pc, #264]	; (800c110 <tcp_enqueue_flags+0x208>)
 800c008:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c00c:	3301      	adds	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	4b3f      	ldr	r3, [pc, #252]	; (800c110 <tcp_enqueue_flags+0x208>)
 800c012:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    return ERR_MEM;
 800c016:	f04f 33ff 	mov.w	r3, #4294967295
 800c01a:	e06d      	b.n	800c0f8 <tcp_enqueue_flags+0x1f0>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	891b      	ldrh	r3, [r3, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <tcp_enqueue_flags+0x134>
 800c024:	4b36      	ldr	r3, [pc, #216]	; (800c100 <tcp_enqueue_flags+0x1f8>)
 800c026:	f240 4247 	movw	r2, #1095	; 0x447
 800c02a:	493b      	ldr	r1, [pc, #236]	; (800c118 <tcp_enqueue_flags+0x210>)
 800c02c:	4836      	ldr	r0, [pc, #216]	; (800c108 <tcp_enqueue_flags+0x200>)
 800c02e:	f007 fd6f 	bl	8013b10 <iprintf>
 800c032:	2000      	movs	r0, #0
 800c034:	f007 fe6e 	bl	8013d14 <fflush>
 800c038:	f007 fdb3 	bl	8013ba2 <abort>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <tcp_enqueue_flags+0x144>
    pcb->unsent = seg;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	66da      	str	r2, [r3, #108]	; 0x6c
 800c04a:	e00d      	b.n	800c068 <tcp_enqueue_flags+0x160>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	e002      	b.n	800c05a <tcp_enqueue_flags+0x152>
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	61bb      	str	r3, [r7, #24]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f8      	bne.n	800c054 <tcp_enqueue_flags+0x14c>
    useg->next = seg;
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d104      	bne.n	800c084 <tcp_enqueue_flags+0x17c>
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <tcp_enqueue_flags+0x186>
    pcb->snd_lbb++;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d006      	beq.n	800c0a6 <tcp_enqueue_flags+0x19e>
    tcp_set_flags(pcb, TF_FIN);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8b5b      	ldrh	r3, [r3, #26]
 800c09c:	f043 0320 	orr.w	r3, r3, #32
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fa f89c 	bl	80061e8 <pbuf_clen>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d013      	beq.n	800c0f6 <tcp_enqueue_flags+0x1ee>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10f      	bne.n	800c0f6 <tcp_enqueue_flags+0x1ee>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10b      	bne.n	800c0f6 <tcp_enqueue_flags+0x1ee>
 800c0de:	4b08      	ldr	r3, [pc, #32]	; (800c100 <tcp_enqueue_flags+0x1f8>)
 800c0e0:	f240 426a 	movw	r2, #1130	; 0x46a
 800c0e4:	490d      	ldr	r1, [pc, #52]	; (800c11c <tcp_enqueue_flags+0x214>)
 800c0e6:	4808      	ldr	r0, [pc, #32]	; (800c108 <tcp_enqueue_flags+0x200>)
 800c0e8:	f007 fd12 	bl	8013b10 <iprintf>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f007 fe11 	bl	8013d14 <fflush>
 800c0f2:	f007 fd56 	bl	8013ba2 <abort>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	08016e74 	.word	0x08016e74
 800c104:	080172e4 	.word	0x080172e4
 800c108:	08016eb8 	.word	0x08016eb8
 800c10c:	0801733c 	.word	0x0801733c
 800c110:	2000221c 	.word	0x2000221c
 800c114:	0801735c 	.word	0x0801735c
 800c118:	08017398 	.word	0x08017398
 800c11c:	080173c4 	.word	0x080173c4

0800c120 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c120:	b5b0      	push	{r4, r5, r7, lr}
 800c122:	b08a      	sub	sp, #40	; 0x28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10b      	bne.n	800c146 <tcp_output+0x26>
 800c12e:	4ba9      	ldr	r3, [pc, #676]	; (800c3d4 <tcp_output+0x2b4>)
 800c130:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800c134:	49a8      	ldr	r1, [pc, #672]	; (800c3d8 <tcp_output+0x2b8>)
 800c136:	48a9      	ldr	r0, [pc, #676]	; (800c3dc <tcp_output+0x2bc>)
 800c138:	f007 fcea 	bl	8013b10 <iprintf>
 800c13c:	2000      	movs	r0, #0
 800c13e:	f007 fde9 	bl	8013d14 <fflush>
 800c142:	f007 fd2e 	bl	8013ba2 <abort>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7d1b      	ldrb	r3, [r3, #20]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d10b      	bne.n	800c166 <tcp_output+0x46>
 800c14e:	4ba1      	ldr	r3, [pc, #644]	; (800c3d4 <tcp_output+0x2b4>)
 800c150:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
 800c154:	49a2      	ldr	r1, [pc, #648]	; (800c3e0 <tcp_output+0x2c0>)
 800c156:	48a1      	ldr	r0, [pc, #644]	; (800c3dc <tcp_output+0x2bc>)
 800c158:	f007 fcda 	bl	8013b10 <iprintf>
 800c15c:	2000      	movs	r0, #0
 800c15e:	f007 fdd9 	bl	8013d14 <fflush>
 800c162:	f007 fd1e 	bl	8013ba2 <abort>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c166:	4b9f      	ldr	r3, [pc, #636]	; (800c3e4 <tcp_output+0x2c4>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d101      	bne.n	800c174 <tcp_output+0x54>
    return ERR_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	e1d8      	b.n	800c526 <tcp_output+0x406>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c180:	429a      	cmp	r2, r3
 800c182:	d203      	bcs.n	800c18c <tcp_output+0x6c>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c18a:	e002      	b.n	800c192 <tcp_output+0x72>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c192:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c198:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <tcp_output+0x98>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8b5b      	ldrh	r3, [r3, #26]
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 81b1 	beq.w	800c510 <tcp_output+0x3f0>
      return tcp_send_empty_ack(pcb);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fee6 	bl	800cf80 <tcp_send_empty_ack>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	e1b6      	b.n	800c526 <tcp_output+0x406>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fe feff 	bl	800afc4 <tcp_route>
 800c1c6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d102      	bne.n	800c1d4 <tcp_output+0xb4>
    return ERR_RTE;
 800c1ce:	f06f 0303 	mvn.w	r3, #3
 800c1d2:	e1a8      	b.n	800c526 <tcp_output+0x406>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <tcp_output+0xc2>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d111      	bne.n	800c206 <tcp_output+0xe6>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <tcp_output+0xce>
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	e000      	b.n	800c1f0 <tcp_output+0xd0>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <tcp_output+0xde>
      return ERR_RTE;
 800c1f8:	f06f 0303 	mvn.w	r3, #3
 800c1fc:	e193      	b.n	800c526 <tcp_output+0x406>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f7 fe6c 	bl	8003eea <lwip_htonl>
 800c212:	4602      	mov	r2, r0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21c:	8912      	ldrh	r2, [r2, #8]
 800c21e:	441a      	add	r2, r3
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	429a      	cmp	r2, r3
 800c224:	d927      	bls.n	800c276 <tcp_output+0x156>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c22c:	461a      	mov	r2, r3
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	d114      	bne.n	800c25e <tcp_output+0x13e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d110      	bne.n	800c25e <tcp_output+0x13e>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10b      	bne.n	800c25e <tcp_output+0x13e>
      pcb->persist_cnt = 0;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	8b5b      	ldrh	r3, [r3, #26]
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 8154 	beq.w	800c514 <tcp_output+0x3f4>
      return tcp_send_empty_ack(pcb);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 fe87 	bl	800cf80 <tcp_send_empty_ack>
 800c272:	4603      	mov	r3, r0
 800c274:	e157      	b.n	800c526 <tcp_output+0x406>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c282:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 8123 	beq.w	800c4d2 <tcp_output+0x3b2>
    for (; useg->next != NULL; useg = useg->next);
 800c28c:	e002      	b.n	800c294 <tcp_output+0x174>
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	623b      	str	r3, [r7, #32]
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1f8      	bne.n	800c28e <tcp_output+0x16e>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c29c:	e119      	b.n	800c4d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	899b      	ldrh	r3, [r3, #12]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7f7 fe0a 	bl	8003ec0 <lwip_htons>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <tcp_output+0x1b0>
 800c2b8:	4b46      	ldr	r3, [pc, #280]	; (800c3d4 <tcp_output+0x2b4>)
 800c2ba:	f240 523b 	movw	r2, #1339	; 0x53b
 800c2be:	494a      	ldr	r1, [pc, #296]	; (800c3e8 <tcp_output+0x2c8>)
 800c2c0:	4846      	ldr	r0, [pc, #280]	; (800c3dc <tcp_output+0x2bc>)
 800c2c2:	f007 fc25 	bl	8013b10 <iprintf>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f007 fd24 	bl	8013d14 <fflush>
 800c2cc:	f007 fc69 	bl	8013ba2 <abort>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01f      	beq.n	800c318 <tcp_output+0x1f8>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	8b5b      	ldrh	r3, [r3, #26]
 800c2dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d119      	bne.n	800c318 <tcp_output+0x1f8>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <tcp_output+0x1e4>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d110      	bne.n	800c318 <tcp_output+0x1f8>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fa:	891a      	ldrh	r2, [r3, #8]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c300:	429a      	cmp	r2, r3
 800c302:	d209      	bcs.n	800c318 <tcp_output+0x1f8>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d004      	beq.n	800c318 <tcp_output+0x1f8>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c314:	2b07      	cmp	r3, #7
 800c316:	d901      	bls.n	800c31c <tcp_output+0x1fc>
 800c318:	2301      	movs	r3, #1
 800c31a:	e000      	b.n	800c31e <tcp_output+0x1fe>
 800c31c:	2300      	movs	r3, #0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <tcp_output+0x210>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	8b5b      	ldrh	r3, [r3, #26]
 800c326:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 80e6 	beq.w	800c4fc <tcp_output+0x3dc>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7d1b      	ldrb	r3, [r3, #20]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d00c      	beq.n	800c352 <tcp_output+0x232>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	691c      	ldr	r4, [r3, #16]
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	899b      	ldrh	r3, [r3, #12]
 800c342:	b29d      	uxth	r5, r3
 800c344:	2010      	movs	r0, #16
 800c346:	f7f7 fdbb 	bl	8003ec0 <lwip_htons>
 800c34a:	4603      	mov	r3, r0
 800c34c:	432b      	orrs	r3, r5
 800c34e:	b29b      	uxth	r3, r3
 800c350:	81a3      	strh	r3, [r4, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c358:	f000 f910 	bl	800c57c <tcp_output_segment>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d009      	beq.n	800c37c <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	8b5b      	ldrh	r3, [r3, #26]
 800c36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c370:	b29a      	uxth	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	835a      	strh	r2, [r3, #26]
      return err;
 800c376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c37a:	e0d4      	b.n	800c526 <tcp_output+0x406>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	2200      	movs	r2, #0
 800c380:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	7d1b      	ldrb	r3, [r3, #20]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d006      	beq.n	800c3a0 <tcp_output+0x280>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	8b5b      	ldrh	r3, [r3, #26]
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f7 fd9f 	bl	8003eea <lwip_htonl>
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	891b      	ldrh	r3, [r3, #8]
 800c3b2:	461d      	mov	r5, r3
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	899b      	ldrh	r3, [r3, #12]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7f7 fd7f 	bl	8003ec0 <lwip_htons>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00e      	beq.n	800c3ec <tcp_output+0x2cc>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e00d      	b.n	800c3ee <tcp_output+0x2ce>
 800c3d2:	bf00      	nop
 800c3d4:	08016e74 	.word	0x08016e74
 800c3d8:	080173ec 	.word	0x080173ec
 800c3dc:	08016eb8 	.word	0x08016eb8
 800c3e0:	08017404 	.word	0x08017404
 800c3e4:	200022d8 	.word	0x200022d8
 800c3e8:	0801742c 	.word	0x0801742c
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	442b      	add	r3, r5
 800c3f0:	4423      	add	r3, r4
 800c3f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da02      	bge.n	800c406 <tcp_output+0x2e6>
      pcb->snd_nxt = snd_nxt;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	461c      	mov	r4, r3
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	899b      	ldrh	r3, [r3, #12]
 800c412:	b29b      	uxth	r3, r3
 800c414:	4618      	mov	r0, r3
 800c416:	f7f7 fd53 	bl	8003ec0 <lwip_htons>
 800c41a:	4603      	mov	r3, r0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <tcp_output+0x30a>
 800c426:	2301      	movs	r3, #1
 800c428:	e000      	b.n	800c42c <tcp_output+0x30c>
 800c42a:	2300      	movs	r3, #0
 800c42c:	4423      	add	r3, r4
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d049      	beq.n	800c4c6 <tcp_output+0x3a6>
      seg->next = NULL;
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d105      	bne.n	800c44c <tcp_output+0x32c>
        pcb->unacked = seg;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c444:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	623b      	str	r3, [r7, #32]
 800c44a:	e03f      	b.n	800c4cc <tcp_output+0x3ac>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	4618      	mov	r0, r3
 800c454:	f7f7 fd49 	bl	8003eea <lwip_htonl>
 800c458:	4604      	mov	r4, r0
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	4618      	mov	r0, r3
 800c462:	f7f7 fd42 	bl	8003eea <lwip_htonl>
 800c466:	4603      	mov	r3, r0
 800c468:	1ae3      	subs	r3, r4, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	da24      	bge.n	800c4b8 <tcp_output+0x398>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	3370      	adds	r3, #112	; 0x70
 800c472:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c474:	e002      	b.n	800c47c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d011      	beq.n	800c4a8 <tcp_output+0x388>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f7 fd2c 	bl	8003eea <lwip_htonl>
 800c492:	4604      	mov	r4, r0
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f7 fd25 	bl	8003eea <lwip_htonl>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	dbe6      	blt.n	800c476 <tcp_output+0x356>
          }
          seg->next = (*cur_seg);
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	e009      	b.n	800c4cc <tcp_output+0x3ac>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c4be:	6a3b      	ldr	r3, [r7, #32]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	623b      	str	r3, [r7, #32]
 800c4c4:	e002      	b.n	800c4cc <tcp_output+0x3ac>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c4c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4c8:	f7fb fc5c 	bl	8007d84 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d012      	beq.n	800c4fe <tcp_output+0x3de>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7f7 fd03 	bl	8003eea <lwip_htonl>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ee:	8912      	ldrh	r2, [r2, #8]
 800c4f0:	441a      	add	r2, r3
  while (seg != NULL &&
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	f67f aed2 	bls.w	800c29e <tcp_output+0x17e>
 800c4fa:	e000      	b.n	800c4fe <tcp_output+0x3de>
      break;
 800c4fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d107      	bne.n	800c516 <tcp_output+0x3f6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c50e:	e002      	b.n	800c516 <tcp_output+0x3f6>
    goto output_done;
 800c510:	bf00      	nop
 800c512:	e000      	b.n	800c516 <tcp_output+0x3f6>
    goto output_done;
 800c514:	bf00      	nop
  }
#endif /* TCP_OVERSIZE */

output_done:
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8b5b      	ldrh	r3, [r3, #26]
 800c51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3728      	adds	r7, #40	; 0x28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bdb0      	pop	{r4, r5, r7, pc}
 800c52e:	bf00      	nop

0800c530 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <tcp_output_segment_busy+0x26>
 800c53e:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <tcp_output_segment_busy+0x40>)
 800c540:	f240 529e 	movw	r2, #1438	; 0x59e
 800c544:	490b      	ldr	r1, [pc, #44]	; (800c574 <tcp_output_segment_busy+0x44>)
 800c546:	480c      	ldr	r0, [pc, #48]	; (800c578 <tcp_output_segment_busy+0x48>)
 800c548:	f007 fae2 	bl	8013b10 <iprintf>
 800c54c:	2000      	movs	r0, #0
 800c54e:	f007 fbe1 	bl	8013d14 <fflush>
 800c552:	f007 fb26 	bl	8013ba2 <abort>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	7b9b      	ldrb	r3, [r3, #14]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d001      	beq.n	800c564 <tcp_output_segment_busy+0x34>
    /* other reference found */
    return 1;
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <tcp_output_segment_busy+0x36>
  }
  /* no other references found */
  return 0;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	08016e74 	.word	0x08016e74
 800c574:	08017444 	.word	0x08017444
 800c578:	08016eb8 	.word	0x08016eb8

0800c57c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c57c:	b5b0      	push	{r4, r5, r7, lr}
 800c57e:	b08c      	sub	sp, #48	; 0x30
 800c580:	af04      	add	r7, sp, #16
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <tcp_output_segment+0x2a>
 800c58e:	4b7c      	ldr	r3, [pc, #496]	; (800c780 <tcp_output_segment+0x204>)
 800c590:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800c594:	497b      	ldr	r1, [pc, #492]	; (800c784 <tcp_output_segment+0x208>)
 800c596:	487c      	ldr	r0, [pc, #496]	; (800c788 <tcp_output_segment+0x20c>)
 800c598:	f007 faba 	bl	8013b10 <iprintf>
 800c59c:	2000      	movs	r0, #0
 800c59e:	f007 fbb9 	bl	8013d14 <fflush>
 800c5a2:	f007 fafe 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <tcp_output_segment+0x48>
 800c5ac:	4b74      	ldr	r3, [pc, #464]	; (800c780 <tcp_output_segment+0x204>)
 800c5ae:	f240 52bd 	movw	r2, #1469	; 0x5bd
 800c5b2:	4976      	ldr	r1, [pc, #472]	; (800c78c <tcp_output_segment+0x210>)
 800c5b4:	4874      	ldr	r0, [pc, #464]	; (800c788 <tcp_output_segment+0x20c>)
 800c5b6:	f007 faab 	bl	8013b10 <iprintf>
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	f007 fbaa 	bl	8013d14 <fflush>
 800c5c0:	f007 faef 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10b      	bne.n	800c5e2 <tcp_output_segment+0x66>
 800c5ca:	4b6d      	ldr	r3, [pc, #436]	; (800c780 <tcp_output_segment+0x204>)
 800c5cc:	f240 52be 	movw	r2, #1470	; 0x5be
 800c5d0:	496f      	ldr	r1, [pc, #444]	; (800c790 <tcp_output_segment+0x214>)
 800c5d2:	486d      	ldr	r0, [pc, #436]	; (800c788 <tcp_output_segment+0x20c>)
 800c5d4:	f007 fa9c 	bl	8013b10 <iprintf>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f007 fb9b 	bl	8013d14 <fflush>
 800c5de:	f007 fae0 	bl	8013ba2 <abort>

  if (tcp_output_segment_busy(seg)) {
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7ff ffa4 	bl	800c530 <tcp_output_segment_busy>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e0c2      	b.n	800c778 <tcp_output_segment+0x1fc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	691c      	ldr	r4, [r3, #16]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7f7 fc75 	bl	8003eea <lwip_htonl>
 800c600:	4603      	mov	r3, r0
 800c602:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	691c      	ldr	r4, [r3, #16]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7f7 fc57 	bl	8003ec0 <lwip_htons>
 800c612:	4603      	mov	r3, r0
 800c614:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c61e:	441a      	add	r2, r3
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	3314      	adds	r3, #20
 800c62a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	7b1b      	ldrb	r3, [r3, #12]
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d015      	beq.n	800c664 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	3304      	adds	r3, #4
 800c63c:	461a      	mov	r2, r3
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800c644:	f7fb ffa8 	bl	8008598 <tcp_eff_send_mss_netif>
 800c648:	4603      	mov	r3, r0
 800c64a:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c64c:	8b7b      	ldrh	r3, [r7, #26]
 800c64e:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c652:	4618      	mov	r0, r3
 800c654:	f7f7 fc49 	bl	8003eea <lwip_htonl>
 800c658:	4602      	mov	r2, r0
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	3304      	adds	r3, #4
 800c662:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da02      	bge.n	800c674 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2200      	movs	r2, #0
 800c672:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10c      	bne.n	800c696 <tcp_output_segment+0x11a>
    pcb->rttest = tcp_ticks;
 800c67c:	4b45      	ldr	r3, [pc, #276]	; (800c794 <tcp_output_segment+0x218>)
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f7 fc2d 	bl	8003eea <lwip_htonl>
 800c690:	4602      	mov	r2, r0
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	461a      	mov	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	6852      	ldr	r2, [r2, #4]
 800c6ae:	8951      	ldrh	r1, [r2, #10]
 800c6b0:	8b3a      	ldrh	r2, [r7, #24]
 800c6b2:	1a8a      	subs	r2, r1, r2
 800c6b4:	b292      	uxth	r2, r2
 800c6b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	6852      	ldr	r2, [r2, #4]
 800c6c0:	8911      	ldrh	r1, [r2, #8]
 800c6c2:	8b3a      	ldrh	r2, [r7, #24]
 800c6c4:	1a8a      	subs	r2, r1, r2
 800c6c6:	b292      	uxth	r2, r2
 800c6c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	6912      	ldr	r2, [r2, #16]
 800c6d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	741a      	strb	r2, [r3, #16]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	f103 0214 	add.w	r2, r3, #20
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	7b1b      	ldrb	r3, [r3, #12]
 800c6ec:	f003 0301 	and.w	r3, r3, #1
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <tcp_output_segment+0x17c>
 800c6f4:	2304      	movs	r3, #4
 800c6f6:	e000      	b.n	800c6fa <tcp_output_segment+0x17e>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	441a      	add	r2, r3
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d00b      	beq.n	800c71a <tcp_output_segment+0x19e>
 800c702:	4b1f      	ldr	r3, [pc, #124]	; (800c780 <tcp_output_segment+0x204>)
 800c704:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 800c708:	4923      	ldr	r1, [pc, #140]	; (800c798 <tcp_output_segment+0x21c>)
 800c70a:	481f      	ldr	r0, [pc, #124]	; (800c788 <tcp_output_segment+0x20c>)
 800c70c:	f007 fa00 	bl	8013b10 <iprintf>
 800c710:	2000      	movs	r0, #0
 800c712:	f007 faff 	bl	8013d14 <fflush>
 800c716:	f007 fa44 	bl	8013ba2 <abort>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	691c      	ldr	r4, [r3, #16]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c726:	891a      	ldrh	r2, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800c728:	68b9      	ldr	r1, [r7, #8]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	460b      	mov	r3, r1
 800c732:	2106      	movs	r1, #6
 800c734:	f7f7 fcf6 	bl	8004124 <ip_chksum_pseudo>
 800c738:	4603      	mov	r3, r0
 800c73a:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c73c:	4b17      	ldr	r3, [pc, #92]	; (800c79c <tcp_output_segment+0x220>)
 800c73e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c742:	3301      	adds	r3, #1
 800c744:	b29a      	uxth	r2, r3
 800c746:	4b15      	ldr	r3, [pc, #84]	; (800c79c <tcp_output_segment+0x220>)
 800c748:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6858      	ldr	r0, [r3, #4]
 800c750:	68b9      	ldr	r1, [r7, #8]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	1d1c      	adds	r4, r3, #4
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	7add      	ldrb	r5, [r3, #11]
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	7a9b      	ldrb	r3, [r3, #10]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	9202      	str	r2, [sp, #8]
 800c762:	2206      	movs	r2, #6
 800c764:	9201      	str	r2, [sp, #4]
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	462b      	mov	r3, r5
 800c76a:	4622      	mov	r2, r4
 800c76c:	f7f7 ff0e 	bl	800458c <ip4_output_if>
 800c770:	4603      	mov	r3, r0
 800c772:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3720      	adds	r7, #32
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bdb0      	pop	{r4, r5, r7, pc}
 800c780:	08016e74 	.word	0x08016e74
 800c784:	0801746c 	.word	0x0801746c
 800c788:	08016eb8 	.word	0x08016eb8
 800c78c:	0801748c 	.word	0x0801748c
 800c790:	080174ac 	.word	0x080174ac
 800c794:	200022c8 	.word	0x200022c8
 800c798:	080174d0 	.word	0x080174d0
 800c79c:	2000221c 	.word	0x2000221c

0800c7a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c7a0:	b5b0      	push	{r4, r5, r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10b      	bne.n	800c7c6 <tcp_rexmit_rto_prepare+0x26>
 800c7ae:	4b38      	ldr	r3, [pc, #224]	; (800c890 <tcp_rexmit_rto_prepare+0xf0>)
 800c7b0:	f240 6267 	movw	r2, #1639	; 0x667
 800c7b4:	4937      	ldr	r1, [pc, #220]	; (800c894 <tcp_rexmit_rto_prepare+0xf4>)
 800c7b6:	4838      	ldr	r0, [pc, #224]	; (800c898 <tcp_rexmit_rto_prepare+0xf8>)
 800c7b8:	f007 f9aa 	bl	8013b10 <iprintf>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f007 faa9 	bl	8013d14 <fflush>
 800c7c2:	f007 f9ee 	bl	8013ba2 <abort>

  if (pcb->unacked == NULL) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d102      	bne.n	800c7d4 <tcp_rexmit_rto_prepare+0x34>
    return ERR_VAL;
 800c7ce:	f06f 0305 	mvn.w	r3, #5
 800c7d2:	e059      	b.n	800c888 <tcp_rexmit_rto_prepare+0xe8>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	e00b      	b.n	800c7f4 <tcp_rexmit_rto_prepare+0x54>
    if (tcp_output_segment_busy(seg)) {
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7ff fea7 	bl	800c530 <tcp_output_segment_busy>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <tcp_rexmit_rto_prepare+0x4e>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c7e8:	f06f 0305 	mvn.w	r3, #5
 800c7ec:	e04c      	b.n	800c888 <tcp_rexmit_rto_prepare+0xe8>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1ef      	bne.n	800c7dc <tcp_rexmit_rto_prepare+0x3c>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff fe97 	bl	800c530 <tcp_output_segment_busy>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <tcp_rexmit_rto_prepare+0x6e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c808:	f06f 0305 	mvn.w	r3, #5
 800c80c:	e03c      	b.n	800c888 <tcp_rexmit_rto_prepare+0xe8>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d104      	bne.n	800c828 <tcp_rexmit_rto_prepare+0x88>
    pcb->unsent_oversize = seg->oversize_left;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	895a      	ldrh	r2, [r3, #10]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	8b5b      	ldrh	r3, [r3, #26]
 800c83a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c83e:	b29a      	uxth	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7f7 fb4d 	bl	8003eea <lwip_htonl>
 800c850:	4604      	mov	r4, r0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	891b      	ldrh	r3, [r3, #8]
 800c856:	461d      	mov	r5, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	899b      	ldrh	r3, [r3, #12]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	4618      	mov	r0, r3
 800c862:	f7f7 fb2d 	bl	8003ec0 <lwip_htons>
 800c866:	4603      	mov	r3, r0
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 0303 	and.w	r3, r3, #3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <tcp_rexmit_rto_prepare+0xd6>
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <tcp_rexmit_rto_prepare+0xd8>
 800c876:	2300      	movs	r3, #0
 800c878:	442b      	add	r3, r5
 800c87a:	18e2      	adds	r2, r4, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bdb0      	pop	{r4, r5, r7, pc}
 800c890:	08016e74 	.word	0x08016e74
 800c894:	080174e4 	.word	0x080174e4
 800c898:	08016eb8 	.word	0x08016eb8

0800c89c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10b      	bne.n	800c8c2 <tcp_rexmit_rto_commit+0x26>
 800c8aa:	4b10      	ldr	r3, [pc, #64]	; (800c8ec <tcp_rexmit_rto_commit+0x50>)
 800c8ac:	f240 629c 	movw	r2, #1692	; 0x69c
 800c8b0:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <tcp_rexmit_rto_commit+0x54>)
 800c8b2:	4810      	ldr	r0, [pc, #64]	; (800c8f4 <tcp_rexmit_rto_commit+0x58>)
 800c8b4:	f007 f92c 	bl	8013b10 <iprintf>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f007 fa2b 	bl	8013d14 <fflush>
 800c8be:	f007 f970 	bl	8013ba2 <abort>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8c8:	2bff      	cmp	r3, #255	; 0xff
 800c8ca:	d007      	beq.n	800c8dc <tcp_rexmit_rto_commit+0x40>
    ++pcb->nrtx;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff fc1f 	bl	800c120 <tcp_output>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	08016e74 	.word	0x08016e74
 800c8f0:	08017508 	.word	0x08017508
 800c8f4:	08016eb8 	.word	0x08016eb8

0800c8f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10b      	bne.n	800c91e <tcp_rexmit_rto+0x26>
 800c906:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <tcp_rexmit_rto+0x40>)
 800c908:	f240 62b1 	movw	r2, #1713	; 0x6b1
 800c90c:	490b      	ldr	r1, [pc, #44]	; (800c93c <tcp_rexmit_rto+0x44>)
 800c90e:	480c      	ldr	r0, [pc, #48]	; (800c940 <tcp_rexmit_rto+0x48>)
 800c910:	f007 f8fe 	bl	8013b10 <iprintf>
 800c914:	2000      	movs	r0, #0
 800c916:	f007 f9fd 	bl	8013d14 <fflush>
 800c91a:	f007 f942 	bl	8013ba2 <abort>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff ff3e 	bl	800c7a0 <tcp_rexmit_rto_prepare>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <tcp_rexmit_rto+0x38>
    tcp_rexmit_rto_commit(pcb);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ffb6 	bl	800c89c <tcp_rexmit_rto_commit>
  }
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	08016e74 	.word	0x08016e74
 800c93c:	0801752c 	.word	0x0801752c
 800c940:	08016eb8 	.word	0x08016eb8

0800c944 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c944:	b590      	push	{r4, r7, lr}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10b      	bne.n	800c96a <tcp_rexmit+0x26>
 800c952:	4b32      	ldr	r3, [pc, #200]	; (800ca1c <tcp_rexmit+0xd8>)
 800c954:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800c958:	4931      	ldr	r1, [pc, #196]	; (800ca20 <tcp_rexmit+0xdc>)
 800c95a:	4832      	ldr	r0, [pc, #200]	; (800ca24 <tcp_rexmit+0xe0>)
 800c95c:	f007 f8d8 	bl	8013b10 <iprintf>
 800c960:	2000      	movs	r0, #0
 800c962:	f007 f9d7 	bl	8013d14 <fflush>
 800c966:	f007 f91c 	bl	8013ba2 <abort>

  if (pcb->unacked == NULL) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <tcp_rexmit+0x34>
    return ERR_VAL;
 800c972:	f06f 0305 	mvn.w	r3, #5
 800c976:	e04c      	b.n	800ca12 <tcp_rexmit+0xce>
  }

  seg = pcb->unacked;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97c:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c97e:	68b8      	ldr	r0, [r7, #8]
 800c980:	f7ff fdd6 	bl	800c530 <tcp_output_segment_busy>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <tcp_rexmit+0x4c>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c98a:	f06f 0305 	mvn.w	r3, #5
 800c98e:	e040      	b.n	800ca12 <tcp_rexmit+0xce>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	336c      	adds	r3, #108	; 0x6c
 800c99c:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c99e:	e002      	b.n	800c9a6 <tcp_rexmit+0x62>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d011      	beq.n	800c9d2 <tcp_rexmit+0x8e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7f7 fa97 	bl	8003eea <lwip_htonl>
 800c9bc:	4604      	mov	r4, r0
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7f7 fa90 	bl	8003eea <lwip_htonl>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dbe6      	blt.n	800c9a0 <tcp_rexmit+0x5c>
  }
  seg->next = *cur_seg;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d103      	bne.n	800c9f0 <tcp_rexmit+0xac>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9f6:	2bff      	cmp	r3, #255	; 0xff
 800c9f8:	d007      	beq.n	800ca0a <tcp_rexmit+0xc6>
    ++pcb->nrtx;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca00:	3301      	adds	r3, #1
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3714      	adds	r7, #20
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd90      	pop	{r4, r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	08016e74 	.word	0x08016e74
 800ca20:	08017548 	.word	0x08017548
 800ca24:	08016eb8 	.word	0x08016eb8

0800ca28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10b      	bne.n	800ca4e <tcp_rexmit_fast+0x26>
 800ca36:	4b31      	ldr	r3, [pc, #196]	; (800cafc <tcp_rexmit_fast+0xd4>)
 800ca38:	f240 62fd 	movw	r2, #1789	; 0x6fd
 800ca3c:	4930      	ldr	r1, [pc, #192]	; (800cb00 <tcp_rexmit_fast+0xd8>)
 800ca3e:	4831      	ldr	r0, [pc, #196]	; (800cb04 <tcp_rexmit_fast+0xdc>)
 800ca40:	f007 f866 	bl	8013b10 <iprintf>
 800ca44:	2000      	movs	r0, #0
 800ca46:	f007 f965 	bl	8013d14 <fflush>
 800ca4a:	f007 f8aa 	bl	8013ba2 <abort>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d04d      	beq.n	800caf2 <tcp_rexmit_fast+0xca>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	8b5b      	ldrh	r3, [r3, #26]
 800ca5a:	f003 0304 	and.w	r3, r3, #4
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d147      	bne.n	800caf2 <tcp_rexmit_fast+0xca>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7ff ff6e 	bl	800c944 <tcp_rexmit>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d141      	bne.n	800caf2 <tcp_rexmit_fast+0xca>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d207      	bcs.n	800ca8e <tcp_rexmit_fast+0x66>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca84:	0fda      	lsrs	r2, r3, #31
 800ca86:	4413      	add	r3, r2
 800ca88:	105b      	asrs	r3, r3, #1
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	e006      	b.n	800ca9c <tcp_rexmit_fast+0x74>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca94:	0fda      	lsrs	r2, r3, #31
 800ca96:	4413      	add	r3, r2
 800ca98:	105b      	asrs	r3, r3, #1
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800caa8:	461a      	mov	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d206      	bcs.n	800cac2 <tcp_rexmit_fast+0x9a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	b29a      	uxth	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cacc:	4619      	mov	r1, r3
 800cace:	0049      	lsls	r1, r1, #1
 800cad0:	440b      	add	r3, r1
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4413      	add	r3, r2
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	8b5b      	ldrh	r3, [r3, #26]
 800cae2:	f043 0304 	orr.w	r3, r3, #4
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	08016e74 	.word	0x08016e74
 800cb00:	08017560 	.word	0x08017560
 800cb04:	08016eb8 	.word	0x08016eb8

0800cb08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	460b      	mov	r3, r1
 800cb14:	817b      	strh	r3, [r7, #10]
 800cb16:	4613      	mov	r3, r2
 800cb18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cb1a:	897a      	ldrh	r2, [r7, #10]
 800cb1c:	893b      	ldrh	r3, [r7, #8]
 800cb1e:	4413      	add	r3, r2
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	3314      	adds	r3, #20
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	2022      	movs	r0, #34	; 0x22
 800cb2e:	f7f9 f86f 	bl	8005c10 <pbuf_alloc>
 800cb32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d053      	beq.n	800cbe2 <tcp_output_alloc_header_common+0xda>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	895b      	ldrh	r3, [r3, #10]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	897b      	ldrh	r3, [r7, #10]
 800cb42:	3314      	adds	r3, #20
 800cb44:	429a      	cmp	r2, r3
 800cb46:	da0b      	bge.n	800cb60 <tcp_output_alloc_header_common+0x58>
 800cb48:	4b28      	ldr	r3, [pc, #160]	; (800cbec <tcp_output_alloc_header_common+0xe4>)
 800cb4a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cb4e:	4928      	ldr	r1, [pc, #160]	; (800cbf0 <tcp_output_alloc_header_common+0xe8>)
 800cb50:	4828      	ldr	r0, [pc, #160]	; (800cbf4 <tcp_output_alloc_header_common+0xec>)
 800cb52:	f006 ffdd 	bl	8013b10 <iprintf>
 800cb56:	2000      	movs	r0, #0
 800cb58:	f007 f8dc 	bl	8013d14 <fflush>
 800cb5c:	f007 f821 	bl	8013ba2 <abort>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cb66:	8c3b      	ldrh	r3, [r7, #32]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7f7 f9a9 	bl	8003ec0 <lwip_htons>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	461a      	mov	r2, r3
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cb76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7f7 f9a1 	bl	8003ec0 <lwip_htons>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	461a      	mov	r2, r3
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7f7 f9ac 	bl	8003eea <lwip_htonl>
 800cb92:	4602      	mov	r2, r0
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cb98:	897b      	ldrh	r3, [r7, #10]
 800cb9a:	089b      	lsrs	r3, r3, #2
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	3305      	adds	r3, #5
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	031b      	lsls	r3, r3, #12
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4313      	orrs	r3, r2
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7f7 f985 	bl	8003ec0 <lwip_htons>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	461a      	mov	r2, r3
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cbbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7f7 f97d 	bl	8003ec0 <lwip_htons>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	461a      	mov	r2, r3
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	741a      	strb	r2, [r3, #16]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	749a      	strb	r2, [r3, #18]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cbe2:	697b      	ldr	r3, [r7, #20]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	08016e74 	.word	0x08016e74
 800cbf0:	08017580 	.word	0x08017580
 800cbf4:	08016eb8 	.word	0x08016eb8

0800cbf8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cbf8:	b5b0      	push	{r4, r5, r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af04      	add	r7, sp, #16
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	607b      	str	r3, [r7, #4]
 800cc02:	460b      	mov	r3, r1
 800cc04:	817b      	strh	r3, [r7, #10]
 800cc06:	4613      	mov	r3, r2
 800cc08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10b      	bne.n	800cc28 <tcp_output_alloc_header+0x30>
 800cc10:	4b17      	ldr	r3, [pc, #92]	; (800cc70 <tcp_output_alloc_header+0x78>)
 800cc12:	f240 7246 	movw	r2, #1862	; 0x746
 800cc16:	4917      	ldr	r1, [pc, #92]	; (800cc74 <tcp_output_alloc_header+0x7c>)
 800cc18:	4817      	ldr	r0, [pc, #92]	; (800cc78 <tcp_output_alloc_header+0x80>)
 800cc1a:	f006 ff79 	bl	8013b10 <iprintf>
 800cc1e:	2000      	movs	r0, #0
 800cc20:	f007 f878 	bl	8013d14 <fflush>
 800cc24:	f006 ffbd 	bl	8013ba2 <abort>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	8adb      	ldrh	r3, [r3, #22]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	8b12      	ldrh	r2, [r2, #24]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cc38:	893d      	ldrh	r5, [r7, #8]
 800cc3a:	897c      	ldrh	r4, [r7, #10]
 800cc3c:	9103      	str	r1, [sp, #12]
 800cc3e:	2110      	movs	r1, #16
 800cc40:	9102      	str	r1, [sp, #8]
 800cc42:	9201      	str	r2, [sp, #4]
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	462a      	mov	r2, r5
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	f7ff ff5c 	bl	800cb08 <tcp_output_alloc_header_common>
 800cc50:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <tcp_output_alloc_header+0x6e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc60:	441a      	add	r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cc66:	697b      	ldr	r3, [r7, #20]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc70:	08016e74 	.word	0x08016e74
 800cc74:	080175b0 	.word	0x080175b0
 800cc78:	08016eb8 	.word	0x08016eb8

0800cc7c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b088      	sub	sp, #32
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	4611      	mov	r1, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	71fb      	strb	r3, [r7, #7]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10b      	bne.n	800ccb4 <tcp_output_fill_options+0x38>
 800cc9c:	4b1a      	ldr	r3, [pc, #104]	; (800cd08 <tcp_output_fill_options+0x8c>)
 800cc9e:	f240 725a 	movw	r2, #1882	; 0x75a
 800cca2:	491a      	ldr	r1, [pc, #104]	; (800cd0c <tcp_output_fill_options+0x90>)
 800cca4:	481a      	ldr	r0, [pc, #104]	; (800cd10 <tcp_output_fill_options+0x94>)
 800cca6:	f006 ff33 	bl	8013b10 <iprintf>
 800ccaa:	2000      	movs	r0, #0
 800ccac:	f007 f832 	bl	8013d14 <fflush>
 800ccb0:	f006 ff77 	bl	8013ba2 <abort>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	3314      	adds	r3, #20
 800ccbe:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f103 0214 	add.w	r2, r3, #20
 800ccc6:	8bfb      	ldrh	r3, [r7, #30]
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4619      	mov	r1, r3
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <tcp_output_fill_options+0x5e>
 800ccd6:	2304      	movs	r3, #4
 800ccd8:	e000      	b.n	800ccdc <tcp_output_fill_options+0x60>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	440b      	add	r3, r1
 800ccde:	441a      	add	r2, r3
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d00b      	beq.n	800ccfe <tcp_output_fill_options+0x82>
 800cce6:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <tcp_output_fill_options+0x8c>)
 800cce8:	f240 7279 	movw	r2, #1913	; 0x779
 800ccec:	4909      	ldr	r1, [pc, #36]	; (800cd14 <tcp_output_fill_options+0x98>)
 800ccee:	4808      	ldr	r0, [pc, #32]	; (800cd10 <tcp_output_fill_options+0x94>)
 800ccf0:	f006 ff0e 	bl	8013b10 <iprintf>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f007 f80d 	bl	8013d14 <fflush>
 800ccfa:	f006 ff52 	bl	8013ba2 <abort>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ccfe:	bf00      	nop
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	08016e74 	.word	0x08016e74
 800cd0c:	080175d8 	.word	0x080175d8
 800cd10:	08016eb8 	.word	0x08016eb8
 800cd14:	080174d0 	.word	0x080174d0

0800cd18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10b      	bne.n	800cd44 <tcp_output_control_segment+0x2c>
 800cd2c:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <tcp_output_control_segment+0x64>)
 800cd2e:	f240 728a 	movw	r2, #1930	; 0x78a
 800cd32:	4913      	ldr	r1, [pc, #76]	; (800cd80 <tcp_output_control_segment+0x68>)
 800cd34:	4813      	ldr	r0, [pc, #76]	; (800cd84 <tcp_output_control_segment+0x6c>)
 800cd36:	f006 feeb 	bl	8013b10 <iprintf>
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f006 ffea 	bl	8013d14 <fflush>
 800cd40:	f006 ff2f 	bl	8013ba2 <abort>

  netif = tcp_route(pcb, src, dst);
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	6879      	ldr	r1, [r7, #4]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7fe f93b 	bl	800afc4 <tcp_route>
 800cd4e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d105      	bne.n	800cd62 <tcp_output_control_segment+0x4a>
    pbuf_free(p);
 800cd56:	68b8      	ldr	r0, [r7, #8]
 800cd58:	f7f9 f9c4 	bl	80060e4 <pbuf_free>
    return ERR_RTE;
 800cd5c:	f06f 0303 	mvn.w	r3, #3
 800cd60:	e008      	b.n	800cd74 <tcp_output_control_segment+0x5c>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 f80b 	bl	800cd88 <tcp_output_control_segment_netif>
 800cd72:	4603      	mov	r3, r0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	08016e74 	.word	0x08016e74
 800cd80:	08017600 	.word	0x08017600
 800cd84:	08016eb8 	.word	0x08016eb8

0800cd88 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08c      	sub	sp, #48	; 0x30
 800cd8c:	af04      	add	r7, sp, #16
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <tcp_output_control_segment_netif+0x2c>
 800cd9c:	4b24      	ldr	r3, [pc, #144]	; (800ce30 <tcp_output_control_segment_netif+0xa8>)
 800cd9e:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800cda2:	4924      	ldr	r1, [pc, #144]	; (800ce34 <tcp_output_control_segment_netif+0xac>)
 800cda4:	4824      	ldr	r0, [pc, #144]	; (800ce38 <tcp_output_control_segment_netif+0xb0>)
 800cda6:	f006 feb3 	bl	8013b10 <iprintf>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	f006 ffb2 	bl	8013d14 <fflush>
 800cdb0:	f006 fef7 	bl	8013ba2 <abort>

#if CHECKSUM_GEN_TCP
  IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	61bb      	str	r3, [r7, #24]
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	891a      	ldrh	r2, [r3, #8]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2106      	movs	r1, #6
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f7f7 f9ac 	bl	8004124 <ip_chksum_pseudo>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	461a      	mov	r2, r3
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	821a      	strh	r2, [r3, #16]
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d006      	beq.n	800cde8 <tcp_output_control_segment_netif+0x60>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	7adb      	ldrb	r3, [r3, #11]
 800cdde:	77fb      	strb	r3, [r7, #31]
    tos = pcb->tos;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	7a9b      	ldrb	r3, [r3, #10]
 800cde4:	77bb      	strb	r3, [r7, #30]
 800cde6:	e003      	b.n	800cdf0 <tcp_output_control_segment_netif+0x68>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 800cde8:	23ff      	movs	r3, #255	; 0xff
 800cdea:	77fb      	strb	r3, [r7, #31]
    tos = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	77bb      	strb	r3, [r7, #30]
  }
  TCP_STATS_INC(tcp.xmit);
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <tcp_output_control_segment_netif+0xb4>)
 800cdf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <tcp_output_control_segment_netif+0xb4>)
 800cdfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ce00:	7ffa      	ldrb	r2, [r7, #31]
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	9302      	str	r3, [sp, #8]
 800ce06:	2306      	movs	r3, #6
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	7fbb      	ldrb	r3, [r7, #30]
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	68b8      	ldr	r0, [r7, #8]
 800ce16:	f7f7 fbb9 	bl	800458c <ip4_output_if>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f7f9 f960 	bl	80060e4 <pbuf_free>
  return err;
 800ce24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3720      	adds	r7, #32
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	08016e74 	.word	0x08016e74
 800ce34:	0801762c 	.word	0x0801762c
 800ce38:	08016eb8 	.word	0x08016eb8
 800ce3c:	2000221c 	.word	0x2000221c

0800ce40 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b08b      	sub	sp, #44	; 0x2c
 800ce44:	af04      	add	r7, sp, #16
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10b      	bne.n	800ce6c <tcp_rst_common+0x2c>
 800ce54:	4b22      	ldr	r3, [pc, #136]	; (800cee0 <tcp_rst_common+0xa0>)
 800ce56:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ce5a:	4922      	ldr	r1, [pc, #136]	; (800cee4 <tcp_rst_common+0xa4>)
 800ce5c:	4822      	ldr	r0, [pc, #136]	; (800cee8 <tcp_rst_common+0xa8>)
 800ce5e:	f006 fe57 	bl	8013b10 <iprintf>
 800ce62:	2000      	movs	r0, #0
 800ce64:	f006 ff56 	bl	8013d14 <fflush>
 800ce68:	f006 fe9b 	bl	8013ba2 <abort>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10b      	bne.n	800ce8a <tcp_rst_common+0x4a>
 800ce72:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <tcp_rst_common+0xa0>)
 800ce74:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ce78:	491c      	ldr	r1, [pc, #112]	; (800ceec <tcp_rst_common+0xac>)
 800ce7a:	481b      	ldr	r0, [pc, #108]	; (800cee8 <tcp_rst_common+0xa8>)
 800ce7c:	f006 fe48 	bl	8013b10 <iprintf>
 800ce80:	2000      	movs	r0, #0
 800ce82:	f006 ff47 	bl	8013d14 <fflush>
 800ce86:	f006 fe8c 	bl	8013ba2 <abort>
  /* these two are passed only for checks, disable warnings without asserts */
  LWIP_UNUSED_ARG(local_ip);
  LWIP_UNUSED_ARG(remote_ip);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ce8e:	f24b 4305 	movw	r3, #46085	; 0xb405
 800ce92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ce94:	7dfb      	ldrb	r3, [r7, #23]
 800ce96:	b29c      	uxth	r4, r3
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f7f7 f826 	bl	8003eea <lwip_htonl>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	8abb      	ldrh	r3, [r7, #20]
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	2314      	movs	r3, #20
 800cea6:	9302      	str	r3, [sp, #8]
 800cea8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ceaa:	9301      	str	r3, [sp, #4]
 800ceac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff fe26 	bl	800cb08 <tcp_output_alloc_header_common>
 800cebc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <tcp_rst_common+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 800cec4:	2300      	movs	r3, #0
 800cec6:	e006      	b.n	800ced6 <tcp_rst_common+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800cec8:	2300      	movs	r3, #0
 800ceca:	2200      	movs	r2, #0
 800cecc:	6939      	ldr	r1, [r7, #16]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7ff fed4 	bl	800cc7c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 800ced4:	693b      	ldr	r3, [r7, #16]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	371c      	adds	r7, #28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	bf00      	nop
 800cee0:	08016e74 	.word	0x08016e74
 800cee4:	08017660 	.word	0x08017660
 800cee8:	08016eb8 	.word	0x08016eb8
 800ceec:	0801767c 	.word	0x0801767c

0800cef0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08a      	sub	sp, #40	; 0x28
 800cef4:	af04      	add	r7, sp, #16
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800cefe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf00:	9302      	str	r3, [sp, #8]
 800cf02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	68b9      	ldr	r1, [r7, #8]
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f7ff ff95 	bl	800ce40 <tcp_rst_common>
 800cf16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	6979      	ldr	r1, [r7, #20]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fef7 	bl	800cd18 <tcp_output_control_segment>
  }
}
 800cf2a:	bf00      	nop
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b08a      	sub	sp, #40	; 0x28
 800cf36:	af04      	add	r7, sp, #16
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
 800cf3e:	603b      	str	r3, [r7, #0]
  if (netif) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d017      	beq.n	800cf76 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 800cf46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf48:	9302      	str	r3, [sp, #8]
 800cf4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	2000      	movs	r0, #0
 800cf5a:	f7ff ff71 	bl	800ce40 <tcp_rst_common>
 800cf5e:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d007      	beq.n	800cf76 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	6979      	ldr	r1, [r7, #20]
 800cf70:	2000      	movs	r0, #0
 800cf72:	f7ff ff09 	bl	800cd88 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10b      	bne.n	800cfae <tcp_send_empty_ack+0x2e>
 800cf96:	4b2c      	ldr	r3, [pc, #176]	; (800d048 <tcp_send_empty_ack+0xc8>)
 800cf98:	f44f 6203 	mov.w	r2, #2096	; 0x830
 800cf9c:	492b      	ldr	r1, [pc, #172]	; (800d04c <tcp_send_empty_ack+0xcc>)
 800cf9e:	482c      	ldr	r0, [pc, #176]	; (800d050 <tcp_send_empty_ack+0xd0>)
 800cfa0:	f006 fdb6 	bl	8013b10 <iprintf>
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f006 feb5 	bl	8013d14 <fflush>
 800cfaa:	f006 fdfa 	bl	8013ba2 <abort>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <tcp_send_empty_ack+0x3c>
 800cfb8:	2304      	movs	r3, #4
 800cfba:	e000      	b.n	800cfbe <tcp_send_empty_ack+0x3e>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cfc0:	7d7b      	ldrb	r3, [r7, #21]
 800cfc2:	b29c      	uxth	r4, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7f6 ff8e 	bl	8003eea <lwip_htonl>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff fe0f 	bl	800cbf8 <tcp_output_alloc_header>
 800cfda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d109      	bne.n	800cff6 <tcp_send_empty_ack+0x76>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8b5b      	ldrh	r3, [r3, #26]
 800cfe6:	f043 0303 	orr.w	r3, r3, #3
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cff0:	f06f 0301 	mvn.w	r3, #1
 800cff4:	e023      	b.n	800d03e <tcp_send_empty_ack+0xbe>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cff6:	7dbb      	ldrb	r3, [r7, #22]
 800cff8:	7dfa      	ldrb	r2, [r7, #23]
 800cffa:	6939      	ldr	r1, [r7, #16]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff fe3d 	bl	800cc7c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3304      	adds	r3, #4
 800d008:	6939      	ldr	r1, [r7, #16]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff fe84 	bl	800cd18 <tcp_output_control_segment>
 800d010:	4603      	mov	r3, r0
 800d012:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d007      	beq.n	800d02c <tcp_send_empty_ack+0xac>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b5b      	ldrh	r3, [r3, #26]
 800d020:	f043 0303 	orr.w	r3, r3, #3
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	835a      	strh	r2, [r3, #26]
 800d02a:	e006      	b.n	800d03a <tcp_send_empty_ack+0xba>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	8b5b      	ldrh	r3, [r3, #26]
 800d030:	f023 0303 	bic.w	r3, r3, #3
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	bf00      	nop
 800d048:	08016e74 	.word	0x08016e74
 800d04c:	08017698 	.word	0x08017698
 800d050:	08016eb8 	.word	0x08016eb8

0800d054 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d054:	b590      	push	{r4, r7, lr}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d05c:	2300      	movs	r3, #0
 800d05e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10b      	bne.n	800d07e <tcp_keepalive+0x2a>
 800d066:	4b1b      	ldr	r3, [pc, #108]	; (800d0d4 <tcp_keepalive+0x80>)
 800d068:	f640 026a 	movw	r2, #2154	; 0x86a
 800d06c:	491a      	ldr	r1, [pc, #104]	; (800d0d8 <tcp_keepalive+0x84>)
 800d06e:	481b      	ldr	r0, [pc, #108]	; (800d0dc <tcp_keepalive+0x88>)
 800d070:	f006 fd4e 	bl	8013b10 <iprintf>
 800d074:	2000      	movs	r0, #0
 800d076:	f006 fe4d 	bl	8013d14 <fflush>
 800d07a:	f006 fd92 	bl	8013ba2 <abort>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	b29c      	uxth	r4, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d086:	3b01      	subs	r3, #1
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f6 ff2e 	bl	8003eea <lwip_htonl>
 800d08e:	4603      	mov	r3, r0
 800d090:	2200      	movs	r2, #0
 800d092:	4621      	mov	r1, r4
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff fdaf 	bl	800cbf8 <tcp_output_alloc_header>
 800d09a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <tcp_keepalive+0x54>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a6:	e010      	b.n	800d0ca <tcp_keepalive+0x76>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	6939      	ldr	r1, [r7, #16]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7ff fde4 	bl	800cc7c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	6939      	ldr	r1, [r7, #16]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff fe2b 	bl	800cd18 <tcp_output_control_segment>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	371c      	adds	r7, #28
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd90      	pop	{r4, r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	08016e74 	.word	0x08016e74
 800d0d8:	080176b8 	.word	0x080176b8
 800d0dc:	08016eb8 	.word	0x08016eb8

0800d0e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d0e0:	b590      	push	{r4, r7, lr}
 800d0e2:	b08b      	sub	sp, #44	; 0x2c
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10b      	bne.n	800d10c <tcp_zero_window_probe+0x2c>
 800d0f4:	4b4e      	ldr	r3, [pc, #312]	; (800d230 <tcp_zero_window_probe+0x150>)
 800d0f6:	f640 0295 	movw	r2, #2197	; 0x895
 800d0fa:	494e      	ldr	r1, [pc, #312]	; (800d234 <tcp_zero_window_probe+0x154>)
 800d0fc:	484e      	ldr	r0, [pc, #312]	; (800d238 <tcp_zero_window_probe+0x158>)
 800d0fe:	f006 fd07 	bl	8013b10 <iprintf>
 800d102:	2000      	movs	r0, #0
 800d104:	f006 fe06 	bl	8013d14 <fflush>
 800d108:	f006 fd4b 	bl	8013ba2 <abort>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d110:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <tcp_zero_window_probe+0x3c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	e085      	b.n	800d228 <tcp_zero_window_probe+0x148>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d122:	2bff      	cmp	r3, #255	; 0xff
 800d124:	d007      	beq.n	800d136 <tcp_zero_window_probe+0x56>
    ++pcb->persist_probe;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d12c:	3301      	adds	r3, #1
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d136:	6a3b      	ldr	r3, [r7, #32]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	899b      	ldrh	r3, [r3, #12]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f6 febe 	bl	8003ec0 <lwip_htons>
 800d144:	4603      	mov	r3, r0
 800d146:	b2db      	uxtb	r3, r3
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <tcp_zero_window_probe+0x7c>
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	891b      	ldrh	r3, [r3, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <tcp_zero_window_probe+0x7c>
 800d158:	2301      	movs	r3, #1
 800d15a:	e000      	b.n	800d15e <tcp_zero_window_probe+0x7e>
 800d15c:	2300      	movs	r3, #0
 800d15e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d160:	7ffb      	ldrb	r3, [r7, #31]
 800d162:	2b00      	cmp	r3, #0
 800d164:	bf0c      	ite	eq
 800d166:	2301      	moveq	r3, #1
 800d168:	2300      	movne	r3, #0
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d16e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d172:	b299      	uxth	r1, r3
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	8bba      	ldrh	r2, [r7, #28]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fd3b 	bl	800cbf8 <tcp_output_alloc_header>
 800d182:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <tcp_zero_window_probe+0xb0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d18a:	f04f 33ff 	mov.w	r3, #4294967295
 800d18e:	e04b      	b.n	800d228 <tcp_zero_window_probe+0x148>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d196:	7ffb      	ldrb	r3, [r7, #31]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d011      	beq.n	800d1c0 <tcp_zero_window_probe+0xe0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	899b      	ldrh	r3, [r3, #12]
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	b21b      	sxth	r3, r3
 800d1a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d1a8:	b21c      	sxth	r4, r3
 800d1aa:	2011      	movs	r0, #17
 800d1ac:	f7f6 fe88 	bl	8003ec0 <lwip_htons>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	b21b      	sxth	r3, r3
 800d1b4:	4323      	orrs	r3, r4
 800d1b6:	b21b      	sxth	r3, r3
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	819a      	strh	r2, [r3, #12]
 800d1be:	e010      	b.n	800d1e2 <tcp_zero_window_probe+0x102>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	3314      	adds	r3, #20
 800d1c6:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	6858      	ldr	r0, [r3, #4]
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	891a      	ldrh	r2, [r3, #8]
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	891b      	ldrh	r3, [r3, #8]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	2201      	movs	r2, #1
 800d1dc:	6939      	ldr	r1, [r7, #16]
 800d1de:	f7f9 f9f1 	bl	80065c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f6 fe7e 	bl	8003eea <lwip_htonl>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	da02      	bge.n	800d206 <tcp_zero_window_probe+0x126>
    pcb->snd_nxt = snd_nxt;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800d206:	2300      	movs	r3, #0
 800d208:	2200      	movs	r2, #0
 800d20a:	69b9      	ldr	r1, [r7, #24]
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7ff fd35 	bl	800cc7c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3304      	adds	r3, #4
 800d218:	69b9      	ldr	r1, [r7, #24]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff fd7c 	bl	800cd18 <tcp_output_control_segment>
 800d220:	4603      	mov	r3, r0
 800d222:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d224:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	372c      	adds	r7, #44	; 0x2c
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd90      	pop	{r4, r7, pc}
 800d230:	08016e74 	.word	0x08016e74
 800d234:	080176d4 	.word	0x080176d4
 800d238:	08016eb8 	.word	0x08016eb8

0800d23c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d244:	f7f9 fbac 	bl	80069a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d248:	4b0a      	ldr	r3, [pc, #40]	; (800d274 <tcpip_tcp_timer+0x38>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d103      	bne.n	800d258 <tcpip_tcp_timer+0x1c>
 800d250:	4b09      	ldr	r3, [pc, #36]	; (800d278 <tcpip_tcp_timer+0x3c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d005      	beq.n	800d264 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d258:	2200      	movs	r2, #0
 800d25a:	4908      	ldr	r1, [pc, #32]	; (800d27c <tcpip_tcp_timer+0x40>)
 800d25c:	20fa      	movs	r0, #250	; 0xfa
 800d25e:	f000 f8e9 	bl	800d434 <sys_timeout>
 800d262:	e002      	b.n	800d26a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d264:	4b06      	ldr	r3, [pc, #24]	; (800d280 <tcpip_tcp_timer+0x44>)
 800d266:	2200      	movs	r2, #0
 800d268:	601a      	str	r2, [r3, #0]
  }
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	200022c4 	.word	0x200022c4
 800d278:	200022d4 	.word	0x200022d4
 800d27c:	0800d23d 	.word	0x0800d23d
 800d280:	20000740 	.word	0x20000740

0800d284 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <tcp_timer_needed+0x30>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10f      	bne.n	800d2b0 <tcp_timer_needed+0x2c>
 800d290:	4b09      	ldr	r3, [pc, #36]	; (800d2b8 <tcp_timer_needed+0x34>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <tcp_timer_needed+0x1c>
 800d298:	4b08      	ldr	r3, [pc, #32]	; (800d2bc <tcp_timer_needed+0x38>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d2a0:	4b04      	ldr	r3, [pc, #16]	; (800d2b4 <tcp_timer_needed+0x30>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4905      	ldr	r1, [pc, #20]	; (800d2c0 <tcp_timer_needed+0x3c>)
 800d2aa:	20fa      	movs	r0, #250	; 0xfa
 800d2ac:	f000 f8c2 	bl	800d434 <sys_timeout>
  }
}
 800d2b0:	bf00      	nop
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20000740 	.word	0x20000740
 800d2b8:	200022c4 	.word	0x200022c4
 800d2bc:	200022d4 	.word	0x200022d4
 800d2c0:	0800d23d 	.word	0x0800d23d

0800d2c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d2d0:	2005      	movs	r0, #5
 800d2d2:	f7f8 f8c1 	bl	8005458 <memp_malloc>
 800d2d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10d      	bne.n	800d2fa <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d14d      	bne.n	800d380 <sys_timeout_abs+0xbc>
 800d2e4:	4b28      	ldr	r3, [pc, #160]	; (800d388 <sys_timeout_abs+0xc4>)
 800d2e6:	22be      	movs	r2, #190	; 0xbe
 800d2e8:	4928      	ldr	r1, [pc, #160]	; (800d38c <sys_timeout_abs+0xc8>)
 800d2ea:	4829      	ldr	r0, [pc, #164]	; (800d390 <sys_timeout_abs+0xcc>)
 800d2ec:	f006 fc10 	bl	8013b10 <iprintf>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	f006 fd0f 	bl	8013d14 <fflush>
 800d2f6:	f006 fc54 	bl	8013ba2 <abort>
    return;
  }

  timeout->next = NULL;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d312:	4b20      	ldr	r3, [pc, #128]	; (800d394 <sys_timeout_abs+0xd0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 800d31a:	4a1e      	ldr	r2, [pc, #120]	; (800d394 <sys_timeout_abs+0xd0>)
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	6013      	str	r3, [r2, #0]
    return;
 800d320:	e02f      	b.n	800d382 <sys_timeout_abs+0xbe>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	4b1b      	ldr	r3, [pc, #108]	; (800d394 <sys_timeout_abs+0xd0>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da07      	bge.n	800d342 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d332:	4b18      	ldr	r3, [pc, #96]	; (800d394 <sys_timeout_abs+0xd0>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d33a:	4a16      	ldr	r2, [pc, #88]	; (800d394 <sys_timeout_abs+0xd0>)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	e01f      	b.n	800d382 <sys_timeout_abs+0xbe>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d342:	4b14      	ldr	r3, [pc, #80]	; (800d394 <sys_timeout_abs+0xd0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	e016      	b.n	800d378 <sys_timeout_abs+0xb4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d007      	beq.n	800d362 <sys_timeout_abs+0x9e>
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	da07      	bge.n	800d372 <sys_timeout_abs+0xae>
        timeout->next = t->next;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	601a      	str	r2, [r3, #0]
        break;
 800d370:	e007      	b.n	800d382 <sys_timeout_abs+0xbe>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	617b      	str	r3, [r7, #20]
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e5      	bne.n	800d34a <sys_timeout_abs+0x86>
 800d37e:	e000      	b.n	800d382 <sys_timeout_abs+0xbe>
    return;
 800d380:	bf00      	nop
      }
    }
  }
}
 800d382:	3718      	adds	r7, #24
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	080176f8 	.word	0x080176f8
 800d38c:	0801771c 	.word	0x0801771c
 800d390:	0801775c 	.word	0x0801775c
 800d394:	20000738 	.word	0x20000738

0800d398 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4798      	blx	r3

  now = sys_now();
 800d3aa:	f7f4 fd95 	bl	8001ed8 <sys_now>
 800d3ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	; (800d3ec <lwip_cyclic_timer+0x54>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	da09      	bge.n	800d3da <lwip_cyclic_timer+0x42>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	4907      	ldr	r1, [pc, #28]	; (800d3f0 <lwip_cyclic_timer+0x58>)
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7ff ff76 	bl	800d2c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d3d8:	e004      	b.n	800d3e4 <lwip_cyclic_timer+0x4c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	4904      	ldr	r1, [pc, #16]	; (800d3f0 <lwip_cyclic_timer+0x58>)
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7ff ff70 	bl	800d2c4 <sys_timeout_abs>
}
 800d3e4:	bf00      	nop
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	2000073c 	.word	0x2000073c
 800d3f0:	0800d399 	.word	0x0800d399

0800d3f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	607b      	str	r3, [r7, #4]
 800d3fe:	e00e      	b.n	800d41e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d400:	4a0a      	ldr	r2, [pc, #40]	; (800d42c <sys_timeouts_init+0x38>)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	4a07      	ldr	r2, [pc, #28]	; (800d42c <sys_timeouts_init+0x38>)
 800d40e:	4413      	add	r3, r2
 800d410:	461a      	mov	r2, r3
 800d412:	4907      	ldr	r1, [pc, #28]	; (800d430 <sys_timeouts_init+0x3c>)
 800d414:	f000 f80e 	bl	800d434 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3301      	adds	r3, #1
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d0ed      	beq.n	800d400 <sys_timeouts_init+0xc>
  }
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	08017c34 	.word	0x08017c34
 800d430:	0800d399 	.word	0x0800d399

0800d434 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d446:	d30b      	bcc.n	800d460 <sys_timeout+0x2c>
 800d448:	4b0d      	ldr	r3, [pc, #52]	; (800d480 <sys_timeout+0x4c>)
 800d44a:	f240 1229 	movw	r2, #297	; 0x129
 800d44e:	490d      	ldr	r1, [pc, #52]	; (800d484 <sys_timeout+0x50>)
 800d450:	480d      	ldr	r0, [pc, #52]	; (800d488 <sys_timeout+0x54>)
 800d452:	f006 fb5d 	bl	8013b10 <iprintf>
 800d456:	2000      	movs	r0, #0
 800d458:	f006 fc5c 	bl	8013d14 <fflush>
 800d45c:	f006 fba1 	bl	8013ba2 <abort>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 800d460:	f7f4 fd3a 	bl	8001ed8 <sys_now>
 800d464:	4602      	mov	r2, r0
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4413      	add	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	6978      	ldr	r0, [r7, #20]
 800d472:	f7ff ff27 	bl	800d2c4 <sys_timeout_abs>
#endif
}
 800d476:	bf00      	nop
 800d478:	3718      	adds	r7, #24
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	080176f8 	.word	0x080176f8
 800d484:	08017784 	.word	0x08017784
 800d488:	0801775c 	.word	0x0801775c

0800d48c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d496:	4b19      	ldr	r3, [pc, #100]	; (800d4fc <sys_untimeout+0x70>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d02a      	beq.n	800d4f4 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d49e:	4b17      	ldr	r3, [pc, #92]	; (800d4fc <sys_untimeout+0x70>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	60bb      	str	r3, [r7, #8]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
 800d4a8:	e01f      	b.n	800d4ea <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	689a      	ldr	r2, [r3, #8]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d115      	bne.n	800d4e0 <sys_untimeout+0x54>
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	68da      	ldr	r2, [r3, #12]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d110      	bne.n	800d4e0 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d104      	bne.n	800d4ce <sys_untimeout+0x42>
        next_timeout = t->next;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a0c      	ldr	r2, [pc, #48]	; (800d4fc <sys_untimeout+0x70>)
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	e003      	b.n	800d4d6 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	2005      	movs	r0, #5
 800d4da:	f7f8 f82d 	bl	8005538 <memp_free>
      return;
 800d4de:	e00a      	b.n	800d4f6 <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	60bb      	str	r3, [r7, #8]
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1dc      	bne.n	800d4aa <sys_untimeout+0x1e>
    }
  }
  return;
 800d4f0:	bf00      	nop
 800d4f2:	e000      	b.n	800d4f6 <sys_untimeout+0x6a>
    return;
 800d4f4:	bf00      	nop
}
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	20000738 	.word	0x20000738

0800d500 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d506:	f7f4 fce7 	bl	8001ed8 <sys_now>
 800d50a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800d50c:	4b15      	ldr	r3, [pc, #84]	; (800d564 <sys_check_timeouts+0x64>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01e      	beq.n	800d556 <sys_check_timeouts+0x56>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	db1a      	blt.n	800d55a <sys_check_timeouts+0x5a>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a0e      	ldr	r2, [pc, #56]	; (800d564 <sys_check_timeouts+0x64>)
 800d52a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	4a0a      	ldr	r2, [pc, #40]	; (800d568 <sys_check_timeouts+0x68>)
 800d53e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d540:	68b9      	ldr	r1, [r7, #8]
 800d542:	2005      	movs	r0, #5
 800d544:	f7f7 fff8 	bl	8005538 <memp_free>
    if (handler != NULL) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0de      	beq.n	800d50c <sys_check_timeouts+0xc>
      handler(arg);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6838      	ldr	r0, [r7, #0]
 800d552:	4798      	blx	r3
  do {
 800d554:	e7da      	b.n	800d50c <sys_check_timeouts+0xc>
      return;
 800d556:	bf00      	nop
 800d558:	e000      	b.n	800d55c <sys_check_timeouts+0x5c>
      return;
 800d55a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20000738 	.word	0x20000738
 800d568:	2000073c 	.word	0x2000073c

0800d56c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d572:	4b16      	ldr	r3, [pc, #88]	; (800d5cc <sys_timeouts_sleeptime+0x60>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d57a:	f04f 33ff 	mov.w	r3, #4294967295
 800d57e:	e021      	b.n	800d5c4 <sys_timeouts_sleeptime+0x58>
  }
  now = sys_now();
 800d580:	f7f4 fcaa 	bl	8001ed8 <sys_now>
 800d584:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d586:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <sys_timeouts_sleeptime+0x60>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	da01      	bge.n	800d598 <sys_timeouts_sleeptime+0x2c>
    return 0;
 800d594:	2300      	movs	r3, #0
 800d596:	e015      	b.n	800d5c4 <sys_timeouts_sleeptime+0x58>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800d598:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <sys_timeouts_sleeptime+0x60>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	685a      	ldr	r2, [r3, #4]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da0b      	bge.n	800d5c2 <sys_timeouts_sleeptime+0x56>
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <sys_timeouts_sleeptime+0x64>)
 800d5ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d5b0:	4908      	ldr	r1, [pc, #32]	; (800d5d4 <sys_timeouts_sleeptime+0x68>)
 800d5b2:	4809      	ldr	r0, [pc, #36]	; (800d5d8 <sys_timeouts_sleeptime+0x6c>)
 800d5b4:	f006 faac 	bl	8013b10 <iprintf>
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	f006 fbab 	bl	8013d14 <fflush>
 800d5be:	f006 faf0 	bl	8013ba2 <abort>
    return ret;
 800d5c2:	683b      	ldr	r3, [r7, #0]
  }
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000738 	.word	0x20000738
 800d5d0:	080176f8 	.word	0x080176f8
 800d5d4:	080177bc 	.word	0x080177bc
 800d5d8:	0801775c 	.word	0x0801775c

0800d5dc <link_required>:
#endif

/*
 * An Open on LCP has requested a change from Dead to Establish phase.
 */
void link_required(ppp_pcb *pcb) {
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(pcb);
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <link_terminated>:

/*
 * LCP has terminated the link; go to the Dead phase and take the
 * physical layer down.
 */
void link_terminated(ppp_pcb *pcb) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
    if (pcb->phase == PPP_PHASE_DEAD
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <link_terminated+0x28>
#ifdef HAVE_MULTILINK
    || pcb->phase == PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	return;
    new_phase(pcb, PPP_PHASE_DISCONNECT);
 800d602:	210c      	movs	r1, #12
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f004 fedd 	bl	80123c4 <new_phase>
	print_link_stats();
#endif /* PPP_STATS_SUPPORT */
    } else
	ppp_notice(("Link terminated."));

    lcp_lowerdown(pcb);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f002 fc30 	bl	800fe70 <lcp_lowerdown>

    ppp_link_terminated(pcb);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f004 fec7 	bl	80123a4 <ppp_link_terminated>
 800d616:	e000      	b.n	800d61a <link_terminated+0x2a>
	return;
 800d618:	bf00      	nop
	else
	    mp_bundle_terminated();
    } else
	new_phase(pcb, PPP_PHASE_DEAD);
#endif
}
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <link_down>:

/*
 * LCP has gone down; it will either die or try to re-establish.
 */
void link_down(ppp_pcb *pcb) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
#if PPP_NOTIFY
    notify(link_down_notifier, 0);
#endif /* PPP_NOTIFY */

    if (!doing_multilink) {
	upper_layers_down(pcb);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f80d 	bl	800d648 <upper_layers_down>
	if (pcb->phase != PPP_PHASE_DEAD
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d003      	beq.n	800d640 <link_down+0x20>
#ifdef HAVE_MULTILINK
	&& pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
	)
	    new_phase(pcb, PPP_PHASE_ESTABLISH);
 800d638:	2106      	movs	r1, #6
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f004 fec2 	bl	80123c4 <new_phase>
    }
    /* XXX if doing_multilink, should do something to stop
       network-layer traffic on the link */
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <upper_layers_down>:

void upper_layers_down(ppp_pcb *pcb) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
    int i;
    const struct protent *protp;

    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d650:	2300      	movs	r3, #0
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e01e      	b.n	800d694 <upper_layers_down+0x4c>
        if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d65e:	4293      	cmp	r3, r2
 800d660:	d007      	beq.n	800d672 <upper_layers_down+0x2a>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <upper_layers_down+0x2a>
	    (*protp->lowerdown)(pcb);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	4798      	blx	r3
        if (protp->protocol < 0xC000 && protp->close != NULL)
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d67a:	d208      	bcs.n	800d68e <upper_layers_down+0x46>
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <upper_layers_down+0x46>
	    (*protp->close)(pcb, "LCP down");
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	69db      	ldr	r3, [r3, #28]
 800d688:	490c      	ldr	r1, [pc, #48]	; (800d6bc <upper_layers_down+0x74>)
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	4798      	blx	r3
    for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3301      	adds	r3, #1
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	4a0a      	ldr	r2, [pc, #40]	; (800d6c0 <upper_layers_down+0x78>)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69c:	60bb      	str	r3, [r7, #8]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1d8      	bne.n	800d656 <upper_layers_down+0xe>
    }
    pcb->num_np_open = 0;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    pcb->num_np_up = 0;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	080177d0 	.word	0x080177d0
 800d6c0:	08017d08 	.word	0x08017d08

0800d6c4 <link_established>:

/*
 * The link is established.
 * Proceed to the Dead, Authenticate or Network phase as appropriate.
 */
void link_established(ppp_pcb *pcb) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
#if PAP_SUPPORT
    lcp_options *wo = &pcb->lcp_wantoptions;
#endif /* PAP_SUPPORT */
    lcp_options *go = &pcb->lcp_gotoptions;
#endif /* PPP_SERVER */
    lcp_options *ho = &pcb->lcp_hisoptions;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	33cc      	adds	r3, #204	; 0xcc
 800d6d0:	60fb      	str	r3, [r7, #12]

    /*
     * Tell higher-level protocols that LCP is up.
     */
    if (!doing_multilink) {
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	e010      	b.n	800d6fa <link_established+0x36>
	    if (protp->protocol != PPP_LCP
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d007      	beq.n	800d6f4 <link_established+0x30>
		&& protp->lowerup != NULL)
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <link_established+0x30>
		(*protp->lowerup)(pcb);
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	4798      	blx	r3
	for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	613b      	str	r3, [r7, #16]
 800d6fa:	4a19      	ldr	r2, [pc, #100]	; (800d760 <link_established+0x9c>)
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	60bb      	str	r3, [r7, #8]
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e6      	bne.n	800d6d8 <link_established+0x14>
	    return;
	}
    }
#endif /* PPP_SERVER */

    new_phase(pcb, PPP_PHASE_AUTHENTICATE);
 800d70a:	2107      	movs	r1, #7
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f004 fe59 	bl	80123c4 <new_phase>
    auth = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]
	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
	auth |= CHAP_WITHPEER;
    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    if (ho->neg_upap) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	f003 0310 	and.w	r3, r3, #16
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <link_established+0x78>
	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6859      	ldr	r1, [r3, #4]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	461a      	mov	r2, r3
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f005 fca8 	bl	8013084 <upap_authwithpeer>
	auth |= PAP_WITHPEER;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	f043 0301 	orr.w	r3, r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
    } else
#endif /* PAP_SUPPORT */
    {}

    pcb->auth_pending = auth;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->auth_done = 0;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	865a      	strh	r2, [r3, #50]	; 0x32

    if (!auth)
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <link_established+0x92>
#endif /* PPP_AUTH_SUPPORT */
	network_phase(pcb);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f807 	bl	800d764 <network_phase>
}
 800d756:	bf00      	nop
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	08017d08 	.word	0x08017d08

0800d764 <network_phase>:

/*
 * Proceed to the network phase.
 */
static void network_phase(ppp_pcb *pcb) {
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	options_from_list(extra_options, 1);
	free_wordlist(extra_options);
	extra_options = 0;
    }
#endif /* PPP_OPTIONS */
    start_networks(pcb);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f804 	bl	800d77a <start_networks>
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <start_networks>:

void start_networks(ppp_pcb *pcb) {
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
#if CCP_SUPPORT || ECP_SUPPORT
    int i;
    const struct protent *protp;
#endif /* CCP_SUPPORT || ECP_SUPPORT */

    new_phase(pcb, PPP_PHASE_NETWORK);
 800d782:	2109      	movs	r1, #9
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f004 fe1d 	bl	80123c4 <new_phase>
#endif /* ECP_SUPPORT */
#if MPPE_SUPPORT
        && !pcb->ccp_gotoptions.mppe
#endif /* MPPE_SUPPORT */
        )
	continue_networks(pcb);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f804 	bl	800d798 <continue_networks>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <continue_networks>:

void continue_networks(ppp_pcb *pcb) {
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
    const struct protent *protp;

    /*
     * Start the "real" network protocols.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e017      	b.n	800d7d6 <continue_networks+0x3e>
	if (protp->protocol < 0xC000
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d7ae:	d20f      	bcs.n	800d7d0 <continue_networks+0x38>
	    && protp->protocol != PPP_CCP
#endif /* CCP_SUPPORT */
#if ECP_SUPPORT
	    && protp->protocol != PPP_ECP
#endif /* ECP_SUPPORT */
	    && protp->open != NULL) {
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00b      	beq.n	800d7d0 <continue_networks+0x38>
	    (*protp->open)(pcb);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	4798      	blx	r3
	    ++pcb->num_np_open;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	60fb      	str	r3, [r7, #12]
 800d7d6:	4a0a      	ldr	r2, [pc, #40]	; (800d800 <continue_networks+0x68>)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7de:	60bb      	str	r3, [r7, #8]
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1df      	bne.n	800d7a6 <continue_networks+0xe>
	}

    if (pcb->num_np_open == 0)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d103      	bne.n	800d7f8 <continue_networks+0x60>
	/* nothing to do */
	lcp_close(pcb, "No network protocols running");
 800d7f0:	4904      	ldr	r1, [pc, #16]	; (800d804 <continue_networks+0x6c>)
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f002 faa0 	bl	800fd38 <lcp_close>
}
 800d7f8:	bf00      	nop
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	08017d08 	.word	0x08017d08
 800d804:	080177dc 	.word	0x080177dc

0800d808 <auth_withpeer_fail>:
#endif /* PPP_SERVER */

/*
 * We have failed to authenticate ourselves to the peer using `protocol'.
 */
void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
     * authentication secrets.
     *
     * He'll probably take the link down, and there's not much
     * we can do except wait for that.
     */
    pcb->err_code = PPPERR_AUTHFAIL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2207      	movs	r2, #7
 800d816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    lcp_close(pcb, "Failed to authenticate ourselves to peer");
 800d81a:	4904      	ldr	r1, [pc, #16]	; (800d82c <auth_withpeer_fail+0x24>)
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f002 fa8b 	bl	800fd38 <lcp_close>
}
 800d822:	bf00      	nop
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	080177fc 	.word	0x080177fc

0800d830 <auth_withpeer_success>:

/*
 * We have successfully authenticated ourselves with the peer using `protocol'.
 */
void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
    int bit;
    const char *prot = "";
 800d83c:	4b17      	ldr	r3, [pc, #92]	; (800d89c <auth_withpeer_success+0x6c>)
 800d83e:	613b      	str	r3, [r7, #16]
    LWIP_UNUSED_ARG(prot_flavor); /* if CHAP_SUPPORT is disabled */

    switch (protocol) {
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d846:	4293      	cmp	r3, r2
 800d848:	d104      	bne.n	800d854 <auth_withpeer_success+0x24>
	}
	break;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    case PPP_PAP:
	bit = PAP_WITHPEER;
 800d84a:	2301      	movs	r3, #1
 800d84c:	617b      	str	r3, [r7, #20]
	prot = "PAP";
 800d84e:	4b14      	ldr	r3, [pc, #80]	; (800d8a0 <auth_withpeer_success+0x70>)
 800d850:	613b      	str	r3, [r7, #16]
	break;
 800d852:	e001      	b.n	800d858 <auth_withpeer_success+0x28>
	prot = "EAP";
	break;
#endif /* EAP_SUPPORT */
    default:
	ppp_warn(("auth_withpeer_success: unknown protocol %x", protocol));
	bit = 0;
 800d854:	2300      	movs	r3, #0
 800d856:	617b      	str	r3, [r7, #20]
    }

    ppp_notice(("%s authentication succeeded", prot));

    /* Save the authentication method for later. */
    pcb->auth_done |= bit;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d85c:	b21a      	sxth	r2, r3
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	b21b      	sxth	r3, r3
 800d862:	4313      	orrs	r3, r2
 800d864:	b21b      	sxth	r3, r3
 800d866:	b29a      	uxth	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	865a      	strh	r2, [r3, #50]	; 0x32

    /*
     * If there is no more authentication still being done,
     * proceed to the network (or callback) phase.
     */
    if ((pcb->auth_pending &= ~bit) == 0)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d870:	b21a      	sxth	r2, r3
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	b21b      	sxth	r3, r3
 800d876:	43db      	mvns	r3, r3
 800d878:	b21b      	sxth	r3, r3
 800d87a:	4013      	ands	r3, r2
 800d87c:	b21b      	sxth	r3, r3
 800d87e:	b29a      	uxth	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	861a      	strh	r2, [r3, #48]	; 0x30
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <auth_withpeer_success+0x62>
	network_phase(pcb);
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f7ff ff69 	bl	800d764 <network_phase>
}
 800d892:	bf00      	nop
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	08017828 	.word	0x08017828
 800d8a0:	0801782c 	.word	0x0801782c

0800d8a4 <np_up>:


/*
 * np_up - a network protocol has come up.
 */
void np_up(ppp_pcb *pcb, int proto) {
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
#if PPP_IDLETIMELIMIT
    int tlim;
#endif /* PPP_IDLETIMELIMIT */
    LWIP_UNUSED_ARG(proto);

    if (pcb->num_np_up == 0) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d103      	bne.n	800d8c0 <np_up+0x1c>
	/*
	 * At this point we consider that the link has come up successfully.
	 */
	new_phase(pcb, PPP_PHASE_RUNNING);
 800d8b8:	210a      	movs	r1, #10
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f004 fd82 	bl	80123c4 <new_phase>
	 */
	if (updetach && !nodetach)
	    detach();
#endif /* Unused */
    }
    ++pcb->num_np_up;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <np_down>:

/*
 * np_down - a network protocol has gone down.
 */
void np_down(ppp_pcb *pcb, int proto) {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_up == 0) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <np_down+0x2c>
	UNTIMEOUT(connect_time_expired, NULL);
#endif /* PPP_MAXCONNECT */
#ifdef MAXOCTETS
	UNTIMEOUT(check_maxoctets, NULL);
#endif
	new_phase(pcb, PPP_PHASE_NETWORK);
 800d8fc:	2109      	movs	r1, #9
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f004 fd60 	bl	80123c4 <new_phase>
    }
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <np_finished>:

/*
 * np_finished - a network protocol has finished using the link.
 */
void np_finished(ppp_pcb *pcb, int proto) {
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
    LWIP_UNUSED_ARG(proto);
    if (--pcb->num_np_open <= 0) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d91c:	3b01      	subs	r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d103      	bne.n	800d938 <np_finished+0x2c>
	/* no further use for the link: shut up shop. */
	lcp_close(pcb, "No network protocols running");
 800d930:	4903      	ldr	r1, [pc, #12]	; (800d940 <np_finished+0x34>)
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f002 fa00 	bl	800fd38 <lcp_close>
    }
}
 800d938:	bf00      	nop
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	080177dc 	.word	0x080177dc

0800d944 <fsm_init>:
/*
 * fsm_init - Initialize fsm.
 *
 * Initialize fsm state.
 */
void fsm_init(fsm *f) {
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60fb      	str	r3, [r7, #12]
    f->state = PPP_FSM_INITIAL;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	741a      	strb	r2, [r3, #16]
    f->flags = 0;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	745a      	strb	r2, [r3, #17]
    f->id = 0;				/* XXX Start with random id? */
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	749a      	strb	r2, [r3, #18]
    f->maxnakloops = pcb->settings.fsm_max_nak_loops;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	7c5a      	ldrb	r2, [r3, #17]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	75da      	strb	r2, [r3, #23]
    f->term_reason_len = 0;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	761a      	strb	r2, [r3, #24]
}
 800d972:	bf00      	nop
 800d974:	3714      	adds	r7, #20
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <fsm_lowerup>:


/*
 * fsm_lowerup - The lower layer is up.
 */
void fsm_lowerup(fsm *f) {
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	7c1b      	ldrb	r3, [r3, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <fsm_lowerup+0x16>
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d004      	beq.n	800d99c <fsm_lowerup+0x1e>

    default:
	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800d992:	e015      	b.n	800d9c0 <fsm_lowerup+0x42>
	f->state = PPP_FSM_CLOSED;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2202      	movs	r2, #2
 800d998:	741a      	strb	r2, [r3, #16]
	break;
 800d99a:	e011      	b.n	800d9c0 <fsm_lowerup+0x42>
	if( f->flags & OPT_SILENT )
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7c5b      	ldrb	r3, [r3, #17]
 800d9a0:	f003 0304 	and.w	r3, r3, #4
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d003      	beq.n	800d9b0 <fsm_lowerup+0x32>
	    f->state = PPP_FSM_STOPPED;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2203      	movs	r2, #3
 800d9ac:	741a      	strb	r2, [r3, #16]
	break;
 800d9ae:	e006      	b.n	800d9be <fsm_lowerup+0x40>
	    fsm_sconfreq(f, 0);
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fdb2 	bl	800e51c <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	741a      	strb	r2, [r3, #16]
	break;
 800d9be:	bf00      	nop
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <fsm_lowerdown>:
/*
 * fsm_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts and inform upper layers.
 */
void fsm_lowerdown(fsm *f) {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7c1b      	ldrb	r3, [r3, #16]
 800d9d4:	3b02      	subs	r3, #2
 800d9d6:	2b07      	cmp	r3, #7
 800d9d8:	d843      	bhi.n	800da62 <fsm_lowerdown+0x9a>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <fsm_lowerdown+0x18>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800da01 	.word	0x0800da01
 800d9e4:	0800da09 	.word	0x0800da09
 800d9e8:	0800da25 	.word	0x0800da25
 800d9ec:	0800da35 	.word	0x0800da35
 800d9f0:	0800da35 	.word	0x0800da35
 800d9f4:	0800da35 	.word	0x0800da35
 800d9f8:	0800da35 	.word	0x0800da35
 800d9fc:	0800da45 	.word	0x0800da45
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_INITIAL;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	741a      	strb	r2, [r3, #16]
	break;
 800da06:	e02c      	b.n	800da62 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STARTING;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d023      	beq.n	800da60 <fsm_lowerdown+0x98>
	    (*f->callbacks->starting)(f);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	4798      	blx	r3
	break;
 800da22:	e01d      	b.n	800da60 <fsm_lowerdown+0x98>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_INITIAL;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800da2a:	6879      	ldr	r1, [r7, #4]
 800da2c:	480f      	ldr	r0, [pc, #60]	; (800da6c <fsm_lowerdown+0xa4>)
 800da2e:	f7ff fd2d 	bl	800d48c <sys_untimeout>
	break;
 800da32:	e016      	b.n	800da62 <fsm_lowerdown+0x9a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	f->state = PPP_FSM_STARTING;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	741a      	strb	r2, [r3, #16]
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	480b      	ldr	r0, [pc, #44]	; (800da6c <fsm_lowerdown+0xa4>)
 800da3e:	f7ff fd25 	bl	800d48c <sys_untimeout>
	break;
 800da42:	e00e      	b.n	800da62 <fsm_lowerdown+0x9a>

    case PPP_FSM_OPENED:
	if( f->callbacks->down )
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	6a1b      	ldr	r3, [r3, #32]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d004      	beq.n	800da58 <fsm_lowerdown+0x90>
	    (*f->callbacks->down)(f);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	6a1b      	ldr	r3, [r3, #32]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	4798      	blx	r3
	f->state = PPP_FSM_STARTING;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	741a      	strb	r2, [r3, #16]
	break;
 800da5e:	e000      	b.n	800da62 <fsm_lowerdown+0x9a>
	break;
 800da60:	bf00      	nop

    default:
	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	0800dc99 	.word	0x0800dc99

0800da70 <fsm_open>:


/*
 * fsm_open - Link is allowed to come up.
 */
void fsm_open(fsm *f) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7c1b      	ldrb	r3, [r3, #16]
 800da7c:	2b09      	cmp	r3, #9
 800da7e:	d847      	bhi.n	800db10 <fsm_open+0xa0>
 800da80:	a201      	add	r2, pc, #4	; (adr r2, 800da88 <fsm_open+0x18>)
 800da82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da86:	bf00      	nop
 800da88:	0800dab1 	.word	0x0800dab1
 800da8c:	0800db11 	.word	0x0800db11
 800da90:	0800dacd 	.word	0x0800dacd
 800da94:	0800daf7 	.word	0x0800daf7
 800da98:	0800daf1 	.word	0x0800daf1
 800da9c:	0800db11 	.word	0x0800db11
 800daa0:	0800db11 	.word	0x0800db11
 800daa4:	0800db11 	.word	0x0800db11
 800daa8:	0800db11 	.word	0x0800db11
 800daac:	0800daf7 	.word	0x0800daf7
    case PPP_FSM_INITIAL:
	f->state = PPP_FSM_STARTING;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->starting )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d029      	beq.n	800db14 <fsm_open+0xa4>
	    (*f->callbacks->starting)(f);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	4798      	blx	r3
	break;
 800daca:	e023      	b.n	800db14 <fsm_open+0xa4>

    case PPP_FSM_CLOSED:
	if( f->flags & OPT_SILENT )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7c5b      	ldrb	r3, [r3, #17]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <fsm_open+0x70>
	    f->state = PPP_FSM_STOPPED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2203      	movs	r2, #3
 800dadc:	741a      	strb	r2, [r3, #16]
	else {
	    /* Send an initial configure-request */
	    fsm_sconfreq(f, 0);
	    f->state = PPP_FSM_REQSENT;
	}
	break;
 800dade:	e01c      	b.n	800db1a <fsm_open+0xaa>
	    fsm_sconfreq(f, 0);
 800dae0:	2100      	movs	r1, #0
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 fd1a 	bl	800e51c <fsm_sconfreq>
	    f->state = PPP_FSM_REQSENT;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2206      	movs	r2, #6
 800daec:	741a      	strb	r2, [r3, #16]
	break;
 800daee:	e014      	b.n	800db1a <fsm_open+0xaa>

    case PPP_FSM_CLOSING:
	f->state = PPP_FSM_STOPPING;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2205      	movs	r2, #5
 800daf4:	741a      	strb	r2, [r3, #16]
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
    case PPP_FSM_OPENED:
	if( f->flags & OPT_RESTART ){
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	7c5b      	ldrb	r3, [r3, #17]
 800dafa:	f003 0302 	and.w	r3, r3, #2
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <fsm_open+0xa8>
	    fsm_lowerdown(f);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ff60 	bl	800d9c8 <fsm_lowerdown>
	    fsm_lowerup(f);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff ff38 	bl	800d97e <fsm_lowerup>
	}
	break;
 800db0e:	e003      	b.n	800db18 <fsm_open+0xa8>
    default:
	break;
 800db10:	bf00      	nop
 800db12:	e002      	b.n	800db1a <fsm_open+0xaa>
	break;
 800db14:	bf00      	nop
 800db16:	e000      	b.n	800db1a <fsm_open+0xaa>
	break;
 800db18:	bf00      	nop
    }
}
 800db1a:	bf00      	nop
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop

0800db24 <terminate_layer>:
 * terminate_layer - Start process of shutting down the FSM
 *
 * Cancel any timeout running, notify upper layers we're done, and
 * send a terminate-request message as configured.
 */
static void terminate_layer(fsm *f, int nextstate) {
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af02      	add	r7, sp, #8
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]

    if( f->state != PPP_FSM_OPENED )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7c1b      	ldrb	r3, [r3, #16]
 800db38:	2b09      	cmp	r3, #9
 800db3a:	d004      	beq.n	800db46 <terminate_layer+0x22>
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	482f      	ldr	r0, [pc, #188]	; (800dbfc <terminate_layer+0xd8>)
 800db40:	f7ff fca4 	bl	800d48c <sys_untimeout>
 800db44:	e009      	b.n	800db5a <terminate_layer+0x36>
    else if( f->callbacks->down )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	6a1b      	ldr	r3, [r3, #32]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d004      	beq.n	800db5a <terminate_layer+0x36>
	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	4798      	blx	r3

    /* Init restart counter and send Terminate-Request */
    f->retransmits = pcb->settings.fsm_max_term_transmits;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	7c1a      	ldrb	r2, [r3, #16]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	751a      	strb	r2, [r3, #20]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7c9b      	ldrb	r3, [r3, #18]
 800db66:	3301      	adds	r3, #1
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	749a      	strb	r2, [r3, #18]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7c9a      	ldrb	r2, [r3, #18]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	74da      	strb	r2, [r3, #19]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7cda      	ldrb	r2, [r3, #19]
	      (const u_char *) f->term_reason, f->term_reason_len);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6899      	ldr	r1, [r3, #8]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	7e1b      	ldrb	r3, [r3, #24]
    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	460b      	mov	r3, r1
 800db86:	2105      	movs	r1, #5
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fdb5 	bl	800e6f8 <fsm_sdata>

    if (f->retransmits == 0) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	7d1b      	ldrb	r3, [r3, #20]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d112      	bne.n	800dbbc <terminate_layer+0x98>
	/*
	 * User asked for no terminate requests at all; just close it.
	 * We've already fired off one Terminate-Request just to be nice
	 * to the peer, but we're not going to wait for a reply.
	 */
	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	2b04      	cmp	r3, #4
 800db9a:	d101      	bne.n	800dba0 <terminate_layer+0x7c>
 800db9c:	2202      	movs	r2, #2
 800db9e:	e000      	b.n	800dba2 <terminate_layer+0x7e>
 800dba0:	2203      	movs	r2, #3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d020      	beq.n	800dbf2 <terminate_layer+0xce>
	    (*f->callbacks->finished)(f);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	4798      	blx	r3
	return;
 800dbba:	e01a      	b.n	800dbf2 <terminate_layer+0xce>
    }

    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800dbbc:	6879      	ldr	r1, [r7, #4]
 800dbbe:	480f      	ldr	r0, [pc, #60]	; (800dbfc <terminate_layer+0xd8>)
 800dbc0:	f7ff fc64 	bl	800d48c <sys_untimeout>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	7b9b      	ldrb	r3, [r3, #14]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbce:	fb03 f302 	mul.w	r3, r3, r2
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	4909      	ldr	r1, [pc, #36]	; (800dbfc <terminate_layer+0xd8>)
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff fc2c 	bl	800d434 <sys_timeout>
    --f->retransmits;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	7d1b      	ldrb	r3, [r3, #20]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	751a      	strb	r2, [r3, #20]

    f->state = nextstate;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	741a      	strb	r2, [r3, #16]
 800dbf0:	e000      	b.n	800dbf4 <terminate_layer+0xd0>
	return;
 800dbf2:	bf00      	nop
}
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0800dc99 	.word	0x0800dc99

0800dc00 <fsm_close>:
 * fsm_close - Start closing connection.
 *
 * Cancel timeouts and either initiate close or possibly go directly to
 * the PPP_FSM_CLOSED state.
 */
void fsm_close(fsm *f, const char *reason) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
    f->term_reason = reason;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	609a      	str	r2, [r3, #8]
    f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00d      	beq.n	800dc32 <fsm_close+0x32>
 800dc16:	6838      	ldr	r0, [r7, #0]
 800dc18:	f7f2 fae4 	bl	80001e4 <strlen>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2bfe      	cmp	r3, #254	; 0xfe
 800dc20:	d805      	bhi.n	800dc2e <fsm_close+0x2e>
 800dc22:	6838      	ldr	r0, [r7, #0]
 800dc24:	f7f2 fade 	bl	80001e4 <strlen>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	e002      	b.n	800dc34 <fsm_close+0x34>
 800dc2e:	23ff      	movs	r3, #255	; 0xff
 800dc30:	e000      	b.n	800dc34 <fsm_close+0x34>
 800dc32:	2300      	movs	r3, #0
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	7613      	strb	r3, [r2, #24]
    switch( f->state ){
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	7c1b      	ldrb	r3, [r3, #16]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	2b08      	cmp	r3, #8
 800dc40:	d825      	bhi.n	800dc8e <fsm_close+0x8e>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <fsm_close+0x48>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dc6d 	.word	0x0800dc6d
 800dc4c:	0800dc8f 	.word	0x0800dc8f
 800dc50:	0800dc75 	.word	0x0800dc75
 800dc54:	0800dc8f 	.word	0x0800dc8f
 800dc58:	0800dc7d 	.word	0x0800dc7d
 800dc5c:	0800dc85 	.word	0x0800dc85
 800dc60:	0800dc85 	.word	0x0800dc85
 800dc64:	0800dc85 	.word	0x0800dc85
 800dc68:	0800dc85 	.word	0x0800dc85
    case PPP_FSM_STARTING:
	f->state = PPP_FSM_INITIAL;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	741a      	strb	r2, [r3, #16]
	break;
 800dc72:	e00d      	b.n	800dc90 <fsm_close+0x90>
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_CLOSED;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	741a      	strb	r2, [r3, #16]
	break;
 800dc7a:	e009      	b.n	800dc90 <fsm_close+0x90>
    case PPP_FSM_STOPPING:
	f->state = PPP_FSM_CLOSING;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2204      	movs	r2, #4
 800dc80:	741a      	strb	r2, [r3, #16]
	break;
 800dc82:	e005      	b.n	800dc90 <fsm_close+0x90>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_CLOSING);
 800dc84:	2104      	movs	r1, #4
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff ff4c 	bl	800db24 <terminate_layer>
	break;
 800dc8c:	e000      	b.n	800dc90 <fsm_close+0x90>
    default:
	break;
 800dc8e:	bf00      	nop
    }
}
 800dc90:	bf00      	nop
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <fsm_timeout>:


/*
 * fsm_timeout - Timeout expired.
 */
static void fsm_timeout(void *arg) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af02      	add	r7, sp, #8
 800dc9e:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm *) arg;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60bb      	str	r3, [r7, #8]

    switch (f->state) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	7c1b      	ldrb	r3, [r3, #16]
 800dcae:	3b04      	subs	r3, #4
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	f200 8083 	bhi.w	800ddbc <fsm_timeout+0x124>
 800dcb6:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <fsm_timeout+0x24>)
 800dcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbc:	0800dcd1 	.word	0x0800dcd1
 800dcc0:	0800dcd1 	.word	0x0800dcd1
 800dcc4:	0800dd5b 	.word	0x0800dd5b
 800dcc8:	0800dd5b 	.word	0x0800dd5b
 800dccc:	0800dd5b 	.word	0x0800dd5b
    case PPP_FSM_CLOSING:
    case PPP_FSM_STOPPING:
	if( f->retransmits <= 0 ){
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	7d1b      	ldrb	r3, [r3, #20]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d113      	bne.n	800dd00 <fsm_timeout+0x68>
	    /*
	     * We've waited for an ack long enough.  Peer probably heard us.
	     */
	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	7c1b      	ldrb	r3, [r3, #16]
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	d101      	bne.n	800dce4 <fsm_timeout+0x4c>
 800dce0:	2202      	movs	r2, #2
 800dce2:	e000      	b.n	800dce6 <fsm_timeout+0x4e>
 800dce4:	2203      	movs	r2, #3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	741a      	strb	r2, [r3, #16]
	    if( f->callbacks->finished )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d060      	beq.n	800ddb6 <fsm_timeout+0x11e>
		(*f->callbacks->finished)(f);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	4798      	blx	r3
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
		      (const u_char *) f->term_reason, f->term_reason_len);
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	    --f->retransmits;
	}
	break;
 800dcfe:	e05a      	b.n	800ddb6 <fsm_timeout+0x11e>
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	7c9b      	ldrb	r3, [r3, #18]
 800dd04:	3301      	adds	r3, #1
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	749a      	strb	r2, [r3, #18]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	7c9a      	ldrb	r2, [r3, #18]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	74da      	strb	r2, [r3, #19]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	7cda      	ldrb	r2, [r3, #19]
		      (const u_char *) f->term_reason, f->term_reason_len);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6899      	ldr	r1, [r3, #8]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	7e1b      	ldrb	r3, [r3, #24]
	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	460b      	mov	r3, r1
 800dd24:	2105      	movs	r1, #5
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 fce6 	bl	800e6f8 <fsm_sdata>
	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	4825      	ldr	r0, [pc, #148]	; (800ddc4 <fsm_timeout+0x12c>)
 800dd30:	f7ff fbac 	bl	800d48c <sys_untimeout>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	7b9b      	ldrb	r3, [r3, #14]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd3e:	fb03 f302 	mul.w	r3, r3, r2
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	491f      	ldr	r1, [pc, #124]	; (800ddc4 <fsm_timeout+0x12c>)
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7ff fb74 	bl	800d434 <sys_timeout>
	    --f->retransmits;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	751a      	strb	r2, [r3, #20]
	break;
 800dd58:	e02d      	b.n	800ddb6 <fsm_timeout+0x11e>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	if (f->retransmits <= 0) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7d1b      	ldrb	r3, [r3, #20]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d113      	bne.n	800dd8a <fsm_timeout+0xf2>
	    ppp_warn(("%s: timeout sending Config-Requests", PROTO_NAME(f)));
	    f->state = PPP_FSM_STOPPED;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2203      	movs	r2, #3
 800dd66:	741a      	strb	r2, [r3, #16]
	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	7c5b      	ldrb	r3, [r3, #17]
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d122      	bne.n	800ddba <fsm_timeout+0x122>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d01d      	beq.n	800ddba <fsm_timeout+0x122>
		(*f->callbacks->finished)(f);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	4798      	blx	r3
		(*f->callbacks->retransmit)(f);
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
	    if( f->state == PPP_FSM_ACKRCVD )
		f->state = PPP_FSM_REQSENT;
	}
	break;
 800dd88:	e017      	b.n	800ddba <fsm_timeout+0x122>
	    if (f->callbacks->retransmit)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d004      	beq.n	800dd9e <fsm_timeout+0x106>
		(*f->callbacks->retransmit)(f);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	4798      	blx	r3
	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
 800dd9e:	2101      	movs	r1, #1
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f000 fbbb 	bl	800e51c <fsm_sconfreq>
	    if( f->state == PPP_FSM_ACKRCVD )
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	7c1b      	ldrb	r3, [r3, #16]
 800ddaa:	2b07      	cmp	r3, #7
 800ddac:	d105      	bne.n	800ddba <fsm_timeout+0x122>
		f->state = PPP_FSM_REQSENT;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2206      	movs	r2, #6
 800ddb2:	741a      	strb	r2, [r3, #16]
	break;
 800ddb4:	e001      	b.n	800ddba <fsm_timeout+0x122>
	break;
 800ddb6:	bf00      	nop
 800ddb8:	e000      	b.n	800ddbc <fsm_timeout+0x124>
	break;
 800ddba:	bf00      	nop

    default:
	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800ddbc:	bf00      	nop
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	0800dc99 	.word	0x0800dc99

0800ddc8 <fsm_input>:


/*
 * fsm_input - Input packet.
 */
void fsm_input(fsm *f, u_char *inpacket, int l) {
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b08b      	sub	sp, #44	; 0x2c
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	61fb      	str	r3, [r7, #28]
    if (l < HEADERLEN) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	f340 808c 	ble.w	800def8 <fsm_input+0x130>
	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
	return;
    }
    GETCHAR(code, inp);
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	61fa      	str	r2, [r7, #28]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	61fa      	str	r2, [r7, #28]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	1c5a      	adds	r2, r3, #1
 800ddf8:	61fa      	str	r2, [r7, #28]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	021b      	lsls	r3, r3, #8
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	61fa      	str	r2, [r7, #28]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	461a      	mov	r2, r3
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	4313      	orrs	r3, r2
 800de0e:	617b      	str	r3, [r7, #20]
    if (len < HEADERLEN) {
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b03      	cmp	r3, #3
 800de14:	dd72      	ble.n	800defc <fsm_input+0x134>
	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
	return;
    }
    if (len > l) {
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	dc70      	bgt.n	800df00 <fsm_input+0x138>
	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
	return;
    }
    len -= HEADERLEN;		/* subtract header length */
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	3b04      	subs	r3, #4
 800de22:	617b      	str	r3, [r7, #20]

    if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	7c1b      	ldrb	r3, [r3, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d06b      	beq.n	800df04 <fsm_input+0x13c>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	7c1b      	ldrb	r3, [r3, #16]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d067      	beq.n	800df04 <fsm_input+0x13c>
    }

    /*
     * Action depends on code.
     */
    switch (code) {
 800de34:	7efb      	ldrb	r3, [r7, #27]
 800de36:	3b01      	subs	r3, #1
 800de38:	2b06      	cmp	r3, #6
 800de3a:	d839      	bhi.n	800deb0 <fsm_input+0xe8>
 800de3c:	a201      	add	r2, pc, #4	; (adr r2, 800de44 <fsm_input+0x7c>)
 800de3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de42:	bf00      	nop
 800de44:	0800de61 	.word	0x0800de61
 800de48:	0800de6f 	.word	0x0800de6f
 800de4c:	0800de7d 	.word	0x0800de7d
 800de50:	0800de7d 	.word	0x0800de7d
 800de54:	0800de8f 	.word	0x0800de8f
 800de58:	0800de9d 	.word	0x0800de9d
 800de5c:	0800dea5 	.word	0x0800dea5
    case CONFREQ:
	fsm_rconfreq(f, id, inp, len);
 800de60:	7eb9      	ldrb	r1, [r7, #26]
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	69fa      	ldr	r2, [r7, #28]
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f000 f852 	bl	800df10 <fsm_rconfreq>
	break;
 800de6c:	e04d      	b.n	800df0a <fsm_input+0x142>
    
    case CONFACK:
	fsm_rconfack(f, id, inp, len);
 800de6e:	7eb9      	ldrb	r1, [r7, #26]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	69fa      	ldr	r2, [r7, #28]
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 f8f1 	bl	800e05c <fsm_rconfack>
	break;
 800de7a:	e046      	b.n	800df0a <fsm_input+0x142>
    
    case CONFNAK:
    case CONFREJ:
	fsm_rconfnakrej(f, code, id, inp, len);
 800de7c:	7ef9      	ldrb	r1, [r7, #27]
 800de7e:	7eba      	ldrb	r2, [r7, #26]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 f988 	bl	800e19c <fsm_rconfnakrej>
	break;
 800de8c:	e03d      	b.n	800df0a <fsm_input+0x142>
    
    case TERMREQ:
	fsm_rtermreq(f, id, inp, len);
 800de8e:	7eb9      	ldrb	r1, [r7, #26]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	69fa      	ldr	r2, [r7, #28]
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f000 fa2b 	bl	800e2f0 <fsm_rtermreq>
	break;
 800de9a:	e036      	b.n	800df0a <fsm_input+0x142>
    
    case TERMACK:
	fsm_rtermack(f);
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 fa6f 	bl	800e380 <fsm_rtermack>
	break;
 800dea2:	e032      	b.n	800df0a <fsm_input+0x142>
    
    case CODEREJ:
	fsm_rcoderej(f, inp, len);
 800dea4:	697a      	ldr	r2, [r7, #20]
 800dea6:	69f9      	ldr	r1, [r7, #28]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fac7 	bl	800e43c <fsm_rcoderej>
	break;
 800deae:	e02c      	b.n	800df0a <fsm_input+0x142>
    
    default:
	if( !f->callbacks->extcode
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00c      	beq.n	800ded4 <fsm_input+0x10c>
	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800dec0:	7ef9      	ldrb	r1, [r7, #27]
 800dec2:	7eba      	ldrb	r2, [r7, #26]
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	47a0      	blx	r4
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d119      	bne.n	800df08 <fsm_input+0x140>
	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7c9b      	ldrb	r3, [r3, #18]
 800ded8:	3301      	adds	r3, #1
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	749a      	strb	r2, [r3, #18]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	7c9a      	ldrb	r2, [r3, #18]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	3304      	adds	r3, #4
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2107      	movs	r1, #7
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fc02 	bl	800e6f8 <fsm_sdata>
	break;
 800def4:	bf00      	nop
 800def6:	e007      	b.n	800df08 <fsm_input+0x140>
	return;
 800def8:	bf00      	nop
 800defa:	e006      	b.n	800df0a <fsm_input+0x142>
	return;
 800defc:	bf00      	nop
 800defe:	e004      	b.n	800df0a <fsm_input+0x142>
	return;
 800df00:	bf00      	nop
 800df02:	e002      	b.n	800df0a <fsm_input+0x142>
	return;
 800df04:	bf00      	nop
 800df06:	e000      	b.n	800df0a <fsm_input+0x142>
	break;
 800df08:	bf00      	nop
    }
}
 800df0a:	3724      	adds	r7, #36	; 0x24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd90      	pop	{r4, r7, pc}

0800df10 <fsm_rconfreq>:


/*
 * fsm_rconfreq - Receive Configure-Request.
 */
static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
 800df10:	b590      	push	{r4, r7, lr}
 800df12:	b089      	sub	sp, #36	; 0x24
 800df14:	af02      	add	r7, sp, #8
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	607a      	str	r2, [r7, #4]
 800df1a:	603b      	str	r3, [r7, #0]
 800df1c:	460b      	mov	r3, r1
 800df1e:	72fb      	strb	r3, [r7, #11]
    int code, reject_if_disagree;

    switch( f->state ){
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	7c1b      	ldrb	r3, [r3, #16]
 800df24:	3b02      	subs	r3, #2
 800df26:	2b07      	cmp	r3, #7
 800df28:	d835      	bhi.n	800df96 <fsm_rconfreq+0x86>
 800df2a:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <fsm_rconfreq+0x20>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df87 	.word	0x0800df87
 800df38:	0800e04f 	.word	0x0800e04f
 800df3c:	0800e04f 	.word	0x0800e04f
 800df40:	0800df97 	.word	0x0800df97
 800df44:	0800df97 	.word	0x0800df97
 800df48:	0800df97 	.word	0x0800df97
 800df4c:	0800df63 	.word	0x0800df63
    case PPP_FSM_CLOSED:
	/* Go away, we're closed */
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800df50:	7afa      	ldrb	r2, [r7, #11]
 800df52:	2300      	movs	r3, #0
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	2300      	movs	r3, #0
 800df58:	2106      	movs	r1, #6
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 fbcc 	bl	800e6f8 <fsm_sdata>
	return;
 800df60:	e076      	b.n	800e050 <fsm_rconfreq+0x140>
    case PPP_FSM_STOPPING:
	return;

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if( f->callbacks->down )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	6a1b      	ldr	r3, [r3, #32]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d004      	beq.n	800df76 <fsm_rconfreq+0x66>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800df76:	2100      	movs	r1, #0
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 facf 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2206      	movs	r2, #6
 800df82:	741a      	strb	r2, [r3, #16]
	break;
 800df84:	e008      	b.n	800df98 <fsm_rconfreq+0x88>

    case PPP_FSM_STOPPED:
	/* Negotiation started by our peer */
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800df86:	2100      	movs	r1, #0
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 fac7 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2206      	movs	r2, #6
 800df92:	741a      	strb	r2, [r3, #16]
	break;
 800df94:	e000      	b.n	800df98 <fsm_rconfreq+0x88>
    default:
	break;
 800df96:	bf00      	nop

    /*
     * Pass the requested configuration options
     * to protocol-specific code for checking.
     */
    if (f->callbacks->reqci){		/* Check CI */
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d013      	beq.n	800dfca <fsm_rconfreq+0xba>
	reject_if_disagree = (f->nakloops >= f->maxnakloops);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	7d5a      	ldrb	r2, [r3, #21]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	7ddb      	ldrb	r3, [r3, #23]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	bf2c      	ite	cs
 800dfae:	2301      	movcs	r3, #1
 800dfb0:	2300      	movcc	r3, #0
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	613b      	str	r3, [r7, #16]
	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	699c      	ldr	r4, [r3, #24]
 800dfbc:	463a      	mov	r2, r7
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	47a0      	blx	r4
 800dfc6:	6178      	str	r0, [r7, #20]
 800dfc8:	e007      	b.n	800dfda <fsm_rconfreq+0xca>
    } else if (len)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d002      	beq.n	800dfd6 <fsm_rconfreq+0xc6>
	code = CONFREJ;			/* Reject all CI */
 800dfd0:	2304      	movs	r3, #4
 800dfd2:	617b      	str	r3, [r7, #20]
 800dfd4:	e001      	b.n	800dfda <fsm_rconfreq+0xca>
    else
	code = CONFACK;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	617b      	str	r3, [r7, #20]

    /* send the Ack, Nak or Rej to the peer */
    fsm_sdata(f, code, id, inp, len);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	b2d9      	uxtb	r1, r3
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	7afa      	ldrb	r2, [r7, #11]
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f000 fb86 	bl	800e6f8 <fsm_sdata>

    if (code == CONFACK) {
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d11c      	bne.n	800e02c <fsm_rconfreq+0x11c>
	if (f->state == PPP_FSM_ACKRCVD) {
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	7c1b      	ldrb	r3, [r3, #16]
 800dff6:	2b07      	cmp	r3, #7
 800dff8:	d111      	bne.n	800e01e <fsm_rconfreq+0x10e>
	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800dffa:	68f9      	ldr	r1, [r7, #12]
 800dffc:	4816      	ldr	r0, [pc, #88]	; (800e058 <fsm_rconfreq+0x148>)
 800dffe:	f7ff fa45 	bl	800d48c <sys_untimeout>
	    f->state = PPP_FSM_OPENED;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2209      	movs	r2, #9
 800e006:	741a      	strb	r2, [r3, #16]
	    if (f->callbacks->up)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d008      	beq.n	800e024 <fsm_rconfreq+0x114>
		(*f->callbacks->up)(f);	/* Inform upper layers */
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	4798      	blx	r3
 800e01c:	e002      	b.n	800e024 <fsm_rconfreq+0x114>
	} else
	    f->state = PPP_FSM_ACKSENT;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2208      	movs	r2, #8
 800e022:	741a      	strb	r2, [r3, #16]
	f->nakloops = 0;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2200      	movs	r2, #0
 800e028:	755a      	strb	r2, [r3, #21]
 800e02a:	e011      	b.n	800e050 <fsm_rconfreq+0x140>

    } else {
	/* we sent CONFACK or CONFREJ */
	if (f->state != PPP_FSM_ACKRCVD)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	7c1b      	ldrb	r3, [r3, #16]
 800e030:	2b07      	cmp	r3, #7
 800e032:	d002      	beq.n	800e03a <fsm_rconfreq+0x12a>
	    f->state = PPP_FSM_REQSENT;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2206      	movs	r2, #6
 800e038:	741a      	strb	r2, [r3, #16]
	if( code == CONFNAK )
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b03      	cmp	r3, #3
 800e03e:	d107      	bne.n	800e050 <fsm_rconfreq+0x140>
	    ++f->nakloops;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	7d5b      	ldrb	r3, [r3, #21]
 800e044:	3301      	adds	r3, #1
 800e046:	b2da      	uxtb	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	755a      	strb	r2, [r3, #21]
 800e04c:	e000      	b.n	800e050 <fsm_rconfreq+0x140>
	return;
 800e04e:	bf00      	nop
    }
}
 800e050:	371c      	adds	r7, #28
 800e052:	46bd      	mov	sp, r7
 800e054:	bd90      	pop	{r4, r7, pc}
 800e056:	bf00      	nop
 800e058:	0800dc99 	.word	0x0800dc99

0800e05c <fsm_rconfack>:


/*
 * fsm_rconfack - Receive Configure-Ack.
 */
static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b088      	sub	sp, #32
 800e060:	af02      	add	r7, sp, #8
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
 800e068:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	617b      	str	r3, [r7, #20]

    if (id != f->reqid || f->seen_ack)		/* Expected id? */
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	7cdb      	ldrb	r3, [r3, #19]
 800e074:	461a      	mov	r2, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	429a      	cmp	r2, r3
 800e07a:	f040 8083 	bne.w	800e184 <fsm_rconfack+0x128>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	7b1b      	ldrb	r3, [r3, #12]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d17e      	bne.n	800e184 <fsm_rconfack+0x128>
	return;					/* Nope, toss... */
    if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00d      	beq.n	800e0ac <fsm_rconfack+0x50>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	6879      	ldr	r1, [r7, #4]
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	4798      	blx	r3
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bf0c      	ite	eq
 800e0a4:	2301      	moveq	r3, #1
 800e0a6:	2300      	movne	r3, #0
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	e005      	b.n	800e0b8 <fsm_rconfack+0x5c>
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	bf14      	ite	ne
 800e0b2:	2301      	movne	r3, #1
 800e0b4:	2300      	moveq	r3, #0
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d165      	bne.n	800e188 <fsm_rconfack+0x12c>
	  (len == 0)) ){
	/* Ack is bad - ignore it */
	ppp_error(("Received bad configure-ack: %P", inp, len));
	return;
    }
    f->seen_ack = 1;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	731a      	strb	r2, [r3, #12]
    f->rnakloops = 0;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	759a      	strb	r2, [r3, #22]

    switch (f->state) {
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	7c1b      	ldrb	r3, [r3, #16]
 800e0cc:	3b02      	subs	r3, #2
 800e0ce:	2b07      	cmp	r3, #7
 800e0d0:	d85c      	bhi.n	800e18c <fsm_rconfack+0x130>
 800e0d2:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <fsm_rconfack+0x7c>)
 800e0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d8:	0800e0f9 	.word	0x0800e0f9
 800e0dc:	0800e0f9 	.word	0x0800e0f9
 800e0e0:	0800e18d 	.word	0x0800e18d
 800e0e4:	0800e18d 	.word	0x0800e18d
 800e0e8:	0800e10d 	.word	0x0800e10d
 800e0ec:	0800e11d 	.word	0x0800e11d
 800e0f0:	0800e135 	.word	0x0800e135
 800e0f4:	0800e161 	.word	0x0800e161
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	2300      	movs	r3, #0
 800e102:	2106      	movs	r1, #6
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 faf7 	bl	800e6f8 <fsm_sdata>
	break;
 800e10a:	e042      	b.n	800e192 <fsm_rconfack+0x136>

    case PPP_FSM_REQSENT:
	f->state = PPP_FSM_ACKRCVD;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2207      	movs	r2, #7
 800e110:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	7bda      	ldrb	r2, [r3, #15]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	751a      	strb	r2, [r3, #20]
	break;
 800e11a:	e03a      	b.n	800e192 <fsm_rconfack+0x136>

    case PPP_FSM_ACKRCVD:
	/* Huh? an extra valid Ack? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e11c:	68f9      	ldr	r1, [r7, #12]
 800e11e:	481e      	ldr	r0, [pc, #120]	; (800e198 <fsm_rconfack+0x13c>)
 800e120:	f7ff f9b4 	bl	800d48c <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e124:	2100      	movs	r1, #0
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f000 f9f8 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2206      	movs	r2, #6
 800e130:	741a      	strb	r2, [r3, #16]
	break;
 800e132:	e02e      	b.n	800e192 <fsm_rconfack+0x136>

    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e134:	68f9      	ldr	r1, [r7, #12]
 800e136:	4818      	ldr	r0, [pc, #96]	; (800e198 <fsm_rconfack+0x13c>)
 800e138:	f7ff f9a8 	bl	800d48c <sys_untimeout>
	f->state = PPP_FSM_OPENED;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2209      	movs	r2, #9
 800e140:	741a      	strb	r2, [r3, #16]
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	7bda      	ldrb	r2, [r3, #15]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	751a      	strb	r2, [r3, #20]
	if (f->callbacks->up)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01d      	beq.n	800e190 <fsm_rconfack+0x134>
	    (*f->callbacks->up)(f);	/* Inform upper layers */
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	4798      	blx	r3
	break;
 800e15e:	e017      	b.n	800e190 <fsm_rconfack+0x134>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d004      	beq.n	800e174 <fsm_rconfack+0x118>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	6a1b      	ldr	r3, [r3, #32]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e174:	2100      	movs	r1, #0
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 f9d0 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2206      	movs	r2, #6
 800e180:	741a      	strb	r2, [r3, #16]
	break;
 800e182:	e006      	b.n	800e192 <fsm_rconfack+0x136>
	return;					/* Nope, toss... */
 800e184:	bf00      	nop
 800e186:	e004      	b.n	800e192 <fsm_rconfack+0x136>
	return;
 800e188:	bf00      	nop
 800e18a:	e002      	b.n	800e192 <fsm_rconfack+0x136>
    default:
	break;
 800e18c:	bf00      	nop
 800e18e:	e000      	b.n	800e192 <fsm_rconfack+0x136>
	break;
 800e190:	bf00      	nop
    }
}
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	0800dc99 	.word	0x0800dc99

0800e19c <fsm_rconfnakrej>:


/*
 * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
 */
static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b089      	sub	sp, #36	; 0x24
 800e1a0:	af02      	add	r7, sp, #8
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
 800e1a8:	603b      	str	r3, [r7, #0]
    int ret;
    int treat_as_reject;

    if (id != f->reqid || f->seen_ack)	/* Expected id? */
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	7cdb      	ldrb	r3, [r3, #19]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	f040 8090 	bne.w	800e2d8 <fsm_rconfnakrej+0x13c>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	7b1b      	ldrb	r3, [r3, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f040 808b 	bne.w	800e2d8 <fsm_rconfnakrej+0x13c>
	return;				/* Nope, toss... */

    if (code == CONFNAK) {
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d121      	bne.n	800e20c <fsm_rconfnakrej+0x70>
	++f->rnakloops;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	7d9b      	ldrb	r3, [r3, #22]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	759a      	strb	r2, [r3, #22]
	treat_as_reject = (f->rnakloops >= f->maxnakloops);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	7d9a      	ldrb	r2, [r3, #22]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	7ddb      	ldrb	r3, [r3, #23]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	bf2c      	ite	cs
 800e1e0:	2301      	movcs	r3, #1
 800e1e2:	2300      	movcc	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	613b      	str	r3, [r7, #16]
	if (f->callbacks->nakci == NULL
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d074      	beq.n	800e2dc <fsm_rconfnakrej+0x140>
	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	691c      	ldr	r4, [r3, #16]
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	47a0      	blx	r4
 800e202:	6178      	str	r0, [r7, #20]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d113      	bne.n	800e232 <fsm_rconfnakrej+0x96>
	    ppp_error(("Received bad configure-nak: %P", inp, len));
	    return;
 800e20a:	e067      	b.n	800e2dc <fsm_rconfnakrej+0x140>
	}
    } else {
	f->rnakloops = 0;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2200      	movs	r2, #0
 800e210:	759a      	strb	r2, [r3, #22]
	if (f->callbacks->rejci == NULL
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d061      	beq.n	800e2e0 <fsm_rconfnakrej+0x144>
	    || !(ret = f->callbacks->rejci(f, inp, len))) {
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	4798      	blx	r3
 800e22a:	6178      	str	r0, [r7, #20]
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d056      	beq.n	800e2e0 <fsm_rconfnakrej+0x144>
	    ppp_error(("Received bad configure-rej: %P", inp, len));
	    return;
	}
    }

    f->seen_ack = 1;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	731a      	strb	r2, [r3, #12]

    switch (f->state) {
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	7c1b      	ldrb	r3, [r3, #16]
 800e23c:	3b02      	subs	r3, #2
 800e23e:	2b07      	cmp	r3, #7
 800e240:	d850      	bhi.n	800e2e4 <fsm_rconfnakrej+0x148>
 800e242:	a201      	add	r2, pc, #4	; (adr r2, 800e248 <fsm_rconfnakrej+0xac>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e269 	.word	0x0800e269
 800e24c:	0800e269 	.word	0x0800e269
 800e250:	0800e2e5 	.word	0x0800e2e5
 800e254:	0800e2e5 	.word	0x0800e2e5
 800e258:	0800e27d 	.word	0x0800e27d
 800e25c:	0800e29d 	.word	0x0800e29d
 800e260:	0800e27d 	.word	0x0800e27d
 800e264:	0800e2b5 	.word	0x0800e2b5
    case PPP_FSM_CLOSED:
    case PPP_FSM_STOPPED:
	fsm_sdata(f, TERMACK, id, NULL, 0);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	2300      	movs	r3, #0
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	2300      	movs	r3, #0
 800e272:	2106      	movs	r1, #6
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 fa3f 	bl	800e6f8 <fsm_sdata>
	break;
 800e27a:	e034      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKSENT:
	/* They didn't agree to what we wanted - try another request */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e27c:	68f9      	ldr	r1, [r7, #12]
 800e27e:	481b      	ldr	r0, [pc, #108]	; (800e2ec <fsm_rconfnakrej+0x150>)
 800e280:	f7ff f904 	bl	800d48c <sys_untimeout>
	if (ret < 0)
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	da03      	bge.n	800e292 <fsm_rconfnakrej+0xf6>
	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2203      	movs	r2, #3
 800e28e:	741a      	strb	r2, [r3, #16]
	else
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
	break;
 800e290:	e029      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>
	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
 800e292:	2100      	movs	r1, #0
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 f941 	bl	800e51c <fsm_sconfreq>
	break;
 800e29a:	e024      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_ACKRCVD:
	/* Got a Nak/reject when we had already had an Ack?? oh well... */
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e29c:	68f9      	ldr	r1, [r7, #12]
 800e29e:	4813      	ldr	r0, [pc, #76]	; (800e2ec <fsm_rconfnakrej+0x150>)
 800e2a0:	f7ff f8f4 	bl	800d48c <sys_untimeout>
	fsm_sconfreq(f, 0);
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 f938 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2206      	movs	r2, #6
 800e2b0:	741a      	strb	r2, [r3, #16]
	break;
 800e2b2:	e018      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>

    case PPP_FSM_OPENED:
	/* Go down and restart negotiation */
	if (f->callbacks->down)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d004      	beq.n	800e2c8 <fsm_rconfnakrej+0x12c>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	6a1b      	ldr	r3, [r3, #32]
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	4798      	blx	r3
	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f000 f926 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2206      	movs	r2, #6
 800e2d4:	741a      	strb	r2, [r3, #16]
	break;
 800e2d6:	e006      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>
	return;				/* Nope, toss... */
 800e2d8:	bf00      	nop
 800e2da:	e004      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>
	    return;
 800e2dc:	bf00      	nop
 800e2de:	e002      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>
	    return;
 800e2e0:	bf00      	nop
 800e2e2:	e000      	b.n	800e2e6 <fsm_rconfnakrej+0x14a>
    default:
	break;
 800e2e4:	bf00      	nop
    }
}
 800e2e6:	371c      	adds	r7, #28
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd90      	pop	{r4, r7, pc}
 800e2ec:	0800dc99 	.word	0x0800dc99

0800e2f0 <fsm_rtermreq>:


/*
 * fsm_rtermreq - Receive Terminate-Req.
 */
static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b088      	sub	sp, #32
 800e2f4:	af02      	add	r7, sp, #8
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
 800e2fc:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	617b      	str	r3, [r7, #20]

    switch (f->state) {
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	7c1b      	ldrb	r3, [r3, #16]
 800e308:	2b07      	cmp	r3, #7
 800e30a:	db29      	blt.n	800e360 <fsm_rtermreq+0x70>
 800e30c:	2b08      	cmp	r3, #8
 800e30e:	dd02      	ble.n	800e316 <fsm_rtermreq+0x26>
 800e310:	2b09      	cmp	r3, #9
 800e312:	d004      	beq.n	800e31e <fsm_rtermreq+0x2e>
	if (f->callbacks->down)
	    (*f->callbacks->down)(f);	/* Inform upper layers */
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
	break;
    default:
	break;
 800e314:	e024      	b.n	800e360 <fsm_rtermreq+0x70>
	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2206      	movs	r2, #6
 800e31a:	741a      	strb	r2, [r3, #16]
	break;
 800e31c:	e021      	b.n	800e362 <fsm_rtermreq+0x72>
	f->retransmits = 0;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	751a      	strb	r2, [r3, #20]
	f->state = PPP_FSM_STOPPING;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2205      	movs	r2, #5
 800e328:	741a      	strb	r2, [r3, #16]
	if (f->callbacks->down)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	6a1b      	ldr	r3, [r3, #32]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <fsm_rtermreq+0x4e>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	4798      	blx	r3
	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e33e:	68f9      	ldr	r1, [r7, #12]
 800e340:	480e      	ldr	r0, [pc, #56]	; (800e37c <fsm_rtermreq+0x8c>)
 800e342:	f7ff f8a3 	bl	800d48c <sys_untimeout>
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	7b9b      	ldrb	r3, [r3, #14]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e350:	fb03 f302 	mul.w	r3, r3, r2
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4909      	ldr	r1, [pc, #36]	; (800e37c <fsm_rtermreq+0x8c>)
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff f86b 	bl	800d434 <sys_timeout>
	break;
 800e35e:	e000      	b.n	800e362 <fsm_rtermreq+0x72>
	break;
 800e360:	bf00      	nop
    }

    fsm_sdata(f, TERMACK, id, NULL, 0);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	2300      	movs	r3, #0
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	2300      	movs	r3, #0
 800e36c:	2106      	movs	r1, #6
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 f9c2 	bl	800e6f8 <fsm_sdata>
}
 800e374:	bf00      	nop
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	0800dc99 	.word	0x0800dc99

0800e380 <fsm_rtermack>:


/*
 * fsm_rtermack - Receive Terminate-Ack.
 */
static void fsm_rtermack(fsm *f) {
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
    switch (f->state) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	7c1b      	ldrb	r3, [r3, #16]
 800e38c:	3b04      	subs	r3, #4
 800e38e:	2b05      	cmp	r3, #5
 800e390:	d848      	bhi.n	800e424 <fsm_rtermack+0xa4>
 800e392:	a201      	add	r2, pc, #4	; (adr r2, 800e398 <fsm_rtermack+0x18>)
 800e394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e398:	0800e3b1 	.word	0x0800e3b1
 800e39c:	0800e3d5 	.word	0x0800e3d5
 800e3a0:	0800e425 	.word	0x0800e425
 800e3a4:	0800e3f9 	.word	0x0800e3f9
 800e3a8:	0800e425 	.word	0x0800e425
 800e3ac:	0800e401 	.word	0x0800e401
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	4821      	ldr	r0, [pc, #132]	; (800e438 <fsm_rtermack+0xb8>)
 800e3b4:	f7ff f86a 	bl	800d48c <sys_untimeout>
	f->state = PPP_FSM_CLOSED;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d02f      	beq.n	800e428 <fsm_rtermack+0xa8>
	    (*f->callbacks->finished)(f);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	4798      	blx	r3
	break;
 800e3d2:	e029      	b.n	800e428 <fsm_rtermack+0xa8>
    case PPP_FSM_STOPPING:
	UNTIMEOUT(fsm_timeout, f);
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4818      	ldr	r0, [pc, #96]	; (800e438 <fsm_rtermack+0xb8>)
 800e3d8:	f7ff f858 	bl	800d48c <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d01f      	beq.n	800e42c <fsm_rtermack+0xac>
	    (*f->callbacks->finished)(f);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	4798      	blx	r3
	break;
 800e3f6:	e019      	b.n	800e42c <fsm_rtermack+0xac>

    case PPP_FSM_ACKRCVD:
	f->state = PPP_FSM_REQSENT;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2206      	movs	r2, #6
 800e3fc:	741a      	strb	r2, [r3, #16]
	break;
 800e3fe:	e016      	b.n	800e42e <fsm_rtermack+0xae>

    case PPP_FSM_OPENED:
	if (f->callbacks->down)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d004      	beq.n	800e414 <fsm_rtermack+0x94>
	    (*f->callbacks->down)(f);	/* Inform upper layers */
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	6a1b      	ldr	r3, [r3, #32]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	4798      	blx	r3
	fsm_sconfreq(f, 0);
 800e414:	2100      	movs	r1, #0
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f880 	bl	800e51c <fsm_sconfreq>
	f->state = PPP_FSM_REQSENT;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2206      	movs	r2, #6
 800e420:	741a      	strb	r2, [r3, #16]
	break;
 800e422:	e004      	b.n	800e42e <fsm_rtermack+0xae>
    default:
	break;
 800e424:	bf00      	nop
 800e426:	e002      	b.n	800e42e <fsm_rtermack+0xae>
	break;
 800e428:	bf00      	nop
 800e42a:	e000      	b.n	800e42e <fsm_rtermack+0xae>
	break;
 800e42c:	bf00      	nop
    }
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	0800dc99 	.word	0x0800dc99

0800e43c <fsm_rcoderej>:


/*
 * fsm_rcoderej - Receive an Code-Reject.
 */
static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
 800e43c:	b480      	push	{r7}
 800e43e:	b087      	sub	sp, #28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
    u_char code, id;

    if (len < HEADERLEN) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	dd11      	ble.n	800e472 <fsm_rcoderej+0x36>
	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
	return;
    }
    GETCHAR(code, inp);
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	60ba      	str	r2, [r7, #8]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	75fb      	strb	r3, [r7, #23]
    GETCHAR(id, inp);
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	60ba      	str	r2, [r7, #8]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	75bb      	strb	r3, [r7, #22]
    ppp_warn(("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id));

    if( f->state == PPP_FSM_ACKRCVD )
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	7c1b      	ldrb	r3, [r3, #16]
 800e466:	2b07      	cmp	r3, #7
 800e468:	d104      	bne.n	800e474 <fsm_rcoderej+0x38>
	f->state = PPP_FSM_REQSENT;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2206      	movs	r2, #6
 800e46e:	741a      	strb	r2, [r3, #16]
 800e470:	e000      	b.n	800e474 <fsm_rcoderej+0x38>
	return;
 800e472:	bf00      	nop
}
 800e474:	371c      	adds	r7, #28
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
	...

0800e480 <fsm_protreject>:
/*
 * fsm_protreject - Peer doesn't speak this protocol.
 *
 * Treat this as a catastrophic error (RXJ-).
 */
void fsm_protreject(fsm *f) {
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
    switch( f->state ){
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7c1b      	ldrb	r3, [r3, #16]
 800e48c:	3b02      	subs	r3, #2
 800e48e:	2b07      	cmp	r3, #7
 800e490:	d83e      	bhi.n	800e510 <fsm_protreject+0x90>
 800e492:	a201      	add	r2, pc, #4	; (adr r2, 800e498 <fsm_protreject+0x18>)
 800e494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e498:	0800e4c1 	.word	0x0800e4c1
 800e49c:	0800e4e5 	.word	0x0800e4e5
 800e4a0:	0800e4b9 	.word	0x0800e4b9
 800e4a4:	0800e4dd 	.word	0x0800e4dd
 800e4a8:	0800e4dd 	.word	0x0800e4dd
 800e4ac:	0800e4dd 	.word	0x0800e4dd
 800e4b0:	0800e4dd 	.word	0x0800e4dd
 800e4b4:	0800e501 	.word	0x0800e501
    case PPP_FSM_CLOSING:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	4817      	ldr	r0, [pc, #92]	; (800e518 <fsm_protreject+0x98>)
 800e4bc:	f7fe ffe6 	bl	800d48c <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_CLOSED:
	f->state = PPP_FSM_CLOSED;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d01c      	beq.n	800e50a <fsm_protreject+0x8a>
	    (*f->callbacks->finished)(f);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	4798      	blx	r3
	break;
 800e4da:	e016      	b.n	800e50a <fsm_protreject+0x8a>

    case PPP_FSM_STOPPING:
    case PPP_FSM_REQSENT:
    case PPP_FSM_ACKRCVD:
    case PPP_FSM_ACKSENT:
	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
 800e4dc:	6879      	ldr	r1, [r7, #4]
 800e4de:	480e      	ldr	r0, [pc, #56]	; (800e518 <fsm_protreject+0x98>)
 800e4e0:	f7fe ffd4 	bl	800d48c <sys_untimeout>
	/* fall through */
	/* no break */
    case PPP_FSM_STOPPED:
	f->state = PPP_FSM_STOPPED;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2203      	movs	r2, #3
 800e4e8:	741a      	strb	r2, [r3, #16]
	if( f->callbacks->finished )
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00c      	beq.n	800e50e <fsm_protreject+0x8e>
	    (*f->callbacks->finished)(f);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	4798      	blx	r3
	break;
 800e4fe:	e006      	b.n	800e50e <fsm_protreject+0x8e>

    case PPP_FSM_OPENED:
	terminate_layer(f, PPP_FSM_STOPPING);
 800e500:	2105      	movs	r1, #5
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff fb0e 	bl	800db24 <terminate_layer>
	break;
 800e508:	e002      	b.n	800e510 <fsm_protreject+0x90>
	break;
 800e50a:	bf00      	nop
 800e50c:	e000      	b.n	800e510 <fsm_protreject+0x90>
	break;
 800e50e:	bf00      	nop
    default:
	FSMDEBUG(("%s: Protocol-reject event in state %d!",
		  PROTO_NAME(f), f->state));
	/* no break */
    }
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	0800dc99 	.word	0x0800dc99

0800e51c <fsm_sconfreq>:


/*
 * fsm_sconfreq - Send a Configure-Request.
 */
static void fsm_sconfreq(fsm *f, int retransmit) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	617b      	str	r3, [r7, #20]
    struct pbuf *p;
    u_char *outp;
    int cilen;

    if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	7c1b      	ldrb	r3, [r3, #16]
 800e530:	2b06      	cmp	r3, #6
 800e532:	d017      	beq.n	800e564 <fsm_sconfreq+0x48>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7c1b      	ldrb	r3, [r3, #16]
 800e538:	2b07      	cmp	r3, #7
 800e53a:	d013      	beq.n	800e564 <fsm_sconfreq+0x48>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	7c1b      	ldrb	r3, [r3, #16]
 800e540:	2b08      	cmp	r3, #8
 800e542:	d00f      	beq.n	800e564 <fsm_sconfreq+0x48>
	/* Not currently negotiating - reset options */
	if( f->callbacks->resetci )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d004      	beq.n	800e558 <fsm_sconfreq+0x3c>
	    (*f->callbacks->resetci)(f);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	4798      	blx	r3
	f->nakloops = 0;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	755a      	strb	r2, [r3, #21]
	f->rnakloops = 0;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	759a      	strb	r2, [r3, #22]
    }

    if( !retransmit ){
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10d      	bne.n	800e586 <fsm_sconfreq+0x6a>
	/* New request - reset retransmission counter, use new ID */
	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	7bda      	ldrb	r2, [r3, #15]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	751a      	strb	r2, [r3, #20]
	f->reqid = ++f->id;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7c9b      	ldrb	r3, [r3, #18]
 800e576:	3301      	adds	r3, #1
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	749a      	strb	r2, [r3, #18]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	7c9a      	ldrb	r2, [r3, #18]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	74da      	strb	r2, [r3, #19]
    }

    f->seen_ack = 0;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	731a      	strb	r2, [r3, #12]

    /*
     * Make up the request packet
     */
    if( f->callbacks->cilen && f->callbacks->addci ){
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d018      	beq.n	800e5c8 <fsm_sconfreq+0xac>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d013      	beq.n	800e5c8 <fsm_sconfreq+0xac>
	cilen = (*f->callbacks->cilen)(f);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	4798      	blx	r3
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e5b4:	1f1a      	subs	r2, r3, #4
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	da07      	bge.n	800e5cc <fsm_sconfreq+0xb0>
	    cilen = pcb->peer_mru - HEADERLEN;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e5c2:	3b04      	subs	r3, #4
 800e5c4:	60bb      	str	r3, [r7, #8]
	if( cilen > pcb->peer_mru - HEADERLEN )
 800e5c6:	e001      	b.n	800e5cc <fsm_sconfreq+0xb0>
    } else
	cilen = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	60bb      	str	r3, [r7, #8]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PBUF_RAM);
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5d8:	4619      	mov	r1, r3
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7f7 fb18 	bl	8005c10 <pbuf_alloc>
 800e5e0:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d07a      	beq.n	800e6de <fsm_sconfreq+0x1c2>
        return;
    if(p->tot_len != p->len) {
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	891a      	ldrh	r2, [r3, #8]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	895b      	ldrh	r3, [r3, #10]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d003      	beq.n	800e5fc <fsm_sconfreq+0xe0>
        pbuf_free(p);
 800e5f4:	6938      	ldr	r0, [r7, #16]
 800e5f6:	f7f7 fd75 	bl	80060e4 <pbuf_free>
        return;
 800e5fa:	e071      	b.n	800e6e0 <fsm_sconfreq+0x1c4>
    }

    /* send the request to our peer */
    outp = (u_char*)p->payload;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, f->protocol);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	60fa      	str	r2, [r7, #12]
 800e608:	22ff      	movs	r2, #255	; 0xff
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	60fa      	str	r2, [r7, #12]
 800e612:	2203      	movs	r2, #3
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	60fa      	str	r2, [r7, #12]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	89d2      	ldrh	r2, [r2, #14]
 800e620:	0a12      	lsrs	r2, r2, #8
 800e622:	b292      	uxth	r2, r2
 800e624:	b2d2      	uxtb	r2, r2
 800e626:	701a      	strb	r2, [r3, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	60fa      	str	r2, [r7, #12]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	89d2      	ldrh	r2, [r2, #14]
 800e632:	b2d2      	uxtb	r2, r2
 800e634:	701a      	strb	r2, [r3, #0]
    PUTCHAR(CONFREQ, outp);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	60fa      	str	r2, [r7, #12]
 800e63c:	2201      	movs	r2, #1
 800e63e:	701a      	strb	r2, [r3, #0]
    PUTCHAR(f->reqid, outp);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	60fa      	str	r2, [r7, #12]
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	7cd2      	ldrb	r2, [r2, #19]
 800e64a:	701a      	strb	r2, [r3, #0]
    PUTSHORT(cilen + HEADERLEN, outp);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	60fa      	str	r2, [r7, #12]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	3204      	adds	r2, #4
 800e656:	1212      	asrs	r2, r2, #8
 800e658:	b2d2      	uxtb	r2, r2
 800e65a:	701a      	strb	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	60fa      	str	r2, [r7, #12]
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	3204      	adds	r2, #4
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	701a      	strb	r2, [r3, #0]
    if (cilen != 0) {
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d01a      	beq.n	800e6a8 <fsm_sconfreq+0x18c>
	(*f->callbacks->addci)(f, outp, &cilen);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f107 0208 	add.w	r2, r7, #8
 800e67c:	68f9      	ldr	r1, [r7, #12]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	4798      	blx	r3
	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	895b      	ldrh	r3, [r3, #10]
 800e686:	f1a3 0208 	sub.w	r2, r3, #8
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d00b      	beq.n	800e6a8 <fsm_sconfreq+0x18c>
 800e690:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <fsm_sconfreq+0x1cc>)
 800e692:	f240 22f2 	movw	r2, #754	; 0x2f2
 800e696:	4915      	ldr	r1, [pc, #84]	; (800e6ec <fsm_sconfreq+0x1d0>)
 800e698:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <fsm_sconfreq+0x1d4>)
 800e69a:	f005 fa39 	bl	8013b10 <iprintf>
 800e69e:	2000      	movs	r0, #0
 800e6a0:	f005 fb38 	bl	8013d14 <fflush>
 800e6a4:	f005 fa7d 	bl	8013ba2 <abort>
    }

    ppp_write(pcb, p);
 800e6a8:	6939      	ldr	r1, [r7, #16]
 800e6aa:	6978      	ldr	r0, [r7, #20]
 800e6ac:	f003 fe68 	bl	8012380 <ppp_write>

    /* start the retransmit timer */
    --f->retransmits;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	7d1b      	ldrb	r3, [r3, #20]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	751a      	strb	r2, [r3, #20]
    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
 800e6bc:	6879      	ldr	r1, [r7, #4]
 800e6be:	480d      	ldr	r0, [pc, #52]	; (800e6f4 <fsm_sconfreq+0x1d8>)
 800e6c0:	f7fe fee4 	bl	800d48c <sys_untimeout>
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	7b9b      	ldrb	r3, [r3, #14]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6ce:	fb03 f302 	mul.w	r3, r3, r2
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	4907      	ldr	r1, [pc, #28]	; (800e6f4 <fsm_sconfreq+0x1d8>)
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe feac 	bl	800d434 <sys_timeout>
 800e6dc:	e000      	b.n	800e6e0 <fsm_sconfreq+0x1c4>
        return;
 800e6de:	bf00      	nop
}
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08017830 	.word	0x08017830
 800e6ec:	08017854 	.word	0x08017854
 800e6f0:	08017880 	.word	0x08017880
 800e6f4:	0800dc99 	.word	0x0800dc99

0800e6f8 <fsm_sdata>:
/*
 * fsm_sdata - Send some data.
 *
 * Used for all packets sent to our peer by this module.
 */
void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b088      	sub	sp, #32
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	607b      	str	r3, [r7, #4]
 800e702:	460b      	mov	r3, r1
 800e704:	72fb      	strb	r3, [r7, #11]
 800e706:	4613      	mov	r3, r2
 800e708:	72bb      	strb	r3, [r7, #10]
    ppp_pcb *pcb = f->pcb;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	61fb      	str	r3, [r7, #28]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    /* Adjust length to be smaller than MTU */
    if (datalen > pcb->peer_mru - HEADERLEN)
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e716:	1f1a      	subs	r2, r3, #4
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	429a      	cmp	r2, r3
 800e71c:	da04      	bge.n	800e728 <fsm_sdata+0x30>
	datalen = pcb->peer_mru - HEADERLEN;
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800e724:	3b04      	subs	r3, #4
 800e726:	62bb      	str	r3, [r7, #40]	; 0x28
    outlen = datalen + HEADERLEN;
 800e728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72a:	3304      	adds	r3, #4
 800e72c:	61bb      	str	r3, [r7, #24]

    p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PBUF_RAM);
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	b29b      	uxth	r3, r3
 800e732:	3304      	adds	r3, #4
 800e734:	b29b      	uxth	r3, r3
 800e736:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e73a:	4619      	mov	r1, r3
 800e73c:	2000      	movs	r0, #0
 800e73e:	f7f7 fa67 	bl	8005c10 <pbuf_alloc>
 800e742:	6178      	str	r0, [r7, #20]
    if(NULL == p)
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d04f      	beq.n	800e7ea <fsm_sdata+0xf2>
        return;
    if(p->tot_len != p->len) {
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	891a      	ldrh	r2, [r3, #8]
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	895b      	ldrh	r3, [r3, #10]
 800e752:	429a      	cmp	r2, r3
 800e754:	d003      	beq.n	800e75e <fsm_sdata+0x66>
        pbuf_free(p);
 800e756:	6978      	ldr	r0, [r7, #20]
 800e758:	f7f7 fcc4 	bl	80060e4 <pbuf_free>
        return;
 800e75c:	e046      	b.n	800e7ec <fsm_sdata+0xf4>
    }

    outp = (u_char*)p->payload;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	613b      	str	r3, [r7, #16]
    if (datalen && data != NULL) { /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	2b00      	cmp	r3, #0
 800e768:	d009      	beq.n	800e77e <fsm_sdata+0x86>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d006      	beq.n	800e77e <fsm_sdata+0x86>
      MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	3308      	adds	r3, #8
 800e774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	f005 fbcb 	bl	8013f14 <memcpy>
    }
    MAKEHEADER(outp, f->protocol);
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	1c5a      	adds	r2, r3, #1
 800e782:	613a      	str	r2, [r7, #16]
 800e784:	22ff      	movs	r2, #255	; 0xff
 800e786:	701a      	strb	r2, [r3, #0]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	613a      	str	r2, [r7, #16]
 800e78e:	2203      	movs	r2, #3
 800e790:	701a      	strb	r2, [r3, #0]
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	1c5a      	adds	r2, r3, #1
 800e796:	613a      	str	r2, [r7, #16]
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	89d2      	ldrh	r2, [r2, #14]
 800e79c:	0a12      	lsrs	r2, r2, #8
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	b2d2      	uxtb	r2, r2
 800e7a2:	701a      	strb	r2, [r3, #0]
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	613a      	str	r2, [r7, #16]
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	89d2      	ldrh	r2, [r2, #14]
 800e7ae:	b2d2      	uxtb	r2, r2
 800e7b0:	701a      	strb	r2, [r3, #0]
    PUTCHAR(code, outp);
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	1c5a      	adds	r2, r3, #1
 800e7b6:	613a      	str	r2, [r7, #16]
 800e7b8:	7afa      	ldrb	r2, [r7, #11]
 800e7ba:	701a      	strb	r2, [r3, #0]
    PUTCHAR(id, outp);
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	1c5a      	adds	r2, r3, #1
 800e7c0:	613a      	str	r2, [r7, #16]
 800e7c2:	7aba      	ldrb	r2, [r7, #10]
 800e7c4:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	1c5a      	adds	r2, r3, #1
 800e7ca:	613a      	str	r2, [r7, #16]
 800e7cc:	69ba      	ldr	r2, [r7, #24]
 800e7ce:	1212      	asrs	r2, r2, #8
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	1c5a      	adds	r2, r3, #1
 800e7d8:	613a      	str	r2, [r7, #16]
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	701a      	strb	r2, [r3, #0]
    ppp_write(pcb, p);
 800e7e0:	6979      	ldr	r1, [r7, #20]
 800e7e2:	69f8      	ldr	r0, [r7, #28]
 800e7e4:	f003 fdcc 	bl	8012380 <ppp_write>
 800e7e8:	e000      	b.n	800e7ec <fsm_sdata+0xf4>
        return;
 800e7ea:	bf00      	nop
}
 800e7ec:	3720      	adds	r7, #32
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
	...

0800e7f4 <ipcp_init>:
#endif /* PPP_OPTIONS */

/*
 * ipcp_init - Initialize IPCP.
 */
static void ipcp_init(ppp_pcb *pcb) {
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	33f8      	adds	r3, #248	; 0xf8
 800e800:	617b      	str	r3, [r7, #20]

    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e808:	613b      	str	r3, [r7, #16]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e810:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_IPCP;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f248 0221 	movw	r2, #32801	; 0x8021
 800e81e:	81da      	strh	r2, [r3, #14]
    f->callbacks = &ipcp_callbacks;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	4a15      	ldr	r2, [pc, #84]	; (800e878 <ipcp_init+0x84>)
 800e824:	605a      	str	r2, [r3, #4]
    fsm_init(f);
 800e826:	6978      	ldr	r0, [r7, #20]
 800e828:	f7ff f88c 	bl	800d944 <fsm_init>
     * Some 3G modems use repeated IPCP NAKs as a way of stalling
     * until they can contact a server on the network, so we increase
     * the default number of NAKs we accept before we start treating
     * them as rejects.
     */
    f->maxnakloops = 100;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2264      	movs	r2, #100	; 0x64
 800e830:	75da      	strb	r2, [r3, #23]
#if 0 /* Not necessary, everything is cleared in ppp_new() */
    memset(wo, 0, sizeof(*wo));
    memset(ao, 0, sizeof(*ao));
#endif /* 0 */

    wo->neg_addr = wo->old_addrs = 1;
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	7813      	ldrb	r3, [r2, #0]
 800e836:	f043 0302 	orr.w	r3, r3, #2
 800e83a:	7013      	strb	r3, [r2, #0]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e844:	b2d9      	uxtb	r1, r3
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	7813      	ldrb	r3, [r2, #0]
 800e84a:	f361 0300 	bfi	r3, r1, #0, #1
 800e84e:	7013      	strb	r3, [r2, #0]
#if 0 /* UNUSED */
    /* wanting default route by default */
    wo->default_route = 1;
#endif /* UNUSED */

    ao->neg_addr = ao->old_addrs = 1;
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	7813      	ldrb	r3, [r2, #0]
 800e854:	f043 0302 	orr.w	r3, r3, #2
 800e858:	7013      	strb	r3, [r2, #0]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e862:	b2d9      	uxtb	r1, r3
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	7813      	ldrb	r3, [r2, #0]
 800e868:	f361 0300 	bfi	r3, r1, #0, #1
 800e86c:	7013      	strb	r3, [r2, #0]
     * and defaultroute options.
     */
    ao->proxy_arp = 1;
    ao->default_route = 1;
#endif /* UNUSED */
}
 800e86e:	bf00      	nop
 800e870:	3718      	adds	r7, #24
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	08017c3c 	.word	0x08017c3c

0800e87c <ipcp_open>:


/*
 * ipcp_open - IPCP is allowed to come up.
 */
static void ipcp_open(ppp_pcb *pcb) {
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	33f8      	adds	r3, #248	; 0xf8
 800e888:	60fb      	str	r3, [r7, #12]
    fsm_open(f);
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f7ff f8f0 	bl	800da70 <fsm_open>
    pcb->ipcp_is_open = 1;
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800e896:	f043 0302 	orr.w	r3, r3, #2
 800e89a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
}
 800e89e:	bf00      	nop
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <ipcp_close>:


/*
 * ipcp_close - Take IPCP down.
 */
static void ipcp_close(ppp_pcb *pcb, const char *reason) {
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b084      	sub	sp, #16
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->ipcp_fsm;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	33f8      	adds	r3, #248	; 0xf8
 800e8b4:	60fb      	str	r3, [r7, #12]
    fsm_close(f, reason);
 800e8b6:	6839      	ldr	r1, [r7, #0]
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f7ff f9a1 	bl	800dc00 <fsm_close>
}
 800e8be:	bf00      	nop
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <ipcp_lowerup>:


/*
 * ipcp_lowerup - The lower layer is up.
 */
static void ipcp_lowerup(ppp_pcb *pcb) {
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	33f8      	adds	r3, #248	; 0xf8
 800e8d2:	60fb      	str	r3, [r7, #12]
    fsm_lowerup(f);
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff f852 	bl	800d97e <fsm_lowerup>
}
 800e8da:	bf00      	nop
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <ipcp_lowerdown>:


/*
 * ipcp_lowerdown - The lower layer is down.
 */
static void ipcp_lowerdown(ppp_pcb *pcb) {
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b084      	sub	sp, #16
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	33f8      	adds	r3, #248	; 0xf8
 800e8ee:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f7ff f869 	bl	800d9c8 <fsm_lowerdown>
}
 800e8f6:	bf00      	nop
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <ipcp_input>:


/*
 * ipcp_input - Input IPCP packet.
 */
static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b086      	sub	sp, #24
 800e902:	af00      	add	r7, sp, #0
 800e904:	60f8      	str	r0, [r7, #12]
 800e906:	60b9      	str	r1, [r7, #8]
 800e908:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	33f8      	adds	r3, #248	; 0xf8
 800e90e:	617b      	str	r3, [r7, #20]
    fsm_input(f, p, len);
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	6978      	ldr	r0, [r7, #20]
 800e916:	f7ff fa57 	bl	800ddc8 <fsm_input>
}
 800e91a:	bf00      	nop
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <ipcp_protrej>:
/*
 * ipcp_protrej - A Protocol-Reject was received for IPCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
static void ipcp_protrej(ppp_pcb *pcb) {
 800e922:	b580      	push	{r7, lr}
 800e924:	b084      	sub	sp, #16
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->ipcp_fsm;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	33f8      	adds	r3, #248	; 0xf8
 800e92e:	60fb      	str	r3, [r7, #12]
    fsm_lowerdown(f);
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f7ff f849 	bl	800d9c8 <fsm_lowerdown>
}
 800e936:	bf00      	nop
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <ipcp_resetci>:

/*
 * ipcp_resetci - Reset our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_resetci(fsm *f) {
 800e93e:	b580      	push	{r7, lr}
 800e940:	b086      	sub	sp, #24
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800e952:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e95a:	60fb      	str	r3, [r7, #12]
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e962:	60bb      	str	r3, [r7, #8]

    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0301 	and.w	r3, r3, #1
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <ipcp_resetci+0x42>
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00f      	beq.n	800e9a0 <ipcp_resetci+0x62>
	(ao->neg_addr || ao->old_addrs);
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	b2db      	uxtb	r3, r3
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <ipcp_resetci+0x5e>
	(ao->neg_addr || ao->old_addrs);
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	b2db      	uxtb	r3, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <ipcp_resetci+0x62>
    wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
 800e99c:	2301      	movs	r3, #1
 800e99e:	e000      	b.n	800e9a2 <ipcp_resetci+0x64>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	f003 0301 	and.w	r3, r3, #1
 800e9a8:	b2d9      	uxtb	r1, r3
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	7813      	ldrb	r3, [r2, #0]
 800e9ae:	f361 0382 	bfi	r3, r1, #2, #1
 800e9b2:	7013      	strb	r3, [r2, #0]
    if (wo->ouraddr == 0)
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d104      	bne.n	800e9c6 <ipcp_resetci+0x88>
	wo->accept_local = 1;
 800e9bc:	693a      	ldr	r2, [r7, #16]
 800e9be:	7813      	ldrb	r3, [r2, #0]
 800e9c0:	f043 0308 	orr.w	r3, r3, #8
 800e9c4:	7013      	strb	r3, [r2, #0]
    if (wo->hisaddr == 0)
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d104      	bne.n	800e9d8 <ipcp_resetci+0x9a>
	wo->accept_remote = 1;
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	7813      	ldrb	r3, [r2, #0]
 800e9d2:	f043 0310 	orr.w	r3, r3, #16
 800e9d6:	7013      	strb	r3, [r2, #0]
#if LWIP_DNS
    wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
#endif /* LWIP_DNS */
    *go = *wo;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (!pcb->ask_for_local)
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e9e8:	f003 0301 	and.w	r3, r3, #1
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d102      	bne.n	800e9f8 <ipcp_resetci+0xba>
	go->ouraddr = 0;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	605a      	str	r2, [r3, #4]
	if (wo->hisaddr) {
	    wo->accept_remote = 0;
	}
    }
#endif /* UNUSED */
    BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800e9fe:	220c      	movs	r2, #12
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f005 faab 	bl	8013f5e <memset>
}
 800ea08:	bf00      	nop
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <ipcp_cilen>:

/*
 * ipcp_cilen - Return length of our CI.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static int ipcp_cilen(fsm *f) {
 800ea10:	b480      	push	{r7}
 800ea12:	b087      	sub	sp, #28
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	617b      	str	r3, [r7, #20]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ea24:	613b      	str	r3, [r7, #16]
#if VJ_SUPPORT
    ipcp_options *wo = &pcb->ipcp_wantoptions;
#endif /* VJ_SUPPORT */
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ea2c:	60fb      	str	r3, [r7, #12]

    /*
     * First see if we want to change our options to the old
     * forms because we have received old forms from the peer.
     */
    if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d019      	beq.n	800ea70 <ipcp_cilen+0x60>
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d012      	beq.n	800ea70 <ipcp_cilen+0x60>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10b      	bne.n	800ea70 <ipcp_cilen+0x60>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 0302 	and.w	r3, r3, #2
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d004      	beq.n	800ea70 <ipcp_cilen+0x60>
	go->neg_addr = 0;
 800ea66:	693a      	ldr	r2, [r7, #16]
 800ea68:	7813      	ldrb	r3, [r2, #0]
 800ea6a:	f36f 0300 	bfc	r3, #0, #1
 800ea6e:	7013      	strb	r3, [r2, #0]
	    go->vj_protocol = ho->vj_protocol;
	}
    }
#endif /* VJ_SUPPORT */

    return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d108      	bne.n	800ea90 <ipcp_cilen+0x80>
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0302 	and.w	r3, r3, #2
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d001      	beq.n	800ea90 <ipcp_cilen+0x80>
 800ea8c:	220a      	movs	r2, #10
 800ea8e:	e000      	b.n	800ea92 <ipcp_cilen+0x82>
 800ea90:	2200      	movs	r2, #0
#if VJ_SUPPORT
	    LENCIVJ(go->neg_vj, go->old_vj) +
#endif /* VJ_SUPPORT */
	    LENCIADDR(go->neg_addr) +
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <ipcp_cilen+0x94>
 800eaa0:	2306      	movs	r3, #6
 800eaa2:	e000      	b.n	800eaa6 <ipcp_cilen+0x96>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4413      	add	r3, r2
#if 0 /* UNUSED - WINS */
	    LENCIWINS(go->winsaddr[0]) +
	    LENCIWINS(go->winsaddr[1]) +
#endif /* UNUSED - WINS */
	    0);
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	371c      	adds	r7, #28
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <ipcp_addci>:

/*
 * ipcp_addci - Add our desired CIs to a packet.
 * Called by fsm_sconfreq, Send Configure Request.
 */
static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08a      	sub	sp, #40	; 0x28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	623b      	str	r3, [r7, #32]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800eac6:	6a3b      	ldr	r3, [r7, #32]
 800eac8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800eacc:	61fb      	str	r3, [r7, #28]
    int len = *lenp;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
	} else \
	    addr = 0; \
    }
#endif /* UNUSED - WINS */

    ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	f003 0301 	and.w	r3, r3, #1
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d15e      	bne.n	800eba0 <ipcp_addci+0xec>
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d057      	beq.n	800eba0 <ipcp_addci+0xec>
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf2:	2b09      	cmp	r3, #9
 800eaf4:	dd4f      	ble.n	800eb96 <ipcp_addci+0xe2>
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	60ba      	str	r2, [r7, #8]
 800eafc:	2201      	movs	r2, #1
 800eafe:	701a      	strb	r2, [r3, #0]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	60ba      	str	r2, [r7, #8]
 800eb06:	220a      	movs	r2, #10
 800eb08:	701a      	strb	r2, [r3, #0]
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7f5 f9eb 	bl	8003eea <lwip_htonl>
 800eb14:	61b8      	str	r0, [r7, #24]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	60ba      	str	r2, [r7, #8]
 800eb1c:	69ba      	ldr	r2, [r7, #24]
 800eb1e:	0e12      	lsrs	r2, r2, #24
 800eb20:	b2d2      	uxtb	r2, r2
 800eb22:	701a      	strb	r2, [r3, #0]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	60ba      	str	r2, [r7, #8]
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	0c12      	lsrs	r2, r2, #16
 800eb2e:	b2d2      	uxtb	r2, r2
 800eb30:	701a      	strb	r2, [r3, #0]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	60ba      	str	r2, [r7, #8]
 800eb38:	69ba      	ldr	r2, [r7, #24]
 800eb3a:	0a12      	lsrs	r2, r2, #8
 800eb3c:	b2d2      	uxtb	r2, r2
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	1c5a      	adds	r2, r3, #1
 800eb44:	60ba      	str	r2, [r7, #8]
 800eb46:	69ba      	ldr	r2, [r7, #24]
 800eb48:	b2d2      	uxtb	r2, r2
 800eb4a:	701a      	strb	r2, [r3, #0]
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f5 f9ca 	bl	8003eea <lwip_htonl>
 800eb56:	61b8      	str	r0, [r7, #24]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	60ba      	str	r2, [r7, #8]
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	0e12      	lsrs	r2, r2, #24
 800eb62:	b2d2      	uxtb	r2, r2
 800eb64:	701a      	strb	r2, [r3, #0]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	1c5a      	adds	r2, r3, #1
 800eb6a:	60ba      	str	r2, [r7, #8]
 800eb6c:	69ba      	ldr	r2, [r7, #24]
 800eb6e:	0c12      	lsrs	r2, r2, #16
 800eb70:	b2d2      	uxtb	r2, r2
 800eb72:	701a      	strb	r2, [r3, #0]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	1c5a      	adds	r2, r3, #1
 800eb78:	60ba      	str	r2, [r7, #8]
 800eb7a:	69ba      	ldr	r2, [r7, #24]
 800eb7c:	0a12      	lsrs	r2, r2, #8
 800eb7e:	b2d2      	uxtb	r2, r2
 800eb80:	701a      	strb	r2, [r3, #0]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	60ba      	str	r2, [r7, #8]
 800eb88:	69ba      	ldr	r2, [r7, #24]
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	701a      	strb	r2, [r3, #0]
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb90:	3b0a      	subs	r3, #10
 800eb92:	627b      	str	r3, [r7, #36]	; 0x24
 800eb94:	e004      	b.n	800eba0 <ipcp_addci+0xec>
 800eb96:	69fa      	ldr	r2, [r7, #28]
 800eb98:	7813      	ldrb	r3, [r2, #0]
 800eb9a:	f36f 0341 	bfc	r3, #1, #1
 800eb9e:	7013      	strb	r3, [r2, #0]
#if VJ_SUPPORT
    ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	f003 0301 	and.w	r3, r3, #1
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d036      	beq.n	800ec1c <ipcp_addci+0x168>
 800ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb0:	2b05      	cmp	r3, #5
 800ebb2:	dd2e      	ble.n	800ec12 <ipcp_addci+0x15e>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	60ba      	str	r2, [r7, #8]
 800ebba:	2203      	movs	r2, #3
 800ebbc:	701a      	strb	r2, [r3, #0]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	60ba      	str	r2, [r7, #8]
 800ebc4:	2206      	movs	r2, #6
 800ebc6:	701a      	strb	r2, [r3, #0]
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7f5 f98c 	bl	8003eea <lwip_htonl>
 800ebd2:	6178      	str	r0, [r7, #20]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	1c5a      	adds	r2, r3, #1
 800ebd8:	60ba      	str	r2, [r7, #8]
 800ebda:	697a      	ldr	r2, [r7, #20]
 800ebdc:	0e12      	lsrs	r2, r2, #24
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	701a      	strb	r2, [r3, #0]
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	60ba      	str	r2, [r7, #8]
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	0c12      	lsrs	r2, r2, #16
 800ebec:	b2d2      	uxtb	r2, r2
 800ebee:	701a      	strb	r2, [r3, #0]
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	60ba      	str	r2, [r7, #8]
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	0a12      	lsrs	r2, r2, #8
 800ebfa:	b2d2      	uxtb	r2, r2
 800ebfc:	701a      	strb	r2, [r3, #0]
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	60ba      	str	r2, [r7, #8]
 800ec04:	697a      	ldr	r2, [r7, #20]
 800ec06:	b2d2      	uxtb	r2, r2
 800ec08:	701a      	strb	r2, [r3, #0]
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	3b06      	subs	r3, #6
 800ec0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec10:	e004      	b.n	800ec1c <ipcp_addci+0x168>
 800ec12:	69fa      	ldr	r2, [r7, #28]
 800ec14:	7813      	ldrb	r3, [r2, #0]
 800ec16:	f36f 0300 	bfc	r3, #0, #1
 800ec1a:	7013      	strb	r3, [r2, #0]
    ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);

    ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
#endif /* UNUSED - WINS */
    
    *lenp -= len;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec22:	1ad2      	subs	r2, r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	601a      	str	r2, [r3, #0]
}
 800ec28:	bf00      	nop
 800ec2a:	3728      	adds	r7, #40	; 0x28
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <ipcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int ipcp_ackci(fsm *f, u_char *p, int len) {
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	627b      	str	r3, [r7, #36]	; 0x24
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ec42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec44:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ec48:	623b      	str	r3, [r7, #32]
	if (addr != cilong) \
	    goto bad; \
    }
#endif /* UNUSED - WINS */

    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d179      	bne.n	800ed4c <ipcp_ackci+0x11c>
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d072      	beq.n	800ed4c <ipcp_ackci+0x11c>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3b0a      	subs	r3, #10
 800ec6a:	607b      	str	r3, [r7, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f2c0 80bb 	blt.w	800edea <ipcp_ackci+0x1ba>
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	60ba      	str	r2, [r7, #8]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	83fb      	strh	r3, [r7, #30]
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	1c5a      	adds	r2, r3, #1
 800ec82:	60ba      	str	r2, [r7, #8]
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	83bb      	strh	r3, [r7, #28]
 800ec88:	8bbb      	ldrh	r3, [r7, #28]
 800ec8a:	2b0a      	cmp	r3, #10
 800ec8c:	f040 80b8 	bne.w	800ee00 <ipcp_ackci+0x1d0>
 800ec90:	8bfb      	ldrh	r3, [r7, #30]
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	f040 80b4 	bne.w	800ee00 <ipcp_ackci+0x1d0>
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	60ba      	str	r2, [r7, #8]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	021b      	lsls	r3, r3, #8
 800eca2:	61bb      	str	r3, [r7, #24]
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	1c5a      	adds	r2, r3, #1
 800eca8:	60ba      	str	r2, [r7, #8]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	461a      	mov	r2, r3
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	61bb      	str	r3, [r7, #24]
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	021b      	lsls	r3, r3, #8
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	60ba      	str	r2, [r7, #8]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	61bb      	str	r3, [r7, #24]
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	021b      	lsls	r3, r3, #8
 800ecce:	61bb      	str	r3, [r7, #24]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	60ba      	str	r2, [r7, #8]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	61bb      	str	r3, [r7, #24]
 800ece0:	69b8      	ldr	r0, [r7, #24]
 800ece2:	f7f5 f902 	bl	8003eea <lwip_htonl>
 800ece6:	6178      	str	r0, [r7, #20]
 800ece8:	6a3b      	ldr	r3, [r7, #32]
 800ecea:	685a      	ldr	r2, [r3, #4]
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d17d      	bne.n	800edee <ipcp_ackci+0x1be>
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	60ba      	str	r2, [r7, #8]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	021b      	lsls	r3, r3, #8
 800ecfc:	61bb      	str	r3, [r7, #24]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	1c5a      	adds	r2, r3, #1
 800ed02:	60ba      	str	r2, [r7, #8]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	61bb      	str	r3, [r7, #24]
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	021b      	lsls	r3, r3, #8
 800ed12:	61bb      	str	r3, [r7, #24]
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	60ba      	str	r2, [r7, #8]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	61bb      	str	r3, [r7, #24]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	61bb      	str	r3, [r7, #24]
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	1c5a      	adds	r2, r3, #1
 800ed2e:	60ba      	str	r2, [r7, #8]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	61bb      	str	r3, [r7, #24]
 800ed3a:	69b8      	ldr	r0, [r7, #24]
 800ed3c:	f7f5 f8d5 	bl	8003eea <lwip_htonl>
 800ed40:	6178      	str	r0, [r7, #20]
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	689a      	ldr	r2, [r3, #8]
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d152      	bne.n	800edf2 <ipcp_ackci+0x1c2>
#if VJ_SUPPORT
    ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0301 	and.w	r3, r3, #1
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d042      	beq.n	800ede0 <ipcp_ackci+0x1b0>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3b06      	subs	r3, #6
 800ed5e:	607b      	str	r3, [r7, #4]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	db47      	blt.n	800edf6 <ipcp_ackci+0x1c6>
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	60ba      	str	r2, [r7, #8]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	83fb      	strh	r3, [r7, #30]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	60ba      	str	r2, [r7, #8]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	83bb      	strh	r3, [r7, #28]
 800ed7a:	8bbb      	ldrh	r3, [r7, #28]
 800ed7c:	2b06      	cmp	r3, #6
 800ed7e:	d13f      	bne.n	800ee00 <ipcp_ackci+0x1d0>
 800ed80:	8bfb      	ldrh	r3, [r7, #30]
 800ed82:	2b03      	cmp	r3, #3
 800ed84:	d13c      	bne.n	800ee00 <ipcp_ackci+0x1d0>
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	60ba      	str	r2, [r7, #8]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	021b      	lsls	r3, r3, #8
 800ed90:	613b      	str	r3, [r7, #16]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	60ba      	str	r2, [r7, #8]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	613b      	str	r3, [r7, #16]
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	021b      	lsls	r3, r3, #8
 800eda6:	613b      	str	r3, [r7, #16]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	60ba      	str	r2, [r7, #8]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	461a      	mov	r2, r3
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	021b      	lsls	r3, r3, #8
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	1c5a      	adds	r2, r3, #1
 800edc2:	60ba      	str	r2, [r7, #8]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	4313      	orrs	r3, r2
 800edcc:	613b      	str	r3, [r7, #16]
 800edce:	6938      	ldr	r0, [r7, #16]
 800edd0:	f7f5 f88b 	bl	8003eea <lwip_htonl>
 800edd4:	6178      	str	r0, [r7, #20]
 800edd6:	6a3b      	ldr	r3, [r7, #32]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d10c      	bne.n	800edfa <ipcp_ackci+0x1ca>
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10b      	bne.n	800edfe <ipcp_ackci+0x1ce>
	goto bad;
    return (1);
 800ede6:	2301      	movs	r3, #1
 800ede8:	e00b      	b.n	800ee02 <ipcp_ackci+0x1d2>
    ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
 800edea:	bf00      	nop
 800edec:	e008      	b.n	800ee00 <ipcp_ackci+0x1d0>
 800edee:	bf00      	nop
 800edf0:	e006      	b.n	800ee00 <ipcp_ackci+0x1d0>
 800edf2:	bf00      	nop
 800edf4:	e004      	b.n	800ee00 <ipcp_ackci+0x1d0>
    ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
 800edf6:	bf00      	nop
 800edf8:	e002      	b.n	800ee00 <ipcp_ackci+0x1d0>
 800edfa:	bf00      	nop
 800edfc:	e000      	b.n	800ee00 <ipcp_ackci+0x1d0>
	goto bad;
 800edfe:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
    return (0);
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3728      	adds	r7, #40	; 0x28
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <ipcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 800ee0a:	b590      	push	{r4, r7, lr}
 800ee0c:	b093      	sub	sp, #76	; 0x4c
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	60f8      	str	r0, [r7, #12]
 800ee12:	60b9      	str	r1, [r7, #8]
 800ee14:	607a      	str	r2, [r7, #4]
 800ee16:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	647b      	str	r3, [r7, #68]	; 0x44
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800ee1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee20:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800ee24:	643b      	str	r3, [r7, #64]	; 0x40
    u32_t cidnsaddr;
#endif /* LWIP_DNS */
    ipcp_options no;		/* options we've seen Naks for */
    ipcp_options try_;		/* options to request next time */

    BZERO(&no, sizeof(no));
 800ee26:	f107 031c 	add.w	r3, r7, #28
 800ee2a:	220c      	movs	r2, #12
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f005 f895 	bl	8013f5e <memset>
    try_ = *go;
 800ee34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee36:	f107 0310 	add.w	r3, r7, #16
 800ee3a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*
     * Accept the peer's idea of {our,his} address, if different
     * from our idea, only if the accept_{local,remote} flag is set.
     */
    NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800ee40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f040 8096 	bne.w	800ef7c <ipcp_nakci+0x172>
 800ee50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0302 	and.w	r3, r3, #2
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f000 808e 	beq.w	800ef7c <ipcp_nakci+0x172>
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	785b      	ldrb	r3, [r3, #1]
 800ee64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ee68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee6c:	2b0a      	cmp	r3, #10
 800ee6e:	f040 8085 	bne.w	800ef7c <ipcp_nakci+0x172>
 800ee72:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	dc7f      	bgt.n	800ef7c <ipcp_nakci+0x172>
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d17b      	bne.n	800ef7c <ipcp_nakci+0x172>
 800ee84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	607b      	str	r3, [r7, #4]
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3302      	adds	r3, #2
 800ee92:	60bb      	str	r3, [r7, #8]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	60ba      	str	r2, [r7, #8]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	60ba      	str	r2, [r7, #8]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeac:	4313      	orrs	r3, r2
 800eeae:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb2:	021b      	lsls	r3, r3, #8
 800eeb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	60ba      	str	r2, [r7, #8]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	4313      	orrs	r3, r2
 800eec4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	021b      	lsls	r3, r3, #8
 800eeca:	63bb      	str	r3, [r7, #56]	; 0x38
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	1c5a      	adds	r2, r3, #1
 800eed0:	60ba      	str	r2, [r7, #8]
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed8:	4313      	orrs	r3, r2
 800eeda:	63bb      	str	r3, [r7, #56]	; 0x38
 800eedc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eede:	f7f5 f804 	bl	8003eea <lwip_htonl>
 800eee2:	6378      	str	r0, [r7, #52]	; 0x34
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	60ba      	str	r2, [r7, #8]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	021b      	lsls	r3, r3, #8
 800eeee:	63bb      	str	r3, [r7, #56]	; 0x38
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	60ba      	str	r2, [r7, #8]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	461a      	mov	r2, r3
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	4313      	orrs	r3, r2
 800eefe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	60ba      	str	r2, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	4313      	orrs	r3, r2
 800ef14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	021b      	lsls	r3, r3, #8
 800ef1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	1c5a      	adds	r2, r3, #1
 800ef20:	60ba      	str	r2, [r7, #8]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	461a      	mov	r2, r3
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef2e:	f7f4 ffdc 	bl	8003eea <lwip_htonl>
 800ef32:	6338      	str	r0, [r7, #48]	; 0x30
 800ef34:	7f3b      	ldrb	r3, [r7, #28]
 800ef36:	f043 0302 	orr.w	r3, r3, #2
 800ef3a:	773b      	strb	r3, [r7, #28]
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d004      	beq.n	800ef4c <ipcp_nakci+0x142>
 800ef42:	7c3b      	ldrb	r3, [r7, #16]
 800ef44:	f36f 0341 	bfc	r3, #1, #1
 800ef48:	743b      	strb	r3, [r7, #16]
 800ef4a:	e017      	b.n	800ef7c <ipcp_nakci+0x172>
 800ef4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	f003 0308 	and.w	r3, r3, #8
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d004      	beq.n	800ef64 <ipcp_nakci+0x15a>
 800ef5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <ipcp_nakci+0x15a>
 800ef60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef62:	617b      	str	r3, [r7, #20]
 800ef64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	f003 0310 	and.w	r3, r3, #16
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d004      	beq.n	800ef7c <ipcp_nakci+0x172>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <ipcp_nakci+0x172>
 800ef78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7a:	61bb      	str	r3, [r7, #24]
		}
	    }
	    );
#endif /* VJ_SUPPORT */

    NAKCIADDR(CI_ADDR, neg_addr,
 800ef7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 816e 	beq.w	800f268 <ipcp_nakci+0x45e>
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	785b      	ldrb	r3, [r3, #1]
 800ef90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ef94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef98:	2b06      	cmp	r3, #6
 800ef9a:	f040 8165 	bne.w	800f268 <ipcp_nakci+0x45e>
 800ef9e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	f300 815f 	bgt.w	800f268 <ipcp_nakci+0x45e>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	2b03      	cmp	r3, #3
 800efb0:	f040 815a 	bne.w	800f268 <ipcp_nakci+0x45e>
 800efb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	607b      	str	r3, [r7, #4]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	3302      	adds	r3, #2
 800efc2:	60bb      	str	r3, [r7, #8]
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	60ba      	str	r2, [r7, #8]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	60ba      	str	r2, [r7, #8]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	461a      	mov	r2, r3
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	4313      	orrs	r3, r2
 800efde:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	021b      	lsls	r3, r3, #8
 800efe4:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	60ba      	str	r2, [r7, #8]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	461a      	mov	r2, r3
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	4313      	orrs	r3, r2
 800eff4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	63bb      	str	r3, [r7, #56]	; 0x38
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	60ba      	str	r2, [r7, #8]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	461a      	mov	r2, r3
 800f006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f008:	4313      	orrs	r3, r2
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f00e:	f7f4 ff6c 	bl	8003eea <lwip_htonl>
 800f012:	6378      	str	r0, [r7, #52]	; 0x34
 800f014:	7f3b      	ldrb	r3, [r7, #28]
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	773b      	strb	r3, [r7, #28]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <ipcp_nakci+0x22a>
 800f022:	7c3b      	ldrb	r3, [r7, #16]
 800f024:	f36f 0300 	bfc	r3, #0, #1
 800f028:	743b      	strb	r3, [r7, #16]
 800f02a:	7c3b      	ldrb	r3, [r7, #16]
 800f02c:	f36f 0341 	bfc	r3, #1, #1
 800f030:	743b      	strb	r3, [r7, #16]
 800f032:	e119      	b.n	800f268 <ipcp_nakci+0x45e>
 800f034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	f003 0308 	and.w	r3, r3, #8
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f000 8112 	beq.w	800f268 <ipcp_nakci+0x45e>
 800f044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 810e 	beq.w	800f268 <ipcp_nakci+0x45e>
 800f04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04e:	617b      	str	r3, [r7, #20]
     * If they want to negotiate about IP addresses, we comply.
     * If they want us to ask for compression, we refuse.
     * If they want us to ask for ms-dns, we do that, since some
     * peers get huffy if we don't.
     */
    while (len >= CILEN_VOID) {
 800f050:	e10a      	b.n	800f268 <ipcp_nakci+0x45e>
	GETCHAR(citype, p);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	60ba      	str	r2, [r7, #8]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GETCHAR(cilen, p);
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	60ba      	str	r2, [r7, #8]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
 800f06a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f06e:	2b01      	cmp	r3, #1
 800f070:	f240 810c 	bls.w	800f28c <ipcp_nakci+0x482>
 800f074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	607b      	str	r3, [r7, #4]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	f2c0 8103 	blt.w	800f28c <ipcp_nakci+0x482>
	    goto bad;
	next = p + cilen - 2;
 800f086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f08a:	3b02      	subs	r3, #2
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	4413      	add	r3, r2
 800f090:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (citype) {
 800f092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f096:	2b01      	cmp	r3, #1
 800f098:	d003      	beq.n	800f0a2 <ipcp_nakci+0x298>
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	f000 808d 	beq.w	800f1ba <ipcp_nakci+0x3b0>
	    if (ciaddr1)
		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
	    break;
#endif /* UNUSED - WINS */
	default:
	    break;
 800f0a0:	e0e0      	b.n	800f264 <ipcp_nakci+0x45a>
	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
 800f0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d107      	bne.n	800f0c0 <ipcp_nakci+0x2b6>
 800f0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f003 0302 	and.w	r3, r3, #2
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f040 80e6 	bne.w	800f28c <ipcp_nakci+0x482>
 800f0c0:	7f3b      	ldrb	r3, [r7, #28]
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f040 80df 	bne.w	800f28c <ipcp_nakci+0x482>
		|| cilen != CILEN_ADDRS)
 800f0ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0d2:	2b0a      	cmp	r3, #10
 800f0d4:	f040 80da 	bne.w	800f28c <ipcp_nakci+0x482>
	    try_.neg_addr = 0;
 800f0d8:	7c3b      	ldrb	r3, [r7, #16]
 800f0da:	f36f 0300 	bfc	r3, #0, #1
 800f0de:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	1c5a      	adds	r2, r3, #1
 800f0e4:	60ba      	str	r2, [r7, #8]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	021b      	lsls	r3, r3, #8
 800f0ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	1c5a      	adds	r2, r3, #1
 800f0f0:	60ba      	str	r2, [r7, #8]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fe:	021b      	lsls	r3, r3, #8
 800f100:	63bb      	str	r3, [r7, #56]	; 0x38
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	60ba      	str	r2, [r7, #8]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	4313      	orrs	r3, r2
 800f110:	63bb      	str	r3, [r7, #56]	; 0x38
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	021b      	lsls	r3, r3, #8
 800f116:	63bb      	str	r3, [r7, #56]	; 0x38
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	60ba      	str	r2, [r7, #8]
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	461a      	mov	r2, r3
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	4313      	orrs	r3, r2
 800f126:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f12a:	f7f4 fede 	bl	8003eea <lwip_htonl>
 800f12e:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f132:	2b00      	cmp	r3, #0
 800f134:	d008      	beq.n	800f148 <ipcp_nakci+0x33e>
 800f136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0308 	and.w	r3, r3, #8
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <ipcp_nakci+0x33e>
		try_.ouraddr = ciaddr1;
 800f144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f146:	617b      	str	r3, [r7, #20]
	    GETLONG(l, p);
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	60ba      	str	r2, [r7, #8]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	63bb      	str	r3, [r7, #56]	; 0x38
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	1c5a      	adds	r2, r3, #1
 800f158:	60ba      	str	r2, [r7, #8]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	4313      	orrs	r3, r2
 800f162:	63bb      	str	r3, [r7, #56]	; 0x38
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	021b      	lsls	r3, r3, #8
 800f168:	63bb      	str	r3, [r7, #56]	; 0x38
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	60ba      	str	r2, [r7, #8]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f176:	4313      	orrs	r3, r2
 800f178:	63bb      	str	r3, [r7, #56]	; 0x38
 800f17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17c:	021b      	lsls	r3, r3, #8
 800f17e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	1c5a      	adds	r2, r3, #1
 800f184:	60ba      	str	r2, [r7, #8]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	461a      	mov	r2, r3
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	4313      	orrs	r3, r2
 800f18e:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr2 = lwip_htonl(l);
 800f190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f192:	f7f4 feaa 	bl	8003eea <lwip_htonl>
 800f196:	6338      	str	r0, [r7, #48]	; 0x30
	    if (ciaddr2 && go->accept_remote)
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d008      	beq.n	800f1b0 <ipcp_nakci+0x3a6>
 800f19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	f003 0310 	and.w	r3, r3, #16
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <ipcp_nakci+0x3a6>
		try_.hisaddr = ciaddr2;
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ae:	61bb      	str	r3, [r7, #24]
	    no.old_addrs = 1;
 800f1b0:	7f3b      	ldrb	r3, [r7, #28]
 800f1b2:	f043 0302 	orr.w	r3, r3, #2
 800f1b6:	773b      	strb	r3, [r7, #28]
	    break;
 800f1b8:	e054      	b.n	800f264 <ipcp_nakci+0x45a>
	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
 800f1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	f003 0301 	and.w	r3, r3, #1
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d161      	bne.n	800f28c <ipcp_nakci+0x482>
 800f1c8:	7f3b      	ldrb	r3, [r7, #28]
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d15b      	bne.n	800f28c <ipcp_nakci+0x482>
 800f1d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f1d8:	2b06      	cmp	r3, #6
 800f1da:	d157      	bne.n	800f28c <ipcp_nakci+0x482>
	    try_.old_addrs = 0;
 800f1dc:	7c3b      	ldrb	r3, [r7, #16]
 800f1de:	f36f 0341 	bfc	r3, #1, #1
 800f1e2:	743b      	strb	r3, [r7, #16]
	    GETLONG(l, p);
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	60ba      	str	r2, [r7, #8]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	021b      	lsls	r3, r3, #8
 800f1ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	60ba      	str	r2, [r7, #8]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	021b      	lsls	r3, r3, #8
 800f204:	63bb      	str	r3, [r7, #56]	; 0x38
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	60ba      	str	r2, [r7, #8]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	4313      	orrs	r3, r2
 800f214:	63bb      	str	r3, [r7, #56]	; 0x38
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	021b      	lsls	r3, r3, #8
 800f21a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	1c5a      	adds	r2, r3, #1
 800f220:	60ba      	str	r2, [r7, #8]
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	4313      	orrs	r3, r2
 800f22a:	63bb      	str	r3, [r7, #56]	; 0x38
	    ciaddr1 = lwip_htonl(l);
 800f22c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f22e:	f7f4 fe5c 	bl	8003eea <lwip_htonl>
 800f232:	6378      	str	r0, [r7, #52]	; 0x34
	    if (ciaddr1 && go->accept_local)
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	2b00      	cmp	r3, #0
 800f238:	d008      	beq.n	800f24c <ipcp_nakci+0x442>
 800f23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	f003 0308 	and.w	r3, r3, #8
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <ipcp_nakci+0x442>
		try_.ouraddr = ciaddr1;
 800f248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24a:	617b      	str	r3, [r7, #20]
	    if (try_.ouraddr != 0)
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d003      	beq.n	800f25a <ipcp_nakci+0x450>
		try_.neg_addr = 1;
 800f252:	7c3b      	ldrb	r3, [r7, #16]
 800f254:	f043 0301 	orr.w	r3, r3, #1
 800f258:	743b      	strb	r3, [r7, #16]
	    no.neg_addr = 1;
 800f25a:	7f3b      	ldrb	r3, [r7, #28]
 800f25c:	f043 0301 	orr.w	r3, r3, #1
 800f260:	773b      	strb	r3, [r7, #28]
	    break;
 800f262:	bf00      	nop
	}
	p = next;
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	f73f aef1 	bgt.w	800f052 <ipcp_nakci+0x248>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any remaining options, we ignore them.
     */
    if (f->state != PPP_FSM_OPENED)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	7c1b      	ldrb	r3, [r3, #16]
 800f274:	2b09      	cmp	r3, #9
 800f276:	d007      	beq.n	800f288 <ipcp_nakci+0x47e>
	*go = try_;
 800f278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f27a:	461c      	mov	r4, r3
 800f27c:	f107 0310 	add.w	r3, r7, #16
 800f280:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f284:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return 1;
 800f288:	2301      	movs	r3, #1
 800f28a:	e000      	b.n	800f28e <ipcp_nakci+0x484>

bad:
    IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
    return 0;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	374c      	adds	r7, #76	; 0x4c
 800f292:	46bd      	mov	sp, r7
 800f294:	bd90      	pop	{r4, r7, pc}

0800f296 <ipcp_rejci>:

/*
 * ipcp_rejci - Reject some of our CIs.
 * Callback from fsm_rconfnakrej.
 */
static int ipcp_rejci(fsm *f, u_char *p, int len) {
 800f296:	b590      	push	{r4, r7, lr}
 800f298:	b08f      	sub	sp, #60	; 0x3c
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	637b      	str	r3, [r7, #52]	; 0x34
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f2ae:	633b      	str	r3, [r7, #48]	; 0x30
    u_short cishort;
#endif /* VJ_SUPPORT */
    u32_t cilong;
    ipcp_options try_;		/* options to request next time */

    try_ = *go;
 800f2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2b2:	f107 0314 	add.w	r3, r7, #20
 800f2b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800f2b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    goto bad; \
	try_.winsaddr[opt == CI_MS_WINS2] = 0; \
    }
#endif /* UNUSED - WINS */

    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f003 0301 	and.w	r3, r3, #1
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d17e      	bne.n	800f3c8 <ipcp_rejci+0x132>
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	f003 0302 	and.w	r3, r3, #2
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d077      	beq.n	800f3c8 <ipcp_rejci+0x132>
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	785b      	ldrb	r3, [r3, #1]
 800f2dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2e4:	2b0a      	cmp	r3, #10
 800f2e6:	d16f      	bne.n	800f3c8 <ipcp_rejci+0x132>
 800f2e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	dc6a      	bgt.n	800f3c8 <ipcp_rejci+0x132>
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d166      	bne.n	800f3c8 <ipcp_rejci+0x132>
 800f2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	607b      	str	r3, [r7, #4]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	3302      	adds	r3, #2
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	1c5a      	adds	r2, r3, #1
 800f30e:	60ba      	str	r2, [r7, #8]
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	62bb      	str	r3, [r7, #40]	; 0x28
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	60ba      	str	r2, [r7, #8]
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	4313      	orrs	r3, r2
 800f324:	62bb      	str	r3, [r7, #40]	; 0x28
 800f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f328:	021b      	lsls	r3, r3, #8
 800f32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	1c5a      	adds	r2, r3, #1
 800f330:	60ba      	str	r2, [r7, #8]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	461a      	mov	r2, r3
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	4313      	orrs	r3, r2
 800f33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	021b      	lsls	r3, r3, #8
 800f340:	62bb      	str	r3, [r7, #40]	; 0x28
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	60ba      	str	r2, [r7, #8]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	4313      	orrs	r3, r2
 800f350:	62bb      	str	r3, [r7, #40]	; 0x28
 800f352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f354:	f7f4 fdc9 	bl	8003eea <lwip_htonl>
 800f358:	6278      	str	r0, [r7, #36]	; 0x24
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	685a      	ldr	r2, [r3, #4]
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	429a      	cmp	r2, r3
 800f362:	f040 8093 	bne.w	800f48c <ipcp_rejci+0x1f6>
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	60ba      	str	r2, [r7, #8]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	021b      	lsls	r3, r3, #8
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	1c5a      	adds	r2, r3, #1
 800f376:	60ba      	str	r2, [r7, #8]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	4313      	orrs	r3, r2
 800f380:	62bb      	str	r3, [r7, #40]	; 0x28
 800f382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	62bb      	str	r3, [r7, #40]	; 0x28
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	60ba      	str	r2, [r7, #8]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	461a      	mov	r2, r3
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	4313      	orrs	r3, r2
 800f396:	62bb      	str	r3, [r7, #40]	; 0x28
 800f398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39a:	021b      	lsls	r3, r3, #8
 800f39c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	1c5a      	adds	r2, r3, #1
 800f3a2:	60ba      	str	r2, [r7, #8]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b0:	f7f4 fd9b 	bl	8003eea <lwip_htonl>
 800f3b4:	6278      	str	r0, [r7, #36]	; 0x24
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b8:	689a      	ldr	r2, [r3, #8]
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d167      	bne.n	800f490 <ipcp_rejci+0x1fa>
 800f3c0:	7d3b      	ldrb	r3, [r7, #20]
 800f3c2:	f36f 0341 	bfc	r3, #1, #1
 800f3c6:	753b      	strb	r3, [r7, #20]
#if VJ_SUPPORT
    REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
	    go->maxslotindex, go->cflag);
#endif /* VJ_SUPPORT */

    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d049      	beq.n	800f46a <ipcp_rejci+0x1d4>
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	785b      	ldrb	r3, [r3, #1]
 800f3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	d141      	bne.n	800f46a <ipcp_rejci+0x1d4>
 800f3e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	dc3c      	bgt.n	800f46a <ipcp_rejci+0x1d4>
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b03      	cmp	r3, #3
 800f3f6:	d138      	bne.n	800f46a <ipcp_rejci+0x1d4>
 800f3f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	607b      	str	r3, [r7, #4]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	3302      	adds	r3, #2
 800f406:	60bb      	str	r3, [r7, #8]
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	60ba      	str	r2, [r7, #8]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	021b      	lsls	r3, r3, #8
 800f412:	623b      	str	r3, [r7, #32]
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	1c5a      	adds	r2, r3, #1
 800f418:	60ba      	str	r2, [r7, #8]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	461a      	mov	r2, r3
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	4313      	orrs	r3, r2
 800f422:	623b      	str	r3, [r7, #32]
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	021b      	lsls	r3, r3, #8
 800f428:	623b      	str	r3, [r7, #32]
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	60ba      	str	r2, [r7, #8]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	461a      	mov	r2, r3
 800f434:	6a3b      	ldr	r3, [r7, #32]
 800f436:	4313      	orrs	r3, r2
 800f438:	623b      	str	r3, [r7, #32]
 800f43a:	6a3b      	ldr	r3, [r7, #32]
 800f43c:	021b      	lsls	r3, r3, #8
 800f43e:	623b      	str	r3, [r7, #32]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	60ba      	str	r2, [r7, #8]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	461a      	mov	r2, r3
 800f44a:	6a3b      	ldr	r3, [r7, #32]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	623b      	str	r3, [r7, #32]
 800f450:	6a38      	ldr	r0, [r7, #32]
 800f452:	f7f4 fd4a 	bl	8003eea <lwip_htonl>
 800f456:	6278      	str	r0, [r7, #36]	; 0x24
 800f458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45e:	429a      	cmp	r2, r3
 800f460:	d118      	bne.n	800f494 <ipcp_rejci+0x1fe>
 800f462:	7d3b      	ldrb	r3, [r7, #20]
 800f464:	f36f 0300 	bfc	r3, #0, #1
 800f468:	753b      	strb	r3, [r7, #20]
#endif /* UNUSED - WINS */

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d113      	bne.n	800f498 <ipcp_rejci+0x202>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	7c1b      	ldrb	r3, [r3, #16]
 800f474:	2b09      	cmp	r3, #9
 800f476:	d007      	beq.n	800f488 <ipcp_rejci+0x1f2>
	*go = try_;
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	461c      	mov	r4, r3
 800f47c:	f107 0314 	add.w	r3, r7, #20
 800f480:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return 1;
 800f488:	2301      	movs	r3, #1
 800f48a:	e007      	b.n	800f49c <ipcp_rejci+0x206>
    REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
 800f48c:	bf00      	nop
 800f48e:	e004      	b.n	800f49a <ipcp_rejci+0x204>
 800f490:	bf00      	nop
 800f492:	e002      	b.n	800f49a <ipcp_rejci+0x204>
    REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
 800f494:	bf00      	nop
 800f496:	e000      	b.n	800f49a <ipcp_rejci+0x204>
	goto bad;
 800f498:	bf00      	nop

bad:
    IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
    return 0;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	373c      	adds	r7, #60	; 0x3c
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd90      	pop	{r4, r7, pc}

0800f4a4 <ipcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * len = Length of requested CIs
 */
static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b094      	sub	sp, #80	; 0x50
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
 800f4b0:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	633b      	str	r3, [r7, #48]	; 0x30
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f4c6:	62bb      	str	r3, [r7, #40]	; 0x28
    ipcp_options *ao = &pcb->ipcp_allowoptions;
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
    u_short cilen, citype;	/* Parsed len, type */
#if VJ_SUPPORT
    u_short cishort;		/* Parsed short value */
#endif /* VJ_SUPPORT */
    u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
    int rc = CONFACK;		/* Final packet return code */
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	647b      	str	r3, [r7, #68]	; 0x44
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *ucp = inp;		/* Pointer to current output char */
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	63bb      	str	r3, [r7, #56]	; 0x38
    int l = *len;		/* Length left */
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_DNS */

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 800f4de:	220c      	movs	r2, #12
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e4:	f004 fd3b 	bl	8013f5e <memset>
    
    /*
     * Process all his options.
     */
    next = inp;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (l) {
 800f4ec:	e1f3      	b.n	800f8d6 <ipcp_reqci+0x432>
	orc = CONFACK;			/* Assume success */
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	643b      	str	r3, [r7, #64]	; 0x40
	cip = p = next;			/* Remember beginning of CI */
 800f4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	623b      	str	r3, [r7, #32]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	dd0b      	ble.n	800f518 <ipcp_reqci+0x74>
	    p[1] < 2 ||			/*  CI length too small or */
 800f500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f502:	3301      	adds	r3, #1
 800f504:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 800f506:	2b01      	cmp	r3, #1
 800f508:	d906      	bls.n	800f518 <ipcp_reqci+0x74>
	    p[1] > l) {			/*  CI length too big? */
 800f50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50c:	3301      	adds	r3, #1
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 800f512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f514:	429a      	cmp	r2, r3
 800f516:	dd07      	ble.n	800f528 <ipcp_reqci+0x84>
	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 800f518:	2304      	movs	r3, #4
 800f51a:	643b      	str	r3, [r7, #64]	; 0x40
	    cilen = l;			/* Reject till end of packet */
 800f51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    l = 0;			/* Don't loop again */
 800f522:	2300      	movs	r3, #0
 800f524:	637b      	str	r3, [r7, #52]	; 0x34
	    goto endswitch;
 800f526:	e1a1      	b.n	800f86c <ipcp_reqci+0x3c8>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 800f528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	83fb      	strh	r3, [r7, #30]
	GETCHAR(cilen, p);		/* Parse CI length */
 800f532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f534:	1c5a      	adds	r2, r3, #1
 800f536:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	l -= cilen;			/* Adjust remaining length */
 800f53e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	637b      	str	r3, [r7, #52]	; 0x34
	next += cilen;			/* Step to next CI */
 800f548:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f54c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f54e:	4413      	add	r3, r2
 800f550:	64fb      	str	r3, [r7, #76]	; 0x4c

	switch (citype) {		/* Check CI type */
 800f552:	8bfb      	ldrh	r3, [r7, #30]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d003      	beq.n	800f560 <ipcp_reqci+0xbc>
 800f558:	2b03      	cmp	r3, #3
 800f55a:	f000 80f6 	beq.w	800f74a <ipcp_reqci+0x2a6>
 800f55e:	e182      	b.n	800f866 <ipcp_reqci+0x3c2>
	case CI_ADDRS:
	    if (!ao->old_addrs || ho->neg_addr ||
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 0302 	and.w	r3, r3, #2
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00a      	beq.n	800f584 <ipcp_reqci+0xe0>
 800f56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f003 0301 	and.w	r3, r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d103      	bne.n	800f584 <ipcp_reqci+0xe0>
 800f57c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f580:	2b0a      	cmp	r3, #10
 800f582:	d002      	beq.n	800f58a <ipcp_reqci+0xe6>
		cilen != CILEN_ADDRS) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f584:	2304      	movs	r3, #4
 800f586:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f588:	e170      	b.n	800f86c <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);		/* Parse source address (his) */
 800f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58c:	1c5a      	adds	r2, r3, #1
 800f58e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	021b      	lsls	r3, r3, #8
 800f594:	61bb      	str	r3, [r7, #24]
 800f596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	61bb      	str	r3, [r7, #24]
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	021b      	lsls	r3, r3, #8
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	61bb      	str	r3, [r7, #24]
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	021b      	lsls	r3, r3, #8
 800f5c0:	61bb      	str	r3, [r7, #24]
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f5d2:	69b8      	ldr	r0, [r7, #24]
 800f5d4:	f7f4 fc89 	bl	8003eea <lwip_htonl>
 800f5d8:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	689a      	ldr	r2, [r3, #8]
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d033      	beq.n	800f64c <ipcp_reqci+0x1a8>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <ipcp_reqci+0x154>
 800f5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	f003 0310 	and.w	r3, r3, #16
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d129      	bne.n	800f64c <ipcp_reqci+0x1a8>
		orc = CONFNAK;
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d133      	bne.n	800f66a <ipcp_reqci+0x1c6>
		    DECPTR(sizeof(u32_t), p);
 800f602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f604:	3b04      	subs	r3, #4
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f4 fc6c 	bl	8003eea <lwip_htonl>
 800f612:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f61a:	69ba      	ldr	r2, [r7, #24]
 800f61c:	0e12      	lsrs	r2, r2, #24
 800f61e:	b2d2      	uxtb	r2, r2
 800f620:	701a      	strb	r2, [r3, #0]
 800f622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f624:	1c5a      	adds	r2, r3, #1
 800f626:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f628:	69ba      	ldr	r2, [r7, #24]
 800f62a:	0c12      	lsrs	r2, r2, #16
 800f62c:	b2d2      	uxtb	r2, r2
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	1c5a      	adds	r2, r3, #1
 800f634:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	0a12      	lsrs	r2, r2, #8
 800f63a:	b2d2      	uxtb	r2, r2
 800f63c:	701a      	strb	r2, [r3, #0]
 800f63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	b2d2      	uxtb	r2, r2
 800f648:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f64a:	e00e      	b.n	800f66a <ipcp_reqci+0x1c6>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10b      	bne.n	800f66a <ipcp_reqci+0x1c6>
 800f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d107      	bne.n	800f66a <ipcp_reqci+0x1c6>
		/*
		 * If neither we nor he knows his address, reject the option.
		 */
		orc = CONFREJ;
 800f65a:	2304      	movs	r3, #4
 800f65c:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f660:	7813      	ldrb	r3, [r2, #0]
 800f662:	f36f 0382 	bfc	r3, #2, #1
 800f666:	7013      	strb	r3, [r2, #0]
		break;
 800f668:	e100      	b.n	800f86c <ipcp_reqci+0x3c8>

	    /*
	     * If he doesn't know our address, or if we both have our address
	     * but disagree about it, then NAK it with our idea.
	     */
	    GETLONG(tl, p);		/* Parse destination address (ours) */
 800f66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	021b      	lsls	r3, r3, #8
 800f674:	61bb      	str	r3, [r7, #24]
 800f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	4313      	orrs	r3, r2
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	021b      	lsls	r3, r3, #8
 800f68a:	61bb      	str	r3, [r7, #24]
 800f68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	461a      	mov	r2, r3
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	4313      	orrs	r3, r2
 800f69a:	61bb      	str	r3, [r7, #24]
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	021b      	lsls	r3, r3, #8
 800f6a0:	61bb      	str	r3, [r7, #24]
 800f6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a4:	1c5a      	adds	r2, r3, #1
 800f6a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	61bb      	str	r3, [r7, #24]
	    ciaddr2 = lwip_htonl(tl);
 800f6b2:	69b8      	ldr	r0, [r7, #24]
 800f6b4:	f7f4 fc19 	bl	8003eea <lwip_htonl>
 800f6b8:	6138      	str	r0, [r7, #16]
	    if (ciaddr2 != wo->ouraddr) {
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d036      	beq.n	800f732 <ipcp_reqci+0x28e>
		if (ciaddr2 == 0 || !wo->accept_local) {
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d006      	beq.n	800f6d8 <ipcp_reqci+0x234>
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	f003 0308 	and.w	r3, r3, #8
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d129      	bne.n	800f72c <ipcp_reqci+0x288>
		    orc = CONFNAK;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	643b      	str	r3, [r7, #64]	; 0x40
		    if (!reject_if_disagree) {
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d127      	bne.n	800f732 <ipcp_reqci+0x28e>
			DECPTR(sizeof(u32_t), p);
 800f6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e4:	3b04      	subs	r3, #4
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			tl = lwip_ntohl(wo->ouraddr);
 800f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f4 fbfc 	bl	8003eea <lwip_htonl>
 800f6f2:	61b8      	str	r0, [r7, #24]
			PUTLONG(tl, p);
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	0e12      	lsrs	r2, r2, #24
 800f6fe:	b2d2      	uxtb	r2, r2
 800f700:	701a      	strb	r2, [r3, #0]
 800f702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f704:	1c5a      	adds	r2, r3, #1
 800f706:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f708:	69ba      	ldr	r2, [r7, #24]
 800f70a:	0c12      	lsrs	r2, r2, #16
 800f70c:	b2d2      	uxtb	r2, r2
 800f70e:	701a      	strb	r2, [r3, #0]
 800f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	0a12      	lsrs	r2, r2, #8
 800f71a:	b2d2      	uxtb	r2, r2
 800f71c:	701a      	strb	r2, [r3, #0]
 800f71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	701a      	strb	r2, [r3, #0]
		    if (!reject_if_disagree) {
 800f72a:	e002      	b.n	800f732 <ipcp_reqci+0x28e>
		    }
		} else {
		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
 800f72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	605a      	str	r2, [r3, #4]
		}
	    }

	    ho->old_addrs = 1;
 800f732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f734:	7813      	ldrb	r3, [r2, #0]
 800f736:	f043 0302 	orr.w	r3, r3, #2
 800f73a:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	609a      	str	r2, [r3, #8]
	    ho->ouraddr = ciaddr2;
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	605a      	str	r2, [r3, #4]
	    break;
 800f748:	e090      	b.n	800f86c <ipcp_reqci+0x3c8>

	case CI_ADDR:
	    if (!ao->neg_addr || ho->old_addrs ||
 800f74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	f003 0301 	and.w	r3, r3, #1
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00a      	beq.n	800f76e <ipcp_reqci+0x2ca>
 800f758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	b2db      	uxtb	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d103      	bne.n	800f76e <ipcp_reqci+0x2ca>
 800f766:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f76a:	2b06      	cmp	r3, #6
 800f76c:	d002      	beq.n	800f774 <ipcp_reqci+0x2d0>
		cilen != CILEN_ADDR) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 800f76e:	2304      	movs	r3, #4
 800f770:	643b      	str	r3, [r7, #64]	; 0x40
		break;
 800f772:	e07b      	b.n	800f86c <ipcp_reqci+0x3c8>
	     * If he has no address, or if we both have his address but
	     * disagree about it, then NAK it with our idea.
	     * In particular, if we don't know his address, but he does,
	     * then accept it.
	     */
	    GETLONG(tl, p);	/* Parse source address (his) */
 800f774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f776:	1c5a      	adds	r2, r3, #1
 800f778:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	021b      	lsls	r3, r3, #8
 800f77e:	61bb      	str	r3, [r7, #24]
 800f780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	61bb      	str	r3, [r7, #24]
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	021b      	lsls	r3, r3, #8
 800f794:	61bb      	str	r3, [r7, #24]
 800f796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	61bb      	str	r3, [r7, #24]
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	021b      	lsls	r3, r3, #8
 800f7aa:	61bb      	str	r3, [r7, #24]
 800f7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	61bb      	str	r3, [r7, #24]
	    ciaddr1 = lwip_htonl(tl);
 800f7bc:	69b8      	ldr	r0, [r7, #24]
 800f7be:	f7f4 fb94 	bl	8003eea <lwip_htonl>
 800f7c2:	6178      	str	r0, [r7, #20]
	    if (ciaddr1 != wo->hisaddr
 800f7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c6:	689a      	ldr	r2, [r3, #8]
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d033      	beq.n	800f836 <ipcp_reqci+0x392>
		&& (ciaddr1 == 0 || !wo->accept_remote)) {
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d006      	beq.n	800f7e2 <ipcp_reqci+0x33e>
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f003 0310 	and.w	r3, r3, #16
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d129      	bne.n	800f836 <ipcp_reqci+0x392>
		orc = CONFNAK;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (!reject_if_disagree) {
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d133      	bne.n	800f854 <ipcp_reqci+0x3b0>
		    DECPTR(sizeof(u32_t), p);
 800f7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ee:	3b04      	subs	r3, #4
 800f7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		    tl = lwip_ntohl(wo->hisaddr);
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7f4 fb77 	bl	8003eea <lwip_htonl>
 800f7fc:	61b8      	str	r0, [r7, #24]
		    PUTLONG(tl, p);
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	0e12      	lsrs	r2, r2, #24
 800f808:	b2d2      	uxtb	r2, r2
 800f80a:	701a      	strb	r2, [r3, #0]
 800f80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80e:	1c5a      	adds	r2, r3, #1
 800f810:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	0c12      	lsrs	r2, r2, #16
 800f816:	b2d2      	uxtb	r2, r2
 800f818:	701a      	strb	r2, [r3, #0]
 800f81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f820:	69ba      	ldr	r2, [r7, #24]
 800f822:	0a12      	lsrs	r2, r2, #8
 800f824:	b2d2      	uxtb	r2, r2
 800f826:	701a      	strb	r2, [r3, #0]
 800f828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	b2d2      	uxtb	r2, r2
 800f832:	701a      	strb	r2, [r3, #0]
		if (!reject_if_disagree) {
 800f834:	e00e      	b.n	800f854 <ipcp_reqci+0x3b0>
		}
	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10b      	bne.n	800f854 <ipcp_reqci+0x3b0>
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d107      	bne.n	800f854 <ipcp_reqci+0x3b0>
		/*
		 * Don't ACK an address of 0.0.0.0 - reject it instead.
		 */
		orc = CONFREJ;
 800f844:	2304      	movs	r3, #4
 800f846:	643b      	str	r3, [r7, #64]	; 0x40
		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
 800f848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f84a:	7813      	ldrb	r3, [r2, #0]
 800f84c:	f36f 0382 	bfc	r3, #2, #1
 800f850:	7013      	strb	r3, [r2, #0]
		break;
 800f852:	e00b      	b.n	800f86c <ipcp_reqci+0x3c8>
	    }
	
	    ho->neg_addr = 1;
 800f854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f856:	7813      	ldrb	r3, [r2, #0]
 800f858:	f043 0301 	orr.w	r3, r3, #1
 800f85c:	7013      	strb	r3, [r2, #0]
	    ho->hisaddr = ciaddr1;
 800f85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	609a      	str	r2, [r3, #8]
	    break;
 800f864:	e002      	b.n	800f86c <ipcp_reqci+0x3c8>
	    }
	    break;
#endif /* VJ_SUPPORT */

	default:
	    orc = CONFREJ;
 800f866:	2304      	movs	r3, #4
 800f868:	643b      	str	r3, [r7, #64]	; 0x40
	    break;
 800f86a:	bf00      	nop
	}
endswitch:
	if (orc == CONFACK &&		/* Good CI */
 800f86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d103      	bne.n	800f87a <ipcp_reqci+0x3d6>
 800f872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f874:	2b02      	cmp	r3, #2
 800f876:	d000      	beq.n	800f87a <ipcp_reqci+0x3d6>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 800f878:	e02d      	b.n	800f8d6 <ipcp_reqci+0x432>

	if (orc == CONFNAK) {		/* Nak this CI? */
 800f87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d110      	bne.n	800f8a2 <ipcp_reqci+0x3fe>
	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d002      	beq.n	800f88c <ipcp_reqci+0x3e8>
		orc = CONFREJ;		/* Get tough if so */
 800f886:	2304      	movs	r3, #4
 800f888:	643b      	str	r3, [r7, #64]	; 0x40
 800f88a:	e00a      	b.n	800f8a2 <ipcp_reqci+0x3fe>
	    else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 800f88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f88e:	2b04      	cmp	r3, #4
 800f890:	d100      	bne.n	800f894 <ipcp_reqci+0x3f0>
		    continue;		/* Don't send this one */
 800f892:	e020      	b.n	800f8d6 <ipcp_reqci+0x432>
		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
 800f894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f896:	2b02      	cmp	r3, #2
 800f898:	d103      	bne.n	800f8a2 <ipcp_reqci+0x3fe>
		    rc = CONFNAK;	/* Not anymore... */
 800f89a:	2303      	movs	r3, #3
 800f89c:	647b      	str	r3, [r7, #68]	; 0x44
		    ucp = inp;		/* Backup */
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	    }
	}

	if (orc == CONFREJ &&		/* Reject this CI */
 800f8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	d106      	bne.n	800f8b6 <ipcp_reqci+0x412>
 800f8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8aa:	2b04      	cmp	r3, #4
 800f8ac:	d003      	beq.n	800f8b6 <ipcp_reqci+0x412>
	    rc != CONFREJ) {		/*  but no prior ones? */
	    rc = CONFREJ;
 800f8ae:	2304      	movs	r3, #4
 800f8b0:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* Backup */
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	/* Need to move CI? */
	if (ucp != cip)
 800f8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d006      	beq.n	800f8cc <ipcp_reqci+0x428>
	    MEMCPY(ucp, cip, cilen);	/* Move it */
 800f8be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	6a39      	ldr	r1, [r7, #32]
 800f8c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8c8:	f004 fb24 	bl	8013f14 <memcpy>

	/* Update output pointer */
	INCPTR(cilen, ucp);
 800f8cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f8d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8d2:	4413      	add	r3, r2
 800f8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l) {
 800f8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f47f ae08 	bne.w	800f4ee <ipcp_reqci+0x4a>
     * their address, and they didn't send their address, then we
     * send a NAK with a CI_ADDR option appended.  We assume the
     * input buffer is long enough that we can append the extra
     * option safely.
     */
    if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
 800f8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e0:	2b04      	cmp	r3, #4
 800f8e2:	d055      	beq.n	800f990 <ipcp_reqci+0x4ec>
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f003 0301 	and.w	r3, r3, #1
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d14e      	bne.n	800f990 <ipcp_reqci+0x4ec>
 800f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	f003 0302 	and.w	r3, r3, #2
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d147      	bne.n	800f990 <ipcp_reqci+0x4ec>
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	f003 0304 	and.w	r3, r3, #4
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d040      	beq.n	800f990 <ipcp_reqci+0x4ec>
	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d13d      	bne.n	800f990 <ipcp_reqci+0x4ec>
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	f003 0304 	and.w	r3, r3, #4
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d136      	bne.n	800f990 <ipcp_reqci+0x4ec>
	if (rc == CONFACK) {
 800f922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f924:	2b02      	cmp	r3, #2
 800f926:	d108      	bne.n	800f93a <ipcp_reqci+0x496>
	    rc = CONFNAK;
 800f928:	2303      	movs	r3, #3
 800f92a:	647b      	str	r3, [r7, #68]	; 0x44
	    ucp = inp;			/* reset pointer */
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	63bb      	str	r3, [r7, #56]	; 0x38
	    wo->req_addr = 0;		/* don't ask again */
 800f930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f932:	7813      	ldrb	r3, [r2, #0]
 800f934:	f36f 0382 	bfc	r3, #2, #1
 800f938:	7013      	strb	r3, [r2, #0]
	}
	PUTCHAR(CI_ADDR, ucp);
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	63ba      	str	r2, [r7, #56]	; 0x38
 800f940:	2203      	movs	r2, #3
 800f942:	701a      	strb	r2, [r3, #0]
	PUTCHAR(CILEN_ADDR, ucp);
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	63ba      	str	r2, [r7, #56]	; 0x38
 800f94a:	2206      	movs	r2, #6
 800f94c:	701a      	strb	r2, [r3, #0]
	tl = lwip_ntohl(wo->hisaddr);
 800f94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	4618      	mov	r0, r3
 800f954:	f7f4 fac9 	bl	8003eea <lwip_htonl>
 800f958:	61b8      	str	r0, [r7, #24]
	PUTLONG(tl, ucp);
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	1c5a      	adds	r2, r3, #1
 800f95e:	63ba      	str	r2, [r7, #56]	; 0x38
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	0e12      	lsrs	r2, r2, #24
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	701a      	strb	r2, [r3, #0]
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	63ba      	str	r2, [r7, #56]	; 0x38
 800f96e:	69ba      	ldr	r2, [r7, #24]
 800f970:	0c12      	lsrs	r2, r2, #16
 800f972:	b2d2      	uxtb	r2, r2
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f978:	1c5a      	adds	r2, r3, #1
 800f97a:	63ba      	str	r2, [r7, #56]	; 0x38
 800f97c:	69ba      	ldr	r2, [r7, #24]
 800f97e:	0a12      	lsrs	r2, r2, #8
 800f980:	b2d2      	uxtb	r2, r2
 800f982:	701a      	strb	r2, [r3, #0]
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	63ba      	str	r2, [r7, #56]	; 0x38
 800f98a:	69ba      	ldr	r2, [r7, #24]
 800f98c:	b2d2      	uxtb	r2, r2
 800f98e:	701a      	strb	r2, [r3, #0]
    }

    *len = ucp - inp;			/* Compute output length */
 800f990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	1ad2      	subs	r2, r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	601a      	str	r2, [r3, #0]
    IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
    return (rc);			/* Return final code */
 800f99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3750      	adds	r7, #80	; 0x50
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <ipcp_up>:
/*
 * ipcp_up - IPCP has come UP.
 *
 * Configure the IP network interface appropriately and bring it up.
 */
static void ipcp_up(fsm *f) {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	61fb      	str	r3, [r7, #28]
    u32_t mask;
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f9b8:	61bb      	str	r3, [r7, #24]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800f9c0:	617b      	str	r3, [r7, #20]
    ipcp_options *wo = &pcb->ipcp_wantoptions;
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800f9c8:	613b      	str	r3, [r7, #16]
    IPCPDEBUG(("ipcp: up"));

    /*
     * We must have a non-zero IP address for both ends of the link.
     */
    if (!ho->neg_addr && !ho->old_addrs)
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	f003 0301 	and.w	r3, r3, #1
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10a      	bne.n	800f9ee <ipcp_up+0x4a>
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	f003 0302 	and.w	r3, r3, #2
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d103      	bne.n	800f9ee <ipcp_up+0x4a>
	ho->hisaddr = wo->hisaddr;
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	609a      	str	r2, [r3, #8]

    if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d11f      	bne.n	800fa3c <ipcp_up+0x98>
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	f003 0302 	and.w	r3, r3, #2
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d118      	bne.n	800fa3c <ipcp_up+0x98>
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d106      	bne.n	800fa26 <ipcp_up+0x82>
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	f003 0302 	and.w	r3, r3, #2
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00a      	beq.n	800fa3c <ipcp_up+0x98>
	&& wo->ouraddr != 0) {
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d006      	beq.n	800fa3c <ipcp_up+0x98>
	ppp_error(("Peer refused to agree to our IP address"));
	ipcp_close(f->pcb, "Refused our IP address");
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	493b      	ldr	r1, [pc, #236]	; (800fb20 <ipcp_up+0x17c>)
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe ff36 	bl	800e8a6 <ipcp_close>
	return;
 800fa3a:	e06e      	b.n	800fb1a <ipcp_up+0x176>
    }
    if (go->ouraddr == 0) {
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d106      	bne.n	800fa52 <ipcp_up+0xae>
	ppp_error(("Could not determine local IP address"));
	ipcp_close(f->pcb, "Could not determine local IP address");
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4936      	ldr	r1, [pc, #216]	; (800fb24 <ipcp_up+0x180>)
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe ff2b 	bl	800e8a6 <ipcp_close>
	return;
 800fa50:	e063      	b.n	800fb1a <ipcp_up+0x176>
    }
    if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10c      	bne.n	800fa74 <ipcp_up+0xd0>
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	f003 0304 	and.w	r3, r3, #4
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d105      	bne.n	800fa74 <ipcp_up+0xd0>
	ho->hisaddr = lwip_htonl(0x0a404040);
 800fa68:	482f      	ldr	r0, [pc, #188]	; (800fb28 <ipcp_up+0x184>)
 800fa6a:	f7f4 fa3e 	bl	8003eea <lwip_htonl>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DNS */

    /*
     * Check that the peer is allowed to use the IP address it wants.
     */
    if (ho->hisaddr != 0) {
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d01a      	beq.n	800fab2 <ipcp_up+0x10e>
	u32_t addr = lwip_ntohl(ho->hisaddr);
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f4 fa32 	bl	8003eea <lwip_htonl>
 800fa86:	60f8      	str	r0, [r7, #12]
	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	0e1b      	lsrs	r3, r3, #24
 800fa8c:	2b7f      	cmp	r3, #127	; 0x7f
 800fa8e:	d00b      	beq.n	800faa8 <ipcp_up+0x104>
	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fa96:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800fa9a:	d005      	beq.n	800faa8 <ipcp_up+0x104>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800faa2:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800faa6:	d104      	bne.n	800fab2 <ipcp_up+0x10e>
#if PPP_SERVER && PPP_AUTH_SUPPORT
	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
#endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
	    ) {
		ppp_error(("Peer is not authorized to use remote address %I", ho->hisaddr));
		ipcp_close(pcb, "Unauthorized remote IP address");
 800faa8:	4920      	ldr	r1, [pc, #128]	; (800fb2c <ipcp_up+0x188>)
 800faaa:	69f8      	ldr	r0, [r7, #28]
 800faac:	f7fe fefb 	bl	800e8a6 <ipcp_close>
		return;
 800fab0:	e033      	b.n	800fb1a <ipcp_up+0x176>
#endif /* DEMAND_SUPPORT */
    {
	/*
	 * Set IP addresses and (if specified) netmask.
	 */
	mask = get_mask(go->ouraddr);
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f002 fd36 	bl	8012528 <get_mask>
 800fabc:	60b8      	str	r0, [r7, #8]

#if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	6859      	ldr	r1, [r3, #4]
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	689a      	ldr	r2, [r3, #8]
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	69f8      	ldr	r0, [r7, #28]
 800faca:	f002 fcc3 	bl	8012454 <sifaddr>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d106      	bne.n	800fae2 <ipcp_up+0x13e>
#if PPP_DEBUG
	    ppp_warn(("Interface configuration failed"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4915      	ldr	r1, [pc, #84]	; (800fb30 <ipcp_up+0x18c>)
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fe fee3 	bl	800e8a6 <ipcp_close>
	    return;
 800fae0:	e01b      	b.n	800fb1a <ipcp_up+0x176>
	}
#endif

	/* bring the interface up for IP */
	if (!sifup(pcb)) {
 800fae2:	69f8      	ldr	r0, [r7, #28]
 800fae4:	f002 fce8 	bl	80124b8 <sifup>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d106      	bne.n	800fafc <ipcp_up+0x158>
#if PPP_DEBUG
	    ppp_warn(("Interface failed to come up"));
#endif /* PPP_DEBUG */
	    ipcp_close(f->pcb, "Interface configuration failed");
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	490f      	ldr	r1, [pc, #60]	; (800fb30 <ipcp_up+0x18c>)
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fe fed6 	bl	800e8a6 <ipcp_close>
	    return;
 800fafa:	e00e      	b.n	800fb1a <ipcp_up+0x176>
	if (ho->hisaddr != 0 && wo->proxy_arp)
	    if (sifproxyarp(pcb, ho->hisaddr))
		pcb->proxy_arp_set = 1;
#endif /* UNUSED - PROXY ARP */

	wo->ouraddr = go->ouraddr;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	605a      	str	r2, [r3, #4]

#if PPP_STATS_SUPPORT
    reset_link_stats(f->unit);
#endif /* PPP_STATS_SUPPORT */

    np_up(pcb, PPP_IP);
 800fb04:	2121      	movs	r1, #33	; 0x21
 800fb06:	69f8      	ldr	r0, [r7, #28]
 800fb08:	f7fd fecc 	bl	800d8a4 <np_up>
    pcb->ipcp_is_up = 1;
 800fb0c:	69fa      	ldr	r2, [r7, #28]
 800fb0e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fb12:	f043 0304 	orr.w	r3, r3, #4
 800fb16:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_up_hook)
	ip_up_hook();
#endif /* UNUSED */
}
 800fb1a:	3720      	adds	r7, #32
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	080178b0 	.word	0x080178b0
 800fb24:	080178c8 	.word	0x080178c8
 800fb28:	0a404040 	.word	0x0a404040
 800fb2c:	080178f0 	.word	0x080178f0
 800fb30:	08017910 	.word	0x08017910

0800fb34 <ipcp_down>:
 * ipcp_down - IPCP has gone DOWN.
 *
 * Take the IP network interface down, clear its addresses
 * and delete routes through it.
 */
static void ipcp_down(fsm *f) {
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	617b      	str	r3, [r7, #20]
    ipcp_options *ho = &pcb->ipcp_hisoptions;
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fb48:	613b      	str	r3, [r7, #16]
    ipcp_options *go = &pcb->ipcp_gotoptions;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800fb50:	60fb      	str	r3, [r7, #12]
#endif /* PPP_NOTIFY */
#if 0 /* UNUSED */
    if (ip_down_hook)
	ip_down_hook();
#endif /* UNUSED */
    if (pcb->ipcp_is_up) {
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00a      	beq.n	800fb78 <ipcp_down+0x44>
	pcb->ipcp_is_up = 0;
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fb68:	f36f 0382 	bfc	r3, #2, #1
 800fb6c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	np_down(pcb, PPP_IP);
 800fb70:	2121      	movs	r1, #33	; 0x21
 800fb72:	6978      	ldr	r0, [r7, #20]
 800fb74:	f7fd feb0 	bl	800d8d8 <np_down>
#endif /* DEMAND_SUPPORT */
    {
#if DEMAND_SUPPORT
	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
#endif /* DEMAND_SUPPORT */
	sifdown(pcb);
 800fb78:	6978      	ldr	r0, [r7, #20]
 800fb7a:	f002 fcc0 	bl	80124fe <sifdown>
	ipcp_clear_addrs(pcb, go->ouraddr,
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6859      	ldr	r1, [r3, #4]
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	689a      	ldr	r2, [r3, #8]
 800fb86:	2300      	movs	r3, #0
 800fb88:	6978      	ldr	r0, [r7, #20]
 800fb8a:	f000 f804 	bl	800fb96 <ipcp_clear_addrs>
			 ho->hisaddr, 0);
#if LWIP_DNS
	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
#endif /* LWIP_DNS */
    }
}
 800fb8e:	bf00      	nop
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <ipcp_clear_addrs>:

/*
 * ipcp_clear_addrs() - clear the interface addresses, routes,
 * proxy arp entries, etc.
 */
static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b084      	sub	sp, #16
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	60b9      	str	r1, [r7, #8]
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	70fb      	strb	r3, [r7, #3]
    if (!replacedefaultroute && pcb->default_route_set) {
	cifdefaultroute(pcb, ouraddr, hisaddr);
	pcb->default_route_set = 0;
    }
#endif /* UNUSED */
    cifaddr(pcb, ouraddr, hisaddr);
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f002 fc6f 	bl	801248c <cifaddr>
}
 800fbae:	bf00      	nop
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <ipcp_finished>:


/*
 * ipcp_finished - possibly shut down the lower layers.
 */
static void ipcp_finished(fsm *f) {
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b084      	sub	sp, #16
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
	ppp_pcb *pcb = f->pcb;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]
	if (pcb->ipcp_is_open) {
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fbca:	f003 0302 	and.w	r3, r3, #2
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00a      	beq.n	800fbea <ipcp_finished+0x34>
		pcb->ipcp_is_open = 0;
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800fbda:	f36f 0341 	bfc	r3, #1, #1
 800fbde:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		np_finished(pcb, PPP_IP);
 800fbe2:	2121      	movs	r1, #33	; 0x21
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f7fd fe91 	bl	800d90c <np_finished>
	}
}
 800fbea:	bf00      	nop
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <lcp_init>:
#endif /* HAVE_MULTILINK */

/*
 * lcp_init - Initialize LCP.
 */
static void lcp_init(ppp_pcb *pcb) {
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	3344      	adds	r3, #68	; 0x44
 800fc00:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3360      	adds	r3, #96	; 0x60
 800fc06:	613b      	str	r3, [r7, #16]
    lcp_options *ao = &pcb->lcp_allowoptions;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	33a8      	adds	r3, #168	; 0xa8
 800fc0c:	60fb      	str	r3, [r7, #12]

    f->pcb = pcb;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	601a      	str	r2, [r3, #0]
    f->protocol = PPP_LCP;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	f24c 0221 	movw	r2, #49185	; 0xc021
 800fc1a:	81da      	strh	r2, [r3, #14]
    f->callbacks = &lcp_callbacks;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	4a2b      	ldr	r2, [pc, #172]	; (800fccc <lcp_init+0xd8>)
 800fc20:	605a      	str	r2, [r3, #4]

    fsm_init(f);
 800fc22:	6978      	ldr	r0, [r7, #20]
 800fc24:	f7fd fe8e 	bl	800d944 <fsm_init>

    BZERO(wo, sizeof(*wo));
 800fc28:	2224      	movs	r2, #36	; 0x24
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	6938      	ldr	r0, [r7, #16]
 800fc2e:	f004 f996 	bl	8013f5e <memset>
    wo->neg_mru = 1;
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	7813      	ldrb	r3, [r2, #0]
 800fc36:	f043 0304 	orr.w	r3, r3, #4
 800fc3a:	7013      	strb	r3, [r2, #0]
    wo->mru = PPP_MRU;
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fc42:	805a      	strh	r2, [r3, #2]
    wo->neg_asyncmap = 1;
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	7813      	ldrb	r3, [r2, #0]
 800fc48:	f043 0308 	orr.w	r3, r3, #8
 800fc4c:	7013      	strb	r3, [r2, #0]
    wo->neg_magicnumber = 1;
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	7813      	ldrb	r3, [r2, #0]
 800fc52:	f043 0320 	orr.w	r3, r3, #32
 800fc56:	7013      	strb	r3, [r2, #0]
    wo->neg_pcompression = 1;
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	7813      	ldrb	r3, [r2, #0]
 800fc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc60:	7013      	strb	r3, [r2, #0]
    wo->neg_accompression = 1;
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	7813      	ldrb	r3, [r2, #0]
 800fc66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc6a:	7013      	strb	r3, [r2, #0]

    BZERO(ao, sizeof(*ao));
 800fc6c:	2224      	movs	r2, #36	; 0x24
 800fc6e:	2100      	movs	r1, #0
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f004 f974 	bl	8013f5e <memset>
    ao->neg_mru = 1;
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	7813      	ldrb	r3, [r2, #0]
 800fc7a:	f043 0304 	orr.w	r3, r3, #4
 800fc7e:	7013      	strb	r3, [r2, #0]
    ao->mru = PPP_MAXMRU;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fc86:	805a      	strh	r2, [r3, #2]
    ao->neg_asyncmap = 1;
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	7813      	ldrb	r3, [r2, #0]
 800fc8c:	f043 0308 	orr.w	r3, r3, #8
 800fc90:	7013      	strb	r3, [r2, #0]
#if CHAP_SUPPORT
    ao->neg_chap = 1;
    ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
    ao->neg_upap = 1;
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	7813      	ldrb	r3, [r2, #0]
 800fc96:	f043 0310 	orr.w	r3, r3, #16
 800fc9a:	7013      	strb	r3, [r2, #0]
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
    ao->neg_eap = 1;
#endif /* EAP_SUPPORT */
    ao->neg_magicnumber = 1;
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	7813      	ldrb	r3, [r2, #0]
 800fca0:	f043 0320 	orr.w	r3, r3, #32
 800fca4:	7013      	strb	r3, [r2, #0]
    ao->neg_pcompression = 1;
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	7813      	ldrb	r3, [r2, #0]
 800fcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcae:	7013      	strb	r3, [r2, #0]
    ao->neg_accompression = 1;
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	7813      	ldrb	r3, [r2, #0]
 800fcb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcb8:	7013      	strb	r3, [r2, #0]
    ao->neg_endpoint = 1;
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	7853      	ldrb	r3, [r2, #1]
 800fcbe:	f043 0304 	orr.w	r3, r3, #4
 800fcc2:	7053      	strb	r3, [r2, #1]
}
 800fcc4:	bf00      	nop
 800fcc6:	3718      	adds	r7, #24
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	08017c98 	.word	0x08017c98

0800fcd0 <lcp_open>:


/*
 * lcp_open - LCP is allowed to come up.
 */
void lcp_open(ppp_pcb *pcb) {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3344      	adds	r3, #68	; 0x44
 800fcdc:	60fb      	str	r3, [r7, #12]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3360      	adds	r3, #96	; 0x60
 800fce2:	60bb      	str	r3, [r7, #8]

    f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	7c5b      	ldrb	r3, [r3, #17]
 800fce8:	f023 0305 	bic.w	r3, r3, #5
 800fcec:	b2da      	uxtb	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	745a      	strb	r2, [r3, #17]
    if (wo->passive)
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	f003 0301 	and.w	r3, r3, #1
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d006      	beq.n	800fd0e <lcp_open+0x3e>
	f->flags |= OPT_PASSIVE;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	7c5b      	ldrb	r3, [r3, #17]
 800fd04:	f043 0301 	orr.w	r3, r3, #1
 800fd08:	b2da      	uxtb	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	745a      	strb	r2, [r3, #17]
    if (wo->silent)
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 0302 	and.w	r3, r3, #2
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d006      	beq.n	800fd2a <lcp_open+0x5a>
	f->flags |= OPT_SILENT;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	7c5b      	ldrb	r3, [r3, #17]
 800fd20:	f043 0304 	orr.w	r3, r3, #4
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	745a      	strb	r2, [r3, #17]
    fsm_open(f);
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f7fd fea0 	bl	800da70 <fsm_open>
}
 800fd30:	bf00      	nop
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <lcp_close>:


/*
 * lcp_close - Take LCP down.
 */
void lcp_close(ppp_pcb *pcb, const char *reason) {
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
    fsm *f = &pcb->lcp_fsm;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	3344      	adds	r3, #68	; 0x44
 800fd46:	60fb      	str	r3, [r7, #12]
    int oldstate;

    if (pcb->phase != PPP_PHASE_DEAD
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d003      	beq.n	800fd5a <lcp_close+0x22>
#ifdef HAVE_MULTILINK
    && pcb->phase != PPP_PHASE_MASTER
#endif /* HAVE_MULTILINK */
    )
	new_phase(pcb, PPP_PHASE_TERMINATE);
 800fd52:	210b      	movs	r1, #11
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f002 fb35 	bl	80123c4 <new_phase>

    if (f->flags & DELAYED_UP) {
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	7c5b      	ldrb	r3, [r3, #17]
 800fd5e:	b25b      	sxtb	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	da06      	bge.n	800fd72 <lcp_close+0x3a>
	UNTIMEOUT(lcp_delayed_up, f);
 800fd64:	68f9      	ldr	r1, [r7, #12]
 800fd66:	4812      	ldr	r0, [pc, #72]	; (800fdb0 <lcp_close+0x78>)
 800fd68:	f7fd fb90 	bl	800d48c <sys_untimeout>
	f->state = PPP_FSM_STOPPED;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2203      	movs	r2, #3
 800fd70:	741a      	strb	r2, [r3, #16]
    }
    oldstate = f->state;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	7c1b      	ldrb	r3, [r3, #16]
 800fd76:	60bb      	str	r3, [r7, #8]

    fsm_close(f, reason);
 800fd78:	6839      	ldr	r1, [r7, #0]
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f7fd ff40 	bl	800dc00 <fsm_close>
    if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b03      	cmp	r3, #3
 800fd84:	d10f      	bne.n	800fda6 <lcp_close+0x6e>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	7c5b      	ldrb	r3, [r3, #17]
 800fd8a:	f003 0385 	and.w	r3, r3, #133	; 0x85
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d009      	beq.n	800fda6 <lcp_close+0x6e>
	 * but it does mean that the program terminates if you do a
	 * lcp_close() when a connection hasn't been established
	 * because we are in passive/silent mode or because we have
	 * delayed the fsm_lowerup() call and it hasn't happened yet.
	 */
	f->flags &= ~DELAYED_UP;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	7c5b      	ldrb	r3, [r3, #17]
 800fd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd9a:	b2da      	uxtb	r2, r3
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	745a      	strb	r2, [r3, #17]
	lcp_finished(f);
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f001 ff1a 	bl	8011bda <lcp_finished>
    }
}
 800fda6:	bf00      	nop
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	0800feb5 	.word	0x0800feb5

0800fdb4 <lcp_lowerup>:


/*
 * lcp_lowerup - The lower layer is up.
 */
void lcp_lowerup(ppp_pcb *pcb) {
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	6078      	str	r0, [r7, #4]
    lcp_options *wo = &pcb->lcp_wantoptions;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	3360      	adds	r3, #96	; 0x60
 800fdc0:	60fb      	str	r3, [r7, #12]
    fsm *f = &pcb->lcp_fsm;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	3344      	adds	r3, #68	; 0x44
 800fdc6:	60bb      	str	r3, [r7, #8]
    /*
     * Don't use A/C or protocol compression on transmission,
     * but accept A/C and protocol compressed packets
     * if we are going to ask for A/C and protocol compression.
     */
    if (ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0) < 0
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f002 fb04 	bl	80123e4 <ppp_send_config>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	db3f      	blt.n	800fe62 <lcp_lowerup+0xae>
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	f003 0308 	and.w	r3, r3, #8
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d001      	beq.n	800fdf4 <lcp_lowerup+0x40>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	e001      	b.n	800fdf8 <lcp_lowerup+0x44>
 800fdf4:	f04f 32ff 	mov.w	r2, #4294967295
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fe00:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fe02:	4619      	mov	r1, r3
			   wo->neg_pcompression, wo->neg_accompression) < 0)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fe0c:	b2db      	uxtb	r3, r3
	|| ppp_recv_config(pcb, PPP_DEFMRU, (pcb->settings.lax_recv? 0: 0xffffffff),
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	460b      	mov	r3, r1
 800fe12:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f002 fb00 	bl	801241c <ppp_recv_config>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	db1f      	blt.n	800fe62 <lcp_lowerup+0xae>
	    return;
    pcb->peer_mru = PPP_DEFMRU;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fe28:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    if (pcb->settings.listen_time != 0) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	885b      	ldrh	r3, [r3, #2]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d012      	beq.n	800fe5a <lcp_lowerup+0xa6>
	f->flags |= DELAYED_UP;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	7c5b      	ldrb	r3, [r3, #17]
 800fe38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	745a      	strb	r2, [r3, #17]
	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
 800fe42:	68b9      	ldr	r1, [r7, #8]
 800fe44:	4809      	ldr	r0, [pc, #36]	; (800fe6c <lcp_lowerup+0xb8>)
 800fe46:	f7fd fb21 	bl	800d48c <sys_untimeout>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	885b      	ldrh	r3, [r3, #2]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	4906      	ldr	r1, [pc, #24]	; (800fe6c <lcp_lowerup+0xb8>)
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fd faee 	bl	800d434 <sys_timeout>
 800fe58:	e004      	b.n	800fe64 <lcp_lowerup+0xb0>
    } else
	fsm_lowerup(f);
 800fe5a:	68b8      	ldr	r0, [r7, #8]
 800fe5c:	f7fd fd8f 	bl	800d97e <fsm_lowerup>
 800fe60:	e000      	b.n	800fe64 <lcp_lowerup+0xb0>
	    return;
 800fe62:	bf00      	nop
}
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	0800feb5 	.word	0x0800feb5

0800fe70 <lcp_lowerdown>:


/*
 * lcp_lowerdown - The lower layer is down.
 */
void lcp_lowerdown(ppp_pcb *pcb) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	3344      	adds	r3, #68	; 0x44
 800fe7c:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	7c5b      	ldrb	r3, [r3, #17]
 800fe82:	b25b      	sxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	da0b      	bge.n	800fea0 <lcp_lowerdown+0x30>
	f->flags &= ~DELAYED_UP;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	7c5b      	ldrb	r3, [r3, #17]
 800fe8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800fe96:	68f9      	ldr	r1, [r7, #12]
 800fe98:	4805      	ldr	r0, [pc, #20]	; (800feb0 <lcp_lowerdown+0x40>)
 800fe9a:	f7fd faf7 	bl	800d48c <sys_untimeout>
    } else
	fsm_lowerdown(f);
}
 800fe9e:	e002      	b.n	800fea6 <lcp_lowerdown+0x36>
	fsm_lowerdown(f);
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7fd fd91 	bl	800d9c8 <fsm_lowerdown>
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	0800feb5 	.word	0x0800feb5

0800feb4 <lcp_delayed_up>:


/*
 * lcp_delayed_up - Bring the lower layer up now.
 */
static void lcp_delayed_up(void *arg) {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	60fb      	str	r3, [r7, #12]

    if (f->flags & DELAYED_UP) {
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	7c5b      	ldrb	r3, [r3, #17]
 800fec4:	b25b      	sxtb	r3, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	da09      	bge.n	800fede <lcp_delayed_up+0x2a>
	f->flags &= ~DELAYED_UP;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	7c5b      	ldrb	r3, [r3, #17]
 800fece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	745a      	strb	r2, [r3, #17]
	fsm_lowerup(f);
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7fd fd50 	bl	800d97e <fsm_lowerup>
    }
}
 800fede:	bf00      	nop
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
	...

0800fee8 <lcp_input>:


/*
 * lcp_input - Input LCP packet.
 */
static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3344      	adds	r3, #68	; 0x44
 800fef8:	617b      	str	r3, [r7, #20]

    if (f->flags & DELAYED_UP) {
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	7c5b      	ldrb	r3, [r3, #17]
 800fefe:	b25b      	sxtb	r3, r3
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	da0d      	bge.n	800ff20 <lcp_input+0x38>
	f->flags &= ~DELAYED_UP;
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	7c5b      	ldrb	r3, [r3, #17]
 800ff08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff0c:	b2da      	uxtb	r2, r3
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	745a      	strb	r2, [r3, #17]
	UNTIMEOUT(lcp_delayed_up, f);
 800ff12:	6979      	ldr	r1, [r7, #20]
 800ff14:	4807      	ldr	r0, [pc, #28]	; (800ff34 <lcp_input+0x4c>)
 800ff16:	f7fd fab9 	bl	800d48c <sys_untimeout>
	fsm_lowerup(f);
 800ff1a:	6978      	ldr	r0, [r7, #20]
 800ff1c:	f7fd fd2f 	bl	800d97e <fsm_lowerup>
    }
    fsm_input(f, p, len);
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	68b9      	ldr	r1, [r7, #8]
 800ff24:	6978      	ldr	r0, [r7, #20]
 800ff26:	f7fd ff4f 	bl	800ddc8 <fsm_input>
}
 800ff2a:	bf00      	nop
 800ff2c:	3718      	adds	r7, #24
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	0800feb5 	.word	0x0800feb5

0800ff38 <lcp_extcode>:

/*
 * lcp_extcode - Handle a LCP-specific code.
 */
static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08a      	sub	sp, #40	; 0x28
 800ff3c:	af02      	add	r7, sp, #8
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	3384      	adds	r3, #132	; 0x84
 800ff50:	61bb      	str	r3, [r7, #24]
    u_char *magp;

    switch( code ){
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	3b08      	subs	r3, #8
 800ff56:	2b05      	cmp	r3, #5
 800ff58:	d84a      	bhi.n	800fff0 <lcp_extcode+0xb8>
 800ff5a:	a201      	add	r2, pc, #4	; (adr r2, 800ff60 <lcp_extcode+0x28>)
 800ff5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff60:	0800ff79 	.word	0x0800ff79
 800ff64:	0800ff85 	.word	0x0800ff85
 800ff68:	0800ffe3 	.word	0x0800ffe3
 800ff6c:	0800fff5 	.word	0x0800fff5
 800ff70:	0800fff5 	.word	0x0800fff5
 800ff74:	0800fff5 	.word	0x0800fff5
    case PROTREJ:
	lcp_rprotrej(f, inp, len);
 800ff78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f000 f841 	bl	8010004 <lcp_rprotrej>
	break;
 800ff82:	e03a      	b.n	800fffa <lcp_extcode+0xc2>
    
    case ECHOREQ:
	if (f->state != PPP_FSM_OPENED)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	7c1b      	ldrb	r3, [r3, #16]
 800ff88:	2b09      	cmp	r3, #9
 800ff8a:	d135      	bne.n	800fff8 <lcp_extcode+0xc0>
	    break;
	magp = inp;
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	617b      	str	r3, [r7, #20]
	PUTLONG(go->magicnumber, magp);
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	1c5a      	adds	r2, r3, #1
 800ff94:	617a      	str	r2, [r7, #20]
 800ff96:	69ba      	ldr	r2, [r7, #24]
 800ff98:	6892      	ldr	r2, [r2, #8]
 800ff9a:	0e12      	lsrs	r2, r2, #24
 800ff9c:	b2d2      	uxtb	r2, r2
 800ff9e:	701a      	strb	r2, [r3, #0]
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	1c5a      	adds	r2, r3, #1
 800ffa4:	617a      	str	r2, [r7, #20]
 800ffa6:	69ba      	ldr	r2, [r7, #24]
 800ffa8:	6892      	ldr	r2, [r2, #8]
 800ffaa:	0c12      	lsrs	r2, r2, #16
 800ffac:	b2d2      	uxtb	r2, r2
 800ffae:	701a      	strb	r2, [r3, #0]
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	617a      	str	r2, [r7, #20]
 800ffb6:	69ba      	ldr	r2, [r7, #24]
 800ffb8:	6892      	ldr	r2, [r2, #8]
 800ffba:	0a12      	lsrs	r2, r2, #8
 800ffbc:	b2d2      	uxtb	r2, r2
 800ffbe:	701a      	strb	r2, [r3, #0]
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	1c5a      	adds	r2, r3, #1
 800ffc4:	617a      	str	r2, [r7, #20]
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	6892      	ldr	r2, [r2, #8]
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	701a      	strb	r2, [r3, #0]
	fsm_sdata(f, ECHOREP, id, inp, len);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	b2da      	uxtb	r2, r3
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	210a      	movs	r1, #10
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7fe fb8c 	bl	800e6f8 <fsm_sdata>
	break;
 800ffe0:	e00b      	b.n	800fffa <lcp_extcode+0xc2>
    
    case ECHOREP:
	lcp_received_echo_reply(f, id, inp, len);
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	6879      	ldr	r1, [r7, #4]
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f001 fe6a 	bl	8011cc2 <lcp_received_echo_reply>
	break;
 800ffee:	e004      	b.n	800fffa <lcp_extcode+0xc2>
    case IDENTIF:
    case TIMEREM:
	break;

    default:
	return 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	e003      	b.n	800fffc <lcp_extcode+0xc4>
	break;
 800fff4:	bf00      	nop
 800fff6:	e000      	b.n	800fffa <lcp_extcode+0xc2>
	    break;
 800fff8:	bf00      	nop
    }
    return 1;
 800fffa:	2301      	movs	r3, #1
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3720      	adds	r7, #32
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <lcp_rprotrej>:
/*
 * lcp_rprotrej - Receive an Protocol-Reject.
 *
 * Figure out which protocol is rejected and inform it.
 */
static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
 8010004:	b580      	push	{r7, lr}
 8010006:	b088      	sub	sp, #32
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
    u_short prot;
#if PPP_PROTOCOLNAME
    const char *pname;
#endif /* PPP_PROTOCOLNAME */

    if (len < 2) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b01      	cmp	r3, #1
 8010014:	dd2d      	ble.n	8010072 <lcp_rprotrej+0x6e>
	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
	return;
    }

    GETSHORT(prot, inp);
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	1c5a      	adds	r2, r3, #1
 801001a:	60ba      	str	r2, [r7, #8]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	b29b      	uxth	r3, r3
 8010020:	021b      	lsls	r3, r3, #8
 8010022:	837b      	strh	r3, [r7, #26]
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	60ba      	str	r2, [r7, #8]
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	b29a      	uxth	r2, r3
 801002e:	8b7b      	ldrh	r3, [r7, #26]
 8010030:	4313      	orrs	r3, r2
 8010032:	837b      	strh	r3, [r7, #26]

    /*
     * Protocol-Reject packets received in any state other than the LCP
     * OPENED state SHOULD be silently discarded.
     */
    if( f->state != PPP_FSM_OPENED ){
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	7c1b      	ldrb	r3, [r3, #16]
 8010038:	2b09      	cmp	r3, #9
 801003a:	d11c      	bne.n	8010076 <lcp_rprotrej+0x72>
#endif /* PPP_PROTOCOLNAME */

    /*
     * Upcall the proper Protocol-Reject routine.
     */
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 801003c:	2300      	movs	r3, #0
 801003e:	61fb      	str	r3, [r7, #28]
 8010040:	e00e      	b.n	8010060 <lcp_rprotrej+0x5c>
	if (protp->protocol == prot) {
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	881b      	ldrh	r3, [r3, #0]
 8010046:	8b7a      	ldrh	r2, [r7, #26]
 8010048:	429a      	cmp	r2, r3
 801004a:	d106      	bne.n	801005a <lcp_rprotrej+0x56>
		ppp_dbglog(("Protocol-Reject for '%s' (0x%x) received", pname,
		       prot));
	    else
#endif /* PPP_PROTOCOLNAME */
		ppp_dbglog(("Protocol-Reject for 0x%x received", prot));
	    (*protp->protrej)(f->pcb);
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	6812      	ldr	r2, [r2, #0]
 8010054:	4610      	mov	r0, r2
 8010056:	4798      	blx	r3
	    return;
 8010058:	e00e      	b.n	8010078 <lcp_rprotrej+0x74>
    for (i = 0; (protp = protocols[i]) != NULL; ++i)
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	3301      	adds	r3, #1
 801005e:	61fb      	str	r3, [r7, #28]
 8010060:	4a07      	ldr	r2, [pc, #28]	; (8010080 <lcp_rprotrej+0x7c>)
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010068:	617b      	str	r3, [r7, #20]
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e8      	bne.n	8010042 <lcp_rprotrej+0x3e>
 8010070:	e002      	b.n	8010078 <lcp_rprotrej+0x74>
	return;
 8010072:	bf00      	nop
 8010074:	e000      	b.n	8010078 <lcp_rprotrej+0x74>
	return;
 8010076:	bf00      	nop
	ppp_warn(("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
	     prot));
    else
#endif /* #if PPP_PROTOCOLNAME */
	ppp_warn(("Protocol-Reject for unsupported protocol 0x%x", prot));
}
 8010078:	3720      	adds	r7, #32
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	08017d08 	.word	0x08017d08

08010084 <lcp_protrej>:

/*
 * lcp_protrej - A Protocol-Reject was received.
 */
/*ARGSUSED*/
static void lcp_protrej(ppp_pcb *pcb) {
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
    /*
     * Can't reject LCP!
     */
    ppp_error(("Received Protocol-Reject for LCP!"));
    fsm_protreject(&pcb->lcp_fsm);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3344      	adds	r3, #68	; 0x44
 8010090:	4618      	mov	r0, r3
 8010092:	f7fe f9f5 	bl	800e480 <fsm_protreject>
}
 8010096:	bf00      	nop
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <lcp_sprotrej>:


/*
 * lcp_sprotrej - Send a Protocol-Reject for some protocol.
 */
void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
 801009e:	b580      	push	{r7, lr}
 80100a0:	b088      	sub	sp, #32
 80100a2:	af02      	add	r7, sp, #8
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	60b9      	str	r1, [r7, #8]
 80100a8:	607a      	str	r2, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	3344      	adds	r3, #68	; 0x44
 80100ae:	617b      	str	r3, [r7, #20]
#if 0
    p += 2;
    len -= 2;
#endif

    fsm_sdata(f, PROTREJ, ++f->id,
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	7c9b      	ldrb	r3, [r3, #18]
 80100b4:	3301      	adds	r3, #1
 80100b6:	b2da      	uxtb	r2, r3
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	749a      	strb	r2, [r3, #18]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	7c9a      	ldrb	r2, [r3, #18]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	2108      	movs	r1, #8
 80100c8:	6978      	ldr	r0, [r7, #20]
 80100ca:	f7fe fb15 	bl	800e6f8 <fsm_sdata>
	      p, len);
}
 80100ce:	bf00      	nop
 80100d0:	3718      	adds	r7, #24
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <lcp_resetci>:


/*
 * lcp_resetci - Reset our CI.
 */
static void lcp_resetci(fsm *f) {
 80100d6:	b5b0      	push	{r4, r5, r7, lr}
 80100d8:	b086      	sub	sp, #24
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	617b      	str	r3, [r7, #20]
    lcp_options *wo = &pcb->lcp_wantoptions;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	3360      	adds	r3, #96	; 0x60
 80100e8:	613b      	str	r3, [r7, #16]
    lcp_options *go = &pcb->lcp_gotoptions;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	3384      	adds	r3, #132	; 0x84
 80100ee:	60fb      	str	r3, [r7, #12]
    lcp_options *ao = &pcb->lcp_allowoptions;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	33a8      	adds	r3, #168	; 0xa8
 80100f4:	60bb      	str	r3, [r7, #8]

#if PPP_AUTH_SUPPORT

    /* note: default value is true for allow options */
    if (pcb->settings.user && pcb->settings.passwd) {
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d010      	beq.n	8010120 <lcp_resetci+0x4a>
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00c      	beq.n	8010120 <lcp_resetci+0x4a>
#if PAP_SUPPORT
      if (pcb->settings.refuse_pap) {
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00a      	beq.n	801012a <lcp_resetci+0x54>
        ao->neg_upap = 0;
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	7813      	ldrb	r3, [r2, #0]
 8010118:	f36f 1304 	bfc	r3, #4, #1
 801011c:	7013      	strb	r3, [r2, #0]
      if (pcb->settings.refuse_pap) {
 801011e:	e004      	b.n	801012a <lcp_resetci+0x54>
      }
#endif /* PPP_SERVER */

    } else {
#if PAP_SUPPORT
      ao->neg_upap = 0;
 8010120:	68ba      	ldr	r2, [r7, #8]
 8010122:	7813      	ldrb	r3, [r2, #0]
 8010124:	f36f 1304 	bfc	r3, #4, #1
 8010128:	7013      	strb	r3, [r2, #0]
#endif /* EAP_SUPPORT */
    PPPDEBUG(LOG_DEBUG, ("\n"));

#endif /* PPP_AUTH_SUPPORT */

    wo->magicnumber = magic();
 801012a:	f001 fed5 	bl	8011ed8 <magic>
 801012e:	4602      	mov	r2, r0
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	609a      	str	r2, [r3, #8]
    wo->numloops = 0;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2200      	movs	r2, #0
 8010138:	731a      	strb	r2, [r3, #12]
    *go = *wo;
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	4614      	mov	r4, r2
 8010140:	461d      	mov	r5, r3
 8010142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801014a:	682b      	ldr	r3, [r5, #0]
 801014c:	6023      	str	r3, [r4, #0]
#ifdef HAVE_MULTILINK
    if (!multilink) {
	go->neg_mrru = 0;
#endif /* HAVE_MULTILINK */
	go->neg_ssnhf = 0;
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	7853      	ldrb	r3, [r2, #1]
 8010152:	f36f 0341 	bfc	r3, #1, #1
 8010156:	7053      	strb	r3, [r2, #1]
	go->neg_endpoint = 0;
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	7853      	ldrb	r3, [r2, #1]
 801015c:	f36f 0382 	bfc	r3, #2, #1
 8010160:	7053      	strb	r3, [r2, #1]
#ifdef HAVE_MULTILINK
    }
#endif /* HAVE_MULTILINK */
    if (pcb->settings.noendpoint)
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	f003 0310 	and.w	r3, r3, #16
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d004      	beq.n	801017a <lcp_resetci+0xa4>
	ao->neg_endpoint = 0;
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	7853      	ldrb	r3, [r2, #1]
 8010174:	f36f 0382 	bfc	r3, #2, #1
 8010178:	7053      	strb	r3, [r2, #1]
    pcb->peer_mru = PPP_DEFMRU;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010180:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#if 0 /* UNUSED */
    auth_reset(pcb);
#endif /* UNUSED */
}
 8010184:	bf00      	nop
 8010186:	3718      	adds	r7, #24
 8010188:	46bd      	mov	sp, r7
 801018a:	bdb0      	pop	{r4, r5, r7, pc}

0801018c <lcp_cilen>:


/*
 * lcp_cilen - Return length of our CI.
 */
static int lcp_cilen(fsm *f) {
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3384      	adds	r3, #132	; 0x84
 801019e:	60bb      	str	r3, [r7, #8]
    /*
     * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
     * accept more than one.  We prefer EAP first, then CHAP, then
     * PAP.
     */
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 0304 	and.w	r3, r3, #4
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d007      	beq.n	80101be <lcp_cilen+0x32>
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d001      	beq.n	80101be <lcp_cilen+0x32>
 80101ba:	2204      	movs	r2, #4
 80101bc:	e000      	b.n	80101c0 <lcp_cilen+0x34>
 80101be:	2200      	movs	r2, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0308 	and.w	r3, r3, #8
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d006      	beq.n	80101dc <lcp_cilen+0x50>
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d6:	d001      	beq.n	80101dc <lcp_cilen+0x50>
 80101d8:	2306      	movs	r3, #6
 80101da:	e000      	b.n	80101de <lcp_cilen+0x52>
 80101dc:	2300      	movs	r3, #0
    return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
 80101de:	441a      	add	r2, r3
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
	    LENCISHORT(!go->neg_chap && go->neg_upap) +
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
	    LENCISHORT(go->neg_upap) +
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 0310 	and.w	r3, r3, #16
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <lcp_cilen+0x66>
 80101ee:	2304      	movs	r3, #4
 80101f0:	e000      	b.n	80101f4 <lcp_cilen+0x68>
 80101f2:	2300      	movs	r3, #0
	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
 80101f4:	441a      	add	r2, r3
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
	    LENCILQR(go->neg_lqr) +
#endif /* LQR_SUPPORT */
	    LENCICBCP(go->neg_cbcp) +
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	785b      	ldrb	r3, [r3, #1]
 80101fa:	f003 0301 	and.w	r3, r3, #1
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <lcp_cilen+0x7c>
 8010204:	2303      	movs	r3, #3
 8010206:	e000      	b.n	801020a <lcp_cilen+0x7e>
 8010208:	2300      	movs	r3, #0
	    LENCISHORT(go->neg_upap) +
 801020a:	441a      	add	r2, r3
	    LENCILONG(go->neg_magicnumber) +
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 0320 	and.w	r3, r3, #32
 8010214:	b2db      	uxtb	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <lcp_cilen+0x92>
 801021a:	2306      	movs	r3, #6
 801021c:	e000      	b.n	8010220 <lcp_cilen+0x94>
 801021e:	2300      	movs	r3, #0
	    LENCICBCP(go->neg_cbcp) +
 8010220:	441a      	add	r2, r3
	    LENCIVOID(go->neg_pcompression) +
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801022a:	b2db      	uxtb	r3, r3
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <lcp_cilen+0xa8>
 8010230:	2302      	movs	r3, #2
 8010232:	e000      	b.n	8010236 <lcp_cilen+0xaa>
 8010234:	2300      	movs	r3, #0
	    LENCILONG(go->neg_magicnumber) +
 8010236:	441a      	add	r2, r3
	    LENCIVOID(go->neg_accompression) +
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010240:	b2db      	uxtb	r3, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	d001      	beq.n	801024a <lcp_cilen+0xbe>
 8010246:	2302      	movs	r3, #2
 8010248:	e000      	b.n	801024c <lcp_cilen+0xc0>
 801024a:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_pcompression) +
 801024c:	441a      	add	r2, r3
#ifdef HAVE_MULTILINK
	    LENCISHORT(go->neg_mrru) +
#endif /* HAVE_MULTILINK */
	    LENCIVOID(go->neg_ssnhf) +
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	785b      	ldrb	r3, [r3, #1]
 8010252:	f003 0302 	and.w	r3, r3, #2
	    LENCIVOID(go->neg_accompression) +
 8010256:	441a      	add	r2, r3
	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	b2db      	uxtb	r3, r3
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <lcp_cilen+0xe2>
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	7b9b      	ldrb	r3, [r3, #14]
 801026a:	3303      	adds	r3, #3
 801026c:	e000      	b.n	8010270 <lcp_cilen+0xe4>
 801026e:	2300      	movs	r3, #0
	    LENCIVOID(go->neg_ssnhf) +
 8010270:	4413      	add	r3, r2
}
 8010272:	4618      	mov	r0, r3
 8010274:	3714      	adds	r7, #20
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <lcp_addci>:


/*
 * lcp_addci - Add our desired CIs to a packet.
 */
static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
 801027e:	b480      	push	{r7}
 8010280:	b089      	sub	sp, #36	; 0x24
 8010282:	af00      	add	r7, sp, #0
 8010284:	60f8      	str	r0, [r7, #12]
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	61bb      	str	r3, [r7, #24]
    lcp_options *go = &pcb->lcp_gotoptions;
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	3384      	adds	r3, #132	; 0x84
 8010294:	617b      	str	r3, [r7, #20]
    u_char *start_ucp = ucp;
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	613b      	str	r3, [r7, #16]
	PUTCHAR(class, ucp); \
	for (i = 0; i < len; ++i) \
	    PUTCHAR(val[i], ucp); \
    }

    ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	f003 0304 	and.w	r3, r3, #4
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01f      	beq.n	80102e8 <lcp_addci+0x6a>
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	885b      	ldrh	r3, [r3, #2]
 80102ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d019      	beq.n	80102e8 <lcp_addci+0x6a>
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	1c5a      	adds	r2, r3, #1
 80102b8:	60ba      	str	r2, [r7, #8]
 80102ba:	2201      	movs	r2, #1
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	1c5a      	adds	r2, r3, #1
 80102c2:	60ba      	str	r2, [r7, #8]
 80102c4:	2204      	movs	r2, #4
 80102c6:	701a      	strb	r2, [r3, #0]
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	1c5a      	adds	r2, r3, #1
 80102cc:	60ba      	str	r2, [r7, #8]
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	8852      	ldrh	r2, [r2, #2]
 80102d2:	0a12      	lsrs	r2, r2, #8
 80102d4:	b292      	uxth	r2, r2
 80102d6:	b2d2      	uxtb	r2, r2
 80102d8:	701a      	strb	r2, [r3, #0]
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	1c5a      	adds	r2, r3, #1
 80102de:	60ba      	str	r2, [r7, #8]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	8852      	ldrh	r2, [r2, #2]
 80102e4:	b2d2      	uxtb	r2, r2
 80102e6:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f003 0308 	and.w	r3, r3, #8
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d02d      	beq.n	8010352 <lcp_addci+0xd4>
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fe:	d028      	beq.n	8010352 <lcp_addci+0xd4>
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	1c5a      	adds	r2, r3, #1
 8010304:	60ba      	str	r2, [r7, #8]
 8010306:	2202      	movs	r2, #2
 8010308:	701a      	strb	r2, [r3, #0]
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	60ba      	str	r2, [r7, #8]
 8010310:	2206      	movs	r2, #6
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	1c5a      	adds	r2, r3, #1
 8010318:	60ba      	str	r2, [r7, #8]
 801031a:	697a      	ldr	r2, [r7, #20]
 801031c:	6852      	ldr	r2, [r2, #4]
 801031e:	0e12      	lsrs	r2, r2, #24
 8010320:	b2d2      	uxtb	r2, r2
 8010322:	701a      	strb	r2, [r3, #0]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	60ba      	str	r2, [r7, #8]
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	6852      	ldr	r2, [r2, #4]
 801032e:	0c12      	lsrs	r2, r2, #16
 8010330:	b2d2      	uxtb	r2, r2
 8010332:	701a      	strb	r2, [r3, #0]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	60ba      	str	r2, [r7, #8]
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	6852      	ldr	r2, [r2, #4]
 801033e:	0a12      	lsrs	r2, r2, #8
 8010340:	b2d2      	uxtb	r2, r2
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	1c5a      	adds	r2, r3, #1
 8010348:	60ba      	str	r2, [r7, #8]
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	6852      	ldr	r2, [r2, #4]
 801034e:	b2d2      	uxtb	r2, r2
 8010350:	701a      	strb	r2, [r3, #0]
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 0310 	and.w	r3, r3, #16
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	d013      	beq.n	8010388 <lcp_addci+0x10a>
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	60ba      	str	r2, [r7, #8]
 8010366:	2203      	movs	r2, #3
 8010368:	701a      	strb	r2, [r3, #0]
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	1c5a      	adds	r2, r3, #1
 801036e:	60ba      	str	r2, [r7, #8]
 8010370:	2204      	movs	r2, #4
 8010372:	701a      	strb	r2, [r3, #0]
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	60ba      	str	r2, [r7, #8]
 801037a:	22c0      	movs	r2, #192	; 0xc0
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	60ba      	str	r2, [r7, #8]
 8010384:	2223      	movs	r2, #35	; 0x23
 8010386:	701a      	strb	r2, [r3, #0]
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	785b      	ldrb	r3, [r3, #1]
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00e      	beq.n	80103b4 <lcp_addci+0x136>
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	60ba      	str	r2, [r7, #8]
 801039c:	220d      	movs	r2, #13
 801039e:	701a      	strb	r2, [r3, #0]
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	60ba      	str	r2, [r7, #8]
 80103a6:	2203      	movs	r2, #3
 80103a8:	701a      	strb	r2, [r3, #0]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	60ba      	str	r2, [r7, #8]
 80103b0:	2206      	movs	r2, #6
 80103b2:	701a      	strb	r2, [r3, #0]
    ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	f003 0320 	and.w	r3, r3, #32
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d028      	beq.n	8010414 <lcp_addci+0x196>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	60ba      	str	r2, [r7, #8]
 80103c8:	2205      	movs	r2, #5
 80103ca:	701a      	strb	r2, [r3, #0]
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	60ba      	str	r2, [r7, #8]
 80103d2:	2206      	movs	r2, #6
 80103d4:	701a      	strb	r2, [r3, #0]
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	1c5a      	adds	r2, r3, #1
 80103da:	60ba      	str	r2, [r7, #8]
 80103dc:	697a      	ldr	r2, [r7, #20]
 80103de:	6892      	ldr	r2, [r2, #8]
 80103e0:	0e12      	lsrs	r2, r2, #24
 80103e2:	b2d2      	uxtb	r2, r2
 80103e4:	701a      	strb	r2, [r3, #0]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	60ba      	str	r2, [r7, #8]
 80103ec:	697a      	ldr	r2, [r7, #20]
 80103ee:	6892      	ldr	r2, [r2, #8]
 80103f0:	0c12      	lsrs	r2, r2, #16
 80103f2:	b2d2      	uxtb	r2, r2
 80103f4:	701a      	strb	r2, [r3, #0]
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	60ba      	str	r2, [r7, #8]
 80103fc:	697a      	ldr	r2, [r7, #20]
 80103fe:	6892      	ldr	r2, [r2, #8]
 8010400:	0a12      	lsrs	r2, r2, #8
 8010402:	b2d2      	uxtb	r2, r2
 8010404:	701a      	strb	r2, [r3, #0]
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	1c5a      	adds	r2, r3, #1
 801040a:	60ba      	str	r2, [r7, #8]
 801040c:	697a      	ldr	r2, [r7, #20]
 801040e:	6892      	ldr	r2, [r2, #8]
 8010410:	b2d2      	uxtb	r2, r2
 8010412:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d009      	beq.n	8010436 <lcp_addci+0x1b8>
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	60ba      	str	r2, [r7, #8]
 8010428:	2207      	movs	r2, #7
 801042a:	701a      	strb	r2, [r3, #0]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	60ba      	str	r2, [r7, #8]
 8010432:	2202      	movs	r2, #2
 8010434:	701a      	strb	r2, [r3, #0]
    ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801043e:	b2db      	uxtb	r3, r3
 8010440:	2b00      	cmp	r3, #0
 8010442:	d009      	beq.n	8010458 <lcp_addci+0x1da>
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	60ba      	str	r2, [r7, #8]
 801044a:	2208      	movs	r2, #8
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	1c5a      	adds	r2, r3, #1
 8010452:	60ba      	str	r2, [r7, #8]
 8010454:	2202      	movs	r2, #2
 8010456:	701a      	strb	r2, [r3, #0]
#ifdef HAVE_MULTILINK
    ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif
    ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	785b      	ldrb	r3, [r3, #1]
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	b2db      	uxtb	r3, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	d009      	beq.n	801047a <lcp_addci+0x1fc>
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	60ba      	str	r2, [r7, #8]
 801046c:	2212      	movs	r2, #18
 801046e:	701a      	strb	r2, [r3, #0]
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	1c5a      	adds	r2, r3, #1
 8010474:	60ba      	str	r2, [r7, #8]
 8010476:	2202      	movs	r2, #2
 8010478:	701a      	strb	r2, [r3, #0]
    ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	785b      	ldrb	r3, [r3, #1]
 801047e:	f003 0304 	and.w	r3, r3, #4
 8010482:	b2db      	uxtb	r3, r3
 8010484:	2b00      	cmp	r3, #0
 8010486:	d027      	beq.n	80104d8 <lcp_addci+0x25a>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	1c5a      	adds	r2, r3, #1
 801048c:	60ba      	str	r2, [r7, #8]
 801048e:	2213      	movs	r2, #19
 8010490:	701a      	strb	r2, [r3, #0]
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	60ba      	str	r2, [r7, #8]
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	7b92      	ldrb	r2, [r2, #14]
 801049c:	3203      	adds	r2, #3
 801049e:	b2d2      	uxtb	r2, r2
 80104a0:	701a      	strb	r2, [r3, #0]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	60ba      	str	r2, [r7, #8]
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	7b52      	ldrb	r2, [r2, #13]
 80104ac:	701a      	strb	r2, [r3, #0]
 80104ae:	2300      	movs	r3, #0
 80104b0:	61fb      	str	r3, [r7, #28]
 80104b2:	e00b      	b.n	80104cc <lcp_addci+0x24e>
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	1c5a      	adds	r2, r3, #1
 80104b8:	60ba      	str	r2, [r7, #8]
 80104ba:	6979      	ldr	r1, [r7, #20]
 80104bc:	69fa      	ldr	r2, [r7, #28]
 80104be:	440a      	add	r2, r1
 80104c0:	320f      	adds	r2, #15
 80104c2:	7812      	ldrb	r2, [r2, #0]
 80104c4:	701a      	strb	r2, [r3, #0]
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	3301      	adds	r3, #1
 80104ca:	61fb      	str	r3, [r7, #28]
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	7b9b      	ldrb	r3, [r3, #14]
 80104d0:	461a      	mov	r2, r3
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	dced      	bgt.n	80104b4 <lcp_addci+0x236>

    if (ucp - start_ucp != *lenp) {
	/* this should never happen, because peer_mtu should be 1500 */
	ppp_error(("Bug in lcp_addci: wrong length"));
    }
}
 80104d8:	bf00      	nop
 80104da:	3724      	adds	r7, #36	; 0x24
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <lcp_ackci>:
 *
 * Returns:
 *	0 - Ack was bad.
 *	1 - Ack was good.
 */
static int lcp_ackci(fsm *f, u_char *p, int len) {
 80104e4:	b480      	push	{r7}
 80104e6:	b08b      	sub	sp, #44	; 0x2c
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	623b      	str	r3, [r7, #32]
    lcp_options *go = &pcb->lcp_gotoptions;
 80104f6:	6a3b      	ldr	r3, [r7, #32]
 80104f8:	3384      	adds	r3, #132	; 0x84
 80104fa:	61fb      	str	r3, [r7, #28]
	    if (cichar != val[i]) \
		goto bad; \
	} \
    }

    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	f003 0304 	and.w	r3, r3, #4
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d033      	beq.n	8010572 <lcp_ackci+0x8e>
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	885b      	ldrh	r3, [r3, #2]
 801050e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010512:	4293      	cmp	r3, r2
 8010514:	d02d      	beq.n	8010572 <lcp_ackci+0x8e>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	3b04      	subs	r3, #4
 801051a:	607b      	str	r3, [r7, #4]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f2c0 81c6 	blt.w	80108b0 <lcp_ackci+0x3cc>
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	60ba      	str	r2, [r7, #8]
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	76fb      	strb	r3, [r7, #27]
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	60ba      	str	r2, [r7, #8]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	76bb      	strb	r3, [r7, #26]
 8010538:	7ebb      	ldrb	r3, [r7, #26]
 801053a:	2b04      	cmp	r3, #4
 801053c:	f040 81d9 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010540:	7efb      	ldrb	r3, [r7, #27]
 8010542:	2b01      	cmp	r3, #1
 8010544:	f040 81d5 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	60ba      	str	r2, [r7, #8]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	b29b      	uxth	r3, r3
 8010552:	021b      	lsls	r3, r3, #8
 8010554:	833b      	strh	r3, [r7, #24]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	1c5a      	adds	r2, r3, #1
 801055a:	60ba      	str	r2, [r7, #8]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	b29a      	uxth	r2, r3
 8010560:	8b3b      	ldrh	r3, [r7, #24]
 8010562:	4313      	orrs	r3, r2
 8010564:	833b      	strh	r3, [r7, #24]
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	885b      	ldrh	r3, [r3, #2]
 801056a:	8b3a      	ldrh	r2, [r7, #24]
 801056c:	429a      	cmp	r2, r3
 801056e:	f040 81a1 	bne.w	80108b4 <lcp_ackci+0x3d0>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	f003 0308 	and.w	r3, r3, #8
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	d047      	beq.n	8010610 <lcp_ackci+0x12c>
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010588:	d042      	beq.n	8010610 <lcp_ackci+0x12c>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3b06      	subs	r3, #6
 801058e:	607b      	str	r3, [r7, #4]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	f2c0 8190 	blt.w	80108b8 <lcp_ackci+0x3d4>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	60ba      	str	r2, [r7, #8]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	76fb      	strb	r3, [r7, #27]
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	1c5a      	adds	r2, r3, #1
 80105a6:	60ba      	str	r2, [r7, #8]
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	76bb      	strb	r3, [r7, #26]
 80105ac:	7ebb      	ldrb	r3, [r7, #26]
 80105ae:	2b06      	cmp	r3, #6
 80105b0:	f040 819f 	bne.w	80108f2 <lcp_ackci+0x40e>
 80105b4:	7efb      	ldrb	r3, [r7, #27]
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	f040 819b 	bne.w	80108f2 <lcp_ackci+0x40e>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	60ba      	str	r2, [r7, #8]
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	021b      	lsls	r3, r3, #8
 80105c6:	617b      	str	r3, [r7, #20]
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	60ba      	str	r2, [r7, #8]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	4313      	orrs	r3, r2
 80105d6:	617b      	str	r3, [r7, #20]
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	021b      	lsls	r3, r3, #8
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	1c5a      	adds	r2, r3, #1
 80105e2:	60ba      	str	r2, [r7, #8]
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	461a      	mov	r2, r3
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	617b      	str	r3, [r7, #20]
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	021b      	lsls	r3, r3, #8
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	60ba      	str	r2, [r7, #8]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	461a      	mov	r2, r3
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	4313      	orrs	r3, r2
 8010602:	617b      	str	r3, [r7, #20]
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	429a      	cmp	r2, r3
 801060c:	f040 8156 	bne.w	80108bc <lcp_ackci+0x3d8>
#endif /* EAP_SUPPORT && !CHAP_SUPPORT */
#if !EAP_SUPPORT && CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
#endif /* !EAP_SUPPORT && CHAP_SUPPORT */
#if !EAP_SUPPORT && !CHAP_SUPPORT
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	f003 0310 	and.w	r3, r3, #16
 8010618:	b2db      	uxtb	r3, r3
 801061a:	2b00      	cmp	r3, #0
 801061c:	d02d      	beq.n	801067a <lcp_ackci+0x196>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	3b04      	subs	r3, #4
 8010622:	607b      	str	r3, [r7, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f2c0 814a 	blt.w	80108c0 <lcp_ackci+0x3dc>
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	60ba      	str	r2, [r7, #8]
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	76fb      	strb	r3, [r7, #27]
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	60ba      	str	r2, [r7, #8]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	76bb      	strb	r3, [r7, #26]
 8010640:	7ebb      	ldrb	r3, [r7, #26]
 8010642:	2b04      	cmp	r3, #4
 8010644:	f040 8155 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010648:	7efb      	ldrb	r3, [r7, #27]
 801064a:	2b03      	cmp	r3, #3
 801064c:	f040 8151 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	60ba      	str	r2, [r7, #8]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	b29b      	uxth	r3, r3
 801065a:	021b      	lsls	r3, r3, #8
 801065c:	833b      	strh	r3, [r7, #24]
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	60ba      	str	r2, [r7, #8]
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	b29a      	uxth	r2, r3
 8010668:	8b3b      	ldrh	r3, [r7, #24]
 801066a:	4313      	orrs	r3, r2
 801066c:	833b      	strh	r3, [r7, #24]
 801066e:	8b3b      	ldrh	r3, [r7, #24]
 8010670:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010674:	4293      	cmp	r3, r2
 8010676:	f040 8125 	bne.w	80108c4 <lcp_ackci+0x3e0>
#endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
#endif /* PAP_SUPPORT */
#if LQR_SUPPORT
    ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 801067a:	69fb      	ldr	r3, [r7, #28]
 801067c:	785b      	ldrb	r3, [r3, #1]
 801067e:	f003 0301 	and.w	r3, r3, #1
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b00      	cmp	r3, #0
 8010686:	d021      	beq.n	80106cc <lcp_ackci+0x1e8>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3b03      	subs	r3, #3
 801068c:	607b      	str	r3, [r7, #4]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f2c0 8119 	blt.w	80108c8 <lcp_ackci+0x3e4>
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	60ba      	str	r2, [r7, #8]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	76fb      	strb	r3, [r7, #27]
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	60ba      	str	r2, [r7, #8]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	76bb      	strb	r3, [r7, #26]
 80106aa:	7ebb      	ldrb	r3, [r7, #26]
 80106ac:	2b03      	cmp	r3, #3
 80106ae:	f040 8120 	bne.w	80108f2 <lcp_ackci+0x40e>
 80106b2:	7efb      	ldrb	r3, [r7, #27]
 80106b4:	2b0d      	cmp	r3, #13
 80106b6:	f040 811c 	bne.w	80108f2 <lcp_ackci+0x40e>
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	60ba      	str	r2, [r7, #8]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	74fb      	strb	r3, [r7, #19]
 80106c4:	7cfb      	ldrb	r3, [r7, #19]
 80106c6:	2b06      	cmp	r3, #6
 80106c8:	f040 8100 	bne.w	80108cc <lcp_ackci+0x3e8>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	f003 0320 	and.w	r3, r3, #32
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d042      	beq.n	8010760 <lcp_ackci+0x27c>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3b06      	subs	r3, #6
 80106de:	607b      	str	r3, [r7, #4]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f2c0 80f4 	blt.w	80108d0 <lcp_ackci+0x3ec>
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	60ba      	str	r2, [r7, #8]
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	76fb      	strb	r3, [r7, #27]
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	1c5a      	adds	r2, r3, #1
 80106f6:	60ba      	str	r2, [r7, #8]
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	76bb      	strb	r3, [r7, #26]
 80106fc:	7ebb      	ldrb	r3, [r7, #26]
 80106fe:	2b06      	cmp	r3, #6
 8010700:	f040 80f7 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010704:	7efb      	ldrb	r3, [r7, #27]
 8010706:	2b05      	cmp	r3, #5
 8010708:	f040 80f3 	bne.w	80108f2 <lcp_ackci+0x40e>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	1c5a      	adds	r2, r3, #1
 8010710:	60ba      	str	r2, [r7, #8]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	617b      	str	r3, [r7, #20]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	60ba      	str	r2, [r7, #8]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	461a      	mov	r2, r3
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	4313      	orrs	r3, r2
 8010726:	617b      	str	r3, [r7, #20]
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	021b      	lsls	r3, r3, #8
 801072c:	617b      	str	r3, [r7, #20]
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	1c5a      	adds	r2, r3, #1
 8010732:	60ba      	str	r2, [r7, #8]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	4313      	orrs	r3, r2
 801073c:	617b      	str	r3, [r7, #20]
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	021b      	lsls	r3, r3, #8
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	60ba      	str	r2, [r7, #8]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	461a      	mov	r2, r3
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	4313      	orrs	r3, r2
 8010752:	617b      	str	r3, [r7, #20]
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	689a      	ldr	r2, [r3, #8]
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	429a      	cmp	r2, r3
 801075c:	f040 80ba 	bne.w	80108d4 <lcp_ackci+0x3f0>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010768:	b2db      	uxtb	r3, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	d018      	beq.n	80107a0 <lcp_ackci+0x2bc>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	3b02      	subs	r3, #2
 8010772:	607b      	str	r3, [r7, #4]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f2c0 80ae 	blt.w	80108d8 <lcp_ackci+0x3f4>
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	1c5a      	adds	r2, r3, #1
 8010780:	60ba      	str	r2, [r7, #8]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	76fb      	strb	r3, [r7, #27]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	60ba      	str	r2, [r7, #8]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	76bb      	strb	r3, [r7, #26]
 8010790:	7ebb      	ldrb	r3, [r7, #26]
 8010792:	2b02      	cmp	r3, #2
 8010794:	f040 80ad 	bne.w	80108f2 <lcp_ackci+0x40e>
 8010798:	7efb      	ldrb	r3, [r7, #27]
 801079a:	2b07      	cmp	r3, #7
 801079c:	f040 80a9 	bne.w	80108f2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80107a8:	b2db      	uxtb	r3, r3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d018      	beq.n	80107e0 <lcp_ackci+0x2fc>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	3b02      	subs	r3, #2
 80107b2:	607b      	str	r3, [r7, #4]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f2c0 8090 	blt.w	80108dc <lcp_ackci+0x3f8>
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	60ba      	str	r2, [r7, #8]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	76fb      	strb	r3, [r7, #27]
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	60ba      	str	r2, [r7, #8]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	76bb      	strb	r3, [r7, #26]
 80107d0:	7ebb      	ldrb	r3, [r7, #26]
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	f040 808d 	bne.w	80108f2 <lcp_ackci+0x40e>
 80107d8:	7efb      	ldrb	r3, [r7, #27]
 80107da:	2b08      	cmp	r3, #8
 80107dc:	f040 8089 	bne.w	80108f2 <lcp_ackci+0x40e>
#ifdef HAVE_MULTILINK
    ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	785b      	ldrb	r3, [r3, #1]
 80107e4:	f003 0302 	and.w	r3, r3, #2
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d015      	beq.n	801081a <lcp_ackci+0x336>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3b02      	subs	r3, #2
 80107f2:	607b      	str	r3, [r7, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	db72      	blt.n	80108e0 <lcp_ackci+0x3fc>
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	60ba      	str	r2, [r7, #8]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	76fb      	strb	r3, [r7, #27]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	60ba      	str	r2, [r7, #8]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	76bb      	strb	r3, [r7, #26]
 801080e:	7ebb      	ldrb	r3, [r7, #26]
 8010810:	2b02      	cmp	r3, #2
 8010812:	d16e      	bne.n	80108f2 <lcp_ackci+0x40e>
 8010814:	7efb      	ldrb	r3, [r7, #27]
 8010816:	2b12      	cmp	r3, #18
 8010818:	d16b      	bne.n	80108f2 <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	785b      	ldrb	r3, [r3, #1]
 801081e:	f003 0304 	and.w	r3, r3, #4
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d03e      	beq.n	80108a6 <lcp_ackci+0x3c2>
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	7b9b      	ldrb	r3, [r3, #14]
 801082c:	3303      	adds	r3, #3
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	607b      	str	r3, [r7, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	db54      	blt.n	80108e4 <lcp_ackci+0x400>
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	1c5a      	adds	r2, r3, #1
 801083e:	60ba      	str	r2, [r7, #8]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	76fb      	strb	r3, [r7, #27]
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	60ba      	str	r2, [r7, #8]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	76bb      	strb	r3, [r7, #26]
 801084e:	7eba      	ldrb	r2, [r7, #26]
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	7b9b      	ldrb	r3, [r3, #14]
 8010854:	3303      	adds	r3, #3
 8010856:	429a      	cmp	r2, r3
 8010858:	d14b      	bne.n	80108f2 <lcp_ackci+0x40e>
 801085a:	7efb      	ldrb	r3, [r7, #27]
 801085c:	2b13      	cmp	r3, #19
 801085e:	d148      	bne.n	80108f2 <lcp_ackci+0x40e>
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	60ba      	str	r2, [r7, #8]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	74fb      	strb	r3, [r7, #19]
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	7b5b      	ldrb	r3, [r3, #13]
 801086e:	7cfa      	ldrb	r2, [r7, #19]
 8010870:	429a      	cmp	r2, r3
 8010872:	d139      	bne.n	80108e8 <lcp_ackci+0x404>
 8010874:	2300      	movs	r3, #0
 8010876:	627b      	str	r3, [r7, #36]	; 0x24
 8010878:	e00f      	b.n	801089a <lcp_ackci+0x3b6>
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	1c5a      	adds	r2, r3, #1
 801087e:	60ba      	str	r2, [r7, #8]
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	74fb      	strb	r3, [r7, #19]
 8010884:	69fa      	ldr	r2, [r7, #28]
 8010886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010888:	4413      	add	r3, r2
 801088a:	330f      	adds	r3, #15
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	7cfa      	ldrb	r2, [r7, #19]
 8010890:	429a      	cmp	r2, r3
 8010892:	d12b      	bne.n	80108ec <lcp_ackci+0x408>
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	3301      	adds	r3, #1
 8010898:	627b      	str	r3, [r7, #36]	; 0x24
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	7b9b      	ldrb	r3, [r3, #14]
 801089e:	461a      	mov	r2, r3
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	429a      	cmp	r2, r3
 80108a4:	dce9      	bgt.n	801087a <lcp_ackci+0x396>
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d121      	bne.n	80108f0 <lcp_ackci+0x40c>
	goto bad;
    return (1);
 80108ac:	2301      	movs	r3, #1
 80108ae:	e021      	b.n	80108f4 <lcp_ackci+0x410>
    ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
 80108b0:	bf00      	nop
 80108b2:	e01e      	b.n	80108f2 <lcp_ackci+0x40e>
 80108b4:	bf00      	nop
 80108b6:	e01c      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
 80108b8:	bf00      	nop
 80108ba:	e01a      	b.n	80108f2 <lcp_ackci+0x40e>
 80108bc:	bf00      	nop
 80108be:	e018      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
 80108c0:	bf00      	nop
 80108c2:	e016      	b.n	80108f2 <lcp_ackci+0x40e>
 80108c4:	bf00      	nop
 80108c6:	e014      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
 80108c8:	bf00      	nop
 80108ca:	e012      	b.n	80108f2 <lcp_ackci+0x40e>
 80108cc:	bf00      	nop
 80108ce:	e010      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
 80108d0:	bf00      	nop
 80108d2:	e00e      	b.n	80108f2 <lcp_ackci+0x40e>
 80108d4:	bf00      	nop
 80108d6:	e00c      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
 80108d8:	bf00      	nop
 80108da:	e00a      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
 80108dc:	bf00      	nop
 80108de:	e008      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
 80108e0:	bf00      	nop
 80108e2:	e006      	b.n	80108f2 <lcp_ackci+0x40e>
    ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
 80108e4:	bf00      	nop
 80108e6:	e004      	b.n	80108f2 <lcp_ackci+0x40e>
 80108e8:	bf00      	nop
 80108ea:	e002      	b.n	80108f2 <lcp_ackci+0x40e>
 80108ec:	bf00      	nop
 80108ee:	e000      	b.n	80108f2 <lcp_ackci+0x40e>
	goto bad;
 80108f0:	bf00      	nop
bad:
    LCPDEBUG(("lcp_acki: received bad Ack!"));
    return (0);
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	372c      	adds	r7, #44	; 0x2c
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <lcp_nakci>:
 *
 * Returns:
 *	0 - Nak was bad.
 *	1 - Nak was good.
 */
static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
 8010900:	b5b0      	push	{r4, r5, r7, lr}
 8010902:	b0a0      	sub	sp, #128	; 0x80
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	67bb      	str	r3, [r7, #120]	; 0x78
    lcp_options *go = &pcb->lcp_gotoptions;
 8010914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010916:	3384      	adds	r3, #132	; 0x84
 8010918:	677b      	str	r3, [r7, #116]	; 0x74
    lcp_options *wo = &pcb->lcp_wantoptions;
 801091a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801091c:	3360      	adds	r3, #96	; 0x60
 801091e:	673b      	str	r3, [r7, #112]	; 0x70
    u_char citype, cichar, *next;
    u_short cishort;
    u32_t cilong;
    lcp_options no;		/* options we've seen Naks for */
    lcp_options try_;		/* options to request next time */
    int looped_back = 0;
 8010920:	2300      	movs	r3, #0
 8010922:	67fb      	str	r3, [r7, #124]	; 0x7c
    int cilen;

    BZERO(&no, sizeof(no));
 8010924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010928:	2224      	movs	r2, #36	; 0x24
 801092a:	2100      	movs	r1, #0
 801092c:	4618      	mov	r0, r3
 801092e:	f003 fb16 	bl	8013f5e <memset>
    try_ = *go;
 8010932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010934:	f107 0414 	add.w	r4, r7, #20
 8010938:	461d      	mov	r5, r3
 801093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010942:	682b      	ldr	r3, [r5, #0]
 8010944:	6023      	str	r3, [r4, #0]
     * we want.  Therefore, accept any MRU less than what we asked for,
     * but then ignore the new value when setting the MRU in the kernel.
     * If they send us a bigger MRU than what we asked, accept it, up to
     * the limit of the default MRU we'd get if we didn't negotiate.
     */
    if (go->neg_mru && go->mru != PPP_DEFMRU) {
 8010946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0304 	and.w	r3, r3, #4
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d045      	beq.n	80109e0 <lcp_nakci+0xe0>
 8010954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010956:	885b      	ldrh	r3, [r3, #2]
 8010958:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801095c:	4293      	cmp	r3, r2
 801095e:	d03f      	beq.n	80109e0 <lcp_nakci+0xe0>
	NAKCISHORT(CI_MRU, neg_mru,
 8010960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f003 0304 	and.w	r3, r3, #4
 8010968:	b2db      	uxtb	r3, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d038      	beq.n	80109e0 <lcp_nakci+0xe0>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b03      	cmp	r3, #3
 8010972:	dd35      	ble.n	80109e0 <lcp_nakci+0xe0>
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	3301      	adds	r3, #1
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	2b04      	cmp	r3, #4
 801097c:	d130      	bne.n	80109e0 <lcp_nakci+0xe0>
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	2b01      	cmp	r3, #1
 8010984:	d12c      	bne.n	80109e0 <lcp_nakci+0xe0>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3b04      	subs	r3, #4
 801098a:	607b      	str	r3, [r7, #4]
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	3302      	adds	r3, #2
 8010990:	60bb      	str	r3, [r7, #8]
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	1c5a      	adds	r2, r3, #1
 8010996:	60ba      	str	r2, [r7, #8]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	b29b      	uxth	r3, r3
 801099c:	021b      	lsls	r3, r3, #8
 801099e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	60ba      	str	r2, [r7, #8]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80109b0:	4313      	orrs	r3, r2
 80109b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80109b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80109ba:	f043 0304 	orr.w	r3, r3, #4
 80109be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80109c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109c4:	885b      	ldrh	r3, [r3, #2]
 80109c6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d905      	bls.n	80109da <lcp_nakci+0xda>
 80109ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80109d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d802      	bhi.n	80109e0 <lcp_nakci+0xe0>
 80109da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80109de:	82fb      	strh	r3, [r7, #22]
    }

    /*
     * Add any characters they want to our (receive-side) asyncmap.
     */
    if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
 80109e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	f003 0308 	and.w	r3, r3, #8
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d04c      	beq.n	8010a88 <lcp_nakci+0x188>
 80109ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f6:	d047      	beq.n	8010a88 <lcp_nakci+0x188>
	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
 80109f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	f003 0308 	and.w	r3, r3, #8
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d040      	beq.n	8010a88 <lcp_nakci+0x188>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b05      	cmp	r3, #5
 8010a0a:	dd3d      	ble.n	8010a88 <lcp_nakci+0x188>
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2b06      	cmp	r3, #6
 8010a14:	d138      	bne.n	8010a88 <lcp_nakci+0x188>
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d134      	bne.n	8010a88 <lcp_nakci+0x188>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	3b06      	subs	r3, #6
 8010a22:	607b      	str	r3, [r7, #4]
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	3302      	adds	r3, #2
 8010a28:	60bb      	str	r3, [r7, #8]
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	1c5a      	adds	r2, r3, #1
 8010a2e:	60ba      	str	r2, [r7, #8]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	021b      	lsls	r3, r3, #8
 8010a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	60ba      	str	r2, [r7, #8]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a42:	4313      	orrs	r3, r2
 8010a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a48:	021b      	lsls	r3, r3, #8
 8010a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	60ba      	str	r2, [r7, #8]
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	461a      	mov	r2, r3
 8010a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a5e:	021b      	lsls	r3, r3, #8
 8010a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	1c5a      	adds	r2, r3, #1
 8010a66:	60ba      	str	r2, [r7, #8]
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8010a72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010a76:	f043 0308 	orr.w	r3, r3, #8
 8010a7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a84:	4313      	orrs	r3, r2
 8010a86:	61bb      	str	r3, [r7, #24]
    if ((0
#if CHAP_SUPPORT
        || go->neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
        || go->neg_upap
 8010a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f003 0310 	and.w	r3, r3, #16
 8010a90:	b2db      	uxtb	r3, r3
    if ((0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d04d      	beq.n	8010b32 <lcp_nakci+0x232>
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
        || go->neg_eap
#endif /* EAP_SUPPORT */
        )
	&& len >= CILEN_SHORT
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b03      	cmp	r3, #3
 8010a9a:	dd4a      	ble.n	8010b32 <lcp_nakci+0x232>
	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d146      	bne.n	8010b32 <lcp_nakci+0x232>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	2b03      	cmp	r3, #3
 8010aac:	d941      	bls.n	8010b32 <lcp_nakci+0x232>
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	dc3a      	bgt.n	8010b32 <lcp_nakci+0x232>
	cilen = p[1];
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	667b      	str	r3, [r7, #100]	; 0x64
	len -= cilen;
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	607b      	str	r3, [r7, #4]
#if CHAP_SUPPORT
	no.neg_chap = go->neg_chap;
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	no.neg_upap = go->neg_upap;
 8010acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ada:	f362 1304 	bfi	r3, r2, #4, #1
 8010ade:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif /* PAP_SUPPORT */
#if EAP_SUPPORT
	no.neg_eap = go->neg_eap;
#endif /* EAP_SUPPORT */
	INCPTR(2, p);
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	3302      	adds	r3, #2
 8010ae6:	60bb      	str	r3, [r7, #8]
	GETSHORT(cishort, p);
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	1c5a      	adds	r2, r3, #1
 8010aec:	60ba      	str	r2, [r7, #8]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	021b      	lsls	r3, r3, #8
 8010af4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	1c5a      	adds	r2, r3, #1
 8010afc:	60ba      	str	r2, [r7, #8]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010b06:	4313      	orrs	r3, r2
 8010b08:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

#if PAP_SUPPORT
	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
 8010b0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010b10:	f24c 0223 	movw	r2, #49187	; 0xc023
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d103      	bne.n	8010b20 <lcp_nakci+0x220>
 8010b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b1a:	2b04      	cmp	r3, #4
 8010b1c:	f000 8265 	beq.w	8010fea <lcp_nakci+0x6ea>
	    else
#endif /* CHAP_SUPPORT */

#if PAP_SUPPORT
	    if(1)
		try_.neg_upap = 0;
 8010b20:	7d3b      	ldrb	r3, [r7, #20]
 8010b22:	f36f 1304 	bfc	r3, #4, #1
 8010b26:	753b      	strb	r3, [r7, #20]
	    else
#endif /* PAP_SUPPORT */
	    {}

	    p += cilen - CILEN_SHORT;
 8010b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b2a:	3b04      	subs	r3, #4
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	4413      	add	r3, r2
 8010b30:	60bb      	str	r3, [r7, #8]
#endif /* LQR_SUPPORT */

    /*
     * Only implementing CBCP...not the rest of the callback options
     */
    NAKCICHAR(CI_CALLBACK, neg_cbcp,
 8010b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b34:	785b      	ldrb	r3, [r3, #1]
 8010b36:	f003 0301 	and.w	r3, r3, #1
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d021      	beq.n	8010b84 <lcp_nakci+0x284>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	dd1e      	ble.n	8010b84 <lcp_nakci+0x284>
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	2b03      	cmp	r3, #3
 8010b4e:	d119      	bne.n	8010b84 <lcp_nakci+0x284>
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b0d      	cmp	r3, #13
 8010b56:	d115      	bne.n	8010b84 <lcp_nakci+0x284>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	3b03      	subs	r3, #3
 8010b5c:	607b      	str	r3, [r7, #4]
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	3302      	adds	r3, #2
 8010b62:	60bb      	str	r3, [r7, #8]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	1c5a      	adds	r2, r3, #1
 8010b68:	60ba      	str	r2, [r7, #8]
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8010b70:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010b74:	f043 0301 	orr.w	r3, r3, #1
 8010b78:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010b7c:	7d7b      	ldrb	r3, [r7, #21]
 8010b7e:	f36f 0300 	bfc	r3, #0, #1
 8010b82:	757b      	strb	r3, [r7, #21]
              );

    /*
     * Check for a looped-back line.
     */
    NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
 8010b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	f003 0320 	and.w	r3, r3, #32
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d041      	beq.n	8010c16 <lcp_nakci+0x316>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b05      	cmp	r3, #5
 8010b96:	dd3e      	ble.n	8010c16 <lcp_nakci+0x316>
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	2b06      	cmp	r3, #6
 8010ba0:	d139      	bne.n	8010c16 <lcp_nakci+0x316>
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b05      	cmp	r3, #5
 8010ba8:	d135      	bne.n	8010c16 <lcp_nakci+0x316>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3b06      	subs	r3, #6
 8010bae:	607b      	str	r3, [r7, #4]
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	3302      	adds	r3, #2
 8010bb4:	60bb      	str	r3, [r7, #8]
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	1c5a      	adds	r2, r3, #1
 8010bba:	60ba      	str	r2, [r7, #8]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	021b      	lsls	r3, r3, #8
 8010bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	1c5a      	adds	r2, r3, #1
 8010bc6:	60ba      	str	r2, [r7, #8]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bd4:	021b      	lsls	r3, r3, #8
 8010bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	1c5a      	adds	r2, r3, #1
 8010bdc:	60ba      	str	r2, [r7, #8]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	461a      	mov	r2, r3
 8010be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010be4:	4313      	orrs	r3, r2
 8010be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bea:	021b      	lsls	r3, r3, #8
 8010bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	1c5a      	adds	r2, r3, #1
 8010bf2:	60ba      	str	r2, [r7, #8]
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8010bfe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010c02:	f043 0320 	orr.w	r3, r3, #32
 8010c06:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010c0a:	f001 f965 	bl	8011ed8 <magic>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	61fb      	str	r3, [r7, #28]
 8010c12:	2301      	movs	r3, #1
 8010c14:	67fb      	str	r3, [r7, #124]	; 0x7c
    /*
     * Peer shouldn't send Nak for protocol compression or
     * address/control compression requests; they should send
     * a Reject instead.  If they send a Nak, treat it as a Reject.
     */
    NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8010c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d01b      	beq.n	8010c5c <lcp_nakci+0x35c>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	dd18      	ble.n	8010c5c <lcp_nakci+0x35c>
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2b02      	cmp	r3, #2
 8010c32:	d113      	bne.n	8010c5c <lcp_nakci+0x35c>
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	2b07      	cmp	r3, #7
 8010c3a:	d10f      	bne.n	8010c5c <lcp_nakci+0x35c>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	3b02      	subs	r3, #2
 8010c40:	607b      	str	r3, [r7, #4]
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	3302      	adds	r3, #2
 8010c46:	60bb      	str	r3, [r7, #8]
 8010c48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010c54:	7d3b      	ldrb	r3, [r7, #20]
 8010c56:	f36f 1386 	bfc	r3, #6, #1
 8010c5a:	753b      	strb	r3, [r7, #20]
    NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
 8010c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d01b      	beq.n	8010ca2 <lcp_nakci+0x3a2>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	dd18      	ble.n	8010ca2 <lcp_nakci+0x3a2>
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	3301      	adds	r3, #1
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	d113      	bne.n	8010ca2 <lcp_nakci+0x3a2>
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b08      	cmp	r3, #8
 8010c80:	d10f      	bne.n	8010ca2 <lcp_nakci+0x3a2>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	3b02      	subs	r3, #2
 8010c86:	607b      	str	r3, [r7, #4]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	3302      	adds	r3, #2
 8010c8c:	60bb      	str	r3, [r7, #8]
 8010c8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c96:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010c9a:	7d3b      	ldrb	r3, [r7, #20]
 8010c9c:	f36f 13c7 	bfc	r3, #7, #1
 8010ca0:	753b      	strb	r3, [r7, #20]

    /*
     * Nak for short sequence numbers shouldn't be sent, treat it
     * like a reject.
     */
    NAKCIVOID(CI_SSNHF, neg_ssnhf);
 8010ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ca4:	785b      	ldrb	r3, [r3, #1]
 8010ca6:	f003 0302 	and.w	r3, r3, #2
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01b      	beq.n	8010ce8 <lcp_nakci+0x3e8>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	dd18      	ble.n	8010ce8 <lcp_nakci+0x3e8>
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	2b02      	cmp	r3, #2
 8010cbe:	d113      	bne.n	8010ce8 <lcp_nakci+0x3e8>
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	2b12      	cmp	r3, #18
 8010cc6:	d10f      	bne.n	8010ce8 <lcp_nakci+0x3e8>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	3b02      	subs	r3, #2
 8010ccc:	607b      	str	r3, [r7, #4]
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	3302      	adds	r3, #2
 8010cd2:	60bb      	str	r3, [r7, #8]
 8010cd4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010cd8:	f043 0302 	orr.w	r3, r3, #2
 8010cdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010ce0:	7d7b      	ldrb	r3, [r7, #21]
 8010ce2:	f36f 0341 	bfc	r3, #1, #1
 8010ce6:	757b      	strb	r3, [r7, #21]

    /*
     * Nak of the endpoint discriminator option is not permitted,
     * treat it like a reject.
     */
    NAKCIENDP(CI_EPDISC, neg_endpoint);
 8010ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cea:	785b      	ldrb	r3, [r3, #1]
 8010cec:	f003 0304 	and.w	r3, r3, #4
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 8148 	beq.w	8010f88 <lcp_nakci+0x688>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	f340 8144 	ble.w	8010f88 <lcp_nakci+0x688>
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	2b13      	cmp	r3, #19
 8010d06:	f040 813f 	bne.w	8010f88 <lcp_nakci+0x688>
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	f240 8139 	bls.w	8010f88 <lcp_nakci+0x688>
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	f300 8131 	bgt.w	8010f88 <lcp_nakci+0x688>
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	1a9b      	subs	r3, r3, r2
 8010d32:	607b      	str	r3, [r7, #4]
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	3301      	adds	r3, #1
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	4413      	add	r3, r2
 8010d40:	60bb      	str	r3, [r7, #8]
 8010d42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010d46:	f043 0304 	orr.w	r3, r3, #4
 8010d4a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8010d4e:	7d7b      	ldrb	r3, [r7, #21]
 8010d50:	f36f 0382 	bfc	r3, #2, #1
 8010d54:	757b      	strb	r3, [r7, #21]
     * For the quality protocol, the Nak means `ask me to send you quality
     * reports', but if we didn't ask for them, we don't want them.
     * An option we don't recognize represents the peer asking to
     * negotiate some option we don't support, so ignore it.
     */
    while (len >= CILEN_VOID) {
 8010d56:	e117      	b.n	8010f88 <lcp_nakci+0x688>
	GETCHAR(citype, p);
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	60ba      	str	r2, [r7, #8]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	GETCHAR(cilen, p);
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	1c5a      	adds	r2, r3, #1
 8010d68:	60ba      	str	r2, [r7, #8]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	667b      	str	r3, [r7, #100]	; 0x64
	if (cilen < CILEN_VOID || (len -= cilen) < 0)
 8010d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	f340 813a 	ble.w	8010fea <lcp_nakci+0x6ea>
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	607b      	str	r3, [r7, #4]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f2c0 8132 	blt.w	8010fea <lcp_nakci+0x6ea>
	    goto bad;
	next = p + cilen - 2;
 8010d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d88:	3b02      	subs	r3, #2
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	65fb      	str	r3, [r7, #92]	; 0x5c

	switch (citype) {
 8010d90:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8010d94:	3b01      	subs	r3, #1
 8010d96:	2b12      	cmp	r3, #18
 8010d98:	f200 80f1 	bhi.w	8010f7e <lcp_nakci+0x67e>
 8010d9c:	a201      	add	r2, pc, #4	; (adr r2, 8010da4 <lcp_nakci+0x4a4>)
 8010d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da2:	bf00      	nop
 8010da4:	08010df1 	.word	0x08010df1
 8010da8:	08010e67 	.word	0x08010e67
 8010dac:	08010e9b 	.word	0x08010e9b
 8010db0:	08010f7f 	.word	0x08010f7f
 8010db4:	08010ebd 	.word	0x08010ebd
 8010db8:	08010f7f 	.word	0x08010f7f
 8010dbc:	08010ee7 	.word	0x08010ee7
 8010dc0:	08010f0b 	.word	0x08010f0b
 8010dc4:	08010f7f 	.word	0x08010f7f
 8010dc8:	08010f7f 	.word	0x08010f7f
 8010dcc:	08010f7f 	.word	0x08010f7f
 8010dd0:	08010f7f 	.word	0x08010f7f
 8010dd4:	08010f7f 	.word	0x08010f7f
 8010dd8:	08010f7f 	.word	0x08010f7f
 8010ddc:	08010f7f 	.word	0x08010f7f
 8010de0:	08010f7f 	.word	0x08010f7f
 8010de4:	08010f7f 	.word	0x08010f7f
 8010de8:	08010f2f 	.word	0x08010f2f
 8010dec:	08010f5b 	.word	0x08010f5b
	case CI_MRU:
	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
 8010df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d006      	beq.n	8010e0c <lcp_nakci+0x50c>
 8010dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e00:	885b      	ldrh	r3, [r3, #2]
 8010e02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010e06:	4293      	cmp	r3, r2
 8010e08:	f040 80ef 	bne.w	8010fea <lcp_nakci+0x6ea>
		|| no.neg_mru || cilen != CILEN_SHORT)
 8010e0c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e10:	f003 0304 	and.w	r3, r3, #4
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f040 80e7 	bne.w	8010fea <lcp_nakci+0x6ea>
 8010e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e1e:	2b04      	cmp	r3, #4
 8010e20:	f040 80e3 	bne.w	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    GETSHORT(cishort, p);
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	1c5a      	adds	r2, r3, #1
 8010e28:	60ba      	str	r2, [r7, #8]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	021b      	lsls	r3, r3, #8
 8010e30:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	1c5a      	adds	r2, r3, #1
 8010e38:	60ba      	str	r2, [r7, #8]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010e42:	4313      	orrs	r3, r2
 8010e44:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	    if (cishort < PPP_DEFMRU) {
 8010e48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010e4c:	f240 52db 	movw	r2, #1499	; 0x5db
 8010e50:	4293      	cmp	r3, r2
 8010e52:	f200 8096 	bhi.w	8010f82 <lcp_nakci+0x682>
		try_.neg_mru = 1;
 8010e56:	7d3b      	ldrb	r3, [r7, #20]
 8010e58:	f043 0304 	orr.w	r3, r3, #4
 8010e5c:	753b      	strb	r3, [r7, #20]
		try_.mru = cishort;
 8010e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010e62:	82fb      	strh	r3, [r7, #22]
	    }
	    break;
 8010e64:	e08d      	b.n	8010f82 <lcp_nakci+0x682>
	case CI_ASYNCMAP:
	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
 8010e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	f003 0308 	and.w	r3, r3, #8
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d005      	beq.n	8010e80 <lcp_nakci+0x580>
 8010e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e7c:	f040 80b5 	bne.w	8010fea <lcp_nakci+0x6ea>
		|| no.neg_asyncmap || cilen != CILEN_LONG)
 8010e80:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e84:	f003 0308 	and.w	r3, r3, #8
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f040 80ad 	bne.w	8010fea <lcp_nakci+0x6ea>
 8010e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e92:	2b06      	cmp	r3, #6
 8010e94:	f040 80a9 	bne.w	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010e98:	e074      	b.n	8010f84 <lcp_nakci+0x684>
	    if ((0
#if CHAP_SUPPORT
                || go->neg_chap || no.neg_chap
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
                || go->neg_upap || no.neg_upap
 8010e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	f003 0310 	and.w	r3, r3, #16
 8010ea2:	b2db      	uxtb	r3, r3
	    if ((0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f040 80a0 	bne.w	8010fea <lcp_nakci+0x6ea>
                || go->neg_upap || no.neg_upap
 8010eaa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010eae:	f003 0310 	and.w	r3, r3, #16
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f040 8098 	bne.w	8010fea <lcp_nakci+0x6ea>
#if EAP_SUPPORT
		|| go->neg_eap || no.neg_eap
#endif /* EAP_SUPPORT */
		))
		goto bad;
	    break;
 8010eba:	e063      	b.n	8010f84 <lcp_nakci+0x684>
	case CI_MAGICNUMBER:
	    if (go->neg_magicnumber || no.neg_magicnumber ||
 8010ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	f003 0320 	and.w	r3, r3, #32
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f040 808f 	bne.w	8010fea <lcp_nakci+0x6ea>
 8010ecc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ed0:	f003 0320 	and.w	r3, r3, #32
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f040 8087 	bne.w	8010fea <lcp_nakci+0x6ea>
 8010edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ede:	2b06      	cmp	r3, #6
 8010ee0:	f040 8083 	bne.w	8010fea <lcp_nakci+0x6ea>
		cilen != CILEN_LONG)
		goto bad;
	    break;
 8010ee4:	e04e      	b.n	8010f84 <lcp_nakci+0x684>
	case CI_PCOMPRESSION:
	    if (go->neg_pcompression || no.neg_pcompression
 8010ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d17a      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010ef4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d173      	bne.n	8010fea <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8010f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	d170      	bne.n	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010f08:	e03c      	b.n	8010f84 <lcp_nakci+0x684>
	case CI_ACCOMPRESSION:
	    if (go->neg_accompression || no.neg_accompression
 8010f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d168      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010f18:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d161      	bne.n	8010fea <lcp_nakci+0x6ea>
		|| cilen != CILEN_VOID)
 8010f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	d15e      	bne.n	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010f2c:	e02a      	b.n	8010f84 <lcp_nakci+0x684>
	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
		goto bad;
	    break;
#endif /* HAVE_MULTILINK */
	case CI_SSNHF:
	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
 8010f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f30:	785b      	ldrb	r3, [r3, #1]
 8010f32:	f003 0302 	and.w	r3, r3, #2
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d156      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010f3c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010f40:	f003 0302 	and.w	r3, r3, #2
 8010f44:	b2db      	uxtb	r3, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d14f      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	d14c      	bne.n	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    try_.neg_ssnhf = 1;
 8010f50:	7d7b      	ldrb	r3, [r7, #21]
 8010f52:	f043 0302 	orr.w	r3, r3, #2
 8010f56:	757b      	strb	r3, [r7, #21]
	    break;
 8010f58:	e014      	b.n	8010f84 <lcp_nakci+0x684>
	case CI_EPDISC:
	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
 8010f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f5c:	785b      	ldrb	r3, [r3, #1]
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d140      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010f68:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010f6c:	f003 0304 	and.w	r3, r3, #4
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d139      	bne.n	8010fea <lcp_nakci+0x6ea>
 8010f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	dd36      	ble.n	8010fea <lcp_nakci+0x6ea>
		goto bad;
	    break;
 8010f7c:	e002      	b.n	8010f84 <lcp_nakci+0x684>
	default:
	    break;
 8010f7e:	bf00      	nop
 8010f80:	e000      	b.n	8010f84 <lcp_nakci+0x684>
	    break;
 8010f82:	bf00      	nop
	}
	p = next;
 8010f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f86:	60bb      	str	r3, [r7, #8]
    while (len >= CILEN_VOID) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	f73f aee4 	bgt.w	8010d58 <lcp_nakci+0x458>

    /*
     * OK, the Nak is good.  Now we can update state.
     * If there are any options left we ignore them.
     */
    if (f->state != PPP_FSM_OPENED) {
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	7c1b      	ldrb	r3, [r3, #16]
 8010f94:	2b09      	cmp	r3, #9
 8010f96:	d026      	beq.n	8010fe6 <lcp_nakci+0x6e6>
	if (looped_back) {
 8010f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d016      	beq.n	8010fcc <lcp_nakci+0x6cc>
	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
 8010f9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f887 3020 	strb.w	r3, [r7, #32]
 8010faa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fb0:	7c9b      	ldrb	r3, [r3, #18]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d30d      	bcc.n	8010fd2 <lcp_nakci+0x6d2>
		ppp_notice(("Serial line is looped back."));
		pcb->err_code = PPPERR_LOOPBACK;
 8010fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fb8:	220c      	movs	r2, #12
 8010fba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		lcp_close(f->pcb, "Loopback detected");
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	490c      	ldr	r1, [pc, #48]	; (8010ff4 <lcp_nakci+0x6f4>)
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fe feb7 	bl	800fd38 <lcp_close>
 8010fca:	e002      	b.n	8010fd2 <lcp_nakci+0x6d2>
	    }
	} else
	    try_.numloops = 0;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	f887 3020 	strb.w	r3, [r7, #32]
	*go = try_;
 8010fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fd4:	461d      	mov	r5, r3
 8010fd6:	f107 0414 	add.w	r4, r7, #20
 8010fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	602b      	str	r3, [r5, #0]
    }

    return 1;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e000      	b.n	8010fec <lcp_nakci+0x6ec>

bad:
    LCPDEBUG(("lcp_nakci: received bad Nak!"));
    return 0;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3780      	adds	r7, #128	; 0x80
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ff4:	08017934 	.word	0x08017934

08010ff8 <lcp_rejci>:
 *
 * Returns:
 *	0 - Reject was bad.
 *	1 - Reject was good.
 */
static int lcp_rejci(fsm *f, u_char *p, int len) {
 8010ff8:	b4b0      	push	{r4, r5, r7}
 8010ffa:	b095      	sub	sp, #84	; 0x54
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	607a      	str	r2, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	64bb      	str	r3, [r7, #72]	; 0x48
    lcp_options *go = &pcb->lcp_gotoptions;
 801100a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801100c:	3384      	adds	r3, #132	; 0x84
 801100e:	647b      	str	r3, [r7, #68]	; 0x44
    u_char cichar;
    u_short cishort;
    u32_t cilong;
    lcp_options try_;		/* options to request next time */

    try_ = *go;
 8011010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011012:	f107 0414 	add.w	r4, r7, #20
 8011016:	461d      	mov	r5, r3
 8011018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011020:	682b      	ldr	r3, [r5, #0]
 8011022:	6023      	str	r3, [r4, #0]
		goto bad; \
	} \
	try_.neg = 0; \
    }

    REJCISHORT(CI_MRU, neg_mru, go->mru);
 8011024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	f003 0304 	and.w	r3, r3, #4
 801102c:	b2db      	uxtb	r3, r3
 801102e:	2b00      	cmp	r3, #0
 8011030:	d02e      	beq.n	8011090 <lcp_rejci+0x98>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b03      	cmp	r3, #3
 8011036:	dd2b      	ble.n	8011090 <lcp_rejci+0x98>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	3301      	adds	r3, #1
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	2b04      	cmp	r3, #4
 8011040:	d126      	bne.n	8011090 <lcp_rejci+0x98>
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d122      	bne.n	8011090 <lcp_rejci+0x98>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3b04      	subs	r3, #4
 801104e:	607b      	str	r3, [r7, #4]
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	3302      	adds	r3, #2
 8011054:	60bb      	str	r3, [r7, #8]
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	1c5a      	adds	r2, r3, #1
 801105a:	60ba      	str	r2, [r7, #8]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	b29b      	uxth	r3, r3
 8011060:	021b      	lsls	r3, r3, #8
 8011062:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	60ba      	str	r2, [r7, #8]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	b29a      	uxth	r2, r3
 8011070:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011074:	4313      	orrs	r3, r2
 8011076:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801107a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801107c:	885b      	ldrh	r3, [r3, #2]
 801107e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011082:	429a      	cmp	r2, r3
 8011084:	f040 81a8 	bne.w	80113d8 <lcp_rejci+0x3e0>
 8011088:	7d3b      	ldrb	r3, [r7, #20]
 801108a:	f36f 0382 	bfc	r3, #2, #1
 801108e:	753b      	strb	r3, [r7, #20]
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 8011090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f003 0308 	and.w	r3, r3, #8
 8011098:	b2db      	uxtb	r3, r3
 801109a:	2b00      	cmp	r3, #0
 801109c:	d03f      	beq.n	801111e <lcp_rejci+0x126>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b05      	cmp	r3, #5
 80110a2:	dd3c      	ble.n	801111e <lcp_rejci+0x126>
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	3301      	adds	r3, #1
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	2b06      	cmp	r3, #6
 80110ac:	d137      	bne.n	801111e <lcp_rejci+0x126>
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d133      	bne.n	801111e <lcp_rejci+0x126>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	3b06      	subs	r3, #6
 80110ba:	607b      	str	r3, [r7, #4]
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	3302      	adds	r3, #2
 80110c0:	60bb      	str	r3, [r7, #8]
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	1c5a      	adds	r2, r3, #1
 80110c6:	60ba      	str	r2, [r7, #8]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	021b      	lsls	r3, r3, #8
 80110cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	60ba      	str	r2, [r7, #8]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	461a      	mov	r2, r3
 80110d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110da:	4313      	orrs	r3, r2
 80110dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e0:	021b      	lsls	r3, r3, #8
 80110e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	1c5a      	adds	r2, r3, #1
 80110e8:	60ba      	str	r2, [r7, #8]
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	461a      	mov	r2, r3
 80110ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f0:	4313      	orrs	r3, r2
 80110f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f6:	021b      	lsls	r3, r3, #8
 80110f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	60ba      	str	r2, [r7, #8]
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011106:	4313      	orrs	r3, r2
 8011108:	63fb      	str	r3, [r7, #60]	; 0x3c
 801110a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011110:	429a      	cmp	r2, r3
 8011112:	f040 8163 	bne.w	80113dc <lcp_rejci+0x3e4>
 8011116:	7d3b      	ldrb	r3, [r7, #20]
 8011118:	f36f 03c3 	bfc	r3, #3, #1
 801111c:	753b      	strb	r3, [r7, #20]
#if CHAP_SUPPORT
	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
	if (!go->neg_chap) {
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 801111e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	f003 0310 	and.w	r3, r3, #16
 8011126:	b2db      	uxtb	r3, r3
 8011128:	2b00      	cmp	r3, #0
 801112a:	d02e      	beq.n	801118a <lcp_rejci+0x192>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2b03      	cmp	r3, #3
 8011130:	dd2b      	ble.n	801118a <lcp_rejci+0x192>
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	3301      	adds	r3, #1
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b04      	cmp	r3, #4
 801113a:	d126      	bne.n	801118a <lcp_rejci+0x192>
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	2b03      	cmp	r3, #3
 8011142:	d122      	bne.n	801118a <lcp_rejci+0x192>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3b04      	subs	r3, #4
 8011148:	607b      	str	r3, [r7, #4]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	3302      	adds	r3, #2
 801114e:	60bb      	str	r3, [r7, #8]
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	1c5a      	adds	r2, r3, #1
 8011154:	60ba      	str	r2, [r7, #8]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	b29b      	uxth	r3, r3
 801115a:	021b      	lsls	r3, r3, #8
 801115c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	60ba      	str	r2, [r7, #8]
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	b29a      	uxth	r2, r3
 801116a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801116e:	4313      	orrs	r3, r2
 8011170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011178:	f24c 0223 	movw	r2, #49187	; 0xc023
 801117c:	4293      	cmp	r3, r2
 801117e:	f040 812f 	bne.w	80113e0 <lcp_rejci+0x3e8>
 8011182:	7d3b      	ldrb	r3, [r7, #20]
 8011184:	f36f 1304 	bfc	r3, #4, #1
 8011188:	753b      	strb	r3, [r7, #20]
    }
#endif /* EAP_SUPPORT */
#if LQR_SUPPORT
    REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
#endif /* LQR_SUPPORT */
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 801118a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801118c:	785b      	ldrb	r3, [r3, #1]
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	d020      	beq.n	80111da <lcp_rejci+0x1e2>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b02      	cmp	r3, #2
 801119c:	dd1d      	ble.n	80111da <lcp_rejci+0x1e2>
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	3301      	adds	r3, #1
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	2b03      	cmp	r3, #3
 80111a6:	d118      	bne.n	80111da <lcp_rejci+0x1e2>
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b0d      	cmp	r3, #13
 80111ae:	d114      	bne.n	80111da <lcp_rejci+0x1e2>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	3b03      	subs	r3, #3
 80111b4:	607b      	str	r3, [r7, #4]
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	3302      	adds	r3, #2
 80111ba:	60bb      	str	r3, [r7, #8]
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	1c5a      	adds	r2, r3, #1
 80111c0:	60ba      	str	r2, [r7, #8]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80111c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80111cc:	2b06      	cmp	r3, #6
 80111ce:	f040 8109 	bne.w	80113e4 <lcp_rejci+0x3ec>
 80111d2:	7d7b      	ldrb	r3, [r7, #21]
 80111d4:	f36f 0300 	bfc	r3, #0, #1
 80111d8:	757b      	strb	r3, [r7, #21]
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80111da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	f003 0320 	and.w	r3, r3, #32
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d03f      	beq.n	8011268 <lcp_rejci+0x270>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b05      	cmp	r3, #5
 80111ec:	dd3c      	ble.n	8011268 <lcp_rejci+0x270>
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	3301      	adds	r3, #1
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b06      	cmp	r3, #6
 80111f6:	d137      	bne.n	8011268 <lcp_rejci+0x270>
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b05      	cmp	r3, #5
 80111fe:	d133      	bne.n	8011268 <lcp_rejci+0x270>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3b06      	subs	r3, #6
 8011204:	607b      	str	r3, [r7, #4]
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	3302      	adds	r3, #2
 801120a:	60bb      	str	r3, [r7, #8]
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	60ba      	str	r2, [r7, #8]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	021b      	lsls	r3, r3, #8
 8011216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	1c5a      	adds	r2, r3, #1
 801121c:	60ba      	str	r2, [r7, #8]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	461a      	mov	r2, r3
 8011222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011224:	4313      	orrs	r3, r2
 8011226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122a:	021b      	lsls	r3, r3, #8
 801122c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	60ba      	str	r2, [r7, #8]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801123a:	4313      	orrs	r3, r2
 801123c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801123e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011240:	021b      	lsls	r3, r3, #8
 8011242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	1c5a      	adds	r2, r3, #1
 8011248:	60ba      	str	r2, [r7, #8]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	461a      	mov	r2, r3
 801124e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011250:	4313      	orrs	r3, r2
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801125a:	429a      	cmp	r2, r3
 801125c:	f040 80c4 	bne.w	80113e8 <lcp_rejci+0x3f0>
 8011260:	7d3b      	ldrb	r3, [r7, #20]
 8011262:	f36f 1345 	bfc	r3, #5, #1
 8011266:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
 8011268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b00      	cmp	r3, #0
 8011274:	d015      	beq.n	80112a2 <lcp_rejci+0x2aa>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b01      	cmp	r3, #1
 801127a:	dd12      	ble.n	80112a2 <lcp_rejci+0x2aa>
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	3301      	adds	r3, #1
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	2b02      	cmp	r3, #2
 8011284:	d10d      	bne.n	80112a2 <lcp_rejci+0x2aa>
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b07      	cmp	r3, #7
 801128c:	d109      	bne.n	80112a2 <lcp_rejci+0x2aa>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3b02      	subs	r3, #2
 8011292:	607b      	str	r3, [r7, #4]
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	3302      	adds	r3, #2
 8011298:	60bb      	str	r3, [r7, #8]
 801129a:	7d3b      	ldrb	r3, [r7, #20]
 801129c:	f36f 1386 	bfc	r3, #6, #1
 80112a0:	753b      	strb	r3, [r7, #20]
    REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
 80112a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d015      	beq.n	80112dc <lcp_rejci+0x2e4>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	dd12      	ble.n	80112dc <lcp_rejci+0x2e4>
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	3301      	adds	r3, #1
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d10d      	bne.n	80112dc <lcp_rejci+0x2e4>
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b08      	cmp	r3, #8
 80112c6:	d109      	bne.n	80112dc <lcp_rejci+0x2e4>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	3b02      	subs	r3, #2
 80112cc:	607b      	str	r3, [r7, #4]
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	3302      	adds	r3, #2
 80112d2:	60bb      	str	r3, [r7, #8]
 80112d4:	7d3b      	ldrb	r3, [r7, #20]
 80112d6:	f36f 13c7 	bfc	r3, #7, #1
 80112da:	753b      	strb	r3, [r7, #20]
#ifdef HAVE_MULTILINK
    REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
#endif /* HAVE_MULTILINK */
    REJCIVOID(CI_SSNHF, neg_ssnhf);
 80112dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112de:	785b      	ldrb	r3, [r3, #1]
 80112e0:	f003 0302 	and.w	r3, r3, #2
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d015      	beq.n	8011316 <lcp_rejci+0x31e>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	dd12      	ble.n	8011316 <lcp_rejci+0x31e>
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	3301      	adds	r3, #1
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d10d      	bne.n	8011316 <lcp_rejci+0x31e>
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b12      	cmp	r3, #18
 8011300:	d109      	bne.n	8011316 <lcp_rejci+0x31e>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	3b02      	subs	r3, #2
 8011306:	607b      	str	r3, [r7, #4]
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	3302      	adds	r3, #2
 801130c:	60bb      	str	r3, [r7, #8]
 801130e:	7d7b      	ldrb	r3, [r7, #21]
 8011310:	f36f 0341 	bfc	r3, #1, #1
 8011314:	757b      	strb	r3, [r7, #21]
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 8011316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011318:	785b      	ldrb	r3, [r3, #1]
 801131a:	f003 0304 	and.w	r3, r3, #4
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d046      	beq.n	80113b2 <lcp_rejci+0x3ba>
 8011324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011326:	7b9b      	ldrb	r3, [r3, #14]
 8011328:	1cda      	adds	r2, r3, #3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	429a      	cmp	r2, r3
 801132e:	dc40      	bgt.n	80113b2 <lcp_rejci+0x3ba>
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	2b13      	cmp	r3, #19
 8011336:	d13c      	bne.n	80113b2 <lcp_rejci+0x3ba>
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	3301      	adds	r3, #1
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	461a      	mov	r2, r3
 8011340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011342:	7b9b      	ldrb	r3, [r3, #14]
 8011344:	3303      	adds	r3, #3
 8011346:	429a      	cmp	r2, r3
 8011348:	d133      	bne.n	80113b2 <lcp_rejci+0x3ba>
 801134a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134c:	7b9b      	ldrb	r3, [r3, #14]
 801134e:	3303      	adds	r3, #3
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	607b      	str	r3, [r7, #4]
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	3302      	adds	r3, #2
 801135a:	60bb      	str	r3, [r7, #8]
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	60ba      	str	r2, [r7, #8]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8011368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801136a:	7b5b      	ldrb	r3, [r3, #13]
 801136c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011370:	429a      	cmp	r2, r3
 8011372:	d13b      	bne.n	80113ec <lcp_rejci+0x3f4>
 8011374:	2300      	movs	r3, #0
 8011376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011378:	e011      	b.n	801139e <lcp_rejci+0x3a6>
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	60ba      	str	r2, [r7, #8]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8011386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138a:	4413      	add	r3, r2
 801138c:	330f      	adds	r3, #15
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011394:	429a      	cmp	r2, r3
 8011396:	d12b      	bne.n	80113f0 <lcp_rejci+0x3f8>
 8011398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139a:	3301      	adds	r3, #1
 801139c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113a0:	7b9b      	ldrb	r3, [r3, #14]
 80113a2:	461a      	mov	r2, r3
 80113a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a6:	429a      	cmp	r2, r3
 80113a8:	dce7      	bgt.n	801137a <lcp_rejci+0x382>
 80113aa:	7d7b      	ldrb	r3, [r7, #21]
 80113ac:	f36f 0382 	bfc	r3, #2, #1
 80113b0:	757b      	strb	r3, [r7, #21]
	      go->endpoint.value, go->endpoint.length);

    /*
     * If there are any remaining CIs, then this packet is bad.
     */
    if (len != 0)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d11d      	bne.n	80113f4 <lcp_rejci+0x3fc>
	goto bad;
    /*
     * Now we can update state.
     */
    if (f->state != PPP_FSM_OPENED)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	7c1b      	ldrb	r3, [r3, #16]
 80113bc:	2b09      	cmp	r3, #9
 80113be:	d009      	beq.n	80113d4 <lcp_rejci+0x3dc>
	*go = try_;
 80113c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113c2:	461d      	mov	r5, r3
 80113c4:	f107 0414 	add.w	r4, r7, #20
 80113c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113d0:	6823      	ldr	r3, [r4, #0]
 80113d2:	602b      	str	r3, [r5, #0]
    return 1;
 80113d4:	2301      	movs	r3, #1
 80113d6:	e00f      	b.n	80113f8 <lcp_rejci+0x400>
    REJCISHORT(CI_MRU, neg_mru, go->mru);
 80113d8:	bf00      	nop
 80113da:	e00c      	b.n	80113f6 <lcp_rejci+0x3fe>
    REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
 80113dc:	bf00      	nop
 80113de:	e00a      	b.n	80113f6 <lcp_rejci+0x3fe>
	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
 80113e0:	bf00      	nop
 80113e2:	e008      	b.n	80113f6 <lcp_rejci+0x3fe>
    REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
 80113e4:	bf00      	nop
 80113e6:	e006      	b.n	80113f6 <lcp_rejci+0x3fe>
    REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
 80113e8:	bf00      	nop
 80113ea:	e004      	b.n	80113f6 <lcp_rejci+0x3fe>
    REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
 80113ec:	bf00      	nop
 80113ee:	e002      	b.n	80113f6 <lcp_rejci+0x3fe>
 80113f0:	bf00      	nop
 80113f2:	e000      	b.n	80113f6 <lcp_rejci+0x3fe>
	goto bad;
 80113f4:	bf00      	nop

bad:
    LCPDEBUG(("lcp_rejci: received bad Reject!"));
    return 0;
 80113f6:	2300      	movs	r3, #0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3754      	adds	r7, #84	; 0x54
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bcb0      	pop	{r4, r5, r7}
 8011400:	4770      	bx	lr
	...

08011404 <lcp_reqci>:
 * CONFNAK; returns CONFREJ if it can't return CONFACK.
 *
 * inp = Requested CIs
 * lenp = Length of requested CIs
 */
static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
 8011404:	b580      	push	{r7, lr}
 8011406:	b096      	sub	sp, #88	; 0x58
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	607a      	str	r2, [r7, #4]
 8011410:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	637b      	str	r3, [r7, #52]	; 0x34
    lcp_options *go = &pcb->lcp_gotoptions;
 8011418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141a:	3384      	adds	r3, #132	; 0x84
 801141c:	633b      	str	r3, [r7, #48]	; 0x30
    lcp_options *ho = &pcb->lcp_hisoptions;
 801141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011420:	33cc      	adds	r3, #204	; 0xcc
 8011422:	62fb      	str	r3, [r7, #44]	; 0x2c
    lcp_options *ao = &pcb->lcp_allowoptions;
 8011424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011426:	33a8      	adds	r3, #168	; 0xa8
 8011428:	62bb      	str	r3, [r7, #40]	; 0x28
    u_char *cip, *next;		/* Pointer to current and next CIs */
    int cilen, citype, cichar;	/* Parsed len, type, char value */
    u_short cishort;		/* Parsed short value */
    u32_t cilong;		/* Parse long value */
    int rc = CONFACK;		/* Final packet return code */
 801142a:	2302      	movs	r3, #2
 801142c:	64bb      	str	r3, [r7, #72]	; 0x48
    int orc;			/* Individual option return code */
    u_char *p;			/* Pointer to next char to parse */
    u_char *rejp;		/* Pointer to next char in reject frame */
    struct pbuf *nakp;          /* Nak buffer */
    u_char *nakoutp;		/* Pointer to next char in Nak frame */
    int l = *lenp;		/* Length left */
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Reset all his options.
     */
    BZERO(ho, sizeof(*ho));
 8011434:	2224      	movs	r2, #36	; 0x24
 8011436:	2100      	movs	r1, #0
 8011438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801143a:	f002 fd90 	bl	8013f5e <memset>

    /*
     * Process all his options.
     */
    next = inp;
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	657b      	str	r3, [r7, #84]	; 0x54
    nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_UNKNOWN_SIZE), PBUF_RAM);
 8011442:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011446:	f44f 7100 	mov.w	r1, #512	; 0x200
 801144a:	2000      	movs	r0, #0
 801144c:	f7f4 fbe0 	bl	8005c10 <pbuf_alloc>
 8011450:	6278      	str	r0, [r7, #36]	; 0x24
    if(NULL == nakp)
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	2b00      	cmp	r3, #0
 8011456:	d101      	bne.n	801145c <lcp_reqci+0x58>
        return 0;
 8011458:	2300      	movs	r3, #0
 801145a:	e2b4      	b.n	80119c6 <lcp_reqci+0x5c2>
    if(nakp->tot_len != nakp->len) {
 801145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145e:	891a      	ldrh	r2, [r3, #8]
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	895b      	ldrh	r3, [r3, #10]
 8011464:	429a      	cmp	r2, r3
 8011466:	d004      	beq.n	8011472 <lcp_reqci+0x6e>
        pbuf_free(nakp);
 8011468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801146a:	f7f4 fe3b 	bl	80060e4 <pbuf_free>
        return 0;
 801146e:	2300      	movs	r3, #0
 8011470:	e2a9      	b.n	80119c6 <lcp_reqci+0x5c2>
    }

    nakoutp = (u_char*)nakp->payload;
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
    rejp = inp;
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 801147c:	e278      	b.n	8011970 <lcp_reqci+0x56c>
	orc = CONFACK;			/* Assume success */
 801147e:	2302      	movs	r3, #2
 8011480:	647b      	str	r3, [r7, #68]	; 0x44
	cip = p = next;			/* Remember beginning of CI */
 8011482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011484:	623b      	str	r3, [r7, #32]
 8011486:	6a3b      	ldr	r3, [r7, #32]
 8011488:	61fb      	str	r3, [r7, #28]
	if (l < 2 ||			/* Not enough data for CI header or */
 801148a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148c:	2b01      	cmp	r3, #1
 801148e:	dd0b      	ble.n	80114a8 <lcp_reqci+0xa4>
	    p[1] < 2 ||			/*  CI length too small or */
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	3301      	adds	r3, #1
 8011494:	781b      	ldrb	r3, [r3, #0]
	if (l < 2 ||			/* Not enough data for CI header or */
 8011496:	2b01      	cmp	r3, #1
 8011498:	d906      	bls.n	80114a8 <lcp_reqci+0xa4>
	    p[1] > l) {			/*  CI length too big? */
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	3301      	adds	r3, #1
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	461a      	mov	r2, r3
	    p[1] < 2 ||			/*  CI length too small or */
 80114a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a4:	429a      	cmp	r2, r3
 80114a6:	dd08      	ble.n	80114ba <lcp_reqci+0xb6>
	    LCPDEBUG(("lcp_reqci: bad CI length!"));
	    orc = CONFREJ;		/* Reject bad CI */
 80114a8:	2304      	movs	r3, #4
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
	    cilen = l;			/* Reject till end of packet */
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	653b      	str	r3, [r7, #80]	; 0x50
	    l = 0;			/* Don't loop again */
 80114b0:	2300      	movs	r3, #0
 80114b2:	63bb      	str	r3, [r7, #56]	; 0x38
	    citype = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	    goto endswitch;
 80114b8:	e22e      	b.n	8011918 <lcp_reqci+0x514>
	}
	GETCHAR(citype, p);		/* Parse CI type */
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	623a      	str	r2, [r7, #32]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GETCHAR(cilen, p);		/* Parse CI length */
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	1c5a      	adds	r2, r3, #1
 80114c8:	623a      	str	r2, [r7, #32]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	653b      	str	r3, [r7, #80]	; 0x50
	l -= cilen;			/* Adjust remaining length */
 80114ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	63bb      	str	r3, [r7, #56]	; 0x38
	next += cilen;			/* Step to next CI */
 80114d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114da:	4413      	add	r3, r2
 80114dc:	657b      	str	r3, [r7, #84]	; 0x54

	switch (citype) {		/* Check CI type */
 80114de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114e0:	3b01      	subs	r3, #1
 80114e2:	2b12      	cmp	r3, #18
 80114e4:	f200 8215 	bhi.w	8011912 <lcp_reqci+0x50e>
 80114e8:	a201      	add	r2, pc, #4	; (adr r2, 80114f0 <lcp_reqci+0xec>)
 80114ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ee:	bf00      	nop
 80114f0:	0801153d 	.word	0x0801153d
 80114f4:	080115bb 	.word	0x080115bb
 80114f8:	080116a9 	.word	0x080116a9
 80114fc:	08011913 	.word	0x08011913
 8011500:	0801174f 	.word	0x0801174f
 8011504:	08011913 	.word	0x08011913
 8011508:	0801183f 	.word	0x0801183f
 801150c:	08011865 	.word	0x08011865
 8011510:	08011913 	.word	0x08011913
 8011514:	08011913 	.word	0x08011913
 8011518:	08011913 	.word	0x08011913
 801151c:	08011913 	.word	0x08011913
 8011520:	08011913 	.word	0x08011913
 8011524:	08011913 	.word	0x08011913
 8011528:	08011913 	.word	0x08011913
 801152c:	08011913 	.word	0x08011913
 8011530:	08011913 	.word	0x08011913
 8011534:	0801188b 	.word	0x0801188b
 8011538:	080118b1 	.word	0x080118b1
	case CI_MRU:
	    if (!ao->neg_mru ||		/* Allow option? */
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	f003 0304 	and.w	r3, r3, #4
 8011544:	b2db      	uxtb	r3, r3
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <lcp_reqci+0x14c>
 801154a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801154c:	2b04      	cmp	r3, #4
 801154e:	d002      	beq.n	8011556 <lcp_reqci+0x152>
		cilen != CILEN_SHORT) {	/* Check CI length */
		orc = CONFREJ;		/* Reject CI */
 8011550:	2304      	movs	r3, #4
 8011552:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011554:	e1e0      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);	/* Parse MRU */
 8011556:	6a3b      	ldr	r3, [r7, #32]
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	623a      	str	r2, [r7, #32]
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	b29b      	uxth	r3, r3
 8011560:	021b      	lsls	r3, r3, #8
 8011562:	837b      	strh	r3, [r7, #26]
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	623a      	str	r2, [r7, #32]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	b29a      	uxth	r2, r3
 801156e:	8b7b      	ldrh	r3, [r7, #26]
 8011570:	4313      	orrs	r3, r2
 8011572:	837b      	strh	r3, [r7, #26]
	    /*
	     * He must be able to receive at least our minimum.
	     * No need to check a maximum.  If he sends a large number,
	     * we'll just ignore it.
	     */
	    if (cishort < PPP_MINMRU) {
 8011574:	8b7b      	ldrh	r3, [r7, #26]
 8011576:	2b7f      	cmp	r3, #127	; 0x7f
 8011578:	d816      	bhi.n	80115a8 <lcp_reqci+0x1a4>
		orc = CONFNAK;		/* Nak CI */
 801157a:	2303      	movs	r3, #3
 801157c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MRU, nakoutp);
 801157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011584:	2201      	movs	r2, #1
 8011586:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_SHORT, nakoutp);
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	1c5a      	adds	r2, r3, #1
 801158c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801158e:	2204      	movs	r2, #4
 8011590:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
 8011592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011594:	1c5a      	adds	r2, r3, #1
 8011596:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011598:	2200      	movs	r2, #0
 801159a:	701a      	strb	r2, [r3, #0]
 801159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159e:	1c5a      	adds	r2, r3, #1
 80115a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80115a2:	2280      	movs	r2, #128	; 0x80
 80115a4:	701a      	strb	r2, [r3, #0]
		break;
 80115a6:	e1b7      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_mru = 1;		/* Remember he sent MRU */
 80115a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115aa:	7813      	ldrb	r3, [r2, #0]
 80115ac:	f043 0304 	orr.w	r3, r3, #4
 80115b0:	7013      	strb	r3, [r2, #0]
	    ho->mru = cishort;		/* And remember value */
 80115b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b4:	8b7a      	ldrh	r2, [r7, #26]
 80115b6:	805a      	strh	r2, [r3, #2]
	    break;
 80115b8:	e1ae      	b.n	8011918 <lcp_reqci+0x514>

	case CI_ASYNCMAP:
	    if (!ao->neg_asyncmap ||
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	f003 0308 	and.w	r3, r3, #8
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <lcp_reqci+0x1ca>
 80115c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ca:	2b06      	cmp	r3, #6
 80115cc:	d002      	beq.n	80115d4 <lcp_reqci+0x1d0>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 80115ce:	2304      	movs	r3, #4
 80115d0:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80115d2:	e1a1      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	1c5a      	adds	r2, r3, #1
 80115d8:	623a      	str	r2, [r7, #32]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	021b      	lsls	r3, r3, #8
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	6a3b      	ldr	r3, [r7, #32]
 80115e2:	1c5a      	adds	r2, r3, #1
 80115e4:	623a      	str	r2, [r7, #32]
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	461a      	mov	r2, r3
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	4313      	orrs	r3, r2
 80115ee:	617b      	str	r3, [r7, #20]
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	021b      	lsls	r3, r3, #8
 80115f4:	617b      	str	r3, [r7, #20]
 80115f6:	6a3b      	ldr	r3, [r7, #32]
 80115f8:	1c5a      	adds	r2, r3, #1
 80115fa:	623a      	str	r2, [r7, #32]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	461a      	mov	r2, r3
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	4313      	orrs	r3, r2
 8011604:	617b      	str	r3, [r7, #20]
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	021b      	lsls	r3, r3, #8
 801160a:	617b      	str	r3, [r7, #20]
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	623a      	str	r2, [r7, #32]
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	461a      	mov	r2, r3
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	4313      	orrs	r3, r2
 801161a:	617b      	str	r3, [r7, #20]

	    /*
	     * Asyncmap must have set at least the bits
	     * which are set in lcp_allowoptions[unit].asyncmap.
	     */
	    if ((ao->asyncmap & ~cilong) != 0) {
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	685a      	ldr	r2, [r3, #4]
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	43db      	mvns	r3, r3
 8011624:	4013      	ands	r3, r2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d035      	beq.n	8011696 <lcp_reqci+0x292>
		orc = CONFNAK;
 801162a:	2303      	movs	r3, #3
 801162c:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_ASYNCMAP, nakoutp);
 801162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011630:	1c5a      	adds	r2, r3, #1
 8011632:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011634:	2202      	movs	r2, #2
 8011636:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 8011638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801163a:	1c5a      	adds	r2, r3, #1
 801163c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801163e:	2206      	movs	r2, #6
 8011640:	701a      	strb	r2, [r3, #0]
		PUTLONG(ao->asyncmap | cilong, nakoutp);
 8011642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011644:	1c5a      	adds	r2, r3, #1
 8011646:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801164a:	6851      	ldr	r1, [r2, #4]
 801164c:	697a      	ldr	r2, [r7, #20]
 801164e:	430a      	orrs	r2, r1
 8011650:	0e12      	lsrs	r2, r2, #24
 8011652:	b2d2      	uxtb	r2, r2
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011658:	1c5a      	adds	r2, r3, #1
 801165a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801165c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801165e:	6851      	ldr	r1, [r2, #4]
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	430a      	orrs	r2, r1
 8011664:	0c12      	lsrs	r2, r2, #16
 8011666:	b2d2      	uxtb	r2, r2
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011672:	6851      	ldr	r1, [r2, #4]
 8011674:	697a      	ldr	r2, [r7, #20]
 8011676:	430a      	orrs	r2, r1
 8011678:	0a12      	lsrs	r2, r2, #8
 801167a:	b2d2      	uxtb	r2, r2
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011680:	1c5a      	adds	r2, r3, #1
 8011682:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011686:	6852      	ldr	r2, [r2, #4]
 8011688:	b2d1      	uxtb	r1, r2
 801168a:	697a      	ldr	r2, [r7, #20]
 801168c:	b2d2      	uxtb	r2, r2
 801168e:	430a      	orrs	r2, r1
 8011690:	b2d2      	uxtb	r2, r2
 8011692:	701a      	strb	r2, [r3, #0]
		break;
 8011694:	e140      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_asyncmap = 1;
 8011696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011698:	7813      	ldrb	r3, [r2, #0]
 801169a:	f043 0308 	orr.w	r3, r3, #8
 801169e:	7013      	strb	r3, [r2, #0]
	    ho->asyncmap = cilong;
 80116a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a2:	697a      	ldr	r2, [r7, #20]
 80116a4:	605a      	str	r2, [r3, #4]
	    break;
 80116a6:	e137      	b.n	8011918 <lcp_reqci+0x514>

	case CI_AUTHTYPE:
	    if (cilen < CILEN_SHORT ||
 80116a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	dd06      	ble.n	80116bc <lcp_reqci+0x2b8>
		!(0
#if PAP_SUPPORT
		|| ao->neg_upap
 80116ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b0:	781b      	ldrb	r3, [r3, #0]
		!(0
 80116b2:	f003 0310 	and.w	r3, r3, #16
 80116b6:	b2db      	uxtb	r3, r3
	    if (cilen < CILEN_SHORT ||
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d102      	bne.n	80116c2 <lcp_reqci+0x2be>
		)) {
		/*
		 * Reject the option if we're not willing to authenticate.
		 */
		ppp_dbglog(("No auth is possible"));
		orc = CONFREJ;
 80116bc:	2304      	movs	r3, #4
 80116be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80116c0:	e12a      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    GETSHORT(cishort, p);
 80116c2:	6a3b      	ldr	r3, [r7, #32]
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	623a      	str	r2, [r7, #32]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	021b      	lsls	r3, r3, #8
 80116ce:	837b      	strh	r3, [r7, #26]
 80116d0:	6a3b      	ldr	r3, [r7, #32]
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	623a      	str	r2, [r7, #32]
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	b29a      	uxth	r2, r3
 80116da:	8b7b      	ldrh	r3, [r7, #26]
 80116dc:	4313      	orrs	r3, r2
 80116de:	837b      	strh	r3, [r7, #26]
	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
	     * the ordering of the CIs in the peer's Configure-Request.
             */

#if PAP_SUPPORT
	    if (cishort == PPP_PAP) {
 80116e0:	8b7b      	ldrh	r3, [r7, #26]
 80116e2:	f24c 0223 	movw	r2, #49187	; 0xc023
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d11a      	bne.n	8011720 <lcp_reqci+0x31c>
		/* we've already accepted CHAP or EAP */
		if (0
 80116ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116ec:	2b04      	cmp	r3, #4
 80116ee:	d002      	beq.n	80116f6 <lcp_reqci+0x2f2>
#if EAP_SUPPORT
		    || ho->neg_eap
#endif /* EAP_SUPPORT */
		    || cilen != CILEN_SHORT) {
		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
		    orc = CONFREJ;
 80116f0:	2304      	movs	r3, #4
 80116f2:	647b      	str	r3, [r7, #68]	; 0x44
		    break;
 80116f4:	e110      	b.n	8011918 <lcp_reqci+0x514>
		}
		if (!ao->neg_upap) {	/* we don't want to do PAP */
 80116f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	f003 0310 	and.w	r3, r3, #16
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	2b00      	cmp	r3, #0
 8011702:	d107      	bne.n	8011714 <lcp_reqci+0x310>
		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
 8011704:	2303      	movs	r3, #3
 8011706:	647b      	str	r3, [r7, #68]	; 0x44
		    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8011708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801170e:	2203      	movs	r2, #3
 8011710:	701a      	strb	r2, [r3, #0]
			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
#endif /* CHAP_SUPPORT */
#if EAP_SUPPORT
		    }
#endif /* EAP_SUPPORT */
		    break;
 8011712:	e101      	b.n	8011918 <lcp_reqci+0x514>
		}
		ho->neg_upap = 1;
 8011714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011716:	7813      	ldrb	r3, [r2, #0]
 8011718:	f043 0310 	orr.w	r3, r3, #16
 801171c:	7013      	strb	r3, [r2, #0]
		break;
 801171e:	e0fb      	b.n	8011918 <lcp_reqci+0x514>
	     * We don't recognize the protocol they're asking for.
	     * Nak it with something we're willing to do.
	     * (At this point we know ao->neg_upap || ao->neg_chap ||
	     * ao->neg_eap.)
	     */
	    orc = CONFNAK;
 8011720:	2303      	movs	r3, #3
 8011722:	647b      	str	r3, [r7, #68]	; 0x44
	    PUTCHAR(CI_AUTHTYPE, nakoutp);
 8011724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	63fa      	str	r2, [r7, #60]	; 0x3c
 801172a:	2203      	movs	r2, #3
 801172c:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
	    } else
#endif /* CHAP_SUPPORT */
#if PAP_SUPPORT
	    if(1) {
		PUTCHAR(CILEN_SHORT, nakoutp);
 801172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011734:	2204      	movs	r2, #4
 8011736:	701a      	strb	r2, [r3, #0]
		PUTSHORT(PPP_PAP, nakoutp);
 8011738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801173e:	22c0      	movs	r2, #192	; 0xc0
 8011740:	701a      	strb	r2, [r3, #0]
 8011742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011748:	2223      	movs	r2, #35	; 0x23
 801174a:	701a      	strb	r2, [r3, #0]
	    } else
#endif /* PAP_SUPPORT */
	    {}
	    break;
 801174c:	e0e4      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    break;
#endif /* LQR_SUPPORT */

	case CI_MAGICNUMBER:
	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
 801174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	f003 0320 	and.w	r3, r3, #32
 8011756:	b2db      	uxtb	r3, r3
 8011758:	2b00      	cmp	r3, #0
 801175a:	d106      	bne.n	801176a <lcp_reqci+0x366>
 801175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	f003 0320 	and.w	r3, r3, #32
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	d002      	beq.n	8011770 <lcp_reqci+0x36c>
 801176a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801176c:	2b06      	cmp	r3, #6
 801176e:	d002      	beq.n	8011776 <lcp_reqci+0x372>
		cilen != CILEN_LONG) {
		orc = CONFREJ;
 8011770:	2304      	movs	r3, #4
 8011772:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011774:	e0d0      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    GETLONG(cilong, p);
 8011776:	6a3b      	ldr	r3, [r7, #32]
 8011778:	1c5a      	adds	r2, r3, #1
 801177a:	623a      	str	r2, [r7, #32]
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	021b      	lsls	r3, r3, #8
 8011780:	617b      	str	r3, [r7, #20]
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	1c5a      	adds	r2, r3, #1
 8011786:	623a      	str	r2, [r7, #32]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	461a      	mov	r2, r3
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	4313      	orrs	r3, r2
 8011790:	617b      	str	r3, [r7, #20]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	021b      	lsls	r3, r3, #8
 8011796:	617b      	str	r3, [r7, #20]
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	623a      	str	r2, [r7, #32]
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	461a      	mov	r2, r3
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	4313      	orrs	r3, r2
 80117a6:	617b      	str	r3, [r7, #20]
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	021b      	lsls	r3, r3, #8
 80117ac:	617b      	str	r3, [r7, #20]
 80117ae:	6a3b      	ldr	r3, [r7, #32]
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	623a      	str	r2, [r7, #32]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	4313      	orrs	r3, r2
 80117bc:	617b      	str	r3, [r7, #20]

	    /*
	     * He must have a different magic number.
	     */
	    if (go->neg_magicnumber &&
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	f003 0320 	and.w	r3, r3, #32
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d02f      	beq.n	801182c <lcp_reqci+0x428>
		cilong == go->magicnumber) {
 80117cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ce:	689a      	ldr	r2, [r3, #8]
	    if (go->neg_magicnumber &&
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d12a      	bne.n	801182c <lcp_reqci+0x428>
		cilong = magic();	/* Don't put magic() inside macro! */
 80117d6:	f000 fb7f 	bl	8011ed8 <magic>
 80117da:	6178      	str	r0, [r7, #20]
		orc = CONFNAK;
 80117dc:	2303      	movs	r3, #3
 80117de:	647b      	str	r3, [r7, #68]	; 0x44
		PUTCHAR(CI_MAGICNUMBER, nakoutp);
 80117e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e2:	1c5a      	adds	r2, r3, #1
 80117e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80117e6:	2205      	movs	r2, #5
 80117e8:	701a      	strb	r2, [r3, #0]
		PUTCHAR(CILEN_LONG, nakoutp);
 80117ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ec:	1c5a      	adds	r2, r3, #1
 80117ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80117f0:	2206      	movs	r2, #6
 80117f2:	701a      	strb	r2, [r3, #0]
		PUTLONG(cilong, nakoutp);
 80117f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f6:	1c5a      	adds	r2, r3, #1
 80117f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80117fa:	697a      	ldr	r2, [r7, #20]
 80117fc:	0e12      	lsrs	r2, r2, #24
 80117fe:	b2d2      	uxtb	r2, r2
 8011800:	701a      	strb	r2, [r3, #0]
 8011802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011808:	697a      	ldr	r2, [r7, #20]
 801180a:	0c12      	lsrs	r2, r2, #16
 801180c:	b2d2      	uxtb	r2, r2
 801180e:	701a      	strb	r2, [r3, #0]
 8011810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011812:	1c5a      	adds	r2, r3, #1
 8011814:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	0a12      	lsrs	r2, r2, #8
 801181a:	b2d2      	uxtb	r2, r2
 801181c:	701a      	strb	r2, [r3, #0]
 801181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011820:	1c5a      	adds	r2, r3, #1
 8011822:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011824:	697a      	ldr	r2, [r7, #20]
 8011826:	b2d2      	uxtb	r2, r2
 8011828:	701a      	strb	r2, [r3, #0]
		break;
 801182a:	e075      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_magicnumber = 1;
 801182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801182e:	7813      	ldrb	r3, [r2, #0]
 8011830:	f043 0320 	orr.w	r3, r3, #32
 8011834:	7013      	strb	r3, [r2, #0]
	    ho->magicnumber = cilong;
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	697a      	ldr	r2, [r7, #20]
 801183a:	609a      	str	r2, [r3, #8]
	    break;
 801183c:	e06c      	b.n	8011918 <lcp_reqci+0x514>


	case CI_PCOMPRESSION:
	    if (!ao->neg_pcompression ||
 801183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <lcp_reqci+0x44e>
 801184c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801184e:	2b02      	cmp	r3, #2
 8011850:	d002      	beq.n	8011858 <lcp_reqci+0x454>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8011852:	2304      	movs	r3, #4
 8011854:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 8011856:	e05f      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_pcompression = 1;
 8011858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801185a:	7813      	ldrb	r3, [r2, #0]
 801185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011860:	7013      	strb	r3, [r2, #0]
	    break;
 8011862:	e059      	b.n	8011918 <lcp_reqci+0x514>

	case CI_ACCOMPRESSION:
	    if (!ao->neg_accompression ||
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <lcp_reqci+0x474>
 8011872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011874:	2b02      	cmp	r3, #2
 8011876:	d002      	beq.n	801187e <lcp_reqci+0x47a>
		cilen != CILEN_VOID) {
		orc = CONFREJ;
 8011878:	2304      	movs	r3, #4
 801187a:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 801187c:	e04c      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_accompression = 1;
 801187e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011880:	7813      	ldrb	r3, [r2, #0]
 8011882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011886:	7013      	strb	r3, [r2, #0]
	    break;
 8011888:	e046      	b.n	8011918 <lcp_reqci+0x514>
	    ho->mrru = cishort;
	    break;
#endif /* HAVE_MULTILINK */

	case CI_SSNHF:
	    if (!ao->neg_ssnhf
 801188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188c:	785b      	ldrb	r3, [r3, #1]
 801188e:	f003 0302 	and.w	r3, r3, #2
 8011892:	b2db      	uxtb	r3, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	d002      	beq.n	801189e <lcp_reqci+0x49a>
#ifdef HAVE_MULTILINK
		|| !multilink
#endif /* HAVE_MULTILINK */
		|| cilen != CILEN_VOID) {
 8011898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801189a:	2b02      	cmp	r3, #2
 801189c:	d002      	beq.n	80118a4 <lcp_reqci+0x4a0>
		orc = CONFREJ;
 801189e:	2304      	movs	r3, #4
 80118a0:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80118a2:	e039      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    ho->neg_ssnhf = 1;
 80118a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118a6:	7853      	ldrb	r3, [r2, #1]
 80118a8:	f043 0302 	orr.w	r3, r3, #2
 80118ac:	7053      	strb	r3, [r2, #1]
	    break;
 80118ae:	e033      	b.n	8011918 <lcp_reqci+0x514>

	case CI_EPDISC:
	    if (!ao->neg_endpoint ||
 80118b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b2:	785b      	ldrb	r3, [r3, #1]
 80118b4:	f003 0304 	and.w	r3, r3, #4
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d005      	beq.n	80118ca <lcp_reqci+0x4c6>
 80118be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	dd02      	ble.n	80118ca <lcp_reqci+0x4c6>
		cilen < CILEN_CHAR ||
 80118c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c6:	2b17      	cmp	r3, #23
 80118c8:	dd02      	ble.n	80118d0 <lcp_reqci+0x4cc>
		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
		orc = CONFREJ;
 80118ca:	2304      	movs	r3, #4
 80118cc:	647b      	str	r3, [r7, #68]	; 0x44
		break;
 80118ce:	e023      	b.n	8011918 <lcp_reqci+0x514>
	    }
	    GETCHAR(cichar, p);
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	1c5a      	adds	r2, r3, #1
 80118d4:	623a      	str	r2, [r7, #32]
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	613b      	str	r3, [r7, #16]
	    cilen -= CILEN_CHAR;
 80118da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118dc:	3b03      	subs	r3, #3
 80118de:	653b      	str	r3, [r7, #80]	; 0x50
	    ho->neg_endpoint = 1;
 80118e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118e2:	7853      	ldrb	r3, [r2, #1]
 80118e4:	f043 0304 	orr.w	r3, r3, #4
 80118e8:	7053      	strb	r3, [r2, #1]
	    ho->endpoint.class_ = cichar;
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f0:	735a      	strb	r2, [r3, #13]
	    ho->endpoint.length = cilen;
 80118f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f8:	739a      	strb	r2, [r3, #14]
	    MEMCPY(ho->endpoint.value, p, cilen);
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	330f      	adds	r3, #15
 80118fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011900:	6a39      	ldr	r1, [r7, #32]
 8011902:	4618      	mov	r0, r3
 8011904:	f002 fb06 	bl	8013f14 <memcpy>
	    INCPTR(cilen, p);
 8011908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801190a:	6a3a      	ldr	r2, [r7, #32]
 801190c:	4413      	add	r3, r2
 801190e:	623b      	str	r3, [r7, #32]
	    break;
 8011910:	e002      	b.n	8011918 <lcp_reqci+0x514>

	default:
	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
	    orc = CONFREJ;
 8011912:	2304      	movs	r3, #4
 8011914:	647b      	str	r3, [r7, #68]	; 0x44
	    break;
 8011916:	bf00      	nop
	}

endswitch:
	if (orc == CONFACK &&		/* Good CI */
 8011918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801191a:	2b02      	cmp	r3, #2
 801191c:	d103      	bne.n	8011926 <lcp_reqci+0x522>
 801191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011920:	2b02      	cmp	r3, #2
 8011922:	d000      	beq.n	8011926 <lcp_reqci+0x522>
	    rc != CONFACK)		/*  but prior CI wasn't? */
	    continue;			/* Don't send this one */
 8011924:	e024      	b.n	8011970 <lcp_reqci+0x56c>

	if (orc == CONFNAK) {		/* Nak this CI? */
 8011926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011928:	2b03      	cmp	r3, #3
 801192a:	d10e      	bne.n	801194a <lcp_reqci+0x546>
	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d005      	beq.n	801193e <lcp_reqci+0x53a>
		&& citype != CI_MAGICNUMBER) {
 8011932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011934:	2b05      	cmp	r3, #5
 8011936:	d002      	beq.n	801193e <lcp_reqci+0x53a>
		orc = CONFREJ;		/* Get tough if so */
 8011938:	2304      	movs	r3, #4
 801193a:	647b      	str	r3, [r7, #68]	; 0x44
 801193c:	e005      	b.n	801194a <lcp_reqci+0x546>
	    } else {
		if (rc == CONFREJ)	/* Rejecting prior CI? */
 801193e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011940:	2b04      	cmp	r3, #4
 8011942:	d100      	bne.n	8011946 <lcp_reqci+0x542>
		    continue;		/* Don't send this one */
 8011944:	e014      	b.n	8011970 <lcp_reqci+0x56c>
		rc = CONFNAK;
 8011946:	2303      	movs	r3, #3
 8011948:	64bb      	str	r3, [r7, #72]	; 0x48
	    }
	}
	if (orc == CONFREJ) {		/* Reject this CI */
 801194a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801194c:	2b04      	cmp	r3, #4
 801194e:	d10f      	bne.n	8011970 <lcp_reqci+0x56c>
	    rc = CONFREJ;
 8011950:	2304      	movs	r3, #4
 8011952:	64bb      	str	r3, [r7, #72]	; 0x48
	    if (cip != rejp)		/* Need to move rejected CI? */
 8011954:	69fa      	ldr	r2, [r7, #28]
 8011956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011958:	429a      	cmp	r2, r3
 801195a:	d005      	beq.n	8011968 <lcp_reqci+0x564>
		MEMCPY(rejp, cip, cilen); /* Move it */
 801195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801195e:	461a      	mov	r2, r3
 8011960:	69f9      	ldr	r1, [r7, #28]
 8011962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011964:	f002 fad6 	bl	8013f14 <memcpy>
	    INCPTR(cilen, rejp);	/* Update output pointer */
 8011968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801196c:	4413      	add	r3, r2
 801196e:	643b      	str	r3, [r7, #64]	; 0x40
    while (l) {
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	2b00      	cmp	r3, #0
 8011974:	f47f ad83 	bne.w	801147e <lcp_reqci+0x7a>
     * code would go here.  The extra NAKs would go at *nakoutp.
     * At present there are no cases where we want to ask the
     * peer to negotiate an option.
     */

    switch (rc) {
 8011978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801197a:	2b03      	cmp	r3, #3
 801197c:	d00a      	beq.n	8011994 <lcp_reqci+0x590>
 801197e:	2b04      	cmp	r3, #4
 8011980:	d017      	beq.n	80119b2 <lcp_reqci+0x5ae>
 8011982:	2b02      	cmp	r3, #2
 8011984:	d000      	beq.n	8011988 <lcp_reqci+0x584>
	break;
    case CONFREJ:
	*lenp = rejp - inp;
	break;
    default:
	break;
 8011986:	e01a      	b.n	80119be <lcp_reqci+0x5ba>
	*lenp = next - inp;
 8011988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	1ad2      	subs	r2, r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	601a      	str	r2, [r3, #0]
	break;
 8011992:	e014      	b.n	80119be <lcp_reqci+0x5ba>
	*lenp = nakoutp - (u_char*)nakp->payload;
 8011994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011998:	6852      	ldr	r2, [r2, #4]
 801199a:	1a9a      	subs	r2, r3, r2
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	601a      	str	r2, [r3, #0]
	MEMCPY(inp, nakp->payload, *lenp);
 80119a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a2:	6859      	ldr	r1, [r3, #4]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	461a      	mov	r2, r3
 80119aa:	68b8      	ldr	r0, [r7, #8]
 80119ac:	f002 fab2 	bl	8013f14 <memcpy>
	break;
 80119b0:	e005      	b.n	80119be <lcp_reqci+0x5ba>
	*lenp = rejp - inp;
 80119b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	1ad2      	subs	r2, r2, r3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	601a      	str	r2, [r3, #0]
	break;
 80119bc:	bf00      	nop
    }

    pbuf_free(nakp);
 80119be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119c0:	f7f4 fb90 	bl	80060e4 <pbuf_free>
    LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
    return (rc);			/* Return final code */
 80119c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3758      	adds	r7, #88	; 0x58
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop

080119d0 <lcp_up>:


/*
 * lcp_up - LCP has come UP.
 */
static void lcp_up(fsm *f) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08c      	sub	sp, #48	; 0x30
 80119d4:	af02      	add	r7, sp, #8
 80119d6:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
    lcp_options *wo = &pcb->lcp_wantoptions;
 80119de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e0:	3360      	adds	r3, #96	; 0x60
 80119e2:	623b      	str	r3, [r7, #32]
    lcp_options *ho = &pcb->lcp_hisoptions;
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	33cc      	adds	r3, #204	; 0xcc
 80119e8:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 80119ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ec:	3384      	adds	r3, #132	; 0x84
 80119ee:	61bb      	str	r3, [r7, #24]
    lcp_options *ao = &pcb->lcp_allowoptions;
 80119f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f2:	33a8      	adds	r3, #168	; 0xa8
 80119f4:	617b      	str	r3, [r7, #20]
    int mtu, mru;

    if (!go->neg_magicnumber)
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	f003 0320 	and.w	r3, r3, #32
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d102      	bne.n	8011a0a <lcp_up+0x3a>
	go->magicnumber = 0;
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	2200      	movs	r2, #0
 8011a08:	609a      	str	r2, [r3, #8]
    if (!ho->neg_magicnumber)
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	f003 0320 	and.w	r3, r3, #32
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d102      	bne.n	8011a1e <lcp_up+0x4e>
	ho->magicnumber = 0;
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	609a      	str	r2, [r3, #8]
     * the value we got in the negotiation.
     * Note on the MTU: the link MTU can be the MRU the peer wanted,
     * the interface MTU is set to the lowest of that, the
     * MTU we want to use, and our link MRU.
     */
    mtu = ho->neg_mru? ho->mru: PPP_DEFMRU;
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	f003 0304 	and.w	r3, r3, #4
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <lcp_up+0x62>
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	885b      	ldrh	r3, [r3, #2]
 8011a30:	e001      	b.n	8011a36 <lcp_up+0x66>
 8011a32:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011a36:	613b      	str	r3, [r7, #16]
    mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_DEFMRU;
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f003 0304 	and.w	r3, r3, #4
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00b      	beq.n	8011a5e <lcp_up+0x8e>
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	885a      	ldrh	r2, [r3, #2]
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	885b      	ldrh	r3, [r3, #2]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d902      	bls.n	8011a58 <lcp_up+0x88>
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	885b      	ldrh	r3, [r3, #2]
 8011a56:	e004      	b.n	8011a62 <lcp_up+0x92>
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	885b      	ldrh	r3, [r3, #2]
 8011a5c:	e001      	b.n	8011a62 <lcp_up+0x92>
 8011a5e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011a62:	60fb      	str	r3, [r7, #12]
#ifdef HAVE_MULTILINK
    if (!(multilink && go->neg_mrru && ho->neg_mrru))
#endif /* HAVE_MULTILINK */
	ppp_netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	885b      	ldrh	r3, [r3, #2]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	bfa8      	it	ge
 8011a72:	4613      	movge	r3, r2
 8011a74:	428b      	cmp	r3, r1
 8011a76:	bfa8      	it	ge
 8011a78:	460b      	movge	r3, r1
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a7e:	f000 fd5f 	bl	8012540 <ppp_netif_set_mtu>
    ppp_send_config(pcb, mtu,
		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	f003 0308 	and.w	r3, r3, #8
 8011a8a:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d002      	beq.n	8011a96 <lcp_up+0xc6>
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	685a      	ldr	r2, [r3, #4]
 8011a94:	e001      	b.n	8011a9a <lcp_up+0xca>
 8011a96:	f04f 32ff 	mov.w	r2, #4294967295
		    ho->neg_pcompression, ho->neg_accompression);
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011aa2:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011aa4:	4619      	mov	r1, r3
		    ho->neg_pcompression, ho->neg_accompression);
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011aae:	b2db      	uxtb	r3, r3
    ppp_send_config(pcb, mtu,
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	6939      	ldr	r1, [r7, #16]
 8011ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ab8:	f000 fc94 	bl	80123e4 <ppp_send_config>
    ppp_recv_config(pcb, mru,
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f003 0308 	and.w	r3, r3, #8
 8011ac4:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10c      	bne.n	8011ae4 <lcp_up+0x114>
		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	f003 0308 	and.w	r3, r3, #8
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <lcp_up+0x10e>
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	685a      	ldr	r2, [r3, #4]
 8011adc:	e003      	b.n	8011ae6 <lcp_up+0x116>
 8011ade:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae2:	e000      	b.n	8011ae6 <lcp_up+0x116>
    ppp_recv_config(pcb, mru,
 8011ae4:	2200      	movs	r2, #0
		    go->neg_pcompression, go->neg_accompression);
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011aee:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011af0:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011afa:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, mru,
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	460b      	mov	r3, r1
 8011b00:	68f9      	ldr	r1, [r7, #12]
 8011b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b04:	f000 fc8a 	bl	801241c <ppp_recv_config>

    if (ho->neg_mru)
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	f003 0304 	and.w	r3, r3, #4
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d004      	beq.n	8011b20 <lcp_up+0x150>
	pcb->peer_mru = ho->mru;
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	885a      	ldrh	r2, [r3, #2]
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

    lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f000 f97a 	bl	8011e1e <lcp_echo_lowerup>

    link_established(pcb);
 8011b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b2c:	f7fb fdca 	bl	800d6c4 <link_established>
}
 8011b30:	bf00      	nop
 8011b32:	3728      	adds	r7, #40	; 0x28
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <lcp_down>:
/*
 * lcp_down - LCP has gone DOWN.
 *
 * Alert other protocols.
 */
static void lcp_down(fsm *f) {
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af02      	add	r7, sp, #8
 8011b3e:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	60fb      	str	r3, [r7, #12]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	3384      	adds	r3, #132	; 0x84
 8011b4a:	60bb      	str	r3, [r7, #8]

    lcp_echo_lowerdown(f->pcb);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f000 f985 	bl	8011e60 <lcp_echo_lowerdown>

    link_down(pcb);
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f7fb fd62 	bl	800d620 <link_down>

    ppp_send_config(pcb, PPP_DEFMRU, 0xffffffff, 0, 0);
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	2300      	movs	r3, #0
 8011b62:	f04f 32ff 	mov.w	r2, #4294967295
 8011b66:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	f000 fc3a 	bl	80123e4 <ppp_send_config>
    ppp_recv_config(pcb, PPP_DEFMRU,
		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	f003 0308 	and.w	r3, r3, #8
 8011b78:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d002      	beq.n	8011b84 <lcp_down+0x4c>
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	685a      	ldr	r2, [r3, #4]
 8011b82:	e001      	b.n	8011b88 <lcp_down+0x50>
 8011b84:	f04f 32ff 	mov.w	r2, #4294967295
		    go->neg_pcompression, go->neg_accompression);
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011b90:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011b92:	4619      	mov	r1, r3
		    go->neg_pcompression, go->neg_accompression);
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011b9c:	b2db      	uxtb	r3, r3
    ppp_recv_config(pcb, PPP_DEFMRU,
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f000 fc38 	bl	801241c <ppp_recv_config>
    pcb->peer_mru = PPP_DEFMRU;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011bb2:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
}
 8011bb6:	bf00      	nop
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <lcp_starting>:


/*
 * lcp_starting - LCP needs the lower layer up.
 */
static void lcp_starting(fsm *f) {
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	60fb      	str	r3, [r7, #12]
    link_required(pcb);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7fb fd05 	bl	800d5dc <link_required>
}
 8011bd2:	bf00      	nop
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <lcp_finished>:


/*
 * lcp_finished - LCP has finished with the lower layer.
 */
static void lcp_finished(fsm *f) {
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b084      	sub	sp, #16
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	60fb      	str	r3, [r7, #12]
    link_terminated(pcb);
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f7fb fd01 	bl	800d5f0 <link_terminated>
}
 8011bee:	bf00      	nop
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
	...

08011bf8 <LcpLinkFailure>:

/*
 * Time to shut down the link because there is nothing out there.
 */

static void LcpLinkFailure(fsm *f) {
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	60fb      	str	r3, [r7, #12]
    if (f->state == PPP_FSM_OPENED) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	7c1b      	ldrb	r3, [r3, #16]
 8011c0a:	2b09      	cmp	r3, #9
 8011c0c:	d107      	bne.n	8011c1e <LcpLinkFailure+0x26>
	ppp_info(("No response to %d echo-requests", pcb->lcp_echos_pending));
        ppp_notice(("Serial link appears to be disconnected."));
	pcb->err_code = PPPERR_PEERDEAD;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2209      	movs	r2, #9
 8011c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	lcp_close(pcb, "Peer not responding");
 8011c16:	4904      	ldr	r1, [pc, #16]	; (8011c28 <LcpLinkFailure+0x30>)
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f7fe f88d 	bl	800fd38 <lcp_close>
    }
}
 8011c1e:	bf00      	nop
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	08017948 	.word	0x08017948

08011c2c <LcpEchoCheck>:

/*
 * Timer expired for the LCP echo requests from this process.
 */

static void LcpEchoCheck(fsm *f) {
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	60fb      	str	r3, [r7, #12]

    LcpSendEchoRequest (f);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f88e 	bl	8011d5c <LcpSendEchoRequest>
    if (f->state != PPP_FSM_OPENED)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	7c1b      	ldrb	r3, [r3, #16]
 8011c44:	2b09      	cmp	r3, #9
 8011c46:	d117      	bne.n	8011c78 <LcpEchoCheck+0x4c>
    /*
     * Start the timer for the next interval.
     */
    if (pcb->lcp_echo_timer_running)
	ppp_warn(("assertion lcp_echo_timer_running==0 failed"));
    TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
 8011c48:	6879      	ldr	r1, [r7, #4]
 8011c4a:	480d      	ldr	r0, [pc, #52]	; (8011c80 <LcpEchoCheck+0x54>)
 8011c4c:	f7fb fc1e 	bl	800d48c <sys_untimeout>
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	7cdb      	ldrb	r3, [r3, #19]
 8011c54:	461a      	mov	r2, r3
 8011c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c5a:	fb03 f302 	mul.w	r3, r3, r2
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	4907      	ldr	r1, [pc, #28]	; (8011c80 <LcpEchoCheck+0x54>)
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fb fbe6 	bl	800d434 <sys_timeout>
    pcb->lcp_echo_timer_running = 1;
 8011c68:	68fa      	ldr	r2, [r7, #12]
 8011c6a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011c6e:	f043 0310 	orr.w	r3, r3, #16
 8011c72:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8011c76:	e000      	b.n	8011c7a <LcpEchoCheck+0x4e>
	return;
 8011c78:	bf00      	nop
}
 8011c7a:	3710      	adds	r7, #16
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	08011c85 	.word	0x08011c85

08011c84 <LcpEchoTimeout>:

/*
 * LcpEchoTimeout - Timer expired on the LCP echo
 */

static void LcpEchoTimeout(void *arg) {
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
    fsm *f = (fsm*)arg;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	60fb      	str	r3, [r7, #12]
    ppp_pcb *pcb = f->pcb;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	60bb      	str	r3, [r7, #8]
    if (pcb->lcp_echo_timer_running != 0) {
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011c9c:	f003 0310 	and.w	r3, r3, #16
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d009      	beq.n	8011cba <LcpEchoTimeout+0x36>
        pcb->lcp_echo_timer_running = 0;
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011cac:	f36f 1304 	bfc	r3, #4, #1
 8011cb0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
        LcpEchoCheck ((fsm *) arg);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7ff ffb9 	bl	8011c2c <LcpEchoCheck>
    }
}
 8011cba:	bf00      	nop
 8011cbc:	3710      	adds	r7, #16
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <lcp_received_echo_reply>:

/*
 * LcpEchoReply - LCP has received a reply to the echo
 */

static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
 8011cc2:	b480      	push	{r7}
 8011cc4:	b089      	sub	sp, #36	; 0x24
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	60f8      	str	r0, [r7, #12]
 8011cca:	60b9      	str	r1, [r7, #8]
 8011ccc:	607a      	str	r2, [r7, #4]
 8011cce:	603b      	str	r3, [r7, #0]
    ppp_pcb *pcb = f->pcb;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	3384      	adds	r3, #132	; 0x84
 8011cda:	61bb      	str	r3, [r7, #24]
    u32_t magic_val;
    LWIP_UNUSED_ARG(id);

    /* Check the magic number - don't count replies from ourselves. */
    if (len < 4) {
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	dd34      	ble.n	8011d4c <lcp_received_echo_reply+0x8a>
	ppp_dbglog(("lcp: received short Echo-Reply, length %d", len));
	return;
    }
    GETLONG(magic_val, inp);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	021b      	lsls	r3, r3, #8
 8011cec:	617b      	str	r3, [r7, #20]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	1c5a      	adds	r2, r3, #1
 8011cf2:	607a      	str	r2, [r7, #4]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	617b      	str	r3, [r7, #20]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	021b      	lsls	r3, r3, #8
 8011d02:	617b      	str	r3, [r7, #20]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	1c5a      	adds	r2, r3, #1
 8011d08:	607a      	str	r2, [r7, #4]
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	4313      	orrs	r3, r2
 8011d12:	617b      	str	r3, [r7, #20]
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	021b      	lsls	r3, r3, #8
 8011d18:	617b      	str	r3, [r7, #20]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	1c5a      	adds	r2, r3, #1
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	617b      	str	r3, [r7, #20]
    if (go->neg_magicnumber
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	f003 0320 	and.w	r3, r3, #32
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d004      	beq.n	8011d42 <lcp_received_echo_reply+0x80>
	&& magic_val == go->magicnumber) {
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	689a      	ldr	r2, [r3, #8]
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d006      	beq.n	8011d50 <lcp_received_echo_reply+0x8e>
	ppp_warn(("appear to have received our own echo-reply!"));
	return;
    }

    /* Reset the number of outstanding echo frames */
    pcb->lcp_echos_pending = 0;
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	2200      	movs	r2, #0
 8011d46:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8011d4a:	e002      	b.n	8011d52 <lcp_received_echo_reply+0x90>
	return;
 8011d4c:	bf00      	nop
 8011d4e:	e000      	b.n	8011d52 <lcp_received_echo_reply+0x90>
	return;
 8011d50:	bf00      	nop
}
 8011d52:	3724      	adds	r7, #36	; 0x24
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr

08011d5c <LcpSendEchoRequest>:

/*
 * LcpSendEchoRequest - Send an echo request frame to the peer
 */

static void LcpSendEchoRequest(fsm *f) {
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08a      	sub	sp, #40	; 0x28
 8011d60:	af02      	add	r7, sp, #8
 8011d62:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = f->pcb;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	61fb      	str	r3, [r7, #28]
    lcp_options *go = &pcb->lcp_gotoptions;
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	3384      	adds	r3, #132	; 0x84
 8011d6e:	61bb      	str	r3, [r7, #24]
    u_char pkt[4], *pktp;

    /*
     * Detect the failure of the peer at this point.
     */
    if (pcb->settings.lcp_echo_fails != 0) {
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00d      	beq.n	8011d94 <LcpSendEchoRequest+0x38>
        if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	7d1b      	ldrb	r3, [r3, #20]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d306      	bcc.n	8011d94 <LcpSendEchoRequest+0x38>
            LcpLinkFailure(f);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7ff ff36 	bl	8011bf8 <LcpLinkFailure>
            pcb->lcp_echos_pending = 0;
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
#endif

    /*
     * Make and send the echo request frame.
     */
    if (f->state == PPP_FSM_OPENED) {
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	7c1b      	ldrb	r3, [r3, #16]
 8011d98:	2b09      	cmp	r3, #9
 8011d9a:	d13c      	bne.n	8011e16 <LcpSendEchoRequest+0xba>
        lcp_magic = go->magicnumber;
 8011d9c:	69bb      	ldr	r3, [r7, #24]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	617b      	str	r3, [r7, #20]
	pktp = pkt;
 8011da2:	f107 030c 	add.w	r3, r7, #12
 8011da6:	613b      	str	r3, [r7, #16]
	PUTLONG(lcp_magic, pktp);
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	1c5a      	adds	r2, r3, #1
 8011dac:	613a      	str	r2, [r7, #16]
 8011dae:	697a      	ldr	r2, [r7, #20]
 8011db0:	0e12      	lsrs	r2, r2, #24
 8011db2:	b2d2      	uxtb	r2, r2
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	1c5a      	adds	r2, r3, #1
 8011dba:	613a      	str	r2, [r7, #16]
 8011dbc:	697a      	ldr	r2, [r7, #20]
 8011dbe:	0c12      	lsrs	r2, r2, #16
 8011dc0:	b2d2      	uxtb	r2, r2
 8011dc2:	701a      	strb	r2, [r3, #0]
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	1c5a      	adds	r2, r3, #1
 8011dc8:	613a      	str	r2, [r7, #16]
 8011dca:	697a      	ldr	r2, [r7, #20]
 8011dcc:	0a12      	lsrs	r2, r2, #8
 8011dce:	b2d2      	uxtb	r2, r2
 8011dd0:	701a      	strb	r2, [r3, #0]
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	1c5a      	adds	r2, r3, #1
 8011dd6:	613a      	str	r2, [r7, #16]
 8011dd8:	697a      	ldr	r2, [r7, #20]
 8011dda:	b2d2      	uxtb	r2, r2
 8011ddc:	701a      	strb	r2, [r3, #0]
        fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8011de4:	1c53      	adds	r3, r2, #1
 8011de6:	b2d9      	uxtb	r1, r3
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011dee:	6939      	ldr	r1, [r7, #16]
 8011df0:	f107 030c 	add.w	r3, r7, #12
 8011df4:	1acb      	subs	r3, r1, r3
 8011df6:	f107 010c 	add.w	r1, r7, #12
 8011dfa:	9300      	str	r3, [sp, #0]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	2109      	movs	r1, #9
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7fc fc79 	bl	800e6f8 <fsm_sdata>
	++pcb->lcp_echos_pending;
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	b2da      	uxtb	r2, r3
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    }
}
 8011e16:	bf00      	nop
 8011e18:	3720      	adds	r7, #32
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <lcp_echo_lowerup>:

/*
 * lcp_echo_lowerup - Start the timer for the LCP frame
 */

static void lcp_echo_lowerup(ppp_pcb *pcb) {
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b084      	sub	sp, #16
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	3344      	adds	r3, #68	; 0x44
 8011e2a:	60fb      	str	r3, [r7, #12]

    /* Clear the parameters for generating echo frames */
    pcb->lcp_echos_pending      = 0;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    pcb->lcp_echo_number        = 0;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    pcb->lcp_echo_timer_running = 0;
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011e42:	f36f 1304 	bfc	r3, #4, #1
 8011e46:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  
    /* If a timeout interval is specified then start the timer */
    if (pcb->settings.lcp_echo_interval != 0)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	7cdb      	ldrb	r3, [r3, #19]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d002      	beq.n	8011e58 <lcp_echo_lowerup+0x3a>
        LcpEchoCheck (f);
 8011e52:	68f8      	ldr	r0, [r7, #12]
 8011e54:	f7ff feea 	bl	8011c2c <LcpEchoCheck>
}
 8011e58:	bf00      	nop
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <lcp_echo_lowerdown>:

/*
 * lcp_echo_lowerdown - Stop the timer for the LCP frame
 */

static void lcp_echo_lowerdown(ppp_pcb *pcb) {
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
    fsm *f = &pcb->lcp_fsm;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3344      	adds	r3, #68	; 0x44
 8011e6c:	60fb      	str	r3, [r7, #12]

    if (pcb->lcp_echo_timer_running != 0) {
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011e74:	f003 0310 	and.w	r3, r3, #16
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00a      	beq.n	8011e94 <lcp_echo_lowerdown+0x34>
        UNTIMEOUT (LcpEchoTimeout, f);
 8011e7e:	68f9      	ldr	r1, [r7, #12]
 8011e80:	4806      	ldr	r0, [pc, #24]	; (8011e9c <lcp_echo_lowerdown+0x3c>)
 8011e82:	f7fb fb03 	bl	800d48c <sys_untimeout>
        pcb->lcp_echo_timer_running = 0;
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8011e8c:	f36f 1304 	bfc	r3, #4, #1
 8011e90:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    }
}
 8011e94:	bf00      	nop
 8011e96:	3710      	adds	r7, #16
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	08011c85 	.word	0x08011c85

08011ea0 <magic_init>:
 * random event.
 *
 * If LWIP_RAND if available, we do not call srand() as we are
 * not going to call rand().
 */
void magic_init(void) {
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	af00      	add	r7, sp, #0
  magic_randomseed += sys_jiffies();
 8011ea4:	f7f0 f826 	bl	8001ef4 <sys_jiffies>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	4b03      	ldr	r3, [pc, #12]	; (8011eb8 <magic_init+0x18>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	4413      	add	r3, r2
 8011eb0:	4a01      	ldr	r2, [pc, #4]	; (8011eb8 <magic_init+0x18>)
 8011eb2:	6013      	str	r3, [r2, #0]
#ifndef LWIP_RAND
  /* Initialize the random number generator. */
  srand((unsigned)magic_randomseed);
#endif /* LWIP_RAND */
}
 8011eb4:	bf00      	nop
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	20000744 	.word	0x20000744

08011ebc <magic_randomize>:
 * this function is called at *truly random* times by the polling
 * and network functions.  Here we only get 16 bits of new random
 * value but we use the previous value to randomize the other 16
 * bits.
 */
void magic_randomize(void) {
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
    magic_init();
    /* The initialization function also updates the seed. */
    return;
  }
#endif /* LWIP_RAND */
  magic_randomseed += sys_jiffies();
 8011ec0:	f7f0 f818 	bl	8001ef4 <sys_jiffies>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	4b03      	ldr	r3, [pc, #12]	; (8011ed4 <magic_randomize+0x18>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4413      	add	r3, r2
 8011ecc:	4a01      	ldr	r2, [pc, #4]	; (8011ed4 <magic_randomize+0x18>)
 8011ece:	6013      	str	r3, [r2, #0]
}
 8011ed0:	bf00      	nop
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20000744 	.word	0x20000744

08011ed8 <magic>:
 * Alternatively, use LWIP_RAND if available, but we do not assume
 * it is returning 32 bits of random data because it is probably
 * going to be defined to directly return the rand() value. For
 * example, LCP magic numbers are 32-bit random values.
 */
u32_t magic(void) {
 8011ed8:	b598      	push	{r3, r4, r7, lr}
 8011eda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  return (LWIP_RAND() << 16) + LWIP_RAND() + magic_randomseed;
 8011edc:	f7f0 f812 	bl	8001f04 <lwip_port_rand>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	041c      	lsls	r4, r3, #16
 8011ee4:	f7f0 f80e 	bl	8001f04 <lwip_port_rand>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	18e2      	adds	r2, r4, r3
 8011eec:	4b02      	ldr	r3, [pc, #8]	; (8011ef8 <magic+0x20>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4413      	add	r3, r2
#else /* LWIP_RAND */
  return ((u32_t)rand() << 16) + (u32_t)rand() + magic_randomseed;
#endif /* LWIP_RAND */
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	bd98      	pop	{r3, r4, r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20000744 	.word	0x20000744

08011efc <ppp_connect>:
 * the connection.
 *
 * If this port connects to a modem, the modem connection must be
 * established before calling this.
 */
err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	460b      	mov	r3, r1
 8011f06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb->phase != PPP_PHASE_DEAD) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d002      	beq.n	8011f18 <ppp_connect+0x1c>
    return ERR_ALREADY;
 8011f12:	f06f 0308 	mvn.w	r3, #8
 8011f16:	e018      	b.n	8011f4a <ppp_connect+0x4e>
  }

  PPPDEBUG(LOG_DEBUG, ("ppp_connect[%d]: holdoff=%d\n", pcb->netif->num, holdoff));

  magic_randomize();
 8011f18:	f7ff ffd0 	bl	8011ebc <magic_randomize>

  if (holdoff == 0) {
 8011f1c:	887b      	ldrh	r3, [r7, #2]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d104      	bne.n	8011f2c <ppp_connect+0x30>
    ppp_do_connect(pcb);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 f818 	bl	8011f58 <ppp_do_connect>
    return ERR_OK;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	e00e      	b.n	8011f4a <ppp_connect+0x4e>
  }

  new_phase(pcb, PPP_PHASE_HOLDOFF);
 8011f2c:	2102      	movs	r1, #2
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 fa48 	bl	80123c4 <new_phase>
  sys_timeout((u32_t)(holdoff*1000), ppp_do_connect, pcb);
 8011f34:	887b      	ldrh	r3, [r7, #2]
 8011f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f3a:	fb02 f303 	mul.w	r3, r2, r3
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	4904      	ldr	r1, [pc, #16]	; (8011f54 <ppp_connect+0x58>)
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fb fa76 	bl	800d434 <sys_timeout>
  return ERR_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	08011f59 	.word	0x08011f59

08011f58 <ppp_do_connect>:

/**********************************/
/*** LOCAL FUNCTION DEFINITIONS ***/
/**********************************/

static void ppp_do_connect(void *arg) {
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  ppp_pcb *pcb = (ppp_pcb*)arg;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF", pcb->phase == PPP_PHASE_DEAD || pcb->phase == PPP_PHASE_HOLDOFF);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d010      	beq.n	8011f90 <ppp_do_connect+0x38>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f74:	2b02      	cmp	r3, #2
 8011f76:	d00b      	beq.n	8011f90 <ppp_do_connect+0x38>
 8011f78:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <ppp_do_connect+0x58>)
 8011f7a:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8011f7e:	490d      	ldr	r1, [pc, #52]	; (8011fb4 <ppp_do_connect+0x5c>)
 8011f80:	480d      	ldr	r0, [pc, #52]	; (8011fb8 <ppp_do_connect+0x60>)
 8011f82:	f001 fdc5 	bl	8013b10 <iprintf>
 8011f86:	2000      	movs	r0, #0
 8011f88:	f001 fec4 	bl	8013d14 <fflush>
 8011f8c:	f001 fe09 	bl	8013ba2 <abort>

  new_phase(pcb, PPP_PHASE_INITIALIZE);
 8011f90:	2103      	movs	r1, #3
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	f000 fa16 	bl	80123c4 <new_phase>
  pcb->link_cb->connect(pcb, pcb->link_ctx_cb);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	699b      	ldr	r3, [r3, #24]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	69d2      	ldr	r2, [r2, #28]
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	4798      	blx	r3
}
 8011fa8:	bf00      	nop
 8011faa:	3710      	adds	r7, #16
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	08017964 	.word	0x08017964
 8011fb4:	080179e0 	.word	0x080179e0
 8011fb8:	080179a8 	.word	0x080179a8

08011fbc <ppp_netif_init_cb>:

/*
 * ppp_netif_init_cb - netif init callback
 */
static err_t ppp_netif_init_cb(struct netif *netif) {
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  netif->name[0] = 'p';
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2270      	movs	r2, #112	; 0x70
 8011fc8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = 'p';
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2270      	movs	r2, #112	; 0x70
 8011fd0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if PPP_IPV4_SUPPORT
  netif->output = ppp_netif_output_ip4;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	4a04      	ldr	r2, [pc, #16]	; (8011fe8 <ppp_netif_init_cb+0x2c>)
 8011fd8:	615a      	str	r2, [r3, #20]
#endif /* PPP_IPV6_SUPPORT */
#if LWIP_NETIF_HOSTNAME
  /* @todo: Initialize interface hostname */
  /* netif_set_hostname(netif, "lwip"); */
#endif /* LWIP_NETIF_HOSTNAME */
  return ERR_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr
 8011fe8:	08011fed 	.word	0x08011fed

08011fec <ppp_netif_output_ip4>:

#if PPP_IPV4_SUPPORT
/*
 * Send an IPv4 packet on the given connection.
 */
static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr) {
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IP);
 8011ff8:	2221      	movs	r2, #33	; 0x21
 8011ffa:	68b9      	ldr	r1, [r7, #8]
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f000 f805 	bl	801200c <ppp_netif_output>
 8012002:	4603      	mov	r3, r0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <ppp_netif_output>:
  LWIP_UNUSED_ARG(ipaddr);
  return ppp_netif_output(netif, pb, PPP_IPV6);
}
#endif /* PPP_IPV6_SUPPORT */

static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b089      	sub	sp, #36	; 0x24
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	4613      	mov	r3, r2
 8012018:	80fb      	strh	r3, [r7, #6]
  ppp_pcb *pcb = (ppp_pcb*)netif->state;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	69db      	ldr	r3, [r3, #28]
 801201e:	61bb      	str	r3, [r7, #24]
  err_t err;
  struct pbuf *fpb = NULL;
 8012020:	2300      	movs	r3, #0
 8012022:	617b      	str	r3, [r7, #20]

  /* Check that the link is up. */
  if (0
 8012024:	88fb      	ldrh	r3, [r7, #6]
 8012026:	2b21      	cmp	r3, #33	; 0x21
 8012028:	d107      	bne.n	801203a <ppp_netif_output+0x2e>
#if PPP_IPV4_SUPPORT
      || (protocol == PPP_IP && !pcb->if4_up)
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012030:	f003 0308 	and.w	r3, r3, #8
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00b      	beq.n	8012052 <ppp_netif_output+0x46>
    PPPDEBUG(LOG_ERR, ("ppp_netif_output[%d]: bad CCP transmit method\n", pcb->netif->num));
    goto err_rte_drop; /* Cannot really happen, we only negotiate what we are able to do */
  }
#endif /* CCP_SUPPORT */

  err = pcb->link_cb->netif_output(pcb, pcb->link_ctx_cb, pb, protocol);
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	699b      	ldr	r3, [r3, #24]
 801203e:	691c      	ldr	r4, [r3, #16]
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	69d9      	ldr	r1, [r3, #28]
 8012044:	88fb      	ldrh	r3, [r7, #6]
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	69b8      	ldr	r0, [r7, #24]
 801204a:	47a0      	blx	r4
 801204c:	4603      	mov	r3, r0
 801204e:	77fb      	strb	r3, [r7, #31]
  goto err;
 8012050:	e00e      	b.n	8012070 <ppp_netif_output+0x64>
    goto err_rte_drop;
 8012052:	bf00      	nop

err_rte_drop:
  err = ERR_RTE;
 8012054:	23fc      	movs	r3, #252	; 0xfc
 8012056:	77fb      	strb	r3, [r7, #31]
  LINK_STATS_INC(link.rterr);
 8012058:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <ppp_netif_output+0x7c>)
 801205a:	89db      	ldrh	r3, [r3, #14]
 801205c:	3301      	adds	r3, #1
 801205e:	b29a      	uxth	r2, r3
 8012060:	4b09      	ldr	r3, [pc, #36]	; (8012088 <ppp_netif_output+0x7c>)
 8012062:	81da      	strh	r2, [r3, #14]
  LINK_STATS_INC(link.drop);
 8012064:	4b08      	ldr	r3, [pc, #32]	; (8012088 <ppp_netif_output+0x7c>)
 8012066:	88db      	ldrh	r3, [r3, #6]
 8012068:	3301      	adds	r3, #1
 801206a:	b29a      	uxth	r2, r3
 801206c:	4b06      	ldr	r3, [pc, #24]	; (8012088 <ppp_netif_output+0x7c>)
 801206e:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
err:
  if (fpb) {
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d002      	beq.n	801207c <ppp_netif_output+0x70>
    pbuf_free(fpb);
 8012076:	6978      	ldr	r0, [r7, #20]
 8012078:	f7f4 f834 	bl	80060e4 <pbuf_free>
  }
  return err;
 801207c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3724      	adds	r7, #36	; 0x24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd90      	pop	{r4, r7, pc}
 8012088:	2000221c 	.word	0x2000221c

0801208c <ppp_init>:
/*** PRIVATE FUNCTION DEFINITIONS ***/
/************************************/

/* Initialize the PPP subsystem. */
int ppp_init(void)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	af00      	add	r7, sp, #0
#if PPPOS_SUPPORT
  LWIP_MEMPOOL_INIT(PPPOS_PCB);
 8012090:	4805      	ldr	r0, [pc, #20]	; (80120a8 <ppp_init+0x1c>)
 8012092:	f7f3 f925 	bl	80052e0 <memp_init_pool>
#endif
#if LWIP_PPP_API && LWIP_MPU_COMPATIBLE
  LWIP_MEMPOOL_INIT(PPPAPI_MSG);
#endif

  LWIP_MEMPOOL_INIT(PPP_PCB);
 8012096:	4805      	ldr	r0, [pc, #20]	; (80120ac <ppp_init+0x20>)
 8012098:	f7f3 f922 	bl	80052e0 <memp_init_pool>

  /*
   * Initialize magic number generator now so that protocols may
   * use magic numbers in initialization.
   */
  magic_init();
 801209c:	f7ff ff00 	bl	8011ea0 <magic_init>

  return 0;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	08017d18 	.word	0x08017d18
 80120ac:	08017cf4 	.word	0x08017cf4

080120b0 <ppp_new>:
 * attempt to negotiate the LCP session.
 *
 * Return a new PPP connection control block pointer
 * on success or a null pointer on failure.
 */
ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb, ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08c      	sub	sp, #48	; 0x30
 80120b4:	af04      	add	r7, sp, #16
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
 80120bc:	603b      	str	r3, [r7, #0]
  const struct protent *protp;
  int i;

  /* PPP is single-threaded: without a callback,
   * there is no way to know when the link is up. */
  if (link_status_cb == NULL) {
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d101      	bne.n	80120c8 <ppp_new+0x18>
    return NULL;
 80120c4:	2300      	movs	r3, #0
 80120c6:	e06a      	b.n	801219e <ppp_new+0xee>
  }

  pcb = (ppp_pcb*)LWIP_MEMPOOL_ALLOC(PPP_PCB);
 80120c8:	4837      	ldr	r0, [pc, #220]	; (80121a8 <ppp_new+0xf8>)
 80120ca:	f7f3 f99f 	bl	800540c <memp_malloc_pool>
 80120ce:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d101      	bne.n	80120da <ppp_new+0x2a>
    return NULL;
 80120d6:	2300      	movs	r3, #0
 80120d8:	e061      	b.n	801219e <ppp_new+0xee>
  }

  memset(pcb, 0, sizeof(ppp_pcb));
 80120da:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80120de:	2100      	movs	r1, #0
 80120e0:	69b8      	ldr	r0, [r7, #24]
 80120e2:	f001 ff3c 	bl	8013f5e <memset>

  /* default configuration */
#if PAP_SUPPORT
  pcb->settings.pap_timeout_time = UPAP_DEFTIMEOUT;
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	2206      	movs	r2, #6
 80120ea:	731a      	strb	r2, [r3, #12]
  pcb->settings.pap_max_transmits = UPAP_DEFTRANSMITS;
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	220a      	movs	r2, #10
 80120f0:	735a      	strb	r2, [r3, #13]
  pcb->settings.eap_timeout_time = EAP_DEFTIMEOUT;
  pcb->settings.eap_max_transmits = EAP_DEFTRANSMITS;
#endif /* PPP_SERVER */
#endif /* EAP_SUPPORT */

  pcb->settings.lcp_loopbackfail = LCP_DEFLOOPBACKFAIL;
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	220a      	movs	r2, #10
 80120f6:	749a      	strb	r2, [r3, #18]
  pcb->settings.lcp_echo_interval = LCP_ECHOINTERVAL;
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	2200      	movs	r2, #0
 80120fc:	74da      	strb	r2, [r3, #19]
  pcb->settings.lcp_echo_fails = LCP_MAXECHOFAILS;
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	2203      	movs	r2, #3
 8012102:	751a      	strb	r2, [r3, #20]

  pcb->settings.fsm_timeout_time = FSM_DEFTIMEOUT;
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	2206      	movs	r2, #6
 8012108:	739a      	strb	r2, [r3, #14]
  pcb->settings.fsm_max_conf_req_transmits = FSM_DEFMAXCONFREQS;
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	220a      	movs	r2, #10
 801210e:	73da      	strb	r2, [r3, #15]
  pcb->settings.fsm_max_term_transmits = FSM_DEFMAXTERMREQS;
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	2202      	movs	r2, #2
 8012114:	741a      	strb	r2, [r3, #16]
  pcb->settings.fsm_max_nak_loops = FSM_DEFMAXNAKLOOPS;
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	2205      	movs	r2, #5
 801211a:	745a      	strb	r2, [r3, #17]

  pcb->netif = pppif;
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	629a      	str	r2, [r3, #40]	; 0x28
  MIB2_INIT_NETIF(pppif, snmp_ifType_ppp, 0);
  if (!netif_add(pcb->netif,
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012126:	2300      	movs	r3, #0
 8012128:	9302      	str	r3, [sp, #8]
 801212a:	4b20      	ldr	r3, [pc, #128]	; (80121ac <ppp_new+0xfc>)
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	9300      	str	r3, [sp, #0]
 8012132:	4b1f      	ldr	r3, [pc, #124]	; (80121b0 <ppp_new+0x100>)
 8012134:	4a1f      	ldr	r2, [pc, #124]	; (80121b4 <ppp_new+0x104>)
 8012136:	491e      	ldr	r1, [pc, #120]	; (80121b0 <ppp_new+0x100>)
 8012138:	f7f3 fa30 	bl	800559c <netif_add>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d105      	bne.n	801214e <ppp_new+0x9e>
#if LWIP_IPV4
                 IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4,
#endif /* LWIP_IPV4 */
                 (void *)pcb, ppp_netif_init_cb, NULL)) {
    LWIP_MEMPOOL_FREE(PPP_PCB, pcb);
 8012142:	69b9      	ldr	r1, [r7, #24]
 8012144:	4818      	ldr	r0, [pc, #96]	; (80121a8 <ppp_new+0xf8>)
 8012146:	f7f3 f9cd 	bl	80054e4 <memp_free_pool>
    PPPDEBUG(LOG_ERR, ("ppp_new: netif_add failed\n"));
    return NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	e027      	b.n	801219e <ppp_new+0xee>
  }
  /* FIXME: user application should be responsible to call netif_set_up(),
   * remove it for next release with allowed behavior break */
  netif_set_up(pcb->netif);
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012152:	4618      	mov	r0, r3
 8012154:	f7f3 fbf2 	bl	800593c <netif_set_up>

  pcb->link_cb = callbacks;
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	619a      	str	r2, [r3, #24]
  pcb->link_ctx_cb = link_ctx_cb;
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	61da      	str	r2, [r3, #28]
  pcb->link_status_cb = link_status_cb;
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	683a      	ldr	r2, [r7, #0]
 8012168:	621a      	str	r2, [r3, #32]
  pcb->ctx_cb = ctx_cb;
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801216e:	625a      	str	r2, [r3, #36]	; 0x24

  /*
   * Initialize each protocol.
   */
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 8012170:	2300      	movs	r3, #0
 8012172:	61fb      	str	r3, [r7, #28]
 8012174:	e006      	b.n	8012184 <ppp_new+0xd4>
      (*protp->init)(pcb);
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	69b8      	ldr	r0, [r7, #24]
 801217c:	4798      	blx	r3
  for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	3301      	adds	r3, #1
 8012182:	61fb      	str	r3, [r7, #28]
 8012184:	4a0c      	ldr	r2, [pc, #48]	; (80121b8 <ppp_new+0x108>)
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801218c:	617b      	str	r3, [r7, #20]
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1f0      	bne.n	8012176 <ppp_new+0xc6>
  }

  new_phase(pcb, PPP_PHASE_DEAD);
 8012194:	2100      	movs	r1, #0
 8012196:	69b8      	ldr	r0, [r7, #24]
 8012198:	f000 f914 	bl	80123c4 <new_phase>
  return pcb;
 801219c:	69bb      	ldr	r3, [r7, #24]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3720      	adds	r7, #32
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	08017cf4 	.word	0x08017cf4
 80121ac:	08011fbd 	.word	0x08011fbd
 80121b0:	08017b44 	.word	0x08017b44
 80121b4:	08017b48 	.word	0x08017b48
 80121b8:	08017d08 	.word	0x08017d08

080121bc <ppp_start>:

/** Initiate LCP open request */
void ppp_start(ppp_pcb *pcb) {
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
#if VJ_SUPPORT
  vj_compress_init(&pcb->vj_comp);
#endif /* VJ_SUPPORT */

  /* Start protocol */
  new_phase(pcb, PPP_PHASE_ESTABLISH);
 80121c4:	2106      	movs	r1, #6
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 f8fc 	bl	80123c4 <new_phase>
  lcp_open(pcb);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7fd fd7f 	bl	800fcd0 <lcp_open>
  lcp_lowerup(pcb);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7fd fdee 	bl	800fdb4 <lcp_lowerup>
  PPPDEBUG(LOG_DEBUG, ("ppp_start[%d]: finished\n", pcb->netif->num));
}
 80121d8:	bf00      	nop
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <ppp_link_end>:
  pcb->err_code = PPPERR_OPEN;
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
}

/** Called when link is normally down (i.e. it was asked to end) */
void ppp_link_end(ppp_pcb *pcb) {
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_end[%d]\n", pcb->netif->num));
  new_phase(pcb, PPP_PHASE_DEAD);
 80121e8:	2100      	movs	r1, #0
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f8ea 	bl	80123c4 <new_phase>
  if (pcb->err_code == PPPERR_NONE) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d103      	bne.n	8012202 <ppp_link_end+0x22>
    pcb->err_code = PPPERR_CONNECT;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2206      	movs	r2, #6
 80121fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6a1b      	ldr	r3, [r3, #32]
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801220c:	4611      	mov	r1, r2
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	4798      	blx	r3
}
 8012216:	bf00      	nop
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <ppp_input>:

/*
 * Pass the processed input packet to the appropriate handler.
 * This function and all handlers run in the context of the tcpip_thread
 */
void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {
 8012220:	b580      	push	{r7, lr}
 8012222:	b086      	sub	sp, #24
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  u16_t protocol;
#if PPP_DEBUG && PPP_PROTOCOLNAME
  const char *pname;
#endif /* PPP_DEBUG && PPP_PROTOCOLNAME */
  LWIP_ASSERT("pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE",
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012230:	2b05      	cmp	r3, #5
 8012232:	d904      	bls.n	801223e <ppp_input+0x1e>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801223a:	2b0b      	cmp	r3, #11
 801223c:	d90b      	bls.n	8012256 <ppp_input+0x36>
 801223e:	4b4b      	ldr	r3, [pc, #300]	; (801236c <ppp_input+0x14c>)
 8012240:	f240 3211 	movw	r2, #785	; 0x311
 8012244:	494a      	ldr	r1, [pc, #296]	; (8012370 <ppp_input+0x150>)
 8012246:	484b      	ldr	r0, [pc, #300]	; (8012374 <ppp_input+0x154>)
 8012248:	f001 fc62 	bl	8013b10 <iprintf>
 801224c:	2000      	movs	r0, #0
 801224e:	f001 fd61 	bl	8013d14 <fflush>
 8012252:	f001 fca6 	bl	8013ba2 <abort>
    pcb->phase >= PPP_PHASE_ESTABLISH && pcb->phase <= PPP_PHASE_TERMINATE);

  magic_randomize();
 8012256:	f7ff fe31 	bl	8011ebc <magic_randomize>

  if (pb->len < 2) {
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	895b      	ldrh	r3, [r3, #10]
 801225e:	2b01      	cmp	r3, #1
 8012260:	d96e      	bls.n	8012340 <ppp_input+0x120>
    PPPDEBUG(LOG_ERR, ("ppp_input[%d]: packet too short\n", pcb->netif->num));
    goto drop;
  }
  protocol = (((u8_t *)pb->payload)[0] << 8) | ((u8_t*)pb->payload)[1];
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	021b      	lsls	r3, r3, #8
 801226a:	b21a      	sxth	r2, r3
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	3301      	adds	r3, #1
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	b21b      	sxth	r3, r3
 8012276:	4313      	orrs	r3, r2
 8012278:	b21b      	sxth	r3, r3
 801227a:	827b      	strh	r3, [r7, #18]

#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "rcvd", (unsigned char *)pb->payload, pb->len);
#endif /* PRINTPKT_SUPPORT */

  pbuf_remove_header(pb, sizeof(protocol));
 801227c:	2102      	movs	r1, #2
 801227e:	6838      	ldr	r0, [r7, #0]
 8012280:	f7f3 feda 	bl	8006038 <pbuf_remove_header>

  LINK_STATS_INC(link.recv);
 8012284:	4b3c      	ldr	r3, [pc, #240]	; (8012378 <ppp_input+0x158>)
 8012286:	885b      	ldrh	r3, [r3, #2]
 8012288:	3301      	adds	r3, #1
 801228a:	b29a      	uxth	r2, r3
 801228c:	4b3a      	ldr	r3, [pc, #232]	; (8012378 <ppp_input+0x158>)
 801228e:	805a      	strh	r2, [r3, #2]
  MIB2_STATS_NETIF_ADD(pcb->netif, ifinoctets, pb->tot_len);

  /*
   * Toss all non-LCP packets unless LCP is OPEN.
   */
  if (protocol != PPP_LCP && pcb->lcp_fsm.state != PPP_FSM_OPENED) {
 8012290:	8a7b      	ldrh	r3, [r7, #18]
 8012292:	f24c 0221 	movw	r2, #49185	; 0xc021
 8012296:	4293      	cmp	r3, r2
 8012298:	d004      	beq.n	80122a4 <ppp_input+0x84>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80122a0:	2b09      	cmp	r3, #9
 80122a2:	d14f      	bne.n	8012344 <ppp_input+0x124>

  /*
   * Until we get past the authentication phase, toss all packets
   * except LCP, LQR and authentication packets.
   */
  if (pcb->phase <= PPP_PHASE_AUTHENTICATE
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80122aa:	2b07      	cmp	r3, #7
 80122ac:	d809      	bhi.n	80122c2 <ppp_input+0xa2>
   && !(protocol == PPP_LCP
 80122ae:	8a7b      	ldrh	r3, [r7, #18]
 80122b0:	f24c 0221 	movw	r2, #49185	; 0xc021
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d004      	beq.n	80122c2 <ppp_input+0xa2>
 80122b8:	8a7b      	ldrh	r3, [r7, #18]
 80122ba:	f24c 0223 	movw	r2, #49187	; 0xc023
 80122be:	4293      	cmp	r3, r2
 80122c0:	d142      	bne.n	8012348 <ppp_input+0x128>
      pbuf_remove_header(pb, 2);
    }
  }
#endif /* CCP_SUPPORT */

  switch (protocol) {
 80122c2:	8a7b      	ldrh	r3, [r7, #18]
 80122c4:	2b21      	cmp	r3, #33	; 0x21
 80122c6:	d106      	bne.n	80122d6 <ppp_input+0xb6>

#if PPP_IPV4_SUPPORT
    case PPP_IP:            /* Internet Protocol */
      PPPDEBUG(LOG_INFO, ("ppp_input[%d]: ip in pbuf len=%d\n", pcb->netif->num, pb->tot_len));
      ip4_input(pb, pcb->netif);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122cc:	4619      	mov	r1, r3
 80122ce:	6838      	ldr	r0, [r7, #0]
 80122d0:	f7f2 f808 	bl	80042e4 <ip4_input>
      return;
 80122d4:	e046      	b.n	8012364 <ppp_input+0x144>
      const struct protent *protp;

      /*
       * Upcall the proper protocol input routine.
       */
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 80122d6:	2300      	movs	r3, #0
 80122d8:	617b      	str	r3, [r7, #20]
 80122da:	e019      	b.n	8012310 <ppp_input+0xf0>
        if (protp->protocol == protocol) {
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	881b      	ldrh	r3, [r3, #0]
 80122e0:	8a7a      	ldrh	r2, [r7, #18]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d111      	bne.n	801230a <ppp_input+0xea>
          pb = pbuf_coalesce(pb, PBUF_RAW);
 80122e6:	2100      	movs	r1, #0
 80122e8:	6838      	ldr	r0, [r7, #0]
 80122ea:	f7f4 fa64 	bl	80067b6 <pbuf_coalesce>
 80122ee:	6038      	str	r0, [r7, #0]
          if (pb->next != NULL) {
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d129      	bne.n	801234c <ppp_input+0x12c>
            PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_coalesce failed), len=%d\n", pcb->netif->num, pb->tot_len));
            goto drop;
          }
          (*protp->input)(pcb, (u8_t*)pb->payload, pb->len);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	683a      	ldr	r2, [r7, #0]
 80122fe:	6851      	ldr	r1, [r2, #4]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	8952      	ldrh	r2, [r2, #10]
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	4798      	blx	r3
          goto out;
 8012308:	e029      	b.n	801235e <ppp_input+0x13e>
      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	3301      	adds	r3, #1
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	4a1a      	ldr	r2, [pc, #104]	; (801237c <ppp_input+0x15c>)
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012318:	60fb      	str	r3, [r7, #12]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1dd      	bne.n	80122dc <ppp_input+0xbc>
      } else
#endif /* PPP_PROTOCOLNAME */
        ppp_warn(("Unsupported protocol 0x%x received", protocol));
#endif /* PPP_DEBUG */

      if (pbuf_add_header(pb, sizeof(protocol))) {
 8012320:	2102      	movs	r1, #2
 8012322:	6838      	ldr	r0, [r7, #0]
 8012324:	f7f3 fe78 	bl	8006018 <pbuf_add_header>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d110      	bne.n	8012350 <ppp_input+0x130>
        PPPDEBUG(LOG_WARNING, ("ppp_input[%d]: Dropping (pbuf_add_header failed)\n", pcb->netif->num));
        goto drop;
      }
      lcp_sprotrej(pcb, (u8_t*)pb->payload, pb->len);
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	6859      	ldr	r1, [r3, #4]
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	895b      	ldrh	r3, [r3, #10]
 8012336:	461a      	mov	r2, r3
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7fd feb0 	bl	801009e <lcp_sprotrej>
    }
    break;
 801233e:	e008      	b.n	8012352 <ppp_input+0x132>
    goto drop;
 8012340:	bf00      	nop
 8012342:	e006      	b.n	8012352 <ppp_input+0x132>
    goto drop;
 8012344:	bf00      	nop
 8012346:	e004      	b.n	8012352 <ppp_input+0x132>
    goto drop;
 8012348:	bf00      	nop
 801234a:	e002      	b.n	8012352 <ppp_input+0x132>
            goto drop;
 801234c:	bf00      	nop
 801234e:	e000      	b.n	8012352 <ppp_input+0x132>
        goto drop;
 8012350:	bf00      	nop
  }

drop:
  LINK_STATS_INC(link.drop);
 8012352:	4b09      	ldr	r3, [pc, #36]	; (8012378 <ppp_input+0x158>)
 8012354:	88db      	ldrh	r3, [r3, #6]
 8012356:	3301      	adds	r3, #1
 8012358:	b29a      	uxth	r2, r3
 801235a:	4b07      	ldr	r3, [pc, #28]	; (8012378 <ppp_input+0x158>)
 801235c:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pcb->netif, ifindiscards);

out:
  pbuf_free(pb);
 801235e:	6838      	ldr	r0, [r7, #0]
 8012360:	f7f3 fec0 	bl	80060e4 <pbuf_free>
}
 8012364:	3718      	adds	r7, #24
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	08017964 	.word	0x08017964
 8012370:	08017a20 	.word	0x08017a20
 8012374:	080179a8 	.word	0x080179a8
 8012378:	2000221c 	.word	0x2000221c
 801237c:	08017d08 	.word	0x08017d08

08012380 <ppp_write>:
 *
 * IPv4 and IPv6 packets from lwIP are sent, respectively,
 * with ppp_netif_output_ip4() and ppp_netif_output_ip6()
 * functions (which are callbacks of the netif PPP interface).
 */
err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
#if PRINTPKT_SUPPORT
  ppp_dump_packet(pcb, "sent", (unsigned char *)p->payload+2, p->len-2);
#endif /* PRINTPKT_SUPPORT */
  return pcb->link_cb->write(pcb, pcb->link_ctx_cb, p);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	699b      	ldr	r3, [r3, #24]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	69d1      	ldr	r1, [r2, #28]
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	4798      	blx	r3
 801239a:	4603      	mov	r3, r0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <ppp_link_terminated>:

void ppp_link_terminated(ppp_pcb *pcb) {
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]\n", pcb->netif->num));
  pcb->link_cb->disconnect(pcb, pcb->link_ctx_cb);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	699b      	ldr	r3, [r3, #24]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	69d2      	ldr	r2, [r2, #28]
 80123b6:	4611      	mov	r1, r2
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	4798      	blx	r3
  PPPDEBUG(LOG_DEBUG, ("ppp_link_terminated[%d]: finished.\n", pcb->netif->num));
}
 80123bc:	bf00      	nop
 80123be:	3708      	adds	r7, #8
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <new_phase>:
 */

/*
 * new_phase - signal the start of a new phase of pppd's operation.
 */
void new_phase(ppp_pcb *pcb, int p) {
 80123c4:	b480      	push	{r7}
 80123c6:	b083      	sub	sp, #12
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  pcb->phase = p;
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	b2da      	uxtb	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if PPP_NOTIFY_PHASE
  if (pcb->notify_phase_cb != NULL) {
    pcb->notify_phase_cb(pcb, p, pcb->ctx_cb);
  }
#endif /* PPP_NOTIFY_PHASE */
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <ppp_send_config>:

/*
 * ppp_send_config - configure the transmit-side characteristics of
 * the ppp interface.
 */
int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {
 80123e4:	b590      	push	{r4, r7, lr}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af02      	add	r7, sp, #8
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mtu);

  PPPDEBUG(LOG_INFO, ("ppp_send_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->send_config) {
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	699b      	ldr	r3, [r3, #24]
 80123f6:	695b      	ldr	r3, [r3, #20]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00a      	beq.n	8012412 <ppp_send_config+0x2e>
    pcb->link_cb->send_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	699b      	ldr	r3, [r3, #24]
 8012400:	695c      	ldr	r4, [r3, #20]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	69d9      	ldr	r1, [r3, #28]
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	47a0      	blx	r4
  }

  return 0;
 8012412:	2300      	movs	r3, #0
}
 8012414:	4618      	mov	r0, r3
 8012416:	3714      	adds	r7, #20
 8012418:	46bd      	mov	sp, r7
 801241a:	bd90      	pop	{r4, r7, pc}

0801241c <ppp_recv_config>:

/*
 * ppp_recv_config - configure the receive-side characteristics of
 * the ppp interface.
 */
int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {
 801241c:	b590      	push	{r4, r7, lr}
 801241e:	b087      	sub	sp, #28
 8012420:	af02      	add	r7, sp, #8
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(mru);

  PPPDEBUG(LOG_INFO, ("ppp_recv_config[%d]\n", pcb->netif->num));

  if (pcb->link_cb->recv_config) {
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	699b      	ldr	r3, [r3, #24]
 801242e:	699b      	ldr	r3, [r3, #24]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00a      	beq.n	801244a <ppp_recv_config+0x2e>
    pcb->link_cb->recv_config(pcb, pcb->link_ctx_cb, accm, pcomp, accomp);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	699b      	ldr	r3, [r3, #24]
 8012438:	699c      	ldr	r4, [r3, #24]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	69d9      	ldr	r1, [r3, #28]
 801243e:	6a3b      	ldr	r3, [r7, #32]
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	47a0      	blx	r4
  }

  return 0;
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3714      	adds	r7, #20
 8012450:	46bd      	mov	sp, r7
 8012452:	bd90      	pop	{r4, r7, pc}

08012454 <sifaddr>:

#if PPP_IPV4_SUPPORT
/*
 * sifaddr - Config the interface IP addresses and netmask.
 */
int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {
 8012454:	b580      	push	{r7, lr}
 8012456:	b088      	sub	sp, #32
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
  ip4_addr_t ip, nm, gw;

  ip4_addr_set_u32(&ip, our_adr);
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	61fb      	str	r3, [r7, #28]
  ip4_addr_set_u32(&nm, netmask);
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	61bb      	str	r3, [r7, #24]
  ip4_addr_set_u32(&gw, his_adr);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	617b      	str	r3, [r7, #20]
  netif_set_addr(pcb->netif, &ip, &nm, &gw);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012472:	f107 0314 	add.w	r3, r7, #20
 8012476:	f107 0218 	add.w	r2, r7, #24
 801247a:	f107 011c 	add.w	r1, r7, #28
 801247e:	f7f3 fa03 	bl	8005888 <netif_set_addr>
  return 1;
 8012482:	2301      	movs	r3, #1
}
 8012484:	4618      	mov	r0, r3
 8012486:	3720      	adds	r7, #32
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <cifaddr>:
/********************************************************************
 *
 * cifaddr - Clear the interface IP addresses, and delete routes
 * through the interface if possible.
 */
int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(our_adr);
  LWIP_UNUSED_ARG(his_adr);

  netif_set_addr(pcb->netif, IP4_ADDR_ANY4, IP4_ADDR_BROADCAST, IP4_ADDR_ANY4);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801249c:	4b04      	ldr	r3, [pc, #16]	; (80124b0 <cifaddr+0x24>)
 801249e:	4a05      	ldr	r2, [pc, #20]	; (80124b4 <cifaddr+0x28>)
 80124a0:	4903      	ldr	r1, [pc, #12]	; (80124b0 <cifaddr+0x24>)
 80124a2:	f7f3 f9f1 	bl	8005888 <netif_set_addr>
  return 1;
 80124a6:	2301      	movs	r3, #1
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3710      	adds	r7, #16
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	08017b44 	.word	0x08017b44
 80124b4:	08017b48 	.word	0x08017b48

080124b8 <sifup>:
#endif /* VJ_SUPPORT */

/*
 * sifup - Config the interface up and enable IP packets to pass.
 */
int sifup(ppp_pcb *pcb) {
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  pcb->if4_up = 1;
 80124c0:	687a      	ldr	r2, [r7, #4]
 80124c2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80124c6:	f043 0308 	orr.w	r3, r3, #8
 80124ca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  pcb->err_code = PPPERR_NONE;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif_set_link_up(pcb->netif);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f3 fa8c 	bl	80059f8 <netif_set_link_up>

  PPPDEBUG(LOG_DEBUG, ("sifup[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  pcb->link_status_cb(pcb, pcb->err_code, pcb->ctx_cb);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a1b      	ldr	r3, [r3, #32]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80124ea:	4611      	mov	r1, r2
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	4798      	blx	r3
  return 1;
 80124f4:	2301      	movs	r3, #1
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <sifdown>:
/********************************************************************
 *
 * sifdown - Disable the indicated protocol and config the interface
 *           down if there are no remaining protocols.
 */
int sifdown(ppp_pcb *pcb) {
 80124fe:	b580      	push	{r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]

  pcb->if4_up = 0;
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 801250c:	f36f 03c3 	bfc	r3, #3, #1
 8012510:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   /* set the interface down if IPv6 is down as well */
   && !pcb->if6_up
#endif /* PPP_IPV6_SUPPORT */
  ) {
    /* make sure the netif link callback is called */
    netif_set_link_down(pcb->netif);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012518:	4618      	mov	r0, r3
 801251a:	f7f3 fa99 	bl	8005a50 <netif_set_link_down>
  }
  PPPDEBUG(LOG_DEBUG, ("sifdown[%d]: err_code=%d\n", pcb->netif->num, pcb->err_code));
  return 1;
 801251e:	2301      	movs	r3, #1
}
 8012520:	4618      	mov	r0, r3
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <get_mask>:
 * Here we scan through the system's list of interfaces, looking for
 * any non-point-to-point interfaces which might appear to be on the same
 * network as `addr'.  If we find any, we OR in their netmask to the
 * user-specified netmask.
 */
u32_t get_mask(u32_t addr) {
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
   */
  /* return mask; */
  return mask;
#endif /* 0 */
  LWIP_UNUSED_ARG(addr);
  return IPADDR_BROADCAST;
 8012530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012534:	4618      	mov	r0, r3
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <ppp_netif_set_mtu>:
#endif /* DEMAND_SUPPORT */

/*
 * ppp_netif_set_mtu - set the MTU on the PPP network interface.
 */
void ppp_netif_set_mtu(ppp_pcb *pcb, int mtu) {
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]

  pcb->netif->mtu = mtu;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	b292      	uxth	r2, r2
 8012552:	841a      	strh	r2, [r3, #32]
#if PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES
  pcb->netif->mtu6 = mtu;
#endif /* PPP_IPV6_SUPPORT && LWIP_ND6_ALLOW_RA_UPDATES */
  PPPDEBUG(LOG_INFO, ("ppp_netif_set_mtu[%d]: mtu=%d\n", pcb->netif->num, mtu));
}
 8012554:	bf00      	nop
 8012556:	370c      	adds	r7, #12
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr

08012560 <pppos_create>:
 *
 * Return 0 on success, an error code on failure.
 */
ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
       ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b088      	sub	sp, #32
 8012564:	af02      	add	r7, sp, #8
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
 801256c:	603b      	str	r3, [r7, #0]
  pppos_pcb *pppos;
  ppp_pcb *ppp;
  LWIP_ASSERT_CORE_LOCKED();

  pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
 801256e:	4815      	ldr	r0, [pc, #84]	; (80125c4 <pppos_create+0x64>)
 8012570:	f7f2 ff4c 	bl	800540c <memp_malloc_pool>
 8012574:	6178      	str	r0, [r7, #20]
  if (pppos == NULL) {
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d101      	bne.n	8012580 <pppos_create+0x20>
    return NULL;
 801257c:	2300      	movs	r3, #0
 801257e:	e01d      	b.n	80125bc <pppos_create+0x5c>
  }

  ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	9300      	str	r3, [sp, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	697a      	ldr	r2, [r7, #20]
 8012588:	490f      	ldr	r1, [pc, #60]	; (80125c8 <pppos_create+0x68>)
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f7ff fd90 	bl	80120b0 <ppp_new>
 8012590:	6138      	str	r0, [r7, #16]
  if (ppp == NULL) {
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d105      	bne.n	80125a4 <pppos_create+0x44>
    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 8012598:	6979      	ldr	r1, [r7, #20]
 801259a:	480a      	ldr	r0, [pc, #40]	; (80125c4 <pppos_create+0x64>)
 801259c:	f7f2 ffa2 	bl	80054e4 <memp_free_pool>
    return NULL;
 80125a0:	2300      	movs	r3, #0
 80125a2:	e00b      	b.n	80125bc <pppos_create+0x5c>
  }

  memset(pppos, 0, sizeof(pppos_pcb));
 80125a4:	2260      	movs	r2, #96	; 0x60
 80125a6:	2100      	movs	r1, #0
 80125a8:	6978      	ldr	r0, [r7, #20]
 80125aa:	f001 fcd8 	bl	8013f5e <memset>
  pppos->ppp = ppp;
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	693a      	ldr	r2, [r7, #16]
 80125b2:	601a      	str	r2, [r3, #0]
  pppos->output_cb = output_cb;
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	68ba      	ldr	r2, [r7, #8]
 80125b8:	605a      	str	r2, [r3, #4]
  return ppp;
 80125ba:	693b      	ldr	r3, [r7, #16]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3718      	adds	r7, #24
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	08017d18 	.word	0x08017d18
 80125c8:	08017d2c 	.word	0x08017d2c

080125cc <pppos_write>:

/* Called by PPP core */
static err_t
pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b08c      	sub	sp, #48	; 0x30
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	61fb      	str	r3, [r7, #28]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 80125dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80125e4:	2000      	movs	r0, #0
 80125e6:	f7f3 fb13 	bl	8005c10 <pbuf_alloc>
 80125ea:	61b8      	str	r0, [r7, #24]
  if (nb == NULL) {
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d111      	bne.n	8012616 <pppos_write+0x4a>
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 80125f2:	4b34      	ldr	r3, [pc, #208]	; (80126c4 <pppos_write+0xf8>)
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	3301      	adds	r3, #1
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	4b32      	ldr	r3, [pc, #200]	; (80126c4 <pppos_write+0xf8>)
 80125fc:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 80125fe:	4b31      	ldr	r3, [pc, #196]	; (80126c4 <pppos_write+0xf8>)
 8012600:	88db      	ldrh	r3, [r3, #6]
 8012602:	3301      	adds	r3, #1
 8012604:	b29a      	uxth	r2, r3
 8012606:	4b2f      	ldr	r3, [pc, #188]	; (80126c4 <pppos_write+0xf8>)
 8012608:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    pbuf_free(p);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7f3 fd6a 	bl	80060e4 <pbuf_free>
    return ERR_MEM;
 8012610:	f04f 33ff 	mov.w	r3, #4294967295
 8012614:	e051      	b.n	80126ba <pppos_write+0xee>
  }

  /* Empty the buffer */
  nb->len = 0;
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	2200      	movs	r2, #0
 801261a:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = p->len;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	895a      	ldrh	r2, [r3, #10]
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 8012624:	2300      	movs	r3, #0
 8012626:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 801262a:	f7ef fc55 	bl	8001ed8 <sys_now>
 801262e:	4602      	mov	r2, r0
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	689b      	ldr	r3, [r3, #8]
 8012634:	1ad3      	subs	r3, r2, r3
 8012636:	2b63      	cmp	r3, #99	; 0x63
 8012638:	d90d      	bls.n	8012656 <pppos_write+0x8a>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 801263a:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 801263e:	2300      	movs	r3, #0
 8012640:	9301      	str	r3, [sp, #4]
 8012642:	2300      	movs	r3, #0
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	237e      	movs	r3, #126	; 0x7e
 8012648:	69ba      	ldr	r2, [r7, #24]
 801264a:	69f8      	ldr	r0, [r7, #28]
 801264c:	f000 fbf0 	bl	8012e30 <pppos_output_append>
 8012650:	4603      	mov	r3, r0
 8012652:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  /* Load output buffer. */
  fcs_out = PPP_INITFCS;
 8012656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801265a:	82fb      	strh	r3, [r7, #22]
  s = (u8_t*)p->payload;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	627b      	str	r3, [r7, #36]	; 0x24
  n = p->len;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	895b      	ldrh	r3, [r3, #10]
 8012666:	847b      	strh	r3, [r7, #34]	; 0x22
  while (n-- > 0) {
 8012668:	e012      	b.n	8012690 <pppos_write+0xc4>
    err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 801266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	627a      	str	r2, [r7, #36]	; 0x24
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 8012676:	f107 0316 	add.w	r3, r7, #22
 801267a:	9301      	str	r3, [sp, #4]
 801267c:	2301      	movs	r3, #1
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	4613      	mov	r3, r2
 8012682:	69ba      	ldr	r2, [r7, #24]
 8012684:	69f8      	ldr	r0, [r7, #28]
 8012686:	f000 fbd3 	bl	8012e30 <pppos_output_append>
 801268a:	4603      	mov	r3, r0
 801268c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  while (n-- > 0) {
 8012690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012692:	1e5a      	subs	r2, r3, #1
 8012694:	847a      	strh	r2, [r7, #34]	; 0x22
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1e7      	bne.n	801266a <pppos_write+0x9e>
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 801269a:	f107 0316 	add.w	r3, r7, #22
 801269e:	f997 1021 	ldrsb.w	r1, [r7, #33]	; 0x21
 80126a2:	69ba      	ldr	r2, [r7, #24]
 80126a4:	69f8      	ldr	r0, [r7, #28]
 80126a6:	f000 fc49 	bl	8012f3c <pppos_output_last>
 80126aa:	4603      	mov	r3, r0
 80126ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
  }
  pbuf_free(p);
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7f3 fd17 	bl	80060e4 <pbuf_free>
  return err;
 80126b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3728      	adds	r7, #40	; 0x28
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	2000221c 	.word	0x2000221c

080126c8 <pppos_netif_output>:

/* Called by PPP core */
static err_t
pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08c      	sub	sp, #48	; 0x30
 80126cc:	af02      	add	r7, sp, #8
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	807b      	strh	r3, [r7, #2]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	61bb      	str	r3, [r7, #24]
  err_t err;
  LWIP_UNUSED_ARG(ppp);

  /* Grab an output buffer. Assume PBUF_POOL_BUFSIZE is an acceptable
   * chunk size for Tx as well. */
  nb = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_RAM);
 80126da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80126e2:	2000      	movs	r0, #0
 80126e4:	f7f3 fa94 	bl	8005c10 <pbuf_alloc>
 80126e8:	6178      	str	r0, [r7, #20]
  if (nb == NULL) {
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10e      	bne.n	801270e <pppos_netif_output+0x46>
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
    LINK_STATS_INC(link.memerr);
 80126f0:	4b5f      	ldr	r3, [pc, #380]	; (8012870 <pppos_netif_output+0x1a8>)
 80126f2:	899b      	ldrh	r3, [r3, #12]
 80126f4:	3301      	adds	r3, #1
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	4b5d      	ldr	r3, [pc, #372]	; (8012870 <pppos_netif_output+0x1a8>)
 80126fa:	819a      	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
 80126fc:	4b5c      	ldr	r3, [pc, #368]	; (8012870 <pppos_netif_output+0x1a8>)
 80126fe:	88db      	ldrh	r3, [r3, #6]
 8012700:	3301      	adds	r3, #1
 8012702:	b29a      	uxth	r2, r3
 8012704:	4b5a      	ldr	r3, [pc, #360]	; (8012870 <pppos_netif_output+0x1a8>)
 8012706:	80da      	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
    return ERR_MEM;
 8012708:	f04f 33ff 	mov.w	r3, #4294967295
 801270c:	e0ac      	b.n	8012868 <pppos_netif_output+0x1a0>
  }

  /* Empty the buffer */
  nb->len = 0;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2200      	movs	r2, #0
 8012712:	815a      	strh	r2, [r3, #10]
  /* Set nb->tot_len to actual payload length */
  nb->tot_len = pb->tot_len;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	891a      	ldrh	r2, [r3, #8]
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	811a      	strh	r2, [r3, #8]

  /* If the link has been idle, we'll send a fresh flag character to
   * flush any noise. */
  err = ERR_OK;
 801271c:	2300      	movs	r3, #0
 801271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
 8012722:	f7ef fbd9 	bl	8001ed8 <sys_now>
 8012726:	4602      	mov	r2, r0
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	689b      	ldr	r3, [r3, #8]
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	2b63      	cmp	r3, #99	; 0x63
 8012730:	d90d      	bls.n	801274e <pppos_netif_output+0x86>
    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012732:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012736:	2300      	movs	r3, #0
 8012738:	9301      	str	r3, [sp, #4]
 801273a:	2300      	movs	r3, #0
 801273c:	9300      	str	r3, [sp, #0]
 801273e:	237e      	movs	r3, #126	; 0x7e
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	69b8      	ldr	r0, [r7, #24]
 8012744:	f000 fb74 	bl	8012e30 <pppos_output_append>
 8012748:	4603      	mov	r3, r0
 801274a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  fcs_out = PPP_INITFCS;
 801274e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012752:	827b      	strh	r3, [r7, #18]
  if (!pppos->accomp) {
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801275a:	f003 0304 	and.w	r3, r3, #4
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	d11d      	bne.n	80127a0 <pppos_netif_output+0xd8>
    err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
 8012764:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012768:	f107 0312 	add.w	r3, r7, #18
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	2301      	movs	r3, #1
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	23ff      	movs	r3, #255	; 0xff
 8012774:	697a      	ldr	r2, [r7, #20]
 8012776:	69b8      	ldr	r0, [r7, #24]
 8012778:	f000 fb5a 	bl	8012e30 <pppos_output_append>
 801277c:	4603      	mov	r3, r0
 801277e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
 8012782:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012786:	f107 0312 	add.w	r3, r7, #18
 801278a:	9301      	str	r3, [sp, #4]
 801278c:	2301      	movs	r3, #1
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	2303      	movs	r3, #3
 8012792:	697a      	ldr	r2, [r7, #20]
 8012794:	69b8      	ldr	r0, [r7, #24]
 8012796:	f000 fb4b 	bl	8012e30 <pppos_output_append>
 801279a:	4603      	mov	r3, r0
 801279c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  if (!pppos->pcomp || protocol > 0xFF) {
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80127a6:	f003 0302 	and.w	r3, r3, #2
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <pppos_netif_output+0xee>
 80127b0:	887b      	ldrh	r3, [r7, #2]
 80127b2:	2bff      	cmp	r3, #255	; 0xff
 80127b4:	d912      	bls.n	80127dc <pppos_netif_output+0x114>
    err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
 80127b6:	887b      	ldrh	r3, [r7, #2]
 80127b8:	0a1b      	lsrs	r3, r3, #8
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	b2da      	uxtb	r2, r3
 80127be:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80127c2:	f107 0312 	add.w	r3, r7, #18
 80127c6:	9301      	str	r3, [sp, #4]
 80127c8:	2301      	movs	r3, #1
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	4613      	mov	r3, r2
 80127ce:	697a      	ldr	r2, [r7, #20]
 80127d0:	69b8      	ldr	r0, [r7, #24]
 80127d2:	f000 fb2d 	bl	8012e30 <pppos_output_append>
 80127d6:	4603      	mov	r3, r0
 80127d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
 80127dc:	887b      	ldrh	r3, [r7, #2]
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80127e4:	f107 0312 	add.w	r3, r7, #18
 80127e8:	9301      	str	r3, [sp, #4]
 80127ea:	2301      	movs	r3, #1
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	4613      	mov	r3, r2
 80127f0:	697a      	ldr	r2, [r7, #20]
 80127f2:	69b8      	ldr	r0, [r7, #24]
 80127f4:	f000 fb1c 	bl	8012e30 <pppos_output_append>
 80127f8:	4603      	mov	r3, r0
 80127fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Load packet. */
  for(p = pb; p; p = p->next) {
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	627b      	str	r3, [r7, #36]	; 0x24
 8012802:	e021      	b.n	8012848 <pppos_netif_output+0x180>
    u16_t n = p->len;
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	895b      	ldrh	r3, [r3, #10]
 8012808:	843b      	strh	r3, [r7, #32]
    u8_t *s = (u8_t*)p->payload;
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	61fb      	str	r3, [r7, #28]

    while (n-- > 0) {
 8012810:	e012      	b.n	8012838 <pppos_netif_output+0x170>
      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	1c5a      	adds	r2, r3, #1
 8012816:	61fa      	str	r2, [r7, #28]
 8012818:	781a      	ldrb	r2, [r3, #0]
 801281a:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 801281e:	f107 0312 	add.w	r3, r7, #18
 8012822:	9301      	str	r3, [sp, #4]
 8012824:	2301      	movs	r3, #1
 8012826:	9300      	str	r3, [sp, #0]
 8012828:	4613      	mov	r3, r2
 801282a:	697a      	ldr	r2, [r7, #20]
 801282c:	69b8      	ldr	r0, [r7, #24]
 801282e:	f000 faff 	bl	8012e30 <pppos_output_append>
 8012832:	4603      	mov	r3, r0
 8012834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (n-- > 0) {
 8012838:	8c3b      	ldrh	r3, [r7, #32]
 801283a:	1e5a      	subs	r2, r3, #1
 801283c:	843a      	strh	r2, [r7, #32]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d1e7      	bne.n	8012812 <pppos_netif_output+0x14a>
  for(p = pb; p; p = p->next) {
 8012842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	627b      	str	r3, [r7, #36]	; 0x24
 8012848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1da      	bne.n	8012804 <pppos_netif_output+0x13c>
    }
  }

  err = pppos_output_last(pppos, err, nb, &fcs_out);
 801284e:	f107 0312 	add.w	r3, r7, #18
 8012852:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	69b8      	ldr	r0, [r7, #24]
 801285a:	f000 fb6f 	bl	8012f3c <pppos_output_last>
 801285e:	4603      	mov	r3, r0
 8012860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err == ERR_OK) {
    PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  } else {
    PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
  }
  return err;
 8012864:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8012868:	4618      	mov	r0, r3
 801286a:	3728      	adds	r7, #40	; 0x28
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	2000221c 	.word	0x2000221c

08012874 <pppos_connect>:

static void
pppos_connect(ppp_pcb *ppp, void *ctx)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	60fb      	str	r3, [r7, #12]
  /* input pbuf left over from last session? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  /* reset PPPoS control block to its initial state */
  memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	3308      	adds	r3, #8
 8012886:	2258      	movs	r2, #88	; 0x58
 8012888:	2100      	movs	r1, #0
 801288a:	4618      	mov	r0, r3
 801288c:	f001 fb67 	bl	8013f5e <memset>

  /*
   * Default the in and out accm so that escape and flag characters
   * are always escaped.
   */
  pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	2260      	movs	r2, #96	; 0x60
 8012894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pppos->out_accm[15] = 0x60;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2260      	movs	r2, #96	; 0x60
 801289c:	76da      	strb	r2, [r3, #27]
  PPPOS_PROTECT(lev);
  pppos->open = 1;
 801289e:	68fa      	ldr	r2, [r7, #12]
 80128a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80128a4:	f043 0301 	orr.w	r3, r3, #1
 80128a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /*
   * Start the connection and handle incoming events (packet or timeout).
   */
  PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
  ppp_start(ppp); /* notify upper layers */
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff fc85 	bl	80121bc <ppp_start>
}
 80128b2:	bf00      	nop
 80128b4:	3710      	adds	r7, #16
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <pppos_disconnect>:
}
#endif /* PPP_SERVER */

static void
pppos_disconnect(ppp_pcb *ppp, void *ctx)
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b084      	sub	sp, #16
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
 80128c2:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	60fb      	str	r3, [r7, #12]
  PPPOS_DECL_PROTECT(lev);

  PPPOS_PROTECT(lev);
  pppos->open = 0;
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80128ce:	f36f 0300 	bfc	r3, #0, #1
 80128d2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   * pppos_input_free_current_packet() here because
   * rx IRQ might still call pppos_input().
   */
#if !PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f000 fa70 	bl	8012dbc <pppos_input_free_current_packet>
#endif /* !PPP_INPROC_IRQ_SAFE */

  ppp_link_end(ppp); /* notify upper layers */
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f7ff fc7f 	bl	80121e0 <ppp_link_end>
}
 80128e2:	bf00      	nop
 80128e4:	3710      	adds	r7, #16
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
	...

080128ec <pppos_destroy>:

static err_t
pppos_destroy(ppp_pcb *ppp, void *ctx)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	60fb      	str	r3, [r7, #12]
#if PPP_INPROC_IRQ_SAFE
  /* input pbuf left ? */
  pppos_input_free_current_packet(pppos);
#endif /* PPP_INPROC_IRQ_SAFE */

  LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
 80128fa:	68f9      	ldr	r1, [r7, #12]
 80128fc:	4803      	ldr	r0, [pc, #12]	; (801290c <pppos_destroy+0x20>)
 80128fe:	f7f2 fdf1 	bl	80054e4 <memp_free_pool>
  return ERR_OK;
 8012902:	2300      	movs	r3, #0
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	08017d18 	.word	0x08017d18

08012910 <pppos_input>:
 * @param s received data
 * @param l length of received data
 */
void
pppos_input(ppp_pcb *ppp, const void *s, int l)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08c      	sub	sp, #48	; 0x30
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	69db      	ldr	r3, [r3, #28]
 8012920:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *next_pbuf;
  const u8_t *s_u8 = (const u8_t *)s;
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Don't even bother parsing data if we are disconnected.
   * Added to that, ppp_input must never be called if the upper layer is down.
   */
  PPPOS_PROTECT(lev);
  if (!pppos->open) {
 8012926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012928:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801292c:	f003 0301 	and.w	r3, r3, #1
 8012930:	b2db      	uxtb	r3, r3
 8012932:	2b00      	cmp	r3, #0
 8012934:	f000 81d9 	beq.w	8012cea <pppos_input+0x3da>
    return;
  }
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
  while (l-- > 0) {
 8012938:	e1d0      	b.n	8012cdc <pppos_input+0x3cc>
    cur_char = *s_u8++;
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	1c5a      	adds	r2, r3, #1
 801293e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    PPPOS_PROTECT(lev);
    escaped = ESCAPE_P(pppos->in_accm, cur_char);
 8012946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801294a:	08db      	lsrs	r3, r3, #3
 801294c:	b2db      	uxtb	r3, r3
 801294e:	461a      	mov	r2, r3
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	4413      	add	r3, r2
 8012954:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012958:	b25a      	sxtb	r2, r3
 801295a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801295e:	f003 0307 	and.w	r3, r3, #7
 8012962:	2101      	movs	r1, #1
 8012964:	fa01 f303 	lsl.w	r3, r1, r3
 8012968:	b25b      	sxtb	r3, r3
 801296a:	4013      	ands	r3, r2
 801296c:	b25b      	sxtb	r3, r3
 801296e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PPPOS_UNPROTECT(lev);

    /* Handle special characters. */
    if (escaped) {
 8012972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 80a7 	beq.w	8012aca <pppos_input+0x1ba>
      /* Check for escape sequences. */
      /* XXX Note that this does not handle an escaped 0x5d character which
       * would appear as an escape character.  Since this is an ASCII ']'
       * and there is no reason that I know of to escape it, I won't complicate
       * the code to handle this case. GLL */
      if (cur_char == PPP_ESCAPE) {
 801297c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012980:	2b7d      	cmp	r3, #125	; 0x7d
 8012982:	d104      	bne.n	801298e <pppos_input+0x7e>
        pppos->in_escaped = 1;
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	2201      	movs	r2, #1
 8012988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 801298c:	e1a6      	b.n	8012cdc <pppos_input+0x3cc>
      /* Check for the flag character. */
      } else if (cur_char == PPP_FLAG) {
 801298e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012992:	2b7e      	cmp	r3, #126	; 0x7e
 8012994:	f040 81a2 	bne.w	8012cdc <pppos_input+0x3cc>
        /* If this is just an extra flag character, ignore it. */
        if (pppos->in_state <= PDADDRESS) {
 8012998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801299e:	2b01      	cmp	r3, #1
 80129a0:	f240 8085 	bls.w	8012aae <pppos_input+0x19e>
          /* ignore it */;
        /* If we haven't received the packet header, drop what has come in. */
        } else if (pppos->in_state < PDDATA) {
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80129aa:	2b04      	cmp	r3, #4
 80129ac:	d809      	bhi.n	80129c2 <pppos_input+0xb2>
          PPPDEBUG(LOG_WARNING,
                   ("pppos_input[%d]: Dropping incomplete packet %d\n",
                    ppp->netif->num, pppos->in_state));
          LINK_STATS_INC(link.lenerr);
 80129ae:	4ba5      	ldr	r3, [pc, #660]	; (8012c44 <pppos_input+0x334>)
 80129b0:	895b      	ldrh	r3, [r3, #10]
 80129b2:	3301      	adds	r3, #1
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	4ba3      	ldr	r3, [pc, #652]	; (8012c44 <pppos_input+0x334>)
 80129b8:	815a      	strh	r2, [r3, #10]
          pppos_input_drop(pppos);
 80129ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129bc:	f000 fa24 	bl	8012e08 <pppos_input_drop>
 80129c0:	e075      	b.n	8012aae <pppos_input+0x19e>
        /* If the fcs is invalid, drop the packet. */
        } else if (pppos->in_fcs != PPP_GOODFCS) {
 80129c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80129c8:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d009      	beq.n	80129e4 <pppos_input+0xd4>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
                    ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
          /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
          LINK_STATS_INC(link.chkerr);
 80129d0:	4b9c      	ldr	r3, [pc, #624]	; (8012c44 <pppos_input+0x334>)
 80129d2:	891b      	ldrh	r3, [r3, #8]
 80129d4:	3301      	adds	r3, #1
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	4b9a      	ldr	r3, [pc, #616]	; (8012c44 <pppos_input+0x334>)
 80129da:	811a      	strh	r2, [r3, #8]
          pppos_input_drop(pppos);
 80129dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129de:	f000 fa13 	bl	8012e08 <pppos_input_drop>
 80129e2:	e064      	b.n	8012aae <pppos_input+0x19e>
        } else if (!pppos->in_tail) {
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d109      	bne.n	8012a00 <pppos_input+0xf0>
          PPPDEBUG(LOG_INFO,
                   ("pppos_input[%d]: Dropping null in_tail\n",
                    ppp->netif->num));
          LINK_STATS_INC(link.drop);
 80129ec:	4b95      	ldr	r3, [pc, #596]	; (8012c44 <pppos_input+0x334>)
 80129ee:	88db      	ldrh	r3, [r3, #6]
 80129f0:	3301      	adds	r3, #1
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	4b93      	ldr	r3, [pc, #588]	; (8012c44 <pppos_input+0x334>)
 80129f6:	80da      	strh	r2, [r3, #6]
          pppos_input_drop(pppos);
 80129f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129fa:	f000 fa05 	bl	8012e08 <pppos_input_drop>
 80129fe:	e056      	b.n	8012aae <pppos_input+0x19e>
        /* Otherwise it's a good packet so pass it on. */
        } else {
          struct pbuf *inp;
          /* Trim off the checksum. */
          if(pppos->in_tail->len > 2) {
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a04:	895b      	ldrh	r3, [r3, #10]
 8012a06:	2b02      	cmp	r3, #2
 8012a08:	d91c      	bls.n	8012a44 <pppos_input+0x134>
            pppos->in_tail->len -= 2;
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012a12:	8952      	ldrh	r2, [r2, #10]
 8012a14:	3a02      	subs	r2, #2
 8012a16:	b292      	uxth	r2, r2
 8012a18:	815a      	strh	r2, [r3, #10]

            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012a22:	8952      	ldrh	r2, [r2, #10]
 8012a24:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d027      	beq.n	8012a82 <pppos_input+0x172>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f7f3 fc19 	bl	8006274 <pbuf_cat>
 8012a42:	e01e      	b.n	8012a82 <pppos_input+0x172>
            }
          } else {
            pppos->in_tail->tot_len = pppos->in_tail->len;
 8012a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a4a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012a4c:	8952      	ldrh	r2, [r2, #10]
 8012a4e:	811a      	strh	r2, [r3, #8]
            if (pppos->in_tail != pppos->in_head) {
 8012a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d007      	beq.n	8012a6c <pppos_input+0x15c>
              pbuf_cat(pppos->in_head, pppos->in_tail);
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a64:	4619      	mov	r1, r3
 8012a66:	4610      	mov	r0, r2
 8012a68:	f7f3 fc04 	bl	8006274 <pbuf_cat>
            }

            pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
 8012a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a74:	891b      	ldrh	r3, [r3, #8]
 8012a76:	3b02      	subs	r3, #2
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	f7f3 f9b9 	bl	8005df4 <pbuf_realloc>
          }

          /* Dispatch the packet thereby consuming it. */
          inp = pppos->in_head;
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a86:	613b      	str	r3, [r7, #16]
          /* Packet consumed, release our references. */
          pppos->in_head = NULL;
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	651a      	str	r2, [r3, #80]	; 0x50
          pppos->in_tail = NULL;
 8012a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a90:	2200      	movs	r2, #0
 8012a92:	655a      	str	r2, [r3, #84]	; 0x54
            pbuf_free(inp);
            LINK_STATS_INC(link.drop);
            MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
          }
#else /* PPP_INPROC_IRQ_SAFE */
          ppp_input(ppp, inp);
 8012a94:	6939      	ldr	r1, [r7, #16]
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f7ff fbc2 	bl	8012220 <ppp_input>
          /* ppp_input can disconnect the interface, we need to abort to prevent a memory
           * leak if there are remaining bytes because pppos_connect and pppos_listen
           * functions expect input buffer to be free. Furthermore there are no real
           * reason to continue reading bytes if we are disconnected.
           */
          if (!pppos->open) {
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f000 8120 	beq.w	8012cee <pppos_input+0x3de>
          }
#endif /* PPP_INPROC_IRQ_SAFE */
        }

        /* Prepare for a new packet. */
        pppos->in_fcs = PPP_INITFCS;
 8012aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        pppos->in_state = PDADDRESS;
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aba:	2201      	movs	r2, #1
 8012abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        pppos->in_escaped = 0;
 8012ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8012ac8:	e108      	b.n	8012cdc <pppos_input+0x3cc>
                 ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
      }
    /* Process other characters. */
    } else {
      /* Unencode escaped characters. */
      if (pppos->in_escaped) {
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d009      	beq.n	8012ae8 <pppos_input+0x1d8>
        pppos->in_escaped = 0;
 8012ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        cur_char ^= PPP_TRANS;
 8012adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ae0:	f083 0320 	eor.w	r3, r3, #32
 8012ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      }

      /* Process character relative to current state. */
      switch (pppos->in_state) {
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012aee:	2b05      	cmp	r3, #5
 8012af0:	f200 80de 	bhi.w	8012cb0 <pppos_input+0x3a0>
 8012af4:	a201      	add	r2, pc, #4	; (adr r2, 8012afc <pppos_input+0x1ec>)
 8012af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012afa:	bf00      	nop
 8012afc:	08012cb1 	.word	0x08012cb1
 8012b00:	08012b15 	.word	0x08012b15
 8012b04:	08012b27 	.word	0x08012b27
 8012b08:	08012b39 	.word	0x08012b39
 8012b0c:	08012b75 	.word	0x08012b75
 8012b10:	08012b95 	.word	0x08012b95
        case PDIDLE:                    /* Idle state - wait for flag character. */
          break;
        case PDADDRESS:                 /* Process address field. */
          if (cur_char == PPP_ALLSTATIONS) {
 8012b14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b18:	2bff      	cmp	r3, #255	; 0xff
 8012b1a:	d104      	bne.n	8012b26 <pppos_input+0x216>
            pppos->in_state = PDCONTROL;
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1e:	2202      	movs	r2, #2
 8012b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012b24:	e0c5      	b.n	8012cb2 <pppos_input+0x3a2>
          }
          /* Else assume compressed address and control fields so
           * fall through to get the protocol... */
          /* Fall through */
        case PDCONTROL:                 /* Process control field. */
          if (cur_char == PPP_UI) {
 8012b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b2a:	2b03      	cmp	r3, #3
 8012b2c:	d104      	bne.n	8012b38 <pppos_input+0x228>
            pppos->in_state = PDPROTOCOL1;
 8012b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b30:	2203      	movs	r2, #3
 8012b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            break;
 8012b36:	e0bc      	b.n	8012cb2 <pppos_input+0x3a2>
          }
          /* Fall through */
        case PDPROTOCOL1:               /* Process protocol field 1. */
          /* If the lower bit is set, this is the end of the protocol
           * field. */
          if (cur_char & 1) {
 8012b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b3c:	f003 0301 	and.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d00a      	beq.n	8012b5a <pppos_input+0x24a>
            pppos->in_protocol = cur_char;
 8012b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDDATA;
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	2205      	movs	r2, #5
 8012b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          } else {
            pppos->in_protocol = (u16_t)cur_char << 8;
            pppos->in_state = PDPROTOCOL2;
          }
          break;
 8012b58:	e0ab      	b.n	8012cb2 <pppos_input+0x3a2>
            pppos->in_protocol = (u16_t)cur_char << 8;
 8012b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	021b      	lsls	r3, r3, #8
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
            pppos->in_state = PDPROTOCOL2;
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	2204      	movs	r2, #4
 8012b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012b72:	e09e      	b.n	8012cb2 <pppos_input+0x3a2>
        case PDPROTOCOL2:               /* Process protocol field 2. */
          pppos->in_protocol |= cur_char;
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4313      	orrs	r3, r2
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          pppos->in_state = PDDATA;
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	2205      	movs	r2, #5
 8012b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          break;
 8012b92:	e08e      	b.n	8012cb2 <pppos_input+0x3a2>
        case PDDATA:                    /* Process data byte. */
          /* Make space to receive processed data. */
          if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d005      	beq.n	8012ba8 <pppos_input+0x298>
 8012b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ba0:	895b      	ldrh	r3, [r3, #10]
 8012ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba6:	d174      	bne.n	8012c92 <pppos_input+0x382>
            u16_t pbuf_alloc_len;
            if (pppos->in_tail != NULL) {
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d02d      	beq.n	8012c0c <pppos_input+0x2fc>
              u16_t mru;
              pppos->in_tail->tot_len = pppos->in_tail->len;
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012bb8:	8952      	ldrh	r2, [r2, #10]
 8012bba:	811a      	strh	r2, [r3, #8]
              if (pppos->in_tail != pppos->in_head) {
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d00a      	beq.n	8012bde <pppos_input+0x2ce>
                pbuf_cat(pppos->in_head, pppos->in_tail);
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	f7f3 fb4e 	bl	8006274 <pbuf_cat>
                /* give up the in_tail reference now */
                pppos->in_tail = NULL;
 8012bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bda:	2200      	movs	r2, #0
 8012bdc:	655a      	str	r2, [r3, #84]	; 0x54
              }
              /* Compute MRU including headers length.  If smaller packets are
               * requested, we must still be able to receive packets of the
               * default MRU for control packets. */
              mru = LWIP_MAX(PPP_MRU, PPP_DEFMRU)
 8012bde:	f240 6374 	movw	r3, #1652	; 0x674
 8012be2:	843b      	strh	r3, [r7, #32]
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
#if PPP_INPROC_IRQ_SAFE
                + sizeof(struct pppos_input_header)
#endif /* PPP_INPROC_IRQ_SAFE */
                + sizeof(pppos->in_protocol);
              if (pppos->in_head->tot_len > mru) {
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012be8:	891b      	ldrh	r3, [r3, #8]
 8012bea:	8c3a      	ldrh	r2, [r7, #32]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d20d      	bcs.n	8012c0c <pppos_input+0x2fc>
                /* Packet too big. Drop the input packet and let the
                 * higher layers deal with it.  Continue processing
                 * received characters in case a new packet starts. */
                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: packet too big, max_len=%d, dropping packet\n", ppp->netif->num, mru));
                LINK_STATS_INC(link.lenerr);
 8012bf0:	4b14      	ldr	r3, [pc, #80]	; (8012c44 <pppos_input+0x334>)
 8012bf2:	895b      	ldrh	r3, [r3, #10]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	4b12      	ldr	r3, [pc, #72]	; (8012c44 <pppos_input+0x334>)
 8012bfa:	815a      	strh	r2, [r3, #10]
                pppos_input_drop(pppos);
 8012bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bfe:	f000 f903 	bl	8012e08 <pppos_input_drop>
                pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	2200      	movs	r2, #0
 8012c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                break;
 8012c0a:	e052      	b.n	8012cb2 <pppos_input+0x3a2>
              }
            }
            /* If we haven't started a packet, we need a packet header. */
            pbuf_alloc_len = 0;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	83fb      	strh	r3, [r7, #30]
#endif /* PPP_IPV6_SUPPORT */
             )) {
              pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
            }
#endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
            next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
 8012c10:	8bfb      	ldrh	r3, [r7, #30]
 8012c12:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8012c16:	4619      	mov	r1, r3
 8012c18:	2000      	movs	r0, #0
 8012c1a:	f7f2 fff9 	bl	8005c10 <pbuf_alloc>
 8012c1e:	61b8      	str	r0, [r7, #24]
            if (next_pbuf == NULL) {
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d110      	bne.n	8012c48 <pppos_input+0x338>
              /* No free buffers.  Drop the input packet and let the
               * higher layers deal with it.  Continue processing
               * received characters in case a new packet starts. */
              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
              LINK_STATS_INC(link.memerr);
 8012c26:	4b07      	ldr	r3, [pc, #28]	; (8012c44 <pppos_input+0x334>)
 8012c28:	899b      	ldrh	r3, [r3, #12]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	b29a      	uxth	r2, r3
 8012c2e:	4b05      	ldr	r3, [pc, #20]	; (8012c44 <pppos_input+0x334>)
 8012c30:	819a      	strh	r2, [r3, #12]
              pppos_input_drop(pppos);
 8012c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c34:	f000 f8e8 	bl	8012e08 <pppos_input_drop>
              pppos->in_state = PDIDLE;  /* Wait for flag character. */
 8012c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
              break;
 8012c40:	e037      	b.n	8012cb2 <pppos_input+0x3a2>
 8012c42:	bf00      	nop
 8012c44:	2000221c 	.word	0x2000221c
            }
            if (pppos->in_head == NULL) {
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d11d      	bne.n	8012c8c <pppos_input+0x37c>
              u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	685a      	ldr	r2, [r3, #4]
 8012c54:	8bfb      	ldrh	r3, [r7, #30]
 8012c56:	4413      	add	r3, r2
 8012c58:	617b      	str	r3, [r7, #20]
#if PPP_INPROC_IRQ_SAFE
              ((struct pppos_input_header*)payload)->ppp = ppp;
              payload += sizeof(struct pppos_input_header);
              next_pbuf->len += sizeof(struct pppos_input_header);
#endif /* PPP_INPROC_IRQ_SAFE */
              next_pbuf->len += sizeof(pppos->in_protocol);
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	895b      	ldrh	r3, [r3, #10]
 8012c5e:	3302      	adds	r3, #2
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	815a      	strh	r2, [r3, #10]
              *(payload++) = pppos->in_protocol >> 8;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	1c5a      	adds	r2, r3, #1
 8012c6a:	617a      	str	r2, [r7, #20]
 8012c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c6e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8012c72:	0a12      	lsrs	r2, r2, #8
 8012c74:	b292      	uxth	r2, r2
 8012c76:	b2d2      	uxtb	r2, r2
 8012c78:	701a      	strb	r2, [r3, #0]
              *(payload) = pppos->in_protocol & 0xFF;
 8012c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	701a      	strb	r2, [r3, #0]
              pppos->in_head = next_pbuf;
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	69ba      	ldr	r2, [r7, #24]
 8012c8a:	651a      	str	r2, [r3, #80]	; 0x50
            }
            pppos->in_tail = next_pbuf;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	69ba      	ldr	r2, [r7, #24]
 8012c90:	655a      	str	r2, [r3, #84]	; 0x54
          }
          /* Load character into buffer. */
          ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
 8012c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c96:	6859      	ldr	r1, [r3, #4]
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c9c:	895a      	ldrh	r2, [r3, #10]
 8012c9e:	1c50      	adds	r0, r2, #1
 8012ca0:	b280      	uxth	r0, r0
 8012ca2:	8158      	strh	r0, [r3, #10]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	440b      	add	r3, r1
 8012ca8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8012cac:	701a      	strb	r2, [r3, #0]
          break;
 8012cae:	e000      	b.n	8012cb2 <pppos_input+0x3a2>
        default:
          break;
 8012cb0:	bf00      	nop
      }

      /* update the frame check sequence number. */
      pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
 8012cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012cb8:	0a1b      	lsrs	r3, r3, #8
 8012cba:	b29a      	uxth	r2, r3
 8012cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012cc8:	404b      	eors	r3, r1
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	490a      	ldr	r1, [pc, #40]	; (8012cf8 <pppos_input+0x3e8>)
 8012cce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012cd2:	4053      	eors	r3, r2
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  while (l-- > 0) {
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	1e5a      	subs	r2, r3, #1
 8012ce0:	607a      	str	r2, [r7, #4]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f73f ae29 	bgt.w	801293a <pppos_input+0x2a>
 8012ce8:	e002      	b.n	8012cf0 <pppos_input+0x3e0>
    return;
 8012cea:	bf00      	nop
 8012cec:	e000      	b.n	8012cf0 <pppos_input+0x3e0>
            break;
 8012cee:	bf00      	nop
    }
  } /* while (l-- > 0), all bytes processed */
}
 8012cf0:	3730      	adds	r7, #48	; 0x30
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	08017d48 	.word	0x08017d48

08012cfc <pppos_send_config>:
}
#endif /* PPP_INPROC_IRQ_SAFE */

static void
pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b087      	sub	sp, #28
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(ppp);

  pppos->pcomp = pcomp;
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	f003 0301 	and.w	r3, r3, #1
 8012d16:	b2d9      	uxtb	r1, r3
 8012d18:	693a      	ldr	r2, [r7, #16]
 8012d1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012d1e:	f361 0341 	bfi	r3, r1, #1, #1
 8012d22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
  pppos->accomp = accomp;
 8012d26:	6a3b      	ldr	r3, [r7, #32]
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	f003 0301 	and.w	r3, r3, #1
 8012d2e:	b2d9      	uxtb	r1, r3
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8012d36:	f361 0382 	bfi	r3, r1, #2, #1
 8012d3a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

  /* Load the ACCM bits for the 32 control codes. */
  for (i = 0; i < 32/8; i++) {
 8012d3e:	2300      	movs	r3, #0
 8012d40:	617b      	str	r3, [r7, #20]
 8012d42:	e00e      	b.n	8012d62 <pppos_send_config+0x66>
    pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	00db      	lsls	r3, r3, #3
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8012d4e:	b2d9      	uxtb	r1, r3
 8012d50:	693a      	ldr	r2, [r7, #16]
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	4413      	add	r3, r2
 8012d56:	330c      	adds	r3, #12
 8012d58:	460a      	mov	r2, r1
 8012d5a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32/8; i++) {
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	617b      	str	r3, [r7, #20]
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	2b03      	cmp	r3, #3
 8012d66:	dded      	ble.n	8012d44 <pppos_send_config+0x48>
  }

  PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
}
 8012d68:	bf00      	nop
 8012d6a:	371c      	adds	r7, #28
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <pppos_recv_config>:

static void
pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b087      	sub	sp, #28
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
 8012d80:	603b      	str	r3, [r7, #0]
  int i;
  pppos_pcb *pppos = (pppos_pcb *)ctx;
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(pcomp);
  LWIP_UNUSED_ARG(accomp);

  /* Load the ACCM bits for the 32 control codes. */
  PPPOS_PROTECT(lev);
  for (i = 0; i < 32 / 8; i++) {
 8012d86:	2300      	movs	r3, #0
 8012d88:	617b      	str	r3, [r7, #20]
 8012d8a:	e00e      	b.n	8012daa <pppos_recv_config+0x36>
    pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	00db      	lsls	r3, r3, #3
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	fa22 f303 	lsr.w	r3, r2, r3
 8012d96:	b2d9      	uxtb	r1, r3
 8012d98:	693a      	ldr	r2, [r7, #16]
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	332d      	adds	r3, #45	; 0x2d
 8012da0:	460a      	mov	r2, r1
 8012da2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 32 / 8; i++) {
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	3301      	adds	r3, #1
 8012da8:	617b      	str	r3, [r7, #20]
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2b03      	cmp	r3, #3
 8012dae:	dded      	ble.n	8012d8c <pppos_recv_config+0x18>
  PPPOS_UNPROTECT(lev);

  PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
            pppos->ppp->netif->num,
            pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
}
 8012db0:	bf00      	nop
 8012db2:	371c      	adds	r7, #28
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <pppos_input_free_current_packet>:
/*
 * Drop the input packet.
 */
static void
pppos_input_free_current_packet(pppos_pcb *pppos)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  if (pppos->in_head != NULL) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d016      	beq.n	8012dfa <pppos_input_free_current_packet+0x3e>
    if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d00a      	beq.n	8012dea <pppos_input_free_current_packet+0x2e>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d004      	beq.n	8012dea <pppos_input_free_current_packet+0x2e>
      pbuf_free(pppos->in_tail);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f3 f97d 	bl	80060e4 <pbuf_free>
    }
    pbuf_free(pppos->in_head);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f3 f978 	bl	80060e4 <pbuf_free>
    pppos->in_head = NULL;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  pppos->in_tail = NULL;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	655a      	str	r2, [r3, #84]	; 0x54
}
 8012e00:	bf00      	nop
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <pppos_input_drop>:
/*
 * Drop the input packet and increase error counters.
 */
static void
pppos_input_drop(pppos_pcb *pppos)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
#if 0
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
#endif
    PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
  }
  pppos_input_free_current_packet(pppos);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff ffd3 	bl	8012dbc <pppos_input_free_current_packet>
#if VJ_SUPPORT
  vj_uncompress_err(&pppos->ppp->vj_comp);
#endif /* VJ_SUPPORT */

  LINK_STATS_INC(link.drop);
 8012e16:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <pppos_input_drop+0x24>)
 8012e18:	88db      	ldrh	r3, [r3, #6]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	4b03      	ldr	r3, [pc, #12]	; (8012e2c <pppos_input_drop+0x24>)
 8012e20:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
}
 8012e22:	bf00      	nop
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	2000221c 	.word	0x2000221c

08012e30 <pppos_output_append>:
 * If pbuf is full, send the pbuf and reuse it.
 * Return the current pbuf.
 */
static err_t
pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
{
 8012e30:	b590      	push	{r4, r7, lr}
 8012e32:	b087      	sub	sp, #28
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	607a      	str	r2, [r7, #4]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	72fb      	strb	r3, [r7, #11]
 8012e40:	4613      	mov	r3, r2
 8012e42:	72bb      	strb	r3, [r7, #10]
  if (err != ERR_OK) {
 8012e44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d002      	beq.n	8012e52 <pppos_output_append+0x22>
    return err;
 8012e4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012e50:	e06e      	b.n	8012f30 <pppos_output_append+0x100>
  }

  /* Make sure there is room for the character and an escape code.
   * Sure we don't quite fill the buffer if the character doesn't
   * get escaped but is one character worth complicating this? */
  if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	895b      	ldrh	r3, [r3, #10]
 8012e56:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012e5a:	2b01      	cmp	r3, #1
 8012e5c:	dc19      	bgt.n	8012e92 <pppos_output_append+0x62>
    u32_t l = pppos->output_cb(pppos->ppp, nb->payload, nb->len, pppos->ppp->ctx_cb);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	685c      	ldr	r4, [r3, #4]
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	6818      	ldr	r0, [r3, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6859      	ldr	r1, [r3, #4]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	895b      	ldrh	r3, [r3, #10]
 8012e6e:	461a      	mov	r2, r3
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e76:	47a0      	blx	r4
 8012e78:	6178      	str	r0, [r7, #20]
    if (l != nb->len) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	895b      	ldrh	r3, [r3, #10]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d002      	beq.n	8012e8c <pppos_output_append+0x5c>
      return ERR_IF;
 8012e86:	f06f 030b 	mvn.w	r3, #11
 8012e8a:	e051      	b.n	8012f30 <pppos_output_append+0x100>
    }
    nb->len = 0;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	815a      	strh	r2, [r3, #10]
  }

  /* Update FCS before checking for special characters. */
  if (fcs) {
 8012e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d010      	beq.n	8012eba <pppos_output_append+0x8a>
    *fcs = PPP_FCS(*fcs, c);
 8012e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	0a1b      	lsrs	r3, r3, #8
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea2:	881b      	ldrh	r3, [r3, #0]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	7abb      	ldrb	r3, [r7, #10]
 8012ea8:	404b      	eors	r3, r1
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	4922      	ldr	r1, [pc, #136]	; (8012f38 <pppos_output_append+0x108>)
 8012eae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012eb2:	4053      	eors	r3, r2
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb8:	801a      	strh	r2, [r3, #0]
  }

  /* Copy to output buffer escaping special characters. */
  if (accm && ESCAPE_P(pppos->out_accm, c)) {
 8012eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d02a      	beq.n	8012f18 <pppos_output_append+0xe8>
 8012ec2:	7abb      	ldrb	r3, [r7, #10]
 8012ec4:	08db      	lsrs	r3, r3, #3
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	461a      	mov	r2, r3
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	4413      	add	r3, r2
 8012ece:	7b1b      	ldrb	r3, [r3, #12]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	7abb      	ldrb	r3, [r7, #10]
 8012ed4:	f003 0307 	and.w	r3, r3, #7
 8012ed8:	fa42 f303 	asr.w	r3, r2, r3
 8012edc:	f003 0301 	and.w	r3, r3, #1
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d019      	beq.n	8012f18 <pppos_output_append+0xe8>
    *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	685a      	ldr	r2, [r3, #4]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	895b      	ldrh	r3, [r3, #10]
 8012eec:	1c59      	adds	r1, r3, #1
 8012eee:	b288      	uxth	r0, r1
 8012ef0:	6879      	ldr	r1, [r7, #4]
 8012ef2:	8148      	strh	r0, [r1, #10]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	227d      	movs	r2, #125	; 0x7d
 8012ef8:	701a      	strb	r2, [r3, #0]
    *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	895b      	ldrh	r3, [r3, #10]
 8012f02:	1c59      	adds	r1, r3, #1
 8012f04:	b288      	uxth	r0, r1
 8012f06:	6879      	ldr	r1, [r7, #4]
 8012f08:	8148      	strh	r0, [r1, #10]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	7aba      	ldrb	r2, [r7, #10]
 8012f0e:	f082 0220 	eor.w	r2, r2, #32
 8012f12:	b2d2      	uxtb	r2, r2
 8012f14:	701a      	strb	r2, [r3, #0]
 8012f16:	e00a      	b.n	8012f2e <pppos_output_append+0xfe>
  } else {
    *((u8_t*)nb->payload + nb->len++) = c;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	685a      	ldr	r2, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	895b      	ldrh	r3, [r3, #10]
 8012f20:	1c59      	adds	r1, r3, #1
 8012f22:	b288      	uxth	r0, r1
 8012f24:	6879      	ldr	r1, [r7, #4]
 8012f26:	8148      	strh	r0, [r1, #10]
 8012f28:	4413      	add	r3, r2
 8012f2a:	7aba      	ldrb	r2, [r7, #10]
 8012f2c:	701a      	strb	r2, [r3, #0]
  }

  return ERR_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	371c      	adds	r7, #28
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd90      	pop	{r4, r7, pc}
 8012f38:	08017d48 	.word	0x08017d48

08012f3c <pppos_output_last>:

static err_t
pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
{
 8012f3c:	b590      	push	{r4, r7, lr}
 8012f3e:	b089      	sub	sp, #36	; 0x24
 8012f40:	af02      	add	r7, sp, #8
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	607a      	str	r2, [r7, #4]
 8012f46:	603b      	str	r3, [r7, #0]
 8012f48:	460b      	mov	r3, r1
 8012f4a:	72fb      	strb	r3, [r7, #11]
  ppp_pcb *ppp = pppos->ppp;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	617b      	str	r3, [r7, #20]

  /* Add FCS and trailing flag. */
  err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	43db      	mvns	r3, r3
 8012f5a:	b2da      	uxtb	r2, r3
 8012f5c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012f60:	2300      	movs	r3, #0
 8012f62:	9301      	str	r3, [sp, #4]
 8012f64:	2301      	movs	r3, #1
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	4613      	mov	r3, r2
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f7ff ff5f 	bl	8012e30 <pppos_output_append>
 8012f72:	4603      	mov	r3, r0
 8012f74:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	881b      	ldrh	r3, [r3, #0]
 8012f7a:	43db      	mvns	r3, r3
 8012f7c:	121b      	asrs	r3, r3, #8
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012f84:	2300      	movs	r3, #0
 8012f86:	9301      	str	r3, [sp, #4]
 8012f88:	2301      	movs	r3, #1
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f7ff ff4d 	bl	8012e30 <pppos_output_append>
 8012f96:	4603      	mov	r3, r0
 8012f98:	72fb      	strb	r3, [r7, #11]
  err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
 8012f9a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	237e      	movs	r3, #126	; 0x7e
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f7ff ff40 	bl	8012e30 <pppos_output_append>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK) {
 8012fb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d128      	bne.n	801300e <pppos_output_last+0xd2>
    goto failed;
  }

  /* Send remaining buffer if not empty */
  if (nb->len > 0) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	895b      	ldrh	r3, [r3, #10]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d014      	beq.n	8012fee <pppos_output_last+0xb2>
    u32_t l = pppos->output_cb(ppp, nb->payload, nb->len, ppp->ctx_cb);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	685c      	ldr	r4, [r3, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6859      	ldr	r1, [r3, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	895b      	ldrh	r3, [r3, #10]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd6:	6978      	ldr	r0, [r7, #20]
 8012fd8:	47a0      	blx	r4
 8012fda:	6138      	str	r0, [r7, #16]
    if (l != nb->len) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	895b      	ldrh	r3, [r3, #10]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d002      	beq.n	8012fee <pppos_output_last+0xb2>
      err = ERR_IF;
 8012fe8:	23f4      	movs	r3, #244	; 0xf4
 8012fea:	72fb      	strb	r3, [r7, #11]
      goto failed;
 8012fec:	e010      	b.n	8013010 <pppos_output_last+0xd4>
    }
  }

  pppos->last_xmit = sys_now();
 8012fee:	f7ee ff73 	bl	8001ed8 <sys_now>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	609a      	str	r2, [r3, #8]
  MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
  LINK_STATS_INC(link.xmit);
 8012ff8:	4b11      	ldr	r3, [pc, #68]	; (8013040 <pppos_output_last+0x104>)
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	4b0f      	ldr	r3, [pc, #60]	; (8013040 <pppos_output_last+0x104>)
 8013002:	801a      	strh	r2, [r3, #0]
  pbuf_free(nb);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7f3 f86d 	bl	80060e4 <pbuf_free>
  return ERR_OK;
 801300a:	2300      	movs	r3, #0
 801300c:	e014      	b.n	8013038 <pppos_output_last+0xfc>
    goto failed;
 801300e:	bf00      	nop

failed:
  pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2200      	movs	r2, #0
 8013014:	609a      	str	r2, [r3, #8]
  LINK_STATS_INC(link.err);
 8013016:	4b0a      	ldr	r3, [pc, #40]	; (8013040 <pppos_output_last+0x104>)
 8013018:	8a9b      	ldrh	r3, [r3, #20]
 801301a:	3301      	adds	r3, #1
 801301c:	b29a      	uxth	r2, r3
 801301e:	4b08      	ldr	r3, [pc, #32]	; (8013040 <pppos_output_last+0x104>)
 8013020:	829a      	strh	r2, [r3, #20]
  LINK_STATS_INC(link.drop);
 8013022:	4b07      	ldr	r3, [pc, #28]	; (8013040 <pppos_output_last+0x104>)
 8013024:	88db      	ldrh	r3, [r3, #6]
 8013026:	3301      	adds	r3, #1
 8013028:	b29a      	uxth	r2, r3
 801302a:	4b05      	ldr	r3, [pc, #20]	; (8013040 <pppos_output_last+0x104>)
 801302c:	80da      	strh	r2, [r3, #6]
  MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
  pbuf_free(nb);
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7f3 f858 	bl	80060e4 <pbuf_free>
  return err;
 8013034:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013038:	4618      	mov	r0, r3
 801303a:	371c      	adds	r7, #28
 801303c:	46bd      	mov	sp, r7
 801303e:	bd90      	pop	{r4, r7, pc}
 8013040:	2000221c 	.word	0x2000221c

08013044 <upap_init>:


/*
 * upap_init - Initialize a UPAP unit.
 */
static void upap_init(ppp_pcb *pcb) {
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
    pcb->upap.us_user = NULL;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = 0;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2200      	movs	r2, #0
 8013056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = NULL;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2200      	movs	r2, #0
 801305e:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = 0;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2200      	movs	r2, #0
 8013064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
    pcb->upap.us_id = 0;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8013078:	bf00      	nop
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <upap_authwithpeer>:
/*
 * upap_authwithpeer - Authenticate us with our peer (start client).
 *
 * Set new state and send authenticate's.
 */
void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	60f8      	str	r0, [r7, #12]
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]

    if(!user || !password)
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d03f      	beq.n	8013116 <upap_authwithpeer+0x92>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d03c      	beq.n	8013116 <upap_authwithpeer+0x92>
        return;

    /* Save the username and password we're given */
    pcb->upap.us_user = user;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	68ba      	ldr	r2, [r7, #8]
 80130a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
 80130a2:	68b8      	ldr	r0, [r7, #8]
 80130a4:	f7ed f89e 	bl	80001e4 <strlen>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2bfe      	cmp	r3, #254	; 0xfe
 80130ac:	d805      	bhi.n	80130ba <upap_authwithpeer+0x36>
 80130ae:	68b8      	ldr	r0, [r7, #8]
 80130b0:	f7ed f898 	bl	80001e4 <strlen>
 80130b4:	4603      	mov	r3, r0
 80130b6:	b2da      	uxtb	r2, r3
 80130b8:	e000      	b.n	80130bc <upap_authwithpeer+0x38>
 80130ba:	22ff      	movs	r2, #255	; 0xff
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pcb->upap.us_passwd = password;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7ed f88b 	bl	80001e4 <strlen>
 80130ce:	4603      	mov	r3, r0
 80130d0:	2bfe      	cmp	r3, #254	; 0xfe
 80130d2:	d805      	bhi.n	80130e0 <upap_authwithpeer+0x5c>
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7ed f885 	bl	80001e4 <strlen>
 80130da:	4603      	mov	r3, r0
 80130dc:	b2da      	uxtb	r2, r3
 80130de:	e000      	b.n	80130e2 <upap_authwithpeer+0x5e>
 80130e0:	22ff      	movs	r2, #255	; 0xff
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pcb->upap.us_transmits = 0;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* Lower layer up yet? */
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d004      	beq.n	8013104 <upap_authwithpeer+0x80>
	pcb->upap.us_clientstate == UPAPCS_PENDING) {
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
 8013100:	2b02      	cmp	r3, #2
 8013102:	d104      	bne.n	801310e <upap_authwithpeer+0x8a>
	pcb->upap.us_clientstate = UPAPCS_PENDING;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2202      	movs	r2, #2
 8013108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	return;
 801310c:	e004      	b.n	8013118 <upap_authwithpeer+0x94>
    }

    upap_sauthreq(pcb);		/* Start protocol */
 801310e:	68f8      	ldr	r0, [r7, #12]
 8013110:	f000 f92c 	bl	801336c <upap_sauthreq>
 8013114:	e000      	b.n	8013118 <upap_authwithpeer+0x94>
        return;
 8013116:	bf00      	nop
}
 8013118:	3710      	adds	r7, #16
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <upap_timeout>:
#endif /* PPP_SERVER */

/*
 * upap_timeout - Retransmission timer for sending auth-reqs expired.
 */
static void upap_timeout(void *arg) {
 801311e:	b580      	push	{r7, lr}
 8013120:	b084      	sub	sp, #16
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
    ppp_pcb *pcb = (ppp_pcb*)arg;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60fb      	str	r3, [r7, #12]

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013130:	2b03      	cmp	r3, #3
 8013132:	d114      	bne.n	801315e <upap_timeout+0x40>
	return;

    if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	7b5b      	ldrb	r3, [r3, #13]
 801313e:	429a      	cmp	r2, r3
 8013140:	d309      	bcc.n	8013156 <upap_timeout+0x38>
	/* give up in disgust */
	ppp_error(("No response to PAP authenticate-requests"));
	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2205      	movs	r2, #5
 8013146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	auth_withpeer_fail(pcb, PPP_PAP);
 801314a:	f24c 0123 	movw	r1, #49187	; 0xc023
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f7fa fb5a 	bl	800d808 <auth_withpeer_fail>
	return;
 8013154:	e004      	b.n	8013160 <upap_timeout+0x42>
    }

    upap_sauthreq(pcb);		/* Send Authenticate-Request */
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f000 f908 	bl	801336c <upap_sauthreq>
 801315c:	e000      	b.n	8013160 <upap_timeout+0x42>
	return;
 801315e:	bf00      	nop
}
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <upap_lowerup>:
/*
 * upap_lowerup - The lower layer is up.
 *
 * Start authenticating if pending.
 */
static void upap_lowerup(ppp_pcb *pcb) {
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013174:	2b00      	cmp	r3, #0
 8013176:	d104      	bne.n	8013182 <upap_lowerup+0x1c>
	pcb->upap.us_clientstate = UPAPCS_CLOSED;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2201      	movs	r2, #1
 801317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pcb->upap.us_serverstate = UPAPSS_LISTEN;
	if (pcb->settings.pap_req_timeout > 0)
	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
    }
#endif /* PPP_SERVER */
}
 8013180:	e007      	b.n	8013192 <upap_lowerup+0x2c>
    else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013188:	2b02      	cmp	r3, #2
 801318a:	d102      	bne.n	8013192 <upap_lowerup+0x2c>
	upap_sauthreq(pcb);	/* send an auth-request */
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 f8ed 	bl	801336c <upap_sauthreq>
}
 8013192:	bf00      	nop
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <upap_lowerdown>:
/*
 * upap_lowerdown - The lower layer is down.
 *
 * Cancel all timeouts.
 */
static void upap_lowerdown(ppp_pcb *pcb) {
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80131aa:	2b03      	cmp	r3, #3
 80131ac:	d103      	bne.n	80131b6 <upap_lowerdown+0x1a>
	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
 80131ae:	6879      	ldr	r1, [r7, #4]
 80131b0:	4805      	ldr	r0, [pc, #20]	; (80131c8 <upap_lowerdown+0x2c>)
 80131b2:	f7fa f96b 	bl	800d48c <sys_untimeout>
#if PPP_SERVER
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
	UNTIMEOUT(upap_reqtimeout, pcb);
#endif /* PPP_SERVER */

    pcb->upap.us_clientstate = UPAPCS_INITIAL;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if PPP_SERVER
    pcb->upap.us_serverstate = UPAPSS_INITIAL;
#endif /* PPP_SERVER */
}
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	0801311f 	.word	0x0801311f

080131cc <upap_protrej>:
/*
 * upap_protrej - Peer doesn't speak this protocol.
 *
 * This shouldn't happen.  In any case, pretend lower layer went down.
 */
static void upap_protrej(ppp_pcb *pcb) {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]

    if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80131da:	2b03      	cmp	r3, #3
 80131dc:	d104      	bne.n	80131e8 <upap_protrej+0x1c>
	ppp_error(("PAP authentication failed due to protocol-reject"));
	auth_withpeer_fail(pcb, PPP_PAP);
 80131de:	f24c 0123 	movw	r1, #49187	; 0xc023
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f7fa fb10 	bl	800d808 <auth_withpeer_fail>
    if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
	ppp_error(("PAP authentication of peer failed (protocol-reject)"));
	auth_peer_fail(pcb, PPP_PAP);
    }
#endif /* PPP_SERVER */
    upap_lowerdown(pcb);
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff ffd7 	bl	801319c <upap_lowerdown>
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <upap_input>:


/*
 * upap_input - Input UPAP packet.
 */
static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b088      	sub	sp, #32
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	60f8      	str	r0, [r7, #12]
 80131fe:	60b9      	str	r1, [r7, #8]
 8013200:	607a      	str	r2, [r7, #4]

    /*
     * Parse header (code, id and length).
     * If packet too short, drop it.
     */
    inp = inpacket;
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	61fb      	str	r3, [r7, #28]
    if (l < UPAP_HEADERLEN) {
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b03      	cmp	r3, #3
 801320a:	dd37      	ble.n	801327c <upap_input+0x86>
	UPAPDEBUG(("pap_input: rcvd short header."));
	return;
    }
    GETCHAR(code, inp);
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	61fa      	str	r2, [r7, #28]
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	76fb      	strb	r3, [r7, #27]
    GETCHAR(id, inp);
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	61fa      	str	r2, [r7, #28]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	76bb      	strb	r3, [r7, #26]
    GETSHORT(len, inp);
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	1c5a      	adds	r2, r3, #1
 8013224:	61fa      	str	r2, [r7, #28]
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	021b      	lsls	r3, r3, #8
 801322a:	617b      	str	r3, [r7, #20]
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	1c5a      	adds	r2, r3, #1
 8013230:	61fa      	str	r2, [r7, #28]
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	461a      	mov	r2, r3
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	4313      	orrs	r3, r2
 801323a:	617b      	str	r3, [r7, #20]
    if (len < UPAP_HEADERLEN) {
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	2b03      	cmp	r3, #3
 8013240:	dd1e      	ble.n	8013280 <upap_input+0x8a>
	UPAPDEBUG(("pap_input: rcvd illegal length."));
	return;
    }
    if (len > l) {
 8013242:	697a      	ldr	r2, [r7, #20]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	429a      	cmp	r2, r3
 8013248:	dc1c      	bgt.n	8013284 <upap_input+0x8e>
	UPAPDEBUG(("pap_input: rcvd short packet."));
	return;
    }
    len -= UPAP_HEADERLEN;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	3b04      	subs	r3, #4
 801324e:	617b      	str	r3, [r7, #20]

    /*
     * Action depends on code.
     */
    switch (code) {
 8013250:	7efb      	ldrb	r3, [r7, #27]
 8013252:	2b02      	cmp	r3, #2
 8013254:	d004      	beq.n	8013260 <upap_input+0x6a>
 8013256:	2b03      	cmp	r3, #3
 8013258:	d009      	beq.n	801326e <upap_input+0x78>
 801325a:	2b01      	cmp	r3, #1
 801325c:	d014      	beq.n	8013288 <upap_input+0x92>
    case UPAP_AUTHNAK:
	upap_rauthnak(pcb, inp, id, len);
	break;

    default:				/* XXX Need code reject */
	break;
 801325e:	e014      	b.n	801328a <upap_input+0x94>
	upap_rauthack(pcb, inp, id, len);
 8013260:	7eba      	ldrb	r2, [r7, #26]
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	69f9      	ldr	r1, [r7, #28]
 8013266:	68f8      	ldr	r0, [r7, #12]
 8013268:	f000 f812 	bl	8013290 <upap_rauthack>
	break;
 801326c:	e00d      	b.n	801328a <upap_input+0x94>
	upap_rauthnak(pcb, inp, id, len);
 801326e:	7eba      	ldrb	r2, [r7, #26]
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	69f9      	ldr	r1, [r7, #28]
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f000 f843 	bl	8013300 <upap_rauthnak>
	break;
 801327a:	e006      	b.n	801328a <upap_input+0x94>
	return;
 801327c:	bf00      	nop
 801327e:	e004      	b.n	801328a <upap_input+0x94>
	return;
 8013280:	bf00      	nop
 8013282:	e002      	b.n	801328a <upap_input+0x94>
	return;
 8013284:	bf00      	nop
 8013286:	e000      	b.n	801328a <upap_input+0x94>
	break;
 8013288:	bf00      	nop
    }
}
 801328a:	3720      	adds	r7, #32
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <upap_rauthack>:
#endif /* PPP_SERVER */

/*
 * upap_rauthack - Receive Authenticate-Ack.
 */
static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80132a4:	2b03      	cmp	r3, #3
 80132a6:	d122      	bne.n	80132ee <upap_rauthack+0x5e>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dd10      	ble.n	80132d0 <upap_rauthack+0x40>
	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	1c5a      	adds	r2, r3, #1
 80132b2:	60ba      	str	r2, [r7, #8]
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 80132b8:	7dfb      	ldrb	r3, [r7, #23]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d008      	beq.n	80132d0 <upap_rauthack+0x40>
	    len -= sizeof (u_char);
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	3b01      	subs	r3, #1
 80132c2:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 80132c4:	7dfa      	ldrb	r2, [r7, #23]
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	dc12      	bgt.n	80132f2 <upap_rauthack+0x62>
		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 80132d0:	68f9      	ldr	r1, [r7, #12]
 80132d2:	480a      	ldr	r0, [pc, #40]	; (80132fc <upap_rauthack+0x6c>)
 80132d4:	f7fa f8da 	bl	800d48c <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_OPEN;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2204      	movs	r2, #4
 80132dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    auth_withpeer_success(pcb, PPP_PAP, 0);
 80132e0:	2200      	movs	r2, #0
 80132e2:	f24c 0123 	movw	r1, #49187	; 0xc023
 80132e6:	68f8      	ldr	r0, [r7, #12]
 80132e8:	f7fa faa2 	bl	800d830 <auth_withpeer_success>
 80132ec:	e002      	b.n	80132f4 <upap_rauthack+0x64>
	return;
 80132ee:	bf00      	nop
 80132f0:	e000      	b.n	80132f4 <upap_rauthack+0x64>
		return;
 80132f2:	bf00      	nop
}
 80132f4:	3718      	adds	r7, #24
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	0801311f 	.word	0x0801311f

08013300 <upap_rauthnak>:


/*
 * upap_rauthnak - Receive Authenticate-Nak.
 */
static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	603b      	str	r3, [r7, #0]
    u_char msglen;
    char *msg;
    LWIP_UNUSED_ARG(id);

    if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013314:	2b03      	cmp	r3, #3
 8013316:	d121      	bne.n	801335c <upap_rauthnak+0x5c>
	return;

    /*
     * Parse message.
     */
    if (len < 1) {
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	dd10      	ble.n	8013340 <upap_rauthnak+0x40>
	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
    } else {
	GETCHAR(msglen, inp);
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	1c5a      	adds	r2, r3, #1
 8013322:	60ba      	str	r2, [r7, #8]
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	75fb      	strb	r3, [r7, #23]
	if (msglen > 0) {
 8013328:	7dfb      	ldrb	r3, [r7, #23]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d008      	beq.n	8013340 <upap_rauthnak+0x40>
	    len -= sizeof (u_char);
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	3b01      	subs	r3, #1
 8013332:	603b      	str	r3, [r7, #0]
	    if (len < msglen) {
 8013334:	7dfa      	ldrb	r2, [r7, #23]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	429a      	cmp	r2, r3
 801333a:	dc11      	bgt.n	8013360 <upap_rauthnak+0x60>
		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
		return;
	    }
	    msg = (char *) inp;
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	613b      	str	r3, [r7, #16]
	    PRINTMSG(msg, msglen);
	}
    }

    UNTIMEOUT(upap_timeout, pcb);
 8013340:	68f9      	ldr	r1, [r7, #12]
 8013342:	4809      	ldr	r0, [pc, #36]	; (8013368 <upap_rauthnak+0x68>)
 8013344:	f7fa f8a2 	bl	800d48c <sys_untimeout>
    pcb->upap.us_clientstate = UPAPCS_BADAUTH;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2205      	movs	r2, #5
 801334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    ppp_error(("PAP authentication failed"));
    auth_withpeer_fail(pcb, PPP_PAP);
 8013350:	f24c 0123 	movw	r1, #49187	; 0xc023
 8013354:	68f8      	ldr	r0, [r7, #12]
 8013356:	f7fa fa57 	bl	800d808 <auth_withpeer_fail>
 801335a:	e002      	b.n	8013362 <upap_rauthnak+0x62>
	return;
 801335c:	bf00      	nop
 801335e:	e000      	b.n	8013362 <upap_rauthnak+0x62>
		return;
 8013360:	bf00      	nop
}
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	0801311f 	.word	0x0801311f

0801336c <upap_sauthreq>:


/*
 * upap_sauthreq - Send an Authenticate-Request.
 */
static void upap_sauthreq(ppp_pcb *pcb) {
 801336c:	b580      	push	{r7, lr}
 801336e:	b086      	sub	sp, #24
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
    struct pbuf *p;
    u_char *outp;
    int outlen;

    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801337a:	461a      	mov	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013382:	4413      	add	r3, r2
 8013384:	3306      	adds	r3, #6
    outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
 8013386:	617b      	str	r3, [r7, #20]
    p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PBUF_RAM);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	b29b      	uxth	r3, r3
 801338c:	3304      	adds	r3, #4
 801338e:	b29b      	uxth	r3, r3
 8013390:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013394:	4619      	mov	r1, r3
 8013396:	2000      	movs	r0, #0
 8013398:	f7f2 fc3a 	bl	8005c10 <pbuf_alloc>
 801339c:	6138      	str	r0, [r7, #16]
    if(NULL == p)
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f000 808a 	beq.w	80134ba <upap_sauthreq+0x14e>
        return;
    if(p->tot_len != p->len) {
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	891a      	ldrh	r2, [r3, #8]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	895b      	ldrh	r3, [r3, #10]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d003      	beq.n	80133ba <upap_sauthreq+0x4e>
        pbuf_free(p);
 80133b2:	6938      	ldr	r0, [r7, #16]
 80133b4:	f7f2 fe96 	bl	80060e4 <pbuf_free>
        return;
 80133b8:	e080      	b.n	80134bc <upap_sauthreq+0x150>
    }

    outp = (u_char*)p->payload;
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	60fb      	str	r3, [r7, #12]
    MAKEHEADER(outp, PPP_PAP);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	1c5a      	adds	r2, r3, #1
 80133c4:	60fa      	str	r2, [r7, #12]
 80133c6:	22ff      	movs	r2, #255	; 0xff
 80133c8:	701a      	strb	r2, [r3, #0]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	1c5a      	adds	r2, r3, #1
 80133ce:	60fa      	str	r2, [r7, #12]
 80133d0:	2203      	movs	r2, #3
 80133d2:	701a      	strb	r2, [r3, #0]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	1c5a      	adds	r2, r3, #1
 80133d8:	60fa      	str	r2, [r7, #12]
 80133da:	22c0      	movs	r2, #192	; 0xc0
 80133dc:	701a      	strb	r2, [r3, #0]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	1c5a      	adds	r2, r3, #1
 80133e2:	60fa      	str	r2, [r7, #12]
 80133e4:	2223      	movs	r2, #35	; 0x23
 80133e6:	701a      	strb	r2, [r3, #0]

    PUTCHAR(UPAP_AUTHREQ, outp);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	1c5a      	adds	r2, r3, #1
 80133ec:	60fa      	str	r2, [r7, #12]
 80133ee:	2201      	movs	r2, #1
 80133f0:	701a      	strb	r2, [r3, #0]
    PUTCHAR(++pcb->upap.us_id, outp);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	1c5a      	adds	r2, r3, #1
 80133f6:	60fa      	str	r2, [r7, #12]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 80133fe:	3201      	adds	r2, #1
 8013400:	b2d1      	uxtb	r1, r2
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 801340e:	701a      	strb	r2, [r3, #0]
    PUTSHORT(outlen, outp);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	1c5a      	adds	r2, r3, #1
 8013414:	60fa      	str	r2, [r7, #12]
 8013416:	697a      	ldr	r2, [r7, #20]
 8013418:	1212      	asrs	r2, r2, #8
 801341a:	b2d2      	uxtb	r2, r2
 801341c:	701a      	strb	r2, [r3, #0]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	1c5a      	adds	r2, r3, #1
 8013422:	60fa      	str	r2, [r7, #12]
 8013424:	697a      	ldr	r2, [r7, #20]
 8013426:	b2d2      	uxtb	r2, r2
 8013428:	701a      	strb	r2, [r3, #0]
    PUTCHAR(pcb->upap.us_userlen, outp);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	1c5a      	adds	r2, r3, #1
 801342e:	60fa      	str	r2, [r7, #12]
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8013436:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013442:	461a      	mov	r2, r3
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f000 fd65 	bl	8013f14 <memcpy>
    INCPTR(pcb->upap.us_userlen, outp);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013450:	461a      	mov	r2, r3
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	4413      	add	r3, r2
 8013456:	60fb      	str	r3, [r7, #12]
    PUTCHAR(pcb->upap.us_passwdlen, outp);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	60fa      	str	r2, [r7, #12]
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8013464:	701a      	strb	r2, [r3, #0]
    MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013470:	461a      	mov	r2, r3
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f000 fd4e 	bl	8013f14 <memcpy>

    ppp_write(pcb, p);
 8013478:	6939      	ldr	r1, [r7, #16]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7fe ff80 	bl	8012380 <ppp_write>

    TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
 8013480:	6879      	ldr	r1, [r7, #4]
 8013482:	4810      	ldr	r0, [pc, #64]	; (80134c4 <upap_sauthreq+0x158>)
 8013484:	f7fa f802 	bl	800d48c <sys_untimeout>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	7b1b      	ldrb	r3, [r3, #12]
 801348c:	461a      	mov	r2, r3
 801348e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013492:	fb03 f302 	mul.w	r3, r3, r2
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	490a      	ldr	r1, [pc, #40]	; (80134c4 <upap_sauthreq+0x158>)
 801349a:	4618      	mov	r0, r3
 801349c:	f7f9 ffca 	bl	800d434 <sys_timeout>
    ++pcb->upap.us_transmits;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134a6:	3301      	adds	r3, #1
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2203      	movs	r2, #3
 80134b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80134b8:	e000      	b.n	80134bc <upap_sauthreq+0x150>
        return;
 80134ba:	bf00      	nop
}
 80134bc:	3718      	adds	r7, #24
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	0801311f 	.word	0x0801311f

080134c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80134c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80134cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80134ce:	e003      	b.n	80134d8 <LoopCopyDataInit>

080134d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80134d0:	4b0c      	ldr	r3, [pc, #48]	; (8013504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80134d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80134d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80134d6:	3104      	adds	r1, #4

080134d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80134d8:	480b      	ldr	r0, [pc, #44]	; (8013508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80134da:	4b0c      	ldr	r3, [pc, #48]	; (801350c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80134dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80134de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80134e0:	d3f6      	bcc.n	80134d0 <CopyDataInit>
  ldr  r2, =_sbss
 80134e2:	4a0b      	ldr	r2, [pc, #44]	; (8013510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80134e4:	e002      	b.n	80134ec <LoopFillZerobss>

080134e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80134e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80134e8:	f842 3b04 	str.w	r3, [r2], #4

080134ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80134ec:	4b09      	ldr	r3, [pc, #36]	; (8013514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80134ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80134f0:	d3f9      	bcc.n	80134e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80134f2:	f000 f8d5 	bl	80136a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80134f6:	f000 fce9 	bl	8013ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80134fa:	f7ed ff99 	bl	8001430 <main>
  bx  lr    
 80134fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8013500:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8013504:	08018008 	.word	0x08018008
  ldr  r0, =_sdata
 8013508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801350c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8013510:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8013514:	20002484 	.word	0x20002484

08013518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013518:	e7fe      	b.n	8013518 <ADC_IRQHandler>

0801351a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 801351a:	b480      	push	{r7}
 801351c:	af00      	add	r7, sp, #0
}
 801351e:	bf00      	nop
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8013528:	b480      	push	{r7}
 801352a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801352c:	e7fe      	b.n	801352c <HardFault_Handler+0x4>

0801352e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801352e:	b480      	push	{r7}
 8013530:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8013532:	e7fe      	b.n	8013532 <MemManage_Handler+0x4>

08013534 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8013534:	b480      	push	{r7}
 8013536:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8013538:	e7fe      	b.n	8013538 <BusFault_Handler+0x4>

0801353a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801353a:	b480      	push	{r7}
 801353c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 801353e:	e7fe      	b.n	801353e <UsageFault_Handler+0x4>

08013540 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8013540:	b480      	push	{r7}
 8013542:	af00      	add	r7, sp, #0
}
 8013544:	bf00      	nop
 8013546:	46bd      	mov	sp, r7
 8013548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354c:	4770      	bx	lr

0801354e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 801354e:	b480      	push	{r7}
 8013550:	af00      	add	r7, sp, #0
}
 8013552:	bf00      	nop
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr

0801355c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 801355c:	b480      	push	{r7}
 801355e:	af00      	add	r7, sp, #0
}
 8013560:	bf00      	nop
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr

0801356a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801356a:	b480      	push	{r7}
 801356c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 801356e:	bf00      	nop
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr

08013578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013578:	b480      	push	{r7}
 801357a:	af00      	add	r7, sp, #0
	errno = ENOSYS;
 801357c:	4b04      	ldr	r3, [pc, #16]	; (8013590 <_getpid+0x18>)
 801357e:	2226      	movs	r2, #38	; 0x26
 8013580:	601a      	str	r2, [r3, #0]
	return -1;
 8013582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013586:	4618      	mov	r0, r3
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr
 8013590:	20002480 	.word	0x20002480

08013594 <_kill>:
  errno = ENOSYS;
  return -1;
}

int _kill(int32_t pid, int32_t sig)
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 801359e:	4b05      	ldr	r3, [pc, #20]	; (80135b4 <_kill+0x20>)
 80135a0:	2226      	movs	r2, #38	; 0x26
 80135a2:	601a      	str	r2, [r3, #0]
	return -1;
 80135a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	20002480 	.word	0x20002480

080135b8 <_exit>:

void _exit(int32_t status)
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
	while (1) {}		/* Make sure we hang here */
 80135c0:	e7fe      	b.n	80135c0 <_exit+0x8>
	...

080135c4 <_write>:
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80135c4:	b480      	push	{r7}
 80135c6:	b085      	sub	sp, #20
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 80135d0:	4b05      	ldr	r3, [pc, #20]	; (80135e8 <_write+0x24>)
 80135d2:	2226      	movs	r2, #38	; 0x26
 80135d4:	601a      	str	r2, [r3, #0]
	return -1;
 80135d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	20002480 	.word	0x20002480

080135ec <_sbrk>:

void * _sbrk(int32_t incr)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80135f4:	4b0b      	ldr	r3, [pc, #44]	; (8013624 <_sbrk+0x38>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <_sbrk+0x16>
		heap_end = & end;
 80135fc:	4b09      	ldr	r3, [pc, #36]	; (8013624 <_sbrk+0x38>)
 80135fe:	4a0a      	ldr	r2, [pc, #40]	; (8013628 <_sbrk+0x3c>)
 8013600:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8013602:	4b08      	ldr	r3, [pc, #32]	; (8013624 <_sbrk+0x38>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8013608:	4b06      	ldr	r3, [pc, #24]	; (8013624 <_sbrk+0x38>)
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	4413      	add	r3, r2
 8013610:	4a04      	ldr	r2, [pc, #16]	; (8013624 <_sbrk+0x38>)
 8013612:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8013614:	68fb      	ldr	r3, [r7, #12]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3714      	adds	r7, #20
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop
 8013624:	20000770 	.word	0x20000770
 8013628:	20002484 	.word	0x20002484

0801362c <_close>:

int _close(int32_t file)
{
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8013634:	4b05      	ldr	r3, [pc, #20]	; (801364c <_close+0x20>)
 8013636:	2226      	movs	r2, #38	; 0x26
 8013638:	601a      	str	r2, [r3, #0]
	return -1;
 801363a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801363e:	4618      	mov	r0, r3
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr
 801364a:	bf00      	nop
 801364c:	20002480 	.word	0x20002480

08013650 <_lseek>:
	errno = ENOSYS;
	return 0;
}

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8013650:	b480      	push	{r7}
 8013652:	b085      	sub	sp, #20
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 801365c:	4b05      	ldr	r3, [pc, #20]	; (8013674 <_lseek+0x24>)
 801365e:	2226      	movs	r2, #38	; 0x26
 8013660:	601a      	str	r2, [r3, #0]
	return -1;
 8013662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013666:	4618      	mov	r0, r3
 8013668:	3714      	adds	r7, #20
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop
 8013674:	20002480 	.word	0x20002480

08013678 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8013678:	b480      	push	{r7}
 801367a:	b085      	sub	sp, #20
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8013684:	4b05      	ldr	r3, [pc, #20]	; (801369c <_read+0x24>)
 8013686:	2226      	movs	r2, #38	; 0x26
 8013688:	601a      	str	r2, [r3, #0]
	return -1;
 801368a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801368e:	4618      	mov	r0, r3
 8013690:	3714      	adds	r7, #20
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr
 801369a:	bf00      	nop
 801369c:	20002480 	.word	0x20002480

080136a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80136a4:	4a16      	ldr	r2, [pc, #88]	; (8013700 <SystemInit+0x60>)
 80136a6:	4b16      	ldr	r3, [pc, #88]	; (8013700 <SystemInit+0x60>)
 80136a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80136b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80136b4:	4a13      	ldr	r2, [pc, #76]	; (8013704 <SystemInit+0x64>)
 80136b6:	4b13      	ldr	r3, [pc, #76]	; (8013704 <SystemInit+0x64>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f043 0301 	orr.w	r3, r3, #1
 80136be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80136c0:	4b10      	ldr	r3, [pc, #64]	; (8013704 <SystemInit+0x64>)
 80136c2:	2200      	movs	r2, #0
 80136c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80136c6:	4a0f      	ldr	r2, [pc, #60]	; (8013704 <SystemInit+0x64>)
 80136c8:	4b0e      	ldr	r3, [pc, #56]	; (8013704 <SystemInit+0x64>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80136d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80136d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80136d6:	4b0b      	ldr	r3, [pc, #44]	; (8013704 <SystemInit+0x64>)
 80136d8:	4a0b      	ldr	r2, [pc, #44]	; (8013708 <SystemInit+0x68>)
 80136da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80136dc:	4a09      	ldr	r2, [pc, #36]	; (8013704 <SystemInit+0x64>)
 80136de:	4b09      	ldr	r3, [pc, #36]	; (8013704 <SystemInit+0x64>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80136e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80136e8:	4b06      	ldr	r3, [pc, #24]	; (8013704 <SystemInit+0x64>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80136ee:	f000 f80d 	bl	801370c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80136f2:	4b03      	ldr	r3, [pc, #12]	; (8013700 <SystemInit+0x60>)
 80136f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80136f8:	609a      	str	r2, [r3, #8]
#endif
}
 80136fa:	bf00      	nop
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	e000ed00 	.word	0xe000ed00
 8013704:	40023800 	.word	0x40023800
 8013708:	24003010 	.word	0x24003010

0801370c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8013712:	2300      	movs	r3, #0
 8013714:	607b      	str	r3, [r7, #4]
 8013716:	2300      	movs	r3, #0
 8013718:	603b      	str	r3, [r7, #0]
  //RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 801371a:	4b33      	ldr	r3, [pc, #204]	; (80137e8 <SetSysClock+0xdc>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013722:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	3301      	adds	r3, #1
 8013728:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d103      	bne.n	8013738 <SetSysClock+0x2c>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013736:	d1f0      	bne.n	801371a <SetSysClock+0xe>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8013738:	4b2b      	ldr	r3, [pc, #172]	; (80137e8 <SetSysClock+0xdc>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013740:	2b00      	cmp	r3, #0
 8013742:	d002      	beq.n	801374a <SetSysClock+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 8013744:	2301      	movs	r3, #1
 8013746:	603b      	str	r3, [r7, #0]
 8013748:	e001      	b.n	801374e <SetSysClock+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 801374a:	2300      	movs	r3, #0
 801374c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b01      	cmp	r3, #1
 8013752:	d142      	bne.n	80137da <SetSysClock+0xce>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8013754:	4a24      	ldr	r2, [pc, #144]	; (80137e8 <SetSysClock+0xdc>)
 8013756:	4b24      	ldr	r3, [pc, #144]	; (80137e8 <SetSysClock+0xdc>)
 8013758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801375e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8013760:	4a22      	ldr	r2, [pc, #136]	; (80137ec <SetSysClock+0xe0>)
 8013762:	4b22      	ldr	r3, [pc, #136]	; (80137ec <SetSysClock+0xe0>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801376a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 801376c:	4a1e      	ldr	r2, [pc, #120]	; (80137e8 <SetSysClock+0xdc>)
 801376e:	4b1e      	ldr	r3, [pc, #120]	; (80137e8 <SetSysClock+0xdc>)
 8013770:	689b      	ldr	r3, [r3, #8]
 8013772:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8013774:	4a1c      	ldr	r2, [pc, #112]	; (80137e8 <SetSysClock+0xdc>)
 8013776:	4b1c      	ldr	r3, [pc, #112]	; (80137e8 <SetSysClock+0xdc>)
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801377e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8013780:	4a19      	ldr	r2, [pc, #100]	; (80137e8 <SetSysClock+0xdc>)
 8013782:	4b19      	ldr	r3, [pc, #100]	; (80137e8 <SetSysClock+0xdc>)
 8013784:	689b      	ldr	r3, [r3, #8]
 8013786:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 801378a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 801378c:	4b16      	ldr	r3, [pc, #88]	; (80137e8 <SetSysClock+0xdc>)
 801378e:	4a18      	ldr	r2, [pc, #96]	; (80137f0 <SetSysClock+0xe4>)
 8013790:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8013792:	4a15      	ldr	r2, [pc, #84]	; (80137e8 <SetSysClock+0xdc>)
 8013794:	4b14      	ldr	r3, [pc, #80]	; (80137e8 <SetSysClock+0xdc>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801379c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 801379e:	bf00      	nop
 80137a0:	4b11      	ldr	r3, [pc, #68]	; (80137e8 <SetSysClock+0xdc>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0f9      	beq.n	80137a0 <SetSysClock+0x94>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80137ac:	4b11      	ldr	r3, [pc, #68]	; (80137f4 <SetSysClock+0xe8>)
 80137ae:	f240 7205 	movw	r2, #1797	; 0x705
 80137b2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80137b4:	4a0c      	ldr	r2, [pc, #48]	; (80137e8 <SetSysClock+0xdc>)
 80137b6:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <SetSysClock+0xdc>)
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	f023 0303 	bic.w	r3, r3, #3
 80137be:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80137c0:	4a09      	ldr	r2, [pc, #36]	; (80137e8 <SetSysClock+0xdc>)
 80137c2:	4b09      	ldr	r3, [pc, #36]	; (80137e8 <SetSysClock+0xdc>)
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	f043 0302 	orr.w	r3, r3, #2
 80137ca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80137cc:	bf00      	nop
 80137ce:	4b06      	ldr	r3, [pc, #24]	; (80137e8 <SetSysClock+0xdc>)
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	f003 030c 	and.w	r3, r3, #12
 80137d6:	2b08      	cmp	r3, #8
 80137d8:	d1f9      	bne.n	80137ce <SetSysClock+0xc2>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80137da:	bf00      	nop
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	40023800 	.word	0x40023800
 80137ec:	40007000 	.word	0x40007000
 80137f0:	07405419 	.word	0x07405419
 80137f4:	40023c00 	.word	0x40023c00

080137f8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b087      	sub	sp, #28
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	607a      	str	r2, [r7, #4]
	int div = 1;
 8013804:	2301      	movs	r3, #1
 8013806:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8013808:	e004      	b.n	8013814 <ts_itoa+0x1c>
		div *= base;
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	fb02 f303 	mul.w	r3, r2, r3
 8013812:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	68ba      	ldr	r2, [r7, #8]
 8013818:	fbb2 f2f3 	udiv	r2, r2, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	429a      	cmp	r2, r3
 8013820:	d2f3      	bcs.n	801380a <ts_itoa+0x12>

	while (div != 0)
 8013822:	e029      	b.n	8013878 <ts_itoa+0x80>
	{
		int num = d/div;
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	68ba      	ldr	r2, [r7, #8]
 8013828:	fbb2 f3f3 	udiv	r3, r2, r3
 801382c:	613b      	str	r3, [r7, #16]
		d = d%div;
 801382e:	697a      	ldr	r2, [r7, #20]
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	fbb3 f1f2 	udiv	r1, r3, r2
 8013836:	fb02 f201 	mul.w	r2, r2, r1
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	60bb      	str	r3, [r7, #8]
		div /= base;
 801383e:	697a      	ldr	r2, [r7, #20]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	fb92 f3f3 	sdiv	r3, r2, r3
 8013846:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	2b09      	cmp	r3, #9
 801384c:	dd0a      	ble.n	8013864 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	1c59      	adds	r1, r3, #1
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	6011      	str	r1, [r2, #0]
 8013858:	693a      	ldr	r2, [r7, #16]
 801385a:	b2d2      	uxtb	r2, r2
 801385c:	3237      	adds	r2, #55	; 0x37
 801385e:	b2d2      	uxtb	r2, r2
 8013860:	701a      	strb	r2, [r3, #0]
 8013862:	e009      	b.n	8013878 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	1c59      	adds	r1, r3, #1
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	6011      	str	r1, [r2, #0]
 801386e:	693a      	ldr	r2, [r7, #16]
 8013870:	b2d2      	uxtb	r2, r2
 8013872:	3230      	adds	r2, #48	; 0x30
 8013874:	b2d2      	uxtb	r2, r2
 8013876:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1d2      	bne.n	8013824 <ts_itoa+0x2c>
	}
}
 801387e:	bf00      	nop
 8013880:	371c      	adds	r7, #28
 8013882:	46bd      	mov	sp, r7
 8013884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013888:	4770      	bx	lr

0801388a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b088      	sub	sp, #32
 801388e:	af00      	add	r7, sp, #0
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	60b9      	str	r1, [r7, #8]
 8013894:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	617b      	str	r3, [r7, #20]
	while(*fmt)
 801389a:	e07d      	b.n	8013998 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	2b25      	cmp	r3, #37	; 0x25
 80138a2:	d171      	bne.n	8013988 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	3301      	adds	r3, #1
 80138a8:	60bb      	str	r3, [r7, #8]
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	2b64      	cmp	r3, #100	; 0x64
 80138b0:	d01e      	beq.n	80138f0 <ts_formatstring+0x66>
 80138b2:	2b64      	cmp	r3, #100	; 0x64
 80138b4:	dc06      	bgt.n	80138c4 <ts_formatstring+0x3a>
 80138b6:	2b58      	cmp	r3, #88	; 0x58
 80138b8:	d050      	beq.n	801395c <ts_formatstring+0xd2>
 80138ba:	2b63      	cmp	r3, #99	; 0x63
 80138bc:	d00e      	beq.n	80138dc <ts_formatstring+0x52>
 80138be:	2b25      	cmp	r3, #37	; 0x25
 80138c0:	d058      	beq.n	8013974 <ts_formatstring+0xea>
 80138c2:	e05d      	b.n	8013980 <ts_formatstring+0xf6>
 80138c4:	2b73      	cmp	r3, #115	; 0x73
 80138c6:	d02b      	beq.n	8013920 <ts_formatstring+0x96>
 80138c8:	2b73      	cmp	r3, #115	; 0x73
 80138ca:	dc02      	bgt.n	80138d2 <ts_formatstring+0x48>
 80138cc:	2b69      	cmp	r3, #105	; 0x69
 80138ce:	d00f      	beq.n	80138f0 <ts_formatstring+0x66>
 80138d0:	e056      	b.n	8013980 <ts_formatstring+0xf6>
 80138d2:	2b75      	cmp	r3, #117	; 0x75
 80138d4:	d037      	beq.n	8013946 <ts_formatstring+0xbc>
 80138d6:	2b78      	cmp	r3, #120	; 0x78
 80138d8:	d040      	beq.n	801395c <ts_formatstring+0xd2>
 80138da:	e051      	b.n	8013980 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	60fa      	str	r2, [r7, #12]
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	1d11      	adds	r1, r2, #4
 80138e6:	6079      	str	r1, [r7, #4]
 80138e8:	6812      	ldr	r2, [r2, #0]
 80138ea:	b2d2      	uxtb	r2, r2
 80138ec:	701a      	strb	r2, [r3, #0]
				break;
 80138ee:	e047      	b.n	8013980 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	1d1a      	adds	r2, r3, #4
 80138f4:	607a      	str	r2, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	da07      	bge.n	8013910 <ts_formatstring+0x86>
					{
						val *= -1;
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	425b      	negs	r3, r3
 8013904:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	1c5a      	adds	r2, r3, #1
 801390a:	60fa      	str	r2, [r7, #12]
 801390c:	222d      	movs	r2, #45	; 0x2d
 801390e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8013910:	69f9      	ldr	r1, [r7, #28]
 8013912:	f107 030c 	add.w	r3, r7, #12
 8013916:	220a      	movs	r2, #10
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ff6d 	bl	80137f8 <ts_itoa>
				}
				break;
 801391e:	e02f      	b.n	8013980 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	1d1a      	adds	r2, r3, #4
 8013924:	607a      	str	r2, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	61bb      	str	r3, [r7, #24]
					while (*arg)
 801392a:	e007      	b.n	801393c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	1c5a      	adds	r2, r3, #1
 8013930:	60fa      	str	r2, [r7, #12]
 8013932:	69ba      	ldr	r2, [r7, #24]
 8013934:	1c51      	adds	r1, r2, #1
 8013936:	61b9      	str	r1, [r7, #24]
 8013938:	7812      	ldrb	r2, [r2, #0]
 801393a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1f3      	bne.n	801392c <ts_formatstring+0xa2>
					}
				}
				break;
 8013944:	e01c      	b.n	8013980 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	1d1a      	adds	r2, r3, #4
 801394a:	607a      	str	r2, [r7, #4]
 801394c:	6819      	ldr	r1, [r3, #0]
 801394e:	f107 030c 	add.w	r3, r7, #12
 8013952:	220a      	movs	r2, #10
 8013954:	4618      	mov	r0, r3
 8013956:	f7ff ff4f 	bl	80137f8 <ts_itoa>
				break;
 801395a:	e011      	b.n	8013980 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	1d1a      	adds	r2, r3, #4
 8013960:	607a      	str	r2, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	4619      	mov	r1, r3
 8013966:	f107 030c 	add.w	r3, r7, #12
 801396a:	2210      	movs	r2, #16
 801396c:	4618      	mov	r0, r3
 801396e:	f7ff ff43 	bl	80137f8 <ts_itoa>
				break;
 8013972:	e005      	b.n	8013980 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	1c5a      	adds	r2, r3, #1
 8013978:	60fa      	str	r2, [r7, #12]
 801397a:	2225      	movs	r2, #37	; 0x25
 801397c:	701a      	strb	r2, [r3, #0]
				  break;
 801397e:	bf00      	nop
			}
			fmt++;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	3301      	adds	r3, #1
 8013984:	60bb      	str	r3, [r7, #8]
 8013986:	e007      	b.n	8013998 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	1c5a      	adds	r2, r3, #1
 801398c:	60fa      	str	r2, [r7, #12]
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	1c51      	adds	r1, r2, #1
 8013992:	60b9      	str	r1, [r7, #8]
 8013994:	7812      	ldrb	r2, [r2, #0]
 8013996:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f47f af7d 	bne.w	801389c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2200      	movs	r2, #0
 80139a6:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	461a      	mov	r2, r3
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	1ad3      	subs	r3, r2, r3
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3720      	adds	r7, #32
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
	int length = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80139c6:	e081      	b.n	8013acc <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	2b25      	cmp	r3, #37	; 0x25
 80139ce:	d177      	bne.n	8013ac0 <ts_formatlength+0x108>
		{
			++fmt;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	3301      	adds	r3, #1
 80139d4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	3b58      	subs	r3, #88	; 0x58
 80139dc:	2b20      	cmp	r3, #32
 80139de:	d86a      	bhi.n	8013ab6 <ts_formatlength+0xfe>
 80139e0:	a201      	add	r2, pc, #4	; (adr r2, 80139e8 <ts_formatlength+0x30>)
 80139e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139e6:	bf00      	nop
 80139e8:	08013aa9 	.word	0x08013aa9
 80139ec:	08013ab7 	.word	0x08013ab7
 80139f0:	08013ab7 	.word	0x08013ab7
 80139f4:	08013ab7 	.word	0x08013ab7
 80139f8:	08013ab7 	.word	0x08013ab7
 80139fc:	08013ab7 	.word	0x08013ab7
 8013a00:	08013ab7 	.word	0x08013ab7
 8013a04:	08013ab7 	.word	0x08013ab7
 8013a08:	08013ab7 	.word	0x08013ab7
 8013a0c:	08013ab7 	.word	0x08013ab7
 8013a10:	08013ab7 	.word	0x08013ab7
 8013a14:	08013a6d 	.word	0x08013a6d
 8013a18:	08013a7b 	.word	0x08013a7b
 8013a1c:	08013ab7 	.word	0x08013ab7
 8013a20:	08013ab7 	.word	0x08013ab7
 8013a24:	08013ab7 	.word	0x08013ab7
 8013a28:	08013ab7 	.word	0x08013ab7
 8013a2c:	08013a7b 	.word	0x08013a7b
 8013a30:	08013ab7 	.word	0x08013ab7
 8013a34:	08013ab7 	.word	0x08013ab7
 8013a38:	08013ab7 	.word	0x08013ab7
 8013a3c:	08013ab7 	.word	0x08013ab7
 8013a40:	08013ab7 	.word	0x08013ab7
 8013a44:	08013ab7 	.word	0x08013ab7
 8013a48:	08013ab7 	.word	0x08013ab7
 8013a4c:	08013ab7 	.word	0x08013ab7
 8013a50:	08013ab7 	.word	0x08013ab7
 8013a54:	08013a89 	.word	0x08013a89
 8013a58:	08013ab7 	.word	0x08013ab7
 8013a5c:	08013a7b 	.word	0x08013a7b
 8013a60:	08013ab7 	.word	0x08013ab7
 8013a64:	08013ab7 	.word	0x08013ab7
 8013a68:	08013aa9 	.word	0x08013aa9
			{
			  case 'c':
		  		  va_arg(va, int);
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	603b      	str	r3, [r7, #0]
				  ++length;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	3301      	adds	r3, #1
 8013a76:	60fb      	str	r3, [r7, #12]
				  break;
 8013a78:	e025      	b.n	8013ac6 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	330b      	adds	r3, #11
 8013a7e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	3304      	adds	r3, #4
 8013a84:	603b      	str	r3, [r7, #0]
				  break;
 8013a86:	e01e      	b.n	8013ac6 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	1d1a      	adds	r2, r3, #4
 8013a8c:	603a      	str	r2, [r7, #0]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8013a92:	e002      	b.n	8013a9a <ts_formatlength+0xe2>
			  			  ++length;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	3301      	adds	r3, #1
 8013a98:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	1c5a      	adds	r2, r3, #1
 8013a9e:	60ba      	str	r2, [r7, #8]
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1f6      	bne.n	8013a94 <ts_formatlength+0xdc>
			  	  }
				  break;
 8013aa6:	e00e      	b.n	8013ac6 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	3308      	adds	r3, #8
 8013aac:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	3304      	adds	r3, #4
 8013ab2:	603b      	str	r3, [r7, #0]
				  break;
 8013ab4:	e007      	b.n	8013ac6 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	60fb      	str	r3, [r7, #12]
				  break;
 8013abc:	bf00      	nop
 8013abe:	e002      	b.n	8013ac6 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f47f af79 	bne.w	80139c8 <ts_formatlength+0x10>
	}
	return length;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3714      	adds	r7, #20
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8013ae4:	b40e      	push	{r1, r2, r3}
 8013ae6:	b580      	push	{r7, lr}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8013aee:	f107 0320 	add.w	r3, r7, #32
 8013af2:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	69f9      	ldr	r1, [r7, #28]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff fec6 	bl	801388a <ts_formatstring>
 8013afe:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8013b00:	68fb      	ldr	r3, [r7, #12]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3714      	adds	r7, #20
 8013b06:	46bd      	mov	sp, r7
 8013b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b0c:	b003      	add	sp, #12
 8013b0e:	4770      	bx	lr

08013b10 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8013b10:	b40f      	push	{r0, r1, r2, r3}
 8013b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
	int length = 0;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8013b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013b22:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8013b24:	6839      	ldr	r1, [r7, #0]
 8013b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b28:	f7ff ff46 	bl	80139b8 <ts_formatlength>
 8013b2c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8013b2e:	466b      	mov	r3, sp
 8013b30:	461e      	mov	r6, r3
		char buf[length];
 8013b32:	68f9      	ldr	r1, [r7, #12]
 8013b34:	1e4b      	subs	r3, r1, #1
 8013b36:	60bb      	str	r3, [r7, #8]
 8013b38:	460b      	mov	r3, r1
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	f04f 0300 	mov.w	r3, #0
 8013b40:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8013b44:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8013b48:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	461a      	mov	r2, r3
 8013b50:	f04f 0300 	mov.w	r3, #0
 8013b54:	00dd      	lsls	r5, r3, #3
 8013b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8013b5a:	00d4      	lsls	r4, r2, #3
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	3307      	adds	r3, #7
 8013b60:	08db      	lsrs	r3, r3, #3
 8013b62:	00db      	lsls	r3, r3, #3
 8013b64:	ebad 0d03 	sub.w	sp, sp, r3
 8013b68:	466b      	mov	r3, sp
 8013b6a:	3300      	adds	r3, #0
 8013b6c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8013b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013b72:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	683a      	ldr	r2, [r7, #0]
 8013b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff fe85 	bl	801388a <ts_formatstring>
 8013b80:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	4619      	mov	r1, r3
 8013b88:	2001      	movs	r0, #1
 8013b8a:	f7ff fd1b 	bl	80135c4 <_write>
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8013b92:	68fb      	ldr	r3, [r7, #12]
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	3714      	adds	r7, #20
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b9e:	b004      	add	sp, #16
 8013ba0:	4770      	bx	lr

08013ba2 <abort>:
 8013ba2:	b508      	push	{r3, lr}
 8013ba4:	2006      	movs	r0, #6
 8013ba6:	f000 fac7 	bl	8014138 <raise>
 8013baa:	2001      	movs	r0, #1
 8013bac:	f7ff fd04 	bl	80135b8 <_exit>

08013bb0 <__sflush_r>:
 8013bb0:	898a      	ldrh	r2, [r1, #12]
 8013bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	0710      	lsls	r0, r2, #28
 8013bba:	460c      	mov	r4, r1
 8013bbc:	d45a      	bmi.n	8013c74 <__sflush_r+0xc4>
 8013bbe:	684b      	ldr	r3, [r1, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	dc05      	bgt.n	8013bd0 <__sflush_r+0x20>
 8013bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	dc02      	bgt.n	8013bd0 <__sflush_r+0x20>
 8013bca:	2000      	movs	r0, #0
 8013bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bd2:	2e00      	cmp	r6, #0
 8013bd4:	d0f9      	beq.n	8013bca <__sflush_r+0x1a>
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013bdc:	682f      	ldr	r7, [r5, #0]
 8013bde:	602b      	str	r3, [r5, #0]
 8013be0:	d033      	beq.n	8013c4a <__sflush_r+0x9a>
 8013be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013be4:	89a3      	ldrh	r3, [r4, #12]
 8013be6:	075a      	lsls	r2, r3, #29
 8013be8:	d505      	bpl.n	8013bf6 <__sflush_r+0x46>
 8013bea:	6863      	ldr	r3, [r4, #4]
 8013bec:	1ac0      	subs	r0, r0, r3
 8013bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bf0:	b10b      	cbz	r3, 8013bf6 <__sflush_r+0x46>
 8013bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bf4:	1ac0      	subs	r0, r0, r3
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bfc:	6a21      	ldr	r1, [r4, #32]
 8013bfe:	4628      	mov	r0, r5
 8013c00:	47b0      	blx	r6
 8013c02:	1c43      	adds	r3, r0, #1
 8013c04:	89a3      	ldrh	r3, [r4, #12]
 8013c06:	d106      	bne.n	8013c16 <__sflush_r+0x66>
 8013c08:	6829      	ldr	r1, [r5, #0]
 8013c0a:	291d      	cmp	r1, #29
 8013c0c:	d84b      	bhi.n	8013ca6 <__sflush_r+0xf6>
 8013c0e:	4a2b      	ldr	r2, [pc, #172]	; (8013cbc <__sflush_r+0x10c>)
 8013c10:	40ca      	lsrs	r2, r1
 8013c12:	07d6      	lsls	r6, r2, #31
 8013c14:	d547      	bpl.n	8013ca6 <__sflush_r+0xf6>
 8013c16:	2200      	movs	r2, #0
 8013c18:	6062      	str	r2, [r4, #4]
 8013c1a:	04d9      	lsls	r1, r3, #19
 8013c1c:	6922      	ldr	r2, [r4, #16]
 8013c1e:	6022      	str	r2, [r4, #0]
 8013c20:	d504      	bpl.n	8013c2c <__sflush_r+0x7c>
 8013c22:	1c42      	adds	r2, r0, #1
 8013c24:	d101      	bne.n	8013c2a <__sflush_r+0x7a>
 8013c26:	682b      	ldr	r3, [r5, #0]
 8013c28:	b903      	cbnz	r3, 8013c2c <__sflush_r+0x7c>
 8013c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8013c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c2e:	602f      	str	r7, [r5, #0]
 8013c30:	2900      	cmp	r1, #0
 8013c32:	d0ca      	beq.n	8013bca <__sflush_r+0x1a>
 8013c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c38:	4299      	cmp	r1, r3
 8013c3a:	d002      	beq.n	8013c42 <__sflush_r+0x92>
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f000 f997 	bl	8013f70 <_free_r>
 8013c42:	2000      	movs	r0, #0
 8013c44:	6360      	str	r0, [r4, #52]	; 0x34
 8013c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c4a:	6a21      	ldr	r1, [r4, #32]
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	4628      	mov	r0, r5
 8013c50:	47b0      	blx	r6
 8013c52:	1c41      	adds	r1, r0, #1
 8013c54:	d1c6      	bne.n	8013be4 <__sflush_r+0x34>
 8013c56:	682b      	ldr	r3, [r5, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d0c3      	beq.n	8013be4 <__sflush_r+0x34>
 8013c5c:	2b1d      	cmp	r3, #29
 8013c5e:	d001      	beq.n	8013c64 <__sflush_r+0xb4>
 8013c60:	2b16      	cmp	r3, #22
 8013c62:	d101      	bne.n	8013c68 <__sflush_r+0xb8>
 8013c64:	602f      	str	r7, [r5, #0]
 8013c66:	e7b0      	b.n	8013bca <__sflush_r+0x1a>
 8013c68:	89a3      	ldrh	r3, [r4, #12]
 8013c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c6e:	81a3      	strh	r3, [r4, #12]
 8013c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c74:	690f      	ldr	r7, [r1, #16]
 8013c76:	2f00      	cmp	r7, #0
 8013c78:	d0a7      	beq.n	8013bca <__sflush_r+0x1a>
 8013c7a:	0793      	lsls	r3, r2, #30
 8013c7c:	680e      	ldr	r6, [r1, #0]
 8013c7e:	bf08      	it	eq
 8013c80:	694b      	ldreq	r3, [r1, #20]
 8013c82:	600f      	str	r7, [r1, #0]
 8013c84:	bf18      	it	ne
 8013c86:	2300      	movne	r3, #0
 8013c88:	eba6 0807 	sub.w	r8, r6, r7
 8013c8c:	608b      	str	r3, [r1, #8]
 8013c8e:	f1b8 0f00 	cmp.w	r8, #0
 8013c92:	dd9a      	ble.n	8013bca <__sflush_r+0x1a>
 8013c94:	4643      	mov	r3, r8
 8013c96:	463a      	mov	r2, r7
 8013c98:	6a21      	ldr	r1, [r4, #32]
 8013c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	47b0      	blx	r6
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	dc07      	bgt.n	8013cb4 <__sflush_r+0x104>
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013caa:	81a3      	strh	r3, [r4, #12]
 8013cac:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb4:	4407      	add	r7, r0
 8013cb6:	eba8 0800 	sub.w	r8, r8, r0
 8013cba:	e7e8      	b.n	8013c8e <__sflush_r+0xde>
 8013cbc:	20400001 	.word	0x20400001

08013cc0 <_fflush_r>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	690b      	ldr	r3, [r1, #16]
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	460c      	mov	r4, r1
 8013cc8:	b1db      	cbz	r3, 8013d02 <_fflush_r+0x42>
 8013cca:	b118      	cbz	r0, 8013cd4 <_fflush_r+0x14>
 8013ccc:	6983      	ldr	r3, [r0, #24]
 8013cce:	b90b      	cbnz	r3, 8013cd4 <_fflush_r+0x14>
 8013cd0:	f000 f872 	bl	8013db8 <__sinit>
 8013cd4:	4b0c      	ldr	r3, [pc, #48]	; (8013d08 <_fflush_r+0x48>)
 8013cd6:	429c      	cmp	r4, r3
 8013cd8:	d109      	bne.n	8013cee <_fflush_r+0x2e>
 8013cda:	686c      	ldr	r4, [r5, #4]
 8013cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ce0:	b17b      	cbz	r3, 8013d02 <_fflush_r+0x42>
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cea:	f7ff bf61 	b.w	8013bb0 <__sflush_r>
 8013cee:	4b07      	ldr	r3, [pc, #28]	; (8013d0c <_fflush_r+0x4c>)
 8013cf0:	429c      	cmp	r4, r3
 8013cf2:	d101      	bne.n	8013cf8 <_fflush_r+0x38>
 8013cf4:	68ac      	ldr	r4, [r5, #8]
 8013cf6:	e7f1      	b.n	8013cdc <_fflush_r+0x1c>
 8013cf8:	4b05      	ldr	r3, [pc, #20]	; (8013d10 <_fflush_r+0x50>)
 8013cfa:	429c      	cmp	r4, r3
 8013cfc:	bf08      	it	eq
 8013cfe:	68ec      	ldreq	r4, [r5, #12]
 8013d00:	e7ec      	b.n	8013cdc <_fflush_r+0x1c>
 8013d02:	2000      	movs	r0, #0
 8013d04:	bd38      	pop	{r3, r4, r5, pc}
 8013d06:	bf00      	nop
 8013d08:	08017f88 	.word	0x08017f88
 8013d0c:	08017fa8 	.word	0x08017fa8
 8013d10:	08017f68 	.word	0x08017f68

08013d14 <fflush>:
 8013d14:	4601      	mov	r1, r0
 8013d16:	b920      	cbnz	r0, 8013d22 <fflush+0xe>
 8013d18:	4b04      	ldr	r3, [pc, #16]	; (8013d2c <fflush+0x18>)
 8013d1a:	4905      	ldr	r1, [pc, #20]	; (8013d30 <fflush+0x1c>)
 8013d1c:	6818      	ldr	r0, [r3, #0]
 8013d1e:	f000 b8b7 	b.w	8013e90 <_fwalk_reent>
 8013d22:	4b04      	ldr	r3, [pc, #16]	; (8013d34 <fflush+0x20>)
 8013d24:	6818      	ldr	r0, [r3, #0]
 8013d26:	f7ff bfcb 	b.w	8013cc0 <_fflush_r>
 8013d2a:	bf00      	nop
 8013d2c:	08017fc8 	.word	0x08017fc8
 8013d30:	08013cc1 	.word	0x08013cc1
 8013d34:	20000010 	.word	0x20000010

08013d38 <_cleanup_r>:
 8013d38:	4901      	ldr	r1, [pc, #4]	; (8013d40 <_cleanup_r+0x8>)
 8013d3a:	f000 b8a9 	b.w	8013e90 <_fwalk_reent>
 8013d3e:	bf00      	nop
 8013d40:	08013cc1 	.word	0x08013cc1

08013d44 <std.isra.0>:
 8013d44:	2300      	movs	r3, #0
 8013d46:	b510      	push	{r4, lr}
 8013d48:	4604      	mov	r4, r0
 8013d4a:	6003      	str	r3, [r0, #0]
 8013d4c:	6043      	str	r3, [r0, #4]
 8013d4e:	6083      	str	r3, [r0, #8]
 8013d50:	8181      	strh	r1, [r0, #12]
 8013d52:	6643      	str	r3, [r0, #100]	; 0x64
 8013d54:	81c2      	strh	r2, [r0, #14]
 8013d56:	6103      	str	r3, [r0, #16]
 8013d58:	6143      	str	r3, [r0, #20]
 8013d5a:	6183      	str	r3, [r0, #24]
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	2208      	movs	r2, #8
 8013d60:	305c      	adds	r0, #92	; 0x5c
 8013d62:	f000 f8fc 	bl	8013f5e <memset>
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <std.isra.0+0x38>)
 8013d68:	6263      	str	r3, [r4, #36]	; 0x24
 8013d6a:	4b05      	ldr	r3, [pc, #20]	; (8013d80 <std.isra.0+0x3c>)
 8013d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d6e:	4b05      	ldr	r3, [pc, #20]	; (8013d84 <std.isra.0+0x40>)
 8013d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d72:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <std.isra.0+0x44>)
 8013d74:	6224      	str	r4, [r4, #32]
 8013d76:	6323      	str	r3, [r4, #48]	; 0x30
 8013d78:	bd10      	pop	{r4, pc}
 8013d7a:	bf00      	nop
 8013d7c:	080141d9 	.word	0x080141d9
 8013d80:	080141fb 	.word	0x080141fb
 8013d84:	08014233 	.word	0x08014233
 8013d88:	08014257 	.word	0x08014257

08013d8c <__sfmoreglue>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	1e4a      	subs	r2, r1, #1
 8013d90:	2568      	movs	r5, #104	; 0x68
 8013d92:	4355      	muls	r5, r2
 8013d94:	460e      	mov	r6, r1
 8013d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d9a:	f000 f937 	bl	801400c <_malloc_r>
 8013d9e:	4604      	mov	r4, r0
 8013da0:	b140      	cbz	r0, 8013db4 <__sfmoreglue+0x28>
 8013da2:	2100      	movs	r1, #0
 8013da4:	e880 0042 	stmia.w	r0, {r1, r6}
 8013da8:	300c      	adds	r0, #12
 8013daa:	60a0      	str	r0, [r4, #8]
 8013dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013db0:	f000 f8d5 	bl	8013f5e <memset>
 8013db4:	4620      	mov	r0, r4
 8013db6:	bd70      	pop	{r4, r5, r6, pc}

08013db8 <__sinit>:
 8013db8:	6983      	ldr	r3, [r0, #24]
 8013dba:	b510      	push	{r4, lr}
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	bb33      	cbnz	r3, 8013e0e <__sinit+0x56>
 8013dc0:	6483      	str	r3, [r0, #72]	; 0x48
 8013dc2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013dc4:	6503      	str	r3, [r0, #80]	; 0x50
 8013dc6:	4b12      	ldr	r3, [pc, #72]	; (8013e10 <__sinit+0x58>)
 8013dc8:	4a12      	ldr	r2, [pc, #72]	; (8013e14 <__sinit+0x5c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	6282      	str	r2, [r0, #40]	; 0x28
 8013dce:	4298      	cmp	r0, r3
 8013dd0:	bf04      	itt	eq
 8013dd2:	2301      	moveq	r3, #1
 8013dd4:	6183      	streq	r3, [r0, #24]
 8013dd6:	f000 f81f 	bl	8013e18 <__sfp>
 8013dda:	6060      	str	r0, [r4, #4]
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f000 f81b 	bl	8013e18 <__sfp>
 8013de2:	60a0      	str	r0, [r4, #8]
 8013de4:	4620      	mov	r0, r4
 8013de6:	f000 f817 	bl	8013e18 <__sfp>
 8013dea:	2200      	movs	r2, #0
 8013dec:	60e0      	str	r0, [r4, #12]
 8013dee:	2104      	movs	r1, #4
 8013df0:	6860      	ldr	r0, [r4, #4]
 8013df2:	f7ff ffa7 	bl	8013d44 <std.isra.0>
 8013df6:	2201      	movs	r2, #1
 8013df8:	2109      	movs	r1, #9
 8013dfa:	68a0      	ldr	r0, [r4, #8]
 8013dfc:	f7ff ffa2 	bl	8013d44 <std.isra.0>
 8013e00:	2202      	movs	r2, #2
 8013e02:	2112      	movs	r1, #18
 8013e04:	68e0      	ldr	r0, [r4, #12]
 8013e06:	f7ff ff9d 	bl	8013d44 <std.isra.0>
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	61a3      	str	r3, [r4, #24]
 8013e0e:	bd10      	pop	{r4, pc}
 8013e10:	08017fc8 	.word	0x08017fc8
 8013e14:	08013d39 	.word	0x08013d39

08013e18 <__sfp>:
 8013e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1a:	4b1c      	ldr	r3, [pc, #112]	; (8013e8c <__sfp+0x74>)
 8013e1c:	681e      	ldr	r6, [r3, #0]
 8013e1e:	69b3      	ldr	r3, [r6, #24]
 8013e20:	4607      	mov	r7, r0
 8013e22:	b913      	cbnz	r3, 8013e2a <__sfp+0x12>
 8013e24:	4630      	mov	r0, r6
 8013e26:	f7ff ffc7 	bl	8013db8 <__sinit>
 8013e2a:	3648      	adds	r6, #72	; 0x48
 8013e2c:	68b4      	ldr	r4, [r6, #8]
 8013e2e:	6873      	ldr	r3, [r6, #4]
 8013e30:	3b01      	subs	r3, #1
 8013e32:	d503      	bpl.n	8013e3c <__sfp+0x24>
 8013e34:	6833      	ldr	r3, [r6, #0]
 8013e36:	b133      	cbz	r3, 8013e46 <__sfp+0x2e>
 8013e38:	6836      	ldr	r6, [r6, #0]
 8013e3a:	e7f7      	b.n	8013e2c <__sfp+0x14>
 8013e3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e40:	b16d      	cbz	r5, 8013e5e <__sfp+0x46>
 8013e42:	3468      	adds	r4, #104	; 0x68
 8013e44:	e7f4      	b.n	8013e30 <__sfp+0x18>
 8013e46:	2104      	movs	r1, #4
 8013e48:	4638      	mov	r0, r7
 8013e4a:	f7ff ff9f 	bl	8013d8c <__sfmoreglue>
 8013e4e:	6030      	str	r0, [r6, #0]
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d1f1      	bne.n	8013e38 <__sfp+0x20>
 8013e54:	230c      	movs	r3, #12
 8013e56:	603b      	str	r3, [r7, #0]
 8013e58:	4604      	mov	r4, r0
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e62:	81e3      	strh	r3, [r4, #14]
 8013e64:	2301      	movs	r3, #1
 8013e66:	81a3      	strh	r3, [r4, #12]
 8013e68:	6665      	str	r5, [r4, #100]	; 0x64
 8013e6a:	6025      	str	r5, [r4, #0]
 8013e6c:	60a5      	str	r5, [r4, #8]
 8013e6e:	6065      	str	r5, [r4, #4]
 8013e70:	6125      	str	r5, [r4, #16]
 8013e72:	6165      	str	r5, [r4, #20]
 8013e74:	61a5      	str	r5, [r4, #24]
 8013e76:	2208      	movs	r2, #8
 8013e78:	4629      	mov	r1, r5
 8013e7a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e7e:	f000 f86e 	bl	8013f5e <memset>
 8013e82:	6365      	str	r5, [r4, #52]	; 0x34
 8013e84:	63a5      	str	r5, [r4, #56]	; 0x38
 8013e86:	64a5      	str	r5, [r4, #72]	; 0x48
 8013e88:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013e8a:	e7e6      	b.n	8013e5a <__sfp+0x42>
 8013e8c:	08017fc8 	.word	0x08017fc8

08013e90 <_fwalk_reent>:
 8013e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e94:	4680      	mov	r8, r0
 8013e96:	4689      	mov	r9, r1
 8013e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e9c:	2600      	movs	r6, #0
 8013e9e:	b914      	cbnz	r4, 8013ea6 <_fwalk_reent+0x16>
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ea6:	68a5      	ldr	r5, [r4, #8]
 8013ea8:	6867      	ldr	r7, [r4, #4]
 8013eaa:	3f01      	subs	r7, #1
 8013eac:	d501      	bpl.n	8013eb2 <_fwalk_reent+0x22>
 8013eae:	6824      	ldr	r4, [r4, #0]
 8013eb0:	e7f5      	b.n	8013e9e <_fwalk_reent+0xe>
 8013eb2:	89ab      	ldrh	r3, [r5, #12]
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d907      	bls.n	8013ec8 <_fwalk_reent+0x38>
 8013eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	d003      	beq.n	8013ec8 <_fwalk_reent+0x38>
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	4640      	mov	r0, r8
 8013ec4:	47c8      	blx	r9
 8013ec6:	4306      	orrs	r6, r0
 8013ec8:	3568      	adds	r5, #104	; 0x68
 8013eca:	e7ee      	b.n	8013eaa <_fwalk_reent+0x1a>

08013ecc <__libc_init_array>:
 8013ecc:	b570      	push	{r4, r5, r6, lr}
 8013ece:	4e0d      	ldr	r6, [pc, #52]	; (8013f04 <__libc_init_array+0x38>)
 8013ed0:	4c0d      	ldr	r4, [pc, #52]	; (8013f08 <__libc_init_array+0x3c>)
 8013ed2:	1ba4      	subs	r4, r4, r6
 8013ed4:	10a4      	asrs	r4, r4, #2
 8013ed6:	2500      	movs	r5, #0
 8013ed8:	42a5      	cmp	r5, r4
 8013eda:	d109      	bne.n	8013ef0 <__libc_init_array+0x24>
 8013edc:	4e0b      	ldr	r6, [pc, #44]	; (8013f0c <__libc_init_array+0x40>)
 8013ede:	4c0c      	ldr	r4, [pc, #48]	; (8013f10 <__libc_init_array+0x44>)
 8013ee0:	f000 fd6c 	bl	80149bc <_init>
 8013ee4:	1ba4      	subs	r4, r4, r6
 8013ee6:	10a4      	asrs	r4, r4, #2
 8013ee8:	2500      	movs	r5, #0
 8013eea:	42a5      	cmp	r5, r4
 8013eec:	d105      	bne.n	8013efa <__libc_init_array+0x2e>
 8013eee:	bd70      	pop	{r4, r5, r6, pc}
 8013ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013ef4:	4798      	blx	r3
 8013ef6:	3501      	adds	r5, #1
 8013ef8:	e7ee      	b.n	8013ed8 <__libc_init_array+0xc>
 8013efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013efe:	4798      	blx	r3
 8013f00:	3501      	adds	r5, #1
 8013f02:	e7f2      	b.n	8013eea <__libc_init_array+0x1e>
 8013f04:	08018000 	.word	0x08018000
 8013f08:	08018000 	.word	0x08018000
 8013f0c:	08018000 	.word	0x08018000
 8013f10:	08018004 	.word	0x08018004

08013f14 <memcpy>:
 8013f14:	b510      	push	{r4, lr}
 8013f16:	1e43      	subs	r3, r0, #1
 8013f18:	440a      	add	r2, r1
 8013f1a:	4291      	cmp	r1, r2
 8013f1c:	d100      	bne.n	8013f20 <memcpy+0xc>
 8013f1e:	bd10      	pop	{r4, pc}
 8013f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f28:	e7f7      	b.n	8013f1a <memcpy+0x6>

08013f2a <memmove>:
 8013f2a:	4288      	cmp	r0, r1
 8013f2c:	b510      	push	{r4, lr}
 8013f2e:	eb01 0302 	add.w	r3, r1, r2
 8013f32:	d803      	bhi.n	8013f3c <memmove+0x12>
 8013f34:	1e42      	subs	r2, r0, #1
 8013f36:	4299      	cmp	r1, r3
 8013f38:	d10c      	bne.n	8013f54 <memmove+0x2a>
 8013f3a:	bd10      	pop	{r4, pc}
 8013f3c:	4298      	cmp	r0, r3
 8013f3e:	d2f9      	bcs.n	8013f34 <memmove+0xa>
 8013f40:	1881      	adds	r1, r0, r2
 8013f42:	1ad2      	subs	r2, r2, r3
 8013f44:	42d3      	cmn	r3, r2
 8013f46:	d100      	bne.n	8013f4a <memmove+0x20>
 8013f48:	bd10      	pop	{r4, pc}
 8013f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013f52:	e7f7      	b.n	8013f44 <memmove+0x1a>
 8013f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f5c:	e7eb      	b.n	8013f36 <memmove+0xc>

08013f5e <memset>:
 8013f5e:	4402      	add	r2, r0
 8013f60:	4603      	mov	r3, r0
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d100      	bne.n	8013f68 <memset+0xa>
 8013f66:	4770      	bx	lr
 8013f68:	f803 1b01 	strb.w	r1, [r3], #1
 8013f6c:	e7f9      	b.n	8013f62 <memset+0x4>
	...

08013f70 <_free_r>:
 8013f70:	b538      	push	{r3, r4, r5, lr}
 8013f72:	4605      	mov	r5, r0
 8013f74:	2900      	cmp	r1, #0
 8013f76:	d045      	beq.n	8014004 <_free_r+0x94>
 8013f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f7c:	1f0c      	subs	r4, r1, #4
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	bfb8      	it	lt
 8013f82:	18e4      	addlt	r4, r4, r3
 8013f84:	f000 f9f0 	bl	8014368 <__malloc_lock>
 8013f88:	4a1f      	ldr	r2, [pc, #124]	; (8014008 <_free_r+0x98>)
 8013f8a:	6813      	ldr	r3, [r2, #0]
 8013f8c:	4610      	mov	r0, r2
 8013f8e:	b933      	cbnz	r3, 8013f9e <_free_r+0x2e>
 8013f90:	6063      	str	r3, [r4, #4]
 8013f92:	6014      	str	r4, [r2, #0]
 8013f94:	4628      	mov	r0, r5
 8013f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f9a:	f000 b9e6 	b.w	801436a <__malloc_unlock>
 8013f9e:	42a3      	cmp	r3, r4
 8013fa0:	d90c      	bls.n	8013fbc <_free_r+0x4c>
 8013fa2:	6821      	ldr	r1, [r4, #0]
 8013fa4:	1862      	adds	r2, r4, r1
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	bf04      	itt	eq
 8013faa:	681a      	ldreq	r2, [r3, #0]
 8013fac:	685b      	ldreq	r3, [r3, #4]
 8013fae:	6063      	str	r3, [r4, #4]
 8013fb0:	bf04      	itt	eq
 8013fb2:	1852      	addeq	r2, r2, r1
 8013fb4:	6022      	streq	r2, [r4, #0]
 8013fb6:	6004      	str	r4, [r0, #0]
 8013fb8:	e7ec      	b.n	8013f94 <_free_r+0x24>
 8013fba:	4613      	mov	r3, r2
 8013fbc:	685a      	ldr	r2, [r3, #4]
 8013fbe:	b10a      	cbz	r2, 8013fc4 <_free_r+0x54>
 8013fc0:	42a2      	cmp	r2, r4
 8013fc2:	d9fa      	bls.n	8013fba <_free_r+0x4a>
 8013fc4:	6819      	ldr	r1, [r3, #0]
 8013fc6:	1858      	adds	r0, r3, r1
 8013fc8:	42a0      	cmp	r0, r4
 8013fca:	d10b      	bne.n	8013fe4 <_free_r+0x74>
 8013fcc:	6820      	ldr	r0, [r4, #0]
 8013fce:	4401      	add	r1, r0
 8013fd0:	1858      	adds	r0, r3, r1
 8013fd2:	4282      	cmp	r2, r0
 8013fd4:	6019      	str	r1, [r3, #0]
 8013fd6:	d1dd      	bne.n	8013f94 <_free_r+0x24>
 8013fd8:	6810      	ldr	r0, [r2, #0]
 8013fda:	6852      	ldr	r2, [r2, #4]
 8013fdc:	605a      	str	r2, [r3, #4]
 8013fde:	4401      	add	r1, r0
 8013fe0:	6019      	str	r1, [r3, #0]
 8013fe2:	e7d7      	b.n	8013f94 <_free_r+0x24>
 8013fe4:	d902      	bls.n	8013fec <_free_r+0x7c>
 8013fe6:	230c      	movs	r3, #12
 8013fe8:	602b      	str	r3, [r5, #0]
 8013fea:	e7d3      	b.n	8013f94 <_free_r+0x24>
 8013fec:	6820      	ldr	r0, [r4, #0]
 8013fee:	1821      	adds	r1, r4, r0
 8013ff0:	428a      	cmp	r2, r1
 8013ff2:	bf04      	itt	eq
 8013ff4:	6811      	ldreq	r1, [r2, #0]
 8013ff6:	6852      	ldreq	r2, [r2, #4]
 8013ff8:	6062      	str	r2, [r4, #4]
 8013ffa:	bf04      	itt	eq
 8013ffc:	1809      	addeq	r1, r1, r0
 8013ffe:	6021      	streq	r1, [r4, #0]
 8014000:	605c      	str	r4, [r3, #4]
 8014002:	e7c7      	b.n	8013f94 <_free_r+0x24>
 8014004:	bd38      	pop	{r3, r4, r5, pc}
 8014006:	bf00      	nop
 8014008:	20000774 	.word	0x20000774

0801400c <_malloc_r>:
 801400c:	b570      	push	{r4, r5, r6, lr}
 801400e:	1ccd      	adds	r5, r1, #3
 8014010:	f025 0503 	bic.w	r5, r5, #3
 8014014:	3508      	adds	r5, #8
 8014016:	2d0c      	cmp	r5, #12
 8014018:	bf38      	it	cc
 801401a:	250c      	movcc	r5, #12
 801401c:	2d00      	cmp	r5, #0
 801401e:	4606      	mov	r6, r0
 8014020:	db01      	blt.n	8014026 <_malloc_r+0x1a>
 8014022:	42a9      	cmp	r1, r5
 8014024:	d903      	bls.n	801402e <_malloc_r+0x22>
 8014026:	230c      	movs	r3, #12
 8014028:	6033      	str	r3, [r6, #0]
 801402a:	2000      	movs	r0, #0
 801402c:	bd70      	pop	{r4, r5, r6, pc}
 801402e:	f000 f99b 	bl	8014368 <__malloc_lock>
 8014032:	4a23      	ldr	r2, [pc, #140]	; (80140c0 <_malloc_r+0xb4>)
 8014034:	6814      	ldr	r4, [r2, #0]
 8014036:	4621      	mov	r1, r4
 8014038:	b991      	cbnz	r1, 8014060 <_malloc_r+0x54>
 801403a:	4c22      	ldr	r4, [pc, #136]	; (80140c4 <_malloc_r+0xb8>)
 801403c:	6823      	ldr	r3, [r4, #0]
 801403e:	b91b      	cbnz	r3, 8014048 <_malloc_r+0x3c>
 8014040:	4630      	mov	r0, r6
 8014042:	f000 f841 	bl	80140c8 <_sbrk_r>
 8014046:	6020      	str	r0, [r4, #0]
 8014048:	4629      	mov	r1, r5
 801404a:	4630      	mov	r0, r6
 801404c:	f000 f83c 	bl	80140c8 <_sbrk_r>
 8014050:	1c43      	adds	r3, r0, #1
 8014052:	d126      	bne.n	80140a2 <_malloc_r+0x96>
 8014054:	230c      	movs	r3, #12
 8014056:	6033      	str	r3, [r6, #0]
 8014058:	4630      	mov	r0, r6
 801405a:	f000 f986 	bl	801436a <__malloc_unlock>
 801405e:	e7e4      	b.n	801402a <_malloc_r+0x1e>
 8014060:	680b      	ldr	r3, [r1, #0]
 8014062:	1b5b      	subs	r3, r3, r5
 8014064:	d41a      	bmi.n	801409c <_malloc_r+0x90>
 8014066:	2b0b      	cmp	r3, #11
 8014068:	d90f      	bls.n	801408a <_malloc_r+0x7e>
 801406a:	600b      	str	r3, [r1, #0]
 801406c:	50cd      	str	r5, [r1, r3]
 801406e:	18cc      	adds	r4, r1, r3
 8014070:	4630      	mov	r0, r6
 8014072:	f000 f97a 	bl	801436a <__malloc_unlock>
 8014076:	f104 000b 	add.w	r0, r4, #11
 801407a:	1d23      	adds	r3, r4, #4
 801407c:	f020 0007 	bic.w	r0, r0, #7
 8014080:	1ac3      	subs	r3, r0, r3
 8014082:	d01b      	beq.n	80140bc <_malloc_r+0xb0>
 8014084:	425a      	negs	r2, r3
 8014086:	50e2      	str	r2, [r4, r3]
 8014088:	bd70      	pop	{r4, r5, r6, pc}
 801408a:	428c      	cmp	r4, r1
 801408c:	bf0d      	iteet	eq
 801408e:	6863      	ldreq	r3, [r4, #4]
 8014090:	684b      	ldrne	r3, [r1, #4]
 8014092:	6063      	strne	r3, [r4, #4]
 8014094:	6013      	streq	r3, [r2, #0]
 8014096:	bf18      	it	ne
 8014098:	460c      	movne	r4, r1
 801409a:	e7e9      	b.n	8014070 <_malloc_r+0x64>
 801409c:	460c      	mov	r4, r1
 801409e:	6849      	ldr	r1, [r1, #4]
 80140a0:	e7ca      	b.n	8014038 <_malloc_r+0x2c>
 80140a2:	1cc4      	adds	r4, r0, #3
 80140a4:	f024 0403 	bic.w	r4, r4, #3
 80140a8:	42a0      	cmp	r0, r4
 80140aa:	d005      	beq.n	80140b8 <_malloc_r+0xac>
 80140ac:	1a21      	subs	r1, r4, r0
 80140ae:	4630      	mov	r0, r6
 80140b0:	f000 f80a 	bl	80140c8 <_sbrk_r>
 80140b4:	3001      	adds	r0, #1
 80140b6:	d0cd      	beq.n	8014054 <_malloc_r+0x48>
 80140b8:	6025      	str	r5, [r4, #0]
 80140ba:	e7d9      	b.n	8014070 <_malloc_r+0x64>
 80140bc:	bd70      	pop	{r4, r5, r6, pc}
 80140be:	bf00      	nop
 80140c0:	20000774 	.word	0x20000774
 80140c4:	20000778 	.word	0x20000778

080140c8 <_sbrk_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4c06      	ldr	r4, [pc, #24]	; (80140e4 <_sbrk_r+0x1c>)
 80140cc:	2300      	movs	r3, #0
 80140ce:	4605      	mov	r5, r0
 80140d0:	4608      	mov	r0, r1
 80140d2:	6023      	str	r3, [r4, #0]
 80140d4:	f7ff fa8a 	bl	80135ec <_sbrk>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	d102      	bne.n	80140e2 <_sbrk_r+0x1a>
 80140dc:	6823      	ldr	r3, [r4, #0]
 80140de:	b103      	cbz	r3, 80140e2 <_sbrk_r+0x1a>
 80140e0:	602b      	str	r3, [r5, #0]
 80140e2:	bd38      	pop	{r3, r4, r5, pc}
 80140e4:	20002480 	.word	0x20002480

080140e8 <_raise_r>:
 80140e8:	291f      	cmp	r1, #31
 80140ea:	b538      	push	{r3, r4, r5, lr}
 80140ec:	4604      	mov	r4, r0
 80140ee:	460d      	mov	r5, r1
 80140f0:	d904      	bls.n	80140fc <_raise_r+0x14>
 80140f2:	2316      	movs	r3, #22
 80140f4:	6003      	str	r3, [r0, #0]
 80140f6:	f04f 30ff 	mov.w	r0, #4294967295
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80140fe:	b112      	cbz	r2, 8014106 <_raise_r+0x1e>
 8014100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014104:	b94b      	cbnz	r3, 801411a <_raise_r+0x32>
 8014106:	4620      	mov	r0, r4
 8014108:	f000 f830 	bl	801416c <_getpid_r>
 801410c:	462a      	mov	r2, r5
 801410e:	4601      	mov	r1, r0
 8014110:	4620      	mov	r0, r4
 8014112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014116:	f000 b817 	b.w	8014148 <_kill_r>
 801411a:	2b01      	cmp	r3, #1
 801411c:	d00a      	beq.n	8014134 <_raise_r+0x4c>
 801411e:	1c59      	adds	r1, r3, #1
 8014120:	d103      	bne.n	801412a <_raise_r+0x42>
 8014122:	2316      	movs	r3, #22
 8014124:	6003      	str	r3, [r0, #0]
 8014126:	2001      	movs	r0, #1
 8014128:	bd38      	pop	{r3, r4, r5, pc}
 801412a:	2400      	movs	r4, #0
 801412c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014130:	4628      	mov	r0, r5
 8014132:	4798      	blx	r3
 8014134:	2000      	movs	r0, #0
 8014136:	bd38      	pop	{r3, r4, r5, pc}

08014138 <raise>:
 8014138:	4b02      	ldr	r3, [pc, #8]	; (8014144 <raise+0xc>)
 801413a:	4601      	mov	r1, r0
 801413c:	6818      	ldr	r0, [r3, #0]
 801413e:	f7ff bfd3 	b.w	80140e8 <_raise_r>
 8014142:	bf00      	nop
 8014144:	20000010 	.word	0x20000010

08014148 <_kill_r>:
 8014148:	b538      	push	{r3, r4, r5, lr}
 801414a:	4c07      	ldr	r4, [pc, #28]	; (8014168 <_kill_r+0x20>)
 801414c:	2300      	movs	r3, #0
 801414e:	4605      	mov	r5, r0
 8014150:	4608      	mov	r0, r1
 8014152:	4611      	mov	r1, r2
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	f7ff fa1d 	bl	8013594 <_kill>
 801415a:	1c43      	adds	r3, r0, #1
 801415c:	d102      	bne.n	8014164 <_kill_r+0x1c>
 801415e:	6823      	ldr	r3, [r4, #0]
 8014160:	b103      	cbz	r3, 8014164 <_kill_r+0x1c>
 8014162:	602b      	str	r3, [r5, #0]
 8014164:	bd38      	pop	{r3, r4, r5, pc}
 8014166:	bf00      	nop
 8014168:	20002480 	.word	0x20002480

0801416c <_getpid_r>:
 801416c:	f7ff ba04 	b.w	8013578 <_getpid>

08014170 <sniprintf>:
 8014170:	b40c      	push	{r2, r3}
 8014172:	b530      	push	{r4, r5, lr}
 8014174:	4b17      	ldr	r3, [pc, #92]	; (80141d4 <sniprintf+0x64>)
 8014176:	1e0c      	subs	r4, r1, #0
 8014178:	b09d      	sub	sp, #116	; 0x74
 801417a:	681d      	ldr	r5, [r3, #0]
 801417c:	da08      	bge.n	8014190 <sniprintf+0x20>
 801417e:	238b      	movs	r3, #139	; 0x8b
 8014180:	602b      	str	r3, [r5, #0]
 8014182:	f04f 30ff 	mov.w	r0, #4294967295
 8014186:	b01d      	add	sp, #116	; 0x74
 8014188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801418c:	b002      	add	sp, #8
 801418e:	4770      	bx	lr
 8014190:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014194:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014198:	bf14      	ite	ne
 801419a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801419e:	4623      	moveq	r3, r4
 80141a0:	9304      	str	r3, [sp, #16]
 80141a2:	9307      	str	r3, [sp, #28]
 80141a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141a8:	9002      	str	r0, [sp, #8]
 80141aa:	9006      	str	r0, [sp, #24]
 80141ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141b2:	ab21      	add	r3, sp, #132	; 0x84
 80141b4:	a902      	add	r1, sp, #8
 80141b6:	4628      	mov	r0, r5
 80141b8:	9301      	str	r3, [sp, #4]
 80141ba:	f000 f933 	bl	8014424 <_svfiprintf_r>
 80141be:	1c43      	adds	r3, r0, #1
 80141c0:	bfbc      	itt	lt
 80141c2:	238b      	movlt	r3, #139	; 0x8b
 80141c4:	602b      	strlt	r3, [r5, #0]
 80141c6:	2c00      	cmp	r4, #0
 80141c8:	d0dd      	beq.n	8014186 <sniprintf+0x16>
 80141ca:	9b02      	ldr	r3, [sp, #8]
 80141cc:	2200      	movs	r2, #0
 80141ce:	701a      	strb	r2, [r3, #0]
 80141d0:	e7d9      	b.n	8014186 <sniprintf+0x16>
 80141d2:	bf00      	nop
 80141d4:	20000010 	.word	0x20000010

080141d8 <__sread>:
 80141d8:	b510      	push	{r4, lr}
 80141da:	460c      	mov	r4, r1
 80141dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e0:	f000 fbaa 	bl	8014938 <_read_r>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	bfab      	itete	ge
 80141e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80141ea:	89a3      	ldrhlt	r3, [r4, #12]
 80141ec:	181b      	addge	r3, r3, r0
 80141ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80141f2:	bfac      	ite	ge
 80141f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80141f6:	81a3      	strhlt	r3, [r4, #12]
 80141f8:	bd10      	pop	{r4, pc}

080141fa <__swrite>:
 80141fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141fe:	461f      	mov	r7, r3
 8014200:	898b      	ldrh	r3, [r1, #12]
 8014202:	05db      	lsls	r3, r3, #23
 8014204:	4605      	mov	r5, r0
 8014206:	460c      	mov	r4, r1
 8014208:	4616      	mov	r6, r2
 801420a:	d505      	bpl.n	8014218 <__swrite+0x1e>
 801420c:	2302      	movs	r3, #2
 801420e:	2200      	movs	r2, #0
 8014210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014214:	f000 f896 	bl	8014344 <_lseek_r>
 8014218:	89a3      	ldrh	r3, [r4, #12]
 801421a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801421e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014222:	81a3      	strh	r3, [r4, #12]
 8014224:	4632      	mov	r2, r6
 8014226:	463b      	mov	r3, r7
 8014228:	4628      	mov	r0, r5
 801422a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801422e:	f000 b867 	b.w	8014300 <_write_r>

08014232 <__sseek>:
 8014232:	b510      	push	{r4, lr}
 8014234:	460c      	mov	r4, r1
 8014236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801423a:	f000 f883 	bl	8014344 <_lseek_r>
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	89a3      	ldrh	r3, [r4, #12]
 8014242:	bf15      	itete	ne
 8014244:	6560      	strne	r0, [r4, #84]	; 0x54
 8014246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801424a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801424e:	81a3      	strheq	r3, [r4, #12]
 8014250:	bf18      	it	ne
 8014252:	81a3      	strhne	r3, [r4, #12]
 8014254:	bd10      	pop	{r4, pc}

08014256 <__sclose>:
 8014256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801425a:	f000 b863 	b.w	8014324 <_close_r>

0801425e <strchr>:
 801425e:	b2c9      	uxtb	r1, r1
 8014260:	4603      	mov	r3, r0
 8014262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014266:	b11a      	cbz	r2, 8014270 <strchr+0x12>
 8014268:	4291      	cmp	r1, r2
 801426a:	d1f9      	bne.n	8014260 <strchr+0x2>
 801426c:	4618      	mov	r0, r3
 801426e:	4770      	bx	lr
 8014270:	2900      	cmp	r1, #0
 8014272:	bf0c      	ite	eq
 8014274:	4618      	moveq	r0, r3
 8014276:	2000      	movne	r0, #0
 8014278:	4770      	bx	lr

0801427a <strncmp>:
 801427a:	b510      	push	{r4, lr}
 801427c:	b16a      	cbz	r2, 801429a <strncmp+0x20>
 801427e:	3901      	subs	r1, #1
 8014280:	1884      	adds	r4, r0, r2
 8014282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014286:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801428a:	4293      	cmp	r3, r2
 801428c:	d103      	bne.n	8014296 <strncmp+0x1c>
 801428e:	42a0      	cmp	r0, r4
 8014290:	d001      	beq.n	8014296 <strncmp+0x1c>
 8014292:	2b00      	cmp	r3, #0
 8014294:	d1f5      	bne.n	8014282 <strncmp+0x8>
 8014296:	1a98      	subs	r0, r3, r2
 8014298:	bd10      	pop	{r4, pc}
 801429a:	4610      	mov	r0, r2
 801429c:	bd10      	pop	{r4, pc}

0801429e <strncpy>:
 801429e:	b570      	push	{r4, r5, r6, lr}
 80142a0:	4604      	mov	r4, r0
 80142a2:	b902      	cbnz	r2, 80142a6 <strncpy+0x8>
 80142a4:	bd70      	pop	{r4, r5, r6, pc}
 80142a6:	4623      	mov	r3, r4
 80142a8:	f811 5b01 	ldrb.w	r5, [r1], #1
 80142ac:	f803 5b01 	strb.w	r5, [r3], #1
 80142b0:	1e56      	subs	r6, r2, #1
 80142b2:	b91d      	cbnz	r5, 80142bc <strncpy+0x1e>
 80142b4:	4414      	add	r4, r2
 80142b6:	42a3      	cmp	r3, r4
 80142b8:	d103      	bne.n	80142c2 <strncpy+0x24>
 80142ba:	bd70      	pop	{r4, r5, r6, pc}
 80142bc:	461c      	mov	r4, r3
 80142be:	4632      	mov	r2, r6
 80142c0:	e7ef      	b.n	80142a2 <strncpy+0x4>
 80142c2:	f803 5b01 	strb.w	r5, [r3], #1
 80142c6:	e7f6      	b.n	80142b6 <strncpy+0x18>

080142c8 <strstr>:
 80142c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ca:	7803      	ldrb	r3, [r0, #0]
 80142cc:	b133      	cbz	r3, 80142dc <strstr+0x14>
 80142ce:	4603      	mov	r3, r0
 80142d0:	4618      	mov	r0, r3
 80142d2:	1c5e      	adds	r6, r3, #1
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	b933      	cbnz	r3, 80142e6 <strstr+0x1e>
 80142d8:	4618      	mov	r0, r3
 80142da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142dc:	780b      	ldrb	r3, [r1, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	bf18      	it	ne
 80142e2:	2000      	movne	r0, #0
 80142e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142e6:	1e4d      	subs	r5, r1, #1
 80142e8:	1e44      	subs	r4, r0, #1
 80142ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80142ee:	2a00      	cmp	r2, #0
 80142f0:	d0f3      	beq.n	80142da <strstr+0x12>
 80142f2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80142f6:	4297      	cmp	r7, r2
 80142f8:	4633      	mov	r3, r6
 80142fa:	d0f6      	beq.n	80142ea <strstr+0x22>
 80142fc:	e7e8      	b.n	80142d0 <strstr+0x8>
	...

08014300 <_write_r>:
 8014300:	b538      	push	{r3, r4, r5, lr}
 8014302:	4c07      	ldr	r4, [pc, #28]	; (8014320 <_write_r+0x20>)
 8014304:	4605      	mov	r5, r0
 8014306:	4608      	mov	r0, r1
 8014308:	4611      	mov	r1, r2
 801430a:	2200      	movs	r2, #0
 801430c:	6022      	str	r2, [r4, #0]
 801430e:	461a      	mov	r2, r3
 8014310:	f7ff f958 	bl	80135c4 <_write>
 8014314:	1c43      	adds	r3, r0, #1
 8014316:	d102      	bne.n	801431e <_write_r+0x1e>
 8014318:	6823      	ldr	r3, [r4, #0]
 801431a:	b103      	cbz	r3, 801431e <_write_r+0x1e>
 801431c:	602b      	str	r3, [r5, #0]
 801431e:	bd38      	pop	{r3, r4, r5, pc}
 8014320:	20002480 	.word	0x20002480

08014324 <_close_r>:
 8014324:	b538      	push	{r3, r4, r5, lr}
 8014326:	4c06      	ldr	r4, [pc, #24]	; (8014340 <_close_r+0x1c>)
 8014328:	2300      	movs	r3, #0
 801432a:	4605      	mov	r5, r0
 801432c:	4608      	mov	r0, r1
 801432e:	6023      	str	r3, [r4, #0]
 8014330:	f7ff f97c 	bl	801362c <_close>
 8014334:	1c43      	adds	r3, r0, #1
 8014336:	d102      	bne.n	801433e <_close_r+0x1a>
 8014338:	6823      	ldr	r3, [r4, #0]
 801433a:	b103      	cbz	r3, 801433e <_close_r+0x1a>
 801433c:	602b      	str	r3, [r5, #0]
 801433e:	bd38      	pop	{r3, r4, r5, pc}
 8014340:	20002480 	.word	0x20002480

08014344 <_lseek_r>:
 8014344:	b538      	push	{r3, r4, r5, lr}
 8014346:	4c07      	ldr	r4, [pc, #28]	; (8014364 <_lseek_r+0x20>)
 8014348:	4605      	mov	r5, r0
 801434a:	4608      	mov	r0, r1
 801434c:	4611      	mov	r1, r2
 801434e:	2200      	movs	r2, #0
 8014350:	6022      	str	r2, [r4, #0]
 8014352:	461a      	mov	r2, r3
 8014354:	f7ff f97c 	bl	8013650 <_lseek>
 8014358:	1c43      	adds	r3, r0, #1
 801435a:	d102      	bne.n	8014362 <_lseek_r+0x1e>
 801435c:	6823      	ldr	r3, [r4, #0]
 801435e:	b103      	cbz	r3, 8014362 <_lseek_r+0x1e>
 8014360:	602b      	str	r3, [r5, #0]
 8014362:	bd38      	pop	{r3, r4, r5, pc}
 8014364:	20002480 	.word	0x20002480

08014368 <__malloc_lock>:
 8014368:	4770      	bx	lr

0801436a <__malloc_unlock>:
 801436a:	4770      	bx	lr

0801436c <__ssputs_r>:
 801436c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014370:	688e      	ldr	r6, [r1, #8]
 8014372:	429e      	cmp	r6, r3
 8014374:	4682      	mov	sl, r0
 8014376:	460c      	mov	r4, r1
 8014378:	4691      	mov	r9, r2
 801437a:	4698      	mov	r8, r3
 801437c:	d835      	bhi.n	80143ea <__ssputs_r+0x7e>
 801437e:	898a      	ldrh	r2, [r1, #12]
 8014380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014384:	d031      	beq.n	80143ea <__ssputs_r+0x7e>
 8014386:	6825      	ldr	r5, [r4, #0]
 8014388:	6909      	ldr	r1, [r1, #16]
 801438a:	1a6f      	subs	r7, r5, r1
 801438c:	6965      	ldr	r5, [r4, #20]
 801438e:	2302      	movs	r3, #2
 8014390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014394:	fb95 f5f3 	sdiv	r5, r5, r3
 8014398:	f108 0301 	add.w	r3, r8, #1
 801439c:	443b      	add	r3, r7
 801439e:	429d      	cmp	r5, r3
 80143a0:	bf38      	it	cc
 80143a2:	461d      	movcc	r5, r3
 80143a4:	0553      	lsls	r3, r2, #21
 80143a6:	d531      	bpl.n	801440c <__ssputs_r+0xa0>
 80143a8:	4629      	mov	r1, r5
 80143aa:	f7ff fe2f 	bl	801400c <_malloc_r>
 80143ae:	4606      	mov	r6, r0
 80143b0:	b950      	cbnz	r0, 80143c8 <__ssputs_r+0x5c>
 80143b2:	230c      	movs	r3, #12
 80143b4:	f8ca 3000 	str.w	r3, [sl]
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143be:	81a3      	strh	r3, [r4, #12]
 80143c0:	f04f 30ff 	mov.w	r0, #4294967295
 80143c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143c8:	463a      	mov	r2, r7
 80143ca:	6921      	ldr	r1, [r4, #16]
 80143cc:	f7ff fda2 	bl	8013f14 <memcpy>
 80143d0:	89a3      	ldrh	r3, [r4, #12]
 80143d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80143d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143da:	81a3      	strh	r3, [r4, #12]
 80143dc:	6126      	str	r6, [r4, #16]
 80143de:	6165      	str	r5, [r4, #20]
 80143e0:	443e      	add	r6, r7
 80143e2:	1bed      	subs	r5, r5, r7
 80143e4:	6026      	str	r6, [r4, #0]
 80143e6:	60a5      	str	r5, [r4, #8]
 80143e8:	4646      	mov	r6, r8
 80143ea:	4546      	cmp	r6, r8
 80143ec:	bf28      	it	cs
 80143ee:	4646      	movcs	r6, r8
 80143f0:	4632      	mov	r2, r6
 80143f2:	4649      	mov	r1, r9
 80143f4:	6820      	ldr	r0, [r4, #0]
 80143f6:	f7ff fd98 	bl	8013f2a <memmove>
 80143fa:	68a3      	ldr	r3, [r4, #8]
 80143fc:	1b9b      	subs	r3, r3, r6
 80143fe:	60a3      	str	r3, [r4, #8]
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	441e      	add	r6, r3
 8014404:	6026      	str	r6, [r4, #0]
 8014406:	2000      	movs	r0, #0
 8014408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801440c:	462a      	mov	r2, r5
 801440e:	f000 faa5 	bl	801495c <_realloc_r>
 8014412:	4606      	mov	r6, r0
 8014414:	2800      	cmp	r0, #0
 8014416:	d1e1      	bne.n	80143dc <__ssputs_r+0x70>
 8014418:	6921      	ldr	r1, [r4, #16]
 801441a:	4650      	mov	r0, sl
 801441c:	f7ff fda8 	bl	8013f70 <_free_r>
 8014420:	e7c7      	b.n	80143b2 <__ssputs_r+0x46>
	...

08014424 <_svfiprintf_r>:
 8014424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014428:	b09d      	sub	sp, #116	; 0x74
 801442a:	4680      	mov	r8, r0
 801442c:	9303      	str	r3, [sp, #12]
 801442e:	898b      	ldrh	r3, [r1, #12]
 8014430:	061c      	lsls	r4, r3, #24
 8014432:	460d      	mov	r5, r1
 8014434:	4616      	mov	r6, r2
 8014436:	d50f      	bpl.n	8014458 <_svfiprintf_r+0x34>
 8014438:	690b      	ldr	r3, [r1, #16]
 801443a:	b96b      	cbnz	r3, 8014458 <_svfiprintf_r+0x34>
 801443c:	2140      	movs	r1, #64	; 0x40
 801443e:	f7ff fde5 	bl	801400c <_malloc_r>
 8014442:	6028      	str	r0, [r5, #0]
 8014444:	6128      	str	r0, [r5, #16]
 8014446:	b928      	cbnz	r0, 8014454 <_svfiprintf_r+0x30>
 8014448:	230c      	movs	r3, #12
 801444a:	f8c8 3000 	str.w	r3, [r8]
 801444e:	f04f 30ff 	mov.w	r0, #4294967295
 8014452:	e0c5      	b.n	80145e0 <_svfiprintf_r+0x1bc>
 8014454:	2340      	movs	r3, #64	; 0x40
 8014456:	616b      	str	r3, [r5, #20]
 8014458:	2300      	movs	r3, #0
 801445a:	9309      	str	r3, [sp, #36]	; 0x24
 801445c:	2320      	movs	r3, #32
 801445e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014462:	2330      	movs	r3, #48	; 0x30
 8014464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014468:	f04f 0b01 	mov.w	fp, #1
 801446c:	4637      	mov	r7, r6
 801446e:	463c      	mov	r4, r7
 8014470:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	d13c      	bne.n	80144f2 <_svfiprintf_r+0xce>
 8014478:	ebb7 0a06 	subs.w	sl, r7, r6
 801447c:	d00b      	beq.n	8014496 <_svfiprintf_r+0x72>
 801447e:	4653      	mov	r3, sl
 8014480:	4632      	mov	r2, r6
 8014482:	4629      	mov	r1, r5
 8014484:	4640      	mov	r0, r8
 8014486:	f7ff ff71 	bl	801436c <__ssputs_r>
 801448a:	3001      	adds	r0, #1
 801448c:	f000 80a3 	beq.w	80145d6 <_svfiprintf_r+0x1b2>
 8014490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014492:	4453      	add	r3, sl
 8014494:	9309      	str	r3, [sp, #36]	; 0x24
 8014496:	783b      	ldrb	r3, [r7, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	f000 809c 	beq.w	80145d6 <_svfiprintf_r+0x1b2>
 801449e:	2300      	movs	r3, #0
 80144a0:	f04f 32ff 	mov.w	r2, #4294967295
 80144a4:	9304      	str	r3, [sp, #16]
 80144a6:	9307      	str	r3, [sp, #28]
 80144a8:	9205      	str	r2, [sp, #20]
 80144aa:	9306      	str	r3, [sp, #24]
 80144ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144b0:	931a      	str	r3, [sp, #104]	; 0x68
 80144b2:	2205      	movs	r2, #5
 80144b4:	7821      	ldrb	r1, [r4, #0]
 80144b6:	4850      	ldr	r0, [pc, #320]	; (80145f8 <_svfiprintf_r+0x1d4>)
 80144b8:	f7eb fea2 	bl	8000200 <memchr>
 80144bc:	1c67      	adds	r7, r4, #1
 80144be:	9b04      	ldr	r3, [sp, #16]
 80144c0:	b9d8      	cbnz	r0, 80144fa <_svfiprintf_r+0xd6>
 80144c2:	06d9      	lsls	r1, r3, #27
 80144c4:	bf44      	itt	mi
 80144c6:	2220      	movmi	r2, #32
 80144c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144cc:	071a      	lsls	r2, r3, #28
 80144ce:	bf44      	itt	mi
 80144d0:	222b      	movmi	r2, #43	; 0x2b
 80144d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144d6:	7822      	ldrb	r2, [r4, #0]
 80144d8:	2a2a      	cmp	r2, #42	; 0x2a
 80144da:	d016      	beq.n	801450a <_svfiprintf_r+0xe6>
 80144dc:	9a07      	ldr	r2, [sp, #28]
 80144de:	2100      	movs	r1, #0
 80144e0:	200a      	movs	r0, #10
 80144e2:	4627      	mov	r7, r4
 80144e4:	3401      	adds	r4, #1
 80144e6:	783b      	ldrb	r3, [r7, #0]
 80144e8:	3b30      	subs	r3, #48	; 0x30
 80144ea:	2b09      	cmp	r3, #9
 80144ec:	d951      	bls.n	8014592 <_svfiprintf_r+0x16e>
 80144ee:	b1c9      	cbz	r1, 8014524 <_svfiprintf_r+0x100>
 80144f0:	e011      	b.n	8014516 <_svfiprintf_r+0xf2>
 80144f2:	2b25      	cmp	r3, #37	; 0x25
 80144f4:	d0c0      	beq.n	8014478 <_svfiprintf_r+0x54>
 80144f6:	4627      	mov	r7, r4
 80144f8:	e7b9      	b.n	801446e <_svfiprintf_r+0x4a>
 80144fa:	4a3f      	ldr	r2, [pc, #252]	; (80145f8 <_svfiprintf_r+0x1d4>)
 80144fc:	1a80      	subs	r0, r0, r2
 80144fe:	fa0b f000 	lsl.w	r0, fp, r0
 8014502:	4318      	orrs	r0, r3
 8014504:	9004      	str	r0, [sp, #16]
 8014506:	463c      	mov	r4, r7
 8014508:	e7d3      	b.n	80144b2 <_svfiprintf_r+0x8e>
 801450a:	9a03      	ldr	r2, [sp, #12]
 801450c:	1d11      	adds	r1, r2, #4
 801450e:	6812      	ldr	r2, [r2, #0]
 8014510:	9103      	str	r1, [sp, #12]
 8014512:	2a00      	cmp	r2, #0
 8014514:	db01      	blt.n	801451a <_svfiprintf_r+0xf6>
 8014516:	9207      	str	r2, [sp, #28]
 8014518:	e004      	b.n	8014524 <_svfiprintf_r+0x100>
 801451a:	4252      	negs	r2, r2
 801451c:	f043 0302 	orr.w	r3, r3, #2
 8014520:	9207      	str	r2, [sp, #28]
 8014522:	9304      	str	r3, [sp, #16]
 8014524:	783b      	ldrb	r3, [r7, #0]
 8014526:	2b2e      	cmp	r3, #46	; 0x2e
 8014528:	d10e      	bne.n	8014548 <_svfiprintf_r+0x124>
 801452a:	787b      	ldrb	r3, [r7, #1]
 801452c:	2b2a      	cmp	r3, #42	; 0x2a
 801452e:	f107 0101 	add.w	r1, r7, #1
 8014532:	d132      	bne.n	801459a <_svfiprintf_r+0x176>
 8014534:	9b03      	ldr	r3, [sp, #12]
 8014536:	1d1a      	adds	r2, r3, #4
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	9203      	str	r2, [sp, #12]
 801453c:	2b00      	cmp	r3, #0
 801453e:	bfb8      	it	lt
 8014540:	f04f 33ff 	movlt.w	r3, #4294967295
 8014544:	3702      	adds	r7, #2
 8014546:	9305      	str	r3, [sp, #20]
 8014548:	4c2c      	ldr	r4, [pc, #176]	; (80145fc <_svfiprintf_r+0x1d8>)
 801454a:	7839      	ldrb	r1, [r7, #0]
 801454c:	2203      	movs	r2, #3
 801454e:	4620      	mov	r0, r4
 8014550:	f7eb fe56 	bl	8000200 <memchr>
 8014554:	b138      	cbz	r0, 8014566 <_svfiprintf_r+0x142>
 8014556:	2340      	movs	r3, #64	; 0x40
 8014558:	1b00      	subs	r0, r0, r4
 801455a:	fa03 f000 	lsl.w	r0, r3, r0
 801455e:	9b04      	ldr	r3, [sp, #16]
 8014560:	4303      	orrs	r3, r0
 8014562:	9304      	str	r3, [sp, #16]
 8014564:	3701      	adds	r7, #1
 8014566:	7839      	ldrb	r1, [r7, #0]
 8014568:	4825      	ldr	r0, [pc, #148]	; (8014600 <_svfiprintf_r+0x1dc>)
 801456a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801456e:	2206      	movs	r2, #6
 8014570:	1c7e      	adds	r6, r7, #1
 8014572:	f7eb fe45 	bl	8000200 <memchr>
 8014576:	2800      	cmp	r0, #0
 8014578:	d035      	beq.n	80145e6 <_svfiprintf_r+0x1c2>
 801457a:	4b22      	ldr	r3, [pc, #136]	; (8014604 <_svfiprintf_r+0x1e0>)
 801457c:	b9fb      	cbnz	r3, 80145be <_svfiprintf_r+0x19a>
 801457e:	9b03      	ldr	r3, [sp, #12]
 8014580:	3307      	adds	r3, #7
 8014582:	f023 0307 	bic.w	r3, r3, #7
 8014586:	3308      	adds	r3, #8
 8014588:	9303      	str	r3, [sp, #12]
 801458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801458c:	444b      	add	r3, r9
 801458e:	9309      	str	r3, [sp, #36]	; 0x24
 8014590:	e76c      	b.n	801446c <_svfiprintf_r+0x48>
 8014592:	fb00 3202 	mla	r2, r0, r2, r3
 8014596:	2101      	movs	r1, #1
 8014598:	e7a3      	b.n	80144e2 <_svfiprintf_r+0xbe>
 801459a:	2300      	movs	r3, #0
 801459c:	9305      	str	r3, [sp, #20]
 801459e:	4618      	mov	r0, r3
 80145a0:	240a      	movs	r4, #10
 80145a2:	460f      	mov	r7, r1
 80145a4:	3101      	adds	r1, #1
 80145a6:	783a      	ldrb	r2, [r7, #0]
 80145a8:	3a30      	subs	r2, #48	; 0x30
 80145aa:	2a09      	cmp	r2, #9
 80145ac:	d903      	bls.n	80145b6 <_svfiprintf_r+0x192>
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d0ca      	beq.n	8014548 <_svfiprintf_r+0x124>
 80145b2:	9005      	str	r0, [sp, #20]
 80145b4:	e7c8      	b.n	8014548 <_svfiprintf_r+0x124>
 80145b6:	fb04 2000 	mla	r0, r4, r0, r2
 80145ba:	2301      	movs	r3, #1
 80145bc:	e7f1      	b.n	80145a2 <_svfiprintf_r+0x17e>
 80145be:	ab03      	add	r3, sp, #12
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	462a      	mov	r2, r5
 80145c4:	4b10      	ldr	r3, [pc, #64]	; (8014608 <_svfiprintf_r+0x1e4>)
 80145c6:	a904      	add	r1, sp, #16
 80145c8:	4640      	mov	r0, r8
 80145ca:	f3af 8000 	nop.w
 80145ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80145d2:	4681      	mov	r9, r0
 80145d4:	d1d9      	bne.n	801458a <_svfiprintf_r+0x166>
 80145d6:	89ab      	ldrh	r3, [r5, #12]
 80145d8:	065b      	lsls	r3, r3, #25
 80145da:	f53f af38 	bmi.w	801444e <_svfiprintf_r+0x2a>
 80145de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e0:	b01d      	add	sp, #116	; 0x74
 80145e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e6:	ab03      	add	r3, sp, #12
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	462a      	mov	r2, r5
 80145ec:	4b06      	ldr	r3, [pc, #24]	; (8014608 <_svfiprintf_r+0x1e4>)
 80145ee:	a904      	add	r1, sp, #16
 80145f0:	4640      	mov	r0, r8
 80145f2:	f000 f881 	bl	80146f8 <_printf_i>
 80145f6:	e7ea      	b.n	80145ce <_svfiprintf_r+0x1aa>
 80145f8:	08017fcc 	.word	0x08017fcc
 80145fc:	08017fd2 	.word	0x08017fd2
 8014600:	08017fd6 	.word	0x08017fd6
 8014604:	00000000 	.word	0x00000000
 8014608:	0801436d 	.word	0x0801436d

0801460c <_printf_common>:
 801460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014610:	4691      	mov	r9, r2
 8014612:	461f      	mov	r7, r3
 8014614:	688a      	ldr	r2, [r1, #8]
 8014616:	690b      	ldr	r3, [r1, #16]
 8014618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801461c:	4293      	cmp	r3, r2
 801461e:	bfb8      	it	lt
 8014620:	4613      	movlt	r3, r2
 8014622:	f8c9 3000 	str.w	r3, [r9]
 8014626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801462a:	4606      	mov	r6, r0
 801462c:	460c      	mov	r4, r1
 801462e:	b112      	cbz	r2, 8014636 <_printf_common+0x2a>
 8014630:	3301      	adds	r3, #1
 8014632:	f8c9 3000 	str.w	r3, [r9]
 8014636:	6823      	ldr	r3, [r4, #0]
 8014638:	0699      	lsls	r1, r3, #26
 801463a:	bf42      	ittt	mi
 801463c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014640:	3302      	addmi	r3, #2
 8014642:	f8c9 3000 	strmi.w	r3, [r9]
 8014646:	6825      	ldr	r5, [r4, #0]
 8014648:	f015 0506 	ands.w	r5, r5, #6
 801464c:	d107      	bne.n	801465e <_printf_common+0x52>
 801464e:	f104 0a19 	add.w	sl, r4, #25
 8014652:	68e3      	ldr	r3, [r4, #12]
 8014654:	f8d9 2000 	ldr.w	r2, [r9]
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	429d      	cmp	r5, r3
 801465c:	db29      	blt.n	80146b2 <_printf_common+0xa6>
 801465e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014662:	6822      	ldr	r2, [r4, #0]
 8014664:	3300      	adds	r3, #0
 8014666:	bf18      	it	ne
 8014668:	2301      	movne	r3, #1
 801466a:	0692      	lsls	r2, r2, #26
 801466c:	d42e      	bmi.n	80146cc <_printf_common+0xc0>
 801466e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014672:	4639      	mov	r1, r7
 8014674:	4630      	mov	r0, r6
 8014676:	47c0      	blx	r8
 8014678:	3001      	adds	r0, #1
 801467a:	d021      	beq.n	80146c0 <_printf_common+0xb4>
 801467c:	6823      	ldr	r3, [r4, #0]
 801467e:	68e5      	ldr	r5, [r4, #12]
 8014680:	f8d9 2000 	ldr.w	r2, [r9]
 8014684:	f003 0306 	and.w	r3, r3, #6
 8014688:	2b04      	cmp	r3, #4
 801468a:	bf08      	it	eq
 801468c:	1aad      	subeq	r5, r5, r2
 801468e:	68a3      	ldr	r3, [r4, #8]
 8014690:	6922      	ldr	r2, [r4, #16]
 8014692:	bf0c      	ite	eq
 8014694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014698:	2500      	movne	r5, #0
 801469a:	4293      	cmp	r3, r2
 801469c:	bfc4      	itt	gt
 801469e:	1a9b      	subgt	r3, r3, r2
 80146a0:	18ed      	addgt	r5, r5, r3
 80146a2:	f04f 0900 	mov.w	r9, #0
 80146a6:	341a      	adds	r4, #26
 80146a8:	454d      	cmp	r5, r9
 80146aa:	d11b      	bne.n	80146e4 <_printf_common+0xd8>
 80146ac:	2000      	movs	r0, #0
 80146ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b2:	2301      	movs	r3, #1
 80146b4:	4652      	mov	r2, sl
 80146b6:	4639      	mov	r1, r7
 80146b8:	4630      	mov	r0, r6
 80146ba:	47c0      	blx	r8
 80146bc:	3001      	adds	r0, #1
 80146be:	d103      	bne.n	80146c8 <_printf_common+0xbc>
 80146c0:	f04f 30ff 	mov.w	r0, #4294967295
 80146c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c8:	3501      	adds	r5, #1
 80146ca:	e7c2      	b.n	8014652 <_printf_common+0x46>
 80146cc:	18e1      	adds	r1, r4, r3
 80146ce:	1c5a      	adds	r2, r3, #1
 80146d0:	2030      	movs	r0, #48	; 0x30
 80146d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146d6:	4422      	add	r2, r4
 80146d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146e0:	3302      	adds	r3, #2
 80146e2:	e7c4      	b.n	801466e <_printf_common+0x62>
 80146e4:	2301      	movs	r3, #1
 80146e6:	4622      	mov	r2, r4
 80146e8:	4639      	mov	r1, r7
 80146ea:	4630      	mov	r0, r6
 80146ec:	47c0      	blx	r8
 80146ee:	3001      	adds	r0, #1
 80146f0:	d0e6      	beq.n	80146c0 <_printf_common+0xb4>
 80146f2:	f109 0901 	add.w	r9, r9, #1
 80146f6:	e7d7      	b.n	80146a8 <_printf_common+0x9c>

080146f8 <_printf_i>:
 80146f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146fc:	4617      	mov	r7, r2
 80146fe:	7e0a      	ldrb	r2, [r1, #24]
 8014700:	b085      	sub	sp, #20
 8014702:	2a6e      	cmp	r2, #110	; 0x6e
 8014704:	4698      	mov	r8, r3
 8014706:	4606      	mov	r6, r0
 8014708:	460c      	mov	r4, r1
 801470a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801470c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014710:	f000 80bc 	beq.w	801488c <_printf_i+0x194>
 8014714:	d81a      	bhi.n	801474c <_printf_i+0x54>
 8014716:	2a63      	cmp	r2, #99	; 0x63
 8014718:	d02e      	beq.n	8014778 <_printf_i+0x80>
 801471a:	d80a      	bhi.n	8014732 <_printf_i+0x3a>
 801471c:	2a00      	cmp	r2, #0
 801471e:	f000 80c8 	beq.w	80148b2 <_printf_i+0x1ba>
 8014722:	2a58      	cmp	r2, #88	; 0x58
 8014724:	f000 808a 	beq.w	801483c <_printf_i+0x144>
 8014728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801472c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014730:	e02a      	b.n	8014788 <_printf_i+0x90>
 8014732:	2a64      	cmp	r2, #100	; 0x64
 8014734:	d001      	beq.n	801473a <_printf_i+0x42>
 8014736:	2a69      	cmp	r2, #105	; 0x69
 8014738:	d1f6      	bne.n	8014728 <_printf_i+0x30>
 801473a:	6821      	ldr	r1, [r4, #0]
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014742:	d023      	beq.n	801478c <_printf_i+0x94>
 8014744:	1d11      	adds	r1, r2, #4
 8014746:	6019      	str	r1, [r3, #0]
 8014748:	6813      	ldr	r3, [r2, #0]
 801474a:	e027      	b.n	801479c <_printf_i+0xa4>
 801474c:	2a73      	cmp	r2, #115	; 0x73
 801474e:	f000 80b4 	beq.w	80148ba <_printf_i+0x1c2>
 8014752:	d808      	bhi.n	8014766 <_printf_i+0x6e>
 8014754:	2a6f      	cmp	r2, #111	; 0x6f
 8014756:	d02a      	beq.n	80147ae <_printf_i+0xb6>
 8014758:	2a70      	cmp	r2, #112	; 0x70
 801475a:	d1e5      	bne.n	8014728 <_printf_i+0x30>
 801475c:	680a      	ldr	r2, [r1, #0]
 801475e:	f042 0220 	orr.w	r2, r2, #32
 8014762:	600a      	str	r2, [r1, #0]
 8014764:	e003      	b.n	801476e <_printf_i+0x76>
 8014766:	2a75      	cmp	r2, #117	; 0x75
 8014768:	d021      	beq.n	80147ae <_printf_i+0xb6>
 801476a:	2a78      	cmp	r2, #120	; 0x78
 801476c:	d1dc      	bne.n	8014728 <_printf_i+0x30>
 801476e:	2278      	movs	r2, #120	; 0x78
 8014770:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014774:	496e      	ldr	r1, [pc, #440]	; (8014930 <_printf_i+0x238>)
 8014776:	e064      	b.n	8014842 <_printf_i+0x14a>
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801477e:	1d11      	adds	r1, r2, #4
 8014780:	6019      	str	r1, [r3, #0]
 8014782:	6813      	ldr	r3, [r2, #0]
 8014784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014788:	2301      	movs	r3, #1
 801478a:	e0a3      	b.n	80148d4 <_printf_i+0x1dc>
 801478c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014790:	f102 0104 	add.w	r1, r2, #4
 8014794:	6019      	str	r1, [r3, #0]
 8014796:	d0d7      	beq.n	8014748 <_printf_i+0x50>
 8014798:	f9b2 3000 	ldrsh.w	r3, [r2]
 801479c:	2b00      	cmp	r3, #0
 801479e:	da03      	bge.n	80147a8 <_printf_i+0xb0>
 80147a0:	222d      	movs	r2, #45	; 0x2d
 80147a2:	425b      	negs	r3, r3
 80147a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80147a8:	4962      	ldr	r1, [pc, #392]	; (8014934 <_printf_i+0x23c>)
 80147aa:	220a      	movs	r2, #10
 80147ac:	e017      	b.n	80147de <_printf_i+0xe6>
 80147ae:	6820      	ldr	r0, [r4, #0]
 80147b0:	6819      	ldr	r1, [r3, #0]
 80147b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80147b6:	d003      	beq.n	80147c0 <_printf_i+0xc8>
 80147b8:	1d08      	adds	r0, r1, #4
 80147ba:	6018      	str	r0, [r3, #0]
 80147bc:	680b      	ldr	r3, [r1, #0]
 80147be:	e006      	b.n	80147ce <_printf_i+0xd6>
 80147c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147c4:	f101 0004 	add.w	r0, r1, #4
 80147c8:	6018      	str	r0, [r3, #0]
 80147ca:	d0f7      	beq.n	80147bc <_printf_i+0xc4>
 80147cc:	880b      	ldrh	r3, [r1, #0]
 80147ce:	4959      	ldr	r1, [pc, #356]	; (8014934 <_printf_i+0x23c>)
 80147d0:	2a6f      	cmp	r2, #111	; 0x6f
 80147d2:	bf14      	ite	ne
 80147d4:	220a      	movne	r2, #10
 80147d6:	2208      	moveq	r2, #8
 80147d8:	2000      	movs	r0, #0
 80147da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80147de:	6865      	ldr	r5, [r4, #4]
 80147e0:	60a5      	str	r5, [r4, #8]
 80147e2:	2d00      	cmp	r5, #0
 80147e4:	f2c0 809c 	blt.w	8014920 <_printf_i+0x228>
 80147e8:	6820      	ldr	r0, [r4, #0]
 80147ea:	f020 0004 	bic.w	r0, r0, #4
 80147ee:	6020      	str	r0, [r4, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d13f      	bne.n	8014874 <_printf_i+0x17c>
 80147f4:	2d00      	cmp	r5, #0
 80147f6:	f040 8095 	bne.w	8014924 <_printf_i+0x22c>
 80147fa:	4675      	mov	r5, lr
 80147fc:	2a08      	cmp	r2, #8
 80147fe:	d10b      	bne.n	8014818 <_printf_i+0x120>
 8014800:	6823      	ldr	r3, [r4, #0]
 8014802:	07da      	lsls	r2, r3, #31
 8014804:	d508      	bpl.n	8014818 <_printf_i+0x120>
 8014806:	6923      	ldr	r3, [r4, #16]
 8014808:	6862      	ldr	r2, [r4, #4]
 801480a:	429a      	cmp	r2, r3
 801480c:	bfde      	ittt	le
 801480e:	2330      	movle	r3, #48	; 0x30
 8014810:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014814:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014818:	ebae 0305 	sub.w	r3, lr, r5
 801481c:	6123      	str	r3, [r4, #16]
 801481e:	f8cd 8000 	str.w	r8, [sp]
 8014822:	463b      	mov	r3, r7
 8014824:	aa03      	add	r2, sp, #12
 8014826:	4621      	mov	r1, r4
 8014828:	4630      	mov	r0, r6
 801482a:	f7ff feef 	bl	801460c <_printf_common>
 801482e:	3001      	adds	r0, #1
 8014830:	d155      	bne.n	80148de <_printf_i+0x1e6>
 8014832:	f04f 30ff 	mov.w	r0, #4294967295
 8014836:	b005      	add	sp, #20
 8014838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801483c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014840:	493c      	ldr	r1, [pc, #240]	; (8014934 <_printf_i+0x23c>)
 8014842:	6822      	ldr	r2, [r4, #0]
 8014844:	6818      	ldr	r0, [r3, #0]
 8014846:	f012 0f80 	tst.w	r2, #128	; 0x80
 801484a:	f100 0504 	add.w	r5, r0, #4
 801484e:	601d      	str	r5, [r3, #0]
 8014850:	d001      	beq.n	8014856 <_printf_i+0x15e>
 8014852:	6803      	ldr	r3, [r0, #0]
 8014854:	e002      	b.n	801485c <_printf_i+0x164>
 8014856:	0655      	lsls	r5, r2, #25
 8014858:	d5fb      	bpl.n	8014852 <_printf_i+0x15a>
 801485a:	8803      	ldrh	r3, [r0, #0]
 801485c:	07d0      	lsls	r0, r2, #31
 801485e:	bf44      	itt	mi
 8014860:	f042 0220 	orrmi.w	r2, r2, #32
 8014864:	6022      	strmi	r2, [r4, #0]
 8014866:	b91b      	cbnz	r3, 8014870 <_printf_i+0x178>
 8014868:	6822      	ldr	r2, [r4, #0]
 801486a:	f022 0220 	bic.w	r2, r2, #32
 801486e:	6022      	str	r2, [r4, #0]
 8014870:	2210      	movs	r2, #16
 8014872:	e7b1      	b.n	80147d8 <_printf_i+0xe0>
 8014874:	4675      	mov	r5, lr
 8014876:	fbb3 f0f2 	udiv	r0, r3, r2
 801487a:	fb02 3310 	mls	r3, r2, r0, r3
 801487e:	5ccb      	ldrb	r3, [r1, r3]
 8014880:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014884:	4603      	mov	r3, r0
 8014886:	2800      	cmp	r0, #0
 8014888:	d1f5      	bne.n	8014876 <_printf_i+0x17e>
 801488a:	e7b7      	b.n	80147fc <_printf_i+0x104>
 801488c:	6808      	ldr	r0, [r1, #0]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	6949      	ldr	r1, [r1, #20]
 8014892:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014896:	d004      	beq.n	80148a2 <_printf_i+0x1aa>
 8014898:	1d10      	adds	r0, r2, #4
 801489a:	6018      	str	r0, [r3, #0]
 801489c:	6813      	ldr	r3, [r2, #0]
 801489e:	6019      	str	r1, [r3, #0]
 80148a0:	e007      	b.n	80148b2 <_printf_i+0x1ba>
 80148a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80148a6:	f102 0004 	add.w	r0, r2, #4
 80148aa:	6018      	str	r0, [r3, #0]
 80148ac:	6813      	ldr	r3, [r2, #0]
 80148ae:	d0f6      	beq.n	801489e <_printf_i+0x1a6>
 80148b0:	8019      	strh	r1, [r3, #0]
 80148b2:	2300      	movs	r3, #0
 80148b4:	6123      	str	r3, [r4, #16]
 80148b6:	4675      	mov	r5, lr
 80148b8:	e7b1      	b.n	801481e <_printf_i+0x126>
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	1d11      	adds	r1, r2, #4
 80148be:	6019      	str	r1, [r3, #0]
 80148c0:	6815      	ldr	r5, [r2, #0]
 80148c2:	6862      	ldr	r2, [r4, #4]
 80148c4:	2100      	movs	r1, #0
 80148c6:	4628      	mov	r0, r5
 80148c8:	f7eb fc9a 	bl	8000200 <memchr>
 80148cc:	b108      	cbz	r0, 80148d2 <_printf_i+0x1da>
 80148ce:	1b40      	subs	r0, r0, r5
 80148d0:	6060      	str	r0, [r4, #4]
 80148d2:	6863      	ldr	r3, [r4, #4]
 80148d4:	6123      	str	r3, [r4, #16]
 80148d6:	2300      	movs	r3, #0
 80148d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148dc:	e79f      	b.n	801481e <_printf_i+0x126>
 80148de:	6923      	ldr	r3, [r4, #16]
 80148e0:	462a      	mov	r2, r5
 80148e2:	4639      	mov	r1, r7
 80148e4:	4630      	mov	r0, r6
 80148e6:	47c0      	blx	r8
 80148e8:	3001      	adds	r0, #1
 80148ea:	d0a2      	beq.n	8014832 <_printf_i+0x13a>
 80148ec:	6823      	ldr	r3, [r4, #0]
 80148ee:	079b      	lsls	r3, r3, #30
 80148f0:	d507      	bpl.n	8014902 <_printf_i+0x20a>
 80148f2:	2500      	movs	r5, #0
 80148f4:	f104 0919 	add.w	r9, r4, #25
 80148f8:	68e3      	ldr	r3, [r4, #12]
 80148fa:	9a03      	ldr	r2, [sp, #12]
 80148fc:	1a9b      	subs	r3, r3, r2
 80148fe:	429d      	cmp	r5, r3
 8014900:	db05      	blt.n	801490e <_printf_i+0x216>
 8014902:	68e0      	ldr	r0, [r4, #12]
 8014904:	9b03      	ldr	r3, [sp, #12]
 8014906:	4298      	cmp	r0, r3
 8014908:	bfb8      	it	lt
 801490a:	4618      	movlt	r0, r3
 801490c:	e793      	b.n	8014836 <_printf_i+0x13e>
 801490e:	2301      	movs	r3, #1
 8014910:	464a      	mov	r2, r9
 8014912:	4639      	mov	r1, r7
 8014914:	4630      	mov	r0, r6
 8014916:	47c0      	blx	r8
 8014918:	3001      	adds	r0, #1
 801491a:	d08a      	beq.n	8014832 <_printf_i+0x13a>
 801491c:	3501      	adds	r5, #1
 801491e:	e7eb      	b.n	80148f8 <_printf_i+0x200>
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1a7      	bne.n	8014874 <_printf_i+0x17c>
 8014924:	780b      	ldrb	r3, [r1, #0]
 8014926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801492a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801492e:	e765      	b.n	80147fc <_printf_i+0x104>
 8014930:	08017fee 	.word	0x08017fee
 8014934:	08017fdd 	.word	0x08017fdd

08014938 <_read_r>:
 8014938:	b538      	push	{r3, r4, r5, lr}
 801493a:	4c07      	ldr	r4, [pc, #28]	; (8014958 <_read_r+0x20>)
 801493c:	4605      	mov	r5, r0
 801493e:	4608      	mov	r0, r1
 8014940:	4611      	mov	r1, r2
 8014942:	2200      	movs	r2, #0
 8014944:	6022      	str	r2, [r4, #0]
 8014946:	461a      	mov	r2, r3
 8014948:	f7fe fe96 	bl	8013678 <_read>
 801494c:	1c43      	adds	r3, r0, #1
 801494e:	d102      	bne.n	8014956 <_read_r+0x1e>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	b103      	cbz	r3, 8014956 <_read_r+0x1e>
 8014954:	602b      	str	r3, [r5, #0]
 8014956:	bd38      	pop	{r3, r4, r5, pc}
 8014958:	20002480 	.word	0x20002480

0801495c <_realloc_r>:
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495e:	4607      	mov	r7, r0
 8014960:	4614      	mov	r4, r2
 8014962:	460e      	mov	r6, r1
 8014964:	b921      	cbnz	r1, 8014970 <_realloc_r+0x14>
 8014966:	4611      	mov	r1, r2
 8014968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801496c:	f7ff bb4e 	b.w	801400c <_malloc_r>
 8014970:	b922      	cbnz	r2, 801497c <_realloc_r+0x20>
 8014972:	f7ff fafd 	bl	8013f70 <_free_r>
 8014976:	4625      	mov	r5, r4
 8014978:	4628      	mov	r0, r5
 801497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801497c:	f000 f814 	bl	80149a8 <_malloc_usable_size_r>
 8014980:	4284      	cmp	r4, r0
 8014982:	d90f      	bls.n	80149a4 <_realloc_r+0x48>
 8014984:	4621      	mov	r1, r4
 8014986:	4638      	mov	r0, r7
 8014988:	f7ff fb40 	bl	801400c <_malloc_r>
 801498c:	4605      	mov	r5, r0
 801498e:	2800      	cmp	r0, #0
 8014990:	d0f2      	beq.n	8014978 <_realloc_r+0x1c>
 8014992:	4631      	mov	r1, r6
 8014994:	4622      	mov	r2, r4
 8014996:	f7ff fabd 	bl	8013f14 <memcpy>
 801499a:	4631      	mov	r1, r6
 801499c:	4638      	mov	r0, r7
 801499e:	f7ff fae7 	bl	8013f70 <_free_r>
 80149a2:	e7e9      	b.n	8014978 <_realloc_r+0x1c>
 80149a4:	4635      	mov	r5, r6
 80149a6:	e7e7      	b.n	8014978 <_realloc_r+0x1c>

080149a8 <_malloc_usable_size_r>:
 80149a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80149ac:	2800      	cmp	r0, #0
 80149ae:	f1a0 0004 	sub.w	r0, r0, #4
 80149b2:	bfbc      	itt	lt
 80149b4:	580b      	ldrlt	r3, [r1, r0]
 80149b6:	18c0      	addlt	r0, r0, r3
 80149b8:	4770      	bx	lr
	...

080149bc <_init>:
 80149bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149be:	bf00      	nop
 80149c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149c2:	bc08      	pop	{r3}
 80149c4:	469e      	mov	lr, r3
 80149c6:	4770      	bx	lr

080149c8 <_fini>:
 80149c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ca:	bf00      	nop
 80149cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149ce:	bc08      	pop	{r3}
 80149d0:	469e      	mov	lr, r3
 80149d2:	4770      	bx	lr
